{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNTgwMTA0", "number": 14969, "title": "Dynamic filtering connector implementation", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-08-05T18:55:59Z", "url": "https://github.com/prestodb/presto/pull/14969", "merged": true, "mergeCommit": {"oid": "53c89ab0b52bed2d2bb3eae61a4ec1eada204285"}, "closed": true, "closedAt": "2020-08-07T20:59:51Z", "author": {"login": "kewang1024"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8AJZSAFqTQ2MTk0OTA2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8q4uzgFqTQ2MzYwNzc5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTQ5MDY4", "url": "https://github.com/prestodb/presto/pull/14969#pullrequestreview-461949068", "createdAt": "2020-08-05T19:11:45Z", "commit": {"oid": "d25f2e66fc4d6080f850c125ec4110ecafb775be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxMTo0NVrOG8XA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxMTo0NVrOG8XA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NDgwNw==", "bodyText": "As discussed offline yesterday. We should put dynamicFilterPredicate in SplitContext rather than creating new interfaces in SPI.", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r465944807", "createdAt": "2020-08-05T19:11:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveTableLayoutHandle.java", "diffHunk": "@@ -210,6 +213,16 @@ public String getLayoutString()\n         return requestedColumns;\n     }\n \n+    public void withDynamicFilterPredicate(TupleDomain<ColumnHandle> dynamicFilterPredicate)\n+    {\n+        this.dynamicFilterPredicate = dynamicFilterPredicate;\n+    }\n+\n+    public TupleDomain<ColumnHandle> getDynamicFilterPredicate()\n+    {\n+        return dynamicFilterPredicate;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25f2e66fc4d6080f850c125ec4110ecafb775be"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c613bb8711e6fd44b3aa9457173b81c96389b7e", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/6c613bb8711e6fd44b3aa9457173b81c96389b7e", "committedDate": "2020-08-05T18:53:53Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "6d7c060431bb547e40a1b38d4d009e41bdc4ff31", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/6d7c060431bb547e40a1b38d4d009e41bdc4ff31", "committedDate": "2020-08-05T20:18:09Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d7c060431bb547e40a1b38d4d009e41bdc4ff31", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/6d7c060431bb547e40a1b38d4d009e41bdc4ff31", "committedDate": "2020-08-05T20:18:09Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "3d26a168e78257d3ed68cbd13ba13fce150d1b52", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/3d26a168e78257d3ed68cbd13ba13fce150d1b52", "committedDate": "2020-08-05T22:06:16Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d26a168e78257d3ed68cbd13ba13fce150d1b52", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/3d26a168e78257d3ed68cbd13ba13fce150d1b52", "committedDate": "2020-08-05T22:06:16Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6", "committedDate": "2020-08-05T22:32:14Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjIyOTE0", "url": "https://github.com/prestodb/presto/pull/14969#pullrequestreview-462222914", "createdAt": "2020-08-06T06:34:41Z", "commit": {"oid": "494294d394454ac213a4060ca8e95cc1e138dc49"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjozNDo0MVrOG8lHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjo0MzozMlrOG8lVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NTg0OA==", "bodyText": "private final Optional<private TupleDomain> dynamicFilterPredicate;", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466175848", "createdAt": "2020-08-06T06:34:41Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -23,6 +24,9 @@\n \n     private final boolean cacheable;\n \n+    // This is not serializable; for local execution only\n+    private TupleDomain<ColumnHandle> dynamicFilterPredicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494294d394454ac213a4060ca8e95cc1e138dc49"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjAyOQ==", "bodyText": "Just create a new SplitContext. We usually don't have mutable member variables.", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466176029", "createdAt": "2020-08-06T06:35:06Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -34,4 +38,14 @@ public boolean isCacheable()\n     {\n         return cacheable;\n     }\n+\n+    public TupleDomain<ColumnHandle> getDynamicFilterPredicate()\n+    {\n+        return dynamicFilterPredicate;\n+    }\n+\n+    public void setDynamicFilterPredicate(TupleDomain<ColumnHandle> dynamicFilterPredicate)\n+    {\n+        this.dynamicFilterPredicate = dynamicFilterPredicate;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494294d394454ac213a4060ca8e95cc1e138dc49"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjEwNg==", "bodyText": "Just create a new SplitContext", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466176106", "createdAt": "2020-08-06T06:35:17Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/split/PageSourceManager.java", "diffHunk": "@@ -58,14 +58,14 @@ public ConnectorPageSource createPageSource(Session session, Split split, TableH\n         requireNonNull(split, \"split is null\");\n         requireNonNull(columns, \"columns is null\");\n \n-        // TODO: push the tuple domain to underlying connectors\n         Optional<Supplier<TupleDomain<ColumnHandle>>> dynamicFilter = table.getDynamicFilter();\n \n         // directly return the result if the given constraint is always false\n         if (dynamicFilter.isPresent() && dynamicFilter.get().get().isNone()) {\n             return new FixedPageSource(ImmutableList.of());\n         }\n \n+        dynamicFilter.ifPresent(filter -> split.getSplitContext().setDynamicFilterPredicate(filter.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494294d394454ac213a4060ca8e95cc1e138dc49"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NzA0NQ==", "bodyText": "The prerequisite of having this new class is to remove those tests from AbstractTestQueries. 9925cd3 is an example for window function", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466177045", "createdAt": "2020-08-06T06:37:41Z", "author": {"login": "highker"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestJoinQueries.java", "diffHunk": "@@ -0,0 +1,2275 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.tests;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.SystemSessionProperties;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.testing.MaterializedRow;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.SystemSessionProperties.JOIN_DISTRIBUTION_TYPE;\n+import static com.facebook.presto.SystemSessionProperties.JOIN_REORDERING_STRATEGY;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n+import static com.facebook.presto.testing.assertions.Assert.assertEquals;\n+import static com.facebook.presto.tests.QueryAssertions.assertEqualsIgnoreOrder;\n+import static com.facebook.presto.tests.QueryTemplate.parameter;\n+import static com.facebook.presto.tests.QueryTemplate.queryTemplate;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertTrue;\n+\n+public class AbstractTestJoinQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3OTM3OA==", "bodyText": "Move all these to the same line with the previous line", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466179378", "createdAt": "2020-08-06T06:43:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFiltering.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.operator.OperatorStats;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.sql.planner.Plan;\n+import com.facebook.presto.sql.planner.optimizations.PlanNodeSearcher;\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestJoinQueries;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.facebook.presto.tests.ResultWithQueryId;\n+import com.google.common.collect.MoreCollectors;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.airlift.testing.Assertions.assertGreaterThan;\n+import static com.facebook.airlift.testing.Assertions.assertLessThanOrEqual;\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.SystemSessionProperties.JOIN_DISTRIBUTION_TYPE;\n+import static com.facebook.presto.hive.HiveQueryRunner.createQueryRunner;\n+import static io.airlift.tpch.TpchTable.getTables;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveDistributedJoinQueriesWithDynamicFiltering\n+        extends AbstractTestJoinQueries\n+{\n+    public TestHiveDistributedJoinQueriesWithDynamicFiltering()\n+    {\n+        super(() -> createQueryRunner(getTables()));\n+    }\n+\n+    @Override\n+    protected Session getSession()\n+    {\n+        return Session.builder(super.getSession())\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"true\")\n+                .build();\n+    }\n+\n+    @Test\n+    public void testJoinWithEmptyBuildSide()\n+    {\n+        Session session = Session.builder(getSession())\n+                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n+                .build();\n+        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n+                session,\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice = 123.4567\");\n+        assertEquals(result.getResult().getRowCount(), 0);\n+\n+        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), \"lineitem\");\n+        // Probe-side is not scanned at all, due to dynamic filtering:\n+        assertEquals(probeStats.getInputPositions(), 0L);\n+    }\n+\n+    @Test\n+    public void testJoinWithSelectiveBuildSide()\n+    {\n+        Session session = Session.builder(getSession())\n+                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n+                .build();\n+        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n+                session,\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.custkey = 1\");\n+        assertGreaterThan(result.getResult().getRowCount(), 0);\n+\n+        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), \"lineitem\");\n+        // Probe side may be partially scanned, depending on the drivers' scheduling:\n+        assertLessThanOrEqual(probeStats.getInputPositions(), countRows(\"lineitem\"));\n+    }\n+\n+    private OperatorStats searchScanFilterAndProjectOperatorStats(QueryId queryId, String tableName)\n+    {\n+        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n+        Plan plan = runner.getQueryPlan(queryId);\n+        PlanNodeId nodeId = PlanNodeSearcher.searchFrom(plan.getRoot())\n+                .where(node -> {\n+                    if (!(node instanceof ProjectNode)) {\n+                        return false;\n+                    }\n+                    ProjectNode projectNode = (ProjectNode) node;\n+                    FilterNode filterNode = (FilterNode) projectNode.getSource();\n+                    TableScanNode tableScanNode = (TableScanNode) filterNode.getSource();\n+                    return tableName.equals(((HiveTableHandle) (tableScanNode.getTable().getConnectorHandle())).getTableName());\n+                })\n+                .findOnlyElement()\n+                .getId();\n+        return runner.getCoordinator()\n+                .getQueryManager()\n+                .getFullQueryInfo(queryId)\n+                .getQueryStats()\n+                .getOperatorSummaries()\n+                .stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/2dfd0c2c8cb4b1ea5dbac8a6cc4177e3514226c6", "committedDate": "2020-08-05T22:32:14Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "4157cef33ad2b08e093900279f8b26e6d7da45fc", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/4157cef33ad2b08e093900279f8b26e6d7da45fc", "committedDate": "2020-08-06T08:08:02Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4157cef33ad2b08e093900279f8b26e6d7da45fc", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/4157cef33ad2b08e093900279f8b26e6d7da45fc", "committedDate": "2020-08-06T08:08:02Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "f91a80023dfbc556cfd7633d4eeb256c4ae1eb52", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/f91a80023dfbc556cfd7633d4eeb256c4ae1eb52", "committedDate": "2020-08-06T08:11:45Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f91a80023dfbc556cfd7633d4eeb256c4ae1eb52", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/f91a80023dfbc556cfd7633d4eeb256c4ae1eb52", "committedDate": "2020-08-06T08:11:45Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "2c16f3750d38200b40c5c111d61c92dc4dc222f4", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/2c16f3750d38200b40c5c111d61c92dc4dc222f4", "committedDate": "2020-08-06T16:49:07Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c16f3750d38200b40c5c111d61c92dc4dc222f4", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/2c16f3750d38200b40c5c111d61c92dc4dc222f4", "committedDate": "2020-08-06T16:49:07Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "f476978ba395a508134b6ed4463bd3373d19c417", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/f476978ba395a508134b6ed4463bd3373d19c417", "committedDate": "2020-08-06T22:09:26Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f476978ba395a508134b6ed4463bd3373d19c417", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/f476978ba395a508134b6ed4463bd3373d19c417", "committedDate": "2020-08-06T22:09:26Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "e1fb2cc9e4235162a456aad9411774af40b50d8d", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/e1fb2cc9e4235162a456aad9411774af40b50d8d", "committedDate": "2020-08-06T22:20:25Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTgyNjcz", "url": "https://github.com/prestodb/presto/pull/14969#pullrequestreview-462982673", "createdAt": "2020-08-07T01:42:35Z", "commit": {"oid": "18be783f8b3e3a28c83643f03d355a331f8db655"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo0MjozNlrOG9JqLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1MDozNVrOG9Jx6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NDU3Mw==", "bodyText": "the data structure is serializable. It's \"// For local execution only; no need for serialization.\"", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466774573", "createdAt": "2020-08-07T01:42:36Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -13,25 +13,42 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.common.predicate.TupleDomain;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n+import java.util.Optional;\n+\n // TODO: Use builder pattern for SplitContext if we are to add optional field\n public class SplitContext\n {\n     public static final SplitContext NON_CACHEABLE = new SplitContext(false);\n \n     private final boolean cacheable;\n+    // This is not serializable; for local execution only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be783f8b3e3a28c83643f03d355a331f8db655"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NTQ4NA==", "bodyText": "@JsonCreator\n    public SplitContext(@JsonProperty boolean cacheable)\n    {\n        this(cacheable, Optional.empty());\n    }\n\n    public SplitContext(boolean cacheable, TupleDomain<ColumnHandle> dynamicFilterPredicate)\n    {\n        this(cacheable, Optional.of(requireNonNull(dynamicFilterPredicate, \"dynamicFilterPredicate is null\")));\n    }\n\n    private SplitContext(boolean cacheable, Optional<TupleDomain<ColumnHandle>> dynamicFilterPredicate)\n    {\n        this.cacheable = cacheable;\n        this.dynamicFilterPredicate = dynamicFilterPredicate;\n    }", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466775484", "createdAt": "2020-08-07T01:46:03Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -13,25 +13,42 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.common.predicate.TupleDomain;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n+import java.util.Optional;\n+\n // TODO: Use builder pattern for SplitContext if we are to add optional field\n public class SplitContext\n {\n     public static final SplitContext NON_CACHEABLE = new SplitContext(false);\n \n     private final boolean cacheable;\n+    // This is not serializable; for local execution only\n+    private final Optional<TupleDomain<ColumnHandle>> dynamicFilterPredicate;\n \n     @JsonCreator\n     public SplitContext(@JsonProperty boolean cacheable)\n     {\n         this.cacheable = cacheable;\n+        this.dynamicFilterPredicate = Optional.empty();\n+    }\n+\n+    public SplitContext(boolean cacheable, TupleDomain<ColumnHandle> dynamicFilterPredicate)\n+    {\n+        this.cacheable = cacheable;\n+        this.dynamicFilterPredicate = Optional.of(dynamicFilterPredicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be783f8b3e3a28c83643f03d355a331f8db655"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjU1Mg==", "bodyText": "splitContext.getDynamicFilterPredicate().map(filter -> filter.transform(handle -> (HiveColumnHandle) handle).intersect(effectivePredicate)).orElse(effectivePredicate)\nsame for the other one", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466776552", "createdAt": "2020-08-07T01:50:35Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -164,9 +168,9 @@ public ConnectorPageSource createPageSource(\n                 hiveSplit.getLength(),\n                 hiveSplit.getFileSize(),\n                 hiveSplit.getStorage(),\n-                hiveLayout.getDomainPredicate()\n-                        .transform(Subfield::getRootName)\n-                        .transform(hiveLayout.getPredicateColumns()::get),\n+                !splitContext.getDynamicFilterPredicate().isPresent()\n+                        ? effectivePredicate\n+                        : effectivePredicate.intersect(splitContext.getDynamicFilterPredicate().get().transform(handle -> (HiveColumnHandle) handle)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be783f8b3e3a28c83643f03d355a331f8db655"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTg1NjQ2", "url": "https://github.com/prestodb/presto/pull/14969#pullrequestreview-462985646", "createdAt": "2020-08-07T01:53:36Z", "commit": {"oid": "e1fb2cc9e4235162a456aad9411774af40b50d8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1MzozNlrOG9J0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1MzozNlrOG9J0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NzI1MA==", "bodyText": "Do we need to enable broadcast join as well?", "url": "https://github.com/prestodb/presto/pull/14969#discussion_r466777250", "createdAt": "2020-08-07T01:53:36Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFiltering.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.operator.OperatorStats;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.sql.planner.Plan;\n+import com.facebook.presto.sql.planner.optimizations.PlanNodeSearcher;\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestJoinQueries;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.facebook.presto.tests.ResultWithQueryId;\n+import com.google.common.collect.MoreCollectors;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.airlift.testing.Assertions.assertGreaterThan;\n+import static com.facebook.airlift.testing.Assertions.assertLessThanOrEqual;\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.SystemSessionProperties.JOIN_DISTRIBUTION_TYPE;\n+import static com.facebook.presto.hive.HiveQueryRunner.createQueryRunner;\n+import static io.airlift.tpch.TpchTable.getTables;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveDistributedJoinQueriesWithDynamicFiltering\n+        extends AbstractTestJoinQueries\n+{\n+    public TestHiveDistributedJoinQueriesWithDynamicFiltering()\n+    {\n+        super(() -> createQueryRunner(getTables()));\n+    }\n+\n+    @Override\n+    protected Session getSession()\n+    {\n+        return Session.builder(super.getSession())\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fb2cc9e4235162a456aad9411774af40b50d8d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f580a33c1789006ac23405b43f2e65b7916aea", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/87f580a33c1789006ac23405b43f2e65b7916aea", "committedDate": "2020-08-07T06:29:11Z", "message": "Push dynamic filter to HivePageSourceProvider\n\nCo-Authored-By: James Sun <jamessun@fb.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6342b0bef688d9e58c540bd19d1fc367785e14b", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/c6342b0bef688d9e58c540bd19d1fc367785e14b", "committedDate": "2020-08-07T06:44:17Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1fb2cc9e4235162a456aad9411774af40b50d8d", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/e1fb2cc9e4235162a456aad9411774af40b50d8d", "committedDate": "2020-08-06T22:20:25Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}, "afterCommit": {"oid": "c6342b0bef688d9e58c540bd19d1fc367785e14b", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/c6342b0bef688d9e58c540bd19d1fc367785e14b", "committedDate": "2020-08-07T06:44:17Z", "message": "Run distributed Hive join tests with and without dynamic filtering\n\nCherry pick from https://github.com/prestosql/presto/pull/1686/commits/c070ca8b4943cb5b0542651ff120c22bda192354\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Roman Zeyde <zeyde@varada.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjA3Nzk1", "url": "https://github.com/prestodb/presto/pull/14969#pullrequestreview-463607795", "createdAt": "2020-08-07T20:59:31Z", "commit": {"oid": "c6342b0bef688d9e58c540bd19d1fc367785e14b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 442, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}