{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDI5NTUy", "number": 14498, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NDoyMlrOD6gprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDowMTozNlrOEXC5vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc4OTU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NDoyM1rOGSY2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NDoyM1rOGSY2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNDc5OA==", "bodyText": "We should rethrow\n        catch (InvalidFunctionArgumentException e) {\n            closeWithSuppression(e);\n            throw new PrestoException(INVALID_.....);\n        }", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421934798", "createdAt": "2020-05-08T04:44:23Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSource.java", "diffHunk": "@@ -87,7 +88,7 @@ public Page getNextPage()\n             }\n             return page;\n         }\n-        catch (PrestoException e) {\n+        catch (PrestoException | InvalidFunctionArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc5e395266ba4248eb05d7d81334783643f370c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc5MjE3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NjowMVrOGSY4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NjowMVrOGSY4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTE3OA==", "bodyText": "Same, rethrow", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421935178", "createdAt": "2020-05-08T04:46:01Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSource.java", "diffHunk": "@@ -88,7 +89,7 @@ public Page getNextPage()\n             }\n             return page;\n         }\n-        catch (PrestoException | InvalidFunctionArgumentException e) {\n+        catch (PrestoException | InvalidFunctionArgumentException | NotSupportedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e10686d748e1456214d23fa228aad6d947177c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjgwMzMyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo1MzoyMFrOGSY-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzowMDozNVrOGSbe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjg3Mw==", "bodyText": "Seems NOT_SUPPORTED is only thrown by OrcWriter but not reader. Did I miss anything?", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421936873", "createdAt": "2020-05-08T04:53:20Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -360,23 +362,29 @@ public static OrcSelectivePageSource createOrcPageSource(\n \n             List<FilterFunction> filterFunctions = toFilterFunctions(replaceExpression(remainingPredicate, variableToInput), bucketAdapter, session, rowExpressionService.getDeterminismEvaluator(), rowExpressionService.getPredicateCompiler());\n \n-            OrcSelectiveRecordReader recordReader = reader.createSelectiveRecordReader(\n-                    columnTypes,\n-                    outputIndices,\n-                    tupleDomainFilters,\n-                    filterFunctions,\n-                    inputs.inverse(),\n-                    requiredSubfields,\n-                    typedPrefilledValues,\n-                    Maps.transformValues(mappedCoercers, Function.class::cast),\n-                    orcPredicate,\n-                    start,\n-                    length,\n-                    hiveStorageTimeZone,\n-                    session.getSqlFunctionProperties().isLegacyMapSubscript(),\n-                    systemMemoryUsage,\n-                    Optional.empty(),\n-                    INITIAL_BATCH_SIZE);\n+            OrcSelectiveRecordReader recordReader;\n+            try {\n+                recordReader = reader.createSelectiveRecordReader(\n+                        columnTypes,\n+                        outputIndices,\n+                        tupleDomainFilters,\n+                        filterFunctions,\n+                        inputs.inverse(),\n+                        requiredSubfields,\n+                        typedPrefilledValues,\n+                        Maps.transformValues(mappedCoercers, Function.class::cast),\n+                        orcPredicate,\n+                        start,\n+                        length,\n+                        hiveStorageTimeZone,\n+                        session.getSqlFunctionProperties().isLegacyMapSubscript(),\n+                        systemMemoryUsage,\n+                        Optional.empty(),\n+                        INITIAL_BATCH_SIZE);\n+            }\n+            catch (NotSupportedException e) {\n+                throw new PrestoException(NOT_SUPPORTED, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e10686d748e1456214d23fa228aad6d947177c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0ODE0Mg==", "bodyText": "OrcSelectivePageSourceFactory.createSelectiveRecordReader() --> OrcReader.createSelectiveRecordReader() --> new OrcSelectiveRecordReader() --> super --> AbstractOrcRecordReader() --> createWriteStatisticsBuilder() --> new StatisticsValidation() --> new ColumnStatisticsValidation() --> NotSupportedException", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421948142", "createdAt": "2020-05-08T05:35:42Z", "author": {"login": "NikhilCollooru"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -360,23 +362,29 @@ public static OrcSelectivePageSource createOrcPageSource(\n \n             List<FilterFunction> filterFunctions = toFilterFunctions(replaceExpression(remainingPredicate, variableToInput), bucketAdapter, session, rowExpressionService.getDeterminismEvaluator(), rowExpressionService.getPredicateCompiler());\n \n-            OrcSelectiveRecordReader recordReader = reader.createSelectiveRecordReader(\n-                    columnTypes,\n-                    outputIndices,\n-                    tupleDomainFilters,\n-                    filterFunctions,\n-                    inputs.inverse(),\n-                    requiredSubfields,\n-                    typedPrefilledValues,\n-                    Maps.transformValues(mappedCoercers, Function.class::cast),\n-                    orcPredicate,\n-                    start,\n-                    length,\n-                    hiveStorageTimeZone,\n-                    session.getSqlFunctionProperties().isLegacyMapSubscript(),\n-                    systemMemoryUsage,\n-                    Optional.empty(),\n-                    INITIAL_BATCH_SIZE);\n+            OrcSelectiveRecordReader recordReader;\n+            try {\n+                recordReader = reader.createSelectiveRecordReader(\n+                        columnTypes,\n+                        outputIndices,\n+                        tupleDomainFilters,\n+                        filterFunctions,\n+                        inputs.inverse(),\n+                        requiredSubfields,\n+                        typedPrefilledValues,\n+                        Maps.transformValues(mappedCoercers, Function.class::cast),\n+                        orcPredicate,\n+                        start,\n+                        length,\n+                        hiveStorageTimeZone,\n+                        session.getSqlFunctionProperties().isLegacyMapSubscript(),\n+                        systemMemoryUsage,\n+                        Optional.empty(),\n+                        INITIAL_BATCH_SIZE);\n+            }\n+            catch (NotSupportedException e) {\n+                throw new PrestoException(NOT_SUPPORTED, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjg3Mw=="}, "originalCommit": {"oid": "17e10686d748e1456214d23fa228aad6d947177c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MDY5Mg==", "bodyText": "Got it. I think we can relax any orc writer validation-related callsites. Let's replace NOT_SUPPORTED with generic internal error for it. The validation code was introduced for orc writer rollout. It is not used anymore.", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421950692", "createdAt": "2020-05-08T05:44:51Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -360,23 +362,29 @@ public static OrcSelectivePageSource createOrcPageSource(\n \n             List<FilterFunction> filterFunctions = toFilterFunctions(replaceExpression(remainingPredicate, variableToInput), bucketAdapter, session, rowExpressionService.getDeterminismEvaluator(), rowExpressionService.getPredicateCompiler());\n \n-            OrcSelectiveRecordReader recordReader = reader.createSelectiveRecordReader(\n-                    columnTypes,\n-                    outputIndices,\n-                    tupleDomainFilters,\n-                    filterFunctions,\n-                    inputs.inverse(),\n-                    requiredSubfields,\n-                    typedPrefilledValues,\n-                    Maps.transformValues(mappedCoercers, Function.class::cast),\n-                    orcPredicate,\n-                    start,\n-                    length,\n-                    hiveStorageTimeZone,\n-                    session.getSqlFunctionProperties().isLegacyMapSubscript(),\n-                    systemMemoryUsage,\n-                    Optional.empty(),\n-                    INITIAL_BATCH_SIZE);\n+            OrcSelectiveRecordReader recordReader;\n+            try {\n+                recordReader = reader.createSelectiveRecordReader(\n+                        columnTypes,\n+                        outputIndices,\n+                        tupleDomainFilters,\n+                        filterFunctions,\n+                        inputs.inverse(),\n+                        requiredSubfields,\n+                        typedPrefilledValues,\n+                        Maps.transformValues(mappedCoercers, Function.class::cast),\n+                        orcPredicate,\n+                        start,\n+                        length,\n+                        hiveStorageTimeZone,\n+                        session.getSqlFunctionProperties().isLegacyMapSubscript(),\n+                        systemMemoryUsage,\n+                        Optional.empty(),\n+                        INITIAL_BATCH_SIZE);\n+            }\n+            catch (NotSupportedException e) {\n+                throw new PrestoException(NOT_SUPPORTED, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjg3Mw=="}, "originalCommit": {"oid": "17e10686d748e1456214d23fa228aad6d947177c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3Nzg1Mw==", "bodyText": "Oh okay got it. Will throw as GenericInternalException.", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r421977853", "createdAt": "2020-05-08T07:00:35Z", "author": {"login": "NikhilCollooru"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -360,23 +362,29 @@ public static OrcSelectivePageSource createOrcPageSource(\n \n             List<FilterFunction> filterFunctions = toFilterFunctions(replaceExpression(remainingPredicate, variableToInput), bucketAdapter, session, rowExpressionService.getDeterminismEvaluator(), rowExpressionService.getPredicateCompiler());\n \n-            OrcSelectiveRecordReader recordReader = reader.createSelectiveRecordReader(\n-                    columnTypes,\n-                    outputIndices,\n-                    tupleDomainFilters,\n-                    filterFunctions,\n-                    inputs.inverse(),\n-                    requiredSubfields,\n-                    typedPrefilledValues,\n-                    Maps.transformValues(mappedCoercers, Function.class::cast),\n-                    orcPredicate,\n-                    start,\n-                    length,\n-                    hiveStorageTimeZone,\n-                    session.getSqlFunctionProperties().isLegacyMapSubscript(),\n-                    systemMemoryUsage,\n-                    Optional.empty(),\n-                    INITIAL_BATCH_SIZE);\n+            OrcSelectiveRecordReader recordReader;\n+            try {\n+                recordReader = reader.createSelectiveRecordReader(\n+                        columnTypes,\n+                        outputIndices,\n+                        tupleDomainFilters,\n+                        filterFunctions,\n+                        inputs.inverse(),\n+                        requiredSubfields,\n+                        typedPrefilledValues,\n+                        Maps.transformValues(mappedCoercers, Function.class::cast),\n+                        orcPredicate,\n+                        start,\n+                        length,\n+                        hiveStorageTimeZone,\n+                        session.getSqlFunctionProperties().isLegacyMapSubscript(),\n+                        systemMemoryUsage,\n+                        Optional.empty(),\n+                        INITIAL_BATCH_SIZE);\n+            }\n+            catch (NotSupportedException e) {\n+                throw new PrestoException(NOT_SUPPORTED, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjg3Mw=="}, "originalCommit": {"oid": "17e10686d748e1456214d23fa228aad6d947177c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODkxMDgyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxMDowMlrOGSszlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1NjozOFrOGSxxIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MTY1Mg==", "bodyText": "But checking the callsites, I think we need to catch NotSupportedException for getNextPage method in both OrcBatchPageSource and OrcSelectivePageSource. We also need to catch InvalidFunctionArgumentException for OrcBatchPageSource.getNextPage", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r422261652", "createdAt": "2020-05-08T17:10:02Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +116,9 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);\n+        propagateIfPossible(throwable, InvalidFunctionArgumentException.class);\n+        propagateIfPossible(throwable, NotSupportedException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33eef3675f3185cb7a832e5cc977588746c2079"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMjI2MA==", "bodyText": "Actually i blindly replaced PrestoException here will all three. But looking deeper , will PrestoException ever be raised  by its callers  readBloomFilterIndexes(), readRowIndexes(), readStripeFooter() etc ?", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r422332260", "createdAt": "2020-05-08T19:33:11Z", "author": {"login": "NikhilCollooru"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +116,9 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);\n+        propagateIfPossible(throwable, InvalidFunctionArgumentException.class);\n+        propagateIfPossible(throwable, NotSupportedException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MTY1Mg=="}, "originalCommit": {"oid": "d33eef3675f3185cb7a832e5cc977588746c2079"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzODYyMg==", "bodyText": "Actually, is it even possible for throwable here to be InvalidFunctionArgumentException, NotSupportedException, etc?", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r422338622", "createdAt": "2020-05-08T19:47:15Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +116,9 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);\n+        propagateIfPossible(throwable, InvalidFunctionArgumentException.class);\n+        propagateIfPossible(throwable, NotSupportedException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MTY1Mg=="}, "originalCommit": {"oid": "d33eef3675f3185cb7a832e5cc977588746c2079"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjM3NQ==", "bodyText": "Its not possible. I think we should remove all propagateIfPossible ?", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r422342375", "createdAt": "2020-05-08T19:55:26Z", "author": {"login": "NikhilCollooru"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +116,9 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);\n+        propagateIfPossible(throwable, InvalidFunctionArgumentException.class);\n+        propagateIfPossible(throwable, NotSupportedException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MTY1Mg=="}, "originalCommit": {"oid": "d33eef3675f3185cb7a832e5cc977588746c2079"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0Mjk0NQ==", "bodyText": "SG, let's remove", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r422342945", "createdAt": "2020-05-08T19:56:38Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +116,9 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);\n+        propagateIfPossible(throwable, InvalidFunctionArgumentException.class);\n+        propagateIfPossible(throwable, NotSupportedException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MTY1Mg=="}, "originalCommit": {"oid": "d33eef3675f3185cb7a832e5cc977588746c2079"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjAwMjU0OnYy", "diffSide": "LEFT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDowMTozNlrOG-nkIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDowNzoyOFrOG-nphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMzEyMQ==", "bodyText": "Why this line get removed as well? -- I have seen IOException (e.g. connection reset when reading from storage system) are now treated as HIVE_BAD_DATA  due to Presto thought it's OrcCorruptionException?\ncc @NikhilCollooru , @highker", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r468313121", "createdAt": "2020-08-11T04:01:36Z", "author": {"login": "wenleix"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +112,6 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d24058443f7bc60ddd96422384f43457b54c58"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxNDUwMA==", "bodyText": "I see. Because we want to drop PrestoException class from presto-orc. But in that case shouldn't we figure out some way to propagate it (without referring to PrestoException)?", "url": "https://github.com/prestodb/presto/pull/14498#discussion_r468314500", "createdAt": "2020-08-11T04:07:28Z", "author": {"login": "wenleix"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/ExceptionWrappingMetadataReader.java", "diffHunk": "@@ -114,7 +112,6 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n \n     private OrcCorruptionException propagate(Throwable throwable, String message)\n     {\n-        propagateIfPossible(throwable, PrestoException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMzEyMQ=="}, "originalCommit": {"oid": "23d24058443f7bc60ddd96422384f43457b54c58"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2592, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}