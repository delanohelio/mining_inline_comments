{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Nzc1NzI4", "number": 14113, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxODo1MVrODnSRtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNjowMlrODno4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIwNTAzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxODo1MVrOF1MgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxODo1MVrOF1MgRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzcxNw==", "bodyText": "nit: requireNonNull", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391323717", "createdAt": "2020-03-11T23:18:51Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n     private final CompressionCodecName parquetCompressionCodec;\n+    private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n-    HiveCompressionCodec(Class<? extends CompressionCodec> codec, CompressionKind orcCompressionKind, CompressionCodecName parquetCompressionCodec)\n+    HiveCompressionCodec(\n+            Class<? extends CompressionCodec> codec,\n+            CompressionKind orcCompressionKind,\n+            CompressionCodecName parquetCompressionCodec,\n+            Predicate<HiveStorageFormat> supportedStorageFormats)\n     {\n         this.codec = Optional.ofNullable(codec);\n         this.orcCompressionKind = requireNonNull(orcCompressionKind, \"orcCompressionKind is null\");\n-        this.parquetCompressionCodec = requireNonNull(parquetCompressionCodec, \"parquetCompressionCodec is null\");\n+        this.parquetCompressionCodec = parquetCompressionCodec;\n+        this.supportedStorageFormats = supportedStorageFormats;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIwNjU1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxOTo1MFrOF1MhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MTo1MlrOF1R_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ==", "bodyText": "nit: f -> false might be shorter and easier to read", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391323969", "createdAt": "2020-03-11T23:19:50Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTc4Nw==", "bodyText": "I agree allStorageFormatsSupported().negate() might be a bit difficult to follow, but I guess @jainxrohit 's initial motivation not to  inline the lambda  is it might help a could bit with the intention (basically, the method name is used as comment).\nAn alternative way would be have a separate method noneStorageFormatsSupported . But it might make too many \"trivial\" methods.  No strong opinion here :)\nAlso: Can you use static final variable to store the lambda?", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391339787", "createdAt": "2020-03-12T00:15:30Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ=="}, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzYxMA==", "bodyText": "It seems like the general opinion seems to be on the side of using lamdas directly. I would change it.", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391413610", "createdAt": "2020-03-12T05:51:52Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ=="}, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIwNjcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxOTo1OFrOF1MhYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxOTo1OFrOF1MhYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNDAwMg==", "bodyText": "perhaps, f -> true", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391324002", "createdAt": "2020-03-11T23:19:58Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIwNzIzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoyMDoxOFrOF1MhvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoyMDoxOFrOF1MhvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNDA5Mw==", "bodyText": "perhaps, f -> f == ORC || f == DWRF", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391324093", "createdAt": "2020-03-11T23:20:18Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI1NjQ4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0NToyMlrOF1M_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0NToyMlrOF1M_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTYxOA==", "bodyText": "@jainxrohit We tend to add a message like this:\nrequireNonNull(supportedStorageFormats, \"supportedStorageFormats is null\")", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391331618", "createdAt": "2020-03-11T23:45:22Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n+    private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n-    HiveCompressionCodec(Class<? extends CompressionCodec> codec, CompressionKind orcCompressionKind, CompressionCodecName parquetCompressionCodec)\n+    HiveCompressionCodec(\n+            Class<? extends CompressionCodec> codec,\n+            CompressionKind orcCompressionKind,\n+            CompressionCodecName parquetCompressionCodec,\n+            Predicate<HiveStorageFormat> supportedStorageFormats)\n     {\n         this.codec = Optional.ofNullable(codec);\n         this.orcCompressionKind = requireNonNull(orcCompressionKind, \"orcCompressionKind is null\");\n-        this.parquetCompressionCodec = requireNonNull(parquetCompressionCodec, \"parquetCompressionCodec is null\");\n+        this.parquetCompressionCodec = Optional.ofNullable(parquetCompressionCodec);\n+        this.supportedStorageFormats = requireNonNull(supportedStorageFormats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY4ODU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MjoyNVrOF1khZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MjoyNVrOF1khZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNzIyMQ==", "bodyText": "nit: parquetCompressionCodec -> codec in the lambda\ncompression.getParquetCompressionCodec().ifPresent(codec -> config.set(ParquetOutputFormat.COMPRESSION, codec.name()));", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391717221", "createdAt": "2020-03-12T15:52:25Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java", "diffHunk": "@@ -113,7 +113,7 @@ private static void setCompressionProperties(Configuration config, HiveCompressi\n             config.unset(FileOutputFormat.COMPRESS_CODEC);\n         }\n         // For Parquet\n-        config.set(ParquetOutputFormat.COMPRESSION, compression.getParquetCompressionCodec().name());\n+        compression.getParquetCompressionCodec().ifPresent(parquetCompressionCodec -> config.set(ParquetOutputFormat.COMPRESSION, parquetCompressionCodec.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f6fe3ff4022713059ce36f1ed30296bae188cd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODkwODcxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNjowMlrOF1wYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNjowMlrOF1wYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMTQzOQ==", "bodyText": "nit: what about format -> true ? ditto for other lambdas.", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391911439", "createdAt": "2020-03-12T21:36:02Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,34 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e841b3020b443b4730393178f714496ec682730f"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3030, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}