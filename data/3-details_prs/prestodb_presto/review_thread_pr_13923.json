{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MDk3ODY4", "number": 13923, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0MzoyN1rODV5EJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0Mjo0M1rODWpkpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgxNjM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0MzoyN1rOFaV0tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0MzoyN1rOFaV0tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NDg1Mw==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363164853", "createdAt": "2020-01-06T05:43:27Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -109,12 +104,14 @@ public PlanNode optimize(PlanNode plan, Session session, TypeProvider types, Pla\n         private final PlanNodeIdAllocator idAllocator;\n         private final PlanVariableAllocator variableAllocator;\n         private final Metadata metadata;\n+        private final StandardFunctionResolution functionResolution;\n \n-        private Optimizer(PlanNodeIdAllocator idAllocator, PlanVariableAllocator variableAllocator, Metadata metadata)\n+        private Optimizer(PlanNodeIdAllocator idAllocator, PlanVariableAllocator variableAllocator, Metadata metadata, StandardFunctionResolution functionResolution)\n         {\n             this.idAllocator = requireNonNull(idAllocator, \"idAllocator is null\");\n             this.variableAllocator = requireNonNull(variableAllocator, \"variableAllocator is null\");\n             this.metadata = requireNonNull(metadata, \"metadata is null\");\n+            this.functionResolution = functionResolution;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgxODA3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0NToxMlrOFaV1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0NToxMlrOFaV1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTA5Mw==", "bodyText": "nit\nRowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, constant(0L, BIGINT));", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165093", "createdAt": "2020-01-06T05:45:12Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -225,11 +221,11 @@ public PlanNode visitAggregation(AggregationNode node, RewriteContext<Optional<A\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    Expression expression = new CoalesceExpression(new SymbolReference(variable.getName()), new Cast(new LongLiteral(\"0\"), \"bigint\"));\n-                    outputVariables.put(coalesceVariables.get(variable), castToRowExpression(expression));\n+                    SpecialFormExpression coalesce = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(Long.valueOf(0), BIGINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyMjExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0OTowNlrOFaV39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0OTowNlrOFaV39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTY4Ng==", "bodyText": "constant(1L, BIGINT)", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165686", "createdAt": "2020-01-06T05:49:06Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyMjQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0OToyM1rOFaV4HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0OToyM1rOFaV4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTcyNA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165724", "createdAt": "2020-01-06T05:49:23Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(0), BIGINT))), // TODO: this should use GROUPING()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyNjczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MzoyN1rOFaV6lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MzoyN1rOFaV6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjM1OQ==", "bodyText": "RowExpression", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166359", "createdAt": "2020-01-06T05:53:27Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyNjkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MzozM1rOFaV6rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MzozM1rOFaV6rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjM4MQ==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166381", "createdAt": "2020-01-06T05:53:33Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyNzc4OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NDoyMVrOFaV7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozMTowMlrOFbhgrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUyMQ==", "bodyText": "comment \"when that's available instead of relying on specific group numbering\" gets lost", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166521", "createdAt": "2020-01-06T05:54:21Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDkwOQ==", "bodyText": "Oh that part is implemented according to the docs so I'll put down\n\"instead of relying on numbering\" as well.", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364404909", "createdAt": "2020-01-08T19:31:02Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUyMQ=="}, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyNzg5OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NDoyN1rOFaV7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NDoyN1rOFaV7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUzOA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166538", "createdAt": "2020-01-06T05:54:27Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyODU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NTowNFrOFaV7sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozODozOFrOFbhtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY0MA==", "bodyText": "Use call(...)", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166640", "createdAt": "2020-01-06T05:55:04Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwODA2NQ==", "bodyText": "nice will use this method from now on.", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364408065", "createdAt": "2020-01-08T19:38:38Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY0MA=="}, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyODc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NToxMVrOFaV7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NToxMVrOFaV7xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY2Mw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166663", "createdAt": "2020-01-06T05:55:11Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgzMDk5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NzoxMVrOFaV9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1NzoxMVrOFaV9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2Njk5NQ==", "bodyText": "move to previous line", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166995", "createdAt": "2020-01-06T05:57:11Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -454,9 +460,9 @@ private AggregationNode createNonDistinctAggregation(\n                             extractVariables(entry.getValue().getArguments(), variableAllocator.getTypes()).contains(distinctVariable)) {\n                         ImmutableList.Builder<RowExpression> argumentsBuilder = ImmutableList.builder();\n                         for (RowExpression argument : aggregation.getArguments()) {\n-                            if (castToExpression(argument) instanceof SymbolReference &&\n-                                    toVariableReference(castToExpression(argument), variableAllocator.getTypes()).equals(distinctVariable)) {\n-                                argumentsBuilder.add(castToRowExpression(asSymbolReference(duplicatedDistinctVariable)));\n+                            if (argument instanceof VariableReferenceExpression &&\n+                                    argument.equals(distinctVariable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDc2MjU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0MjowNlrOFbhy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0MjowNlrOFbhy0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTU1Mw==", "bodyText": "Use Expressions.constant", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409553", "createdAt": "2020-01-08T19:42:06Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -225,11 +222,11 @@ public PlanNode visitAggregation(AggregationNode node, RewriteContext<Optional<A\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    Expression expression = new CoalesceExpression(new SymbolReference(variable.getName()), new Cast(new LongLiteral(\"0\"), \"bigint\"));\n-                    outputVariables.put(coalesceVariables.get(variable), castToRowExpression(expression));\n+                    RowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(0L, BIGINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDc2MzMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0MjoyNlrOFbhzTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0MjoyNlrOFbhzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTY3OA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409678", "createdAt": "2020-01-08T19:42:26Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +346,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDc2MzkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0Mjo0M1rOFbhzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0Mjo0M1rOFbhzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTc4OA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409788", "createdAt": "2020-01-08T19:42:43Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +346,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(0L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2132, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}