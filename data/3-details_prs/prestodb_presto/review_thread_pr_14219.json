{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTMyOTc4", "number": 14219, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxNlrODmzX6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDo1OFrOEIjKLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE0MTg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxNlrOF0bj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzo1Mzo1MlrOGn-Y9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA==", "bodyText": "equals or compatible? For example return 0 will work for a double return type?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390521830", "createdAt": "2020-03-10T18:24:16Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4NTQwMQ==", "bodyText": "Hmm, good point. This is only changed because of the indentation so the logic already existed. Currently the behavior is that if the function return type is double, you have to return a double. So you have to say RETURN double'0'. I agree this is quite inconvenient. This provide the benefit that we can rely on the defined return type of the function to be the actual type and not worrying about having to insert cast though.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390685401", "createdAt": "2020-03-11T00:27:39Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NTYxNw==", "bodyText": "I believe when I wrote the initial version, I check whether bodyType is coercible to returnType, but there were a comment to keep things simple for the first version. I think this could be nice feature to have, though not urgent.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390765617", "createdAt": "2020-03-11T06:23:24Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5NjkyNQ==", "bodyText": "But if we have APIs to do it trivially why not - at least for implicit conversions where we don't need to cast?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391796925", "createdAt": "2020-03-12T17:58:50Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MzQ4Mw==", "bodyText": "Ping", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441883483", "createdAt": "2020-06-17T23:15:56Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NDM4Nw==", "bodyText": "This is not really a relevant change for this PR. I can submit a separate PR for this.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441884387", "createdAt": "2020-06-17T23:19:04Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2OTg0NQ==", "bodyText": "ok", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r444569845", "createdAt": "2020-06-23T23:53:52Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE0NzUzOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNTo0NFrOF0bncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjoxNjozNVrOF0qVbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjczOA==", "bodyText": "It's a reserved word now?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390522738", "createdAt": "2020-03-10T18:25:44Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -647,6 +658,7 @@ INTO: 'INTO';\n IO: 'IO';\n IS: 'IS';\n ISOLATION: 'ISOLATION';\n+JAVA: 'JAVA';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4NDA0Nw==", "bodyText": "These are non-reserved words. They are in the nonReserved list. I actually don't know what's the purpose of this list here. I was guessing that this was just defining the string representation of keywords appeared in the grammar. But I didn't find any reference on what they actually are. \ud83d\ude33", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390684047", "createdAt": "2020-03-11T00:22:43Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -647,6 +658,7 @@ INTO: 'INTO';\n IO: 'IO';\n IS: 'IS';\n ISOLATION: 'ISOLATION';\n+JAVA: 'JAVA';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjczOA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2Mzg4NQ==", "bodyText": "This is a lexer rule that defines 4-character text 'JAVA' as a token (which will be used in the parser rules), and the token is named JAVA. This does not specify whether it is a reserved words or not. Reserved words are defined in reserved.rst.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390763885", "createdAt": "2020-03-11T06:16:35Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -647,6 +658,7 @@ INTO: 'INTO';\n IO: 'IO';\n IS: 'IS';\n ISOLATION: 'ISOLATION';\n+JAVA: 'JAVA';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjczOA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE0OTExOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjowOVrOF0bobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjoxNzozNVrOF0qWTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjk5MA==", "bodyText": "Same here", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390522990", "createdAt": "2020-03-10T18:26:09Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -662,6 +674,7 @@ LOGICAL: 'LOGICAL';\n MAP: 'MAP';\n MINUTE: 'MINUTE';\n MONTH: 'MONTH';\n+NAME: 'NAME';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NDEwOA==", "bodyText": "Addressed above.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390764108", "createdAt": "2020-03-11T06:17:35Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -662,6 +674,7 @@ LOGICAL: 'LOGICAL';\n MAP: 'MAP';\n MINUTE: 'MINUTE';\n MONTH: 'MONTH';\n+NAME: 'NAME';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjk5MA=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzNDg5OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNToxN1rOF1DJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNzo0M1rOF1MSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDUxNw==", "bodyText": "RoutineBody is a Node, not a Statement. See comments below.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391170517", "createdAt": "2020-03-11T18:15:17Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDI2NA==", "bodyText": "Oops, I think I just renamed the previous Return to this and didn't pay attention -_-", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391320264", "createdAt": "2020-03-11T23:07:43Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDUxNw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1NjQ4OnYy", "diffSide": "LEFT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/Return.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoyMDo0OVrOF1DXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoyMDo0OVrOF1DXRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mzk1OQ==", "bodyText": "Return statement is a first-class citizen as defined in the SQL-spec. It is a SQL control statement similar to Call. I think we'll still need it in this PR. See comments below.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391173959", "createdAt": "2020-03-11T18:20:49Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/Return.java", "diffHunk": "@@ -1,89 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.tree;\n-\n-import com.google.common.collect.ImmutableList;\n-\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-\n-import static com.google.common.base.MoreObjects.toStringHelper;\n-import static java.util.Objects.requireNonNull;\n-\n-public class Return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDMwOTg5OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNjoyN1rOF1D56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNjoyN1rOF1M0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjgyNw==", "bodyText": "Either a return expression (SQL routine spec) or an externalBodyReference should be specified as a routine body, but not both. Although constructor has enforced this, this is where inheritance should be used (similar to what we're doing with other parts of the AST).\nBy doing so, AstVisitor will have methods visitRoutineSpecification and visitExternalBodyReference, and if/else shouldn't be needed in many places.\npublic class RoutineBody extends Node {}\npublic class RoutineSpecification extends RoutineBody  {}\npublic class ExternalBodyReference extends RoutineBody  {}\n\npublic class RoutineSpecification {\n    private final Return return;  // Officially, this should be \"private final ProcedureStatement statement;\"\n}\nSimplification\nSince we're (1) not supporting rights clause, (2) only support Return in SQL routine specification, (3) not using Return in other cases, I'm ok to simplify this a bit by temporarily avoiding RoutineSpecification, and just do\npublic class Return extends RoutineBody;\nAlthough the structure I mentioned at the beginning is more locally correct and closer to SQL spec.\nSQL-2016 reference\n<routine body> ::=\n<SQL routine spec>\n| <external body reference>\n| <polymorphic table function body>\n\n<SQL routine spec>\n[ <rights clause> ] <SQL routine body>\n\n<SQL routine body> ::=\n   <SQL procedure statement>", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391182827", "createdAt": "2020-03-11T18:36:27Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement\n+{\n+    private final Optional<Expression> returnExpression;\n+    private final Optional<ExternalBodyReference> externalBodyReference;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0ODMzNg==", "bodyText": "An additional comment regarding the simplification, I said it is temporary because by doing\npublic class Return extends RoutineBody {}\nReturn is no longer a Statement, but only a Node. This is ok for now as we're not using the Statement aspect of a Return.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391248336", "createdAt": "2020-03-11T20:26:06Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement\n+{\n+    private final Optional<Expression> returnExpression;\n+    private final Optional<ExternalBodyReference> externalBodyReference;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjgyNw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyODk1Nw==", "bodyText": "Gonna take the simplified version. Don't see much benefit for adding so many classes when we are not planning to add those functionalities any time soon. \ud83d\ude1b", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391328957", "createdAt": "2020-03-11T23:36:27Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement\n+{\n+    private final Optional<Expression> returnExpression;\n+    private final Optional<ExternalBodyReference> externalBodyReference;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjgyNw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDU2NjI3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo1NDowNlrOF1GbjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTowMDoxNlrOF10gaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ==", "bodyText": "As according to SQL-2016 11.60 9(i), pg. 1009\nAn <SQL-invoked routine> that specifies or implies LANGUAGE SQL is called an SQL routine;\nan <SQL-invoked routine> that does not specify LANGUAGE SQL is called an external routine.\n\nLet's add this additional check.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391224205", "createdAt": "2020-03-11T19:54:06Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMjY4Ng==", "bodyText": "It only says that it's called an external routine, but I don't think it defines how external routine needs to be handled. I also didn't find anything specific about whether external routine requires a <external body reference>. So I'm not sure what to check here. Also the <language name> defined in SQL spec is very old. It doesn't have the languages we definitely want to support in the future like 'JAVA', 'PYTHON', 'PHP' or 'JAVASCRIPT' etc. Some of these could be defined inline potentially, so I don't want to rule that out.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391332686", "createdAt": "2020-03-11T23:48:57Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NzQ2Nw==", "bodyText": "Those 2 lines of spec basically means:\n\nLANGUAGE SQL <=> SQL Routine <=> must have SQL routine spec, cannot have external routine body.\nLANGUAGE not SQL <=> external routine <=> must have external routine body, cannot have SQL routine spec.\n\nDoes those 2 checks make sense?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391467467", "createdAt": "2020-03-12T08:36:24Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NjA2MA==", "bodyText": "That's not my understanding of the spec. And that's definitely not how other query engines that supports JS or LUA did it (they are not defined as external body reference). My understanding is literally, if the language is not SQL, is called external routine (which is a name that I didn't find any definition). I didn't find anything specify the relation ship between the name \"external routine\" and the spec <external body reference>. Would be great if you can point me to any documentation that made that association.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391776060", "createdAt": "2020-03-12T17:24:01Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3OTc4NQ==", "bodyText": "11.60 Syntax Rules (1) pg. 1006:\nAn <SQL-invoked routine> specifies an SQL-invoked routine.\nLet R be the SQL-invoked routine specified by <SQL-invoked routine>.\n\n11.60 Syntax Rule (23)(a) pg. 1015\nIf R is an SQL routine, then:\na) <SQL routine spec> shall be specified.\n\n11.60 Syntax Rule (24)(a) pg. 1015\n24) If R is an external routine, then:\na) <SQL routine spec> shall not be specified.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391879785", "createdAt": "2020-03-12T20:35:17Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3OTExMw==", "bodyText": "If you are specifically saying that if the language is not SQL there should be no RETURN xxx I think that makes sense (at least for now). I don't think anything that's not SQL should have a <external body reference> though, even though that's also true for now. Since SQL spec does not define languages like JS or PYTHON, we need to extend the spec to support this. I don't think they have to have an <external body reference>, though they could. We can choose to not go against SQL spec (not using RETURN definition) so that language SQL <=> RETURN expression holds.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391979113", "createdAt": "2020-03-13T01:00:16Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDU3NzE5OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo1NTo0M1rOF1Ghng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo1NTo0M1rOF1Ghng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNTc1OA==", "bodyText": "See comment in RoutineBody.java, separate visit method should be implemented and this if block would unnecessary.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391225758", "createdAt": "2020-03-11T19:55:43Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -452,13 +453,28 @@ public Node visitDropFunction(SqlBaseParser.DropFunctionContext context)\n     @Override\n     public Node visitRoutineBody(SqlBaseParser.RoutineBodyContext context)\n     {\n-        return visit(context.returnStatement());\n+        if (context.returnStatement() != null) {\n+            return visit(context.returnStatement());\n+        }\n+        return visit(context.externalBodyReference());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDYwMzU3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowMDowMVrOF1Gv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1ODo0NlrOGokk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw==", "bodyText": "We are allowing both identifier and string literal in the syntax, but we don't need to store them as is since we only care about the text. Instead, I think an Optional<String> name would be better, since the identifier/string literal are not used in an expression and hence no semantic difference.\nSee similar example in CallArgument.java and AstBuilder.visitNamedArgument", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391229403", "createdAt": "2020-03-11T20:00:01Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMjk3Mw==", "bodyText": "I kept them separate because otherwise we can't print out the original format in SqlFormatter.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391332973", "createdAt": "2020-03-11T23:50:06Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NTM2MA==", "bodyText": "That's true, but do we need to keep the original format? For example\n\nSqlFormatter renders array_sort(a) as \"array_sort\"(a),\nMissing routine characteristics in Create Table are printed with default values.\nSo it does not look like we're promising syntactical equivalence with parsing + formatting.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391465360", "createdAt": "2020-03-12T08:31:32Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MzE1NA==", "bodyText": "Sure, but what's wrong with keeping both? What's the downside?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391773154", "createdAt": "2020-03-12T17:19:12Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjAzMg==", "bodyText": "Both have the same semantic meaning, so the remaining of the system don't care about whether the routine name was specified using StringLiteral or Identifier. This level of information should be encapsulated by the syntax layer and should be opaque to the users of the AST node. e.g. all that semantic analyzer, planner, execution cared about is \"give me the optional name of external routine\".\n\n\nThe class is not self-contained. From the caller perspective, there is nothing to guarantee that getIdentifier and getStringLiteral won't be both present. It requires additional checking at each caller. But again, this is less important than the first bullet point.\n\n\nWe don't name variables using their types - we give them descriptive names. In many places, we just call a StringLiteral value.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439652032", "createdAt": "2020-06-12T21:36:16Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NDI2NA==", "bodyText": "Also, you just allowed Language to be an arbitrary identifier. If we follow the same logic of keeping both, don't we want to do that for language as well? So that we can differentiate SQL against \"SQL\"?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439664264", "createdAt": "2020-06-12T22:19:51Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTM0Nw==", "bodyText": "We probably should keep both for language if we want to be strict. I can do that if you insist. The difference is the keyword SQL is basically a special identifier, which string literal is not.\nI don't buy your argument. 1) String literals and identifiers have different semantic meaning. For this specific case it doesn't matter. But they are different semantic constructs. You can not change places where asking for one with the other. 2) The constructor already guarantees only one will be present. 3) Sure we can rename them.\nIf this really bothers you, I'm fine with only supporting string, or only supporting identifier.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439685347", "createdAt": "2020-06-13T00:07:59Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTk3NQ==", "bodyText": "Yeah - this is a weird one. I can't think of any other place where this situation happens. I think there should be only one \"child\" of type Node  for the tree node. And you can have an accessor that can give the value of the string literal back.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441891975", "createdAt": "2020-06-17T23:44:16Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTUwMA==", "bodyText": "Changed this to only allow <identifier> for now. We will see whether there's a need to extend to StringLiteral in the future.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445195500", "createdAt": "2020-06-24T21:58:46Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDYyNzQ3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowMzo0OVrOF1G8ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowMzo0OVrOF1G8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMjY5OA==", "bodyText": "nit: add a line break after line 187.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391232698", "createdAt": "2020-03-11T20:03:49Z", "author": {"login": "caithagoras"}, "path": "pom.xml", "diffHunk": "@@ -180,6 +180,11 @@\n                 <type>test-jar</type>\n             </dependency>\n \n+            <dependency>\n+                <groupId>com.facebook.presto</groupId>\n+                <artifactId>presto-function-namespace-managers</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDYzMjUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNDo0OFrOF1G_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNDo0OFrOF1G_zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMzQ4NQ==", "bodyText": "Remove public for methods annotated with @VisibleForTesting.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391233485", "createdAt": "2020-03-11T20:04:48Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -169,6 +169,15 @@ public void loadFunctionNamespaceManager(\n         }\n     }\n \n+    @VisibleForTesting\n+    public void addTestFunctionNamespace(String catalogName, FunctionNamespaceManager functionNamespaceManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDYzNDU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNTowN1rOF1HA9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNTowN1rOF1HA9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMzc4Mw==", "bodyText": "checkArgument?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391233783", "createdAt": "2020-03-11T20:05:07Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -169,6 +169,15 @@ public void loadFunctionNamespaceManager(\n         }\n     }\n \n+    @VisibleForTesting\n+    public void addTestFunctionNamespace(String catalogName, FunctionNamespaceManager functionNamespaceManager)\n+    {\n+        transactionManager.registerFunctionNamespaceManager(catalogName, functionNamespaceManager);\n+        if (functionNamespaceManagers.putIfAbsent(catalogName, functionNamespaceManager) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDY1MDcxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlInvokedFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNzoyOVrOF1HJ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxMTozM1rOF1MXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzNjA4OQ==", "bodyText": "Using a static map would be easier?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391236089", "createdAt": "2020-03-11T20:07:29Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlInvokedFunction.java", "diffHunk": "@@ -141,7 +141,14 @@ public SqlFunctionId getFunctionId()\n \n     public FunctionImplementationType getFunctionImplementationType()\n     {\n-        return FunctionImplementationType.SQL;\n+        switch (routineCharacteristics.getLanguage()) {\n+            case SQL:\n+                return FunctionImplementationType.SQL;\n+            case JAVA:\n+                return FunctionImplementationType.THRIFT;\n+            default:\n+                throw new UnsupportedOperationException(format(\"Unsupported language %s\", routineCharacteristics.getLanguage()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMTQwMw==", "bodyText": "I found this easier to read (code is at the same place). If code needs to be duplicated then I think a static map makes more sense. Currently I think this is fine. We have many this type of case statements in the codebase.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391321403", "createdAt": "2020-03-11T23:11:33Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlInvokedFunction.java", "diffHunk": "@@ -141,7 +141,14 @@ public SqlFunctionId getFunctionId()\n \n     public FunctionImplementationType getFunctionImplementationType()\n     {\n-        return FunctionImplementationType.SQL;\n+        switch (routineCharacteristics.getLanguage()) {\n+            case SQL:\n+                return FunctionImplementationType.SQL;\n+            case JAVA:\n+                return FunctionImplementationType.THRIFT;\n+            default:\n+                throw new UnsupportedOperationException(format(\"Unsupported language %s\", routineCharacteristics.getLanguage()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzNjA4OQ=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODc5MDA4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxNDoxMFrOGjRy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzozNzo0NVrOGla1FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ==", "bodyText": "We need test coverage for those cases, and also need to take a look at the spec what the expected behavior is:\n\nCREATE FUNCTION ... LANGUAGE SQL EXTERNAL\nCREATE FUNCTION ... LANGUAGE SQL EXTERNAL NAME\nCREATE FUNCTION ... LANGUAGE JAVA RETURN \n\nhttps://github.com/prestodb/presto/pull/14219/files#r391879785 may have some useful references to the spec.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439644921", "createdAt": "2020-06-12T21:14:10Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MjMyNw==", "bodyText": "I think the first 2 are valid syntax.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439682327", "createdAt": "2020-06-12T23:49:13Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMTQ0OQ==", "bodyText": "Sure, let's add the test cases then.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441101449", "createdAt": "2020-06-16T19:47:50Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjIwOA==", "bodyText": "I think the third one is also valid syntax though it might not be valid semantically. The order of validation should be:\n\nwhether the function namespace allows create\nwhether the function namespace supports the provided language\nwhether the provided language in specified function namespace support the given function body\n\nWithout checking the capability of the specific function namespace, all above mentioned are valid syntax.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441886208", "createdAt": "2020-06-17T23:25:09Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MDA2OA==", "bodyText": "Sure, that all make sense to me. My ask is to add those test cases here so that we can see the query are passing as expected. If there are any behavior changes in the future, the test will catch that.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r441890068", "createdAt": "2020-06-17T23:37:45Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODgxMzM1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyNTo0NVrOGjSByg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyNTo0NVrOGjSByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0ODcxNA==", "bodyText": "I guess the reason we are adding those annotation is that we want to serialize the enum, but a Language can just be mapped to a JSON scalar, instead of a JSON map with always one single key.\nWe can do that using @JsonValue. There're plenty of examples. e.g. TransactionId.java.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439648714", "createdAt": "2020-06-12T21:25:45Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "diffHunk": "@@ -28,9 +28,48 @@\n \n public class RoutineCharacteristics\n {\n-    public enum Language\n+    public static class Language\n     {\n-        SQL;\n+        public static final Language SQL = new Language(\"SQL\");\n+\n+        private final String language;\n+\n+        @JsonCreator\n+        public Language(@JsonProperty(\"language\") String language)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODgzODU3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTozODoxNlrOGjSROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzo0NTo1NFrOGjUDHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjY2NQ==", "bodyText": "I think I haven't read thoroughly about the spec. Could you enlighten me what it means for not providing an external routine name? How would engine know what to execute then? Oh, maybe it would be default to the function name?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439652665", "createdAt": "2020-06-12T21:38:16Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -177,14 +177,20 @@ alterRoutineCharacteristic\n \n routineBody\n     : returnStatement\n+    | externalBodyReference\n     ;\n \n returnStatement\n     : RETURN expression\n     ;\n \n+externalBodyReference\n+    : EXTERNAL (NAME externalRoutineName)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MTgyMQ==", "bodyText": "The engine is not so concerned at how to run this since these are external. From the engine's perspective, it just needs to know which FunctionNamespaceManager it needs to ask to execute the function.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439681821", "createdAt": "2020-06-12T23:45:54Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -177,14 +177,20 @@ alterRoutineCharacteristic\n \n routineBody\n     : returnStatement\n+    | externalBodyReference\n     ;\n \n returnStatement\n     : RETURN expression\n     ;\n \n+externalBodyReference\n+    : EXTERNAL (NAME externalRoutineName)?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjY2NQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODg4NDU5OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjowMzoyMVrOGjStww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzo1OTowN1rOGjULSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1OTk3MQ==", "bodyText": "This doesn't seems to be related to syntax support, and I suggest to move this to engine: CreateFunctionTask.\nIf I'm a community user and admins of some Presto clusters, I would prefer less configuration parameters to set and tune.\ne.g. I want to use remote UDFs. I set up the UDF server, added the end points to the Presto engine config properties, and I already have function namespace manager setup from before. Why can't it \"just work\"? Can't the engine just figure out the support languages, like talking to the UDF server?\nIf engine and remote UDF server supports SQL, JAVA, JS, it is meaningless for me as an admin to configure the support language \"python\" anyway. So all I do here is mechanically set this configuration to match with whatever is available on the UDF server, because Presto requires me to?\nWell, for the first step, if the engine cannot yet automatically determine what languages the UDF server support, can we have engine level configuration instead? If user truely wants different supported languages on different function namespace managers, they can extend for their own FSM. If that's the case, we cannot even predict what user wants at this point. Maybe user wants a blacklist instead of a whitelist. Maybe they want a regex? Who knows?\nAlso, throw Exception if we're creating or executing functions with unsupported language, and I think it would creating a new error code to formalize this error path?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439659971", "createdAt": "2020-06-12T22:03:21Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -14,16 +14,25 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableSet;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Language.SQL;\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n+    private static final Splitter LANGUAGE_SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n+    private Set<RoutineCharacteristics.Language> supportedFunctionLanguages = ImmutableSet.of(SQL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MzkxMw==", "bodyText": "The function namespace manager needs to configure which language it supports, together with how to invoke that type of functions. The execution of a function is in function namespace manager, so why the configuration should live in the engine? Just like if a specific function namespace manager manages a catalog.schema, so you would call that function namespace manager's createFunction when you create the function, you would call that function namespace manager's executeFunction when you invoke it. The function namespace manager also needs to configure the remote tier and protocol used to execute the function. I can't see why these logic should fit in the engine. You can have function namespace manager A which can support language L1, and L2, where for L1 it will execute the function in T1 and for L2 in T2, while having another function namespace manager supporting language L1 and L3 that runs them in T1' and T3. It's way easier to manage these in function namespace manager than in engine. Remote function is not something that will be able to work out of the box. You HAVE to setup a remote function server to run the functions. The function you introduce has tighter relationship to the UDF server and function metadata than to Presto engine.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439683913", "createdAt": "2020-06-12T23:59:07Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -14,16 +14,25 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableSet;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Language.SQL;\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n+    private static final Splitter LANGUAGE_SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n+    private Set<RoutineCharacteristics.Language> supportedFunctionLanguages = ImmutableSet.of(SQL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1OTk3MQ=="}, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzk5NDQ4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyMjoxOVrOGolHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjozMzoxOVrOGolXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNDMxOQ==", "bodyText": "Isn't an identifier required?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445204319", "createdAt": "2020-06-24T22:22:19Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.ToStringHelper;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends RoutineBody\n+{\n+    private final Optional<Identifier> identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwODM0Nw==", "bodyText": "<external routine name> is optional for external functions. So this could be missing.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445208347", "createdAt": "2020-06-24T22:33:19Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.ToStringHelper;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends RoutineBody\n+{\n+    private final Optional<Identifier> identifier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNDMxOQ=="}, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDAwMTA5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDo1OFrOGolLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjozMzozOVrOGolXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTMwMQ==", "bodyText": "Actually, shouldn't this be just identifier now to match our AST?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445205301", "createdAt": "2020-06-24T22:24:58Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -14,10 +14,10 @@ Synopsis\n     )\n     RETURNS return_type\n     [ COMMENT function_description ]\n-    [ LANGUAGE SQL ]\n+    [ LANGUAGE [ SQL | identifier] ]\n     [ DETERMINISTIC | NOT DETERMINISTIC ]\n     [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n-    [ RETURN expression ]\n+    [ RETURN expression | EXTERNAL [NAME [identifier | string] ] ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwODQ2NA==", "bodyText": "updated, thanks!", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445208464", "createdAt": "2020-06-24T22:33:39Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -14,10 +14,10 @@ Synopsis\n     )\n     RETURNS return_type\n     [ COMMENT function_description ]\n-    [ LANGUAGE SQL ]\n+    [ LANGUAGE [ SQL | identifier] ]\n     [ DETERMINISTIC | NOT DETERMINISTIC ]\n     [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n-    [ RETURN expression ]\n+    [ RETURN expression | EXTERNAL [NAME [identifier | string] ] ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTMwMQ=="}, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2870, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}