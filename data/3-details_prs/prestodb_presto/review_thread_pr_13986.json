{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDk1Njgy", "number": 13986, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMjozODozMFrODZFjHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTozMTo0MVrODaXR2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjMxOTAxOnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMjozODozMFrOFfSV4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoyNzoxNFrOFgEPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1MDY4OA==", "bodyText": "This looks like an unrelated change", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r368350688", "createdAt": "2020-01-20T02:38:30Z", "author": {"login": "highker"}, "path": "pom.xml", "diffHunk": "@@ -735,12 +736,6 @@\n                 <version>${dep.drift.version}</version>\n             </dependency>\n \n-            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19809e63327bc38372c0d3b21f0788a8d0ea2bd8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2ODI3NA==", "bodyText": "fixed", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369168274", "createdAt": "2020-01-21T18:27:14Z", "author": {"login": "yuzhu"}, "path": "pom.xml", "diffHunk": "@@ -735,12 +736,6 @@\n                 <version>${dep.drift.version}</version>\n             </dependency>\n \n-            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1MDY4OA=="}, "originalCommit": {"oid": "19809e63327bc38372c0d3b21f0788a8d0ea2bd8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDgzMzA5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozOTowOVrOFgi9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozOTowOVrOFgi9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MTY3Ng==", "bodyText": "final", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369671676", "createdAt": "2020-01-22T16:39:09Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDgzNDE1OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozOToyNFrOFgi-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozOToyNFrOFgi-mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MTgzMw==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369671833", "createdAt": "2020-01-22T16:39:24Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDgzODI1OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDoyOVrOFgjBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDoyOVrOFgjBMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MjQ5Nw==", "bodyText": "nit: getSupportedColumnStatistics is not supported in AlluxioHiveMetastore.", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369672497", "createdAt": "2020-01-22T16:40:29Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0MDE0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDo1OFrOFgjCWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDo1OFrOFgjCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mjc5NQ==", "bodyText": "nit: put with the previous line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369672795", "createdAt": "2020-01-22T16:40:58Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0Mjg2OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MTo0NFrOFgjEFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MTo0NFrOFgjEFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzIzOA==", "bodyText": "nit\nTable table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n        HIVE_METASTORE_ERROR,\n        String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673238", "createdAt": "2020-01-22T16:41:44Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NDQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjoxMlrOFgjFKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjoxMlrOFgjFKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzUxMg==", "bodyText": "nit: put with the previous line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673512", "createdAt": "2020-01-22T16:42:12Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NTM5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjoyNlrOFgjFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjoyNlrOFgjFsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzY1MA==", "bodyText": "nit: one param per line; keep the first line empty", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673650", "createdAt": "2020-01-22T16:42:26Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NTczOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozMVrOFgjF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozMVrOFgjF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzcwNQ==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673705", "createdAt": "2020-01-22T16:42:31Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NTk0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozM1rOFgjGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozM1rOFgjGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzczNg==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673736", "createdAt": "2020-01-22T16:42:33Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NjI5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozOFrOFgjGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MjozOFrOFgjGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mzc5Ng==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673796", "createdAt": "2020-01-22T16:42:38Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,\n+            String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg0NzQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0Mjo1NVrOFgjG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0Mjo1NVrOFgjG9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mzk3Mw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673973", "createdAt": "2020-01-22T16:42:55Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,\n+            String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb690fa35690b733283c4b97171f9834152887"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc1NjY0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Njo1MFrOFgsG5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Njo1MFrOFgsG5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTQxMg==", "bodyText": "nit\nthis.client = requireNonNull(client, \"client is null\");", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821412", "createdAt": "2020-01-22T21:46:50Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc1OTU4OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Nzo1OFrOFgsI7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Nzo1OFrOFgsI7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTkzNQ==", "bodyText": "We usually use ImmutableMap.of", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821935", "createdAt": "2020-01-22T21:47:58Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc1OTkyOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0ODowNVrOFgsJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0ODowNVrOFgsJIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTk4Nw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821987", "createdAt": "2020-01-22T21:48:05Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(\n+                            PartitionInfo::getPartitionName,\n+                            pi -> Optional.of(ProtoUtils.fromProto(pi))));\n+            return Collections.unmodifiableMap(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2MjE5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0ODo1NlrOFgsKjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0ODo1NlrOFgsKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjM0OA==", "bodyText": "put this with the previous line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822348", "createdAt": "2020-01-22T21:48:56Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2MjU3OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0OTowNFrOFgsKyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0OTowNFrOFgsKyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjQwOQ==", "bodyText": "put an empty line before this commt", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822409", "createdAt": "2020-01-22T21:49:04Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2NDUyOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0OTo0N1rOFgsMHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0OTo0N1rOFgsMHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjc0OQ==", "bodyText": "We usually use toImmutableList; same for all other places", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822749", "createdAt": "2020-01-22T21:49:47Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2NTQ3OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDowNVrOFgsMug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDowNVrOFgsMug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjkwNg==", "bodyText": "ImmutableMap.of", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822906", "createdAt": "2020-01-22T21:50:05Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2NjAyOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDoxN1rOFgsNGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDoxN1rOFgsNGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzAwMg==", "bodyText": "put this with the previous line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823002", "createdAt": "2020-01-22T21:50:17Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2Njc1OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDoyOFrOFgsNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MDoyOFrOFgsNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzEwOA==", "bodyText": "put an empty line before this commt", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823108", "createdAt": "2020-01-22T21:50:28Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2ODIwOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MTowMlrOFgsOhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MTowMlrOFgsOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzM2NQ==", "bodyText": "put this with the previous line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823365", "createdAt": "2020-01-22T21:51:02Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2OTI0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MToyMVrOFgsPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MToyMVrOFgsPKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzUyOQ==", "bodyText": "nit: pi -> info", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823529", "createdAt": "2020-01-22T21:51:21Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(\n+                            PartitionInfo::getPartitionName,\n+                            pi -> Optional.of(ProtoUtils.fromProto(pi))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc2OTYxOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MTozMFrOFgsPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MTozMFrOFgsPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzU5Mw==", "bodyText": "immutablemap", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823593", "createdAt": "2020-01-22T21:51:30Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3MjI2OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastoreConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MjozMFrOFgsRQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MjozMFrOFgsRQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDA2NQ==", "bodyText": "Add a test for this config", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824065", "createdAt": "2020-01-22T21:52:30Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastoreConfig.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+\n+/**\n+ * Configuration for the Alluxio compatible hive metastore interface.\n+ */\n+public class AlluxioHiveMetastoreConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3MzY0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1Mjo1OFrOFgsSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1Mjo1OFrOFgsSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDMwMA==", "bodyText": "spell out db", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824300", "createdAt": "2020-01-22T21:52:58Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3NTE0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MzoyNVrOFgsTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MzoyNVrOFgsTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDUyNg==", "bodyText": "put an empty line after this.", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824526", "createdAt": "2020-01-22T21:53:25Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3ODE0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NDoyOFrOFgsU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NDoyOFrOFgsU6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTAwMA==", "bodyText": "(f) -> field", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825000", "createdAt": "2020-01-22T21:54:28Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3OTQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NTowNFrOFgsVvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NTowNFrOFgsVvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTIxMg==", "bodyText": "spell out sd", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825212", "createdAt": "2020-01-22T21:55:04Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())\n+                .setSerdeParameters(info.getStorage().getStorageFormat().getSerdelibParametersMap());\n+\n+        return builder.build();\n+    }\n+\n+    static StorageFormat fromProto(alluxio.grpc.table.layout.hive.StorageFormat format)\n+    {\n+        return StorageFormat.create(format.getSerde(), format.getInputFormat(), format.getOutputFormat());\n+    }\n+\n+    public static StorageDescriptor fromProto(Storage storage)\n+    {\n+        StorageDescriptor sd = new StorageDescriptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc3OTgxOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NToxMFrOFgsV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NToxMFrOFgsV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTI2Ng==", "bodyText": "this method is not used?", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825266", "createdAt": "2020-01-22T21:55:10Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())\n+                .setSerdeParameters(info.getStorage().getStorageFormat().getSerdelibParametersMap());\n+\n+        return builder.build();\n+    }\n+\n+    static StorageFormat fromProto(alluxio.grpc.table.layout.hive.StorageFormat format)\n+    {\n+        return StorageFormat.create(format.getSerde(), format.getInputFormat(), format.getOutputFormat());\n+    }\n+\n+    public static StorageDescriptor fromProto(Storage storage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwMjAyOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyNzo0NVrOFhRxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyNzo0NVrOFhRxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODQwMQ==", "bodyText": "address", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438401", "createdAt": "2020-01-24T01:27:45Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;\n+\n+    public AlluxioMetastoreModule(String connectorId)\n+    {\n+        this.connectorId = requireNonNull(connectorId);\n+    }\n+\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(AlluxioHiveMetastoreConfig.class);\n+\n+        binder.bind(ExtendedHiveMetastore.class).to(AlluxioHiveMetastore.class).in(Scopes.SINGLETON);\n+        newExporter(binder).export(ExtendedHiveMetastore.class).as(generatedNameOf(AlluxioHiveMetastore.class));\n+    }\n+\n+    @Provides\n+    @Inject\n+    TableMasterClient provideCatalogMasterClient(AlluxioHiveMetastoreConfig config)\n+    {\n+        InstancedConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+        String addr = config.getMasterAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwMjA4OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyNzo0OVrOFhRxDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyNzo0OVrOFhRxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODQxNA==", "bodyText": "not used; so is the one in the constructor", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438414", "createdAt": "2020-01-24T01:27:49Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwMzA4OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyODoyOFrOFhRxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyODoyOFrOFhRxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODU1OA==", "bodyText": "merge with the pervious line", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438558", "createdAt": "2020-01-24T01:28:28Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;\n+\n+    public AlluxioMetastoreModule(String connectorId)\n+    {\n+        this.connectorId = requireNonNull(connectorId);\n+    }\n+\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(AlluxioHiveMetastoreConfig.class);\n+\n+        binder.bind(ExtendedHiveMetastore.class).to(AlluxioHiveMetastore.class).in(Scopes.SINGLETON);\n+        newExporter(binder).export(ExtendedHiveMetastore.class).as(generatedNameOf(AlluxioHiveMetastore.class));\n+    }\n+\n+    @Provides\n+    @Inject\n+    TableMasterClient provideCatalogMasterClient(AlluxioHiveMetastoreConfig config)\n+    {\n+        InstancedConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+        String addr = config.getMasterAddress();\n+        String[] parts = addr.split(\":\", 2);\n+        conf.set(PropertyKey.MASTER_HOSTNAME, parts[0]);\n+        if (parts.length > 1) {\n+            conf.set(PropertyKey.MASTER_RPC_PORT, parts[1]);\n+        }\n+        MasterClientContext context = MasterClientContext\n+                .newBuilder(ClientContext.create(new InstancedConfiguration(ConfigurationUtils.defaults()))).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwNDQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyOToxNVrOFhRyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToyOToxNVrOFhRyWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODc0NQ==", "bodyText": "replace with Guava's stuff.", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438745", "createdAt": "2020-01-24T01:29:15Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwNjIzOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTozMDoxMlrOFhRzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTozMDoxMlrOFhRzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODk4MQ==", "bodyText": "merge into oneline", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438981", "createdAt": "2020-01-24T01:30:12Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class AlluxioProtoUtils\n+{\n+    private AlluxioProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database database)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(database.getDbName())\n+                .setLocation(database.hasLocation() ? Optional.of(database.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((field) -> !partitionColumns.contains(field.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTcwOTY5OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTozMTo0MVrOFhR09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTozMTo0MVrOFhR09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzOTQxMw==", "bodyText": "nit\nreturn partitionInfos.stream().\n...", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370439413", "createdAt": "2020-01-24T01:31:41Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = requireNonNull(client, \"client is null\");\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(AlluxioProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(AlluxioProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, ImmutableMap.of());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName, List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = AlluxioProtoUtils.toPartitionInfoList(client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(toImmutableList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(toImmutableList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = AlluxioProtoUtils.toPartitionInfoList(client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName)).collect(toImmutableList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27"}, "originalPosition": 299}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3167, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}