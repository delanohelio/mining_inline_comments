{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTE4MzY4", "number": 14704, "title": "Adding Pinot SQL endpoint support", "bodyText": "The motivation of this PR to add Pinot SQL endpoint support is that Pinot Community is moving to SQL syntax/endpoint on query side to support more features and also plan to deprecate PQL queries.\nThis PR:\n\nSupport Pinot new SQL endpoint for broker queries.\nEnable this feature by settingpinot.use-pinot-sql-for-broker-queries=true.\nSupport aggregation/group by/oder by  pushdown to query Pinot broker.\n\n== RELEASE NOTES ==\n\nPinot Changes\n* Add Pinot SQL endpoint support.", "createdAt": "2020-06-23T11:50:55Z", "url": "https://github.com/prestodb/presto/pull/14704", "merged": true, "mergeCommit": {"oid": "589325b3b27c117c71ecc399254567ea0a49f5e0"}, "closed": true, "closedAt": "2020-07-17T10:00:08Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuJCDNgBqjM0NzQwNjM2NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1uXXCgBqjM1NTY2ODE0MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ba3990f2047b7b8ee8733c9011225b0960ebb5e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/3ba3990f2047b7b8ee8733c9011225b0960ebb5e", "committedDate": "2020-06-23T11:44:38Z", "message": "Support querying pinot using new sql endpoint"}, "afterCommit": {"oid": "13be945db8ee4cf52fa3a37ab2c61930fc70c0ff", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/13be945db8ee4cf52fa3a37ab2c61930fc70c0ff", "committedDate": "2020-06-23T17:37:39Z", "message": "Support querying pinot using new sql endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13be945db8ee4cf52fa3a37ab2c61930fc70c0ff", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/13be945db8ee4cf52fa3a37ab2c61930fc70c0ff", "committedDate": "2020-06-23T17:37:39Z", "message": "Support querying pinot using new sql endpoint"}, "afterCommit": {"oid": "1c61417e3d56c8a6a14095b8aedb0c67f5a576eb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/1c61417e3d56c8a6a14095b8aedb0c67f5a576eb", "committedDate": "2020-06-23T19:54:57Z", "message": "Support querying pinot using new sql endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c61417e3d56c8a6a14095b8aedb0c67f5a576eb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/1c61417e3d56c8a6a14095b8aedb0c67f5a576eb", "committedDate": "2020-06-23T19:54:57Z", "message": "Support querying pinot using new sql endpoint"}, "afterCommit": {"oid": "93e30534b9417d25a01f2dabaef2675fdd778d7e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/93e30534b9417d25a01f2dabaef2675fdd778d7e", "committedDate": "2020-06-24T03:03:05Z", "message": "Support querying pinot using new sql endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93e30534b9417d25a01f2dabaef2675fdd778d7e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/93e30534b9417d25a01f2dabaef2675fdd778d7e", "committedDate": "2020-06-24T03:03:05Z", "message": "Support querying pinot using new sql endpoint"}, "afterCommit": {"oid": "130a8e71dbc91642532ee3c5f455c4e275e30921", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/130a8e71dbc91642532ee3c5f455c4e275e30921", "committedDate": "2020-06-24T04:33:27Z", "message": "Support querying pinot using new sql endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "130a8e71dbc91642532ee3c5f455c4e275e30921", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/130a8e71dbc91642532ee3c5f455c4e275e30921", "committedDate": "2020-06-24T04:33:27Z", "message": "Support querying pinot using new sql endpoint"}, "afterCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/567150470158a69d96cc7cdbeb0af5f538923b62", "committedDate": "2020-06-24T04:59:36Z", "message": "Support querying pinot using new sql endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzU3NDYy", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-436357462", "createdAt": "2020-06-24T06:27:31Z", "commit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNzozMlrOGoEmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo1MToyNlrOGoFLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MTY1NQ==", "bodyText": "PinotBrokerPageSourceSQL ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444671655", "createdAt": "2020-06-24T06:27:32Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceV2.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator.GeneratedPinotQuery;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PinotBrokerPageSourceV2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NjA0OQ==", "bodyText": "I am wondering if this file is same as PinotBrokerPageSource.java ? I kind of skipped reviewing it in detail :-)", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444676049", "createdAt": "2020-06-24T06:39:11Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NzgwNw==", "bodyText": "The whole notion of expected column handles comes from the fact that the PQL end point returns the group by results first before the aggregations. (and that it fails with not having aggregations and thus we have to introduce fake aggregations).\nI am wondering if this constraint also holds for the SQL end point ? if not, then I think we should push this method to be abstract here.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444677807", "createdAt": "2020-06-24T06:43:30Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final List<PinotColumnHandle> expectedHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            List<PinotColumnHandle> expectedHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.expectedHandles = requireNonNull(expectedHandles, \"expected handles is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.objectMapper = requireNonNull(objectMapper, \"object mapper is null\");\n+    }\n+\n+    private static Double parseDouble(String value)\n+    {\n+        try {\n+            return Double.valueOf(value);\n+        }\n+        catch (NumberFormatException ne) {\n+            switch (value) {\n+                case PINOT_INFINITY:\n+                case PINOT_POSITIVE_INFINITY:\n+                    return PRESTO_INFINITY;\n+                case PINOT_NEGATIVE_INFINITY:\n+                    return PRESTO_NEGATIVE_INFINITY;\n+            }\n+            throw new PinotException(PINOT_DECODE_ERROR, Optional.empty(), \"Cannot decode double value from pinot \" + value, ne);\n+        }\n+    }\n+\n+    protected void setValue(Type type, BlockBuilder blockBuilder, String value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n+            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+        }\n+        if (type instanceof FixedWidthType) {\n+            completedBytes += ((FixedWidthType) type).getFixedSize();\n+            if (type instanceof BigintType) {\n+                type.writeLong(blockBuilder, parseDouble(value).longValue());\n+            }\n+            else if (type instanceof IntegerType) {\n+                blockBuilder.writeInt(parseDouble(value).intValue());\n+            }\n+            else if (type instanceof TinyintType) {\n+                blockBuilder.writeByte(parseDouble(value).byteValue());\n+            }\n+            else if (type instanceof SmallintType) {\n+                blockBuilder.writeShort(parseDouble(value).shortValue());\n+            }\n+            else if (type instanceof BooleanType) {\n+                type.writeBoolean(blockBuilder, parseBoolean(value));\n+            }\n+            else if (type instanceof DecimalType || type instanceof DoubleType) {\n+                type.writeDouble(blockBuilder, parseDouble(value));\n+            }\n+            else if (type instanceof TimestampType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else if (type instanceof DateType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+            }\n+        }\n+        else {\n+            Slice slice = Slices.utf8Slice(value);\n+            blockBuilder.writeBytes(slice, 0, slice.length()).closeEntry();\n+            completedBytes += slice.length();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0; // not available\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finished;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (finished) {\n+            return null;\n+        }\n+\n+        long start = System.nanoTime();\n+        try {\n+            BlockAndTypeBuilder blockAndTypeBuilder = buildBlockAndTypeBuilder(columnHandles, getBrokerQuery(), expectedHandles);\n+            int counter = issueQueryAndPopulate(\n+                    getBrokerQuery(),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnBlockBuilders()),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnTypes()));\n+\n+            PageBuilder pageBuilder = blockAndTypeBuilder.getPageBuilder();\n+            pageBuilder.declarePositions(counter);\n+            Page page = pageBuilder.build();\n+\n+            // TODO: Implement chunking if the result set is ginormous\n+            finished = true;\n+\n+            return page;\n+        }\n+        finally {\n+            readTimeNanos += System.nanoTime() - start;\n+        }\n+    }\n+\n+    protected abstract PinotQueryGenerator.GeneratedPinotQuery getBrokerQuery();\n+\n+    protected void setRows(String query, List<BlockBuilder> blockBuilders, List<Type> types, JsonNode rows)\n+    {\n+        for (int rowNumber = 0; rowNumber < rows.size(); ++rowNumber) {\n+            JsonNode result = rows.get(rowNumber);\n+            if (result == null || result.size() != blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(query),\n+                    String.format(\"Expected row of %d columns\", blockBuilders.size()));\n+            }\n+            for (int columnNumber = 0; columnNumber < blockBuilders.size(); columnNumber++) {\n+                setValue(types.get(columnNumber), blockBuilders.get(columnNumber), asText(result.get(columnNumber)));\n+            }\n+        }\n+    }\n+    protected static void handleCommonResponse(String pql, JsonNode jsonBody)\n+    {\n+        JsonNode numServersResponded = jsonBody.get(\"numServersResponded\");\n+        JsonNode numServersQueried = jsonBody.get(\"numServersQueried\");\n+\n+        if (numServersQueried == null || numServersResponded == null || numServersQueried.asInt() > numServersResponded.asInt()) {\n+            throw new PinotException(\n+                PINOT_INSUFFICIENT_SERVER_RESPONSE,\n+                Optional.of(pql),\n+                String.format(\"Only %s out of %s servers responded for query %s\", numServersResponded.asInt(), numServersQueried.asInt(), pql));\n+        }\n+\n+        JsonNode exceptions = jsonBody.get(\"exceptions\");\n+        if (exceptions != null && exceptions.isArray() && exceptions.size() > 0) {\n+            // Pinot is known to return exceptions with benign errorcodes like 200\n+            // so we treat any exception as an error\n+            throw new PinotException(\n+                PINOT_EXCEPTION,\n+                Optional.of(pql),\n+                String.format(\"Query %s encountered exception %s\", pql, exceptions.get(0)));\n+        }\n+    }\n+\n+    protected static String asText(JsonNode node)\n+    {\n+        checkState(node.isValueNode());\n+        if (node.isArray()) {\n+            String[] results = new String[node.size()];\n+            for (int i = 0; i < node.size(); i++) {\n+                results[i] = asText(node.get(i));\n+            }\n+            return Arrays.toString(results);\n+        }\n+        return node.isNull() ? null : node.asText();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        finished = true;\n+    }\n+\n+    protected int issueQueryAndPopulate(\n+            PinotQueryGenerator.GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types)\n+    {\n+        return doWithRetries(PinotSessionProperties.getPinotRetryCount(session), (retryNumber) -> {\n+            String queryHost;\n+            Optional<String> rpcService;\n+            if (pinotConfig.getRestProxyUrl() != null) {\n+                queryHost = pinotConfig.getRestProxyUrl();\n+                rpcService = Optional.ofNullable(pinotConfig.getRestProxyServiceForQuery());\n+            }\n+            else {\n+                queryHost = clusterInfoFetcher.getBrokerHost(pinotQuery.getTable());\n+                rpcService = Optional.empty();\n+            }\n+            Request.Builder builder = Request.Builder\n+                    .preparePost()\n+                    .setUri(URI.create(String.format(getQueryUrlTemplate(), queryHost)));\n+            String body = clusterInfoFetcher.doHttpActionWithHeaders(builder, Optional.of(String.format(getRequestPayloadTemplate(), pinotQuery.getSql())), rpcService);\n+            return populateFromQueryResults(pinotQuery, blockBuilders, types, body);\n+        });\n+    }\n+\n+    abstract String getQueryUrlTemplate();\n+\n+    abstract String getRequestPayloadTemplate();\n+\n+    abstract int populateFromQueryResults(PinotQueryGenerator.GeneratedPinotQuery pinotQuery, List<BlockBuilder> blockBuilders, List<Type> types, String body);\n+\n+    public class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public BlockAndTypeBuilder(PageBuilder pageBuilder, List<BlockBuilder> columnBlockBuilders, List<Type> columnTypes)\n+        {\n+            this.pageBuilder = pageBuilder;\n+            this.columnBlockBuilders = columnBlockBuilders;\n+            this.columnTypes = columnTypes;\n+        }\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public BlockAndTypeBuilder buildBlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, PinotQueryGenerator.GeneratedPinotQuery brokerPql, List<PinotColumnHandle> expectedHandles)\n+    {\n+        // When we created the PQL, we came up with some column handles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Nzk5Mw==", "bodyText": "Take a look at the comment below: expectedHandles may not even belong here.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444677993", "createdAt": "2020-06-24T06:43:56Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final List<PinotColumnHandle> expectedHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            List<PinotColumnHandle> expectedHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.expectedHandles = requireNonNull(expectedHandles, \"expected handles is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3ODQzNQ==", "bodyText": "Comments around the abstract methods to signify their purpose ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444678435", "createdAt": "2020-06-24T06:44:59Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final List<PinotColumnHandle> expectedHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            List<PinotColumnHandle> expectedHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.expectedHandles = requireNonNull(expectedHandles, \"expected handles is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.objectMapper = requireNonNull(objectMapper, \"object mapper is null\");\n+    }\n+\n+    private static Double parseDouble(String value)\n+    {\n+        try {\n+            return Double.valueOf(value);\n+        }\n+        catch (NumberFormatException ne) {\n+            switch (value) {\n+                case PINOT_INFINITY:\n+                case PINOT_POSITIVE_INFINITY:\n+                    return PRESTO_INFINITY;\n+                case PINOT_NEGATIVE_INFINITY:\n+                    return PRESTO_NEGATIVE_INFINITY;\n+            }\n+            throw new PinotException(PINOT_DECODE_ERROR, Optional.empty(), \"Cannot decode double value from pinot \" + value, ne);\n+        }\n+    }\n+\n+    protected void setValue(Type type, BlockBuilder blockBuilder, String value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n+            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+        }\n+        if (type instanceof FixedWidthType) {\n+            completedBytes += ((FixedWidthType) type).getFixedSize();\n+            if (type instanceof BigintType) {\n+                type.writeLong(blockBuilder, parseDouble(value).longValue());\n+            }\n+            else if (type instanceof IntegerType) {\n+                blockBuilder.writeInt(parseDouble(value).intValue());\n+            }\n+            else if (type instanceof TinyintType) {\n+                blockBuilder.writeByte(parseDouble(value).byteValue());\n+            }\n+            else if (type instanceof SmallintType) {\n+                blockBuilder.writeShort(parseDouble(value).shortValue());\n+            }\n+            else if (type instanceof BooleanType) {\n+                type.writeBoolean(blockBuilder, parseBoolean(value));\n+            }\n+            else if (type instanceof DecimalType || type instanceof DoubleType) {\n+                type.writeDouble(blockBuilder, parseDouble(value));\n+            }\n+            else if (type instanceof TimestampType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else if (type instanceof DateType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+            }\n+        }\n+        else {\n+            Slice slice = Slices.utf8Slice(value);\n+            blockBuilder.writeBytes(slice, 0, slice.length()).closeEntry();\n+            completedBytes += slice.length();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0; // not available\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finished;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (finished) {\n+            return null;\n+        }\n+\n+        long start = System.nanoTime();\n+        try {\n+            BlockAndTypeBuilder blockAndTypeBuilder = buildBlockAndTypeBuilder(columnHandles, getBrokerQuery(), expectedHandles);\n+            int counter = issueQueryAndPopulate(\n+                    getBrokerQuery(),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnBlockBuilders()),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnTypes()));\n+\n+            PageBuilder pageBuilder = blockAndTypeBuilder.getPageBuilder();\n+            pageBuilder.declarePositions(counter);\n+            Page page = pageBuilder.build();\n+\n+            // TODO: Implement chunking if the result set is ginormous\n+            finished = true;\n+\n+            return page;\n+        }\n+        finally {\n+            readTimeNanos += System.nanoTime() - start;\n+        }\n+    }\n+\n+    protected abstract PinotQueryGenerator.GeneratedPinotQuery getBrokerQuery();\n+\n+    protected void setRows(String query, List<BlockBuilder> blockBuilders, List<Type> types, JsonNode rows)\n+    {\n+        for (int rowNumber = 0; rowNumber < rows.size(); ++rowNumber) {\n+            JsonNode result = rows.get(rowNumber);\n+            if (result == null || result.size() != blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(query),\n+                    String.format(\"Expected row of %d columns\", blockBuilders.size()));\n+            }\n+            for (int columnNumber = 0; columnNumber < blockBuilders.size(); columnNumber++) {\n+                setValue(types.get(columnNumber), blockBuilders.get(columnNumber), asText(result.get(columnNumber)));\n+            }\n+        }\n+    }\n+    protected static void handleCommonResponse(String pql, JsonNode jsonBody)\n+    {\n+        JsonNode numServersResponded = jsonBody.get(\"numServersResponded\");\n+        JsonNode numServersQueried = jsonBody.get(\"numServersQueried\");\n+\n+        if (numServersQueried == null || numServersResponded == null || numServersQueried.asInt() > numServersResponded.asInt()) {\n+            throw new PinotException(\n+                PINOT_INSUFFICIENT_SERVER_RESPONSE,\n+                Optional.of(pql),\n+                String.format(\"Only %s out of %s servers responded for query %s\", numServersResponded.asInt(), numServersQueried.asInt(), pql));\n+        }\n+\n+        JsonNode exceptions = jsonBody.get(\"exceptions\");\n+        if (exceptions != null && exceptions.isArray() && exceptions.size() > 0) {\n+            // Pinot is known to return exceptions with benign errorcodes like 200\n+            // so we treat any exception as an error\n+            throw new PinotException(\n+                PINOT_EXCEPTION,\n+                Optional.of(pql),\n+                String.format(\"Query %s encountered exception %s\", pql, exceptions.get(0)));\n+        }\n+    }\n+\n+    protected static String asText(JsonNode node)\n+    {\n+        checkState(node.isValueNode());\n+        if (node.isArray()) {\n+            String[] results = new String[node.size()];\n+            for (int i = 0; i < node.size(); i++) {\n+                results[i] = asText(node.get(i));\n+            }\n+            return Arrays.toString(results);\n+        }\n+        return node.isNull() ? null : node.asText();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        finished = true;\n+    }\n+\n+    protected int issueQueryAndPopulate(\n+            PinotQueryGenerator.GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types)\n+    {\n+        return doWithRetries(PinotSessionProperties.getPinotRetryCount(session), (retryNumber) -> {\n+            String queryHost;\n+            Optional<String> rpcService;\n+            if (pinotConfig.getRestProxyUrl() != null) {\n+                queryHost = pinotConfig.getRestProxyUrl();\n+                rpcService = Optional.ofNullable(pinotConfig.getRestProxyServiceForQuery());\n+            }\n+            else {\n+                queryHost = clusterInfoFetcher.getBrokerHost(pinotQuery.getTable());\n+                rpcService = Optional.empty();\n+            }\n+            Request.Builder builder = Request.Builder\n+                    .preparePost()\n+                    .setUri(URI.create(String.format(getQueryUrlTemplate(), queryHost)));\n+            String body = clusterInfoFetcher.doHttpActionWithHeaders(builder, Optional.of(String.format(getRequestPayloadTemplate(), pinotQuery.getSql())), rpcService);\n+            return populateFromQueryResults(pinotQuery, blockBuilders, types, body);\n+        });\n+    }\n+\n+    abstract String getQueryUrlTemplate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3ODc5Ng==", "bodyText": "Error message should state that resultTable is missing.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444678796", "createdAt": "2020-06-24T06:45:48Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceV2.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator.GeneratedPinotQuery;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PinotBrokerPageSourceV2\n+        extends PinotBrokerPageSourceBase\n+{\n+    private static final String REQUEST_PAYLOAD_TEMPLATE = \"{\\\"sql\\\" : \\\"%s\\\" }\";\n+    private static final String QUERY_URL_TEMPLATE = \"http://%s/query/sql\";\n+\n+    private final GeneratedPinotQuery brokerSql;\n+\n+    public PinotBrokerPageSourceV2(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            GeneratedPinotQuery brokerSql,\n+            List<PinotColumnHandle> columnHandles,\n+            List<PinotColumnHandle> expectedHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        super(pinotConfig, session, columnHandles, expectedHandles, clusterInfoFetcher, objectMapper);\n+        this.brokerSql = requireNonNull(brokerSql, \"broker is null\");\n+    }\n+\n+    @Override\n+    protected GeneratedPinotQuery getBrokerQuery()\n+    {\n+        return brokerSql;\n+    }\n+\n+    @Override\n+    String getQueryUrlTemplate()\n+    {\n+        return QUERY_URL_TEMPLATE;\n+    }\n+\n+    @Override\n+    String getRequestPayloadTemplate()\n+    {\n+        return REQUEST_PAYLOAD_TEMPLATE;\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public int populateFromQueryResults(\n+            GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types,\n+            String body)\n+    {\n+        String sql = pinotQuery.getSql();\n+        JsonNode jsonBody;\n+        try {\n+            jsonBody = objectMapper.readTree(body);\n+        }\n+        catch (IOException e) {\n+            throw new PinotException(PINOT_UNEXPECTED_RESPONSE, Optional.of(sql), \"Couldn't parse response\", e);\n+        }\n+        handleCommonResponse(sql, jsonBody);\n+        JsonNode resultTable = jsonBody.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema == null) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"Expected data schema in the response\"));\n+            }\n+            JsonNode columnDataTypes = dataSchema.get(\"columnDataTypes\");\n+            JsonNode columnNames = dataSchema.get(\"columnNames\");\n+\n+            if (columnDataTypes == null\n+                    || !columnDataTypes.isArray()\n+                    || columnDataTypes.size() != blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"ColumnDataTypes and results expected for %s, expected %d columnDataTypes but got %d\", sql, blockBuilders.size(), columnDataTypes == null ? 0 : columnDataTypes.size()));\n+            }\n+            if (columnNames == null\n+                    || !columnNames.isArray()\n+                    || columnNames.size() != blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"ColumnNames and results expected for %s, expected %d columnNames but got %d\", sql, blockBuilders.size(), columnNames == null ? 0 : columnNames.size()));\n+            }\n+\n+            JsonNode rows = resultTable.get(\"rows\");\n+            checkState(rows.size() >= 1, \"Expected at least one row to be present\");\n+            setRows(sql, blockBuilders, types, rows);\n+            return rows.size();\n+        }\n+        else {\n+            throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    \"Expected one of aggregationResults or selectionResults to be present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTExNg==", "bodyText": "How about a better name for 'body' ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444679116", "createdAt": "2020-06-24T06:46:29Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceV2.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator.GeneratedPinotQuery;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PinotBrokerPageSourceV2\n+        extends PinotBrokerPageSourceBase\n+{\n+    private static final String REQUEST_PAYLOAD_TEMPLATE = \"{\\\"sql\\\" : \\\"%s\\\" }\";\n+    private static final String QUERY_URL_TEMPLATE = \"http://%s/query/sql\";\n+\n+    private final GeneratedPinotQuery brokerSql;\n+\n+    public PinotBrokerPageSourceV2(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            GeneratedPinotQuery brokerSql,\n+            List<PinotColumnHandle> columnHandles,\n+            List<PinotColumnHandle> expectedHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        super(pinotConfig, session, columnHandles, expectedHandles, clusterInfoFetcher, objectMapper);\n+        this.brokerSql = requireNonNull(brokerSql, \"broker is null\");\n+    }\n+\n+    @Override\n+    protected GeneratedPinotQuery getBrokerQuery()\n+    {\n+        return brokerSql;\n+    }\n+\n+    @Override\n+    String getQueryUrlTemplate()\n+    {\n+        return QUERY_URL_TEMPLATE;\n+    }\n+\n+    @Override\n+    String getRequestPayloadTemplate()\n+    {\n+        return REQUEST_PAYLOAD_TEMPLATE;\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public int populateFromQueryResults(\n+            GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types,\n+            String body)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4MDQ2MQ==", "bodyText": "Should we check state that exactly one of 'sql' or 'pql' is set ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444680461", "createdAt": "2020-06-24T06:49:50Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -146,32 +145,52 @@ public PinotQueryGeneratorContext getContext()\n         }\n     }\n \n-    public static class GeneratedPql\n+    public enum PinotQueryFormat {\n+        PQL,\n+        SQL\n+    }\n+\n+    public static class GeneratedPinotQuery\n     {\n         final String table;\n+        final String sql;\n         final String pql;\n         final List<Integer> expectedColumnIndices;\n         final int groupByClauses;\n         final boolean haveFilter;\n         final boolean isQueryShort;\n \n         @JsonCreator\n-        public GeneratedPql(\n+        public GeneratedPinotQuery(\n                 @JsonProperty(\"table\") String table,\n+                @JsonProperty(\"sql\") String sql,\n                 @JsonProperty(\"pql\") String pql,\n                 @JsonProperty(\"expectedColumnIndices\") List<Integer> expectedColumnIndices,\n                 @JsonProperty(\"groupByClauses\") int groupByClauses,\n                 @JsonProperty(\"haveFilter\") boolean haveFilter,\n                 @JsonProperty(\"isQueryShort\") boolean isQueryShort)\n         {\n             this.table = table;\n+            this.sql = sql;\n             this.pql = pql;\n             this.expectedColumnIndices = expectedColumnIndices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4MTA5NA==", "bodyText": "Didn't read this too carefully ... this looks like a giant copy paste :-). What's the main change from PQL generation ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r444681094", "createdAt": "2020-06-24T06:51:26Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -360,7 +377,77 @@ else if (!groupByColumns.isEmpty()) {\n \n         LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments = getAssignments();\n         List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, assignments);\n-        return new PinotQueryGenerator.GeneratedPql(tableName, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n+        return new PinotQueryGenerator.GeneratedPinotQuery(tableName, null, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n+    }\n+\n+    /**\n+     * Convert the current context to a Pinot SQL\n+     */\n+    public PinotQueryGenerator.GeneratedPinotQuery toSqlQuery(PinotConfig pinotConfig, ConnectorSession session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567150470158a69d96cc7cdbeb0af5f538923b62"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1837589a1f3d4c0a703aaab081e2b2a93354a2d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c1837589a1f3d4c0a703aaab081e2b2a93354a2d", "committedDate": "2020-06-25T09:50:33Z", "message": "Address comments"}, "afterCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/bc33a1ac62f677a05f4704e3afe43afc7ed4f38e", "committedDate": "2020-06-25T10:23:03Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODcyNzY4", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-437872768", "createdAt": "2020-06-25T21:30:02Z", "commit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTozMDowMlrOGpMeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTozMzozNVrOGpMlRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0OTI3NQ==", "bodyText": "How should the segment code path change ? I am not sure if the Pinot Servers also understand \"SQL\" (vs PQL) ? For that matter, I have forgotten whether the Presto Worker does the PQL to Pinot Plan conversion and sends that to the Pinot Servers or how that translation works (perhaps in the Pinot Driver jar).\nWe may want to double check that and then perhaps disable SQL for the segment code path.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r445849275", "createdAt": "2020-06-25T21:30:02Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -313,36 +313,14 @@ private boolean hasOrderBy()\n         if (expressions.isEmpty()) {\n             throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Empty PQL expressions: \" + toString());\n         }\n-\n         String tableName = from.orElseThrow(() -> new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Table name not encountered yet\"));\n-        String query = \"SELECT \" + expressions + \" FROM \" + tableName + (forBroker ? \"\" : TABLE_NAME_SUFFIX_TEMPLATE);\n-        if (filter.isPresent()) {\n-            String filterString = filter.get();\n-            // this is hack!!!. Ideally we want to clone the scan pipeline and create/update the filter in the scan pipeline to contain this filter and\n-            // at the same time add the time column to scan so that the query generator doesn't fail when it looks up the time column in scan output columns\n-            query += format(\" WHERE %s%s\", filterString, forBroker ? \"\" : TIME_BOUNDARY_FILTER_TEMPLATE);\n-        }\n-        else if (!forBroker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0OTY3OQ==", "bodyText": "How about renaming this to generatePinotQueryHelper or generatePinotQueryCommon or such to make it clear that this is just a helper function.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r445849679", "createdAt": "2020-06-25T21:30:51Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -370,33 +348,21 @@ else if (!groupByColumns.isEmpty()) {\n                 queryLimit = pinotConfig.getTopNLarge();\n             }\n         }\n-\n+        String limitClause = \"\";\n         if (!limitKeyWord.isEmpty()) {\n-            query += \" \" + limitKeyWord + \" \" + queryLimit;\n+            limitClause = \" \" + limitKeyWord + \" \" + queryLimit;\n         }\n-\n+        String query = generatePinotQuery(forBroker, expressions, tableName, limitClause);\n         LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments = getAssignments();\n         List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, assignments);\n         return new PinotQueryGenerator.GeneratedPinotQuery(tableName, null, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n     }\n \n-    /**\n-     * Convert the current context to a Pinot SQL\n-     */\n-    public PinotQueryGenerator.GeneratedPinotQuery toSqlQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    // Generate Pinot query:\n+    // - takes arguments of expressions/table name/limit clause;\n+    // - handles the common logic to generate where/groupBy/orderBy clauses.\n+    private String generatePinotQuery(boolean forBroker, String expressions, String tableName, String limitClause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0OTk5MA==", "bodyText": "Just double checking: In PQL generation we omit the group by columns from the \"select expressions\". I am assuming that is NOT done in the SQL generation ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r445849990", "createdAt": "2020-06-25T21:31:30Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -417,6 +383,25 @@ else if (!forBroker) {\n             String orderByExpressions = topNColumnOrderingMap.entrySet().stream().map(entry -> selections.get(entry.getKey()).getDefinition() + (entry.getValue().isAscending() ? \"\" : \" DESC\")).collect(Collectors.joining(\", \"));\n             query = query + \" ORDER BY \" + orderByExpressions;\n         }\n+        query = query + limitClause;\n+        return query;\n+    }\n+\n+    /**\n+     * Convert the current context to a Pinot SQL\n+     */\n+    public PinotQueryGenerator.GeneratedPinotQuery toSqlQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    {\n+        int nonAggregateShortQueryLimit = PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session);\n+        boolean isQueryShort = hasAggregation() || limit.orElse(Integer.MAX_VALUE) < nonAggregateShortQueryLimit;\n+        boolean forBroker = !PinotSessionProperties.isForbidBrokerQueries(session) && isQueryShort;\n+        if (!pinotConfig.isAllowMultipleAggregations() && aggregations > 1 && !groupByColumns.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Multiple aggregates in the presence of group by is forbidden\");\n+        }\n+        String expressions = selections.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1MDk0OA==", "bodyText": "I can only see tests that are deleted here (that perhaps don't belong in the SQL codepath). I don't see any new tests added here.\nI am wondering if it makes sense to actually test out the SQL query generation logic ? Things like using orderby-over-aggregation works, 'limit with aggregation\", \"group by expressions in select clause\" and such.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r445850948", "createdAt": "2020-06-25T21:33:35Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -36,7 +37,7 @@\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n \n-public class TestPinotBrokerPageSourceV2\n+public class TestPinotBrokerPageSourceSql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzQ2Mzk4", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-438746398", "createdAt": "2020-06-28T05:58:41Z", "commit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNTo1ODo0MVrOGp6m4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjowODoyNFrOGp6qJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTAyNg==", "bodyText": "This is not so much about just the SQL syntax, is it ? Its also about using the SQL endpoint instead of the PQL endpoint.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r446605026", "createdAt": "2020-06-28T05:58:41Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSessionProperties.java", "diffHunk": "@@ -133,6 +139,11 @@ public PinotSessionProperties(PinotConfig pinotConfig)\n                         \"Use the new UDF dateTrunc in pinot that is more presto compatible\",\n                         pinotConfig.isUseDateTrunc(),\n                         false),\n+                booleanProperty(\n+                        USE_PINOT_SQL_FOR_BROKER_QUERIES,\n+                        \"Use new Pinot SQL syntax for broker query\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTI5Mg==", "bodyText": "This may be a nitpick, so feel free to ignore it: Should we just have a 'final String query' field here along with a 'final PinotQueryFormat queryFormat', instead of having these two strings and then checking that only one of them is set ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r446605292", "createdAt": "2020-06-28T06:01:26Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -146,32 +146,53 @@ public PinotQueryGeneratorContext getContext()\n         }\n     }\n \n-    public static class GeneratedPql\n+    public enum PinotQueryFormat {\n+        PQL,\n+        SQL\n+    }\n+\n+    public static class GeneratedPinotQuery\n     {\n         final String table;\n+        final String sql;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTYzNA==", "bodyText": "Should we still check for this in the SQL codepath ? This limitation really only stemmed from PQL.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r446605634", "createdAt": "2020-06-28T06:05:43Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -318,49 +383,58 @@ else if (!forBroker) {\n             String orderByExpressions = topNColumnOrderingMap.entrySet().stream().map(entry -> selections.get(entry.getKey()).getDefinition() + (entry.getValue().isAscending() ? \"\" : \" DESC\")).collect(Collectors.joining(\", \"));\n             query = query + \" ORDER BY \" + orderByExpressions;\n         }\n+        query = query + limitClause;\n+        return query;\n+    }\n+\n+    /**\n+     * Convert the current context to a Pinot SQL\n+     */\n+    public PinotQueryGenerator.GeneratedPinotQuery toSqlQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    {\n+        int nonAggregateShortQueryLimit = PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session);\n+        boolean isQueryShort = hasAggregation() || limit.orElse(Integer.MAX_VALUE) < nonAggregateShortQueryLimit;\n+        boolean forBroker = !PinotSessionProperties.isForbidBrokerQueries(session) && isQueryShort;\n+        if (!pinotConfig.isAllowMultipleAggregations() && aggregations > 1 && !groupByColumns.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTY5Nw==", "bodyText": "Why is this even needed ? Ideally, aggregation queries shouldn't even have a LIMIT clause in the Pinot's SQL query.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r446605697", "createdAt": "2020-06-28T06:06:31Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -318,49 +383,58 @@ else if (!forBroker) {\n             String orderByExpressions = topNColumnOrderingMap.entrySet().stream().map(entry -> selections.get(entry.getKey()).getDefinition() + (entry.getValue().isAscending() ? \"\" : \" DESC\")).collect(Collectors.joining(\", \"));\n             query = query + \" ORDER BY \" + orderByExpressions;\n         }\n+        query = query + limitClause;\n+        return query;\n+    }\n+\n+    /**\n+     * Convert the current context to a Pinot SQL\n+     */\n+    public PinotQueryGenerator.GeneratedPinotQuery toSqlQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    {\n+        int nonAggregateShortQueryLimit = PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session);\n+        boolean isQueryShort = hasAggregation() || limit.orElse(Integer.MAX_VALUE) < nonAggregateShortQueryLimit;\n+        boolean forBroker = !PinotSessionProperties.isForbidBrokerQueries(session) && isQueryShort;\n+        if (!pinotConfig.isAllowMultipleAggregations() && aggregations > 1 && !groupByColumns.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Multiple aggregates in the presence of group by is forbidden\");\n+        }\n+        String expressions = selections.entrySet().stream()\n+                .map(s -> s.getValue().getDefinition())\n+                .collect(Collectors.joining(\", \"));\n+        String tableName = from.orElseThrow(() -> new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Table name not encountered yet\"));\n+\n         // Rules for limit:\n         // - If its a selection query:\n         //      + given limit or configured limit\n         // - Else if has group by:\n-        //      + ensure that only one aggregation\n         //      + default limit or configured top limit\n+        // - Aggregation only query limit is 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTg2Mw==", "bodyText": "I think this is still a concern ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r446605863", "createdAt": "2020-06-28T06:08:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -36,7 +37,7 @@\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n \n-public class TestPinotBrokerPageSourceV2\n+public class TestPinotBrokerPageSourceSql", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1MDk0OA=="}, "originalCommit": {"oid": "bc33a1ac62f677a05f4704e3afe43afc7ed4f38e"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e86d1b2d4c9753cf74658d2f65fd8f949797e116", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e86d1b2d4c9753cf74658d2f65fd8f949797e116", "committedDate": "2020-07-01T10:39:05Z", "message": "Address comments"}, "afterCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/a1ce7cf232dfc58d15854f6e8298fa7e16f122cd", "committedDate": "2020-07-01T11:24:10Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjU3NDg1", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-441257485", "createdAt": "2020-07-01T23:30:51Z", "commit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDozODoyNlrOGscVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo0NjozMVrOGsciSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NDgyMg==", "bodyText": "Is expectedColumnIndices still relevant for testing the SQL end point ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449254822", "createdAt": "2020-07-02T20:38:26Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotBrokerPageSourceSql\n+        extends TestPinotQueryBase\n+{\n+    private static PinotTableHandle pinotTable = new PinotTableHandle(\"connId\", \"schema\", \"tbl\");\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static PinotColumnHandle groupCountry = new PinotColumnHandle(\"group_country\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+    private static PinotColumnHandle groupCity = new PinotColumnHandle(\"group_city\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+\n+    private static class SqlParsedInfo\n+    {\n+        final int columns;\n+        final int rows;\n+\n+        public SqlParsedInfo(int columns, int rows)\n+        {\n+            this.columns = columns;\n+            this.rows = rows;\n+        }\n+    }\n+\n+    SqlParsedInfo getBasicInfoFromSql(String sqlResponse)\n+            throws IOException\n+    {\n+        int numRows = 0;\n+        int numColumns = 0;\n+        JsonNode sqlJson = objectMapper.readTree(sqlResponse);\n+        JsonNode resultTable = sqlJson.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode rows = resultTable.get(\"rows\");\n+            if (rows != null) {\n+                numRows = rows.size();\n+            }\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema != null) {\n+                JsonNode columnNames = dataSchema.get(\"columnNames\");\n+                if (columnNames != null) {\n+                    numColumns = columnNames.size();\n+                }\n+            }\n+        }\n+        return new SqlParsedInfo(numColumns, numRows);\n+    }\n+\n+    @DataProvider(name = \"sqlResponses\")\n+    public static Object[][] sqlResponsesProvider()\n+    {\n+        return new Object[][] {\n+                {\"SELECT group_country, count(*), sum(rsvp_count) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\", \\\"DOUBLE\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\", \\\"sum(rsvp_count)\\\"] }, \\\"rows\\\": [ [\\\"ch\\\", 11, 11.0], [\\\"kr\\\", 32, 32.0], [\\\"cl\\\", 1, 1.0], [\\\"gr\\\", 2, 2.0], [\\\"co\\\", 2, 2.0], [\\\"cz\\\", 4, 4.0], [\\\"ph\\\", 1, 1.0], [\\\"pl\\\", 16, 16.0], [\\\"li\\\", 1, 1.0], [\\\"tr\\\", 14, 14.0], [\\\"de\\\", 45, 45.0], [\\\"tw\\\", 3, 3.0], [\\\"hk\\\", 14, 14.0], [\\\"pt\\\", 13, 13.0], [\\\"dk\\\", 5, 5.0], [\\\"lu\\\", 2, 2.0], [\\\"ua\\\", 1, 1.0], [\\\"id\\\", 5, 5.0], [\\\"ie\\\", 13, 13.0], [\\\"us\\\", 205, 205.0], [\\\"eg\\\", 1, 1.0], [\\\"il\\\", 14, 14.0], [\\\"ae\\\", 4, 4.0], [\\\"in\\\", 32, 32.0], [\\\"za\\\", 6, 6.0], [\\\"it\\\", 4, 4.0], [\\\"mx\\\", 1, 1.0], [\\\"my\\\", 1, 1.0], [\\\"es\\\", 79, 79.0], [\\\"ar\\\", 5, 5.0], [\\\"at\\\", 14, 14.0], [\\\"au\\\", 119, 119.0], [\\\"ng\\\", 1, 1.0], [\\\"ro\\\", 3, 3.0], [\\\"nl\\\", 24, 24.0], [\\\"no\\\", 1, 1.0], [\\\"be\\\", 2, 2.0], [\\\"jp\\\", 32, 32.0], [\\\"fr\\\", 35, 35.0], [\\\"nz\\\", 12, 12.0], [\\\"sa\\\", 1, 1.0], [\\\"br\\\", 20, 20.0], [\\\"se\\\", 24, 24.0], [\\\"sg\\\", 49, 49.0], [\\\"sk\\\", 2, 2.0], [\\\"ke\\\", 7, 7.0], [\\\"gb\\\", 159, 159.0], [\\\"ca\\\", 11, 11.0] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1053, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 2106, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1053, \\\"timeUsedMs\\\": 7, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909715708 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\"), derived(\"sum\")),\n+                        ImmutableList.of(0, 1, 2),\n+                        Optional.empty()},\n+                {\"SELECT group_country, count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [\\\"eg\\\", 1], [\\\"il\\\", 12], [\\\"ae\\\", 4], [\\\"in\\\", 31], [\\\"ch\\\", 10], [\\\"kr\\\", 30], [\\\"za\\\", 6], [\\\"cl\\\", 1], [\\\"it\\\", 4], [\\\"gr\\\", 1], [\\\"my\\\", 1], [\\\"co\\\", 1], [\\\"es\\\", 75], [\\\"ar\\\", 5], [\\\"at\\\", 12], [\\\"au\\\", 108], [\\\"cz\\\", 4], [\\\"ph\\\", 1], [\\\"ng\\\", 1], [\\\"pl\\\", 15], [\\\"ro\\\", 3], [\\\"li\\\", 1], [\\\"nl\\\", 20], [\\\"tr\\\", 14], [\\\"de\\\", 35], [\\\"no\\\", 1], [\\\"hk\\\", 14], [\\\"tw\\\", 2], [\\\"be\\\", 2], [\\\"pt\\\", 12], [\\\"jp\\\", 28], [\\\"dk\\\", 4], [\\\"lu\\\", 2], [\\\"nz\\\", 11], [\\\"fr\\\", 28], [\\\"ua\\\", 1], [\\\"sa\\\", 1], [\\\"br\\\", 18], [\\\"se\\\", 24], [\\\"sg\\\", 43], [\\\"sk\\\", 2], [\\\"ke\\\", 7], [\\\"gb\\\", 146], [\\\"id\\\", 5], [\\\"ie\\\", 13], [\\\"us\\\", 171], [\\\"ca\\\", 9] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 940, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 940, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 940, \\\"timeUsedMs\\\": 4, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909613611 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*), group_country FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\", \\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\", \\\"STRING\\\"] }, \\\"rows\\\": [ [1, \\\"gh\\\"], [1, \\\"gn\\\"], [48, \\\"gr\\\"], [15, \\\"gt\\\"], [39, \\\"pa\\\"], [203, \\\"pe\\\"], [7, \\\"pf\\\"], [34, \\\"ph\\\"], [30, \\\"pk\\\"], [379, \\\"pl\\\"], [2, \\\"ps\\\"], [896, \\\"hk\\\"], [275, \\\"pt\\\"], [4, \\\"hn\\\"], [8, \\\"py\\\"], [5, \\\"hr\\\"], [68, \\\"hu\\\"], [10, \\\"qa\\\"], [279, \\\"id\\\"], [553, \\\"ie\\\"], [254, \\\"il\\\"], [355, \\\"ae\\\"], [2618, \\\"in\\\"], [211, \\\"za\\\"], [64, \\\"iq\\\"], [270, \\\"it\\\"], [6, \\\"al\\\"], [5, \\\"am\\\"], [8, \\\"ao\\\"], [315, \\\"ar\\\"], [330, \\\"at\\\"], [1, \\\"zm\\\"], [3282, \\\"au\\\"], [3, \\\"az\\\"], [55, \\\"ro\\\"], [2, \\\"ba\\\"], [84, \\\"rs\\\"], [34, \\\"bd\\\"], [87, \\\"ru\\\"], [183, \\\"be\\\"], [13, \\\"bg\\\"], [1472, \\\"jp\\\"], [26, \\\"bh\\\"], [3, \\\"bi\\\"], [64, \\\"bo\\\"], [149, \\\"sa\\\"], [1066, \\\"br\\\"], [6, \\\"sd\\\"], [527, \\\"se\\\"], [936, \\\"sg\\\"], [10, \\\"si\\\"], [11, \\\"sk\\\"], [178, \\\"ke\\\"], [27, \\\"sn\\\"], [2958, \\\"ca\\\"], [6, \\\"cd\\\"], [5, \\\"sv\\\"], [1, \\\"cg\\\"], [705, \\\"ch\\\"], [40, \\\"ci\\\"], [2036, \\\"kr\\\"], [174, \\\"cl\\\"], [3, \\\"cm\\\"], [56, \\\"cn\\\"], [246, \\\"co\\\"], [3, \\\"kw\\\"], [29, \\\"cr\\\"], [150, \\\"th\\\"], [11, \\\"lb\\\"], [3, \\\"cy\\\"], [155, \\\"cz\\\"], [12, \\\"tm\\\"], [6, \\\"tn\\\"], [3, \\\"li\\\"], [329, \\\"tr\\\"], [74, \\\"lk\\\"], [2882, \\\"de\\\"], [124, \\\"tw\\\"], [6, \\\"lr\\\"], [1, \\\"tz\\\"], [121, \\\"dk\\\"], [47, \\\"lt\\\"], [49, \\\"lu\\\"], [15, \\\"lv\\\"], [4, \\\"do\\\"], [58, \\\"ua\\\"], [1, \\\"ug\\\"], [27, \\\"ma\\\"], [5, \\\"dz\\\"], [12, \\\"ec\\\"], [28498, \\\"us\\\"], [7, \\\"mk\\\"], [5, \\\"ml\\\"], [16, \\\"ee\\\"], [6, \\\"mm\\\"], [2, \\\"mn\\\"], [116, \\\"eg\\\"], [5, \\\"mo\\\"], [71, \\\"uy\\\"], [253, \\\"mx\\\"], [100, \\\"my\\\"], [3249, \\\"es\\\"], [1, \\\"et\\\"], [2, \\\"ve\\\"], [36, \\\"vn\\\"], [204, \\\"ng\\\"], [21, \\\"ni\\\"], [946, \\\"nl\\\"], [93, \\\"no\\\"], [12, \\\"np\\\"], [22, \\\"fi\\\"], [2223, \\\"fr\\\"], [767, \\\"nz\\\"], [14, \\\"ga\\\"], [4524, \\\"gb\\\"], [14, \\\"ge\\\"], [1, \\\"om\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\"), groupCountry),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\"] }, \\\"rows\\\": [ [1], [1], [48], [15], [39], [203], [7], [34], [30], [379], [2], [896], [275], [4], [8], [5], [68], [10], [279], [553], [254], [355], [2618], [211], [64], [270], [6], [5], [8], [315], [330], [1], [3282], [3], [55], [2], [84], [34], [87], [183], [13], [1472], [26], [3], [64], [149], [1066], [6], [527], [936], [10], [11], [178], [27], [2958], [6], [5], [1], [705], [40], [2036], [174], [3], [56], [246], [3], [29], [150], [11], [3], [155], [12], [6], [3], [329], [74], [2882], [124], [6], [1], [121], [47], [49], [15], [4], [58], [1], [27], [5], [12], [28498], [7], [5], [16], [6], [2], [116], [5], [71], [253], [100], [3249], [1], [2], [36], [204], [21], [946], [93], [12], [22], [2223], [767], [14], [4524], [14], [1] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 31, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT distinct group_country FROM meetupRsvp  LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"STRING\\\"] }, \\\"rows\\\": [ [\\\"np\\\"], [\\\"az\\\"], [\\\"ar\\\"], [\\\"fr\\\"], [\\\"cd\\\"], [\\\"kr\\\"], [\\\"zm\\\"], [\\\"gn\\\"], [\\\"ro\\\"], [\\\"ao\\\"], [\\\"ie\\\"], [\\\"et\\\"], [\\\"bh\\\"], [\\\"gh\\\"], [\\\"ke\\\"], [\\\"lk\\\"], [\\\"ph\\\"], [\\\"cl\\\"], [\\\"vn\\\"], [\\\"ma\\\"], [\\\"mo\\\"], [\\\"cz\\\"], [\\\"ba\\\"], [\\\"nz\\\"], [\\\"ru\\\"], [\\\"at\\\"], [\\\"be\\\"], [\\\"in\\\"], [\\\"my\\\"], [\\\"ga\\\"], [\\\"cr\\\"], [\\\"us\\\"], [\\\"ug\\\"], [\\\"cy\\\"], [\\\"li\\\"], [\\\"mm\\\"], [\\\"do\\\"], [\\\"cn\\\"], [\\\"es\\\"], [\\\"pt\\\"], [\\\"dk\\\"], [\\\"fi\\\"], [\\\"si\\\"], [\\\"no\\\"], [\\\"am\\\"], [\\\"sk\\\"], [\\\"cg\\\"], [\\\"ci\\\"], [\\\"lu\\\"], [\\\"py\\\"], [\\\"mk\\\"], [\\\"gt\\\"], [\\\"qa\\\"], [\\\"th\\\"], [\\\"ec\\\"], [\\\"pk\\\"], [\\\"bg\\\"], [\\\"bo\\\"], [\\\"om\\\"], [\\\"nl\\\"], [\\\"sd\\\"], [\\\"rs\\\"], [\\\"il\\\"], [\\\"za\\\"], [\\\"ua\\\"], [\\\"hk\\\"], [\\\"lb\\\"], [\\\"tm\\\"], [\\\"gr\\\"], [\\\"it\\\"], [\\\"pf\\\"], [\\\"uy\\\"], [\\\"ee\\\"], [\\\"mx\\\"], [\\\"jp\\\"], [\\\"sg\\\"], [\\\"sa\\\"], [\\\"ng\\\"], [\\\"iq\\\"], [\\\"pa\\\"], [\\\"cm\\\"], [\\\"mn\\\"], [\\\"tr\\\"], [\\\"lr\\\"], [\\\"hn\\\"], [\\\"hu\\\"], [\\\"eg\\\"], [\\\"id\\\"], [\\\"gb\\\"], [\\\"tz\\\"], [\\\"sn\\\"], [\\\"al\\\"], [\\\"sv\\\"], [\\\"dz\\\"], [\\\"pl\\\"], [\\\"lt\\\"], [\\\"hr\\\"], [\\\"tn\\\"], [\\\"ve\\\"], [\\\"bi\\\"], [\\\"bd\\\"], [\\\"se\\\"], [\\\"au\\\"], [\\\"ae\\\"], [\\\"kw\\\"], [\\\"ps\\\"], [\\\"pe\\\"], [\\\"lv\\\"], [\\\"de\\\"], [\\\"tw\\\"], [\\\"co\\\"], [\\\"ml\\\"], [\\\"ca\\\"], [\\\"ge\\\"], [\\\"ch\\\"], [\\\"br\\\"], [\\\"ni\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 44, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(groupCountry),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"LONG\\\"], \\\"columnNames\\\": [\\\"count(*)\\\"] }, \\\"rows\\\": [ [1090] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1090, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 0, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1090, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909751127 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT sum(rsvp_count), count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"DOUBLE\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"sum(rsvp_count)\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [1138.0, 1138] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1138, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1138, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1138, \\\"timeUsedMs\\\": 12, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909798452 }\",\n+                        ImmutableList.of(derived(\"sum\"), derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT group_country, group_city FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"group_city\\\"] }, \\\"rows\\\": [ [\\\"nl\\\", \\\"Amsterdam\\\"], [\\\"us\\\", \\\"Edison\\\"], [\\\"au\\\", \\\"Sydney\\\"], [\\\"gb\\\", \\\"Loxley\\\"], [\\\"kr\\\", \\\"Seoul\\\"], [\\\"es\\\", \\\"Barcelona\\\"], [\\\"ie\\\", \\\"Dublin\\\"], [\\\"ar\\\", \\\"Buenos Aires\\\"], [\\\"es\\\", \\\"Madrid\\\"], [\\\"kr\\\", \\\"Seoul\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 20, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1210, \\\"timeUsedMs\\\": 13, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909849974 }\",\n+                        ImmutableList.of(groupCountry, groupCity),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT max(group_country) FROM meetupRsvp\",\n+                        \"{ \\\"exceptions\\\": [ { \\\"errorCode\\\": 200, \\\"message\\\": \\\"QueryExecutionError:\\\\njava.lang.NumberFormatException: For input string: \\\\\\\"nl\\\\\\\"\\\\n\\\\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)\\\\n\\\\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\\\\n\\\\tat java.lang.Double.parseDouble(Double.java:538)\\\\n\\\\tat org.apache.pinot.core.realtime.impl.dictionary.StringOnHeapMutableDictionary.getDoubleValue(StringOnHeapMutableDictionary.java:138)\\\\n\\\\tat org.apache.pinot.core.segment.index.readers.BaseDictionary.readDoubleValues(BaseDictionary.java:55)\\\\n\\\\tat org.apache.pinot.core.common.DataFetcher.fetchDoubleValues(DataFetcher.java:163)\\\\n\\\\tat org.apache.pinot.core.common.DataBlockCache.getDoubleValuesForSVColumn(DataBlockCache.java:166)\\\\n\\\\tat org.apache.pinot.core.operator.docvalsets.ProjectionBlockValSet.getDoubleValuesSV(ProjectionBlockValSet.java:85)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.function.MaxAggregationFunction.aggregate(MaxAggregationFunction.java:62)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.DefaultAggregationExecutor.aggregate(DefaultAggregationExecutor.java:47)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:65)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:35)\\\\n\\\\tat org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\\\\n\\\\tat org.apache.pinot.core.operator.CombineOperator$1.runJob(CombineOperator.java:105)\\\" }], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1376, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1376, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1376, \\\"timeUsedMs\\\": 26, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910013309 }\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        Optional.of(PinotException.class)},\n+                {\"select * from meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"STRING\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"INT\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"event_id\\\", \\\"event_name\\\", \\\"event_time\\\", \\\"group_city\\\", \\\"group_country\\\", \\\"group_id\\\", \\\"group_name\\\", \\\"mtime\\\", \\\"rsvp_count\\\", \\\"venue_name\\\"] }, \\\"rows\\\": [ [\\\"271449847\\\", \\\"\u2600\ufe0fBoat trip for expats \u2600\ufe0fSummer is back on Saturday 27\u2600\ufe0f\\\", 1593253800000, \\\"Amsterdam\\\", \\\"nl\\\", 22032818, \\\"AIC: Amsterdam International Community for expats\\\", 1592908606814, 1, \\\"Boat Trip-Pick-up point \\\"], [\\\"271468544\\\", \\\"How To Start A Career In Privacy & Data Protection\\\", 1593266400000, \\\"Edison\\\", \\\"us\\\", 32769803, \\\"Cybersecurity Careers\\\", 1592908608026, 1, \\\"Online event\\\"], [\\\"270836483\\\", \\\"Episode #2 Power Platform Pub Quiz - Virtual #PPPQ\\\", 1594800000000, \\\"Sydney\\\", \\\"au\\\", 33746135, \\\"Power Platform Pub Quiz #PPPQ\\\", 1592908588000, 1, \\\"Online event\\\"], [\\\"271472391\\\", \\\"Ben Nevis  , Three Sisters , Aonach Eagach (hiking, scrambling and bbq ing)\\uD83E\\uDD17\\\", 1594998000000, \\\"Loxley\\\", \\\"gb\\\", 33286887, \\\"\u2b50  \\uD83D\\uDC10Mountain Pervs\\uD83D\\uDC12  \u2b50\\\", 1592908609397, 1, \\\"Online event\\\"], [\\\"mksgjrybcjbjc\\\", \\\"\ud64d\ub300 \ud38d\ud30c\ud2f0! HONGDAE International Pub Party! Meet local and foreign friends!\\\", 1593165600000, \\\"Seoul\\\", \\\"kr\\\", 26806362, \\\"HONGDAE LANGUAGE EXCHANGE CAFE & PUB: GSM TERRACE HONGDAE\\\", 1592908609962, 1, \\\"HONGDAE GSM Terrace\\\"], [\\\"271336915\\\", \\\"\\uD83C\\uDF34 Un d\u00eda en Cadaqu\u00e9s / A day in Cadaqu\u00e9s \\uD83D\\uDC1F 20\u20ac\\\", 1593324000000, \\\"Barcelona\\\", \\\"es\\\", 15442262, \\\"Barcelona Language Exchange\\\", 1592908610993, 1, \\\"Barcelona\\\"], [\\\"271312704\\\", \\\"Create your startup: The Checklist (online Event)\\\", 1593012600000, \\\"Dublin\\\", \\\"ie\\\", 33262613, \\\"Startup advice: Build My Unicorn (Dublin - Online)\\\", 1592908611199, 1, \\\"Online event\\\"], [\\\"271351670\\\", \\\"[5] Planeamiento \u00c1gil (Desarrollo de Software \u00c1gil en 10Pines)\\\", 1593034200000, \\\"Buenos Aires\\\", \\\"ar\\\", 2811362, \\\"\u00c1giles Argentina\\\", 1592908611403, 1, \\\"Online event\\\"], [\\\"270213022\\\", \\\"MARAT\u00d3N VIRTUAL POWER PLATFORM\\\", 1594623600000, \\\"Madrid\\\", \\\"es\\\", 19418102, \\\"Power BI Spain Users Group\\\", 1592908611966, 1, \\\"Online event\\\"], [\\\"mksgjrybcjbjc\\\", \\\"\ud64d\ub300 \ud38d\ud30c\ud2f0! HONGDAE International Pub Party! Meet local and foreign friends!\\\", 1593165600000, \\\"Seoul\\\", \\\"kr\\\", 26806362, \\\"HONGDAE LANGUAGE EXCHANGE CAFE & PUB: GSM TERRACE HONGDAE\\\", 1592908612111, 1, \\\"HONGDAE GSM Terrace\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 100, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1425, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910063563 }\",\n+                        ImmutableList.of(varchar(\"event_id\"), varchar(\"event_name\"), bigint(\"event_time\"), groupCity, groupCountry, bigint(\"group_id\"), varchar(\"group_name\"), bigint(\"mtime\"), integer(\"rsvp_count\"), varchar(\"venue_name\")),\n+                        ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n+                        Optional.empty()}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"sqlResponses\")\n+    public void testPopulateFromSql(\n+            String sql,\n+            String sqlResponse,\n+            List<PinotColumnHandle> actualHandles,\n+            List<Integer> expectedColumnIndices,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NDg1NQ==", "bodyText": "I can think of a few more cases here:\n\nMultiple group by's: \"select A, B, Count(1), Sum(C) from Table group by B, A\"\nGroup by's without any aggregations: \"select A,  B from Table group by B, A\"", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449254855", "createdAt": "2020-07-02T20:38:31Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotBrokerPageSourceSql\n+        extends TestPinotQueryBase\n+{\n+    private static PinotTableHandle pinotTable = new PinotTableHandle(\"connId\", \"schema\", \"tbl\");\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static PinotColumnHandle groupCountry = new PinotColumnHandle(\"group_country\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+    private static PinotColumnHandle groupCity = new PinotColumnHandle(\"group_city\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+\n+    private static class SqlParsedInfo\n+    {\n+        final int columns;\n+        final int rows;\n+\n+        public SqlParsedInfo(int columns, int rows)\n+        {\n+            this.columns = columns;\n+            this.rows = rows;\n+        }\n+    }\n+\n+    SqlParsedInfo getBasicInfoFromSql(String sqlResponse)\n+            throws IOException\n+    {\n+        int numRows = 0;\n+        int numColumns = 0;\n+        JsonNode sqlJson = objectMapper.readTree(sqlResponse);\n+        JsonNode resultTable = sqlJson.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode rows = resultTable.get(\"rows\");\n+            if (rows != null) {\n+                numRows = rows.size();\n+            }\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema != null) {\n+                JsonNode columnNames = dataSchema.get(\"columnNames\");\n+                if (columnNames != null) {\n+                    numColumns = columnNames.size();\n+                }\n+            }\n+        }\n+        return new SqlParsedInfo(numColumns, numRows);\n+    }\n+\n+    @DataProvider(name = \"sqlResponses\")\n+    public static Object[][] sqlResponsesProvider()\n+    {\n+        return new Object[][] {\n+                {\"SELECT group_country, count(*), sum(rsvp_count) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\", \\\"DOUBLE\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\", \\\"sum(rsvp_count)\\\"] }, \\\"rows\\\": [ [\\\"ch\\\", 11, 11.0], [\\\"kr\\\", 32, 32.0], [\\\"cl\\\", 1, 1.0], [\\\"gr\\\", 2, 2.0], [\\\"co\\\", 2, 2.0], [\\\"cz\\\", 4, 4.0], [\\\"ph\\\", 1, 1.0], [\\\"pl\\\", 16, 16.0], [\\\"li\\\", 1, 1.0], [\\\"tr\\\", 14, 14.0], [\\\"de\\\", 45, 45.0], [\\\"tw\\\", 3, 3.0], [\\\"hk\\\", 14, 14.0], [\\\"pt\\\", 13, 13.0], [\\\"dk\\\", 5, 5.0], [\\\"lu\\\", 2, 2.0], [\\\"ua\\\", 1, 1.0], [\\\"id\\\", 5, 5.0], [\\\"ie\\\", 13, 13.0], [\\\"us\\\", 205, 205.0], [\\\"eg\\\", 1, 1.0], [\\\"il\\\", 14, 14.0], [\\\"ae\\\", 4, 4.0], [\\\"in\\\", 32, 32.0], [\\\"za\\\", 6, 6.0], [\\\"it\\\", 4, 4.0], [\\\"mx\\\", 1, 1.0], [\\\"my\\\", 1, 1.0], [\\\"es\\\", 79, 79.0], [\\\"ar\\\", 5, 5.0], [\\\"at\\\", 14, 14.0], [\\\"au\\\", 119, 119.0], [\\\"ng\\\", 1, 1.0], [\\\"ro\\\", 3, 3.0], [\\\"nl\\\", 24, 24.0], [\\\"no\\\", 1, 1.0], [\\\"be\\\", 2, 2.0], [\\\"jp\\\", 32, 32.0], [\\\"fr\\\", 35, 35.0], [\\\"nz\\\", 12, 12.0], [\\\"sa\\\", 1, 1.0], [\\\"br\\\", 20, 20.0], [\\\"se\\\", 24, 24.0], [\\\"sg\\\", 49, 49.0], [\\\"sk\\\", 2, 2.0], [\\\"ke\\\", 7, 7.0], [\\\"gb\\\", 159, 159.0], [\\\"ca\\\", 11, 11.0] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1053, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 2106, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1053, \\\"timeUsedMs\\\": 7, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909715708 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\"), derived(\"sum\")),\n+                        ImmutableList.of(0, 1, 2),\n+                        Optional.empty()},\n+                {\"SELECT group_country, count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [\\\"eg\\\", 1], [\\\"il\\\", 12], [\\\"ae\\\", 4], [\\\"in\\\", 31], [\\\"ch\\\", 10], [\\\"kr\\\", 30], [\\\"za\\\", 6], [\\\"cl\\\", 1], [\\\"it\\\", 4], [\\\"gr\\\", 1], [\\\"my\\\", 1], [\\\"co\\\", 1], [\\\"es\\\", 75], [\\\"ar\\\", 5], [\\\"at\\\", 12], [\\\"au\\\", 108], [\\\"cz\\\", 4], [\\\"ph\\\", 1], [\\\"ng\\\", 1], [\\\"pl\\\", 15], [\\\"ro\\\", 3], [\\\"li\\\", 1], [\\\"nl\\\", 20], [\\\"tr\\\", 14], [\\\"de\\\", 35], [\\\"no\\\", 1], [\\\"hk\\\", 14], [\\\"tw\\\", 2], [\\\"be\\\", 2], [\\\"pt\\\", 12], [\\\"jp\\\", 28], [\\\"dk\\\", 4], [\\\"lu\\\", 2], [\\\"nz\\\", 11], [\\\"fr\\\", 28], [\\\"ua\\\", 1], [\\\"sa\\\", 1], [\\\"br\\\", 18], [\\\"se\\\", 24], [\\\"sg\\\", 43], [\\\"sk\\\", 2], [\\\"ke\\\", 7], [\\\"gb\\\", 146], [\\\"id\\\", 5], [\\\"ie\\\", 13], [\\\"us\\\", 171], [\\\"ca\\\", 9] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 940, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 940, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 940, \\\"timeUsedMs\\\": 4, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909613611 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*), group_country FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\", \\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\", \\\"STRING\\\"] }, \\\"rows\\\": [ [1, \\\"gh\\\"], [1, \\\"gn\\\"], [48, \\\"gr\\\"], [15, \\\"gt\\\"], [39, \\\"pa\\\"], [203, \\\"pe\\\"], [7, \\\"pf\\\"], [34, \\\"ph\\\"], [30, \\\"pk\\\"], [379, \\\"pl\\\"], [2, \\\"ps\\\"], [896, \\\"hk\\\"], [275, \\\"pt\\\"], [4, \\\"hn\\\"], [8, \\\"py\\\"], [5, \\\"hr\\\"], [68, \\\"hu\\\"], [10, \\\"qa\\\"], [279, \\\"id\\\"], [553, \\\"ie\\\"], [254, \\\"il\\\"], [355, \\\"ae\\\"], [2618, \\\"in\\\"], [211, \\\"za\\\"], [64, \\\"iq\\\"], [270, \\\"it\\\"], [6, \\\"al\\\"], [5, \\\"am\\\"], [8, \\\"ao\\\"], [315, \\\"ar\\\"], [330, \\\"at\\\"], [1, \\\"zm\\\"], [3282, \\\"au\\\"], [3, \\\"az\\\"], [55, \\\"ro\\\"], [2, \\\"ba\\\"], [84, \\\"rs\\\"], [34, \\\"bd\\\"], [87, \\\"ru\\\"], [183, \\\"be\\\"], [13, \\\"bg\\\"], [1472, \\\"jp\\\"], [26, \\\"bh\\\"], [3, \\\"bi\\\"], [64, \\\"bo\\\"], [149, \\\"sa\\\"], [1066, \\\"br\\\"], [6, \\\"sd\\\"], [527, \\\"se\\\"], [936, \\\"sg\\\"], [10, \\\"si\\\"], [11, \\\"sk\\\"], [178, \\\"ke\\\"], [27, \\\"sn\\\"], [2958, \\\"ca\\\"], [6, \\\"cd\\\"], [5, \\\"sv\\\"], [1, \\\"cg\\\"], [705, \\\"ch\\\"], [40, \\\"ci\\\"], [2036, \\\"kr\\\"], [174, \\\"cl\\\"], [3, \\\"cm\\\"], [56, \\\"cn\\\"], [246, \\\"co\\\"], [3, \\\"kw\\\"], [29, \\\"cr\\\"], [150, \\\"th\\\"], [11, \\\"lb\\\"], [3, \\\"cy\\\"], [155, \\\"cz\\\"], [12, \\\"tm\\\"], [6, \\\"tn\\\"], [3, \\\"li\\\"], [329, \\\"tr\\\"], [74, \\\"lk\\\"], [2882, \\\"de\\\"], [124, \\\"tw\\\"], [6, \\\"lr\\\"], [1, \\\"tz\\\"], [121, \\\"dk\\\"], [47, \\\"lt\\\"], [49, \\\"lu\\\"], [15, \\\"lv\\\"], [4, \\\"do\\\"], [58, \\\"ua\\\"], [1, \\\"ug\\\"], [27, \\\"ma\\\"], [5, \\\"dz\\\"], [12, \\\"ec\\\"], [28498, \\\"us\\\"], [7, \\\"mk\\\"], [5, \\\"ml\\\"], [16, \\\"ee\\\"], [6, \\\"mm\\\"], [2, \\\"mn\\\"], [116, \\\"eg\\\"], [5, \\\"mo\\\"], [71, \\\"uy\\\"], [253, \\\"mx\\\"], [100, \\\"my\\\"], [3249, \\\"es\\\"], [1, \\\"et\\\"], [2, \\\"ve\\\"], [36, \\\"vn\\\"], [204, \\\"ng\\\"], [21, \\\"ni\\\"], [946, \\\"nl\\\"], [93, \\\"no\\\"], [12, \\\"np\\\"], [22, \\\"fi\\\"], [2223, \\\"fr\\\"], [767, \\\"nz\\\"], [14, \\\"ga\\\"], [4524, \\\"gb\\\"], [14, \\\"ge\\\"], [1, \\\"om\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\"), groupCountry),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\"] }, \\\"rows\\\": [ [1], [1], [48], [15], [39], [203], [7], [34], [30], [379], [2], [896], [275], [4], [8], [5], [68], [10], [279], [553], [254], [355], [2618], [211], [64], [270], [6], [5], [8], [315], [330], [1], [3282], [3], [55], [2], [84], [34], [87], [183], [13], [1472], [26], [3], [64], [149], [1066], [6], [527], [936], [10], [11], [178], [27], [2958], [6], [5], [1], [705], [40], [2036], [174], [3], [56], [246], [3], [29], [150], [11], [3], [155], [12], [6], [3], [329], [74], [2882], [124], [6], [1], [121], [47], [49], [15], [4], [58], [1], [27], [5], [12], [28498], [7], [5], [16], [6], [2], [116], [5], [71], [253], [100], [3249], [1], [2], [36], [204], [21], [946], [93], [12], [22], [2223], [767], [14], [4524], [14], [1] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 31, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT distinct group_country FROM meetupRsvp  LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"STRING\\\"] }, \\\"rows\\\": [ [\\\"np\\\"], [\\\"az\\\"], [\\\"ar\\\"], [\\\"fr\\\"], [\\\"cd\\\"], [\\\"kr\\\"], [\\\"zm\\\"], [\\\"gn\\\"], [\\\"ro\\\"], [\\\"ao\\\"], [\\\"ie\\\"], [\\\"et\\\"], [\\\"bh\\\"], [\\\"gh\\\"], [\\\"ke\\\"], [\\\"lk\\\"], [\\\"ph\\\"], [\\\"cl\\\"], [\\\"vn\\\"], [\\\"ma\\\"], [\\\"mo\\\"], [\\\"cz\\\"], [\\\"ba\\\"], [\\\"nz\\\"], [\\\"ru\\\"], [\\\"at\\\"], [\\\"be\\\"], [\\\"in\\\"], [\\\"my\\\"], [\\\"ga\\\"], [\\\"cr\\\"], [\\\"us\\\"], [\\\"ug\\\"], [\\\"cy\\\"], [\\\"li\\\"], [\\\"mm\\\"], [\\\"do\\\"], [\\\"cn\\\"], [\\\"es\\\"], [\\\"pt\\\"], [\\\"dk\\\"], [\\\"fi\\\"], [\\\"si\\\"], [\\\"no\\\"], [\\\"am\\\"], [\\\"sk\\\"], [\\\"cg\\\"], [\\\"ci\\\"], [\\\"lu\\\"], [\\\"py\\\"], [\\\"mk\\\"], [\\\"gt\\\"], [\\\"qa\\\"], [\\\"th\\\"], [\\\"ec\\\"], [\\\"pk\\\"], [\\\"bg\\\"], [\\\"bo\\\"], [\\\"om\\\"], [\\\"nl\\\"], [\\\"sd\\\"], [\\\"rs\\\"], [\\\"il\\\"], [\\\"za\\\"], [\\\"ua\\\"], [\\\"hk\\\"], [\\\"lb\\\"], [\\\"tm\\\"], [\\\"gr\\\"], [\\\"it\\\"], [\\\"pf\\\"], [\\\"uy\\\"], [\\\"ee\\\"], [\\\"mx\\\"], [\\\"jp\\\"], [\\\"sg\\\"], [\\\"sa\\\"], [\\\"ng\\\"], [\\\"iq\\\"], [\\\"pa\\\"], [\\\"cm\\\"], [\\\"mn\\\"], [\\\"tr\\\"], [\\\"lr\\\"], [\\\"hn\\\"], [\\\"hu\\\"], [\\\"eg\\\"], [\\\"id\\\"], [\\\"gb\\\"], [\\\"tz\\\"], [\\\"sn\\\"], [\\\"al\\\"], [\\\"sv\\\"], [\\\"dz\\\"], [\\\"pl\\\"], [\\\"lt\\\"], [\\\"hr\\\"], [\\\"tn\\\"], [\\\"ve\\\"], [\\\"bi\\\"], [\\\"bd\\\"], [\\\"se\\\"], [\\\"au\\\"], [\\\"ae\\\"], [\\\"kw\\\"], [\\\"ps\\\"], [\\\"pe\\\"], [\\\"lv\\\"], [\\\"de\\\"], [\\\"tw\\\"], [\\\"co\\\"], [\\\"ml\\\"], [\\\"ca\\\"], [\\\"ge\\\"], [\\\"ch\\\"], [\\\"br\\\"], [\\\"ni\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 44, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(groupCountry),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"LONG\\\"], \\\"columnNames\\\": [\\\"count(*)\\\"] }, \\\"rows\\\": [ [1090] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1090, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 0, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1090, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909751127 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT sum(rsvp_count), count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"DOUBLE\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"sum(rsvp_count)\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [1138.0, 1138] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1138, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1138, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1138, \\\"timeUsedMs\\\": 12, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909798452 }\",\n+                        ImmutableList.of(derived(\"sum\"), derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT group_country, group_city FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"group_city\\\"] }, \\\"rows\\\": [ [\\\"nl\\\", \\\"Amsterdam\\\"], [\\\"us\\\", \\\"Edison\\\"], [\\\"au\\\", \\\"Sydney\\\"], [\\\"gb\\\", \\\"Loxley\\\"], [\\\"kr\\\", \\\"Seoul\\\"], [\\\"es\\\", \\\"Barcelona\\\"], [\\\"ie\\\", \\\"Dublin\\\"], [\\\"ar\\\", \\\"Buenos Aires\\\"], [\\\"es\\\", \\\"Madrid\\\"], [\\\"kr\\\", \\\"Seoul\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 20, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1210, \\\"timeUsedMs\\\": 13, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909849974 }\",\n+                        ImmutableList.of(groupCountry, groupCity),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT max(group_country) FROM meetupRsvp\",\n+                        \"{ \\\"exceptions\\\": [ { \\\"errorCode\\\": 200, \\\"message\\\": \\\"QueryExecutionError:\\\\njava.lang.NumberFormatException: For input string: \\\\\\\"nl\\\\\\\"\\\\n\\\\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)\\\\n\\\\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\\\\n\\\\tat java.lang.Double.parseDouble(Double.java:538)\\\\n\\\\tat org.apache.pinot.core.realtime.impl.dictionary.StringOnHeapMutableDictionary.getDoubleValue(StringOnHeapMutableDictionary.java:138)\\\\n\\\\tat org.apache.pinot.core.segment.index.readers.BaseDictionary.readDoubleValues(BaseDictionary.java:55)\\\\n\\\\tat org.apache.pinot.core.common.DataFetcher.fetchDoubleValues(DataFetcher.java:163)\\\\n\\\\tat org.apache.pinot.core.common.DataBlockCache.getDoubleValuesForSVColumn(DataBlockCache.java:166)\\\\n\\\\tat org.apache.pinot.core.operator.docvalsets.ProjectionBlockValSet.getDoubleValuesSV(ProjectionBlockValSet.java:85)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.function.MaxAggregationFunction.aggregate(MaxAggregationFunction.java:62)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.DefaultAggregationExecutor.aggregate(DefaultAggregationExecutor.java:47)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:65)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:35)\\\\n\\\\tat org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\\\\n\\\\tat org.apache.pinot.core.operator.CombineOperator$1.runJob(CombineOperator.java:105)\\\" }], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1376, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1376, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1376, \\\"timeUsedMs\\\": 26, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910013309 }\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        Optional.of(PinotException.class)},\n+                {\"select * from meetupRsvp\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NzcwOQ==", "bodyText": "I didn't follow this: I thought in the SQL end point, its okay to have a Pinot SQL query like: \"select count(1), A, B, Sum(C) from Table group by B, A\" ... ie the group by columns's don't have to come before the agg columns. (And thus we don't need expectedColumnIndices). Is that case tested ?\nI am curious what is the pinot SQL expected for these presto sql queries:\n\n\"select A, B, Count(1), Sum(C) from Table group by B, A\"\n-\"select Count(1), A, Sum(C), B from Table group by B, A\"", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449257709", "createdAt": "2020-07-02T20:45:35Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot.query;\n+\n+import com.facebook.presto.testing.assertions.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPinotQueryGeneratorSql\n+        extends TestPinotQueryGenerator\n+{\n+    @Override\n+    public boolean useSqlSyntax()\n+    {\n+        return true;\n+    }\n+\n+    @Test\n+    public void assertUsingSqlSyntax()\n+    {\n+        Assert.assertEquals(defaultSessionHolder.getConnectorSession()\n+                .getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n+    }\n+\n+    @Override\n+    public String getExpectedAggOutput(String expectedAggOutput, String groupByColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1ODA1OQ==", "bodyText": "Is order by aggregation limit tested ? That's another difference b/w the SQL and the PQL end point. For example, what would be the pinot sql corresponding to this presto sql: \"select A, B, Count(1), Sum(C) from Table group by B, A order by SUM(C) ASC limit 3\"\nAnother example: \"select A, B, Sum(C) from Table group by B, A order by SUM(C) ASC limit 3\"", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449258059", "createdAt": "2020-07-02T20:46:31Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot.query;\n+\n+import com.facebook.presto.testing.assertions.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPinotQueryGeneratorSql\n+        extends TestPinotQueryGenerator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTgwNDA0", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-442580404", "createdAt": "2020-07-04T01:36:37Z", "commit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMTozNjozN1rOGs5NFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMTo0MTo1M1rOGs5ORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyNzc2NA==", "bodyText": "Why is this an error for this Pinot SQL query ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449727764", "createdAt": "2020-07-04T01:36:37Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotBrokerPageSourceSql\n+        extends TestPinotQueryBase\n+{\n+    private static PinotTableHandle pinotTable = new PinotTableHandle(\"connId\", \"schema\", \"tbl\");\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static PinotColumnHandle groupCountry = new PinotColumnHandle(\"group_country\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+    private static PinotColumnHandle groupCity = new PinotColumnHandle(\"group_city\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+\n+    private static class SqlParsedInfo\n+    {\n+        final int columns;\n+        final int rows;\n+\n+        public SqlParsedInfo(int columns, int rows)\n+        {\n+            this.columns = columns;\n+            this.rows = rows;\n+        }\n+    }\n+\n+    SqlParsedInfo getBasicInfoFromSql(String sqlResponse)\n+            throws IOException\n+    {\n+        int numRows = 0;\n+        int numColumns = 0;\n+        JsonNode sqlJson = objectMapper.readTree(sqlResponse);\n+        JsonNode resultTable = sqlJson.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode rows = resultTable.get(\"rows\");\n+            if (rows != null) {\n+                numRows = rows.size();\n+            }\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema != null) {\n+                JsonNode columnNames = dataSchema.get(\"columnNames\");\n+                if (columnNames != null) {\n+                    numColumns = columnNames.size();\n+                }\n+            }\n+        }\n+        return new SqlParsedInfo(numColumns, numRows);\n+    }\n+\n+    @DataProvider(name = \"sqlResponses\")\n+    public static Object[][] sqlResponsesProvider()\n+    {\n+        return new Object[][] {\n+                {\"SELECT group_country, count(*), sum(rsvp_count) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\", \\\"DOUBLE\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\", \\\"sum(rsvp_count)\\\"] }, \\\"rows\\\": [ [\\\"ch\\\", 11, 11.0], [\\\"kr\\\", 32, 32.0], [\\\"cl\\\", 1, 1.0], [\\\"gr\\\", 2, 2.0], [\\\"co\\\", 2, 2.0], [\\\"cz\\\", 4, 4.0], [\\\"ph\\\", 1, 1.0], [\\\"pl\\\", 16, 16.0], [\\\"li\\\", 1, 1.0], [\\\"tr\\\", 14, 14.0], [\\\"de\\\", 45, 45.0], [\\\"tw\\\", 3, 3.0], [\\\"hk\\\", 14, 14.0], [\\\"pt\\\", 13, 13.0], [\\\"dk\\\", 5, 5.0], [\\\"lu\\\", 2, 2.0], [\\\"ua\\\", 1, 1.0], [\\\"id\\\", 5, 5.0], [\\\"ie\\\", 13, 13.0], [\\\"us\\\", 205, 205.0], [\\\"eg\\\", 1, 1.0], [\\\"il\\\", 14, 14.0], [\\\"ae\\\", 4, 4.0], [\\\"in\\\", 32, 32.0], [\\\"za\\\", 6, 6.0], [\\\"it\\\", 4, 4.0], [\\\"mx\\\", 1, 1.0], [\\\"my\\\", 1, 1.0], [\\\"es\\\", 79, 79.0], [\\\"ar\\\", 5, 5.0], [\\\"at\\\", 14, 14.0], [\\\"au\\\", 119, 119.0], [\\\"ng\\\", 1, 1.0], [\\\"ro\\\", 3, 3.0], [\\\"nl\\\", 24, 24.0], [\\\"no\\\", 1, 1.0], [\\\"be\\\", 2, 2.0], [\\\"jp\\\", 32, 32.0], [\\\"fr\\\", 35, 35.0], [\\\"nz\\\", 12, 12.0], [\\\"sa\\\", 1, 1.0], [\\\"br\\\", 20, 20.0], [\\\"se\\\", 24, 24.0], [\\\"sg\\\", 49, 49.0], [\\\"sk\\\", 2, 2.0], [\\\"ke\\\", 7, 7.0], [\\\"gb\\\", 159, 159.0], [\\\"ca\\\", 11, 11.0] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1053, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 2106, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1053, \\\"timeUsedMs\\\": 7, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909715708 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\"), derived(\"sum\")),\n+                        ImmutableList.of(0, 1, 2),\n+                        Optional.empty()},\n+                {\"SELECT group_country, count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [\\\"eg\\\", 1], [\\\"il\\\", 12], [\\\"ae\\\", 4], [\\\"in\\\", 31], [\\\"ch\\\", 10], [\\\"kr\\\", 30], [\\\"za\\\", 6], [\\\"cl\\\", 1], [\\\"it\\\", 4], [\\\"gr\\\", 1], [\\\"my\\\", 1], [\\\"co\\\", 1], [\\\"es\\\", 75], [\\\"ar\\\", 5], [\\\"at\\\", 12], [\\\"au\\\", 108], [\\\"cz\\\", 4], [\\\"ph\\\", 1], [\\\"ng\\\", 1], [\\\"pl\\\", 15], [\\\"ro\\\", 3], [\\\"li\\\", 1], [\\\"nl\\\", 20], [\\\"tr\\\", 14], [\\\"de\\\", 35], [\\\"no\\\", 1], [\\\"hk\\\", 14], [\\\"tw\\\", 2], [\\\"be\\\", 2], [\\\"pt\\\", 12], [\\\"jp\\\", 28], [\\\"dk\\\", 4], [\\\"lu\\\", 2], [\\\"nz\\\", 11], [\\\"fr\\\", 28], [\\\"ua\\\", 1], [\\\"sa\\\", 1], [\\\"br\\\", 18], [\\\"se\\\", 24], [\\\"sg\\\", 43], [\\\"sk\\\", 2], [\\\"ke\\\", 7], [\\\"gb\\\", 146], [\\\"id\\\", 5], [\\\"ie\\\", 13], [\\\"us\\\", 171], [\\\"ca\\\", 9] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 940, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 940, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 940, \\\"timeUsedMs\\\": 4, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909613611 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*), group_country FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\", \\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\", \\\"STRING\\\"] }, \\\"rows\\\": [ [1, \\\"gh\\\"], [1, \\\"gn\\\"], [48, \\\"gr\\\"], [15, \\\"gt\\\"], [39, \\\"pa\\\"], [203, \\\"pe\\\"], [7, \\\"pf\\\"], [34, \\\"ph\\\"], [30, \\\"pk\\\"], [379, \\\"pl\\\"], [2, \\\"ps\\\"], [896, \\\"hk\\\"], [275, \\\"pt\\\"], [4, \\\"hn\\\"], [8, \\\"py\\\"], [5, \\\"hr\\\"], [68, \\\"hu\\\"], [10, \\\"qa\\\"], [279, \\\"id\\\"], [553, \\\"ie\\\"], [254, \\\"il\\\"], [355, \\\"ae\\\"], [2618, \\\"in\\\"], [211, \\\"za\\\"], [64, \\\"iq\\\"], [270, \\\"it\\\"], [6, \\\"al\\\"], [5, \\\"am\\\"], [8, \\\"ao\\\"], [315, \\\"ar\\\"], [330, \\\"at\\\"], [1, \\\"zm\\\"], [3282, \\\"au\\\"], [3, \\\"az\\\"], [55, \\\"ro\\\"], [2, \\\"ba\\\"], [84, \\\"rs\\\"], [34, \\\"bd\\\"], [87, \\\"ru\\\"], [183, \\\"be\\\"], [13, \\\"bg\\\"], [1472, \\\"jp\\\"], [26, \\\"bh\\\"], [3, \\\"bi\\\"], [64, \\\"bo\\\"], [149, \\\"sa\\\"], [1066, \\\"br\\\"], [6, \\\"sd\\\"], [527, \\\"se\\\"], [936, \\\"sg\\\"], [10, \\\"si\\\"], [11, \\\"sk\\\"], [178, \\\"ke\\\"], [27, \\\"sn\\\"], [2958, \\\"ca\\\"], [6, \\\"cd\\\"], [5, \\\"sv\\\"], [1, \\\"cg\\\"], [705, \\\"ch\\\"], [40, \\\"ci\\\"], [2036, \\\"kr\\\"], [174, \\\"cl\\\"], [3, \\\"cm\\\"], [56, \\\"cn\\\"], [246, \\\"co\\\"], [3, \\\"kw\\\"], [29, \\\"cr\\\"], [150, \\\"th\\\"], [11, \\\"lb\\\"], [3, \\\"cy\\\"], [155, \\\"cz\\\"], [12, \\\"tm\\\"], [6, \\\"tn\\\"], [3, \\\"li\\\"], [329, \\\"tr\\\"], [74, \\\"lk\\\"], [2882, \\\"de\\\"], [124, \\\"tw\\\"], [6, \\\"lr\\\"], [1, \\\"tz\\\"], [121, \\\"dk\\\"], [47, \\\"lt\\\"], [49, \\\"lu\\\"], [15, \\\"lv\\\"], [4, \\\"do\\\"], [58, \\\"ua\\\"], [1, \\\"ug\\\"], [27, \\\"ma\\\"], [5, \\\"dz\\\"], [12, \\\"ec\\\"], [28498, \\\"us\\\"], [7, \\\"mk\\\"], [5, \\\"ml\\\"], [16, \\\"ee\\\"], [6, \\\"mm\\\"], [2, \\\"mn\\\"], [116, \\\"eg\\\"], [5, \\\"mo\\\"], [71, \\\"uy\\\"], [253, \\\"mx\\\"], [100, \\\"my\\\"], [3249, \\\"es\\\"], [1, \\\"et\\\"], [2, \\\"ve\\\"], [36, \\\"vn\\\"], [204, \\\"ng\\\"], [21, \\\"ni\\\"], [946, \\\"nl\\\"], [93, \\\"no\\\"], [12, \\\"np\\\"], [22, \\\"fi\\\"], [2223, \\\"fr\\\"], [767, \\\"nz\\\"], [14, \\\"ga\\\"], [4524, \\\"gb\\\"], [14, \\\"ge\\\"], [1, \\\"om\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\"), groupCountry),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\"] }, \\\"rows\\\": [ [1], [1], [48], [15], [39], [203], [7], [34], [30], [379], [2], [896], [275], [4], [8], [5], [68], [10], [279], [553], [254], [355], [2618], [211], [64], [270], [6], [5], [8], [315], [330], [1], [3282], [3], [55], [2], [84], [34], [87], [183], [13], [1472], [26], [3], [64], [149], [1066], [6], [527], [936], [10], [11], [178], [27], [2958], [6], [5], [1], [705], [40], [2036], [174], [3], [56], [246], [3], [29], [150], [11], [3], [155], [12], [6], [3], [329], [74], [2882], [124], [6], [1], [121], [47], [49], [15], [4], [58], [1], [27], [5], [12], [28498], [7], [5], [16], [6], [2], [116], [5], [71], [253], [100], [3249], [1], [2], [36], [204], [21], [946], [93], [12], [22], [2223], [767], [14], [4524], [14], [1] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 31, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT distinct group_country FROM meetupRsvp  LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"STRING\\\"] }, \\\"rows\\\": [ [\\\"np\\\"], [\\\"az\\\"], [\\\"ar\\\"], [\\\"fr\\\"], [\\\"cd\\\"], [\\\"kr\\\"], [\\\"zm\\\"], [\\\"gn\\\"], [\\\"ro\\\"], [\\\"ao\\\"], [\\\"ie\\\"], [\\\"et\\\"], [\\\"bh\\\"], [\\\"gh\\\"], [\\\"ke\\\"], [\\\"lk\\\"], [\\\"ph\\\"], [\\\"cl\\\"], [\\\"vn\\\"], [\\\"ma\\\"], [\\\"mo\\\"], [\\\"cz\\\"], [\\\"ba\\\"], [\\\"nz\\\"], [\\\"ru\\\"], [\\\"at\\\"], [\\\"be\\\"], [\\\"in\\\"], [\\\"my\\\"], [\\\"ga\\\"], [\\\"cr\\\"], [\\\"us\\\"], [\\\"ug\\\"], [\\\"cy\\\"], [\\\"li\\\"], [\\\"mm\\\"], [\\\"do\\\"], [\\\"cn\\\"], [\\\"es\\\"], [\\\"pt\\\"], [\\\"dk\\\"], [\\\"fi\\\"], [\\\"si\\\"], [\\\"no\\\"], [\\\"am\\\"], [\\\"sk\\\"], [\\\"cg\\\"], [\\\"ci\\\"], [\\\"lu\\\"], [\\\"py\\\"], [\\\"mk\\\"], [\\\"gt\\\"], [\\\"qa\\\"], [\\\"th\\\"], [\\\"ec\\\"], [\\\"pk\\\"], [\\\"bg\\\"], [\\\"bo\\\"], [\\\"om\\\"], [\\\"nl\\\"], [\\\"sd\\\"], [\\\"rs\\\"], [\\\"il\\\"], [\\\"za\\\"], [\\\"ua\\\"], [\\\"hk\\\"], [\\\"lb\\\"], [\\\"tm\\\"], [\\\"gr\\\"], [\\\"it\\\"], [\\\"pf\\\"], [\\\"uy\\\"], [\\\"ee\\\"], [\\\"mx\\\"], [\\\"jp\\\"], [\\\"sg\\\"], [\\\"sa\\\"], [\\\"ng\\\"], [\\\"iq\\\"], [\\\"pa\\\"], [\\\"cm\\\"], [\\\"mn\\\"], [\\\"tr\\\"], [\\\"lr\\\"], [\\\"hn\\\"], [\\\"hu\\\"], [\\\"eg\\\"], [\\\"id\\\"], [\\\"gb\\\"], [\\\"tz\\\"], [\\\"sn\\\"], [\\\"al\\\"], [\\\"sv\\\"], [\\\"dz\\\"], [\\\"pl\\\"], [\\\"lt\\\"], [\\\"hr\\\"], [\\\"tn\\\"], [\\\"ve\\\"], [\\\"bi\\\"], [\\\"bd\\\"], [\\\"se\\\"], [\\\"au\\\"], [\\\"ae\\\"], [\\\"kw\\\"], [\\\"ps\\\"], [\\\"pe\\\"], [\\\"lv\\\"], [\\\"de\\\"], [\\\"tw\\\"], [\\\"co\\\"], [\\\"ml\\\"], [\\\"ca\\\"], [\\\"ge\\\"], [\\\"ch\\\"], [\\\"br\\\"], [\\\"ni\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 44, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(groupCountry),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"LONG\\\"], \\\"columnNames\\\": [\\\"count(*)\\\"] }, \\\"rows\\\": [ [1090] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1090, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 0, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1090, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909751127 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT sum(rsvp_count), count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"DOUBLE\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"sum(rsvp_count)\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [1138.0, 1138] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1138, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1138, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1138, \\\"timeUsedMs\\\": 12, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909798452 }\",\n+                        ImmutableList.of(derived(\"sum\"), derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT group_country, group_city FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"group_city\\\"] }, \\\"rows\\\": [ [\\\"nl\\\", \\\"Amsterdam\\\"], [\\\"us\\\", \\\"Edison\\\"], [\\\"au\\\", \\\"Sydney\\\"], [\\\"gb\\\", \\\"Loxley\\\"], [\\\"kr\\\", \\\"Seoul\\\"], [\\\"es\\\", \\\"Barcelona\\\"], [\\\"ie\\\", \\\"Dublin\\\"], [\\\"ar\\\", \\\"Buenos Aires\\\"], [\\\"es\\\", \\\"Madrid\\\"], [\\\"kr\\\", \\\"Seoul\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 20, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1210, \\\"timeUsedMs\\\": 13, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909849974 }\",\n+                        ImmutableList.of(groupCountry, groupCity),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT max(group_country) FROM meetupRsvp\",\n+                        \"{ \\\"exceptions\\\": [ { \\\"errorCode\\\": 200, \\\"message\\\": \\\"QueryExecutionError:\\\\njava.lang.NumberFormatException: For input string: \\\\\\\"nl\\\\\\\"\\\\n\\\\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)\\\\n\\\\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\\\\n\\\\tat java.lang.Double.parseDouble(Double.java:538)\\\\n\\\\tat org.apache.pinot.core.realtime.impl.dictionary.StringOnHeapMutableDictionary.getDoubleValue(StringOnHeapMutableDictionary.java:138)\\\\n\\\\tat org.apache.pinot.core.segment.index.readers.BaseDictionary.readDoubleValues(BaseDictionary.java:55)\\\\n\\\\tat org.apache.pinot.core.common.DataFetcher.fetchDoubleValues(DataFetcher.java:163)\\\\n\\\\tat org.apache.pinot.core.common.DataBlockCache.getDoubleValuesForSVColumn(DataBlockCache.java:166)\\\\n\\\\tat org.apache.pinot.core.operator.docvalsets.ProjectionBlockValSet.getDoubleValuesSV(ProjectionBlockValSet.java:85)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.function.MaxAggregationFunction.aggregate(MaxAggregationFunction.java:62)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.DefaultAggregationExecutor.aggregate(DefaultAggregationExecutor.java:47)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:65)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:35)\\\\n\\\\tat org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\\\\n\\\\tat org.apache.pinot.core.operator.CombineOperator$1.runJob(CombineOperator.java:105)\\\" }], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1376, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1376, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1376, \\\"timeUsedMs\\\": 26, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910013309 }\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyNzgxMQ==", "bodyText": "I see. So am I reading the test on line 103 of this file: \"SELECT distinct group_country FROM meetupRsvp  LIMIT 1000000\" correctly ? It uses expectedColumnIndices to do this logic ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449727811", "createdAt": "2020-07-04T01:37:38Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSourceSql.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotBrokerPageSourceSql\n+        extends TestPinotQueryBase\n+{\n+    private static PinotTableHandle pinotTable = new PinotTableHandle(\"connId\", \"schema\", \"tbl\");\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static PinotColumnHandle groupCountry = new PinotColumnHandle(\"group_country\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+    private static PinotColumnHandle groupCity = new PinotColumnHandle(\"group_city\", VARCHAR, PinotColumnHandle.PinotColumnType.REGULAR);\n+\n+    private static class SqlParsedInfo\n+    {\n+        final int columns;\n+        final int rows;\n+\n+        public SqlParsedInfo(int columns, int rows)\n+        {\n+            this.columns = columns;\n+            this.rows = rows;\n+        }\n+    }\n+\n+    SqlParsedInfo getBasicInfoFromSql(String sqlResponse)\n+            throws IOException\n+    {\n+        int numRows = 0;\n+        int numColumns = 0;\n+        JsonNode sqlJson = objectMapper.readTree(sqlResponse);\n+        JsonNode resultTable = sqlJson.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode rows = resultTable.get(\"rows\");\n+            if (rows != null) {\n+                numRows = rows.size();\n+            }\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema != null) {\n+                JsonNode columnNames = dataSchema.get(\"columnNames\");\n+                if (columnNames != null) {\n+                    numColumns = columnNames.size();\n+                }\n+            }\n+        }\n+        return new SqlParsedInfo(numColumns, numRows);\n+    }\n+\n+    @DataProvider(name = \"sqlResponses\")\n+    public static Object[][] sqlResponsesProvider()\n+    {\n+        return new Object[][] {\n+                {\"SELECT group_country, count(*), sum(rsvp_count) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\", \\\"DOUBLE\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\", \\\"sum(rsvp_count)\\\"] }, \\\"rows\\\": [ [\\\"ch\\\", 11, 11.0], [\\\"kr\\\", 32, 32.0], [\\\"cl\\\", 1, 1.0], [\\\"gr\\\", 2, 2.0], [\\\"co\\\", 2, 2.0], [\\\"cz\\\", 4, 4.0], [\\\"ph\\\", 1, 1.0], [\\\"pl\\\", 16, 16.0], [\\\"li\\\", 1, 1.0], [\\\"tr\\\", 14, 14.0], [\\\"de\\\", 45, 45.0], [\\\"tw\\\", 3, 3.0], [\\\"hk\\\", 14, 14.0], [\\\"pt\\\", 13, 13.0], [\\\"dk\\\", 5, 5.0], [\\\"lu\\\", 2, 2.0], [\\\"ua\\\", 1, 1.0], [\\\"id\\\", 5, 5.0], [\\\"ie\\\", 13, 13.0], [\\\"us\\\", 205, 205.0], [\\\"eg\\\", 1, 1.0], [\\\"il\\\", 14, 14.0], [\\\"ae\\\", 4, 4.0], [\\\"in\\\", 32, 32.0], [\\\"za\\\", 6, 6.0], [\\\"it\\\", 4, 4.0], [\\\"mx\\\", 1, 1.0], [\\\"my\\\", 1, 1.0], [\\\"es\\\", 79, 79.0], [\\\"ar\\\", 5, 5.0], [\\\"at\\\", 14, 14.0], [\\\"au\\\", 119, 119.0], [\\\"ng\\\", 1, 1.0], [\\\"ro\\\", 3, 3.0], [\\\"nl\\\", 24, 24.0], [\\\"no\\\", 1, 1.0], [\\\"be\\\", 2, 2.0], [\\\"jp\\\", 32, 32.0], [\\\"fr\\\", 35, 35.0], [\\\"nz\\\", 12, 12.0], [\\\"sa\\\", 1, 1.0], [\\\"br\\\", 20, 20.0], [\\\"se\\\", 24, 24.0], [\\\"sg\\\", 49, 49.0], [\\\"sk\\\", 2, 2.0], [\\\"ke\\\", 7, 7.0], [\\\"gb\\\", 159, 159.0], [\\\"ca\\\", 11, 11.0] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1053, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 2106, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1053, \\\"timeUsedMs\\\": 7, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909715708 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\"), derived(\"sum\")),\n+                        ImmutableList.of(0, 1, 2),\n+                        Optional.empty()},\n+                {\"SELECT group_country, count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [\\\"eg\\\", 1], [\\\"il\\\", 12], [\\\"ae\\\", 4], [\\\"in\\\", 31], [\\\"ch\\\", 10], [\\\"kr\\\", 30], [\\\"za\\\", 6], [\\\"cl\\\", 1], [\\\"it\\\", 4], [\\\"gr\\\", 1], [\\\"my\\\", 1], [\\\"co\\\", 1], [\\\"es\\\", 75], [\\\"ar\\\", 5], [\\\"at\\\", 12], [\\\"au\\\", 108], [\\\"cz\\\", 4], [\\\"ph\\\", 1], [\\\"ng\\\", 1], [\\\"pl\\\", 15], [\\\"ro\\\", 3], [\\\"li\\\", 1], [\\\"nl\\\", 20], [\\\"tr\\\", 14], [\\\"de\\\", 35], [\\\"no\\\", 1], [\\\"hk\\\", 14], [\\\"tw\\\", 2], [\\\"be\\\", 2], [\\\"pt\\\", 12], [\\\"jp\\\", 28], [\\\"dk\\\", 4], [\\\"lu\\\", 2], [\\\"nz\\\", 11], [\\\"fr\\\", 28], [\\\"ua\\\", 1], [\\\"sa\\\", 1], [\\\"br\\\", 18], [\\\"se\\\", 24], [\\\"sg\\\", 43], [\\\"sk\\\", 2], [\\\"ke\\\", 7], [\\\"gb\\\", 146], [\\\"id\\\", 5], [\\\"ie\\\", 13], [\\\"us\\\", 171], [\\\"ca\\\", 9] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 940, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 940, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 940, \\\"timeUsedMs\\\": 4, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909613611 }\",\n+                        ImmutableList.of(groupCountry, derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*), group_country FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\", \\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\", \\\"STRING\\\"] }, \\\"rows\\\": [ [1, \\\"gh\\\"], [1, \\\"gn\\\"], [48, \\\"gr\\\"], [15, \\\"gt\\\"], [39, \\\"pa\\\"], [203, \\\"pe\\\"], [7, \\\"pf\\\"], [34, \\\"ph\\\"], [30, \\\"pk\\\"], [379, \\\"pl\\\"], [2, \\\"ps\\\"], [896, \\\"hk\\\"], [275, \\\"pt\\\"], [4, \\\"hn\\\"], [8, \\\"py\\\"], [5, \\\"hr\\\"], [68, \\\"hu\\\"], [10, \\\"qa\\\"], [279, \\\"id\\\"], [553, \\\"ie\\\"], [254, \\\"il\\\"], [355, \\\"ae\\\"], [2618, \\\"in\\\"], [211, \\\"za\\\"], [64, \\\"iq\\\"], [270, \\\"it\\\"], [6, \\\"al\\\"], [5, \\\"am\\\"], [8, \\\"ao\\\"], [315, \\\"ar\\\"], [330, \\\"at\\\"], [1, \\\"zm\\\"], [3282, \\\"au\\\"], [3, \\\"az\\\"], [55, \\\"ro\\\"], [2, \\\"ba\\\"], [84, \\\"rs\\\"], [34, \\\"bd\\\"], [87, \\\"ru\\\"], [183, \\\"be\\\"], [13, \\\"bg\\\"], [1472, \\\"jp\\\"], [26, \\\"bh\\\"], [3, \\\"bi\\\"], [64, \\\"bo\\\"], [149, \\\"sa\\\"], [1066, \\\"br\\\"], [6, \\\"sd\\\"], [527, \\\"se\\\"], [936, \\\"sg\\\"], [10, \\\"si\\\"], [11, \\\"sk\\\"], [178, \\\"ke\\\"], [27, \\\"sn\\\"], [2958, \\\"ca\\\"], [6, \\\"cd\\\"], [5, \\\"sv\\\"], [1, \\\"cg\\\"], [705, \\\"ch\\\"], [40, \\\"ci\\\"], [2036, \\\"kr\\\"], [174, \\\"cl\\\"], [3, \\\"cm\\\"], [56, \\\"cn\\\"], [246, \\\"co\\\"], [3, \\\"kw\\\"], [29, \\\"cr\\\"], [150, \\\"th\\\"], [11, \\\"lb\\\"], [3, \\\"cy\\\"], [155, \\\"cz\\\"], [12, \\\"tm\\\"], [6, \\\"tn\\\"], [3, \\\"li\\\"], [329, \\\"tr\\\"], [74, \\\"lk\\\"], [2882, \\\"de\\\"], [124, \\\"tw\\\"], [6, \\\"lr\\\"], [1, \\\"tz\\\"], [121, \\\"dk\\\"], [47, \\\"lt\\\"], [49, \\\"lu\\\"], [15, \\\"lv\\\"], [4, \\\"do\\\"], [58, \\\"ua\\\"], [1, \\\"ug\\\"], [27, \\\"ma\\\"], [5, \\\"dz\\\"], [12, \\\"ec\\\"], [28498, \\\"us\\\"], [7, \\\"mk\\\"], [5, \\\"ml\\\"], [16, \\\"ee\\\"], [6, \\\"mm\\\"], [2, \\\"mn\\\"], [116, \\\"eg\\\"], [5, \\\"mo\\\"], [71, \\\"uy\\\"], [253, \\\"mx\\\"], [100, \\\"my\\\"], [3249, \\\"es\\\"], [1, \\\"et\\\"], [2, \\\"ve\\\"], [36, \\\"vn\\\"], [204, \\\"ng\\\"], [21, \\\"ni\\\"], [946, \\\"nl\\\"], [93, \\\"no\\\"], [12, \\\"np\\\"], [22, \\\"fi\\\"], [2223, \\\"fr\\\"], [767, \\\"nz\\\"], [14, \\\"ga\\\"], [4524, \\\"gb\\\"], [14, \\\"ge\\\"], [1, \\\"om\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\"), groupCountry),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp GROUP BY group_country LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"count(*)\\\"], \\\"columnDataTypes\\\": [\\\"LONG\\\"] }, \\\"rows\\\": [ [1], [1], [48], [15], [39], [203], [7], [34], [30], [379], [2], [896], [275], [4], [8], [5], [68], [10], [279], [553], [254], [355], [2618], [211], [64], [270], [6], [5], [8], [315], [330], [1], [3282], [3], [55], [2], [84], [34], [87], [183], [13], [1472], [26], [3], [64], [149], [1066], [6], [527], [936], [10], [11], [178], [27], [2958], [6], [5], [1], [705], [40], [2036], [174], [3], [56], [246], [3], [29], [150], [11], [3], [155], [12], [6], [3], [329], [74], [2882], [124], [6], [1], [121], [47], [49], [15], [4], [58], [1], [27], [5], [12], [28498], [7], [5], [16], [6], [2], [116], [5], [71], [253], [100], [3249], [1], [2], [36], [204], [21], [946], [93], [12], [22], [2223], [767], [14], [4524], [14], [1] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 31, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT distinct group_country FROM meetupRsvp  LIMIT 1000000\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnNames\\\": [\\\"group_country\\\"], \\\"columnDataTypes\\\": [\\\"STRING\\\"] }, \\\"rows\\\": [ [\\\"np\\\"], [\\\"az\\\"], [\\\"ar\\\"], [\\\"fr\\\"], [\\\"cd\\\"], [\\\"kr\\\"], [\\\"zm\\\"], [\\\"gn\\\"], [\\\"ro\\\"], [\\\"ao\\\"], [\\\"ie\\\"], [\\\"et\\\"], [\\\"bh\\\"], [\\\"gh\\\"], [\\\"ke\\\"], [\\\"lk\\\"], [\\\"ph\\\"], [\\\"cl\\\"], [\\\"vn\\\"], [\\\"ma\\\"], [\\\"mo\\\"], [\\\"cz\\\"], [\\\"ba\\\"], [\\\"nz\\\"], [\\\"ru\\\"], [\\\"at\\\"], [\\\"be\\\"], [\\\"in\\\"], [\\\"my\\\"], [\\\"ga\\\"], [\\\"cr\\\"], [\\\"us\\\"], [\\\"ug\\\"], [\\\"cy\\\"], [\\\"li\\\"], [\\\"mm\\\"], [\\\"do\\\"], [\\\"cn\\\"], [\\\"es\\\"], [\\\"pt\\\"], [\\\"dk\\\"], [\\\"fi\\\"], [\\\"si\\\"], [\\\"no\\\"], [\\\"am\\\"], [\\\"sk\\\"], [\\\"cg\\\"], [\\\"ci\\\"], [\\\"lu\\\"], [\\\"py\\\"], [\\\"mk\\\"], [\\\"gt\\\"], [\\\"qa\\\"], [\\\"th\\\"], [\\\"ec\\\"], [\\\"pk\\\"], [\\\"bg\\\"], [\\\"bo\\\"], [\\\"om\\\"], [\\\"nl\\\"], [\\\"sd\\\"], [\\\"rs\\\"], [\\\"il\\\"], [\\\"za\\\"], [\\\"ua\\\"], [\\\"hk\\\"], [\\\"lb\\\"], [\\\"tm\\\"], [\\\"gr\\\"], [\\\"it\\\"], [\\\"pf\\\"], [\\\"uy\\\"], [\\\"ee\\\"], [\\\"mx\\\"], [\\\"jp\\\"], [\\\"sg\\\"], [\\\"sa\\\"], [\\\"ng\\\"], [\\\"iq\\\"], [\\\"pa\\\"], [\\\"cm\\\"], [\\\"mn\\\"], [\\\"tr\\\"], [\\\"lr\\\"], [\\\"hn\\\"], [\\\"hu\\\"], [\\\"eg\\\"], [\\\"id\\\"], [\\\"gb\\\"], [\\\"tz\\\"], [\\\"sn\\\"], [\\\"al\\\"], [\\\"sv\\\"], [\\\"dz\\\"], [\\\"pl\\\"], [\\\"lt\\\"], [\\\"hr\\\"], [\\\"tn\\\"], [\\\"ve\\\"], [\\\"bi\\\"], [\\\"bd\\\"], [\\\"se\\\"], [\\\"au\\\"], [\\\"ae\\\"], [\\\"kw\\\"], [\\\"ps\\\"], [\\\"pe\\\"], [\\\"lv\\\"], [\\\"de\\\"], [\\\"tw\\\"], [\\\"co\\\"], [\\\"ml\\\"], [\\\"ca\\\"], [\\\"ge\\\"], [\\\"ch\\\"], [\\\"br\\\"], [\\\"ni\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 5, \\\"numSegmentsProcessed\\\": 4, \\\"numSegmentsMatched\\\": 4, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 67077, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 67077, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 67077, \\\"timeUsedMs\\\": 44, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 9223372036854775807 }\",\n+                        ImmutableList.of(groupCountry),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"LONG\\\"], \\\"columnNames\\\": [\\\"count(*)\\\"] }, \\\"rows\\\": [ [1090] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1090, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 0, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1090, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909751127 }\",\n+                        ImmutableList.of(derived(\"count\")),\n+                        ImmutableList.of(0),\n+                        Optional.empty()},\n+                {\"SELECT sum(rsvp_count), count(*) FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"DOUBLE\\\", \\\"LONG\\\"], \\\"columnNames\\\": [\\\"sum(rsvp_count)\\\", \\\"count(*)\\\"] }, \\\"rows\\\": [ [1138.0, 1138] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1138, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1138, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1138, \\\"timeUsedMs\\\": 12, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909798452 }\",\n+                        ImmutableList.of(derived(\"sum\"), derived(\"count\")),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT group_country, group_city FROM meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"group_country\\\", \\\"group_city\\\"] }, \\\"rows\\\": [ [\\\"nl\\\", \\\"Amsterdam\\\"], [\\\"us\\\", \\\"Edison\\\"], [\\\"au\\\", \\\"Sydney\\\"], [\\\"gb\\\", \\\"Loxley\\\"], [\\\"kr\\\", \\\"Seoul\\\"], [\\\"es\\\", \\\"Barcelona\\\"], [\\\"ie\\\", \\\"Dublin\\\"], [\\\"ar\\\", \\\"Buenos Aires\\\"], [\\\"es\\\", \\\"Madrid\\\"], [\\\"kr\\\", \\\"Seoul\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 20, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1210, \\\"timeUsedMs\\\": 13, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592909849974 }\",\n+                        ImmutableList.of(groupCountry, groupCity),\n+                        ImmutableList.of(0, 1),\n+                        Optional.empty()},\n+                {\"SELECT max(group_country) FROM meetupRsvp\",\n+                        \"{ \\\"exceptions\\\": [ { \\\"errorCode\\\": 200, \\\"message\\\": \\\"QueryExecutionError:\\\\njava.lang.NumberFormatException: For input string: \\\\\\\"nl\\\\\\\"\\\\n\\\\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)\\\\n\\\\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\\\\n\\\\tat java.lang.Double.parseDouble(Double.java:538)\\\\n\\\\tat org.apache.pinot.core.realtime.impl.dictionary.StringOnHeapMutableDictionary.getDoubleValue(StringOnHeapMutableDictionary.java:138)\\\\n\\\\tat org.apache.pinot.core.segment.index.readers.BaseDictionary.readDoubleValues(BaseDictionary.java:55)\\\\n\\\\tat org.apache.pinot.core.common.DataFetcher.fetchDoubleValues(DataFetcher.java:163)\\\\n\\\\tat org.apache.pinot.core.common.DataBlockCache.getDoubleValuesForSVColumn(DataBlockCache.java:166)\\\\n\\\\tat org.apache.pinot.core.operator.docvalsets.ProjectionBlockValSet.getDoubleValuesSV(ProjectionBlockValSet.java:85)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.function.MaxAggregationFunction.aggregate(MaxAggregationFunction.java:62)\\\\n\\\\tat org.apache.pinot.core.query.aggregation.DefaultAggregationExecutor.aggregate(DefaultAggregationExecutor.java:47)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:65)\\\\n\\\\tat org.apache.pinot.core.operator.query.AggregationOperator.getNextBlock(AggregationOperator.java:35)\\\\n\\\\tat org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\\\\n\\\\tat org.apache.pinot.core.operator.CombineOperator$1.runJob(CombineOperator.java:105)\\\" }], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 1376, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 1376, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1376, \\\"timeUsedMs\\\": 26, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910013309 }\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        Optional.of(PinotException.class)},\n+                {\"select * from meetupRsvp\",\n+                        \"{ \\\"resultTable\\\": { \\\"dataSchema\\\": { \\\"columnDataTypes\\\": [\\\"STRING\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"STRING\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"STRING\\\", \\\"LONG\\\", \\\"INT\\\", \\\"STRING\\\"], \\\"columnNames\\\": [\\\"event_id\\\", \\\"event_name\\\", \\\"event_time\\\", \\\"group_city\\\", \\\"group_country\\\", \\\"group_id\\\", \\\"group_name\\\", \\\"mtime\\\", \\\"rsvp_count\\\", \\\"venue_name\\\"] }, \\\"rows\\\": [ [\\\"271449847\\\", \\\"\u2600\ufe0fBoat trip for expats \u2600\ufe0fSummer is back on Saturday 27\u2600\ufe0f\\\", 1593253800000, \\\"Amsterdam\\\", \\\"nl\\\", 22032818, \\\"AIC: Amsterdam International Community for expats\\\", 1592908606814, 1, \\\"Boat Trip-Pick-up point \\\"], [\\\"271468544\\\", \\\"How To Start A Career In Privacy & Data Protection\\\", 1593266400000, \\\"Edison\\\", \\\"us\\\", 32769803, \\\"Cybersecurity Careers\\\", 1592908608026, 1, \\\"Online event\\\"], [\\\"270836483\\\", \\\"Episode #2 Power Platform Pub Quiz - Virtual #PPPQ\\\", 1594800000000, \\\"Sydney\\\", \\\"au\\\", 33746135, \\\"Power Platform Pub Quiz #PPPQ\\\", 1592908588000, 1, \\\"Online event\\\"], [\\\"271472391\\\", \\\"Ben Nevis  , Three Sisters , Aonach Eagach (hiking, scrambling and bbq ing)\\uD83E\\uDD17\\\", 1594998000000, \\\"Loxley\\\", \\\"gb\\\", 33286887, \\\"\u2b50  \\uD83D\\uDC10Mountain Pervs\\uD83D\\uDC12  \u2b50\\\", 1592908609397, 1, \\\"Online event\\\"], [\\\"mksgjrybcjbjc\\\", \\\"\ud64d\ub300 \ud38d\ud30c\ud2f0! HONGDAE International Pub Party! Meet local and foreign friends!\\\", 1593165600000, \\\"Seoul\\\", \\\"kr\\\", 26806362, \\\"HONGDAE LANGUAGE EXCHANGE CAFE & PUB: GSM TERRACE HONGDAE\\\", 1592908609962, 1, \\\"HONGDAE GSM Terrace\\\"], [\\\"271336915\\\", \\\"\\uD83C\\uDF34 Un d\u00eda en Cadaqu\u00e9s / A day in Cadaqu\u00e9s \\uD83D\\uDC1F 20\u20ac\\\", 1593324000000, \\\"Barcelona\\\", \\\"es\\\", 15442262, \\\"Barcelona Language Exchange\\\", 1592908610993, 1, \\\"Barcelona\\\"], [\\\"271312704\\\", \\\"Create your startup: The Checklist (online Event)\\\", 1593012600000, \\\"Dublin\\\", \\\"ie\\\", 33262613, \\\"Startup advice: Build My Unicorn (Dublin - Online)\\\", 1592908611199, 1, \\\"Online event\\\"], [\\\"271351670\\\", \\\"[5] Planeamiento \u00c1gil (Desarrollo de Software \u00c1gil en 10Pines)\\\", 1593034200000, \\\"Buenos Aires\\\", \\\"ar\\\", 2811362, \\\"\u00c1giles Argentina\\\", 1592908611403, 1, \\\"Online event\\\"], [\\\"270213022\\\", \\\"MARAT\u00d3N VIRTUAL POWER PLATFORM\\\", 1594623600000, \\\"Madrid\\\", \\\"es\\\", 19418102, \\\"Power BI Spain Users Group\\\", 1592908611966, 1, \\\"Online event\\\"], [\\\"mksgjrybcjbjc\\\", \\\"\ud64d\ub300 \ud38d\ud30c\ud2f0! HONGDAE International Pub Party! Meet local and foreign friends!\\\", 1593165600000, \\\"Seoul\\\", \\\"kr\\\", 26806362, \\\"HONGDAE LANGUAGE EXCHANGE CAFE & PUB: GSM TERRACE HONGDAE\\\", 1592908612111, 1, \\\"HONGDAE GSM Terrace\\\"] ] }, \\\"exceptions\\\": [], \\\"numServersQueried\\\": 1, \\\"numServersResponded\\\": 1, \\\"numSegmentsQueried\\\": 1, \\\"numSegmentsProcessed\\\": 1, \\\"numSegmentsMatched\\\": 1, \\\"numConsumingSegmentsQueried\\\": 1, \\\"numDocsScanned\\\": 10, \\\"numEntriesScannedInFilter\\\": 0, \\\"numEntriesScannedPostFilter\\\": 100, \\\"numGroupsLimitReached\\\": false, \\\"totalDocs\\\": 1425, \\\"timeUsedMs\\\": 10, \\\"segmentStatistics\\\": [], \\\"traceInfo\\\": {}, \\\"minConsumingFreshnessTimeMs\\\": 1592910063563 }\",\n+                        ImmutableList.of(varchar(\"event_id\"), varchar(\"event_name\"), bigint(\"event_time\"), groupCity, groupCountry, bigint(\"group_id\"), varchar(\"group_name\"), bigint(\"mtime\"), integer(\"rsvp_count\"), varchar(\"venue_name\")),\n+                        ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n+                        Optional.empty()}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"sqlResponses\")\n+    public void testPopulateFromSql(\n+            String sql,\n+            String sqlResponse,\n+            List<PinotColumnHandle> actualHandles,\n+            List<Integer> expectedColumnIndices,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NDgyMg=="}, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyODA3MA==", "bodyText": "Okay, so this implementation of getExpectedAggOutput does not allow mixing of agg and group by columns. It does handle the group by columns to be explicitly present (which is not the case for PQL). But how would the Presto SQL query with mixed group by and aggregation get translated in the SQL endpoint: \"select count(1), A, Sum(C), B from Table group by B, A\" ? (note that the aggregations and group by columns are intermingled here and you can't clump the two separately)", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r449728070", "createdAt": "2020-07-04T01:41:53Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot.query;\n+\n+import com.facebook.presto.testing.assertions.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPinotQueryGeneratorSql\n+        extends TestPinotQueryGenerator\n+{\n+    @Override\n+    public boolean useSqlSyntax()\n+    {\n+        return true;\n+    }\n+\n+    @Test\n+    public void assertUsingSqlSyntax()\n+    {\n+        Assert.assertEquals(defaultSessionHolder.getConnectorSession()\n+                .getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n+    }\n+\n+    @Override\n+    public String getExpectedAggOutput(String expectedAggOutput, String groupByColumns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NzcwOQ=="}, "originalCommit": {"oid": "a1ce7cf232dfc58d15854f6e8298fa7e16f122cd"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjI4NDE1", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-443228415", "createdAt": "2020-07-06T16:26:10Z", "commit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyNjoxMFrOGtegLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowMzowM1rOGtf1yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzODg2MQ==", "bodyText": "no commented code ;-).\nAlso, just to confirm: Does this mean that the SQL endpoint has no need for expected column indices because it uses the outputs approach ? Perhaps add a comment to this effect here ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450338861", "createdAt": "2020-07-06T16:26:10Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceSql.java", "diffHunk": "@@ -141,16 +139,19 @@ public BlockAndTypeBuilder buildBlockAndTypeBuilder(List<PinotColumnHandle> colu\n                 .collect(Collectors.toList());\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         ArrayList<BlockBuilder> columnBlockBuilders = new ArrayList<>();\n-        Map<Integer, Integer> expectedColumnIndices = new HashMap<>();\n-        for (int i = 0; i < brokerSql.getExpectedColumnIndices().size(); i++) {\n-            int expectedIdx = brokerSql.getExpectedColumnIndices().get(i);\n-            if (expectedIdx < 0) {\n-                continue;\n-            }\n-            expectedColumnIndices.put(expectedIdx, i);\n-        }\n-        for (int columnIndex = 0; columnIndex < expectedColumnIndices.size(); columnIndex++) {\n-            columnBlockBuilders.add(pageBuilder.getBlockBuilder(expectedColumnIndices.get(columnIndex)));\n+        // Map<Integer, Integer> expectedColumnIndices = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MjE1Mw==", "bodyText": "Does this method really need to modify its state ? Typically the withXXX methods just return a \"copy on write\" of the existing state. Modifying the selections field here makes me uncomfortable in that it deviates from convention.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450342153", "createdAt": "2020-07-06T16:31:25Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -177,26 +186,45 @@ public PinotQueryGeneratorContext withAggregation(\n         }\n         checkSupported(!hasLimit(), \"Pinot doesn't support aggregation on top of the limit\");\n         checkSupported(aggregations > 0, \"Invalid number of aggregations\");\n-        return new PinotQueryGeneratorContext(newSelections, from, filter, aggregations, groupByColumns, topNColumnOrderingMap, limit, variablesInAggregation, hiddenColumnSet, useSqlSyntax);\n+        return new PinotQueryGeneratorContext(newSelections, newOutputs, from, filter, aggregations, groupByColumns, topNColumnOrderingMap, limit, variablesInAggregation, hiddenColumnSet, useSqlSyntax);\n     }\n \n     /**\n      * Apply new selections/project to current context and return the updated context. Throws error for invalid operations.\n      */\n-    public PinotQueryGeneratorContext withProject(LinkedHashMap<VariableReferenceExpression, Selection> newSelections)\n+    public PinotQueryGeneratorContext withProject(LinkedHashMap<VariableReferenceExpression, Selection> newSelections, LinkedHashSet<VariableReferenceExpression> newOutputs)\n     {\n-        checkSupported(groupByColumns.isEmpty(), \"Pinot doesn't yet support new selections on top of the grouped by data\");\n-        return new PinotQueryGeneratorContext(\n-                newSelections,\n-                from,\n-                filter,\n-                aggregations,\n-                groupByColumns,\n-                topNColumnOrderingMap,\n-                limit,\n-                variablesInAggregation,\n-                hiddenColumnSet,\n-                useSqlSyntax);\n+        if (useSqlSyntax) {\n+            selections.putAll(newSelections);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MjgwMA==", "bodyText": "commented code", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450342800", "createdAt": "2020-07-06T16:32:35Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -430,9 +460,9 @@ else if (!groupByColumns.isEmpty()) {\n             limitClause = \" LIMIT \" + queryLimit;\n         }\n         String query = generatePinotQueryHelper(forBroker, expressions, tableName, limitClause);\n-        LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments = getAssignments();\n-        List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, assignments);\n-        return new PinotQueryGenerator.GeneratedPinotQuery(tableName, query, PinotQueryGenerator.PinotQueryFormat.SQL, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n+        //LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments = getAssignments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NjIzNg==", "bodyText": "My understanding is that outputs is only used for the SQL code flow, while the PQL codeflow still uses Indices. Can you add a comment here to this effect ? I think we should explain the relationship b/w \"selections\" and \"outputs\" better. (For example, is outputs a subset of selections ?)\nI also like this outputs way in general -- any sense of what would it take to make the PQL endpoint make use of this new approach too ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450346236", "createdAt": "2020-07-06T16:38:21Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -57,6 +57,7 @@\n     // Fields defining the query\n     // order map that maps the column definition in terms of input relation column(s)\n     private final LinkedHashMap<VariableReferenceExpression, Selection> selections;\n+    private final LinkedHashSet<VariableReferenceExpression> outputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1NTk0MA==", "bodyText": "Can you list this line by line like so its easier to read ?\nplanBuilder\n   .aggregation()\n   .singleGroupingSet()", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450355940", "createdAt": "2020-07-06T16:54:20Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -57,4 +68,74 @@ public void testMultipleAggregateGroupByWithLimitFails()\n     {\n         super.testMultipleAggregateGroupByWithLimitFails();\n     }\n+\n+    @Test\n+    public void testAggregationWithGroupByOrderBy()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        TableScanNode tableScanNode = tableScan(planBuilder, pinotTable, regionId, city, fare);\n+        AggregationNode agg = planBuilder.aggregation(aggBuilder -> aggBuilder.source(tableScanNode).singleGroupingSet(variable(\"city\"), variable(\"regionid\")).addAggregation(planBuilder.variable(\"sum_fare\"), getRowExpression(\"sum(fare)\", defaultSessionHolder)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1NzkxMQ==", "bodyText": "I don't see the order by in the plans below.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450357911", "createdAt": "2020-07-06T16:57:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -57,4 +68,74 @@ public void testMultipleAggregateGroupByWithLimitFails()\n     {\n         super.testMultipleAggregateGroupByWithLimitFails();\n     }\n+\n+    @Test\n+    public void testAggregationWithGroupByOrderBy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MDc3Nw==", "bodyText": "Can you point me to where the mixed group-by-aggregation projection tests are added ? I couldn't see them in this batch of changes. The closes that it comes to is testAggregationWithGroupByOrderBy. Its important to test those particularly since we switched from expectedColumnIndices to outputs way of handling it.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450360777", "createdAt": "2020-07-06T17:03:03Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -13,7 +13,18 @@\n  */\n package com.facebook.presto.pinot.query;\n \n+import com.facebook.presto.common.block.SortOrder;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.Ordering;\n+import com.facebook.presto.spi.plan.OrderingScheme;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n import com.facebook.presto.testing.assertions.Assert;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n \n public class TestPinotQueryGeneratorSql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/4b56ecbccb61f4942f79f639827c2e9e6f1ea4f7", "committedDate": "2020-07-06T11:08:39Z", "message": "Adding more tests"}, "afterCommit": {"oid": "2971fca7b2bf85c0b8a29f68189851198d0aef85", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/2971fca7b2bf85c0b8a29f68189851198d0aef85", "committedDate": "2020-07-07T06:21:19Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2971fca7b2bf85c0b8a29f68189851198d0aef85", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/2971fca7b2bf85c0b8a29f68189851198d0aef85", "committedDate": "2020-07-07T06:21:19Z", "message": "Adding more tests"}, "afterCommit": {"oid": "c0184031b407cfe30166da92a87cc642a940108d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c0184031b407cfe30166da92a87cc642a940108d", "committedDate": "2020-07-07T06:36:02Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0184031b407cfe30166da92a87cc642a940108d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c0184031b407cfe30166da92a87cc642a940108d", "committedDate": "2020-07-07T06:36:02Z", "message": "Adding more tests"}, "afterCommit": {"oid": "c0c4aa5119ee79104b58df2c2febff3bd0fee85a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c0c4aa5119ee79104b58df2c2febff3bd0fee85a", "committedDate": "2020-07-07T09:12:30Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0c4aa5119ee79104b58df2c2febff3bd0fee85a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c0c4aa5119ee79104b58df2c2febff3bd0fee85a", "committedDate": "2020-07-07T09:12:30Z", "message": "Adding more tests"}, "afterCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/58fccabf64da1043d3c4766920edb6ff7c9c709c", "committedDate": "2020-07-07T10:33:58Z", "message": "Adding more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDQzNDQ2", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-444043446", "createdAt": "2020-07-07T16:11:05Z", "commit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoxMTowNVrOGuFvAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NToyN1rOGuHZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MTYzMw==", "bodyText": "nit: I think we don't need to retain the historical reference to column indices. Instead should we simply say that the SQL broker page source returns the columns in the order requested by Presto.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450981633", "createdAt": "2020-07-07T16:11:05Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceSql.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator.GeneratedPinotQuery;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PinotBrokerPageSourceSql\n+        extends PinotBrokerPageSourceBase\n+{\n+    private static final String REQUEST_PAYLOAD_TEMPLATE = \"{\\\"sql\\\" : \\\"%s\\\" }\";\n+    private static final String QUERY_URL_TEMPLATE = \"http://%s/query/sql\";\n+\n+    private final GeneratedPinotQuery brokerSql;\n+\n+    public PinotBrokerPageSourceSql(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            GeneratedPinotQuery brokerSql,\n+            List<PinotColumnHandle> columnHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        super(pinotConfig, session, columnHandles, clusterInfoFetcher, objectMapper);\n+        this.brokerSql = requireNonNull(brokerSql, \"broker is null\");\n+    }\n+\n+    @Override\n+    protected GeneratedPinotQuery getBrokerQuery()\n+    {\n+        return brokerSql;\n+    }\n+\n+    @Override\n+    String getQueryUrlTemplate()\n+    {\n+        return QUERY_URL_TEMPLATE;\n+    }\n+\n+    @Override\n+    String getRequestPayloadTemplate()\n+    {\n+        return REQUEST_PAYLOAD_TEMPLATE;\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public int populateFromQueryResults(\n+            GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types,\n+            String responseJsonString)\n+    {\n+        String sql = pinotQuery.getQuery();\n+        JsonNode jsonBody;\n+        try {\n+            jsonBody = objectMapper.readTree(responseJsonString);\n+        }\n+        catch (IOException e) {\n+            throw new PinotException(PINOT_UNEXPECTED_RESPONSE, Optional.of(sql), \"Couldn't parse response\", e);\n+        }\n+        handleCommonResponse(sql, jsonBody);\n+        JsonNode resultTable = jsonBody.get(\"resultTable\");\n+        if (resultTable != null) {\n+            JsonNode dataSchema = resultTable.get(\"dataSchema\");\n+            if (dataSchema == null) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"Expected data schema in the response\"));\n+            }\n+            JsonNode columnDataTypes = dataSchema.get(\"columnDataTypes\");\n+            JsonNode columnNames = dataSchema.get(\"columnNames\");\n+\n+            if (columnDataTypes == null\n+                    || !columnDataTypes.isArray()\n+                    || columnDataTypes.size() < blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"ColumnDataTypes and results expected for %s, expected %d columnDataTypes but got %d\", sql, blockBuilders.size(), columnDataTypes == null ? 0 : columnDataTypes.size()));\n+            }\n+            if (columnNames == null\n+                    || !columnNames.isArray()\n+                    || columnNames.size() < blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    String.format(\"ColumnNames and results expected for %s, expected %d columnNames but got %d\", sql, blockBuilders.size(), columnNames == null ? 0 : columnNames.size()));\n+            }\n+\n+            JsonNode rows = resultTable.get(\"rows\");\n+            checkState(rows.size() >= 1, \"Expected at least one row to be present\");\n+            setRows(sql, blockBuilders, types, rows);\n+            return rows.size();\n+        }\n+        else {\n+            throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(sql),\n+                    \"Expected resultTable to be present\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public BlockAndTypeBuilder buildBlockAndTypeBuilder(List<PinotColumnHandle> columnHandles,\n+            GeneratedPinotQuery brokerSql)\n+    {\n+        List<Type> columnTypes = columnHandles.stream()\n+                .map(PinotColumnHandle::getDataType)\n+                .collect(Collectors.toList());\n+        PageBuilder pageBuilder = new PageBuilder(columnTypes);\n+        ArrayList<BlockBuilder> columnBlockBuilders = new ArrayList<>();\n+        // Sql mode requires no need for expected column indices as Pinot Sql responses follow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NTcyMA==", "bodyText": "I still don't think I am understanding why this is done :-(.\nThe project node gives us the projections it wants, and we create newSelections (and newOutputs) out of that. So if we use the SQL syntax, why are we retaining what the old selections were ? A comment with some example query/plan when this is needed would certainly help !\nIf that's the case (that old selections should be retained): Why is not done unconditionally ? Why is it not done by the context ?\nIn addition, should selections now be a simple HashMap instead of a LinkedHashMap ? There is a new structure outputs to maintain the ordering now.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450985720", "createdAt": "2020-07-07T16:17:30Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -271,33 +289,39 @@ public PinotQueryGeneratorContext visitProject(ProjectNode node, PinotQueryGener\n             PinotQueryGeneratorContext context = node.getSource().accept(this, contextIn);\n             requireNonNull(context, \"context is null\");\n             LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-\n+            LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>();\n             node.getOutputVariables().forEach(variable -> {\n                 RowExpression expression = node.getAssignments().get(variable);\n                 PinotExpression pinotExpression = expression.accept(\n                         contextIn.getVariablesInAggregation().contains(variable) ?\n-                                new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n+                        new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n                         context.getSelections());\n                 newSelections.put(\n                         variable,\n                         new Selection(pinotExpression.getDefinition(), pinotExpression.getOrigin()));\n+                newOutputs.add(variable);\n             });\n-            return context.withProject(newSelections);\n+            if (useSqlSyntax) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NzExNA==", "bodyText": "nit: outputs -> Outputs, field -> fields", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450987114", "createdAt": "2020-07-07T16:19:50Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -57,6 +57,10 @@\n     // Fields defining the query\n     // order map that maps the column definition in terms of input relation column(s)\n     private final LinkedHashMap<VariableReferenceExpression, Selection> selections;\n+    // outputs are the field defined in Presto for what's expected from Pinot Sql query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4ODgxNg==", "bodyText": "I didn't truly understand why the PQL query generation cannot use outputs and still uses selections.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r450988816", "createdAt": "2020-07-07T16:22:28Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -273,10 +302,15 @@ private boolean hasOrderBy()\n         return variablesInAggregation;\n     }\n \n+    public PinotQueryGenerator.GeneratedPinotQuery toQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    {\n+        return useSqlSyntax ? toSqlQuery(pinotConfig, session) : toPqlQuery(pinotConfig, session);\n+    }\n+\n     /**\n      * Convert the current context to a PQL\n      */\n-    public PinotQueryGenerator.GeneratedPql toQuery(PinotConfig pinotConfig, ConnectorSession session)\n+    public PinotQueryGenerator.GeneratedPinotQuery toPqlQuery(PinotConfig pinotConfig, ConnectorSession session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODkxNg==", "bodyText": "If this test is only for the SQL end point, should it go in TestPinotQueryGeneratorSql ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r451008916", "createdAt": "2020-07-07T16:55:27Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -324,6 +367,25 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TableScanNode tableScanNode = tableScan(planBuilder, pinotTable, city, fare);\n         AggregationNode agg = planBuilder.aggregation(aggBuilder -> aggBuilder.source(tableScanNode).singleGroupingSet(variable(\"city\")).addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"sum(fare)\", defaultSessionHolder)));\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n-        testPQL(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n+        testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c"}, "originalPosition": 357}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58fccabf64da1043d3c4766920edb6ff7c9c709c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/58fccabf64da1043d3c4766920edb6ff7c9c709c", "committedDate": "2020-07-07T10:33:58Z", "message": "Adding more tests"}, "afterCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/433db34d7899bdf5fa31437933b17b587ade2e4f", "committedDate": "2020-07-07T22:52:17Z", "message": "Adding more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODQzMzg1", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-445843385", "createdAt": "2020-07-09T17:55:24Z", "commit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo1NToyNFrOGvb1Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoxNTo0OFrOGvcgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MjI0Mg==", "bodyText": "I actually thought that your comment above was very clear to explain the context behind this if condition:\nThe reason is newSelections contains the mapping from varRef to rowExpression.\noutput, groupby, orderby will hold only varRef.\n\nWhen we try to generate pinot query, the varRef in groupby may not be in output, e.g. select count(*) group by A, in PQL, we expect A is always in selections.\nHere in SQL, we need to hold all the mappings somewhere, which is in selections.\n\nCan you try to fold some of that comment into the above ? Particularly the example query. It will really bring out the reason more clearly.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452392242", "createdAt": "2020-07-09T17:55:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -270,34 +289,42 @@ public PinotQueryGeneratorContext visitProject(ProjectNode node, PinotQueryGener\n         {\n             PinotQueryGeneratorContext context = node.getSource().accept(this, contextIn);\n             requireNonNull(context, \"context is null\");\n-            LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-\n+            Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>();\n+            LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>();\n             node.getOutputVariables().forEach(variable -> {\n                 RowExpression expression = node.getAssignments().get(variable);\n                 PinotExpression pinotExpression = expression.accept(\n                         contextIn.getVariablesInAggregation().contains(variable) ?\n-                                new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n+                        new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n                         context.getSelections());\n                 newSelections.put(\n                         variable,\n                         new Selection(pinotExpression.getDefinition(), pinotExpression.getOrigin()));\n+                newOutputs.add(variable);\n             });\n-            return context.withProject(newSelections);\n+            if (useSqlSyntax) {\n+                // We keep all the VariableReferenceExpression to Selection mapping in newSelections to construct SQL query.\n+                // Object newOutputs contains the expressions required from Presto side, which is subset of the keys of newSelections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MjgzMA==", "bodyText": "Just like line 319 above, should this also be Map<> newSelections = new HashMap<> ? (instead of new LinkedHashMap)", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452392830", "createdAt": "2020-07-09T17:56:33Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -415,7 +442,7 @@ public PinotQueryGeneratorContext visitAggregation(AggregationNode node, PinotQu\n             checkSupported(!forbidBrokerQueries, \"Cannot push aggregation in segment mode\");\n \n             // 2nd pass\n-            LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n+            Map<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MzUzMw==", "bodyText": "I think it would be clearer to rework the condition like: if (!useSqlSyntax && groupByExists && aggregations == 0) ...\nIt will bring out the intent more clearly that this special casing is only needed in the pql codeflow. In addition you can update the comment on line 476 too to state that.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452393533", "createdAt": "2020-07-09T17:57:53Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -448,10 +475,12 @@ public PinotQueryGeneratorContext visitAggregation(AggregationNode node, PinotQu\n \n             // Handling non-aggregated group by\n             if (groupByExists && aggregations == 0) {\n-                VariableReferenceExpression hidden = new VariableReferenceExpression(UUID.randomUUID().toString(), BigintType.BIGINT);\n-                newSelections.put(hidden, new Selection(\"count(*)\", DERIVED));\n-                hiddenColumnSet.add(hidden);\n-                aggregations++;\n+                if (!useSqlSyntax) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NDA2Ng==", "bodyText": "We can omit the term \"order map\" above", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452394066", "createdAt": "2020-07-09T17:58:54Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -56,7 +56,11 @@\n     public static final String TABLE_NAME_SUFFIX_TEMPLATE = \"__TABLE_NAME_SUFFIX_TEMPLATE__\";\n     // Fields defining the query\n     // order map that maps the column definition in terms of input relation column(s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NjQzMg==", "bodyText": "This line is stale: Outputs are now also used for the PQL code flow -- thank you !!!", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452396432", "createdAt": "2020-07-09T18:03:06Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -56,7 +56,11 @@\n     public static final String TABLE_NAME_SUFFIX_TEMPLATE = \"__TABLE_NAME_SUFFIX_TEMPLATE__\";\n     // Fields defining the query\n     // order map that maps the column definition in terms of input relation column(s)\n-    private final LinkedHashMap<VariableReferenceExpression, Selection> selections;\n+    private final Map<VariableReferenceExpression, Selection> selections;\n+    // Outputs are the fields defined in Presto for what's expected from Pinot Sql query.\n+    // This is currently only used for Pinot Sql query code path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5OTU2Nw==", "bodyText": "Is it possible to dedup these lines with the one below [532-534] ? Particularly line 524 that creates the PinotColumnHandle.\nOne possible way would be to do this in two steps: In the first step you partition outputs into: groupByColumns and those that are not in groupByColumns and not hidden. Then you can stitch these two partitions and create the column handles in one pass from them. Not sure how much code it would save, but it might help simplify the logic.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452399567", "createdAt": "2020-07-09T18:08:55Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -419,9 +518,18 @@ else if (!groupByColumns.isEmpty()) {\n     public LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> getAssignments()\n     {\n         LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> result = new LinkedHashMap<>();\n-        selections.entrySet().stream().filter(e -> !hiddenColumnSet.contains(e.getKey())).forEach(entry -> {\n-            VariableReferenceExpression variable = entry.getKey();\n-            Selection selection = entry.getValue();\n+        if (groupByColumns != null) {\n+            groupByColumns.stream().forEach(variable -> {\n+                Selection selection = selections.get(variable);\n+                PinotColumnHandle handle = selection.getOrigin() == Origin.TABLE_COLUMN ? new PinotColumnHandle(selection.getDefinition(), variable.getType(), PinotColumnHandle.PinotColumnType.REGULAR) : new PinotColumnHandle(variable, PinotColumnHandle.PinotColumnType.DERIVED);\n+                result.put(variable, handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 419}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjQ5Mw==", "bodyText": "Would this work ?: LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(outputColumns);", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452402493", "createdAt": "2020-07-09T18:14:20Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -430,26 +538,28 @@ else if (!groupByColumns.isEmpty()) {\n \n     public PinotQueryGeneratorContext withOutputColumns(List<VariableReferenceExpression> outputColumns)\n     {\n-        LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-        outputColumns.forEach(o -> newSelections.put(o, requireNonNull(selections.get(o), String.format(\"Cannot find the selection %s in the original context %s\", o, this))));\n+        LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMzM0MA==", "bodyText": "This check on line 434 (Cannot find the selection ...) has been dropped. Was it intentional ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452403340", "createdAt": "2020-07-09T18:15:48Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -430,26 +538,28 @@ else if (!groupByColumns.isEmpty()) {\n \n     public PinotQueryGeneratorContext withOutputColumns(List<VariableReferenceExpression> outputColumns)\n     {\n-        LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-        outputColumns.forEach(o -> newSelections.put(o, requireNonNull(selections.get(o), String.format(\"Cannot find the selection %s in the original context %s\", o, this))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f"}, "originalPosition": 435}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "433db34d7899bdf5fa31437933b17b587ade2e4f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/433db34d7899bdf5fa31437933b17b587ade2e4f", "committedDate": "2020-07-07T22:52:17Z", "message": "Adding more tests"}, "afterCommit": {"oid": "c2c5eda75529534ea63f2b2088b30315bf5d3b56", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c2c5eda75529534ea63f2b2088b30315bf5d3b56", "committedDate": "2020-07-10T00:42:03Z", "message": "Adding more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDYwOTI4", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-446060928", "createdAt": "2020-07-10T01:04:53Z", "commit": {"oid": "c2c5eda75529534ea63f2b2088b30315bf5d3b56"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c5eda75529534ea63f2b2088b30315bf5d3b56", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c2c5eda75529534ea63f2b2088b30315bf5d3b56", "committedDate": "2020-07-10T00:42:03Z", "message": "Adding more tests"}, "afterCommit": {"oid": "4698ab7af2f0f7689113871575fa79d2ca79543e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/4698ab7af2f0f7689113871575fa79d2ca79543e", "committedDate": "2020-07-10T09:32:02Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4698ab7af2f0f7689113871575fa79d2ca79543e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/4698ab7af2f0f7689113871575fa79d2ca79543e", "committedDate": "2020-07-10T09:32:02Z", "message": "Adding more tests"}, "afterCommit": {"oid": "932461e6da0e4ea8f599416b76bbc54daaa2c88c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/932461e6da0e4ea8f599416b76bbc54daaa2c88c", "committedDate": "2020-07-10T10:16:35Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "932461e6da0e4ea8f599416b76bbc54daaa2c88c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/932461e6da0e4ea8f599416b76bbc54daaa2c88c", "committedDate": "2020-07-10T10:16:35Z", "message": "Adding more tests"}, "afterCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/374a419e75b99060154a42790a57a15012e71535", "committedDate": "2020-07-10T10:49:10Z", "message": "Adding more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDk4ODQ0", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-446498844", "createdAt": "2020-07-10T15:33:36Z", "commit": {"oid": "374a419e75b99060154a42790a57a15012e71535"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozMzozN1rOGv77vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0MDoyN1rOGv8KzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxODIwNA==", "bodyText": "nit (Everywhere): The convention is to do one argument per line or all arguments on the same line.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452918204", "createdAt": "2020-07-10T15:33:37Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -135,27 +149,29 @@ public PinotQueryGeneratorContext withFilter(String filter)\n         checkSupported(!hasLimit(), \"Pinot doesn't support filtering on top of the limit\");\n         return new PinotQueryGeneratorContext(\n                 selections,\n+                outputs,\n                 from,\n                 Optional.of(filter),\n                 aggregations,\n                 groupByColumns,\n                 topNColumnOrderingMap,\n                 limit,\n                 variablesInAggregation,\n-                hiddenColumnSet);\n+                hiddenColumnSet,\n+                useSqlSyntax);\n     }\n \n     /**\n      * Apply the aggregation to current context and return the updated context. Throws error for invalid operations.\n      */\n-    public PinotQueryGeneratorContext withAggregation(\n-            LinkedHashMap<VariableReferenceExpression, Selection> newSelections,\n-            LinkedHashSet<VariableReferenceExpression> groupByColumns,\n+    public PinotQueryGeneratorContext withAggregation(Map<VariableReferenceExpression, Selection> newSelections,\n+            LinkedHashSet<VariableReferenceExpression> outputs, LinkedHashSet<VariableReferenceExpression> groupByColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTg4NA==", "bodyText": "Should this still be a HashMap instead of a LinkedHashMap here ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452919884", "createdAt": "2020-07-10T15:36:34Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -79,42 +84,50 @@ public String toString()\n                 .add(\"filter\", filter)\n                 .add(\"limit\", limit)\n                 .add(\"aggregations\", aggregations)\n+                .add(\"useSqlSyntax\", useSqlSyntax)\n                 .toString();\n     }\n \n-    PinotQueryGeneratorContext()\n+    public PinotQueryGeneratorContext(boolean usePinotSqlSyntax)\n     {\n-        this(new LinkedHashMap<>(), null);\n+        this(new HashMap<>(), new LinkedHashSet<>(), null, usePinotSqlSyntax);\n     }\n \n     PinotQueryGeneratorContext(\n-            LinkedHashMap<VariableReferenceExpression, Selection> selections,\n-            String from)\n+            Map<VariableReferenceExpression, Selection> selections,\n+            LinkedHashSet<VariableReferenceExpression> outputs,\n+            String from,\n+            boolean useSqlSyntax)\n     {\n         this(\n                 selections,\n+                outputs,\n                 Optional.ofNullable(from),\n                 Optional.empty(),\n                 0,\n                 new LinkedHashSet<>(),\n                 new LinkedHashMap<>(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTIwNg==", "bodyText": "nit: Break up the conditional into two lines ?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452921206", "createdAt": "2020-07-10T15:38:56Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -270,34 +288,48 @@ public PinotQueryGeneratorContext visitProject(ProjectNode node, PinotQueryGener\n         {\n             PinotQueryGeneratorContext context = node.getSource().accept(this, contextIn);\n             requireNonNull(context, \"context is null\");\n-            LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-\n+            Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>();\n+            LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>();\n             node.getOutputVariables().forEach(variable -> {\n                 RowExpression expression = node.getAssignments().get(variable);\n                 PinotExpression pinotExpression = expression.accept(\n                         contextIn.getVariablesInAggregation().contains(variable) ?\n-                                new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n+                        new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjA2MA==", "bodyText": "nit: Space before SQL to align with the bullet.", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r452922060", "createdAt": "2020-07-10T15:40:27Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -270,34 +288,48 @@ public PinotQueryGeneratorContext visitProject(ProjectNode node, PinotQueryGener\n         {\n             PinotQueryGeneratorContext context = node.getSource().accept(this, contextIn);\n             requireNonNull(context, \"context is null\");\n-            LinkedHashMap<VariableReferenceExpression, Selection> newSelections = new LinkedHashMap<>();\n-\n+            Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>();\n+            LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>();\n             node.getOutputVariables().forEach(variable -> {\n                 RowExpression expression = node.getAssignments().get(variable);\n                 PinotExpression pinotExpression = expression.accept(\n                         contextIn.getVariablesInAggregation().contains(variable) ?\n-                                new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n+                        new PinotAggregationProjectConverter(typeManager, functionMetadataManager, standardFunctionResolution, session) : pinotProjectExpressionConverter,\n                         context.getSelections());\n                 newSelections.put(\n                         variable,\n                         new Selection(pinotExpression.getDefinition(), pinotExpression.getOrigin()));\n+                newOutputs.add(variable);\n             });\n-            return context.withProject(newSelections);\n+            if (useSqlSyntax) {\n+                // For PinotQueryGeneratorContext, selections should contain the mapping from varRef to rowExpression,\n+                // and output, groupBy, orderBy objects only hold varRefs.\n+                //\n+                // When we try to generate Pinot query, the varRef in groupBy may not be in output.\n+                // E.g. a sample Presto query: `select count(*) group by A`.\n+                // - To generate PQL, we expect column `A` is always in selections.\n+                // - To generate SQL, we need to hold all the mappings somewhere, which is in selections, then generate\n+                // SQL based on output object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535"}, "originalPosition": 209}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "374a419e75b99060154a42790a57a15012e71535", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/374a419e75b99060154a42790a57a15012e71535", "committedDate": "2020-07-10T10:49:10Z", "message": "Adding more tests"}, "afterCommit": {"oid": "e5ebdb2f5bb21746412adf015dd26f27dfb74b3b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e5ebdb2f5bb21746412adf015dd26f27dfb74b3b", "committedDate": "2020-07-10T21:25:00Z", "message": "Adding more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5ebdb2f5bb21746412adf015dd26f27dfb74b3b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e5ebdb2f5bb21746412adf015dd26f27dfb74b3b", "committedDate": "2020-07-10T21:25:00Z", "message": "Adding more tests"}, "afterCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09", "committedDate": "2020-07-10T23:03:11Z", "message": "Adding more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzU4MjYw", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-446758260", "createdAt": "2020-07-11T00:18:41Z", "commit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MzUwNjUx", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-449350651", "createdAt": "2020-07-15T21:24:05Z", "commit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyNDowNVrOGyQ_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyNDowNVrOGyQ_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDQ1OQ==", "bodyText": "static", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r455360459", "createdAt": "2020-07-15T21:24:05Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.objectMapper = requireNonNull(objectMapper, \"object mapper is null\");\n+    }\n+\n+    private static Double parseDouble(String value)\n+    {\n+        try {\n+            return Double.valueOf(value);\n+        }\n+        catch (NumberFormatException ne) {\n+            switch (value) {\n+                case PINOT_INFINITY:\n+                case PINOT_POSITIVE_INFINITY:\n+                    return PRESTO_INFINITY;\n+                case PINOT_NEGATIVE_INFINITY:\n+                    return PRESTO_NEGATIVE_INFINITY;\n+            }\n+            throw new PinotException(PINOT_DECODE_ERROR, Optional.empty(), \"Cannot decode double value from pinot \" + value, ne);\n+        }\n+    }\n+\n+    protected void setValue(Type type, BlockBuilder blockBuilder, String value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n+            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+        }\n+        if (type instanceof FixedWidthType) {\n+            completedBytes += ((FixedWidthType) type).getFixedSize();\n+            if (type instanceof BigintType) {\n+                type.writeLong(blockBuilder, parseDouble(value).longValue());\n+            }\n+            else if (type instanceof IntegerType) {\n+                blockBuilder.writeInt(parseDouble(value).intValue());\n+            }\n+            else if (type instanceof TinyintType) {\n+                blockBuilder.writeByte(parseDouble(value).byteValue());\n+            }\n+            else if (type instanceof SmallintType) {\n+                blockBuilder.writeShort(parseDouble(value).shortValue());\n+            }\n+            else if (type instanceof BooleanType) {\n+                type.writeBoolean(blockBuilder, parseBoolean(value));\n+            }\n+            else if (type instanceof DecimalType || type instanceof DoubleType) {\n+                type.writeDouble(blockBuilder, parseDouble(value));\n+            }\n+            else if (type instanceof TimestampType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else if (type instanceof DateType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+            }\n+        }\n+        else {\n+            Slice slice = Slices.utf8Slice(value);\n+            blockBuilder.writeBytes(slice, 0, slice.length()).closeEntry();\n+            completedBytes += slice.length();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0; // not available\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finished;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (finished) {\n+            return null;\n+        }\n+\n+        long start = System.nanoTime();\n+        try {\n+            BlockAndTypeBuilder blockAndTypeBuilder = buildBlockAndTypeBuilder(columnHandles, getBrokerQuery());\n+            int counter = issueQueryAndPopulate(\n+                    getBrokerQuery(),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnBlockBuilders()),\n+                    Collections.unmodifiableList(blockAndTypeBuilder.getColumnTypes()));\n+\n+            PageBuilder pageBuilder = blockAndTypeBuilder.getPageBuilder();\n+            pageBuilder.declarePositions(counter);\n+            Page page = pageBuilder.build();\n+\n+            // TODO: Implement chunking if the result set is ginormous\n+            finished = true;\n+\n+            return page;\n+        }\n+        finally {\n+            readTimeNanos += System.nanoTime() - start;\n+        }\n+    }\n+\n+    // Generated Pinot Query with different syntax, e.g. PQL vs SQL.\n+    protected abstract PinotQueryGenerator.GeneratedPinotQuery getBrokerQuery();\n+\n+    protected void setRows(String query, List<BlockBuilder> blockBuilders, List<Type> types, JsonNode rows)\n+    {\n+        for (int rowNumber = 0; rowNumber < rows.size(); ++rowNumber) {\n+            JsonNode result = rows.get(rowNumber);\n+            if (result == null || result.size() < blockBuilders.size()) {\n+                throw new PinotException(\n+                    PINOT_UNEXPECTED_RESPONSE,\n+                    Optional.of(query),\n+                    String.format(\"Expected row of %d columns\", blockBuilders.size()));\n+            }\n+            for (int columnNumber = 0; columnNumber < blockBuilders.size(); columnNumber++) {\n+                setValue(types.get(columnNumber), blockBuilders.get(columnNumber), asText(result.get(columnNumber)));\n+            }\n+        }\n+    }\n+    protected static void handleCommonResponse(String pql, JsonNode jsonBody)\n+    {\n+        JsonNode numServersResponded = jsonBody.get(\"numServersResponded\");\n+        JsonNode numServersQueried = jsonBody.get(\"numServersQueried\");\n+\n+        if (numServersQueried == null || numServersResponded == null || numServersQueried.asInt() > numServersResponded.asInt()) {\n+            throw new PinotException(\n+                PINOT_INSUFFICIENT_SERVER_RESPONSE,\n+                Optional.of(pql),\n+                String.format(\"Only %s out of %s servers responded for query %s\", numServersResponded.asInt(), numServersQueried.asInt(), pql));\n+        }\n+\n+        JsonNode exceptions = jsonBody.get(\"exceptions\");\n+        if (exceptions != null && exceptions.isArray() && exceptions.size() > 0) {\n+            // Pinot is known to return exceptions with benign errorcodes like 200\n+            // so we treat any exception as an error\n+            throw new PinotException(\n+                PINOT_EXCEPTION,\n+                Optional.of(pql),\n+                String.format(\"Query %s encountered exception %s\", pql, exceptions.get(0)));\n+        }\n+    }\n+\n+    protected static String asText(JsonNode node)\n+    {\n+        checkState(node.isValueNode());\n+        if (node.isArray()) {\n+            String[] results = new String[node.size()];\n+            for (int i = 0; i < node.size(); i++) {\n+                results[i] = asText(node.get(i));\n+            }\n+            return Arrays.toString(results);\n+        }\n+        return node.isNull() ? null : node.asText();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        finished = true;\n+    }\n+\n+    protected int issueQueryAndPopulate(\n+            PinotQueryGenerator.GeneratedPinotQuery pinotQuery,\n+            List<BlockBuilder> blockBuilders,\n+            List<Type> types)\n+    {\n+        return doWithRetries(PinotSessionProperties.getPinotRetryCount(session), (retryNumber) -> {\n+            String queryHost;\n+            Optional<String> rpcService;\n+            if (pinotConfig.getRestProxyUrl() != null) {\n+                queryHost = pinotConfig.getRestProxyUrl();\n+                rpcService = Optional.ofNullable(pinotConfig.getRestProxyServiceForQuery());\n+            }\n+            else {\n+                queryHost = clusterInfoFetcher.getBrokerHost(pinotQuery.getTable());\n+                rpcService = Optional.empty();\n+            }\n+            Request.Builder builder = Request.Builder\n+                    .preparePost()\n+                    .setUri(URI.create(String.format(getQueryUrlTemplate(), queryHost)));\n+            String body = clusterInfoFetcher.doHttpActionWithHeaders(builder, Optional.of(String.format(getRequestPayloadTemplate(), pinotQuery.getQuery())), rpcService);\n+            return populateFromQueryResults(pinotQuery, blockBuilders, types, body);\n+        });\n+    }\n+\n+    // Get the broker query endpoint url template.\n+    abstract String getQueryUrlTemplate();\n+\n+    // Get the broker request payload template to set query inside.\n+    abstract String getRequestPayloadTemplate();\n+\n+    // Set Pinot Response from query response json string.\n+    abstract int populateFromQueryResults(PinotQueryGenerator.GeneratedPinotQuery pinotQuery, List<BlockBuilder> blockBuilders, List<Type> types, String responseJsonString);\n+\n+    // Build BlockAndTypeBuilder from different query syntax.\n+    // E.g. PQL needs to handle the case that groupBy fields are always show up in front of selection list.\n+    abstract BlockAndTypeBuilder buildBlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, PinotQueryGenerator.GeneratedPinotQuery brokerPinotQuery);\n+\n+    public class BlockAndTypeBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "originalPosition": 315}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDE2MjM4", "url": "https://github.com/prestodb/presto/pull/14704#pullrequestreview-449416238", "createdAt": "2020-07-15T23:46:42Z", "commit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo0Njo0MlrOGyVHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo1NDo0OVrOGyVRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzk5NA==", "bodyText": "remove blank line", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r455427994", "createdAt": "2020-07-15T23:46:42Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyODQwNg==", "bodyText": "is it possible we make counter a private data member, and return counter here?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r455428406", "createdAt": "2020-07-15T23:47:58Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.objectMapper = requireNonNull(objectMapper, \"object mapper is null\");\n+    }\n+\n+    private static Double parseDouble(String value)\n+    {\n+        try {\n+            return Double.valueOf(value);\n+        }\n+        catch (NumberFormatException ne) {\n+            switch (value) {\n+                case PINOT_INFINITY:\n+                case PINOT_POSITIVE_INFINITY:\n+                    return PRESTO_INFINITY;\n+                case PINOT_NEGATIVE_INFINITY:\n+                    return PRESTO_NEGATIVE_INFINITY;\n+            }\n+            throw new PinotException(PINOT_DECODE_ERROR, Optional.empty(), \"Cannot decode double value from pinot \" + value, ne);\n+        }\n+    }\n+\n+    protected void setValue(Type type, BlockBuilder blockBuilder, String value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n+            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+        }\n+        if (type instanceof FixedWidthType) {\n+            completedBytes += ((FixedWidthType) type).getFixedSize();\n+            if (type instanceof BigintType) {\n+                type.writeLong(blockBuilder, parseDouble(value).longValue());\n+            }\n+            else if (type instanceof IntegerType) {\n+                blockBuilder.writeInt(parseDouble(value).intValue());\n+            }\n+            else if (type instanceof TinyintType) {\n+                blockBuilder.writeByte(parseDouble(value).byteValue());\n+            }\n+            else if (type instanceof SmallintType) {\n+                blockBuilder.writeShort(parseDouble(value).shortValue());\n+            }\n+            else if (type instanceof BooleanType) {\n+                type.writeBoolean(blockBuilder, parseBoolean(value));\n+            }\n+            else if (type instanceof DecimalType || type instanceof DoubleType) {\n+                type.writeDouble(blockBuilder, parseDouble(value));\n+            }\n+            else if (type instanceof TimestampType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else if (type instanceof DateType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+            }\n+        }\n+        else {\n+            Slice slice = Slices.utf8Slice(value);\n+            blockBuilder.writeBytes(slice, 0, slice.length()).closeEntry();\n+            completedBytes += slice.length();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0; // not available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyODQ5Mw==", "bodyText": "I think counter is completed positions?", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r455428493", "createdAt": "2020-07-15T23:48:19Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.FixedWidthType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.pinot.query.PinotQueryGenerator;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DECODE_ERROR;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.pinot.PinotUtils.doWithRetries;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.Long.parseLong;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class PinotBrokerPageSourceBase\n+        implements ConnectorPageSource\n+{\n+    private static final String PINOT_INFINITY = \"\u221e\";\n+    private static final String PINOT_POSITIVE_INFINITY = \"+\" + PINOT_INFINITY;\n+    private static final String PINOT_NEGATIVE_INFINITY = \"-\" + PINOT_INFINITY;\n+\n+    private static final Double PRESTO_INFINITY = Double.POSITIVE_INFINITY;\n+    private static final Double PRESTO_NEGATIVE_INFINITY = Double.NEGATIVE_INFINITY;\n+\n+    protected final PinotConfig pinotConfig;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final PinotClusterInfoFetcher clusterInfoFetcher;\n+    protected final ConnectorSession session;\n+    protected final ObjectMapper objectMapper;\n+\n+    protected boolean finished;\n+    protected long readTimeNanos;\n+    protected long completedBytes;\n+\n+    public PinotBrokerPageSourceBase(\n+            PinotConfig pinotConfig,\n+            ConnectorSession session,\n+            List<PinotColumnHandle> columnHandles,\n+            PinotClusterInfoFetcher clusterInfoFetcher,\n+            ObjectMapper objectMapper)\n+    {\n+        this.pinotConfig = requireNonNull(pinotConfig, \"pinot config is null\");\n+        this.clusterInfoFetcher = requireNonNull(clusterInfoFetcher, \"cluster info fetcher is null\");\n+        this.columnHandles = ImmutableList.copyOf(columnHandles);\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.objectMapper = requireNonNull(objectMapper, \"object mapper is null\");\n+    }\n+\n+    private static Double parseDouble(String value)\n+    {\n+        try {\n+            return Double.valueOf(value);\n+        }\n+        catch (NumberFormatException ne) {\n+            switch (value) {\n+                case PINOT_INFINITY:\n+                case PINOT_POSITIVE_INFINITY:\n+                    return PRESTO_INFINITY;\n+                case PINOT_NEGATIVE_INFINITY:\n+                    return PRESTO_NEGATIVE_INFINITY;\n+            }\n+            throw new PinotException(PINOT_DECODE_ERROR, Optional.empty(), \"Cannot decode double value from pinot \" + value, ne);\n+        }\n+    }\n+\n+    protected void setValue(Type type, BlockBuilder blockBuilder, String value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n+            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+        }\n+        if (type instanceof FixedWidthType) {\n+            completedBytes += ((FixedWidthType) type).getFixedSize();\n+            if (type instanceof BigintType) {\n+                type.writeLong(blockBuilder, parseDouble(value).longValue());\n+            }\n+            else if (type instanceof IntegerType) {\n+                blockBuilder.writeInt(parseDouble(value).intValue());\n+            }\n+            else if (type instanceof TinyintType) {\n+                blockBuilder.writeByte(parseDouble(value).byteValue());\n+            }\n+            else if (type instanceof SmallintType) {\n+                blockBuilder.writeShort(parseDouble(value).shortValue());\n+            }\n+            else if (type instanceof BooleanType) {\n+                type.writeBoolean(blockBuilder, parseBoolean(value));\n+            }\n+            else if (type instanceof DecimalType || type instanceof DoubleType) {\n+                type.writeDouble(blockBuilder, parseDouble(value));\n+            }\n+            else if (type instanceof TimestampType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else if (type instanceof DateType) {\n+                type.writeLong(blockBuilder, parseLong(value));\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n+            }\n+        }\n+        else {\n+            Slice slice = Slices.utf8Slice(value);\n+            blockBuilder.writeBytes(slice, 0, slice.length()).closeEntry();\n+            completedBytes += slice.length();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0; // not available\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finished;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (finished) {\n+            return null;\n+        }\n+\n+        long start = System.nanoTime();\n+        try {\n+            BlockAndTypeBuilder blockAndTypeBuilder = buildBlockAndTypeBuilder(columnHandles, getBrokerQuery());\n+            int counter = issueQueryAndPopulate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMDUyMw==", "bodyText": "could outputs be Set? LinkedHashSet is an implementation", "url": "https://github.com/prestodb/presto/pull/14704#discussion_r455430523", "createdAt": "2020-07-15T23:54:49Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -55,8 +55,11 @@\n     public static final String TIME_BOUNDARY_FILTER_TEMPLATE = \"__TIME_BOUNDARY_FILTER_TEMPLATE__\";\n     public static final String TABLE_NAME_SUFFIX_TEMPLATE = \"__TABLE_NAME_SUFFIX_TEMPLATE__\";\n     // Fields defining the query\n-    // order map that maps the column definition in terms of input relation column(s)\n-    private final LinkedHashMap<VariableReferenceExpression, Selection> selections;\n+    // A map that maps the column definition in terms of input relation column(s)\n+    private final Map<VariableReferenceExpression, Selection> selections;\n+    // Outputs are the fields defined in Presto for what's expected from Pinot query.\n+    // Outputs/groupByColumns/topNColumnOrderingMap should be part of the keys of selections.\n+    private final LinkedHashSet<VariableReferenceExpression> outputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/b752cd9ee1c8557e81c643b40f8fb08a6b9cbe09", "committedDate": "2020-07-10T23:03:11Z", "message": "Adding more tests"}, "afterCommit": {"oid": "e9b1cee852acc2759187b4cf8ff2a2dcb125a635", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e9b1cee852acc2759187b4cf8ff2a2dcb125a635", "committedDate": "2020-07-16T01:21:55Z", "message": "Adding more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5948ba3607f132006107686fc9751b7897c4baa0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/5948ba3607f132006107686fc9751b7897c4baa0", "committedDate": "2020-07-17T07:02:08Z", "message": "Support Pinot new SQL endpoint for broker queries.\n- Enable this feature by setting `pinot.use-pinot-sql-for-broker-queries=true`\n- Support aggregation/group by/oder by pushdown to query Pinot broker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9b1cee852acc2759187b4cf8ff2a2dcb125a635", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e9b1cee852acc2759187b4cf8ff2a2dcb125a635", "committedDate": "2020-07-16T01:21:55Z", "message": "Adding more tests"}, "afterCommit": {"oid": "5948ba3607f132006107686fc9751b7897c4baa0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/5948ba3607f132006107686fc9751b7897c4baa0", "committedDate": "2020-07-17T07:02:08Z", "message": "Support Pinot new SQL endpoint for broker queries.\n- Enable this feature by setting `pinot.use-pinot-sql-for-broker-queries=true`\n- Support aggregation/group by/oder by pushdown to query Pinot broker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1463, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}