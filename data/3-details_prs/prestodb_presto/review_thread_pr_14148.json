{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NzgzNDkx", "number": 14148, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxMDo0NlrODiXHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxOToxMFrODiXUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzU2OTM4OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/QueryException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxMDo0NlrOFtkE9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxMDo0NlrOFtkE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMTMzNQ==", "bodyText": "@caithagoras I find it strange to include these type of methods in the abstract class. This make this abstract class tightly couples with its subclasses. It think it would be clearer to remove these methods and move the logic into the callers or move them into a separate utils class.", "url": "https://github.com/prestodb/presto/pull/14148#discussion_r383321335", "createdAt": "2020-02-24T15:10:46Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/QueryException.java", "diffHunk": "@@ -14,111 +14,70 @@\n package com.facebook.presto.verifier.framework;\n \n import com.facebook.presto.jdbc.QueryStats;\n-import com.facebook.presto.spi.ErrorCode;\n-import com.facebook.presto.spi.ErrorCodeSupplier;\n import com.facebook.presto.verifier.event.QueryFailure;\n-import com.google.common.base.Function;\n \n import java.util.Optional;\n \n-import static com.facebook.presto.verifier.framework.QueryException.Type.CLUSTER_CONNECTION;\n-import static com.facebook.presto.verifier.framework.QueryException.Type.PRESTO;\n+import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.base.Throwables.getStackTraceAsString;\n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n-public class QueryException\n+public abstract class QueryException\n         extends RuntimeException\n {\n-    public enum Type\n-    {\n-        CLUSTER_CONNECTION(qe -> {\n-            requireNonNull(qe, \"queryException is null\");\n-            requireNonNull(qe.getCause(), \"cause is null\");\n-            return qe.getCause().getClass().getSimpleName();\n-        }),\n-        PRESTO(qe -> {\n-            requireNonNull(qe, \"queryException is null\");\n-            return qe.prestoErrorCode.map(ErrorCodeSupplier::toErrorCode).map(ErrorCode::getName).orElse(\"UNKNOWN\");\n-        });\n-\n-        private final Function<QueryException, String> descriptionGenerator;\n-\n-        Type(Function<QueryException, String> descriptionGenerator)\n-        {\n-            this.descriptionGenerator = requireNonNull(descriptionGenerator, \"descriptionGenerator is null\");\n-        }\n-    }\n-\n-    private final Type type;\n-    private final Optional<ErrorCodeSupplier> prestoErrorCode;\n     private final boolean retryable;\n-    private final Optional<QueryStats> queryStats;\n     private final QueryStage queryStage;\n \n-    private QueryException(\n-            Throwable cause,\n-            Type type,\n-            Optional<ErrorCodeSupplier> prestoErrorCode,\n-            boolean retryable,\n-            Optional<QueryStats> queryStats,\n-            QueryStage queryStage)\n+    public QueryException(Throwable cause, boolean retryable, QueryStage queryStage)\n     {\n         super(cause);\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.prestoErrorCode = requireNonNull(prestoErrorCode, \"errorCode is null\");\n         this.retryable = retryable;\n-        this.queryStats = requireNonNull(queryStats, \"queryStats is null\");\n         this.queryStage = requireNonNull(queryStage, \"queryStage is null\");\n     }\n \n-    public static QueryException forClusterConnection(Throwable cause, QueryStage queryStage)\n+    public abstract String getErrorCodeName();\n+\n+    public boolean isClusterConnectionException()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b916f02bdda0e7d6e7ac5c629fa75623091742"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzYwMjMyOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/resolver/FailureResolverUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxOToxMFrOFtkZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyOTozMFrOFwEpeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjQ5MQ==", "bodyText": "@caithagoras Based on the usage of this method, I think a signature with a callback may work better.\n    public static <T> Optional<T> mapMatchingPrestoException(\n            QueryException queryException,\n            QueryStage queryStage,\n            ErrorCodeSupplier errorCode,\n            Function<PrestoQueryException, T> mapper)\n    {\n        if (queryException.getQueryStage() != queryStage || !queryException.isPrestoQueryException()) {\n            return Optional.empty();\n        }\n\n        return Optional.of(mapper.apply((PrestoQueryException) queryException));\n    }\n\npublic class ExceededGlobalMemoryLimitFailureResolver\n        implements FailureResolver\n{\n    public static final String NAME = \"exceeded-global-memory-limit\";\n\n    @Override\n    public Optional<String> resolve(QueryStats controlQueryStats, QueryException queryException, Optional<QueryBundle> test)\n    {\n        return mapMatchingPrestoException(queryException, TEST_MAIN, EXCEEDED_GLOBAL_MEMORY_LIMIT,\n                e -> \"Control query uses more memory than the test cluster memory limit\");\n    }\n}", "url": "https://github.com/prestodb/presto/pull/14148#discussion_r383326491", "createdAt": "2020-02-24T15:19:10Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/resolver/FailureResolverUtil.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.resolver;\n+\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.verifier.framework.PrestoQueryException;\n+import com.facebook.presto.verifier.framework.QueryException;\n+import com.facebook.presto.verifier.framework.QueryStage;\n+\n+import java.util.Optional;\n+\n+public class FailureResolverUtil\n+{\n+    private FailureResolverUtil() {}\n+\n+    public static boolean isMatchingPrestoException(QueryException queryException, QueryStage queryStage, ErrorCodeSupplier errorCode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6097d0049f79185080d2aa51cdc2c4623878b28"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1Nzc3OA==", "bodyText": "With isMatchingPrestoException, I meant to do an initial check. With the callback method however, the mapper function needs to contain all the the logic necessary to determine whether to resolve in additional to the initial check. In case of TooManyOpenPartitionsFailureResolve, this is going to be much more complex.", "url": "https://github.com/prestodb/presto/pull/14148#discussion_r385357778", "createdAt": "2020-02-27T20:37:45Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/resolver/FailureResolverUtil.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.resolver;\n+\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.verifier.framework.PrestoQueryException;\n+import com.facebook.presto.verifier.framework.QueryException;\n+import com.facebook.presto.verifier.framework.QueryStage;\n+\n+import java.util.Optional;\n+\n+public class FailureResolverUtil\n+{\n+    private FailureResolverUtil() {}\n+\n+    public static boolean isMatchingPrestoException(QueryException queryException, QueryStage queryStage, ErrorCodeSupplier errorCode)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjQ5MQ=="}, "originalCommit": {"oid": "c6097d0049f79185080d2aa51cdc2c4623878b28"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1MjEyMA==", "bodyText": "Comments addessed.", "url": "https://github.com/prestodb/presto/pull/14148#discussion_r385952120", "createdAt": "2020-02-28T22:29:30Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/resolver/FailureResolverUtil.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.resolver;\n+\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.verifier.framework.PrestoQueryException;\n+import com.facebook.presto.verifier.framework.QueryException;\n+import com.facebook.presto.verifier.framework.QueryStage;\n+\n+import java.util.Optional;\n+\n+public class FailureResolverUtil\n+{\n+    private FailureResolverUtil() {}\n+\n+    public static boolean isMatchingPrestoException(QueryException queryException, QueryStage queryStage, ErrorCodeSupplier errorCode)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjQ5MQ=="}, "originalCommit": {"oid": "c6097d0049f79185080d2aa51cdc2c4623878b28"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3089, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}