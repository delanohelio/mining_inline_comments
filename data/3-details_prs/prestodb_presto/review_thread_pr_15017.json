{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTUwMjgw", "number": 15017, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0MTozN1rOEXfdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTo0MlrOEYSYgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY4MTc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0MTozN1rOG_Ty7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0MTozN1rOG_Ty7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNzgwNw==", "bodyText": "remove this; btw, we only use com.facebook.airlift.log.Logger", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469037807", "createdAt": "2020-08-12T06:41:37Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -80,6 +84,8 @@\n public class HivePageSourceProvider\n         implements ConnectorPageSourceProvider\n {\n+    private static final Logger log = LoggerFactory.getLogger(HivePageSourceProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY4OTE0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0NDoyM1rOG_T3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0NDoyM1rOG_T3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzODg5OA==", "bodyText": "ConnectorPageSource", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469038898", "createdAt": "2020-08-12T06:44:23Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.spi.UpdatablePageSource;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class NoopSplitPageSource\n+        implements UpdatablePageSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY5MTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0NTowMlrOG_T4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0NTowMlrOG_T4jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzOTI0NQ==", "bodyText": "HiveEmptySplitPageSource", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469039245", "createdAt": "2020-08-12T06:45:02Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.spi.UpdatablePageSource;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class NoopSplitPageSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY5NzI4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0Njo1OFrOG_T71g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0Njo1OFrOG_T71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDA4Ng==", "bodyText": "hiveBucketProperty\nKeep the original signature private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, Set<NullableValue>> bindings) and create a new one so that the old one will use the new one. This will avoid the change to HivePartitionManager", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469040086", "createdAt": "2020-08-12T06:46:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -346,12 +345,13 @@ private static int hashBytes(int initialValue, Slice bytes)\n         return Optional.of(new HiveBucketFilter(builder.build()));\n     }\n \n-    private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, Set<NullableValue>> bindings)\n+    private static Optional<Set<Integer>> getHiveBuckets(Optional<HiveBucketProperty> hiveBucketPropertyOptional, List<Column> dataColumns, Map<ColumnHandle, Set<NullableValue>> bindings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcwOTE1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDo1MlrOG_UCvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDo1MlrOG_UCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTg1Mg==", "bodyText": "is this used anywhere?", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469041852", "createdAt": "2020-08-12T06:50:52Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -156,6 +162,11 @@ public ConnectorPageSource createPageSource(\n                 .transform(Subfield::getRootName)\n                 .transform(hiveLayout.getPredicateColumns()::get);\n \n+        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcwOTUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDo1N1rOG_UC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDo1N1rOG_UC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTg5OQ==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469041899", "createdAt": "2020-08-12T06:50:57Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -264,6 +275,11 @@ protected static CacheQuota generateCacheQuota(HiveSplit hiveSplit)\n \n         RowExpression optimizedRemainingPredicate = rowExpressionCache.getUnchecked(new RowExpressionCacheKey(layout.getRemainingPredicate(), session));\n \n+        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59a2f5f7606ac34bec7495f6b4025ec999591e6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIwMDY5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowNDo0NlrOG_-oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowNDo0NlrOG_-oeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTczOTY0Mg==", "bodyText": "return hiveBucketFilter.map(filter -> !filter.getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt())).orElse(false);\nPlease double check my syntax. I'm not exactly sure I got the negation correctly.", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469739642", "createdAt": "2020-08-13T07:04:46Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -477,6 +486,24 @@ protected static CacheQuota generateCacheQuota(HiveSplit hiveSplit)\n         return Optional.empty();\n     }\n \n+    private static boolean shouldSkipBucket(HiveTableLayoutHandle hiveLayout, HiveSplit hiveSplit, SplitContext splitContext)\n+    {\n+        if (!splitContext.getDynamicFilterPredicate().isPresent()\n+                || !hiveSplit.getReadBucketNumber().isPresent()\n+                || !hiveSplit.getStorage().getBucketProperty().isPresent()) {\n+            return false;\n+        }\n+\n+        TupleDomain<ColumnHandle> dynamicFilter = splitContext.getDynamicFilterPredicate().get();\n+        Optional<HiveBucketing.HiveBucketFilter> hiveBucketFilter = getHiveBucketFilter(hiveSplit.getStorage().getBucketProperty(), hiveLayout.getDataColumns(), dynamicFilter);\n+\n+        if (!hiveBucketFilter.isPresent()) {\n+            return false;\n+        }\n+\n+        return !hiveBucketFilter.get().getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIwMzY5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowNTozOFrOG_-qLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowNTozOFrOG_-qLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MDA3OA==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469740078", "createdAt": "2020-08-13T07:05:38Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIxMTkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowODoxMVrOG_-vGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowODoxMVrOG_-vGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MTMzNg==", "bodyText": "TupleDomain", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469741336", "createdAt": "2020-08-13T07:08:11Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);\n+    }\n+\n+    private static ConnectorPageSource createPageSource(HiveTransactionHandle transaction, HiveClientConfig config, SplitContext splitContext, MetastoreClientConfig metastoreClientConfig, File outputFile)\n+    {\n+        HiveSplit split = new HiveSplit(\n+                SCHEMA_NAME,\n+                TABLE_NAME,\n+                \"\",\n+                \"file:///\" + outputFile.getAbsolutePath(),\n+                0,\n+                outputFile.length(),\n+                outputFile.length(),\n+                new Storage(\n+                        StorageFormat.create(config.getHiveStorageFormat().getSerDe(), config.getHiveStorageFormat().getInputFormat(), config.getHiveStorageFormat().getOutputFormat()),\n+                        \"location\",\n+                        Optional.of(new HiveBucketProperty(ImmutableList.of(\"l_orderkey\"), 10, ImmutableList.of(), HIVE_COMPATIBLE, Optional.empty())),\n+                        false,\n+                        ImmutableMap.of(),\n+                        ImmutableMap.of()),\n+                ImmutableList.of(),\n+                ImmutableList.of(),\n+                OptionalInt.of(3),\n+                OptionalInt.of(3),\n+                NO_PREFERENCE,\n+                getColumnHandles().size(),\n+                ImmutableMap.of(),\n+                Optional.empty(),\n+                false,\n+                Optional.empty(),\n+                NO_CACHE_REQUIREMENT,\n+                Optional.empty(),\n+                ImmutableMap.of());\n+\n+        TableHandle tableHandle = new TableHandle(\n+                new ConnectorId(HIVE_CATALOG),\n+                new HiveTableHandle(SCHEMA_NAME, TABLE_NAME),\n+                transaction,\n+                Optional.of(new HiveTableLayoutHandle(\n+                        new SchemaTableName(SCHEMA_NAME, TABLE_NAME),\n+                        ImmutableList.of(),\n+                        getColumnHandles().stream()\n+                                .map(column -> new Column(column.getName(), column.getHiveType(), Optional.empty()))\n+                                .collect(toImmutableList()),\n+                        ImmutableMap.of(),\n+                        TupleDomain.all(),\n+                        TRUE_CONSTANT,\n+                        ImmutableMap.of(),\n+                        TupleDomain.all(),\n+                        Optional.empty(),\n+                        Optional.empty(),\n+                        false,\n+                        \"layout\",\n+                        Optional.empty())));\n+        HivePageSourceProvider provider = new HivePageSourceProvider(config, createTestHdfsEnvironment(config, metastoreClientConfig), getDefaultHiveRecordCursorProvider(config, metastoreClientConfig), getDefaultHiveBatchPageSourceFactories(config, metastoreClientConfig), getDefaultHiveSelectivePageSourceFactories(config, metastoreClientConfig), TYPE_MANAGER, ROW_EXPRESSION_SERVICE);\n+        return provider.createPageSource(transaction, getSession(config), split, tableHandle.getLayout().get(), ImmutableList.copyOf(getColumnHandles()), splitContext);\n+    }\n+\n+    private static TupleDomain getTupleDomain()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIxODk0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMDoyNlrOG_-zRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMDoyNlrOG_-zRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MjQwNA==", "bodyText": "Add one more assertion where getTupleDomain() is the one to scan. This is to cover both HiveEmptySplitPageSource and normal PageSource paths", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469742404", "createdAt": "2020-08-13T07:10:26Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIyMTkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMTozMVrOG_-1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMTozMVrOG_-1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0Mjg2NQ==", "bodyText": "use\ntry (TempFile tempFile = new TempFile()) {\n    ...\n}", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469742865", "createdAt": "2020-08-13T07:11:31Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIyNDk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMjozMFrOG_-23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMjozMFrOG_-23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MzMyNg==", "bodyText": "createTestingPageSource", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469743326", "createdAt": "2020-08-13T07:12:30Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);\n+    }\n+\n+    private static ConnectorPageSource createPageSource(HiveTransactionHandle transaction, HiveClientConfig config, SplitContext splitContext, MetastoreClientConfig metastoreClientConfig, File outputFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTIyODM4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMzozOVrOG_-49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoxMzozOVrOG_-49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0Mzg2MA==", "bodyText": "Leave as is. This is not a util class. TestHivePageSink is completely for a different purpose. Just copy the following line to the class you want", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469743860", "createdAt": "2020-08-13T07:13:39Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -314,7 +314,7 @@ private static ConnectorPageSink createPageSink(HiveTransactionHandle transactio\n         return provider.createPageSink(transaction, getSession(config), handle, PageSinkProperties.defaultProperties());\n     }\n \n-    private static TestingConnectorSession getSession(HiveClientConfig config)\n+    protected static TestingConnectorSession getSession(HiveClientConfig config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAyNDY3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTo0MlrOHAiu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTo0MlrOHAiu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTEzNQ==", "bodyText": "remove and just throw to fail the test", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r470331135", "createdAt": "2020-08-14T00:31:42Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.testing.TempFile;\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        try (TempFile tempFile = new TempFile()) {\n+            ConnectorPageSource emptyPageSource = createTestingPageSource(transaction, config, new SplitContext(false, getToSkipTupleDomain()), metastoreClientConfig, tempFile.file());\n+            assertEquals(emptyPageSource.getClass(), HiveEmptySplitPageSource.class);\n+\n+            ConnectorPageSource nonEmptyPageSource = createTestingPageSource(transaction, config, new SplitContext(false, getToKeepTupleDomain()), metastoreClientConfig, tempFile.file());\n+            assertEquals(nonEmptyPageSource.getClass(), HivePageSource.class);\n+        }\n+        catch (IOException e) {\n+            e.printStackTrace();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca2911e7e3c297c29695590346f3892acdf9e8da"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3730, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}