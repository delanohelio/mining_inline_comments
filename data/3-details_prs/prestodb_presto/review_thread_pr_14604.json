{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTg5ODUy", "number": 14604, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1NzozMFrOEF82Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1NzozMFrOEF82Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njc1MjQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1NzozMFrOGkcpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowMDozNVrOGkpKnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MTM1OQ==", "bodyText": "Shouldn't this loop release memory of \"discarded\" arrays? E.g. intArrays[intArraysTop] = null?", "url": "https://github.com/prestodb/presto/pull/14604#discussion_r440871359", "createdAt": "2020-06-16T13:57:30Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.block.ArrayAllocator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+import java.util.Arrays;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOfByteArray;\n+import static io.airlift.slice.SizeOf.sizeOfIntArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A simple stack based {@link ArrayAllocator} that caches returned arrays.  When retrieving an array which is\n+ * cached, this implementation will first discard all smaller arrays encountered to ensure amortized\n+ * constant time access to the appropriately sized array. The implementation does NOT keep track of borrowed\n+ * arrays therefore user need to make sure do not return the same array more than once.\n+ */\n+@NotThreadSafe\n+public class UncheckedStackArrayAllocator\n+        implements ArrayAllocator\n+{\n+    private static final int DEFAULT_CAPACITY = 1000;\n+\n+    private int[][] intArrays;\n+    private int intArraysTop = -1;\n+    private int borrowedIntArrays;\n+\n+    private byte[][] byteArrays;\n+    private int byteArraysTop = -1;\n+    private int borrowedByteArrays;\n+\n+    private long estimatedSizeInBytes;\n+\n+    public UncheckedStackArrayAllocator()\n+    {\n+        this(DEFAULT_CAPACITY);\n+    }\n+\n+    public UncheckedStackArrayAllocator(int initialCapacity)\n+    {\n+        checkArgument(initialCapacity > 0, \"initialCapacity must be positive\");\n+        intArrays = new int[initialCapacity][];\n+        byteArrays = new byte[initialCapacity][];\n+    }\n+\n+    @Override\n+    public int[] borrowIntArray(int positionCount)\n+    {\n+        int[] array;\n+        while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f910fb3dc4230cbfe63c0af7a12c05cea8945f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NjM4MQ==", "bodyText": "@mbasmanova hi Masha, the arrays will be released when the stack grows back, but you're right, we should explicitly release them. I'll make the change in next iteration.", "url": "https://github.com/prestodb/presto/pull/14604#discussion_r441076381", "createdAt": "2020-06-16T19:00:35Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.block.ArrayAllocator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+import java.util.Arrays;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOfByteArray;\n+import static io.airlift.slice.SizeOf.sizeOfIntArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A simple stack based {@link ArrayAllocator} that caches returned arrays.  When retrieving an array which is\n+ * cached, this implementation will first discard all smaller arrays encountered to ensure amortized\n+ * constant time access to the appropriately sized array. The implementation does NOT keep track of borrowed\n+ * arrays therefore user need to make sure do not return the same array more than once.\n+ */\n+@NotThreadSafe\n+public class UncheckedStackArrayAllocator\n+        implements ArrayAllocator\n+{\n+    private static final int DEFAULT_CAPACITY = 1000;\n+\n+    private int[][] intArrays;\n+    private int intArraysTop = -1;\n+    private int borrowedIntArrays;\n+\n+    private byte[][] byteArrays;\n+    private int byteArraysTop = -1;\n+    private int borrowedByteArrays;\n+\n+    private long estimatedSizeInBytes;\n+\n+    public UncheckedStackArrayAllocator()\n+    {\n+        this(DEFAULT_CAPACITY);\n+    }\n+\n+    public UncheckedStackArrayAllocator(int initialCapacity)\n+    {\n+        checkArgument(initialCapacity > 0, \"initialCapacity must be positive\");\n+        intArrays = new int[initialCapacity][];\n+        byteArrays = new byte[initialCapacity][];\n+    }\n+\n+    @Override\n+    public int[] borrowIntArray(int positionCount)\n+    {\n+        int[] array;\n+        while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MTM1OQ=="}, "originalCommit": {"oid": "93f910fb3dc4230cbfe63c0af7a12c05cea8945f"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2715, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}