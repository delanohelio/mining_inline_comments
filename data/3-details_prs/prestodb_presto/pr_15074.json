{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODI0NzM1", "number": 15074, "title": "Add support in parquet reader for reading TIMESTAMP_MICROS type.", "bodyText": "Summary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code.\nTest plan - tested in local docker container, also added unit test to test this out.\nPlease make sure your submission complies with our Development, Formatting, and Commit Message guidelines.\nFill in the release notes towards the bottom of the PR description.\nSee Release Notes Guidelines for details.\n== RELEASE NOTES ==\n\nGeneral Changes\n* parquet files written by parquet-avro library that uses TIMESTAMP_MICROS as the OriginalType to represent timestamp can now be queried by presto", "createdAt": "2020-08-24T22:43:49Z", "url": "https://github.com/prestodb/presto/pull/15074", "merged": true, "mergeCommit": {"oid": "ad2a1c7b913a9d3eb3f137eca07953f97779025a"}, "closed": true, "closedAt": "2020-09-18T02:58:24Z", "author": {"login": "s-sanjay"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCYlyogFqTQ3NDU3NDQ4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEDrUnAFqTQ3ODIyOTMyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTc0NDg3", "url": "https://github.com/prestodb/presto/pull/15074#pullrequestreview-474574487", "createdAt": "2020-08-25T15:04:05Z", "commit": {"oid": "cc051fcae5adc3fdb77c4bce4f8d5457f21867c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc051fcae5adc3fdb77c4bce4f8d5457f21867c8", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/cc051fcae5adc3fdb77c4bce4f8d5457f21867c8", "committedDate": "2020-08-24T22:33:23Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}, "afterCommit": {"oid": "37d508c1ebc58d962dbb7cf723c076f66eb10f01", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/37d508c1ebc58d962dbb7cf723c076f66eb10f01", "committedDate": "2020-08-25T15:39:10Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37d508c1ebc58d962dbb7cf723c076f66eb10f01", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/37d508c1ebc58d962dbb7cf723c076f66eb10f01", "committedDate": "2020-08-25T15:39:10Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}, "afterCommit": {"oid": "bb0334ccda1384147a4792b288e355f397dcc87c", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/bb0334ccda1384147a4792b288e355f397dcc87c", "committedDate": "2020-08-25T15:40:36Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTIzNDE0", "url": "https://github.com/prestodb/presto/pull/15074#pullrequestreview-474923414", "createdAt": "2020-08-25T21:23:43Z", "commit": {"oid": "bb0334ccda1384147a4792b288e355f397dcc87c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb0334ccda1384147a4792b288e355f397dcc87c", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/bb0334ccda1384147a4792b288e355f397dcc87c", "committedDate": "2020-08-25T15:40:36Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}, "afterCommit": {"oid": "a3db6a90416cd4ccc3093302384de44e63ee9613", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/a3db6a90416cd4ccc3093302384de44e63ee9613", "committedDate": "2020-08-26T20:31:54Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3db6a90416cd4ccc3093302384de44e63ee9613", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/a3db6a90416cd4ccc3093302384de44e63ee9613", "committedDate": "2020-08-26T20:31:54Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}, "afterCommit": {"oid": "48acc2878bd7221789df13fdb5564c54b4ebb22c", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/48acc2878bd7221789df13fdb5564c54b4ebb22c", "committedDate": "2020-08-28T16:33:25Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab8b1786cc16583c79742fe2163c68ec62ea3ba", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/8ab8b1786cc16583c79742fe2163c68ec62ea3ba", "committedDate": "2020-08-28T20:29:01Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48acc2878bd7221789df13fdb5564c54b4ebb22c", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/48acc2878bd7221789df13fdb5564c54b4ebb22c", "committedDate": "2020-08-28T16:33:25Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}, "afterCommit": {"oid": "8ab8b1786cc16583c79742fe2163c68ec62ea3ba", "author": {"user": {"login": "s-sanjay", "name": null}}, "url": "https://github.com/prestodb/presto/commit/8ab8b1786cc16583c79742fe2163c68ec62ea3ba", "committedDate": "2020-08-28T20:29:01Z", "message": "Add support in parquet reader for reading TIMESTAMP_MICROS type.\n\nSummary:\nRight now presto always assumes TIMESTAMP_MILLIS as the OriginalType when int64 is used to\nrepresent timestamp type in the schema. This causes an issue.\n\nWhen we use createParquetPageSource we use our own type convertor and this does not have a check\nfor TIMESTAMP_MICROS and this can fail the query\n\nFix: In this change I am adding three ValueDecoders one for plain and one for RLE compression format and\none for the non batch reader. All of these are in 3 new classes so that during creation we\ninstantiate the class based on the OriginalType. One Alternate approach is to do this check inside\nLongValueDecoders but that would make this check inside the most critical path and can affect query\nperformance. The fix simply divides the micros seconds by 1000 to get the milliseconds and this should\nbe ok because in presto we anyway operate at the millisecond granularity. Note that the non batch reader\nalso checks for whether timezone is present in the data while the batch readers don't because that\ninformation is not available.\n\nFor testing, the ValueDecoders have their own unit test. Apart from that have also added a new test in\nParquetTester to check if timestamp stored as int64 with OriginalType TIMESTAMP_MICROS works.\n\nNote: We use hive parquet writer and schema definition as defined in the presto-hive package\nwhich is a shaded jar with a old version of hive. This packs an old version of parquet-mr that does not\nhave the TIMESTAMP_MICROS type. However, in the read path, we use the independent parquet dependency\nwhich is more recent and so we use the version where the new enum is available. If we upgrade all the tests\nto use the new version of parquet, we would not be testing parquet version written\nby the packaged hive writer. We would need a version of the test that would work with the new definitions.\nFor now I have done this only for the timestamp type to test TIMESTAMP_MICROS. As part of seperate change\nwe can make sure all the test are tested with latest parquet writer. This change uses ExampleParquetWriter\nwhich is supposed to be used only for demo or test purposes. We cannot use presto's parquet writer as well because\nthe one used in test always stored timestamp as millis and does not store any annotated type and using\nthat we will not be able to test our code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjI5MzIz", "url": "https://github.com/prestodb/presto/pull/15074#pullrequestreview-478229323", "createdAt": "2020-08-30T19:45:55Z", "commit": {"oid": "8ab8b1786cc16583c79742fe2163c68ec62ea3ba"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxOTo0NTo1NVrOHJlLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxOTo0NjozN1rOHJlLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwODI2OQ==", "bodyText": "static import TIMESTAMP_MICROS", "url": "https://github.com/prestodb/presto/pull/15074#discussion_r479808269", "createdAt": "2020-08-30T19:45:55Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/ParquetTypeUtils.java", "diffHunk": "@@ -327,4 +329,9 @@ public static String pushdownColumnNameForSubfield(Subfield subfield)\n         columnPath.addAll(nestedColumnPath(subfield));\n         return columnPath.build();\n     }\n+\n+    public static boolean isTimeStampMicrosType(ColumnDescriptor descriptor)\n+    {\n+        return OriginalType.TIMESTAMP_MICROS.equals(descriptor.getPrimitiveType().getOriginalType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab8b1786cc16583c79742fe2163c68ec62ea3ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwODMxNQ==", "bodyText": "static import TIMESTAMP_MICROS", "url": "https://github.com/prestodb/presto/pull/15074#discussion_r479808315", "createdAt": "2020-08-30T19:46:37Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/ColumnReaderFactory.java", "diffHunk": "@@ -76,6 +83,9 @@ public static ColumnReader createReader(RichColumnDescriptor descriptor, boolean\n             case INT32:\n                 return createDecimalColumnReader(descriptor).orElse(new IntColumnReader(descriptor));\n             case INT64:\n+                if (OriginalType.TIMESTAMP_MICROS.equals(descriptor.getPrimitiveType().getOriginalType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab8b1786cc16583c79742fe2163c68ec62ea3ba"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 305, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}