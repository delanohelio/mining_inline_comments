{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQzODgz", "number": 14684, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowODo1NVrOEHuwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyMDowMFrOEHu9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQxNTgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowODo1NlrOGnRFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozMjoyMVrOGn1n6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzQ3MA==", "bodyText": "nit: static import Map.Entry", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827470", "createdAt": "2020-06-22T21:08:56Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNjIxOQ==", "bodyText": "We normally don't static import Map.Entry.", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r444426219", "createdAt": "2020-06-23T18:32:21Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzQ3MA=="}, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQxNjA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowOTowMlrOGnRFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowOTowMlrOGnRFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzUwNA==", "bodyText": "static import Collectors.partitioningBy", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827504", "createdAt": "2020-06-22T21:09:02Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQxNjU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowOToxM1rOGnRFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozMTozNVrOGn1mZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzU4OQ==", "bodyText": "static import Collectors.partitioningBy, Map.Entry", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827589", "createdAt": "2020-06-22T21:09:13Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()\n+                .collect(Collectors.groupingBy(Map.Entry::getValue, toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNTgzMQ==", "bodyText": "Most call site of these are not static import if you search the codebase.", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r444425831", "createdAt": "2020-06-23T18:31:35Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()\n+                .collect(Collectors.groupingBy(Map.Entry::getValue, toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzU4OQ=="}, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQxNzQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowOToyOFrOGnRGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowOToyOFrOGnRGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzcyMg==", "bodyText": "static import Map.Entry\nAlso, I would normally only use interfaces here:\nfor (Entry<RowExpression, Map<VariableReferenceExpression, RowExpression>>)", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827722", "createdAt": "2020-06-22T21:09:28Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()\n+                .collect(Collectors.groupingBy(Map.Entry::getValue, toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));\n+        if (uniqueProjections.size() == projections.get(false).size()) {\n+            return Result.empty();\n+        }\n+        Assignments.Builder childAssignments = Assignments.builder();\n+        Assignments.Builder parentAssignments = Assignments.builder();\n+        projections.get(true).forEach(entry -> childAssignments.put(entry.getKey(), entry.getValue()));\n+        projections.get(true).forEach(entry -> parentAssignments.put(entry.getKey(), entry.getKey()));\n+        for (Map.Entry<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> entry : uniqueProjections.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQyNDYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToxMTo0NFrOGnRKgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoyOTo0MVrOGn1ifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyODg2NA==", "bodyText": "I would normally only use interfaces here:\nfor (Entry<RowExpression, Map<VariableReferenceExpression, RowExpression>>)", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443828864", "createdAt": "2020-06-22T21:11:44Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNDgyOQ==", "bodyText": "compiler actually complains if I use Map here.", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r444424829", "createdAt": "2020-06-23T18:29:41Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyODg2NA=="}, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTQ0ODY0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyMDowMFrOGnRZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyNDoyN1rOGnRh6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMjgwNw==", "bodyText": "I tried this query out on the master with the CSE enabled and it is succeeding. Is there a case which fails on the master but succeeds with this fix?", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443832807", "createdAt": "2020-06-22T21:20:00Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8447,6 +8447,14 @@ public void testSetAgg()\n                 \"select count(distinct orderdate) from orders\");\n     }\n \n+    @Test\n+    public void testRedundantLambda()\n+    {\n+        assertQuery(\n+                \"SELECT x, reduce(x, 0, (s, x) -> s + x, s -> s), reduce(x, 0, (s, x) -> s + x, s -> s) FROM (VALUES (array[1, 2, 3])) t(x)\",\n+                \"SELECT array[1, 2, 3], 6, 6\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNDg1OA==", "bodyText": "My mistake, the issue on master but is not in a release.", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443834858", "createdAt": "2020-06-22T21:24:27Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8447,6 +8447,14 @@ public void testSetAgg()\n                 \"select count(distinct orderdate) from orders\");\n     }\n \n+    @Test\n+    public void testRedundantLambda()\n+    {\n+        assertQuery(\n+                \"SELECT x, reduce(x, 0, (s, x) -> s + x, s -> s), reduce(x, 0, (s, x) -> s + x, s -> s) FROM (VALUES (array[1, 2, 3])) t(x)\",\n+                \"SELECT array[1, 2, 3], 6, 6\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMjgwNw=="}, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2490, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}