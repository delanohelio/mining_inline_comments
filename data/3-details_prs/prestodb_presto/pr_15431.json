{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTk0MTU1", "number": 15431, "title": "Support different concurrency", "bodyText": "If TableWriter input is fixed distributed (e.g.: aggregation or join) the actual aggregation or join concurrency will be set to the table writer concurrency\n== NO RELEASE NOTE ==", "createdAt": "2020-11-12T16:14:38Z", "url": "https://github.com/prestodb/presto/pull/15431", "merged": true, "mergeCommit": {"oid": "8bea180fdc31be1f2c31b9e9d2b3b6f83ec47c63"}, "closed": true, "closedAt": "2020-12-10T21:42:01Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb07dcAH2gAyNTE5OTk0MTU1OmJkMDM1MDc3ZWQ1MGRkNjZlNTdkOTI1MWY2MDE5ODc3NDgzNjIxNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddS4UrgFqTUzMjAzNTYwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/bd035077ed50dd66e57d9251f60198774836214b", "committedDate": "2020-11-12T16:13:12Z", "message": "Support different concurrency settings for table writer\n\nIf TableWriter input is fixed distributed (e.g.: aggregation or join)\nthe actual aggregation or join concurrency will be set to the\ntable writer concurrency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d621c1d76077f5a0b87c4e345dc3d2b7a9ccc030", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/d621c1d76077f5a0b87c4e345dc3d2b7a9ccc030", "committedDate": "2020-11-12T16:13:31Z", "message": "Prefer default parallelism to avoid adding extra local exchange\n\nFor partitioned writes the shuffle is added unconditionally. There's\nno reason to additionally prefer the fixed streams."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTYyMDQz", "url": "https://github.com/prestodb/presto/pull/15431#pullrequestreview-529562043", "createdAt": "2020-11-12T22:47:27Z", "commit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo0NzoyN1rOHyRs0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo0NzoyN1rOHyRs0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MDg1MQ==", "bodyText": "can this be if (taskWriterCount >= taskConcurrency) ?", "url": "https://github.com/prestodb/presto/pull/15431#discussion_r522480851", "createdAt": "2020-11-12T22:47:27Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddLocalExchanges.java", "diffHunk": "@@ -508,21 +508,45 @@ public PlanWithProperties visitTableWriter(TableWriterNode originalTableWriterNo\n             PlanWithProperties tableWriter;\n \n             if (!originalTableWriterNode.getTablePartitioningScheme().isPresent()) {\n-                tableWriter = planAndEnforceChildren(\n-                        new TableWriterNode(\n-                                originalTableWriterNode.getId(),\n-                                originalTableWriterNode.getSource(),\n-                                originalTableWriterNode.getTarget(),\n-                                variableAllocator.newVariable(\"partialrowcount\", BIGINT),\n-                                variableAllocator.newVariable(\"partialfragments\", VARBINARY),\n-                                variableAllocator.newVariable(\"partialcontext\", VARBINARY),\n-                                originalTableWriterNode.getColumns(),\n-                                originalTableWriterNode.getColumnNames(),\n-                                originalTableWriterNode.getTablePartitioningScheme(),\n-                                originalTableWriterNode.getPreferredShufflePartitioningScheme(),\n-                                statisticAggregations.map(StatisticAggregations.Parts::getPartialAggregation)),\n-                        fixedParallelism(),\n-                        fixedParallelism());\n+                int taskWriterCount = getTaskWriterCount(session);\n+                int taskConcurrency = getTaskConcurrency(session);\n+                if (taskWriterCount == taskConcurrency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTgwMDU2", "url": "https://github.com/prestodb/presto/pull/15431#pullrequestreview-529580056", "createdAt": "2020-11-12T23:20:59Z", "commit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoyMDo1OVrOHyStVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoyMDo1OVrOHyStVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzM2NA==", "bodyText": "Could you explain why it is fixedParallelism() currently? I am trying to understand the difference for  public enum StreamDistribution { SINGLE, MULTIPLE, FIXED }", "url": "https://github.com/prestodb/presto/pull/15431#discussion_r522497364", "createdAt": "2020-11-12T23:20:59Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddLocalExchanges.java", "diffHunk": "@@ -508,21 +508,45 @@ public PlanWithProperties visitTableWriter(TableWriterNode originalTableWriterNo\n             PlanWithProperties tableWriter;\n \n             if (!originalTableWriterNode.getTablePartitioningScheme().isPresent()) {\n-                tableWriter = planAndEnforceChildren(\n-                        new TableWriterNode(\n-                                originalTableWriterNode.getId(),\n-                                originalTableWriterNode.getSource(),\n-                                originalTableWriterNode.getTarget(),\n-                                variableAllocator.newVariable(\"partialrowcount\", BIGINT),\n-                                variableAllocator.newVariable(\"partialfragments\", VARBINARY),\n-                                variableAllocator.newVariable(\"partialcontext\", VARBINARY),\n-                                originalTableWriterNode.getColumns(),\n-                                originalTableWriterNode.getColumnNames(),\n-                                originalTableWriterNode.getTablePartitioningScheme(),\n-                                originalTableWriterNode.getPreferredShufflePartitioningScheme(),\n-                                statisticAggregations.map(StatisticAggregations.Parts::getPartialAggregation)),\n-                        fixedParallelism(),\n-                        fixedParallelism());\n+                int taskWriterCount = getTaskWriterCount(session);\n+                int taskConcurrency = getTaskConcurrency(session);\n+                if (taskWriterCount == taskConcurrency) {\n+                    tableWriter = planAndEnforceChildren(\n+                            new TableWriterNode(\n+                                    originalTableWriterNode.getId(),\n+                                    originalTableWriterNode.getSource(),\n+                                    originalTableWriterNode.getTarget(),\n+                                    variableAllocator.newVariable(\"partialrowcount\", BIGINT),\n+                                    variableAllocator.newVariable(\"partialfragments\", VARBINARY),\n+                                    variableAllocator.newVariable(\"partialcontext\", VARBINARY),\n+                                    originalTableWriterNode.getColumns(),\n+                                    originalTableWriterNode.getColumnNames(),\n+                                    originalTableWriterNode.getTablePartitioningScheme(),\n+                                    originalTableWriterNode.getPreferredShufflePartitioningScheme(),\n+                                    statisticAggregations.map(StatisticAggregations.Parts::getPartialAggregation)),\n+                            fixedParallelism(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTY5Nzc5", "url": "https://github.com/prestodb/presto/pull/15431#pullrequestreview-531969779", "createdAt": "2020-11-17T02:09:27Z", "commit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOToyN1rOH0hnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOToyN1rOH0hnFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODY3OA==", "bodyText": "Thanks for explanation.", "url": "https://github.com/prestodb/presto/pull/15431#discussion_r524838678", "createdAt": "2020-11-17T02:09:27Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddLocalExchanges.java", "diffHunk": "@@ -508,21 +508,45 @@ public PlanWithProperties visitTableWriter(TableWriterNode originalTableWriterNo\n             PlanWithProperties tableWriter;\n \n             if (!originalTableWriterNode.getTablePartitioningScheme().isPresent()) {\n-                tableWriter = planAndEnforceChildren(\n-                        new TableWriterNode(\n-                                originalTableWriterNode.getId(),\n-                                originalTableWriterNode.getSource(),\n-                                originalTableWriterNode.getTarget(),\n-                                variableAllocator.newVariable(\"partialrowcount\", BIGINT),\n-                                variableAllocator.newVariable(\"partialfragments\", VARBINARY),\n-                                variableAllocator.newVariable(\"partialcontext\", VARBINARY),\n-                                originalTableWriterNode.getColumns(),\n-                                originalTableWriterNode.getColumnNames(),\n-                                originalTableWriterNode.getTablePartitioningScheme(),\n-                                originalTableWriterNode.getPreferredShufflePartitioningScheme(),\n-                                statisticAggregations.map(StatisticAggregations.Parts::getPartialAggregation)),\n-                        fixedParallelism(),\n-                        fixedParallelism());\n+                int taskWriterCount = getTaskWriterCount(session);\n+                int taskConcurrency = getTaskConcurrency(session);\n+                if (taskWriterCount == taskConcurrency) {\n+                    tableWriter = planAndEnforceChildren(\n+                            new TableWriterNode(\n+                                    originalTableWriterNode.getId(),\n+                                    originalTableWriterNode.getSource(),\n+                                    originalTableWriterNode.getTarget(),\n+                                    variableAllocator.newVariable(\"partialrowcount\", BIGINT),\n+                                    variableAllocator.newVariable(\"partialfragments\", VARBINARY),\n+                                    variableAllocator.newVariable(\"partialcontext\", VARBINARY),\n+                                    originalTableWriterNode.getColumns(),\n+                                    originalTableWriterNode.getColumnNames(),\n+                                    originalTableWriterNode.getTablePartitioningScheme(),\n+                                    originalTableWriterNode.getPreferredShufflePartitioningScheme(),\n+                                    statisticAggregations.map(StatisticAggregations.Parts::getPartialAggregation)),\n+                            fixedParallelism(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzM2NA=="}, "originalCommit": {"oid": "bd035077ed50dd66e57d9251f60198774836214b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDM0MTM2", "url": "https://github.com/prestodb/presto/pull/15431#pullrequestreview-532034136", "createdAt": "2020-11-17T05:36:26Z", "commit": {"oid": "d621c1d76077f5a0b87c4e345dc3d2b7a9ccc030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNTozNjoyNlrOH0lDNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNTozNjoyNlrOH0lDNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg5NTAzMQ==", "bodyText": "What's the difference between fixedParallelism() and defaultParallelism?\nAlso from the commit message\n\nFor partitioned writes the shuffle is added unconditionally.\n\nCurious what does it mean by \"partitioned writes\"? Do you mean the table write input is fixed distribution? (e.g. following aggregation or join)", "url": "https://github.com/prestodb/presto/pull/15431#discussion_r524895031", "createdAt": "2020-11-17T05:36:26Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddLocalExchanges.java", "diffHunk": "@@ -549,7 +549,7 @@ public PlanWithProperties visitTableWriter(TableWriterNode originalTableWriterNo\n                 }\n             }\n             else {\n-                PlanWithProperties source = originalTableWriterNode.getSource().accept(this, fixedParallelism());\n+                PlanWithProperties source = originalTableWriterNode.getSource().accept(this, defaultParallelism(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c1d76077f5a0b87c4e345dc3d2b7a9ccc030"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDM1NjAx", "url": "https://github.com/prestodb/presto/pull/15431#pullrequestreview-532035601", "createdAt": "2020-11-17T05:40:51Z", "commit": {"oid": "d621c1d76077f5a0b87c4e345dc3d2b7a9ccc030"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}