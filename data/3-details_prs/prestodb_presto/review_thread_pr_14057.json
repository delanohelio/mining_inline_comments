{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjkxMjcy", "number": 14057, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNzo1NlrODdf7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjowNFrODdgDUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU4NDAzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNzo1NlrOFmI4Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNzo1NlrOFmI4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNTY4Nw==", "bodyText": "nit: LinkedHashMap -> Map", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375535687", "createdAt": "2020-02-05T22:07:56Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -338,11 +338,11 @@ else if (!groupByColumns.isEmpty()) {\n             query += \" \" + limitKeyWord + \" \" + queryLimit;\n         }\n \n-        List<PinotColumnHandle> columnHandles = ImmutableList.copyOf(getAssignments().values());\n-        return new PinotQueryGenerator.GeneratedPql(tableName, query, getIndicesMappingFromPinotSchemaToPrestoSchema(query, columnHandles), groupByColumns.size(), filter.isPresent(), isQueryShort);\n+        List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, getAssignments());\n+        return new PinotQueryGenerator.GeneratedPql(tableName, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n     }\n \n-    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, List<PinotColumnHandle> handles)\n+    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a41f5a2b306507b4f06236a05cabea2c9df0c8f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU4ODM2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowOTo0NFrOFmI7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowOTo0NFrOFmI7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNjQxNA==", "bodyText": "move plan.accept(new PinotQueryPlanVisitor(session) to its own line", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375536414", "createdAt": "2020-02-05T22:09:44Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -130,10 +130,10 @@ public PinotQueryGeneratorContext getContext()\n     public Optional<PinotQueryGeneratorResult> generate(PlanNode plan, ConnectorSession session)\n     {\n         try {\n-            boolean preferBrokerQueries = PinotSessionProperties.isPreferBrokerQueries(session);\n-            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session, preferBrokerQueries), new PinotQueryGeneratorContext()), \"Resulting context is null\");\n-            boolean isQueryShort = context.isQueryShort(PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session));\n-            return Optional.of(new PinotQueryGeneratorResult(context.toQuery(pinotConfig, preferBrokerQueries, isQueryShort), context));\n+            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea79de0b89422c78eeba369a92e975bd17b8bee"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU5OTU2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNDoxMFrOFmJCLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNDoxMFrOFmJCLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzODIyMA==", "bodyText": "break an empty line after this", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375538220", "createdAt": "2020-02-05T22:14:10Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -275,7 +277,9 @@ private boolean hasOrderBy()\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-\n+        if (expressions.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50812fb788d5c00b41659e23fc5759b5eb4caf1e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYwNDMyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjowNFrOFmJFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjowNFrOFmJFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzODk2Ng==", "bodyText": "this will provide the memory address (which is not necessary for an error message). What is needed is PinotQueryGeneratorContext.class.getName() I guess.", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375538966", "createdAt": "2020-02-05T22:16:04Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -275,7 +277,9 @@ private boolean hasOrderBy()\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-\n+        if (expressions.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50812fb788d5c00b41659e23fc5759b5eb4caf1e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3234, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}