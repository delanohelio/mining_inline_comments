{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4OTY3NTc1", "number": 14341, "title": "Best effort push down distinct count to pinot", "bodyText": "== RELEASE NOTES ==\n\nPinot Changes\n* Add capability to push down distinct count query to Pinot with best effort.", "createdAt": "2020-04-05T08:30:24Z", "url": "https://github.com/prestodb/presto/pull/14341", "merged": true, "mergeCommit": {"oid": "61681cfe20c37d0a2252d9417ae9a67032af79f7"}, "closed": true, "closedAt": "2020-04-09T09:10:57Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUmPOBgBqjMyMDE3MDU2OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV40pmgFqTM5MDYyMDY3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4381ad5ed712a029ed73301d6735ad2961ef4d31", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/4381ad5ed712a029ed73301d6735ad2961ef4d31", "committedDate": "2020-04-05T08:28:54Z", "message": "Best effort push down distinct count to pinot"}, "afterCommit": {"oid": "29ec42687b4d761eeb264c8aef40f350cadaff3a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/29ec42687b4d761eeb264c8aef40f350cadaff3a", "committedDate": "2020-04-05T08:57:20Z", "message": "Best effort push down distinct count to pinot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29ec42687b4d761eeb264c8aef40f350cadaff3a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/29ec42687b4d761eeb264c8aef40f350cadaff3a", "committedDate": "2020-04-05T08:57:20Z", "message": "Best effort push down distinct count to pinot"}, "afterCommit": {"oid": "e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "committedDate": "2020-04-05T10:17:59Z", "message": "Best effort to push down distinct count to pinot."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "committedDate": "2020-04-05T10:17:59Z", "message": "Best effort to push down distinct count to pinot."}, "afterCommit": {"oid": "e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "committedDate": "2020-04-05T10:30:53Z", "message": "Best effort to push down distinct count function to pinot."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "committedDate": "2020-04-05T10:30:53Z", "message": "Best effort to push down distinct count function to pinot."}, "afterCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/05770437addd3244f49dc7061848cdf19b886459", "committedDate": "2020-04-05T21:59:23Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc5ODk0", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-389579894", "createdAt": "2020-04-08T00:32:38Z", "commit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMjozOFrOGCa8Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MjoyNVrOGCbGdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTc2Mg==", "bodyText": "Will this message show the agg mask too or reflect that we have a distinct operation ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405191762", "createdAt": "2020-04-08T00:32:38Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n+                }\n+                if (agg.getMask().isPresent()) {\n+                    /**\n+                     * This if-block handles the case of pushing down distinct count as one of the aggregation expression along with other aggregation functions.\n+                     * E.g. `SELECT count(distinct COL_A), sum(COL_B) FROM (SELECT COL_A, COL_B FROM myTable)` to Pinot as `SELECT distinctCount(COL_A), sum(COL_B) FROM myTable`\n+                     *\n+                     */\n+                    if (agg.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME) && agg.getMask().get().getName().equalsIgnoreCase(agg.getArguments().get(0) + DISTINCT_MASK)) {\n+                        nodeBuilder.add(new AggregationFunctionColumnNode(outputColumn, new CallExpression(DISTINCT_COUNT_FUNCTION_NAME, agg.getCall().getFunctionHandle(), agg.getCall().getType(), agg.getCall().getArguments())));\n+                        continue;\n+                    }\n+                    // Pinot doesn't support push down aggregation functions other than count on top of distinct function.\n                     throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjIyMw==", "bodyText": "I am wondering if this comment can be simplified to saying that: This block handles the case when a distinct aggregation is present in addition to another aggregation function. And the example need not contain a subquery ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192223", "createdAt": "2020-04-08T00:34:14Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n+                }\n+                if (agg.getMask().isPresent()) {\n+                    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjY2Mw==", "bodyText": "remove commented code ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192663", "createdAt": "2020-04-08T00:36:08Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ==", "bodyText": "Why is the return type unconditionally a BIGINT ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192845", "createdAt": "2020-04-08T00:36:52Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))\n+                        //aggregationArgument.equalsIgnoreCase(sourceAggregationNode.getGroupingKeys().get(0).getName()))\n+                        nodeBuilder.add(\n+                                new AggregationFunctionColumnNode(\n+                                        outputColumn,\n+                                        new CallExpression(\n+                                                DISTINCT_COUNT_FUNCTION_NAME,\n+                                                aggregation.getFunctionHandle(),\n+                                                BigintType.BIGINT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzA2MA==", "bodyText": "Seems like a helpful helper function. Can it be used elsewhere too ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193060", "createdAt": "2020-04-08T00:37:42Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))\n+                        //aggregationArgument.equalsIgnoreCase(sourceAggregationNode.getGroupingKeys().get(0).getName()))\n+                        nodeBuilder.add(\n+                                new AggregationFunctionColumnNode(\n+                                        outputColumn,\n+                                        new CallExpression(\n+                                                DISTINCT_COUNT_FUNCTION_NAME,\n+                                                aggregation.getFunctionHandle(),\n+                                                BigintType.BIGINT,\n+                                                ImmutableList.of(aggregationArgument))));\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static Set<String> getGroupKeys(List<VariableReferenceExpression> groupingKeys)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzE3Nw==", "bodyText": "Commented code", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193177", "createdAt": "2020-04-08T00:38:08Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -151,7 +154,19 @@ public PinotQueryGeneratorContext withAggregation(\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n         // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw==", "bodyText": "I didn't understand fully the need to change hiddenColumnSet here ?\nAlso, can this loop be written using some java8 streams way ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193697", "createdAt": "2020-04-08T00:39:57Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -151,7 +154,19 @@ public PinotQueryGeneratorContext withAggregation(\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n         // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        Iterator<Selection> selectionIterator = newSelections.values().iterator();\n+        boolean passed = false;\n+        while (selectionIterator.hasNext()) {\n+            if (selectionIterator.next().getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                hiddenColumnSet = Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzg3NQ==", "bodyText": "Is this used anywhere ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193875", "createdAt": "2020-04-08T00:40:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -242,6 +257,20 @@ private boolean hasOrderBy()\n         return !topNColumnOrderingMap.isEmpty();\n     }\n \n+    public boolean isNonAggregateGroupBy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NDM1Nw==", "bodyText": "Should we be spelling out __expressions__ here and above ?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405194357", "createdAt": "2020-04-08T00:42:25Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +132,52 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountGroupByPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"city\"), v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).singleGroupingSet(v(\"city\")).addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly GROUP BY city TOP 10000\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountWithOtherAggregationPushdown()\n+    {\n+        Map<String, String> outputVariables = ImmutableMap.of(\"agg\", \"count(*)\", \"count(regionid)\", \"DISTINCTCOUNT(regionId)\");\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode markDistinct = buildPlan(planBuilder -> markDistinct(planBuilder, v(\"regionid$distinct\"), ImmutableList.of(v(\"regionid\")), justScan));\n+        testPQL(\n+                new PinotConfig().setAllowMultipleAggregations(true),\n+                planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(markDistinct).addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)).addAggregation(planBuilder.variable(\"count(regionid)\"), getRowExpression(\"count(regionid)\", defaultSessionHolder), Optional.empty(), Optional.empty(), false, Optional.of(v(\"regionid$distinct\"))).globalGrouping()),\n+                \"SELECT __expressions__ FROM realtimeOnly\",\n+                defaultSessionHolder,\n+                outputVariables);\n+    }\n+\n+    @Test\n+    public void testDistinctCountWithOtherAggregationGroupByPushdown()\n+    {\n+        Map<String, String> outputVariables = ImmutableMap.of(\"agg\", \"count(*)\", \"count(regionid)\", \"DISTINCTCOUNT(regionId)\");\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode markDistinct = buildPlan(planBuilder -> markDistinct(planBuilder, v(\"regionid$distinct\"), ImmutableList.of(v(\"regionid\")), justScan));\n+        testPQL(\n+                new PinotConfig().setAllowMultipleAggregations(true),\n+                planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(markDistinct).singleGroupingSet(v(\"city\")).addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)).addAggregation(planBuilder.variable(\"count(regionid)\"), getRowExpression(\"count(regionid)\", defaultSessionHolder), Optional.empty(), Optional.empty(), false, Optional.of(v(\"regionid$distinct\")))),\n+                \"SELECT __expressions__ FROM realtimeOnly GROUP BY city TOP 10000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05770437addd3244f49dc7061848cdf19b886459", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/05770437addd3244f49dc7061848cdf19b886459", "committedDate": "2020-04-05T21:59:23Z", "message": "Best effort to push down distinct count function to pinot"}, "afterCommit": {"oid": "e0fc017d548cd5373840e234b5cad461e48cbf50", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e0fc017d548cd5373840e234b5cad461e48cbf50", "committedDate": "2020-04-08T01:25:10Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0fc017d548cd5373840e234b5cad461e48cbf50", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e0fc017d548cd5373840e234b5cad461e48cbf50", "committedDate": "2020-04-08T01:25:10Z", "message": "Address comments"}, "afterCommit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/92208bf69c95f178fabebe74d416261e94fe893c", "committedDate": "2020-04-08T02:08:20Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzAwMjE4", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-389700218", "createdAt": "2020-04-08T07:01:29Z", "commit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTg1MTQ0", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-390185144", "createdAt": "2020-04-08T17:31:17Z", "commit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMToxOFrOGC5n4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMToxOFrOGC5n4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NDQzNQ==", "bodyText": "Can you use a more descriptive name than passed, please?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405694435", "createdAt": "2020-04-08T17:31:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,18 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        boolean passed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTg4ODQy", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-390188842", "createdAt": "2020-04-08T17:36:28Z", "commit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjoyOFrOGC5zYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjoyOFrOGC5zYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzM3OQ==", "bodyText": "The hiddenColumnSet should be changed here, such that the loop above becomes read-only.\nAlso, would this check make sense to guard the overwriting of hiddenColumnSet:\nif (!passed) { checkSupported(!hashAggregation(), \"....\"); } else if (hasAggregation()) { hiddenColumnSet = ImmutableSet.of(); } \nAlso, please use either ImmutableSet.of() if the intention is for hiddenColumnSet to be never added to again for the life of this context. Or use a new HashSet<> if you want to allow future additions. Presto does not encourage Collections.emptySet.\nI wonder if it is possible to have another aggregation on top of a distinct ? Like can we have three aggregations stacked together ? What should we do in that case ? The safest thing would be to detect and back out.", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405697379", "createdAt": "2020-04-08T17:36:28Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,18 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        boolean passed = false;\n+        Collection<Selection> selections = newSelections.values();\n+        for (Selection selection : selections) {\n+            if (selection.getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                hiddenColumnSet = Collections.emptySet();\n+                passed = true;\n+            }\n+        }\n+        if (!passed) {\n+            checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92208bf69c95f178fabebe74d416261e94fe893c"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1f00c1e2da7d8e004d75d4e158e28d25d96455a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/b1f00c1e2da7d8e004d75d4e158e28d25d96455a", "committedDate": "2020-04-08T20:21:09Z", "message": "Address comments"}, "afterCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "committedDate": "2020-04-09T03:05:05Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDY0Mzgy", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-390464382", "createdAt": "2020-04-09T03:13:57Z", "commit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoxMzo1OFrOGDIIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoyMToxNFrOGDIPxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjIzNQ==", "bodyText": "ImmutableMap.<String, String>builder()", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932235", "createdAt": "2020-04-09T03:13:58Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -74,12 +75,15 @@\n public class PinotQueryGenerator\n {\n     private static final Logger log = Logger.get(PinotQueryGenerator.class);\n-    private static final Map<String, String> UNARY_AGGREGATION_MAP = ImmutableMap.of(\n-            \"min\", \"min\",\n-            \"max\", \"max\",\n-            \"avg\", \"avg\",\n-            \"sum\", \"sum\",\n-            \"approx_distinct\", \"DISTINCTCOUNTHLL\");\n+    private static final Map<String, String> UNARY_AGGREGATION_MAP =\n+            new ImmutableMap.Builder<String, String>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjU2Mw==", "bodyText": "put this to the first line.", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932563", "createdAt": "2020-04-09T03:15:14Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -244,6 +248,14 @@ protected VariableReferenceExpression getVariableReference(RowExpression express\n             throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected a variable reference but got \" + expression);\n         }\n \n+        @Override\n+        public PinotQueryGeneratorContext visitMarkDistinct(MarkDistinctNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjYyMg==", "bodyText": "return node.getSource().accept(this, context);", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932622", "createdAt": "2020-04-09T03:15:28Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -244,6 +248,14 @@ protected VariableReferenceExpression getVariableReference(RowExpression express\n             throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected a variable reference but got \" + expression);\n         }\n \n+        @Override\n+        public PinotQueryGeneratorContext visitMarkDistinct(MarkDistinctNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            return context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzA3MA==", "bodyText": "where do we have this function?", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933070", "createdAt": "2020-04-09T03:17:23Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -48,6 +51,10 @@\n \n public class PinotPushdownUtils\n {\n+    public static final String DISTINCT_COUNT_FUNCTION_NAME = \"distinctCount\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI3NQ==", "bodyText": "rename this to aggregation", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933275", "createdAt": "2020-04-09T03:18:04Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzQxNw==", "bodyText": "We don't use javadoc in the body of a function use comments instead\n// ...\n// ...\n// ...", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933417", "createdAt": "2020-04-09T03:18:44Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n                     throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n                 }\n+                if (agg.getMask().isPresent()) {\n+                    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzY5Mg==", "bodyText": "Can we return early in this function for most of the ifs; so we don't have to deal with all these braces\nif (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n    return false;\n}\n\n...", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933692", "createdAt": "2020-04-09T03:19:49Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,52 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzgxMQ==", "bodyText": "no javadoc", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933811", "createdAt": "2020-04-09T03:20:18Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,22 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        AtomicBoolean pushDownDistinctCount = new AtomicBoolean(false);\n+        newSelections.values().forEach(selection -> {\n+            if (selection.getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                pushDownDistinctCount.set(true);\n+            }\n+        });\n+        if (pushDownDistinctCount.get()) {\n+            /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNDAyMA==", "bodyText": "ImmutableMap.<.., ..>builder()", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405934020", "createdAt": "2020-04-09T03:21:14Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotQueryBase.java", "diffHunk": "@@ -98,12 +99,16 @@\n \n     protected final PinotConfig pinotConfig = new PinotConfig();\n \n-    protected static final Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> testInput = ImmutableMap.of(\n-            new VariableReferenceExpression(\"regionid\", BIGINT), new PinotQueryGeneratorContext.Selection(\"regionId\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"city\", VARCHAR), new PinotQueryGeneratorContext.Selection(\"city\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"fare\", DOUBLE), new PinotQueryGeneratorContext.Selection(\"fare\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"totalfare\", DOUBLE), new PinotQueryGeneratorContext.Selection(\"(fare + trip)\", DERIVED), // derived column\n-            new VariableReferenceExpression(\"secondssinceepoch\", BIGINT), new PinotQueryGeneratorContext.Selection(\"secondsSinceEpoch\", TABLE_COLUMN)); // column for datetime functions\n+    protected static final Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> testInput =\n+            new ImmutableMap.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "committedDate": "2020-04-09T03:05:05Z", "message": "Best effort to push down distinct count function to pinot"}, "afterCommit": {"oid": "cdd63993651da7167ef8145b54143fefbd11ab9e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/cdd63993651da7167ef8145b54143fefbd11ab9e", "committedDate": "2020-04-09T04:54:59Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdd63993651da7167ef8145b54143fefbd11ab9e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/cdd63993651da7167ef8145b54143fefbd11ab9e", "committedDate": "2020-04-09T04:54:59Z", "message": "Best effort to push down distinct count function to pinot"}, "afterCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/62fc19899ebb26212e1649ca5b6968ac5e04297c", "committedDate": "2020-04-09T06:12:21Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTU5ODU4", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-390559858", "createdAt": "2020-04-09T07:43:06Z", "commit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo0MzowNlrOGDNNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo0NzowN1rOGDNU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI0NA==", "bodyText": "break a line after this", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015244", "createdAt": "2020-04-09T07:43:06Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI4MQ==", "bodyText": "break a line after this", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015281", "createdAt": "2020-04-09T07:43:10Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI5OQ==", "bodyText": "break a line after this", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015299", "createdAt": "2020-04-09T07:43:12Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTM1MA==", "bodyText": "break a line after this", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015350", "createdAt": "2020-04-09T07:43:16Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }\n+        AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+        Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+        Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+        aggregationGroupSet.add(aggregationArgument.toString());\n+        if (!sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTU4NQ==", "bodyText": "private", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015585", "createdAt": "2020-04-09T07:43:45Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }\n+        AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+        Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+        Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+        aggregationGroupSet.add(aggregationArgument.toString());\n+        if (!sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+            return false;\n+        }\n+        nodeBuilder.add(\n+                new AggregationFunctionColumnNode(\n+                        outputColumn,\n+                        new CallExpression(\n+                                PINOT_DISTINCT_COUNT_FUNCTION_NAME,\n+                                aggregation.getFunctionHandle(),\n+                                aggregation.getCall().getType(),\n+                                ImmutableList.of(aggregationArgument))));\n+        return true;\n+    }\n+\n+    public static Set<String> getGroupKeys(List<VariableReferenceExpression> groupingKeys)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNjkyNg==", "bodyText": "rename function v to variable....", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406016926", "createdAt": "2020-04-09T07:46:27Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNzIyOQ==", "bodyText": "put one param per line and the first line without any param", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406017229", "createdAt": "2020-04-09T07:47:03Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNzI1OA==", "bodyText": "put one param per line and the first line without any param", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406017258", "createdAt": "2020-04-09T07:47:07Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountGroupByPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"city\"), v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).singleGroupingSet(v(\"city\")).addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e4ec97c67dbc2224063fa9490513e322ce11f04", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/0e4ec97c67dbc2224063fa9490513e322ce11f04", "committedDate": "2020-04-09T07:59:47Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/62fc19899ebb26212e1649ca5b6968ac5e04297c", "committedDate": "2020-04-09T06:12:21Z", "message": "Best effort to push down distinct count function to pinot"}, "afterCommit": {"oid": "0e4ec97c67dbc2224063fa9490513e322ce11f04", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/0e4ec97c67dbc2224063fa9490513e322ce11f04", "committedDate": "2020-04-09T07:59:47Z", "message": "Best effort to push down distinct count function to pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjIwNjc5", "url": "https://github.com/prestodb/presto/pull/14341#pullrequestreview-390620679", "createdAt": "2020-04-09T09:10:41Z", "commit": {"oid": "0e4ec97c67dbc2224063fa9490513e322ce11f04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1789, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}