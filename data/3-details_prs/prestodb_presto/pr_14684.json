{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQzODgz", "number": 14684, "title": "Add an optimizer rule to remove redundant assignments in ProjectNode", "bodyText": "Fixes #14683\n== NO RELEASE NOTE ==", "createdAt": "2020-06-20T01:01:58Z", "url": "https://github.com/prestodb/presto/pull/14684", "merged": true, "mergeCommit": {"oid": "5526987a37f10c94aa10a2651f27da722941672c"}, "closed": true, "closedAt": "2020-06-23T21:25:28Z", "author": {"login": "rongrong"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs9CFRABqjM0NjQyMzAzNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuKxm3ABqjM0NzQ1MTE0MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66b7ef9f1000c127f002ccfd8c2e2aa883e6d6fe", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/66b7ef9f1000c127f002ccfd8c2e2aa883e6d6fe", "committedDate": "2020-06-20T01:00:09Z", "message": "Add an optimizer rule to remove redundant assignments in ProjectNode"}, "afterCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/072e7039b4728fe18529c46a4d351b2e6e7782a5", "committedDate": "2020-06-20T01:05:00Z", "message": "Add an optimizer rule to remove redundant assignments in ProjectNode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjUxNjA3", "url": "https://github.com/prestodb/presto/pull/14684#pullrequestreview-435251607", "createdAt": "2020-06-22T20:31:46Z", "commit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mjc1Mzk5", "url": "https://github.com/prestodb/presto/pull/14684#pullrequestreview-435275399", "createdAt": "2020-06-22T21:08:55Z", "commit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowODo1NlrOGnRFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToxMTo0NFrOGnRKgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzQ3MA==", "bodyText": "nit: static import Map.Entry", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827470", "createdAt": "2020-06-22T21:08:56Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzUwNA==", "bodyText": "static import Collectors.partitioningBy", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827504", "createdAt": "2020-06-22T21:09:02Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzU4OQ==", "bodyText": "static import Collectors.partitioningBy, Map.Entry", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827589", "createdAt": "2020-06-22T21:09:13Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()\n+                .collect(Collectors.groupingBy(Map.Entry::getValue, toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNzcyMg==", "bodyText": "static import Map.Entry\nAlso, I would normally only use interfaces here:\nfor (Entry<RowExpression, Map<VariableReferenceExpression, RowExpression>>)", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443827722", "createdAt": "2020-06-22T21:09:28Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()\n+                .collect(Collectors.groupingBy(Map.Entry::getValue, toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));\n+        if (uniqueProjections.size() == projections.get(false).size()) {\n+            return Result.empty();\n+        }\n+        Assignments.Builder childAssignments = Assignments.builder();\n+        Assignments.Builder parentAssignments = Assignments.builder();\n+        projections.get(true).forEach(entry -> childAssignments.put(entry.getKey(), entry.getValue()));\n+        projections.get(true).forEach(entry -> parentAssignments.put(entry.getKey(), entry.getKey()));\n+        for (Map.Entry<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> entry : uniqueProjections.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyODg2NA==", "bodyText": "I would normally only use interfaces here:\nfor (Entry<RowExpression, Map<VariableReferenceExpression, RowExpression>>)", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443828864", "createdAt": "2020-06-22T21:11:44Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PruneRedundantProjectionAssignments.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.sql.planner.plan.Patterns.project;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.Iterables.getFirst;\n+\n+public class PruneRedundantProjectionAssignments\n+        implements Rule<ProjectNode>\n+{\n+    private static final Pattern<ProjectNode> PATTERN = project();\n+\n+    @Override\n+    public Pattern<ProjectNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ProjectNode node, Captures captures, Context context)\n+    {\n+        Map<Boolean, List<Map.Entry<VariableReferenceExpression, RowExpression>>> projections = node.getAssignments().entrySet().stream()\n+                .collect(Collectors.partitioningBy(entry -> entry.getValue() instanceof VariableReferenceExpression));\n+        Map<RowExpression, ImmutableMap<VariableReferenceExpression, RowExpression>> uniqueProjections = projections.get(false).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjgyMDU5", "url": "https://github.com/prestodb/presto/pull/14684#pullrequestreview-435282059", "createdAt": "2020-06-22T21:20:00Z", "commit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyMDowMFrOGnRZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyMDowMFrOGnRZ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMjgwNw==", "bodyText": "I tried this query out on the master with the CSE enabled and it is succeeding. Is there a case which fails on the master but succeeds with this fix?", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443832807", "createdAt": "2020-06-22T21:20:00Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8447,6 +8447,14 @@ public void testSetAgg()\n                 \"select count(distinct orderdate) from orders\");\n     }\n \n+    @Test\n+    public void testRedundantLambda()\n+    {\n+        assertQuery(\n+                \"SELECT x, reduce(x, 0, (s, x) -> s + x, s -> s), reduce(x, 0, (s, x) -> s + x, s -> s) FROM (VALUES (array[1, 2, 3])) t(x)\",\n+                \"SELECT array[1, 2, 3], 6, 6\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mjg0NTcy", "url": "https://github.com/prestodb/presto/pull/14684#pullrequestreview-435284572", "createdAt": "2020-06-22T21:24:27Z", "commit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyNDoyN1rOGnRh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyNDoyN1rOGnRh6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNDg1OA==", "bodyText": "My mistake, the issue on master but is not in a release.", "url": "https://github.com/prestodb/presto/pull/14684#discussion_r443834858", "createdAt": "2020-06-22T21:24:27Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8447,6 +8447,14 @@ public void testSetAgg()\n                 \"select count(distinct orderdate) from orders\");\n     }\n \n+    @Test\n+    public void testRedundantLambda()\n+    {\n+        assertQuery(\n+                \"SELECT x, reduce(x, 0, (s, x) -> s + x, s -> s), reduce(x, 0, (s, x) -> s + x, s -> s) FROM (VALUES (array[1, 2, 3])) t(x)\",\n+                \"SELECT array[1, 2, 3], 6, 6\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMjgwNw=="}, "originalCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDg5MjQ0", "url": "https://github.com/prestodb/presto/pull/14684#pullrequestreview-435489244", "createdAt": "2020-06-23T06:53:17Z", "commit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6dafe4e668efb4658c7945fb2da7f326df367e1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b6dafe4e668efb4658c7945fb2da7f326df367e1", "committedDate": "2020-06-23T18:28:42Z", "message": "Add an optimizer rule to remove redundant assignments in ProjectNode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "072e7039b4728fe18529c46a4d351b2e6e7782a5", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/072e7039b4728fe18529c46a4d351b2e6e7782a5", "committedDate": "2020-06-20T01:05:00Z", "message": "Add an optimizer rule to remove redundant assignments in ProjectNode"}, "afterCommit": {"oid": "b6dafe4e668efb4658c7945fb2da7f326df367e1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b6dafe4e668efb4658c7945fb2da7f326df367e1", "committedDate": "2020-06-23T18:28:42Z", "message": "Add an optimizer rule to remove redundant assignments in ProjectNode"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1432, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}