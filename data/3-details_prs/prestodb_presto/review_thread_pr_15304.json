{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODg2MTg3", "number": 15304, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjozNjowOFrOEs4qkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNDoxOVrOEtgqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTAxMjAyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjozNjowOFrOHgXVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjowNjozN1rOHguYIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODg5Mg==", "bodyText": "the columnEncoding sequence 0 if present, should be the first value, so the if check can be moved outside the for loop.\nsequence0 can be assigned to the one if one exists, or a dummy DWRF_DIRECT encoding can be created, so that the below code does not need to switch on sequence0 != null.", "url": "https://github.com/prestodb/presto/pull/15304#discussion_r503698892", "createdAt": "2020-10-13T06:36:08Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -200,20 +200,29 @@ private static DwrfSequenceEncoding toSequenceEncoding(OrcType type, DwrfProto.C\n                         columnEncoding.getDictionarySize()));\n     }\n \n-    private static Optional<SortedMap<Integer, DwrfSequenceEncoding>> toAdditionalSequenceEncodings(List<DwrfProto.ColumnEncoding> columnEncodings, OrcType type)\n+    private static ColumnEncoding toColumnEncoding(OrcType type, List<DwrfProto.ColumnEncoding> columnEncodings)\n     {\n-        if (columnEncodings.size() == 1) {\n-            return Optional.empty();\n+        DwrfProto.ColumnEncoding sequence0 = null;\n+        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> builder = ImmutableSortedMap.naturalOrder();\n+        for (DwrfProto.ColumnEncoding columnEncoding : columnEncodings) {\n+            if (columnEncoding.getSequence() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034a9baf752dafb7cfc6959f162392680c99d2ff"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NjMyMw==", "bodyText": "even though sequence 0 is indeed the first one in columnEncodings in current implementation, the spec doesn't guarantee order", "url": "https://github.com/prestodb/presto/pull/15304#discussion_r504076323", "createdAt": "2020-10-13T16:06:37Z", "author": {"login": "zzhao0"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -200,20 +200,29 @@ private static DwrfSequenceEncoding toSequenceEncoding(OrcType type, DwrfProto.C\n                         columnEncoding.getDictionarySize()));\n     }\n \n-    private static Optional<SortedMap<Integer, DwrfSequenceEncoding>> toAdditionalSequenceEncodings(List<DwrfProto.ColumnEncoding> columnEncodings, OrcType type)\n+    private static ColumnEncoding toColumnEncoding(OrcType type, List<DwrfProto.ColumnEncoding> columnEncodings)\n     {\n-        if (columnEncodings.size() == 1) {\n-            return Optional.empty();\n+        DwrfProto.ColumnEncoding sequence0 = null;\n+        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> builder = ImmutableSortedMap.naturalOrder();\n+        for (DwrfProto.ColumnEncoding columnEncoding : columnEncodings) {\n+            if (columnEncoding.getSequence() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODg5Mg=="}, "originalCommit": {"oid": "034a9baf752dafb7cfc6959f162392680c99d2ff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTU2NjE0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNDoxOVrOHhVsNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMzoxM1rOHhZCYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDQzNg==", "bodyText": "additionalSequenceEncodings name is confusing; the value is just nonZeroSequences wrapped into an Optional; Is it important to use Optional.empty() when nonZeroSequences is empty? Why can't we always use Optional.of(nonZeroSequences)? If that's possible, then additionalSequenceEncodings variable can be removed and Optional.of(nonZeroSequences) can be used in its place.", "url": "https://github.com/prestodb/presto/pull/15304#discussion_r504720436", "createdAt": "2020-10-14T14:24:19Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -200,20 +200,29 @@ private static DwrfSequenceEncoding toSequenceEncoding(OrcType type, DwrfProto.C\n                         columnEncoding.getDictionarySize()));\n     }\n \n-    private static Optional<SortedMap<Integer, DwrfSequenceEncoding>> toAdditionalSequenceEncodings(List<DwrfProto.ColumnEncoding> columnEncodings, OrcType type)\n+    private static ColumnEncoding toColumnEncoding(OrcType type, List<DwrfProto.ColumnEncoding> columnEncodings)\n     {\n-        if (columnEncodings.size() == 1) {\n-            return Optional.empty();\n+        DwrfProto.ColumnEncoding sequence0 = null;\n+        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> builder = ImmutableSortedMap.naturalOrder();\n+        for (DwrfProto.ColumnEncoding columnEncoding : columnEncodings) {\n+            if (columnEncoding.getSequence() == 0) {\n+                sequence0 = columnEncoding;\n+            }\n+            else {\n+                builder.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+            }\n         }\n \n-        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> additionalSequenceEncodings = ImmutableSortedMap.<Integer, DwrfSequenceEncoding>naturalOrder();\n-\n-        for (int i = 1; i < columnEncodings.size(); i++) {\n-            DwrfProto.ColumnEncoding columnEncoding = columnEncodings.get(i);\n-            additionalSequenceEncodings.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+        SortedMap<Integer, DwrfSequenceEncoding> nonZeroSequences = builder.build();\n+        Optional<SortedMap<Integer, DwrfSequenceEncoding>> additionalSequenceEncodings =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246f5d286a39221f859bc267d9089b516824a731"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MjI4Ng==", "bodyText": "I'm not sure if Optional.empty() is necessary. From looking at the code, it doesn't matter for now. However, grep told me there are places where it relies on Optional.isPresent(), so I attempted to maintain the existing behavior (ie. in the common case when there is only sequence 0 for a node, make additionalSequenceEncodings Optional.empty())", "url": "https://github.com/prestodb/presto/pull/15304#discussion_r504772286", "createdAt": "2020-10-14T15:29:21Z", "author": {"login": "zzhao0"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -200,20 +200,29 @@ private static DwrfSequenceEncoding toSequenceEncoding(OrcType type, DwrfProto.C\n                         columnEncoding.getDictionarySize()));\n     }\n \n-    private static Optional<SortedMap<Integer, DwrfSequenceEncoding>> toAdditionalSequenceEncodings(List<DwrfProto.ColumnEncoding> columnEncodings, OrcType type)\n+    private static ColumnEncoding toColumnEncoding(OrcType type, List<DwrfProto.ColumnEncoding> columnEncodings)\n     {\n-        if (columnEncodings.size() == 1) {\n-            return Optional.empty();\n+        DwrfProto.ColumnEncoding sequence0 = null;\n+        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> builder = ImmutableSortedMap.naturalOrder();\n+        for (DwrfProto.ColumnEncoding columnEncoding : columnEncodings) {\n+            if (columnEncoding.getSequence() == 0) {\n+                sequence0 = columnEncoding;\n+            }\n+            else {\n+                builder.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+            }\n         }\n \n-        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> additionalSequenceEncodings = ImmutableSortedMap.<Integer, DwrfSequenceEncoding>naturalOrder();\n-\n-        for (int i = 1; i < columnEncodings.size(); i++) {\n-            DwrfProto.ColumnEncoding columnEncoding = columnEncodings.get(i);\n-            additionalSequenceEncodings.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+        SortedMap<Integer, DwrfSequenceEncoding> nonZeroSequences = builder.build();\n+        Optional<SortedMap<Integer, DwrfSequenceEncoding>> additionalSequenceEncodings =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDQzNg=="}, "originalCommit": {"oid": "246f5d286a39221f859bc267d9089b516824a731"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NTI2Nw==", "bodyText": "@zzhao0 I'm fine keeping this logic if it is needed, but then we need a better name for additionalSequenceEncodings. It is confusing to use different terms \"non-zero\" and \"additional\" for essentially the same thing. How about, nonZeroEncodingsOptional?", "url": "https://github.com/prestodb/presto/pull/15304#discussion_r504775267", "createdAt": "2020-10-14T15:33:13Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -200,20 +200,29 @@ private static DwrfSequenceEncoding toSequenceEncoding(OrcType type, DwrfProto.C\n                         columnEncoding.getDictionarySize()));\n     }\n \n-    private static Optional<SortedMap<Integer, DwrfSequenceEncoding>> toAdditionalSequenceEncodings(List<DwrfProto.ColumnEncoding> columnEncodings, OrcType type)\n+    private static ColumnEncoding toColumnEncoding(OrcType type, List<DwrfProto.ColumnEncoding> columnEncodings)\n     {\n-        if (columnEncodings.size() == 1) {\n-            return Optional.empty();\n+        DwrfProto.ColumnEncoding sequence0 = null;\n+        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> builder = ImmutableSortedMap.naturalOrder();\n+        for (DwrfProto.ColumnEncoding columnEncoding : columnEncodings) {\n+            if (columnEncoding.getSequence() == 0) {\n+                sequence0 = columnEncoding;\n+            }\n+            else {\n+                builder.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+            }\n         }\n \n-        ImmutableSortedMap.Builder<Integer, DwrfSequenceEncoding> additionalSequenceEncodings = ImmutableSortedMap.<Integer, DwrfSequenceEncoding>naturalOrder();\n-\n-        for (int i = 1; i < columnEncodings.size(); i++) {\n-            DwrfProto.ColumnEncoding columnEncoding = columnEncodings.get(i);\n-            additionalSequenceEncodings.put(columnEncoding.getSequence(), toSequenceEncoding(type, columnEncoding));\n+        SortedMap<Integer, DwrfSequenceEncoding> nonZeroSequences = builder.build();\n+        Optional<SortedMap<Integer, DwrfSequenceEncoding>> additionalSequenceEncodings =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDQzNg=="}, "originalCommit": {"oid": "246f5d286a39221f859bc267d9089b516824a731"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3503, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}