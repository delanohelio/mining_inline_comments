{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODYyNzU5", "number": 14125, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozMDowMlrODjVD_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNjo1OVrODmuMJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzcxODM5OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozMDowMlrOFvE7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo0ODozMVrOFvj8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ==", "bodyText": "I would do this in a loop of say 1000 just to make sure we get good signal.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r384908051", "createdAt": "2020-02-27T04:30:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,32 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    public void testBingTileBigint()\n+    {\n+        Random random = new Random(1812);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3OTg4MA==", "bodyText": "Since this is testing a query, the setup/teardown meant that doing 1000 (particularly for each level) was really slow (a couple minutes on my laptop).  Is there a way to reduce the overhead, or is that kind of test length worth the coverage?", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385379880", "createdAt": "2020-02-27T21:24:56Z", "author": {"login": "jagill"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,32 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    public void testBingTileBigint()\n+    {\n+        Random random = new Random(1812);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ=="}, "originalCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjI5OA==", "bodyText": "Instead of 1000, any nontrivial positive number would probably work", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385416298", "createdAt": "2020-02-27T22:48:31Z", "author": {"login": "tdcmeehan"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,32 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    public void testBingTileBigint()\n+    {\n+        Random random = new Random(1812);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ=="}, "originalCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDM0MjM4OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0NDo0NFrOFwDtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0NDo0NFrOFwDtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNjY1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\n          \n          \n            \n                        throw new PrestoException(INVALID_CAST_ARGUMENT,", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385936650", "createdAt": "2020-02-28T21:44:44Z", "author": {"login": "tdcmeehan"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +87,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTIzNTg1OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1NTowNFrOF0SoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1NTowNFrOF0SoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTQ3Mw==", "bodyText": "\"Unknown Bing Tile encoding version: %s\"", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390375473", "createdAt": "2020-03-10T14:55:04Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java", "diffHunk": "@@ -148,19 +154,38 @@ public String toQuadKey()\n     }\n \n     /**\n-     * Encodes Bing tile as a 64-bit long: 23 bits for X, followed by 23 bits for Y,\n-     * followed by 5 bits for zoomLevel\n+     * Encodes Bing tile as a 64-bit long:\n+     * Version (5 bits), 0 (4 bits), x (23 bits), Zoom (5 bits), 0 (4 bits), y (23 bits)\n+     * (high bits left, low bits right).\n+     *\n+     * This arrangement maximizes low-bit entropy for the Java long hash function.\n      */\n     public long encode()\n     {\n-        return (((long) x) << 28) + (y << 5) + zoomLevel;\n+        // Java's long hash function just XORs itself right shifted 32.\n+        // This is used for bucketing, so if you have 2^k buckets, this only\n+        // keeps the k lowest bits.  This puts the highest entropy bits\n+        // (finest resolution x and y bits) in places that contribute to the\n+        // low bits of the hash.\n+        return (((long) VERSION << VERSION_OFFSET) | y | ((long) x << 32) | ((long) zoomLevel << ZOOM_OFFSET));\n     }\n \n     public static BingTile decode(long tile)\n     {\n-        int tileX = (int) (tile >> 28);\n-        int tileY = (int) ((tile % (1 << 28)) >> 5);\n-        int zoomLevel = (int) (tile % (1 << 5));\n+        int version = (int) (tile >>> VERSION_OFFSET) & BITS_5;\n+        if (version == 0) {\n+            return decodeV0(tile);\n+        }\n+        else {\n+            throw new IllegalArgumentException(format(\"Unknown Bing Tile encoding version: {}\", version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI2NTYwOnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMToxM1rOF0S7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMToxM1rOF0S7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDM4Mg==", "bodyText": "follow up: Currently BingTile.decode must create an object of BingTile. The main reason for calling BingTile.decode is to validate the tile stored in a long. For efficiency I would recommend to have a dedicated method, e.g.: BingTile.validate or smthng.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380382", "createdAt": "2020-03-10T15:01:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +88,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI2NzQ2OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMTozNlrOF0S8bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMTozNlrOF0S8bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDY1Mw==", "bodyText": "nit: public", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380653", "createdAt": "2020-03-10T15:01:36Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI3NDc2OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMzoxM1rOF0TBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMzoxM1rOF0TBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MTgzMw==", "bodyText": "nit: extract these 3 lines into something like testRoundTrip(BingTile tile)", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390381833", "createdAt": "2020-03-10T15:03:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI4Mzg4OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNToxM1rOF0TG5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNToxM1rOF0TG5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MzMzNA==", "bodyText": "I'm not sure if this code really has to be fuzzed.\nHow about standard test cases:\n\nMin zoom\nMax zoom\nMin x and y\nMax x and y\nSeveral different combinations of values in between", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390383334", "createdAt": "2020-03-10T15:05:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI5MjU1OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNjo1OVrOF0TMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNjo1OVrOF0TMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDY5MQ==", "bodyText": "This test is only supposed to verify the integration of the tile encoding (that is tested in the test above), and the function mechanism. Instead of fuzzing i would recommend adding just a few simple test cases to verify the integration is in place.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390384691", "createdAt": "2020-03-10T15:06:59Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(\n+                        random.nextInt(1 << zoom),\n+                        random.nextInt(1 << zoom),\n+                        zoom);\n+                BingTile actual = BingTile.decode(expected.encode());\n+                assertEquals(actual, expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testBingTileCast()\n+    {\n+        Random random = new Random(1812);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3056, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}