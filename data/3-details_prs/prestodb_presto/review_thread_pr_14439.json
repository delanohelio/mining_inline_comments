{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDAxMzcz", "number": 14439, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNDo0MVrOD2xXVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNDo0MVrOD2xXVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzU4NDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNDo0MVrOGMrsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0MjoyOVrOGNq_pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk1Ng==", "bodyText": "@yingsu00 perhaps, a cleaner design would be valuesBuffers.ensureCapacity(offsets[positionCount])", "url": "https://github.com/prestodb/presto/pull/14439#discussion_r415951956", "createdAt": "2020-04-27T16:14:41Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -259,17 +259,13 @@ private void populateNestedPositions(ColumnarArray columnarArray)\n         int[] positions = getPositions();\n \n         for (int i = 0; i < positionCount; i++) {\n-            int position = positions[i];\n-            int beginOffset = columnarArray.getOffset(position);\n-            int endOffset = columnarArray.getOffset(position + 1);\n-            int length = endOffset - beginOffset;\n+            offsets[i + 1] = offsets[i] + columnarArray.getLength(positions[i]);\n+        }\n \n-            offsets[i + 1] = offsets[i] + length;\n+        valuesBuffers.setPositions(ensureCapacity(valuesBuffers.getPositions(), offsets[positionCount], SMALL, NONE, bufferAllocator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8b6053f3d9d15965b28367d8a6236e47448a6b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1OTU3Nw==", "bodyText": "@mbasmanova Hi Masha, thanks for the suggestion. I actually thought of this approach before, but was hesitant to use it because the buffers inside the BlockEncodingBuffer is better to be hidden within the class. By using valuesBuffers.ensureCapacity(offsets[positionCount]), the caller(user) has to know what int[] or byte[] buffers are inside each of the BlockEncodingBuffer and we may have to identify which buffer to ensureCapacity on, e.g.  valuesBuffers.ensurePositionsCapacity() or valuesBuffers.ensureOffsetsCapacity(), or valuesBuffers.ensureCapacity(bufferType, capacity). On the other hand, I think adding a setPositions method is fair since we already had getPositions. What do you think? Do you strongly recommend to use  valuesBuffers.ensureCapacity(offsets[positionCount])?", "url": "https://github.com/prestodb/presto/pull/14439#discussion_r416259577", "createdAt": "2020-04-28T01:23:54Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -259,17 +259,13 @@ private void populateNestedPositions(ColumnarArray columnarArray)\n         int[] positions = getPositions();\n \n         for (int i = 0; i < positionCount; i++) {\n-            int position = positions[i];\n-            int beginOffset = columnarArray.getOffset(position);\n-            int endOffset = columnarArray.getOffset(position + 1);\n-            int length = endOffset - beginOffset;\n+            offsets[i + 1] = offsets[i] + columnarArray.getLength(positions[i]);\n+        }\n \n-            offsets[i + 1] = offsets[i] + length;\n+        valuesBuffers.setPositions(ensureCapacity(valuesBuffers.getPositions(), offsets[positionCount], SMALL, NONE, bufferAllocator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk1Ng=="}, "originalCommit": {"oid": "3a8b6053f3d9d15965b28367d8a6236e47448a6b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MDU5Nw==", "bodyText": "@yingsu00 It is generally better to avoid having setters in classes other than POJOs, hence, my preference is to create narrow mutators.", "url": "https://github.com/prestodb/presto/pull/14439#discussion_r416260597", "createdAt": "2020-04-28T01:26:53Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -259,17 +259,13 @@ private void populateNestedPositions(ColumnarArray columnarArray)\n         int[] positions = getPositions();\n \n         for (int i = 0; i < positionCount; i++) {\n-            int position = positions[i];\n-            int beginOffset = columnarArray.getOffset(position);\n-            int endOffset = columnarArray.getOffset(position + 1);\n-            int length = endOffset - beginOffset;\n+            offsets[i + 1] = offsets[i] + columnarArray.getLength(positions[i]);\n+        }\n \n-            offsets[i + 1] = offsets[i] + length;\n+        valuesBuffers.setPositions(ensureCapacity(valuesBuffers.getPositions(), offsets[positionCount], SMALL, NONE, bufferAllocator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk1Ng=="}, "originalCommit": {"oid": "3a8b6053f3d9d15965b28367d8a6236e47448a6b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MzUyMg==", "bodyText": "@mbasmanova ok, so I will add the valuesBuffers.ensureOffsetsCapacity(capacity) method to AbstractBlockEncodingBuffer. Does that sounds good?", "url": "https://github.com/prestodb/presto/pull/14439#discussion_r416963522", "createdAt": "2020-04-28T22:32:18Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -259,17 +259,13 @@ private void populateNestedPositions(ColumnarArray columnarArray)\n         int[] positions = getPositions();\n \n         for (int i = 0; i < positionCount; i++) {\n-            int position = positions[i];\n-            int beginOffset = columnarArray.getOffset(position);\n-            int endOffset = columnarArray.getOffset(position + 1);\n-            int length = endOffset - beginOffset;\n+            offsets[i + 1] = offsets[i] + columnarArray.getLength(positions[i]);\n+        }\n \n-            offsets[i + 1] = offsets[i] + length;\n+        valuesBuffers.setPositions(ensureCapacity(valuesBuffers.getPositions(), offsets[positionCount], SMALL, NONE, bufferAllocator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk1Ng=="}, "originalCommit": {"oid": "3a8b6053f3d9d15965b28367d8a6236e47448a6b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTA5Mw==", "bodyText": "@yingsu00 Shouldn't it be ensurePositionsCapacity to match appendPositionRange? The contract would be that the caller should call ensurePositionsCapacity for the total number of positions that will be appended using appendPositionRange.", "url": "https://github.com/prestodb/presto/pull/14439#discussion_r416989093", "createdAt": "2020-04-28T23:42:29Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -259,17 +259,13 @@ private void populateNestedPositions(ColumnarArray columnarArray)\n         int[] positions = getPositions();\n \n         for (int i = 0; i < positionCount; i++) {\n-            int position = positions[i];\n-            int beginOffset = columnarArray.getOffset(position);\n-            int endOffset = columnarArray.getOffset(position + 1);\n-            int length = endOffset - beginOffset;\n+            offsets[i + 1] = offsets[i] + columnarArray.getLength(positions[i]);\n+        }\n \n-            offsets[i + 1] = offsets[i] + length;\n+        valuesBuffers.setPositions(ensureCapacity(valuesBuffers.getPositions(), offsets[positionCount], SMALL, NONE, bufferAllocator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk1Ng=="}, "originalCommit": {"oid": "3a8b6053f3d9d15965b28367d8a6236e47448a6b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2819, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}