{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODcxODU5", "number": 15005, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDoxOFrOEXXmlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDo1M1rOEXXnQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM5NDEyOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlInvokedFunctionRowMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDoxOFrOG_H57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDoxOFrOG_H57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0Mjk5MA==", "bodyText": "nit: prefer String.valueOf over format in the case of cast.", "url": "https://github.com/prestodb/presto/pull/15005#discussion_r468842990", "createdAt": "2020-08-11T20:24:18Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlInvokedFunctionRowMapper.java", "diffHunk": "@@ -49,7 +50,7 @@ public SqlInvokedFunction map(ResultSet rs, StatementContext ctx)\n         String description = rs.getString(\"description\");\n         RoutineCharacteristics routineCharacteristics = ROUTINE_CHARACTERISTICS_CODEC.fromJson(rs.getString(\"routine_characteristics\"));\n         String body = rs.getString(\"body\");\n-        long version = rs.getLong(\"version\");\n+        String version = format(\"%d\", rs.getLong(\"version\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b2fb1940ba93f932e04c209f6398eb51bd756"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM5NTQxOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDo0NlrOG_H60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDo0NlrOG_H60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MzIxOQ==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/15005#discussion_r468843219", "createdAt": "2020-08-11T20:24:46Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java", "diffHunk": "@@ -261,6 +261,16 @@ private void insertSqlInvokedFunction(FunctionNamespaceDao functionNamespaceDao,\n                 function.getBody());\n     }\n \n+    private static long getLongVersion(SqlFunctionHandle functionHandle)\n+    {\n+        return Long.parseLong(functionHandle.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b2fb1940ba93f932e04c209f6398eb51bd756"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM5NTg1OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/InMemoryFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDo1M1rOG_H7DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNDo1M1rOG_H7DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MzI3Ng==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/15005#discussion_r468843276", "createdAt": "2020-08-11T20:24:53Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/InMemoryFunctionNamespaceManager.java", "diffHunk": "@@ -62,9 +62,9 @@ public synchronized void createFunction(SqlInvokedFunction function, boolean rep\n         SqlInvokedFunction replacedFunction = latestFunctions.get(functionId);\n         long version = 1;\n         if (replacedFunction != null) {\n-            version = replacedFunction.getRequiredVersion() + 1;\n+            version = Long.parseLong(replacedFunction.getRequiredVersion()) + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b2fb1940ba93f932e04c209f6398eb51bd756"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}