{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTMyOTc2", "number": 14398, "title": "Make PageFile format splittable", "bodyText": "A pagefile footer has two parts\n\nOffset of each stripe,  the first stripe always starts at offset 0\nSize of entire footer in Integer\n\nFor example, for a file with 3 stripes (100 bytes each),  footer will be\n\nLong integer array [0, 100, 200]\nsize = SIZE_OF_LONG * 3 + SIZE_OF_INT = 28 bytes\n\n== NO RELEASE NOTE ==", "createdAt": "2020-04-16T05:51:32Z", "url": "https://github.com/prestodb/presto/pull/14398", "merged": true, "mergeCommit": {"oid": "0a0c6ff04654b61140ae9a0aef2a04ac735c6a2a"}, "closed": true, "closedAt": "2020-04-28T10:43:00Z", "author": {"login": "viczhang861"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYH9-zABqjMyMzg2NTAxODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbzVbWAFqTQwMTIwMjc3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17e752b9d31eb87e1965219b9af51d27d358e790", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/17e752b9d31eb87e1965219b9af51d27d358e790", "committedDate": "2020-04-16T05:48:25Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "f079d7508affca544bc091aab76751488bbc58cd", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/f079d7508affca544bc091aab76751488bbc58cd", "committedDate": "2020-04-16T07:55:53Z", "message": "Support splittable read of PageFile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f079d7508affca544bc091aab76751488bbc58cd", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/f079d7508affca544bc091aab76751488bbc58cd", "committedDate": "2020-04-16T07:55:53Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/8853d6b6e3685884f51fec615b0b73688b9e18e1", "committedDate": "2020-04-16T18:28:59Z", "message": "Support splittable read of PageFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTE2ODQz", "url": "https://github.com/prestodb/presto/pull/14398#pullrequestreview-394916843", "createdAt": "2020-04-16T19:00:16Z", "commit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTowMDoxN1rOGGzHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozODoxNFrOGG0XWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MjA4NQ==", "bodyText": "nit: lets move it before the assignment", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409782085", "createdAt": "2020-04-16T19:00:17Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.stream.DataOutput;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.SliceOutput;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterOutput\n+        implements DataOutput\n+{\n+    private final List<Long> stripeOffsets;\n+\n+    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    {\n+        this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        checkArgument(!stripeOffsets.isEmpty(), \"stripeOffsets should at least contain offset 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MjIzOQ==", "bodyText": "public", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409782239", "createdAt": "2020-04-16T19:00:34Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.ByteBuffer.allocate;\n+import static java.nio.ByteOrder.LITTLE_ENDIAN;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader\n+{\n+    private long[] stripeOffsets;\n+    private ByteBuffer readBuffer = allocate(SIZE_OF_LONG);\n+\n+    PageFileFooterReader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MjU0OQ==", "bodyText": "Do we support empty files? Or do we want to consider them as invalid?", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409782549", "createdAt": "2020-04-16T19:01:06Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.ByteBuffer.allocate;\n+import static java.nio.ByteOrder.LITTLE_ENDIAN;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader\n+{\n+    private long[] stripeOffsets;\n+    private ByteBuffer readBuffer = allocate(SIZE_OF_LONG);\n+\n+    PageFileFooterReader(\n+            FSDataInputStream inputStream,\n+            long fileSize)\n+            throws IOException\n+    {\n+        requireNonNull(inputStream, \"inputStream is null\");\n+        if (fileSize >= SIZE_OF_LONG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTc3MA==", "bodyText": "It doesn't feel like we need a class to read a footer. How about we add a simple static method to the PageFilePageSource that does just that?", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409791770", "createdAt": "2020-04-16T19:18:10Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.ByteBuffer.allocate;\n+import static java.nio.ByteOrder.LITTLE_ENDIAN;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MjY3Ng==", "bodyText": "You can wrap the input stream with the InputStreamSliceInput and use the #getLong method that reads longs in LITTLE_ENDIAN", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409792676", "createdAt": "2020-04-16T19:19:46Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.ByteBuffer.allocate;\n+import static java.nio.ByteOrder.LITTLE_ENDIAN;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader\n+{\n+    private long[] stripeOffsets;\n+    private ByteBuffer readBuffer = allocate(SIZE_OF_LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NTg1Mw==", "bodyText": "What if there's no stripes? It feels like this should be initialized as empty.", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409795853", "createdAt": "2020-04-16T19:25:31Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -37,12 +38,14 @@\n     private long maxBufferedBytes;\n     private boolean closed;\n     private List<DataOutput> bufferedPages;\n+    private List<Long> stripeOffsets;\n \n     public PageWriter(DataSink dataSink, DataSize pageFileStripeMaxSize)\n     {\n         this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n         this.maxBufferedBytes = requireNonNull(pageFileStripeMaxSize, \"pageFileStripeMaxSize is null\").toBytes();\n         bufferedPages = new ArrayList<>();\n+        stripeOffsets = new ArrayList<>(ImmutableList.of(0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NjA2OA==", "bodyText": "And stripe offset should be added before adding a new stripe", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409796068", "createdAt": "2020-04-16T19:25:53Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -60,6 +63,7 @@ public void write(SerializedPage page)\n         long writtenSize = pageDataOutput.size();\n         if (maxBufferedBytes - bufferedBytes < writtenSize) {\n             dataSink.write(bufferedPages);\n+            addStripeOffset(bufferedBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NjM1Ng==", "bodyText": "As this will effectively add an offset for non existing stripe", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409796356", "createdAt": "2020-04-16T19:26:28Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -79,12 +83,20 @@ public void close()\n         closed = true;\n         if (!bufferedPages.isEmpty()) {\n             dataSink.write(bufferedPages);\n+            addStripeOffset(bufferedBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Nzc1Nw==", "bodyText": "I see what are you doing. You are treading the footer as a \"stripe\" adding the last offset as an offset of the footer. It would work, but it is a little confusing. How about we make it more explicit. Let's add offsets only for existing stripes, and then add the size of the footer in bytes as a last long of the file. Similar to ORC.", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409797757", "createdAt": "2020-04-16T19:29:06Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.stream.DataOutput;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.SliceOutput;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterOutput\n+        implements DataOutput\n+{\n+    private final List<Long> stripeOffsets;\n+\n+    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    {\n+        this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        checkArgument(!stripeOffsets.isEmpty(), \"stripeOffsets should at least contain offset 0\");\n+    }\n+\n+    @Override\n+    public long size()\n+    {\n+        return SIZE_OF_LONG * (stripeOffsets.size());\n+    }\n+\n+    @Override\n+    public void writeData(SliceOutput sliceOutput)\n+    {\n+        for (long offset : stripeOffsets) {\n+            sliceOutput.writeLong(offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5OTUxNg==", "bodyText": "Let's move the getReadStartAndLength  here", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409799516", "createdAt": "2020-04-16T19:32:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -45,13 +44,26 @@\n \n     public PageFilePageSource(\n             FSDataInputStream inputStream,\n+            long start,\n+            long splitLength,\n+            long fileSize,\n             PagesSerde pagesSerde,\n             List<HiveColumnHandle> columns)\n+            throws IOException\n     {\n         this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n-        pageReader = readPages(\n-                requireNonNull(pagesSerde, \"pagesSerde is null\"),\n-                new InputStreamSliceInput(inputStream));\n+        PageFileFooterReader pageFileFooterReader = new PageFileFooterReader(inputStream, fileSize);\n+\n+        long[] readStartAndLength = getReadStartAndLength(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwMDAxNA==", "bodyText": "Let's have a class instead of using an array. You can make it internal and private. e.g.:\nprivate static class OffsetAndLength {\nprivate final long offset;\nprivate final long length;\n...\n}", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409800014", "createdAt": "2020-04-16T19:33:22Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -45,13 +44,26 @@\n \n     public PageFilePageSource(\n             FSDataInputStream inputStream,\n+            long start,\n+            long splitLength,\n+            long fileSize,\n             PagesSerde pagesSerde,\n             List<HiveColumnHandle> columns)\n+            throws IOException\n     {\n         this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n-        pageReader = readPages(\n-                requireNonNull(pagesSerde, \"pagesSerde is null\"),\n-                new InputStreamSliceInput(inputStream));\n+        PageFileFooterReader pageFileFooterReader = new PageFileFooterReader(inputStream, fileSize);\n+\n+        long[] readStartAndLength = getReadStartAndLength(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwMTg2OA==", "bodyText": "Instead of keeping track of readBytes you can use ByteStreams#limit", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409801868", "createdAt": "2020-04-16T19:36:53Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageReader.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.slice.SliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readSerializedPage;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.serializedPageWrittenBytes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageReader\n+        implements Iterator<Page>\n+{\n+    private final PagesSerde pagesSerde;\n+    private final SliceInput input;\n+    private final long readLength;\n+    private long readBytes;\n+\n+    PageFilePageReader(\n+            long readStart,\n+            long readLength,\n+            FSDataInputStream inputStream,\n+            PagesSerde pagesSerde)\n+            throws IOException\n+    {\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+        this.readLength = readLength;\n+        requireNonNull(inputStream, \"inputStream is null\");\n+        inputStream.seek(readStart);\n+        this.input = new InputStreamSliceInput(inputStream);\n+    }\n+\n+    @Override\n+    public boolean hasNext()\n+    {\n+        return readBytes < readLength && input.isReadable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwMjU4NQ==", "bodyText": "How about passing an already positioned and limited input stream? (doing inputStream.seek(readStart); and ByteStreams#limit outside)? If you do that then most likely you won't even need this class.", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r409802585", "createdAt": "2020-04-16T19:38:14Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageReader.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.slice.SliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readSerializedPage;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.serializedPageWrittenBytes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageReader\n+        implements Iterator<Page>\n+{\n+    private final PagesSerde pagesSerde;\n+    private final SliceInput input;\n+    private final long readLength;\n+    private long readBytes;\n+\n+    PageFilePageReader(\n+            long readStart,\n+            long readLength,\n+            FSDataInputStream inputStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/8853d6b6e3685884f51fec615b0b73688b9e18e1", "committedDate": "2020-04-16T18:28:59Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "c5d8ee42ea1da990c0883d7cfdc7c4c46053440e", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c5d8ee42ea1da990c0883d7cfdc7c4c46053440e", "committedDate": "2020-04-17T02:26:08Z", "message": "Support splittable read of PageFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Nzg3NzM1", "url": "https://github.com/prestodb/presto/pull/14398#pullrequestreview-396787735", "createdAt": "2020-04-20T20:28:28Z", "commit": {"oid": "186cf1c263fe000b2c62369fe81c99377ba44dce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyODoyOFrOGImVeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTo0OTowMFrOGJMbbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2OTg4MA==", "bodyText": "To me the simplest format would be an offset and length. Why try to do fancy things to derive where things are and how long they are when space is not at a premium?", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r411669880", "createdAt": "2020-04-20T20:28:28Z", "author": {"login": "aweisberg"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.stream.DataOutput;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.SliceOutput;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterOutput\n+        implements DataOutput\n+{\n+    private final List<Long> stripeOffsets;\n+\n+    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    {\n+        this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        checkArgument(!stripeOffsets.isEmpty(), \"stripeOffsets should at least contain offset 0\");\n+    }\n+\n+    @Override\n+    public long size()\n+    {\n+        return SIZE_OF_LONG * (stripeOffsets.size());\n+    }\n+\n+    @Override\n+    public void writeData(SliceOutput sliceOutput)\n+    {\n+        for (long offset : stripeOffsets) {\n+            sliceOutput.writeLong(offset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Nzc1Nw=="}, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2ODczOQ==", "bodyText": "InputStreamSliceInput is inefficient about readBytes. We can eliminate some copying for free there. Depending on how often we use it in Presto it would be a tiny amount of free performance.\nIt copies to its internal buffer and then copies to the output buffer. It could copy directly from the wrapped input stream to the output byte array. It only needs to copy the initial bytes from its internal buffer.\nMight be worth a pass to make sure nothing else is following this pattern.", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r411768739", "createdAt": "2020-04-20T23:49:57Z", "author": {"login": "aweisberg"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageReader.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.slice.SliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readSerializedPage;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.serializedPageWrittenBytes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageReader\n+        implements Iterator<Page>\n+{\n+    private final PagesSerde pagesSerde;\n+    private final SliceInput input;\n+    private final long readLength;\n+    private long readBytes;\n+\n+    PageFilePageReader(\n+            long readStart,\n+            long readLength,\n+            FSDataInputStream inputStream,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwMjU4NQ=="}, "originalCommit": {"oid": "8853d6b6e3685884f51fec615b0b73688b9e18e1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MzEyMQ==", "bodyText": "What case is this? Is there a unit test for it (null, and empty?)", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r412293121", "createdAt": "2020-04-21T15:45:38Z", "author": {"login": "aweisberg"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -127,4 +139,58 @@ public void close()\n         inputStream.close();\n         closed = true;\n     }\n+\n+    private static OffsetAndLength getReadStartAndLength(\n+            long splitStart,\n+            long splitLength,\n+            long lastStripeEnd,\n+            List<Long> stripeOffsets)\n+    {\n+        if (stripeOffsets == null || stripeOffsets.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5d8ee42ea1da990c0883d7cfdc7c4c46053440e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5Mzk5Nw==", "bodyText": "This is more complicated then it needs to be. I think it would be simpler if we just had the footer include an offset and a length. I think file formats should only be fancy and concise when space is at a premium, otherwise they should minimize how complex they are to interpret.\nI just don't see the value in doing what ORC does. It's not the last word in file formats. Unless there is interoperability with the serialized form I think we should do something simple.", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r412293997", "createdAt": "2020-04-21T15:49:00Z", "author": {"login": "aweisberg"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -127,4 +139,58 @@ public void close()\n         inputStream.close();\n         closed = true;\n     }\n+\n+    private static OffsetAndLength getReadStartAndLength(\n+            long splitStart,\n+            long splitLength,\n+            long lastStripeEnd,\n+            List<Long> stripeOffsets)\n+    {\n+        if (stripeOffsets == null || stripeOffsets.isEmpty()) {\n+            return new OffsetAndLength(0, 0);\n+        }\n+\n+        long readStart = 0;\n+        long readEnd = 0;\n+        for (int i = 0; i < stripeOffsets.size(); ++i) {\n+            if (splitContainsStripe(splitStart, splitLength, stripeOffsets.get(i))) {\n+                readStart = Math.min(readStart, stripeOffsets.get(i));\n+                readEnd = Math.max(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5d8ee42ea1da990c0883d7cfdc7c4c46053440e"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5d8ee42ea1da990c0883d7cfdc7c4c46053440e", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c5d8ee42ea1da990c0883d7cfdc7c4c46053440e", "committedDate": "2020-04-17T02:26:08Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "53efae366ee4a0b87c00abfc4b34af5fb3ccfd52", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/53efae366ee4a0b87c00abfc4b34af5fb3ccfd52", "committedDate": "2020-04-23T22:32:24Z", "message": "Support splittable read of PageFile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53efae366ee4a0b87c00abfc4b34af5fb3ccfd52", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/53efae366ee4a0b87c00abfc4b34af5fb3ccfd52", "committedDate": "2020-04-23T22:32:24Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/bac28309c8ca340678fb7f9f0d355f7aff61d978", "committedDate": "2020-04-23T22:53:32Z", "message": "Support splittable read of PageFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjA2NTUw", "url": "https://github.com/prestodb/presto/pull/14398#pullrequestreview-400206550", "createdAt": "2020-04-24T19:13:27Z", "commit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToxMzoyN1rOGLloOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyNjoxNlrOGLmDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNDAyNQ==", "bodyText": "nit: Maybe flushStripe?", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r414804025", "createdAt": "2020-04-24T19:13:27Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -59,10 +63,7 @@ public void write(SerializedPage page)\n         PageDataOutput pageDataOutput = new PageDataOutput(page);\n         long writtenSize = pageDataOutput.size();\n         if (maxBufferedBytes - bufferedBytes < writtenSize) {\n-            dataSink.write(bufferedPages);\n-            bufferedPages.clear();\n-            bufferedBytes = 0;\n-            retainedBytes = 0;\n+            writeStripe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNTM3NA==", "bodyText": "I wonder if that should be an assertion", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r414805374", "createdAt": "2020-04-24T19:15:57Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.Slices;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static java.lang.Math.min;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader\n+{\n+    private static final int ESTIMATED_FOOTER_SIZE = 1024;\n+    private static final int FOOTER_METADATA_SIZE = SIZE_OF_INT;\n+\n+    private List<Long> stripeOffsets;\n+    private long footerOffset;\n+\n+    public PageFileFooterReader(\n+            FSDataInputStream inputStream,\n+            long fileSize)\n+            throws IOException\n+    {\n+        requireNonNull(inputStream, \"inputStream is null\");\n+        ImmutableList.Builder<Long> stripeOffsetsBuilder = ImmutableList.builder();\n+\n+        if (fileSize >= FOOTER_METADATA_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwOTYzNA==", "bodyText": "You can simply do Slices.wrappedBuffer(buffer, buffer.length - FOOTER_METADATA_SIZE, FOOTER_METADATA_SIZE).getInt(0)", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r414809634", "createdAt": "2020-04-24T19:23:57Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.Slices;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static java.lang.Math.min;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileFooterReader\n+{\n+    private static final int ESTIMATED_FOOTER_SIZE = 1024;\n+    private static final int FOOTER_METADATA_SIZE = SIZE_OF_INT;\n+\n+    private List<Long> stripeOffsets;\n+    private long footerOffset;\n+\n+    public PageFileFooterReader(\n+            FSDataInputStream inputStream,\n+            long fileSize)\n+            throws IOException\n+    {\n+        requireNonNull(inputStream, \"inputStream is null\");\n+        ImmutableList.Builder<Long> stripeOffsetsBuilder = ImmutableList.builder();\n+\n+        if (fileSize >= FOOTER_METADATA_SIZE) {\n+            byte[] buffer = new byte[toIntExact(min(fileSize, ESTIMATED_FOOTER_SIZE))];\n+            inputStream.readFully(fileSize - buffer.length, buffer);\n+            SliceInput sliceInput = Slices.wrappedBuffer(buffer, buffer.length - FOOTER_METADATA_SIZE, FOOTER_METADATA_SIZE).getInput();\n+            int footerSize = sliceInput.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDkzOQ==", "bodyText": "Yeah, it feels like max is extra here", "url": "https://github.com/prestodb/presto/pull/14398#discussion_r414810939", "createdAt": "2020-04-24T19:26:16Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -127,4 +140,63 @@ public void close()\n         inputStream.close();\n         closed = true;\n     }\n+\n+    private static OffsetAndLength getReadStartAndLength(\n+            long splitStart,\n+            long splitLength,\n+            long lastStripeEnd,\n+            List<Long> stripeOffsets)\n+    {\n+        checkArgument(stripeOffsets != null, \"stripeOffsets is null, failed to read page file footer.\");\n+        if (stripeOffsets.isEmpty()) {\n+            return new OffsetAndLength(0, 0);\n+        }\n+\n+        long readStart = 0;\n+        long readEnd = 0;\n+        boolean stripeFound = false;\n+        for (int i = 0; i < stripeOffsets.size(); ++i) {\n+            if (splitContainsStripe(splitStart, splitLength, stripeOffsets.get(i))) {\n+                if (!stripeFound) {\n+                    readStart = stripeOffsets.get(i);\n+                    stripeFound = true;\n+                }\n+                readEnd = Math.max(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9174670098cccb7f4d89660eb9197883b30cb1", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/ca9174670098cccb7f4d89660eb9197883b30cb1", "committedDate": "2020-04-25T00:57:30Z", "message": "Add footer to PageFile format\n\nA footer consists of two parts.\n - offset of each stripe's start location.\n - footer's total size in bytes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d2f6817ec7e6bc52d397a03b7bb5018d7ece81", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/a3d2f6817ec7e6bc52d397a03b7bb5018d7ece81", "committedDate": "2020-04-25T00:57:30Z", "message": "Create zero row file for PageFile format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "956e41911073f4b32c8e93b12fb98f3422b73f08", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/956e41911073f4b32c8e93b12fb98f3422b73f08", "committedDate": "2020-04-25T00:57:30Z", "message": "Support splittable read of PageFile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bac28309c8ca340678fb7f9f0d355f7aff61d978", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/bac28309c8ca340678fb7f9f0d355f7aff61d978", "committedDate": "2020-04-23T22:53:32Z", "message": "Support splittable read of PageFile"}, "afterCommit": {"oid": "956e41911073f4b32c8e93b12fb98f3422b73f08", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/956e41911073f4b32c8e93b12fb98f3422b73f08", "committedDate": "2020-04-25T00:57:30Z", "message": "Support splittable read of PageFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjAyNzc1", "url": "https://github.com/prestodb/presto/pull/14398#pullrequestreview-401202775", "createdAt": "2020-04-27T18:10:36Z", "commit": {"oid": "956e41911073f4b32c8e93b12fb98f3422b73f08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1863, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}