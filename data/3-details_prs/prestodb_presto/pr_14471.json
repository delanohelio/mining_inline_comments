{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTAxMzg2", "number": 14471, "title": "Simplify searched case translation", "bodyText": "Currently, SearchedCase is translated as nested IF expressions and even with 500 cases, we generate a complicated expression potentially causing stack overflows. So the fix is to translate searched case as:\nCASE TRUE WHEN p1 THEN r1 WHEN p2 THEN r2.. ELSE r_else END\nwhich will result in SWITCH operator which is flatter.\nAlso, fixed RowExpressionInterpreter to not call then part and else part unconditionally in interpreting IF.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Fixed translation of searched case expressions to be flat", "createdAt": "2020-05-04T18:06:44Z", "url": "https://github.com/prestodb/presto/pull/14471", "merged": true, "mergeCommit": {"oid": "b90ad7766311006042b2551ca8ff5d36d67f1d6d"}, "closed": true, "closedAt": "2020-05-19T21:44:25Z", "author": {"login": "kaikalur"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceEbk0gBqjMzMDEzMTc0ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchlhDBABqjMzNDE4OTAzOTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49c1a853bb085f6afcd4d4a118f50fddcfad7c79", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/49c1a853bb085f6afcd4d4a118f50fddcfad7c79", "committedDate": "2020-05-04T18:00:26Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "a796fde2615261822a8dc1d4e248adf763fc00e1", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/a796fde2615261822a8dc1d4e248adf763fc00e1", "committedDate": "2020-05-04T19:13:20Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a796fde2615261822a8dc1d4e248adf763fc00e1", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/a796fde2615261822a8dc1d4e248adf763fc00e1", "committedDate": "2020-05-04T19:13:20Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "a05a69d473db31187511b29726e038672ecaaf4e", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/a05a69d473db31187511b29726e038672ecaaf4e", "committedDate": "2020-05-04T19:49:36Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a05a69d473db31187511b29726e038672ecaaf4e", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/a05a69d473db31187511b29726e038672ecaaf4e", "committedDate": "2020-05-04T19:49:36Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "41f10faee2e6b103da07ad89bfa4368e29b2b224", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/41f10faee2e6b103da07ad89bfa4368e29b2b224", "committedDate": "2020-05-14T17:42:06Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41f10faee2e6b103da07ad89bfa4368e29b2b224", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/41f10faee2e6b103da07ad89bfa4368e29b2b224", "committedDate": "2020-05-14T17:42:06Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "f908f68e4ab648be28b7e9edb0555141aabc8c0c", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/f908f68e4ab648be28b7e9edb0555141aabc8c0c", "committedDate": "2020-05-14T18:02:44Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f908f68e4ab648be28b7e9edb0555141aabc8c0c", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/f908f68e4ab648be28b7e9edb0555141aabc8c0c", "committedDate": "2020-05-14T18:02:44Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "1cd40bd4fe3aafa664c281307859bf7aef458507", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/1cd40bd4fe3aafa664c281307859bf7aef458507", "committedDate": "2020-05-14T18:14:30Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cd40bd4fe3aafa664c281307859bf7aef458507", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/1cd40bd4fe3aafa664c281307859bf7aef458507", "committedDate": "2020-05-14T18:14:30Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "af1c2a67fef583d17b7db916f8778a68ff0196c8", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/af1c2a67fef583d17b7db916f8778a68ff0196c8", "committedDate": "2020-05-14T18:37:44Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af1c2a67fef583d17b7db916f8778a68ff0196c8", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/af1c2a67fef583d17b7db916f8778a68ff0196c8", "committedDate": "2020-05-14T18:37:44Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/b9375292036ca4c09b29e033cf40401cf2c036a2", "committedDate": "2020-05-14T19:25:09Z", "message": "Simplify searched case translation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTUxMTgz", "url": "https://github.com/prestodb/presto/pull/14471#pullrequestreview-412151183", "createdAt": "2020-05-14T20:15:50Z", "commit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNTo1MFrOGVsnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxODowMVrOGVsrfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDE3OQ==", "bodyText": "nit: static import ExpressionTreeUtils.isEqualComparisonExpression", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404179", "createdAt": "2020-05-14T20:15:50Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -267,7 +268,7 @@ protected RelationPlan visitJoin(Join node, Void context)\n             for (Expression conjunct : ExpressionUtils.extractConjuncts(criteria)) {\n                 conjunct = ExpressionUtils.normalize(conjunct);\n \n-                if (!isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n+                if (!ExpressionTreeUtils.isEqualComparisonExpression(conjunct) && node.getType() != INNER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxMQ==", "bodyText": "typo in \"espeically\"", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404611", "createdAt": "2020-05-14T20:16:40Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDgyOA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404828", "createdAt": "2020-05-14T20:17:06Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDg2Ng==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404866", "createdAt": "2020-05-14T20:17:10Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTE0MA==", "bodyText": "lhsArg -> leftArgument or something where you don't abbreviate", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405140", "createdAt": "2020-05-14T20:17:43Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTMwOA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405308", "createdAt": "2020-05-14T20:18:01Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                    RowExpression operand = process(predicate.getChildren().get(0), context);\n+                    if (lhsArg != null && !operand.equals(lhsArg)) {\n+                        lhsArg = null;\n+                        break;\n+                    }\n+                    lhsArg = operand;\n+                }\n+                else {\n+                    lhsArg = null;\n+                    break;\n+                }\n+            }\n \n-                    case when cond1 then value1\n-                         when cond2 then value2\n-                         when cond3 then value3\n-                         else value4\n-                    end\n+            if (lhsArg != null) {\n+                // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n+                ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n+                for (WhenClause whenClause : node.getWhenClauses()) {\n+                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/b9375292036ca4c09b29e033cf40401cf2c036a2", "committedDate": "2020-05-14T19:25:09Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "committedDate": "2020-05-15T00:13:20Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "committedDate": "2020-05-15T00:13:20Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "committedDate": "2020-05-15T02:59:39Z", "message": "Simplify searched case translation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzQ1NDc3", "url": "https://github.com/prestodb/presto/pull/14471#pullrequestreview-412345477", "createdAt": "2020-05-15T04:51:21Z", "commit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDo1MToyMVrOGV2Z7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTowNToxMlrOGV2nOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY1NA==", "bodyText": "Is this change necessary? I failed to spot logical difference between the two \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425564654", "createdAt": "2020-05-15T04:51:21Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -323,21 +323,20 @@ public Object visitSpecialForm(SpecialFormExpression node, Object context)\n                 case IF: {\n                     checkArgument(node.getArguments().size() == 3);\n                     Object condition = processWithExceptionHandling(node.getArguments().get(0), context);\n-                    Object trueValue = processWithExceptionHandling(node.getArguments().get(1), context);\n-                    Object falseValue = processWithExceptionHandling(node.getArguments().get(2), context);\n \n                     if (condition instanceof RowExpression) {\n                         return new SpecialFormExpression(\n                                 IF,\n                                 node.getType(),\n                                 toRowExpression(condition, node.getArguments().get(0)),\n-                                toRowExpression(trueValue, node.getArguments().get(1)),\n-                                toRowExpression(falseValue, node.getArguments().get(2)));\n+                                toRowExpression(processWithExceptionHandling(node.getArguments().get(1), context), node.getArguments().get(1)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NjQ0OQ==", "bodyText": "Remove \"So that better code is generated especially for tableau queries\", this is very specific to our workload and quite confusing for general community.", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425566449", "createdAt": "2020-05-15T04:59:01Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +529,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated especially for tableau queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NzkxMw==", "bodyText": "Why do we need to change this? Would this not trigger bytecode too large anymore?", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425567913", "createdAt": "2020-05-15T05:04:36Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8301,7 +8301,7 @@ public void testLastValueIgnoreNulls()\n     @Test\n     public void testLargeBytecode()\n     {\n-        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE\");\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE true \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODA1Nw==", "bodyText": "isn't it 500 cases?", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425568057", "createdAt": "2020-05-15T05:05:12Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8336,6 +8336,19 @@ public void testInComplexTypes()\n         assertQuery(query.toString(), \"SELECT NULL\");\n     }\n \n+    @Test\n+    public void testRowExpressionInterpreterStackOverflow()\n+    {\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT  CASE\");\n+        // Generate 100 cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76496f3623eafad6a82a5777f64fa8b58ef57026", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/76496f3623eafad6a82a5777f64fa8b58ef57026", "committedDate": "2020-05-15T17:27:55Z", "message": "Simplify searched case translation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "committedDate": "2020-05-15T02:59:39Z", "message": "Simplify searched case translation."}, "afterCommit": {"oid": "76496f3623eafad6a82a5777f64fa8b58ef57026", "author": {"user": {"login": "kaikalur", "name": "Sreeni Viswanadha"}}, "url": "https://github.com/prestodb/presto/commit/76496f3623eafad6a82a5777f64fa8b58ef57026", "committedDate": "2020-05-15T17:27:55Z", "message": "Simplify searched case translation."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1558, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}