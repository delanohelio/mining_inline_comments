{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTIyMzk1", "number": 14786, "title": "Implement additional serialization methods for Spark shuffle", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-07-06T17:58:21Z", "url": "https://github.com/prestodb/presto/pull/14786", "merged": true, "mergeCommit": {"oid": "86a3cb0a1cfd593347c8ca38782bfd2b4815d736"}, "closed": true, "closedAt": "2020-07-09T05:06:21Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyskBkAFqTQ0NDI1NTM2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczHCjwgBqjM1Mjc4Nzk0NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjU1MzY0", "url": "https://github.com/prestodb/presto/pull/14786#pullrequestreview-444255364", "createdAt": "2020-07-07T21:15:15Z", "commit": {"oid": "8a3571d55d04115b82cb1448bffbf8688f24a343"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToxNToxNVrOGuP3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToxNzoyMlrOGuP7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE0NzYxNw==", "bodyText": "nit: should this have @Override?", "url": "https://github.com/prestodb/presto/pull/14786#discussion_r451147617", "createdAt": "2020-07-07T21:15:15Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkShuffleSerializer.java", "diffHunk": "@@ -78,6 +83,14 @@ public DeserializationStream deserializeStream(InputStream inputStream)\n             throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n         }\n \n+        public <T> T deserialize(byte[] array, int offset, int length, ClassTag<T> classTag)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3571d55d04115b82cb1448bffbf8688f24a343"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE0ODE3Nw==", "bodyText": "curious: when the PrestoSparkMutableRow will be backed by ByteBuffer and when it will be backed by byte[]? -- maybe add a comment to explain it?", "url": "https://github.com/prestodb/presto/pull/14786#discussion_r451148177", "createdAt": "2020-07-07T21:16:23Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -96,8 +96,16 @@ public Page getNextPage()\n                 Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n                 if (currentIterator.hasNext()) {\n                     PrestoSparkMutableRow row = currentIterator.next()._2;\n-                    ByteBuffer buffer = row.getBuffer();\n-                    output.writeBytes(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());\n+                    if (row.getBuffer() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3571d55d04115b82cb1448bffbf8688f24a343"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE0ODcxMg==", "bodyText": "when the mutable row is backed by ByteBuffer, will length be set correctly?", "url": "https://github.com/prestodb/presto/pull/14786#discussion_r451148712", "createdAt": "2020-07-07T21:17:22Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkMutableRow.java", "diffHunk": "@@ -38,6 +43,39 @@ public void setBuffer(ByteBuffer buffer)\n         this.buffer = buffer;\n     }\n \n+    public byte[] getArray()\n+    {\n+        return array;\n+    }\n+\n+    public PrestoSparkMutableRow setArray(byte[] array)\n+    {\n+        this.array = array;\n+        return this;\n+    }\n+\n+    public int getOffset()\n+    {\n+        return offset;\n+    }\n+\n+    public PrestoSparkMutableRow setOffset(int offset)\n+    {\n+        this.offset = offset;\n+        return this;\n+    }\n+\n+    public int getLength()\n+    {\n+        return length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3571d55d04115b82cb1448bffbf8688f24a343"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f21fcbfc167bad7eaf76d16f2cf178c7fe131dc4", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/f21fcbfc167bad7eaf76d16f2cf178c7fe131dc4", "committedDate": "2020-07-09T04:02:18Z", "message": "Implement additional serialization methods for Spark shuffle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a3571d55d04115b82cb1448bffbf8688f24a343", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/8a3571d55d04115b82cb1448bffbf8688f24a343", "committedDate": "2020-07-06T17:52:37Z", "message": "Implement additional serialization methods for Spark shuffle"}, "afterCommit": {"oid": "f21fcbfc167bad7eaf76d16f2cf178c7fe131dc4", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/f21fcbfc167bad7eaf76d16f2cf178c7fe131dc4", "committedDate": "2020-07-09T04:02:18Z", "message": "Implement additional serialization methods for Spark shuffle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1198, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}