{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjExMzMx", "number": 14915, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyNzoyMlrOEaHn5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTo1Njo1OFrOFJm-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODIzMzM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyNzoyMlrOHDV_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozMTowMVrOHUZdIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODIwMQ==", "bodyText": "when would this e true.  this doesn't seem related to sort nodes.  Maybe it should be its own rule to replace subplans that would return zero rows with an empty values.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r473268201", "createdAt": "2020-08-19T19:27:22Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.sort;\n+\n+public class RemoveRedundantSort\n+        implements Rule<SortNode>\n+{\n+    private static final Pattern<SortNode> PATTERN = sort();\n+\n+    @Override\n+    public Pattern<SortNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(SortNode node, Captures captures, Context context)\n+    {\n+        if (isAtMost(node.getSource(), context.getLookup(), 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjQ3NQ==", "bodyText": "So the new rule is EvaluateZeroCount which evaluates zeroSample, zero-topN, zero-limit, and zero-distinctLimit count.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r487452475", "createdAt": "2020-09-12T21:55:22Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.sort;\n+\n+public class RemoveRedundantSort\n+        implements Rule<SortNode>\n+{\n+    private static final Pattern<SortNode> PATTERN = sort();\n+\n+    @Override\n+    public Pattern<SortNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(SortNode node, Captures captures, Context context)\n+    {\n+        if (isAtMost(node.getSource(), context.getLookup(), 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODIwMQ=="}, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDYyNA==", "bodyText": "don't need this if block anymore.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r491150624", "createdAt": "2020-09-18T19:31:01Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.sort;\n+\n+public class RemoveRedundantSort\n+        implements Rule<SortNode>\n+{\n+    private static final Pattern<SortNode> PATTERN = sort();\n+\n+    @Override\n+    public Pattern<SortNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(SortNode node, Captures captures, Context context)\n+    {\n+        if (isAtMost(node.getSource(), context.getLookup(), 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODIwMQ=="}, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODIzNDkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyNzo1MFrOHDWA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMjowMDoxMVrOHQ3wuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODQ0MQ==", "bodyText": "if we change the isAtMost(0) rule to be separate, then this should be isAtMostScalar()", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r473268441", "createdAt": "2020-08-19T19:27:50Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.sort;\n+\n+public class RemoveRedundantSort\n+        implements Rule<SortNode>\n+{\n+    private static final Pattern<SortNode> PATTERN = sort();\n+\n+    @Override\n+    public Pattern<SortNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(SortNode node, Captures captures, Context context)\n+    {\n+        if (isAtMost(node.getSource(), context.getLookup(), 0)) {\n+            return Result.ofPlanNode(new ValuesNode(node.getId(), node.getOutputVariables(), ImmutableList.of()));\n+        }\n+        if (isScalar(node.getSource(), context.getLookup())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1Mjg1OQ==", "bodyText": "Since the new rule does not implement a particular planNode, my take is to remain this code as it is to lookup from the tree and can be verified by testForZeroCardinality", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r487452859", "createdAt": "2020-09-12T22:00:11Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantSort.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.sort;\n+\n+public class RemoveRedundantSort\n+        implements Rule<SortNode>\n+{\n+    private static final Pattern<SortNode> PATTERN = sort();\n+\n+    @Override\n+    public Pattern<SortNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(SortNode node, Captures captures, Context context)\n+    {\n+        if (isAtMost(node.getSource(), context.getLookup(), 0)) {\n+            return Result.ofPlanNode(new ValuesNode(node.getId(), node.getOutputVariables(), ImmutableList.of()));\n+        }\n+        if (isScalar(node.getSource(), context.getLookup())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODQ0MQ=="}, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODIzNjc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyODozMFrOHDWB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMjowMDoyM1rOHQ3wyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODczMg==", "bodyText": "same comment as above regarding zero and scalar", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r473268732", "createdAt": "2020-08-19T19:28:30Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.topN;\n+\n+/**\n+ * Replace TopN node\n+ * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n+ * 2. With its source when the subplan produces only one row\n+ * 3. With a empty ValuesNode when N is 0\n+ */\n+public class RemoveRedundantTopN\n+        implements Rule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode node, Captures captures, Context context)\n+    {\n+        if (node.getCount() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1Mjg3NQ==", "bodyText": "this check is moved to the new rule now", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r487452875", "createdAt": "2020-09-12T22:00:23Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.topN;\n+\n+/**\n+ * Replace TopN node\n+ * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n+ * 2. With its source when the subplan produces only one row\n+ * 3. With a empty ValuesNode when N is 0\n+ */\n+public class RemoveRedundantTopN\n+        implements Rule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode node, Captures captures, Context context)\n+    {\n+        if (node.getCount() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODczMg=="}, "originalCommit": {"oid": "b77e70e7e891e7f7096018a678785b448f59a855"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzI4NjIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantLimit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozMDoxOFrOHUZb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDozNzoyNlrOHXxH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDMwOA==", "bodyText": "you don't need this anymore.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r491150308", "createdAt": "2020-09-18T19:30:18Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantLimit.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.LimitNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n+\n+/**\n+ * Remove Limit node when the subplan is guaranteed to produce fewer rows than the limit and\n+ * replace the plan with empty values if the limit count is 0.\n+ */\n+public class RemoveRedundantLimit\n+        implements Rule<LimitNode>\n+{\n+    // Applies to both LimitNode with ties and LimitNode without ties.\n+    private static final Pattern<LimitNode> PATTERN = limit();\n+\n+    @Override\n+    public Pattern<LimitNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(LimitNode limit, Captures captures, Context context)\n+    {\n+        if (limit.getCount() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NDEyNg==", "bodyText": "yes, this check not needed, removed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r494684126", "createdAt": "2020-09-25T00:37:26Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantLimit.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.LimitNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n+\n+/**\n+ * Remove Limit node when the subplan is guaranteed to produce fewer rows than the limit and\n+ * replace the plan with empty values if the limit count is 0.\n+ */\n+public class RemoveRedundantLimit\n+        implements Rule<LimitNode>\n+{\n+    // Applies to both LimitNode with ties and LimitNode without ties.\n+    private static final Pattern<LimitNode> PATTERN = limit();\n+\n+    @Override\n+    public Pattern<LimitNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(LimitNode limit, Captures captures, Context context)\n+    {\n+        if (limit.getCount() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDMwOA=="}, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzI5MDQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozMTozN1rOHUZeWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozMTozN1rOHUZeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDkzNg==", "bodyText": "use isAtMostScalar()", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r491150936", "createdAt": "2020-09-18T19:31:37Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.topN;\n+\n+/**\n+ * Replace TopN node\n+ * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n+ * 2. With its source when the subplan produces only one row\n+ * 3. With a empty ValuesNode when N is 0\n+ */\n+public class RemoveRedundantTopN\n+        implements Rule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode node, Captures captures, Context context)\n+    {\n+        if (isScalar(node.getSource(), context.getLookup())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMwNjgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/EvaluateZeroCount.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozNzozOFrOHUZoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo1MzozOFrOHXxXqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzQ2NQ==", "bodyText": "Don't use PlanOptimizer for new optimizer rules.  Instead (and instead of deprecating the EvaluateZeroLimit and EvaluateZeroSample rule), create a new Iterative Rule for each of these other cases that you are adding.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r491153465", "createdAt": "2020-09-18T19:37:38Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/EvaluateZeroCount.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.facebook.presto.sql.planner.optimizations;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.spi.WarningCollector;\n+import com.facebook.presto.spi.plan.*;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.plan.SampleNode;\n+import com.facebook.presto.sql.planner.plan.SimplePlanRewriter;\n+import com.google.common.collect.ImmutableList;\n+\n+public class EvaluateZeroCount\n+    implements PlanOptimizer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4ODE3MA==", "bodyText": "ok will create new iterative rules for each case. So is it recommended not to create new PlanOplanizer for new rule? or is there any limitation on using planOptimizer?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r494688170", "createdAt": "2020-09-25T00:53:38Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/EvaluateZeroCount.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.facebook.presto.sql.planner.optimizations;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.spi.WarningCollector;\n+import com.facebook.presto.spi.plan.*;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.plan.SampleNode;\n+import com.facebook.presto.sql.planner.plan.SimplePlanRewriter;\n+import com.google.common.collect.ImmutableList;\n+\n+public class EvaluateZeroCount\n+    implements PlanOptimizer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzQ2NQ=="}, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMxMzk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTo0MDoxNFrOHUZsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTo0NjoyOFrOHXyJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDUyOQ==", "bodyText": "update the comment to remove bullet 3 since it's now a part of a different optimizer rule and update bullet 2 to say at most one row.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r491154529", "createdAt": "2020-09-18T19:40:14Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.topN;\n+\n+/**\n+ * Replace TopN node\n+ * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n+ * 2. With its source when the subplan produces only one row\n+ * 3. With a empty ValuesNode when N is 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcwMDg3Nw==", "bodyText": "fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r494700877", "createdAt": "2020-09-25T01:46:28Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.TopNNode;\n+import com.facebook.presto.spi.plan.ValuesNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.facebook.presto.sql.planner.plan.SortNode;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static com.facebook.presto.sql.planner.plan.Patterns.topN;\n+\n+/**\n+ * Replace TopN node\n+ * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n+ * 2. With its source when the subplan produces only one row\n+ * 3. With a empty ValuesNode when N is 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDUyOQ=="}, "originalCommit": {"oid": "f2a76ff6257544cc47e56184bfd2d231d200870c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI5MjgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMToxMlrOHf-IMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMToxMlrOHf-IMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NTgxMQ==", "bodyText": "we don't use .* imports.  Can you change this back to explicitly listing all the optimizers", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r503285811", "createdAt": "2020-10-12T13:11:12Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -109,27 +113,7 @@\n import com.facebook.presto.sql.planner.iterative.rule.TransformUncorrelatedInPredicateSubqueryToSemiJoin;\n import com.facebook.presto.sql.planner.iterative.rule.TransformUncorrelatedLateralToJoin;\n import com.facebook.presto.sql.planner.iterative.rule.TranslateExpressions;\n-import com.facebook.presto.sql.planner.optimizations.AddExchanges;\n-import com.facebook.presto.sql.planner.optimizations.AddLocalExchanges;\n-import com.facebook.presto.sql.planner.optimizations.ApplyConnectorOptimization;\n-import com.facebook.presto.sql.planner.optimizations.CheckSubqueryNodesAreRewritten;\n-import com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.ImplementIntersectAndExceptAsUnion;\n-import com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.LimitPushDown;\n-import com.facebook.presto.sql.planner.optimizations.MetadataDeleteOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.MetadataQueryOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations;\n-import com.facebook.presto.sql.planner.optimizations.PlanOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.PredicatePushDown;\n-import com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs;\n-import com.facebook.presto.sql.planner.optimizations.PushdownSubfields;\n-import com.facebook.presto.sql.planner.optimizations.ReplicateSemiJoinInDelete;\n-import com.facebook.presto.sql.planner.optimizations.SetFlatteningOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.StatsRecordingPlanOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.TransformQuantifiedComparisonApplyToLateralJoin;\n-import com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences;\n-import com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown;\n+import com.facebook.presto.sql.planner.optimizations.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126729c3227522f1f5ab238466fce3760dfd00ed"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODAzNDk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroLimit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODozNjowMFrOHg0Ziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODozNjowMFrOHg0Ziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3NDk4Nw==", "bodyText": "shouldn't be deprecated", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504174987", "createdAt": "2020-10-13T18:36:00Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroLimit.java", "diffHunk": "@@ -23,6 +23,7 @@\n import static com.facebook.presto.sql.planner.plan.Patterns.Limit.count;\n import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n \n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126729c3227522f1f5ab238466fce3760dfd00ed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODAzNTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODozNjowOFrOHg0Z7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODozNjowOFrOHg0Z7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3NTA4NQ==", "bodyText": "shouldn't be deprecated", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504175085", "createdAt": "2020-10-13T18:36:08Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "diffHunk": "@@ -26,6 +26,7 @@\n /**\n  * Replaces 0% sample node with empty values node.\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126729c3227522f1f5ab238466fce3760dfd00ed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MzgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroDistinctLimit.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MToyNlrOHg0lIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToyOToyMVrOHqDjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzk1Mg==", "bodyText": "deleting the newline should be part of the commit that adds this class", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504177952", "createdAt": "2020-10-13T18:41:26Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroDistinctLimit.java", "diffHunk": "@@ -1,4 +1,3 @@\n-\n /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNDMyNQ==", "bodyText": "my apology could you please elaborate a little bit? I am unsure what you mean by this \"deleting this newline?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r513134325", "createdAt": "2020-10-28T01:59:08Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroDistinctLimit.java", "diffHunk": "@@ -1,4 +1,3 @@\n-\n /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzk1Mg=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MTg3Nw==", "bodyText": "If you look at the changes commit by commit, you'll see that the commit \"Avoid planning unnecessary sort\" has a change that removes an extra line at the start of EvaluteZeroLimit.java.  This should be done in the previous commit where the class is added (i.e. don't have the extra line in the first place)", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r513561877", "createdAt": "2020-10-28T15:57:09Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroDistinctLimit.java", "diffHunk": "@@ -1,4 +1,3 @@\n-\n /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzk1Mg=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2MDM3OA==", "bodyText": "understood, fixed now in first commit", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r513860378", "createdAt": "2020-10-29T01:29:21Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroDistinctLimit.java", "diffHunk": "@@ -1,4 +1,3 @@\n-\n /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzk1Mg=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1NTQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTo1MlrOHg0mAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDozMjozOVrOIE_ePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3ODE3OQ==", "bodyText": "this change should be part of the commit that adds this class", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504178179", "createdAt": "2020-10-13T18:41:52Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -25,9 +25,8 @@\n \n /**\n  * Replace TopN node\n- * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n- * 2. With its source when the subplan produces only one row\n- * 3. With a empty ValuesNode when N is 0\n+ * 1. With its source when the subplan is at most one row", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNTE0OA==", "bodyText": "ok will move to the 2nd commit, along with its corresponding test", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542105148", "createdAt": "2020-12-14T04:32:39Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveRedundantTopN.java", "diffHunk": "@@ -25,9 +25,8 @@\n \n /**\n  * Replace TopN node\n- * 1. With a Sort node when the subplan is guaranteed to produce fewer rows than N\n- * 2. With its source when the subplan produces only one row\n- * 3. With a empty ValuesNode when N is 0\n+ * 1. With its source when the subplan is at most one row", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3ODE3OQ=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA2MzcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantTopN.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NDoxOVrOHg0rLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NDoxOVrOHg0rLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTUwMQ==", "bodyText": "what's with this todo", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504179501", "createdAt": "2020-10-13T18:44:19Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantTopN.java", "diffHunk": "@@ -81,6 +82,7 @@ public void testZeroTopN()\n                                                 ImmutableList.of(\n                                                         constantExpressions(BIGINT, 1L, 10L),\n                                                         constantExpressions(BIGINT, 2L, 11L))))))\n+                // TODO: verify contents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA2NDE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantTopN.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NDoyNlrOHg0rdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjowNTo1NFrOHpXWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTU3Mg==", "bodyText": "why is this commented out?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504179572", "createdAt": "2020-10-13T18:44:26Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantTopN.java", "diffHunk": "@@ -70,6 +70,7 @@ public void test()\n     public void testZeroTopN()\n     {\n         tester().assertThat(new EvaluateZeroTopN())\n+                //tester().assertThat(new RemoveRedundantTopN())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjI1Ng==", "bodyText": "comment out the incorrect class to test, remove comment", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r513136256", "createdAt": "2020-10-28T02:05:54Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantTopN.java", "diffHunk": "@@ -70,6 +70,7 @@ public void test()\n     public void testZeroTopN()\n     {\n         tester().assertThat(new EvaluateZeroTopN())\n+                //tester().assertThat(new RemoveRedundantTopN())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTU3Mg=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA2NjU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NTowOVrOHg0s6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjowODoxNFrOHpXY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTk0NQ==", "bodyText": "can you share more about this change? Also, it should be in the previous commit.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504179945", "createdAt": "2020-10-13T18:45:09Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroLimit.java", "diffHunk": "@@ -33,8 +33,7 @@ public void testDoesNotFire()\n                 .on(p ->\n                         p.limit(\n                                 1,\n-                                p.values(p.variable(\"a\"))))\n-                .doesNotFire();\n+                                p.values(p.variable(\"a\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjg1Ng==", "bodyText": "this was left out unintensionally. added back.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r513136856", "createdAt": "2020-10-28T02:08:14Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroLimit.java", "diffHunk": "@@ -33,8 +33,7 @@ public void testDoesNotFire()\n                 .on(p ->\n                         p.limit(\n                                 1,\n-                                p.values(p.variable(\"a\"))))\n-                .doesNotFire();\n+                                p.values(p.variable(\"a\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTk0NQ=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA2OTM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NTo1M1rOHg0ufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoyMDowMVrOIFxEtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDM0OA==", "bodyText": "This belongs in the previous commit.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504180348", "createdAt": "2020-10-13T18:45:53Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroSample.java", "diffHunk": "@@ -35,8 +35,7 @@ public void testDoesNotFire()\n                         p.sample(\n                                 0.15,\n                                 Type.BERNOULLI,\n-                                p.values(p.variable(\"a\"))))\n-                .doesNotFire();\n+                                p.values(p.variable(\"a\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNzgxMw==", "bodyText": "fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542917813", "createdAt": "2020-12-14T23:20:01Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestEvaluateZeroSample.java", "diffHunk": "@@ -35,8 +35,7 @@ public void testDoesNotFire()\n                         p.sample(\n                                 0.15,\n                                 Type.BERNOULLI,\n-                                p.values(p.variable(\"a\"))))\n-                .doesNotFire();\n+                                p.values(p.variable(\"a\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDM0OA=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA3MDU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0NjoxNFrOHg0vRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDozODozOVrOIE_kcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDU0OQ==", "bodyText": "this should be in the previous commit and in the evaluateZeroLimit test", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r504180549", "createdAt": "2020-10-13T18:46:14Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantLimit.java", "diffHunk": "@@ -79,7 +79,7 @@ public void testForZeroLimit()\n     @Test\n     public void doesNotFire()\n     {\n-        tester().assertThat(new RemoveRedundantLimit())\n+        tester().assertThat(new EvaluateZeroLimit())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNjczNw==", "bodyText": "yes fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542106737", "createdAt": "2020-12-14T04:38:39Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestRemoveRedundantLimit.java", "diffHunk": "@@ -79,7 +79,7 @@ public void testForZeroLimit()\n     @Test\n     public void doesNotFire()\n     {\n-        tester().assertThat(new RemoveRedundantLimit())\n+        tester().assertThat(new EvaluateZeroLimit())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDU0OQ=="}, "originalCommit": {"oid": "eb2f4e4c9034128c654a95c1e232cba52559d411"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc2MzU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxNDo1M1rOIDRPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDozNzozNVrOIE_jgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5OTA0OQ==", "bodyText": "nit: remove this change.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540299049", "createdAt": "2020-12-10T16:14:53Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "diffHunk": "@@ -26,6 +26,7 @@\n /**\n  * Replaces 0% sample node with empty values node.\n  */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581957b1074062b96e651a18a0719b29446e1f9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNDcyMA==", "bodyText": "ok", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542104720", "createdAt": "2020-12-14T04:31:21Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "diffHunk": "@@ -26,6 +26,7 @@\n /**\n  * Replaces 0% sample node with empty values node.\n  */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5OTA0OQ=="}, "originalCommit": {"oid": "581957b1074062b96e651a18a0719b29446e1f9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNjQ5OQ==", "bodyText": "removed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542106499", "createdAt": "2020-12-14T04:37:35Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EvaluateZeroSample.java", "diffHunk": "@@ -26,6 +26,7 @@\n /**\n  * Replaces 0% sample node with empty values node.\n  */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5OTA0OQ=="}, "originalCommit": {"oid": "581957b1074062b96e651a18a0719b29446e1f9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc3NTE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxNzowNFrOIDRV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToyODo1OFrOIFAdDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMDc1OQ==", "bodyText": "the string should be skip_redundant_sort to match the config property and variable name.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540300759", "createdAt": "2020-12-10T16:17:04Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -170,6 +170,7 @@\n     public static final String INLINE_SQL_FUNCTIONS = \"inline_sql_functions\";\n     public static final String REMOTE_FUNCTIONS_ENABLED = \"remote_functions_enabled\";\n     public static final String CHECK_ACCESS_CONTROL_ON_UTILIZED_COLUMNS_ONLY = \"check_access_control_on_utilized_columns_only\";\n+    public static final String SKIP_REDUNDANT_SORT = \"remove_redundant_sort\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMTIzMA==", "bodyText": "yes they should be the same,fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542121230", "createdAt": "2020-12-14T05:28:58Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -170,6 +170,7 @@\n     public static final String INLINE_SQL_FUNCTIONS = \"inline_sql_functions\";\n     public static final String REMOTE_FUNCTIONS_ENABLED = \"remote_functions_enabled\";\n     public static final String CHECK_ACCESS_CONTROL_ON_UTILIZED_COLUMNS_ONLY = \"check_access_control_on_utilized_columns_only\";\n+    public static final String SKIP_REDUNDANT_SORT = \"remove_redundant_sort\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMDc1OQ=="}, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc4NzU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxODo1OVrOIDRdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTozNToyNlrOIFAlKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMjc5OA==", "bodyText": "this should go in the previous commit (undoing the accidental formatting changes you made there).", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540302798", "createdAt": "2020-12-10T16:18:59Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -186,6 +186,20 @@ public PlanOptimizers(\n                 taskCountEstimator);\n     }\n \n+    @PostConstruct\n+    public void initialize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMzMwNg==", "bodyText": "there's an issue to move these two methods, fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542123306", "createdAt": "2020-12-14T05:35:26Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -186,6 +186,20 @@ public PlanOptimizers(\n                 taskCountEstimator);\n     }\n \n+    @PostConstruct\n+    public void initialize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMjc5OA=="}, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc5MTQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/Patterns.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxOTo0MFrOIDRf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTozNjozNFrOIFAmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMzM0OA==", "bodyText": "this belongs in the previous commit where DistinctLimit was introduced.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540303348", "createdAt": "2020-12-10T16:19:40Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/Patterns.java", "diffHunk": "@@ -261,6 +253,14 @@ private Patterns() {}\n         }\n     }\n \n+    public static class DistinctLimit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMzY2MA==", "bodyText": "fixed", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542123660", "createdAt": "2020-12-14T05:36:34Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/Patterns.java", "diffHunk": "@@ -261,6 +253,14 @@ private Patterns() {}\n         }\n     }\n \n+    public static class DistinctLimit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMzM0OA=="}, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc5NTk5OnYy", "diffSide": "LEFT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyMDozM1rOIDRinw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTo0MDowMlrOIFArFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNDAzMQ==", "bodyText": "why is this test removed?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540304031", "createdAt": "2020-12-10T16:20:33Z", "author": {"login": "rschlussel"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "diffHunk": "@@ -241,12 +240,6 @@ public void testUndistributedOrderBy()\n         assertQueryOrdered(undistributedOrderBy, \"SELECT orderstatus FROM orders ORDER BY orderstatus\");\n     }\n \n-    @Test\n-    public void testOrderLimitCompaction()\n-    {\n-        assertQueryOrdered(\"SELECT * FROM (SELECT * FROM orders ORDER BY orderkey) LIMIT 10\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyNDgyMA==", "bodyText": "actually this is working as design because ORDER BY in a subquery can be ignored. Rows in a table (or in a subquery in the FROM clause) do not come in any specific order, only when ORDER BY ... LIMIT changes the result, the set of rows.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542124820", "createdAt": "2020-12-14T05:40:02Z", "author": {"login": "fgwang7w"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "diffHunk": "@@ -241,12 +240,6 @@ public void testUndistributedOrderBy()\n         assertQueryOrdered(undistributedOrderBy, \"SELECT orderstatus FROM orders ORDER BY orderstatus\");\n     }\n \n-    @Test\n-    public void testOrderLimitCompaction()\n-    {\n-        assertQueryOrdered(\"SELECT * FROM (SELECT * FROM orders ORDER BY orderkey) LIMIT 10\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNDAzMQ=="}, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjgwMDY3OnYy", "diffSide": "LEFT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyMTozMVrOIDRllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTozOTo1NFrOIFAq5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNDc5MA==", "bodyText": "why is this test removed?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r540304790", "createdAt": "2020-12-10T16:21:31Z", "author": {"login": "rschlussel"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "diffHunk": "@@ -80,7 +80,6 @@ public void testOrderByWithOutputColumnReference()\n         assertQueryOrdered(\"SELECT max(a) FROM (values (1,2), (2,1)) t(a,b) GROUP BY b ORDER BY b\", \"VALUES 2, 1\");\n         assertQueryOrdered(\"SELECT max(a) FROM (values (1,2), (2,1)) t(a,b) GROUP BY t.b ORDER BY t.b*1.0\", \"VALUES 2, 1\");\n         assertQueryOrdered(\"SELECT -(a+b) AS a, -(a+b) AS b, a+b FROM (values (41, 42), (-41, -42)) t(a,b) GROUP BY a+b ORDER BY a+b\", \"VALUES (-83, -83, 83), (83, 83, -83)\");\n-        assertQueryOrdered(\"SELECT c.a FROM (SELECT CAST(ROW(-a.a) AS ROW(a BIGINT)) a FROM (VALUES (2), (1)) a(a) GROUP BY a.a ORDER BY a.a) t(c)\", \"VALUES -2, -1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyNDc3Mg==", "bodyText": "The purpose of the 2nd commit is to make the subquery's ORDER BY not preserved. The ordering only makes sense on the outermost query now. The original design of this cherry-pick states the same concept.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r542124772", "createdAt": "2020-12-14T05:39:54Z", "author": {"login": "fgwang7w"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "diffHunk": "@@ -80,7 +80,6 @@ public void testOrderByWithOutputColumnReference()\n         assertQueryOrdered(\"SELECT max(a) FROM (values (1,2), (2,1)) t(a,b) GROUP BY b ORDER BY b\", \"VALUES 2, 1\");\n         assertQueryOrdered(\"SELECT max(a) FROM (values (1,2), (2,1)) t(a,b) GROUP BY t.b ORDER BY t.b*1.0\", \"VALUES 2, 1\");\n         assertQueryOrdered(\"SELECT -(a+b) AS a, -(a+b) AS b, a+b FROM (values (41, 42), (-41, -42)) t(a,b) GROUP BY a+b ORDER BY a+b\", \"VALUES (-83, -83, 83), (83, 83, -83)\");\n-        assertQueryOrdered(\"SELECT c.a FROM (SELECT CAST(ROW(-a.a) AS ROW(a BIGINT)) a FROM (VALUES (2), (1)) a(a) GROUP BY a.a ORDER BY a.a) t(c)\", \"VALUES -2, -1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNDc5MA=="}, "originalCommit": {"oid": "b871fe8268f411eb5e12541ad84dfc31faff4d0d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjE0NjM3OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozNDoyMVrOIKr1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNDowNDozMFrOILw8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NDg2Nw==", "bodyText": "It seems in this case the limit is also redundant.  We're just not smart enough to remove it.  Maybe instead have 2 rows in the values node.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r548074867", "createdAt": "2020-12-23T17:34:21Z", "author": {"login": "rschlussel"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -3389,9 +3389,12 @@ public void testCorrelatedScalarSubqueries()\n         // two level of nesting\n         assertQuery(\"SELECT * FROM nation n WHERE 2 = (SELECT (SELECT 2 * n.nationkey))\");\n \n+        // redundant LIMIT in subquery\n+        assertQuery(\"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key LIMIT 1) FROM (values 7) t(corr_key)\");\n+\n         // explicit LIMIT in subquery\n         assertQueryFails(\n-                \"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key LIMIT 1) FROM (values 7) t(corr_key)\",\n+                \"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key GROUP BY value LIMIT 1) FROM (values 7) t(corr_key)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0f787f631f4d4f0b46d932967bdb9c57024c6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNzEyNA==", "bodyText": "or I can change it to an upper bound of LIMIT, then it will make sense,but this is a good catch, we should remove limit if there's a enforceSingleRow like count(*) to make the optimizer smarter. I propose we fix it in a separate PR so that TransformCorrelatedSingleRowSubqueryToProject can take it into account", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r549207124", "createdAt": "2020-12-28T04:04:30Z", "author": {"login": "fgwang7w"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -3389,9 +3389,12 @@ public void testCorrelatedScalarSubqueries()\n         // two level of nesting\n         assertQuery(\"SELECT * FROM nation n WHERE 2 = (SELECT (SELECT 2 * n.nationkey))\");\n \n+        // redundant LIMIT in subquery\n+        assertQuery(\"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key LIMIT 1) FROM (values 7) t(corr_key)\");\n+\n         // explicit LIMIT in subquery\n         assertQueryFails(\n-                \"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key LIMIT 1) FROM (values 7) t(corr_key)\",\n+                \"SELECT (SELECT count(*) FROM (VALUES (7,1)) t(orderkey, value) WHERE orderkey = corr_key GROUP BY value LIMIT 1) FROM (values 7) t(corr_key)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NDg2Nw=="}, "originalCommit": {"oid": "5e0f787f631f4d4f0b46d932967bdb9c57024c6b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjE2MzY2OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/com/facebook/presto/sql/query/TestSubqueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozNzozOVrOIKsAPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNDoxNDo0MFrOILxBAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzYyOA==", "bodyText": "I think limit here was incidental and we still want this test for unsupported subqueries to ensure they throw proper errors.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r548077628", "createdAt": "2020-12-23T17:37:39Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/query/TestSubqueries.java", "diffHunk": "@@ -86,16 +86,16 @@ public void testCorrelatedExistsSubqueriesWithOrPredicateAndNull()\n     }\n \n     @Test\n-    public void testUnsupportedSubqueriesWithCoercions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0f787f631f4d4f0b46d932967bdb9c57024c6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwODMyMA==", "bodyText": "then I will add a seperate tc with group by a limit 1 to guard this sanity test", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r549208320", "createdAt": "2020-12-28T04:14:40Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/query/TestSubqueries.java", "diffHunk": "@@ -86,16 +86,16 @@ public void testCorrelatedExistsSubqueriesWithOrPredicateAndNull()\n     }\n \n     @Test\n-    public void testUnsupportedSubqueriesWithCoercions()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzYyOA=="}, "originalCommit": {"oid": "5e0f787f631f4d4f0b46d932967bdb9c57024c6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjIwMjIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTo1Njo1OFrOIMA9mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTo0NjowOFrOIMCmNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ2OTU5NQ==", "bodyText": "I'm a bit confused why this is here. Shouldn't this be done in the analyzer and result stored somewhere? If not, we should do that.", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r549469595", "createdAt": "2020-12-28T19:56:58Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1122,12 +1127,22 @@ protected Scope visitQuerySpecification(QuerySpecification node, Optional<Scope>\n             List<Expression> orderByExpressions = emptyList();\n             Optional<Scope> orderByScope = Optional.empty();\n             if (node.getOrderBy().isPresent()) {\n-                orderByScope = Optional.of(computeAndAssignOrderByScope(node.getOrderBy().get(), sourceScope, outputScope));\n-                orderByExpressions = analyzeOrderBy(node, orderByScope.get(), outputExpressions);\n-            }\n-            else {\n-                analysis.setOrderByExpressions(node, emptyList());\n+                if (node.getSelect().isDistinct()) {\n+                    verifySelectDistinct(node, outputExpressions);\n+                }\n+\n+                OrderBy orderBy = node.getOrderBy().get();\n+                orderByScope = Optional.of(computeAndAssignOrderByScope(orderBy, sourceScope, outputScope));\n+\n+                orderByExpressions = analyzeOrderBy(node, orderBy.getSortItems(), orderByScope.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf0c8535a0ba0683dec654b2e205d842900764a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDAyOQ==", "bodyText": "this is the analyzer?", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r549494029", "createdAt": "2020-12-28T21:36:00Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1122,12 +1127,22 @@ protected Scope visitQuerySpecification(QuerySpecification node, Optional<Scope>\n             List<Expression> orderByExpressions = emptyList();\n             Optional<Scope> orderByScope = Optional.empty();\n             if (node.getOrderBy().isPresent()) {\n-                orderByScope = Optional.of(computeAndAssignOrderByScope(node.getOrderBy().get(), sourceScope, outputScope));\n-                orderByExpressions = analyzeOrderBy(node, orderByScope.get(), outputExpressions);\n-            }\n-            else {\n-                analysis.setOrderByExpressions(node, emptyList());\n+                if (node.getSelect().isDistinct()) {\n+                    verifySelectDistinct(node, outputExpressions);\n+                }\n+\n+                OrderBy orderBy = node.getOrderBy().get();\n+                orderByScope = Optional.of(computeAndAssignOrderByScope(orderBy, sourceScope, outputScope));\n+\n+                orderByExpressions = analyzeOrderBy(node, orderBy.getSortItems(), orderByScope.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ2OTU5NQ=="}, "originalCommit": {"oid": "4bf0c8535a0ba0683dec654b2e205d842900764a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjM3Mw==", "bodyText": "this is the analyzer?\n\nOops - I think I got lost in the see of files in this large PR :)", "url": "https://github.com/prestodb/presto/pull/14915#discussion_r549496373", "createdAt": "2020-12-28T21:46:08Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1122,12 +1127,22 @@ protected Scope visitQuerySpecification(QuerySpecification node, Optional<Scope>\n             List<Expression> orderByExpressions = emptyList();\n             Optional<Scope> orderByScope = Optional.empty();\n             if (node.getOrderBy().isPresent()) {\n-                orderByScope = Optional.of(computeAndAssignOrderByScope(node.getOrderBy().get(), sourceScope, outputScope));\n-                orderByExpressions = analyzeOrderBy(node, orderByScope.get(), outputExpressions);\n-            }\n-            else {\n-                analysis.setOrderByExpressions(node, emptyList());\n+                if (node.getSelect().isDistinct()) {\n+                    verifySelectDistinct(node, outputExpressions);\n+                }\n+\n+                OrderBy orderBy = node.getOrderBy().get();\n+                orderByScope = Optional.of(computeAndAssignOrderByScope(orderBy, sourceScope, outputScope));\n+\n+                orderByExpressions = analyzeOrderBy(node, orderBy.getSortItems(), orderByScope.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ2OTU5NQ=="}, "originalCommit": {"oid": "4bf0c8535a0ba0683dec654b2e205d842900764a"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2202, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}