{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODM2Mzg3", "number": 14762, "title": "Add support for DWRF encryption without compression", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-07-01T17:23:37Z", "url": "https://github.com/prestodb/presto/pull/14762", "merged": true, "mergeCommit": {"oid": "54f7e416ac9f92b5e2e9dfdc6fa4de1176946faa"}, "closed": true, "closedAt": "2020-07-06T22:52:18Z", "author": {"login": "rschlussel"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwt5lEAFqTQ0MTA3MTYxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyXj1PgFqTQ0MzM5Nzc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDcxNjE3", "url": "https://github.com/prestodb/presto/pull/14762#pullrequestreview-441071617", "createdAt": "2020-07-01T17:37:27Z", "commit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozNzoyN1rOGrvVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0MjozNFrOGrvf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNzUyNg==", "bodyText": "this should still be true, right?", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448517526", "createdAt": "2020-07-01T17:37:27Z", "author": {"login": "zzhao0"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java", "diffHunk": "@@ -442,46 +439,46 @@ private void flushBufferToOutputStream()\n \n     private void writeChunkToOutputStream(byte[] chunk, int offset, int length)\n     {\n-        if (compressor == null) {\n+        if (compressor == null && !dwrfEncryptor.isPresent()) {\n             compressedOutputStream.write(chunk, offset, length);\n             return;\n         }\n \n-        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxOTQ5NQ==", "bodyText": "need to add check that the length after encryption does not exceed what the header can hold, ie 2^23", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448519495", "createdAt": "2020-07-01T17:41:19Z", "author": {"login": "zzhao0"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java", "diffHunk": "@@ -442,46 +439,46 @@ private void flushBufferToOutputStream()\n \n     private void writeChunkToOutputStream(byte[] chunk, int offset, int length)\n     {\n-        if (compressor == null) {\n+        if (compressor == null && !dwrfEncryptor.isPresent()) {\n             compressedOutputStream.write(chunk, offset, length);\n             return;\n         }\n \n-        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");\n-\n-        int minCompressionBufferSize = compressor.maxCompressedLength(length);\n-        if (compressionBuffer.length < minCompressionBufferSize) {\n-            compressionBuffer = new byte[minCompressionBufferSize];\n-        }\n-\n-        int compressedSize = compressor.compress(chunk, offset, length, compressionBuffer, 0, compressionBuffer.length);\n-        if (compressedSize < length) {\n-            if (dwrfEncryptor.isPresent()) {\n-                compressionBuffer = dwrfEncryptor.get().encrypt(compressionBuffer, 0, compressedSize);\n-                compressedSize = compressionBuffer.length;\n+        if (compressor != null) {\n+            int minCompressionBufferSize = compressor.maxCompressedLength(length);\n+            if (compressionBuffer.length < minCompressionBufferSize) {\n+                compressionBuffer = new byte[minCompressionBufferSize];\n             }\n-            int chunkHeader = (compressedSize << 1);\n-            compressedOutputStream.write(chunkHeader & 0x00_00FF);\n-            compressedOutputStream.write((chunkHeader & 0x00_FF00) >> 8);\n-            compressedOutputStream.write((chunkHeader & 0xFF_0000) >> 16);\n-            compressedOutputStream.writeBytes(compressionBuffer, 0, compressedSize);\n-        }\n-        else {\n-            if (dwrfEncryptor.isPresent()) {\n-                chunk = dwrfEncryptor.get().encrypt(chunk, 0, length);\n-                length = chunk.length;\n+            int compressedSize = compressor.compress(chunk, offset, length, compressionBuffer, 0, compressionBuffer.length);\n+            if (compressedSize < length) {\n+                if (dwrfEncryptor.isPresent()) {\n+                    compressionBuffer = dwrfEncryptor.get().encrypt(compressionBuffer, 0, compressedSize);\n+                    compressedSize = compressionBuffer.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDE1Nw==", "bodyText": "update the exception message to reflect encryption?", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448520157", "createdAt": "2020-07-01T17:42:34Z", "author": {"login": "zzhao0"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -208,7 +207,7 @@ public boolean seekToCheckpoint(long checkpoint)\n         int decompressedOffset = decodeDecompressedOffset(checkpoint);\n         boolean discardedBuffer;\n         if (compressedBlockOffset != currentCompressedBlockOffset) {\n-            if (!decompressor.isPresent()) {\n+            if (!decompressor.isPresent() && !dwrfDecryptor.isPresent()) {\n                 throw new OrcCorruptionException(orcDataSourceId, \"Reset stream has a compressed block offset but stream is not compressed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDc5NzAw", "url": "https://github.com/prestodb/presto/pull/14762#pullrequestreview-441079700", "createdAt": "2020-07-01T17:49:53Z", "commit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a80e97256d07653693d145ae53e798885f29184", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/2a80e97256d07653693d145ae53e798885f29184", "committedDate": "2020-07-06T18:59:37Z", "message": "Add support for DWRF encryption without compression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65de5256245c8022c1295ed841d76ec6fd7cb543", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/65de5256245c8022c1295ed841d76ec6fd7cb543", "committedDate": "2020-07-01T17:17:21Z", "message": "Add support for DWRF encryption without compression"}, "afterCommit": {"oid": "2a80e97256d07653693d145ae53e798885f29184", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/2a80e97256d07653693d145ae53e798885f29184", "committedDate": "2020-07-06T18:59:37Z", "message": "Add support for DWRF encryption without compression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzk3Nzkw", "url": "https://github.com/prestodb/presto/pull/14762#pullrequestreview-443397790", "createdAt": "2020-07-06T20:49:15Z", "commit": {"oid": "2a80e97256d07653693d145ae53e798885f29184"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1159, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}