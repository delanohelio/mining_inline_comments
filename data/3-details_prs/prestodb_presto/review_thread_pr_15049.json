{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODQzNTQw", "number": 15049, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1MjowOFrOEaIG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODowNFrOEcsvuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODMxMjg4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1MjowOFrOHDWxIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1Nzo0OFrOHE2RyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ==", "bodyText": "The members of OrcReaderOptions are not all meant for the StreamReaders. The zstdJniDecompressionEnabled is for the decompressor in OrcReader. In line 261-263, the 3 relevant members of the options are passed to the OrcRecordReader and StreamReaders already. Now you pass the whole option again. Can you take a look at how legacyMapSubscript is passed to the SelectiveXXXStreamReader's and use that way?", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r473280801", "createdAt": "2020-08-19T19:52:08Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -266,7 +266,8 @@ public OrcBatchRecordReader createBatchRecordReader(\n                 writeValidation,\n                 initialBatchSize,\n                 stripeMetadataSource,\n-                cacheable);\n+                cacheable,\n+                orcReaderOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c021236330250861b08e8a75a83c8539a81791af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2MjgzNQ==", "bodyText": "@yingsu00 My intention was to avoid passing yet another boolean flag through multiple layers as I usually find it error prone: parameters of the same type may be passed in the wrong order and compiler won't complain. You're right that not all members OrcReaderOptions are required for StreamReaders (interface segregation principle violation) but I thought OrcReaderOptions is small enough to not be a concern for now. To make it a bit more attractive, I removed maxMergeDistance/tinyStripeThreshold/maxBlockSize ctor parameters in favor of OrcReaderOptions :)\nBtw I don't have strong opinion so I'm fine to use boolean flag instead if it's your preference.", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r473362835", "createdAt": "2020-08-19T21:56:19Z", "author": {"login": "borovsky-d"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -266,7 +266,8 @@ public OrcBatchRecordReader createBatchRecordReader(\n                 writeValidation,\n                 initialBatchSize,\n                 stripeMetadataSource,\n-                cacheable);\n+                cacheable,\n+                orcReaderOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ=="}, "originalCommit": {"oid": "c021236330250861b08e8a75a83c8539a81791af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NTY0MA==", "bodyText": "Partially agree with @yingsu00. Class like OrcReader could take orcReaderOptions. But not for OrcStreamReader where most of the flags are not used. If you want, feel free to create a new class OrcStreamReaderOptions", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474845640", "createdAt": "2020-08-21T17:57:48Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -266,7 +266,8 @@ public OrcBatchRecordReader createBatchRecordReader(\n                 writeValidation,\n                 initialBatchSize,\n                 stripeMetadataSource,\n-                cacheable);\n+                cacheable,\n+                orcReaderOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ=="}, "originalCommit": {"oid": "c021236330250861b08e8a75a83c8539a81791af"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA3MDYzOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1ODo0NFrOHE2Tlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1ODo0NFrOHE2Tlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NjEwMg==", "bodyText": "Let's put mapNullKeysEnabled right after hiveStorageTimeZone to make sure the flags are gathered together. Or gather them into OrcStreamReaderOptions as suggested above.", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474846102", "createdAt": "2020-08-21T17:58:44Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java", "diffHunk": "@@ -25,7 +26,7 @@ private BatchStreamReaders()\n     {\n     }\n \n-    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcAggregatedMemoryContext systemMemoryContext)\n+    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcAggregatedMemoryContext systemMemoryContext, OrcReaderOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced1819883832f027699fd3d23146fa3076b1b95"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA4MTg5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowMjoxOVrOHE2agQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowMjoxOVrOHE2agQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0Nzg3Mw==", "bodyText": "move this logic out of this function. Maybe have an if/else on if (mapNullKeysEnabled) on where you create keyValueBlock .", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474847873", "createdAt": "2020-08-21T18:02:19Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java", "diffHunk": "@@ -159,21 +166,21 @@ public Block readBlock()\n             values = valueType.createBlockBuilder(null, 1).build();\n         }\n \n-        Block[] keyValueBlock = createKeyValueBlock(nextBatchSize, keys, values, offsetVector);\n+        Block[] keyValueBlock = createKeyValueBlock(nextBatchSize, keys, values, offsetVector, options.mapNullKeysEnabled());\n \n         convertLengthVectorToOffsetVector(offsetVector);\n \n-        Block block = mapType.createBlockFromKeyValue(nextBatchSize, Optional.ofNullable(nullVector), offsetVector, keyValueBlock[0], keyValueBlock[1]);\n+        Block block = type.createBlockFromKeyValue(nextBatchSize, Optional.ofNullable(nullVector), offsetVector, keyValueBlock[0], keyValueBlock[1]);\n \n         readOffset = 0;\n         nextBatchSize = 0;\n \n         return block;\n     }\n \n-    private static Block[] createKeyValueBlock(int positionCount, Block keys, Block values, int[] lengths)\n+    private static Block[] createKeyValueBlock(int positionCount, Block keys, Block values, int[] lengths, boolean mapNullKeysEnabled)\n     {\n-        if (!hasNull(keys)) {\n+        if (mapNullKeysEnabled || !hasNull(keys)) {\n             return new Block[] {keys, values};\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced1819883832f027699fd3d23146fa3076b1b95"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA5OTA4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowODozMFrOHE2lDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowODozMFrOHE2lDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1MDU3NQ==", "bodyText": "static. Same for the two functions below", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474850575", "createdAt": "2020-08-21T18:08:30Z", "author": {"login": "highker"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcBatchRecordReader reader = createCustomOrcRecordReader(tempFile, ORC, OrcPredicate.TRUE, mapType, INITIAL_BATCH_SIZE, false, mapNullKeysEnabled)) {\n+                int batchSize = reader.nextBatch();\n+                assertEquals(batchSize, 1);\n+\n+                assertEquals(readMap(reader.readBlock(0), 0), expectedToRead);\n+\n+                assertEquals(reader.nextBatch(), -1);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithSelectiveReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcSelectiveRecordReader reader = createCustomOrcSelectiveRecordReader(\n+                    tempFile,\n+                    ORC,\n+                    OrcPredicate.TRUE,\n+                    mapType,\n+                    INITIAL_BATCH_SIZE,\n+                    mapNullKeysEnabled)) {\n+                assertEquals(readMap(reader.getNextPage().getBlock(0).getLoadedBlock(), 0), expectedToRead);\n+\n+                assertNull(reader.getNextPage());\n+            }\n+        }\n+    }\n+\n+    private HashMap<Long, Long> generateMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced1819883832f027699fd3d23146fa3076b1b95"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDk3MTU2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0NjowOFrOHGuYQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0NjowOFrOHGuYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMzM3Nw==", "bodyText": "nit : Map<Long, Long> map = generateMap();", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r476813377", "createdAt": "2020-08-25T22:46:08Z", "author": {"login": "bhhari"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96b277b4b0086683fdece5cf05317eefe933acb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDk4MjYwOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0ODo1MVrOHGufSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0ODo1MVrOHGufSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNTE3OQ==", "bodyText": "just use Map", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r476815179", "createdAt": "2020-08-25T22:48:51Z", "author": {"login": "bhhari"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcBatchRecordReader reader = createCustomOrcRecordReader(tempFile, ORC, OrcPredicate.TRUE, mapType, INITIAL_BATCH_SIZE, false, mapNullKeysEnabled)) {\n+                int batchSize = reader.nextBatch();\n+                assertEquals(batchSize, 1);\n+\n+                assertEquals(readMap(reader.readBlock(0), 0), expectedToRead);\n+\n+                assertEquals(reader.nextBatch(), -1);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithSelectiveReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcSelectiveRecordReader reader = createCustomOrcSelectiveRecordReader(\n+                    tempFile,\n+                    ORC,\n+                    OrcPredicate.TRUE,\n+                    mapType,\n+                    INITIAL_BATCH_SIZE,\n+                    mapNullKeysEnabled)) {\n+                assertEquals(readMap(reader.getNextPage().getBlock(0).getLoadedBlock(), 0), expectedToRead);\n+\n+                assertNull(reader.getNextPage());\n+            }\n+        }\n+    }\n+\n+    private static HashMap<Long, Long> generateMap()\n+    {\n+        HashMap<Long, Long> map = new HashMap<>();\n+\n+        for (long i = 0; i < 10; i++) {\n+            map.put(i, i + 1);\n+            map.put(-i, null);\n+        }\n+        map.put(null, 0L);\n+        return map;\n+    }\n+\n+    private static HashMap<Long, Long> readMap(Block block, int rowId)\n+    {\n+        ColumnarMap columnarMap = ColumnarMap.toColumnarMap(block);\n+        assertFalse(columnarMap.isNull(rowId));\n+\n+        Block keysBlock = columnarMap.getKeysBlock();\n+        Block valuesBlock = columnarMap.getValuesBlock();\n+\n+        HashMap<Long, Long> actual = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96b277b4b0086683fdece5cf05317eefe933acb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI4MjAxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNjozN1rOHHYtnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNjozN1rOHHYtnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNjk3Mg==", "bodyText": "legacyMapSubscript goes on a new line", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r477506972", "createdAt": "2020-08-26T18:36:37Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java", "diffHunk": "@@ -183,7 +180,7 @@ public OrcSelectiveRecordReader(\n                         orcDataSource,\n                         types,\n                         hiveStorageTimeZone,\n-                        legacyMapSubscript,\n+                        options, legacyMapSubscript,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI4Njk3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODowNFrOHHYwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODowNFrOHHYwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzc0NA==", "bodyText": "Why primeNumbers? The content is true and false.", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r477507744", "createdAt": "2020-08-26T18:38:04Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3768, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}