{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDAzODc1", "number": 14631, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowMTo0OVrOEEXKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNzo0NVrOEHIqCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDA5MjY1OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowMTo0OVrOGh737g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo0NTozMFrOGh9r2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzE2Ng==", "bodyText": "Is Type json serializable?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438237166", "createdAt": "2020-06-10T16:01:49Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +35,27 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2Njg0Mw==", "bodyText": "Yes, it is involved in TaskInfo update", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438266843", "createdAt": "2020-06-10T16:45:30Z", "author": {"login": "viczhang861"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +35,27 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzE2Ng=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDA5Njc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowMjo1MVrOGh76rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyMDo1M1rOGh-9RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzg2OQ==", "bodyText": "Can we reuse the implementation from InterpretedHashGeneration?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438237869", "createdAt": "2020-06-10T16:02:51Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -86,6 +92,17 @@ public static int getHiveBucket(int bucketCount, List<TypeInfo> types, Object[]\n         return (getBucketHashCode(types, values) & Integer.MAX_VALUE) % bucketCount;\n     }\n \n+    private static int getHashCode(List<Type> types, Page page, int position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NzY4NQ==", "bodyText": "No,  HiveBucketFunction uses Page with only bucket columns, InterpretedHashGeneration is used for the raw Page with both bucket column and other column", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438287685", "createdAt": "2020-06-10T17:20:53Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -86,6 +92,17 @@ public static int getHiveBucket(int bucketCount, List<TypeInfo> types, Object[]\n         return (getBucketHashCode(types, values) & Integer.MAX_VALUE) % bucketCount;\n     }\n \n+    private static int getHashCode(List<Type> types, Page page, int position)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzg2OQ=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDExMjIyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowNjozOFrOGh8Egw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo1MDo1M1rOGh94Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MDM4Nw==", "bodyText": "inputColumns has the information about the types. You can extract it from there.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438240387", "createdAt": "2020-06-10T16:06:38Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -143,10 +143,15 @@ public HivePageSink(\n             bucketColumns = bucketProperty.get().getBucketedBy().stream()\n                     .mapToInt(dataColumnNameToIdMap::get)\n                     .toArray();\n-            List<HiveType> bucketColumnTypes = bucketProperty.get().getBucketedBy().stream()\n-                    .map(dataColumnNameToTypeMap::get)\n-                    .collect(toList());\n-            bucketFunction = new HiveBucketFunction(bucketCount, bucketColumnTypes);\n+            if (bucketProperty.get().getTypes().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3MDAzMA==", "bodyText": "inputColumns is of type HiveColumnHandle, which may be HIVE_BINARY type that we translated to, as a result,  original type is lost. I have tried to add type to HiveColumnHandle but there are many dependencies, it is better to use HiveBucketProperty", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438270030", "createdAt": "2020-06-10T16:50:53Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -143,10 +143,15 @@ public HivePageSink(\n             bucketColumns = bucketProperty.get().getBucketedBy().stream()\n                     .mapToInt(dataColumnNameToIdMap::get)\n                     .toArray();\n-            List<HiveType> bucketColumnTypes = bucketProperty.get().getBucketedBy().stream()\n-                    .map(dataColumnNameToTypeMap::get)\n-                    .collect(toList());\n-            bucketFunction = new HiveBucketFunction(bucketCount, bucketColumnTypes);\n+            if (bucketProperty.get().getTypes().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MDM4Nw=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDEyMjczOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowODozMFrOGh8LYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowMToyNVrOGh-RKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MjE0Nw==", "bodyText": "Let's not store the list of types here. Let's use a flag instead, say usePrestoHiveBucketFunction", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438242147", "createdAt": "2020-06-10T16:08:30Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +35,27 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NjM5NA==", "bodyText": "Type is required to calculate bucket number, hash function requires type", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438276394", "createdAt": "2020-06-10T17:01:25Z", "author": {"login": "viczhang861"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +35,27 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MjE0Nw=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDEzMTUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowOTo1OVrOGh8QtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjowOTo1OVrOGh8QtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MzUwOQ==", "bodyText": "Let's make this constructor private and have to separate static factory method createHiveCompatibleBucketFunction, createPrestoNativeBucketFunction", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438243509", "createdAt": "2020-06-10T16:09:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -13,34 +13,61 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.GenericInternalException;\n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n     {\n+        this(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public HiveBucketFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDEzNjIzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMDo0MlrOGh8TfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMDo0MlrOGh8TfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NDIyMA==", "bodyText": "Let's inline it. also hiveTypes is null", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438244220", "createdAt": "2020-06-10T16:10:42Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -13,34 +13,61 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.GenericInternalException;\n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n     {\n+        this(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            Optional<List<HiveType>> hiveTypes,\n+            Optional<List<Type>> types)\n+    {\n+        requireNonNull(types, \"hiveType is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDEzNzIwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMDo1MFrOGh8UHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMDo1MFrOGh8UHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NDM4Mw==", "bodyText": "toImmutableList", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438244383", "createdAt": "2020-06-10T16:10:50Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -13,34 +13,61 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.GenericInternalException;\n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n     {\n+        this(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            Optional<List<HiveType>> hiveTypes,\n+            Optional<List<Type>> types)\n+    {\n+        requireNonNull(types, \"hiveType is null\");\n+        this.types = requireNonNull(types, \"type is null\");\n+        checkArgument(hiveTypes.isPresent() || types.isPresent(), \"either hiveTypes or types should be present\");\n         this.bucketCount = bucketCount;\n-        this.typeInfos = requireNonNull(hiveTypes, \"hiveTypes is null\").stream()\n+        this.typeInfos = hiveTypes.map(list -> list.stream()\n                 .map(HiveType::getTypeInfo)\n-                .collect(Collectors.toList());\n+                .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDEzODM3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMTowNFrOGh8U6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMTowNFrOGh8U6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NDU4Nw==", "bodyText": "They also shouldn't be both present", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438244587", "createdAt": "2020-06-10T16:11:04Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -13,34 +13,61 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.GenericInternalException;\n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n     {\n+        this(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            Optional<List<HiveType>> hiveTypes,\n+            Optional<List<Type>> types)\n+    {\n+        requireNonNull(types, \"hiveType is null\");\n+        this.types = requireNonNull(types, \"type is null\");\n+        checkArgument(hiveTypes.isPresent() || types.isPresent(), \"either hiveTypes or types should be present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDE0MTM4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMTozNFrOGh8W5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMTozNFrOGh8W5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NTA5NQ==", "bodyText": "VerifyException", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438245095", "createdAt": "2020-06-10T16:11:34Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -13,34 +13,61 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.GenericInternalException;\n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n     {\n+        this(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public HiveBucketFunction(\n+            int bucketCount,\n+            Optional<List<HiveType>> hiveTypes,\n+            Optional<List<Type>> types)\n+    {\n+        requireNonNull(types, \"hiveType is null\");\n+        this.types = requireNonNull(types, \"type is null\");\n+        checkArgument(hiveTypes.isPresent() || types.isPresent(), \"either hiveTypes or types should be present\");\n         this.bucketCount = bucketCount;\n-        this.typeInfos = requireNonNull(hiveTypes, \"hiveTypes is null\").stream()\n+        this.typeInfos = hiveTypes.map(list -> list.stream()\n                 .map(HiveType::getTypeInfo)\n-                .collect(Collectors.toList());\n+                .collect(Collectors.toList()));\n     }\n \n     @Override\n     public int getBucket(Page page, int position)\n     {\n-        return HiveBucketing.getHiveBucket(bucketCount, typeInfos, page, position);\n+        if (typeInfos.isPresent()) {\n+            return getHiveBucket(bucketCount, typeInfos.get(), page, position);\n+        }\n+        else if (types.isPresent()) {\n+            return HiveBucketing.getBucket(bucketCount, types.get(), page, position);\n+        }\n+        else {\n+            throw new GenericInternalException(\"either hiveTypes or types should be present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDE0NTE4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxMjoxM1rOGh8ZVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo1Njo0OFrOGh-FuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NTcxNg==", "bodyText": "This can use partitionChannelTypes", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438245716", "createdAt": "2020-06-10T16:12:13Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +49,7 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        return new HiveBucketFunction(bucketCount, handle.getHiveTypes(), handle.getTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3MzQ2NA==", "bodyText": "If we use partitionChannelTypes,  it means always usePrestoNativeBucketFunction is true, let's keep the behavior same as before.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438273464", "createdAt": "2020-06-10T16:56:48Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +49,7 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        return new HiveBucketFunction(bucketCount, handle.getHiveTypes(), handle.getTypes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NTcxNg=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDE1NDc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragmenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjoxNDoyMVrOGh8fYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxNzoxMFrOGh-0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NzI2Ng==", "bodyText": "Why this change has to be changed?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438247266", "createdAt": "2020-06-10T16:14:21Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragmenter.java", "diffHunk": "@@ -644,12 +643,11 @@ private TableScanNode createTemporaryTableScan(\n             TableLayoutResult selectedLayout = metadata.getLayout(session, tableHandle, Constraint.alwaysTrue(), Optional.of(outputColumnHandles));\n             verify(selectedLayout.getUnenforcedConstraint().equals(TupleDomain.all()), \"temporary table layout shouldn't enforce any constraints\");\n             verify(!selectedLayout.getLayout().getColumns().isPresent(), \"temporary table layout must provide all the columns\");\n-            TablePartitioning expectedPartitioning = new TablePartitioning(\n-                    expectedPartitioningMetadata.getPartitioningHandle(),\n-                    expectedPartitioningMetadata.getPartitionColumns().stream()\n-                            .map(columnHandles::get)\n-                            .collect(toImmutableList()));\n-            verify(selectedLayout.getLayout().getTablePartitioning().equals(Optional.of(expectedPartitioning)), \"invalid temporary table partitioning\");\n+            List<ColumnHandle> expectedPartitioningColumns = expectedPartitioningMetadata.getPartitionColumns().stream()\n+                    .map(columnHandles::get)\n+                    .collect(toImmutableList());\n+            verify(selectedLayout.getLayout().getTablePartitioning().get().getPartitioningColumns()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NTQ2NQ==", "bodyText": "In HiveMetadata::getPartitioningHandleForExchange(ConnectorSession session, int partitionCount, List<Type> partitionTypes),  I think we rewrite HivePartitioningHandle to use Type instead of TypeInfo", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r438285465", "createdAt": "2020-06-10T17:17:10Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragmenter.java", "diffHunk": "@@ -644,12 +643,11 @@ private TableScanNode createTemporaryTableScan(\n             TableLayoutResult selectedLayout = metadata.getLayout(session, tableHandle, Constraint.alwaysTrue(), Optional.of(outputColumnHandles));\n             verify(selectedLayout.getUnenforcedConstraint().equals(TupleDomain.all()), \"temporary table layout shouldn't enforce any constraints\");\n             verify(!selectedLayout.getLayout().getColumns().isPresent(), \"temporary table layout must provide all the columns\");\n-            TablePartitioning expectedPartitioning = new TablePartitioning(\n-                    expectedPartitioningMetadata.getPartitioningHandle(),\n-                    expectedPartitioningMetadata.getPartitionColumns().stream()\n-                            .map(columnHandles::get)\n-                            .collect(toImmutableList()));\n-            verify(selectedLayout.getLayout().getTablePartitioning().equals(Optional.of(expectedPartitioning)), \"invalid temporary table partitioning\");\n+            List<ColumnHandle> expectedPartitioningColumns = expectedPartitioningMetadata.getPartitionColumns().stream()\n+                    .map(columnHandles::get)\n+                    .collect(toImmutableList());\n+            verify(selectedLayout.getLayout().getTablePartitioning().get().getPartitioningColumns()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NzI2Ng=="}, "originalCommit": {"oid": "a9f0275e084d245e14ea9f9bf6fc629598de5c70"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE4MTYwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNjoyMFrOGjLvnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNjoyMFrOGjLvnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTc1Ng==", "bodyText": "Let's accept BucketingType as a parameter and check if types or hiveTypes are present based on the BucketingType.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439545756", "createdAt": "2020-06-12T17:16:20Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -13,33 +13,65 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.OptionalInt;\n \n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.HIVETYPE;\n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.PRESTOTYPE;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HivePartitioningHandle\n         implements ConnectorPartitioningHandle\n {\n     private final int bucketCount;\n-    private final List<HiveType> hiveTypes;\n+    private final Optional<List<HiveType>> hiveTypes;\n+    private final Optional<List<Type>> types;\n     private final OptionalInt maxCompatibleBucketCount;\n+    private final HiveBucketProperty.BucketingType bucketingType;\n \n+    public static HivePartitioningHandle createPartitioningHandleWithHiveType(\n+            int bucketCount,\n+            List<HiveType> hiveTypes,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(bucketCount, maxCompatibleBucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public static HivePartitioningHandle createPartitioningHandleWithPrestoType(\n+            int bucketCount,\n+            List<Type> types,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(bucketCount, maxCompatibleBucketCount, Optional.empty(), Optional.of(types));\n+    }\n+\n+    /**\n+     *  for json serialization only, don't use this method to create HivePartitioningHandle\n+     */\n     @JsonCreator\n     public HivePartitioningHandle(\n             @JsonProperty(\"bucketCount\") int bucketCount,\n-            @JsonProperty(\"hiveTypes\") List<HiveType> hiveTypes,\n-            @JsonProperty(\"maxCompatibleBucketCount\") OptionalInt maxCompatibleBucketCount)\n+            @JsonProperty(\"maxCompatibleBucketCount\") OptionalInt maxCompatibleBucketCount,\n+            @JsonProperty(\"hiveTypes\") Optional<List<HiveType>> hiveTypes,\n+            @JsonProperty(\"types\") Optional<List<Type>> types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE4MzQwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNjo1OVrOGjLw0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNjo1OVrOGjLw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjA2NA==", "bodyText": "How about createHiveCompatiblePartitioningHandle", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439546064", "createdAt": "2020-06-12T17:16:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -13,33 +13,65 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.OptionalInt;\n \n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.HIVETYPE;\n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.PRESTOTYPE;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HivePartitioningHandle\n         implements ConnectorPartitioningHandle\n {\n     private final int bucketCount;\n-    private final List<HiveType> hiveTypes;\n+    private final Optional<List<HiveType>> hiveTypes;\n+    private final Optional<List<Type>> types;\n     private final OptionalInt maxCompatibleBucketCount;\n+    private final HiveBucketProperty.BucketingType bucketingType;\n \n+    public static HivePartitioningHandle createPartitioningHandleWithHiveType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE4NDY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNzoyMFrOGjLxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNzoyMFrOGjLxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjI1Mw==", "bodyText": "createPrestoNativePartitioningHandle", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439546253", "createdAt": "2020-06-12T17:17:20Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -13,33 +13,65 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.OptionalInt;\n \n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.HIVETYPE;\n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.PRESTOTYPE;\n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HivePartitioningHandle\n         implements ConnectorPartitioningHandle\n {\n     private final int bucketCount;\n-    private final List<HiveType> hiveTypes;\n+    private final Optional<List<HiveType>> hiveTypes;\n+    private final Optional<List<Type>> types;\n     private final OptionalInt maxCompatibleBucketCount;\n+    private final HiveBucketProperty.BucketingType bucketingType;\n \n+    public static HivePartitioningHandle createPartitioningHandleWithHiveType(\n+            int bucketCount,\n+            List<HiveType> hiveTypes,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(bucketCount, maxCompatibleBucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public static HivePartitioningHandle createPartitioningHandleWithPrestoType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE4NzM2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxODoxNlrOGjLzTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxODoxNlrOGjLzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjcwMg==", "bodyText": "Let's extract BucketingType into a standalone class. Let's call it BucketFunctionType.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439546702", "createdAt": "2020-06-12T17:18:16Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -49,21 +81,33 @@ public int getBucketCount()\n     }\n \n     @JsonProperty\n-    public List<HiveType> getHiveTypes()\n+    public Optional<List<HiveType>> getHiveTypes()\n     {\n         return hiveTypes;\n     }\n \n+    @JsonProperty\n+    public Optional<List<Type>> getTypes()\n+    {\n+        return types;\n+    }\n+\n     @JsonProperty\n     public OptionalInt getMaxCompatibleBucketCount()\n     {\n         return maxCompatibleBucketCount;\n     }\n \n+    @JsonProperty\n+    public HiveBucketProperty.BucketingType getBucketingType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE5MjY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyMDoxMlrOGjL2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyMDoxMlrOGjL2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NzU4Mg==", "bodyText": "This is what is printed in the plan. In a current form it might be a little hard to read. How about we merge hiveTypes and types and print only one?\ne.g.:\nformat(\"bucketFunctionType=%s, buckets=%s, types=%s\", bucketingType, bucketCount, hiveTypes or types);", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439547582", "createdAt": "2020-06-12T17:20:12Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -49,21 +81,33 @@ public int getBucketCount()\n     }\n \n     @JsonProperty\n-    public List<HiveType> getHiveTypes()\n+    public Optional<List<HiveType>> getHiveTypes()\n     {\n         return hiveTypes;\n     }\n \n+    @JsonProperty\n+    public Optional<List<Type>> getTypes()\n+    {\n+        return types;\n+    }\n+\n     @JsonProperty\n     public OptionalInt getMaxCompatibleBucketCount()\n     {\n         return maxCompatibleBucketCount;\n     }\n \n+    @JsonProperty\n+    public HiveBucketProperty.BucketingType getBucketingType()\n+    {\n+        return bucketingType;\n+    }\n+\n     @Override\n     public String toString()\n     {\n-        return format(\"buckets=%s, hiveTypes=%s\", bucketCount, hiveTypes);\n+        return format(\"buckets=%s, hiveTypes=%s, types=%s, bucketingType=%s\", bucketCount, hiveTypes, types, bucketingType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIwMTMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzoxMlrOGjMEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzoxMlrOGjMEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTA2OQ==", "bodyText": "Same comments as for getCommonPartitioningHandle.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439551069", "createdAt": "2020-06-12T17:27:12Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2188,7 +2211,7 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n         checkArgument(\n-                hivePartitioningHandle.getHiveTypes().equals(bucketTypes),\n+                hivePartitioningHandle.getHiveTypes().get().equals(bucketTypes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIwNDkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNDoxOVrOGjL-dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToxOTowMFrOGjPIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTU1Nw==", "bodyText": "Why do we have to create Hive compatible partitioning if partitionTypes is empty?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439549557", "createdAt": "2020-06-12T17:24:19Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2217,14 +2240,12 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n     @Override\n     public ConnectorPartitioningHandle getPartitioningHandleForExchange(ConnectorSession session, int partitionCount, List<Type> partitionTypes)\n     {\n-        return new HivePartitioningHandle(\n-                partitionCount,\n-                partitionTypes.stream()\n-                        .map(type -> toHiveType(\n-                                typeTranslator,\n-                                translateHiveUnsupportedTypeForTemporaryTable(type, typeManager)))\n-                        .collect(toImmutableList()),\n-                OptionalInt.empty());\n+        if (!partitionTypes.isEmpty()) {\n+            return createPartitioningHandleWithPrestoType(partitionCount, partitionTypes, OptionalInt.empty());\n+        }\n+        else {\n+            return createPartitioningHandleWithHiveType(partitionCount, ImmutableList.of(), OptionalInt.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMTI0OQ==", "bodyText": "It doesn't matter which one to use when partition column is empty,  let me use Presto Native to make code simple.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439601249", "createdAt": "2020-06-12T19:19:00Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2217,14 +2240,12 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n     @Override\n     public ConnectorPartitioningHandle getPartitioningHandleForExchange(ConnectorSession session, int partitionCount, List<Type> partitionTypes)\n     {\n-        return new HivePartitioningHandle(\n-                partitionCount,\n-                partitionTypes.stream()\n-                        .map(type -> toHiveType(\n-                                typeTranslator,\n-                                translateHiveUnsupportedTypeForTemporaryTable(type, typeManager)))\n-                        .collect(toImmutableList()),\n-                OptionalInt.empty());\n+        if (!partitionTypes.isEmpty()) {\n+            return createPartitioningHandleWithPrestoType(partitionCount, partitionTypes, OptionalInt.empty());\n+        }\n+        else {\n+            return createPartitioningHandleWithHiveType(partitionCount, ImmutableList.of(), OptionalInt.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTU1Nw=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIxMjg4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNjozN1rOGjMDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToxNzozNVrOGjPGMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDc2NA==", "bodyText": "Let's keep it compatible with native partitioning handle as well.\nPlease check if the partitioning handle type is the same and if the column types are the same as well.  Also it looks like it makes sense to keep the constructor public, so it is easier to change the maxCompatibleBucketCount without performing extra logic.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439550764", "createdAt": "2020-06-12T17:26:37Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2142,9 +2165,9 @@ public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTa\n             return Optional.empty();\n         }\n \n-        return Optional.of(new HivePartitioningHandle(\n+        return Optional.of(createPartitioningHandleWithHiveType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMDY4OA==", "bodyText": "Good point, I forget to check column types consistency. This method is marked as deprecated but I think the code is still in use, right?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439600688", "createdAt": "2020-06-12T19:17:35Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2142,9 +2165,9 @@ public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTa\n             return Optional.empty();\n         }\n \n-        return Optional.of(new HivePartitioningHandle(\n+        return Optional.of(createPartitioningHandleWithHiveType(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDc2NA=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyMjE4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyOTo0MFrOGjMI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToyNzoxMlrOGjPVTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MjIzNQ==", "bodyText": "We never directly create temporary table. We always insert. Why the change to the getNewTableLayout is needed?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439552235", "createdAt": "2020-06-12T17:29:40Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2355,17 +2376,33 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n             throw new PrestoException(NOT_SUPPORTED, \"Writing to bucketed sorted Hive tables is disabled\");\n         }\n \n+        HivePartitioningHandle hivePartitioningHandle;\n         List<String> bucketedBy = bucketProperty.get().getBucketedBy();\n-        Map<String, HiveType> hiveTypeMap = tableMetadata.getColumns().stream()\n-                .collect(toMap(ColumnMetadata::getName, column -> toHiveType(typeTranslator, column.getType())));\n-        return Optional.of(new ConnectorNewTableLayout(\n-                new HivePartitioningHandle(\n+\n+        HiveBucketProperty.BucketingType bucketingType = bucketProperty.get().getBucketingType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwNDU1OQ==", "bodyText": "Then this is not needed, will remove.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439604559", "createdAt": "2020-06-12T19:27:12Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2355,17 +2376,33 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n             throw new PrestoException(NOT_SUPPORTED, \"Writing to bucketed sorted Hive tables is disabled\");\n         }\n \n+        HivePartitioningHandle hivePartitioningHandle;\n         List<String> bucketedBy = bucketProperty.get().getBucketedBy();\n-        Map<String, HiveType> hiveTypeMap = tableMetadata.getColumns().stream()\n-                .collect(toMap(ColumnMetadata::getName, column -> toHiveType(typeTranslator, column.getType())));\n-        return Optional.of(new ConnectorNewTableLayout(\n-                new HivePartitioningHandle(\n+\n+        HiveBucketProperty.BucketingType bucketingType = bucketProperty.get().getBucketingType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MjIzNQ=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyNzkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMToxOVrOGjMMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTozMDo1N1rOGjPbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzE1Nw==", "bodyText": "IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439553157", "createdAt": "2020-06-12T17:31:19Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +51,15 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        HiveBucketProperty.BucketingType bucketingtype = handle.getBucketingType();\n+        switch (bucketingtype) {\n+            case PRESTOTYPE:\n+                return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get());\n+            case HIVETYPE:\n+                return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get());\n+            default:\n+                throw new IllegalStateException(format(\"Unsupported bucketing type %s\", bucketingtype));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzI5NA==", "bodyText": "\"Unsupported bucketing type \" + bucketingtype", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439553294", "createdAt": "2020-06-12T17:31:38Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +51,15 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        HiveBucketProperty.BucketingType bucketingtype = handle.getBucketingType();\n+        switch (bucketingtype) {\n+            case PRESTOTYPE:\n+                return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get());\n+            case HIVETYPE:\n+                return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get());\n+            default:\n+                throw new IllegalStateException(format(\"Unsupported bucketing type %s\", bucketingtype));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzE1Nw=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwNjE0NA==", "bodyText": "IllegalStateException makes more sense:  HivePartitioningHandle has an invalid BucketFunctionType", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439606144", "createdAt": "2020-06-12T19:30:57Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +51,15 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        HiveBucketProperty.BucketingType bucketingtype = handle.getBucketingType();\n+        switch (bucketingtype) {\n+            case PRESTOTYPE:\n+                return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get());\n+            case HIVETYPE:\n+                return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get());\n+            default:\n+                throw new IllegalStateException(format(\"Unsupported bucketing type %s\", bucketingtype));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzE1Nw=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzMzcxOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzoyMVrOGjMQUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzoyMVrOGjMQUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDEyOA==", "bodyText": "Let's set it explicitly as a constructor parameter. Lets check if the types is set if the bucketingType is prestonative", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439554128", "createdAt": "2020-06-12T17:33:21Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());\n+    }\n \n     @JsonCreator\n     public HiveBucketProperty(\n             @JsonProperty(\"bucketedBy\") List<String> bucketedBy,\n             @JsonProperty(\"bucketCount\") int bucketCount,\n-            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy)\n+            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy,\n+            @JsonProperty(\"types\") Optional<List<Type>> types)\n     {\n         this.bucketedBy = ImmutableList.copyOf(requireNonNull(bucketedBy, \"bucketedBy is null\"));\n         this.bucketCount = bucketCount;\n         this.sortedBy = ImmutableList.copyOf(requireNonNull(sortedBy, \"sortedBy is null\"));\n+        this.types = requireNonNull(types, \"type is null\");\n+        if (types.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNTgzOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDowNlrOGjMRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDowNlrOGjMRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDQ3OA==", "bodyText": "Let's extract it as a standalone class. Let's call it BucketFunctionType", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439554478", "createdAt": "2020-06-12T17:34:06Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());\n+    }\n \n     @JsonCreator\n     public HiveBucketProperty(\n             @JsonProperty(\"bucketedBy\") List<String> bucketedBy,\n             @JsonProperty(\"bucketCount\") int bucketCount,\n-            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy)\n+            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy,\n+            @JsonProperty(\"types\") Optional<List<Type>> types)\n     {\n         this.bucketedBy = ImmutableList.copyOf(requireNonNull(bucketedBy, \"bucketedBy is null\"));\n         this.bucketCount = bucketCount;\n         this.sortedBy = ImmutableList.copyOf(requireNonNull(sortedBy, \"sortedBy is null\"));\n+        this.types = requireNonNull(types, \"type is null\");\n+        if (types.isPresent()) {\n+            bucketingType = BucketingType.PRESTOTYPE;\n+            checkArgument(types.get().size() > 0, \"types can not be empty if present\");\n+            checkArgument(types.get().size() == bucketedBy.size(), \"the sizes of bucketedBy and types should match\");\n+        }\n+        else {\n+            bucketingType = BucketingType.HIVETYPE;\n+        }\n+    }\n+\n+    public enum BucketingType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNjUwOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDoyMFrOGjMSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTozMzo0M1rOGjPfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDU4NQ==", "bodyText": "HIVE_COMPATIBLE, PRESTO_NATIVE", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439554585", "createdAt": "2020-06-12T17:34:20Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());\n+    }\n \n     @JsonCreator\n     public HiveBucketProperty(\n             @JsonProperty(\"bucketedBy\") List<String> bucketedBy,\n             @JsonProperty(\"bucketCount\") int bucketCount,\n-            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy)\n+            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy,\n+            @JsonProperty(\"types\") Optional<List<Type>> types)\n     {\n         this.bucketedBy = ImmutableList.copyOf(requireNonNull(bucketedBy, \"bucketedBy is null\"));\n         this.bucketCount = bucketCount;\n         this.sortedBy = ImmutableList.copyOf(requireNonNull(sortedBy, \"sortedBy is null\"));\n+        this.types = requireNonNull(types, \"type is null\");\n+        if (types.isPresent()) {\n+            bucketingType = BucketingType.PRESTOTYPE;\n+            checkArgument(types.get().size() > 0, \"types can not be empty if present\");\n+            checkArgument(types.get().size() == bucketedBy.size(), \"the sizes of bucketedBy and types should match\");\n+        }\n+        else {\n+            bucketingType = BucketingType.HIVETYPE;\n+        }\n+    }\n+\n+    public enum BucketingType\n+    {\n+        HIVETYPE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwNzI0MQ==", "bodyText": "How about HIVE_TYPE and PRESTO_NATIVE?  COMP ATIBLE is a little confused , as there is no translation here.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439607241", "createdAt": "2020-06-12T19:33:43Z", "author": {"login": "viczhang861"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(\n+            List<String> bucketedBy,\n+            int bucketCount,\n+            List<SortingColumn> sortedBy)\n+    {\n+        this(bucketedBy, bucketCount, sortedBy, Optional.empty());\n+    }\n \n     @JsonCreator\n     public HiveBucketProperty(\n             @JsonProperty(\"bucketedBy\") List<String> bucketedBy,\n             @JsonProperty(\"bucketCount\") int bucketCount,\n-            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy)\n+            @JsonProperty(\"sortedBy\") List<SortingColumn> sortedBy,\n+            @JsonProperty(\"types\") Optional<List<Type>> types)\n     {\n         this.bucketedBy = ImmutableList.copyOf(requireNonNull(bucketedBy, \"bucketedBy is null\"));\n         this.bucketCount = bucketCount;\n         this.sortedBy = ImmutableList.copyOf(requireNonNull(sortedBy, \"sortedBy is null\"));\n+        this.types = requireNonNull(types, \"type is null\");\n+        if (types.isPresent()) {\n+            bucketingType = BucketingType.PRESTOTYPE;\n+            checkArgument(types.get().size() > 0, \"types can not be empty if present\");\n+            checkArgument(types.get().size() == bucketedBy.size(), \"the sizes of bucketedBy and types should match\");\n+        }\n+        else {\n+            bucketingType = BucketingType.HIVETYPE;\n+        }\n+    }\n+\n+    public enum BucketingType\n+    {\n+        HIVETYPE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDU4NQ=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzODk3OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNToxMlrOGjMTsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoxMjoyOVrOGk2-0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDk5Mg==", "bodyText": "How strongly do we feel about keeping this constructor? How many places have to be refactored if we are to remove it?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439554992", "createdAt": "2020-06-12T17:35:12Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwODQxOA==", "bodyText": "More than 10 call sites,   since \"Optional<List> types\" is optional, keeping the old constructor has some benefits.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439608418", "createdAt": "2020-06-12T19:36:49Z", "author": {"login": "viczhang861"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDk5Mg=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1MTU0NQ==", "bodyText": "Let's remove this constructor to be more explicit in the places where it is created.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440851545", "createdAt": "2020-06-16T13:31:48Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDk5Mg=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMjczNw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441302737", "createdAt": "2020-06-17T06:12:29Z", "author": {"login": "viczhang861"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveBucketProperty.java", "diffHunk": "@@ -34,16 +36,42 @@\n     private final List<String> bucketedBy;\n     private final int bucketCount;\n     private final List<SortingColumn> sortedBy;\n+    private final Optional<List<Type>> types;\n+    private final BucketingType bucketingType;\n+\n+    public HiveBucketProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDk5Mg=="}, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MTE1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTo1OVrOGjMVIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTo1OVrOGjMVIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTM2Mw==", "bodyText": "Same comments as for other classes. Let's pass bucketingType as a parameter, and let's validate if the hiveTypes and types are set accordingly.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439555363", "createdAt": "2020-06-12T17:35:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketFunction.java", "diffHunk": "@@ -14,33 +14,71 @@\n package com.facebook.presto.hive;\n \n import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.BucketFunction;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.Optional;\n \n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.HIVETYPE;\n+import static com.facebook.presto.hive.HiveBucketProperty.BucketingType.PRESTOTYPE;\n+import static com.facebook.presto.hive.HiveBucketing.getHiveBucket;\n import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HiveBucketFunction\n         implements BucketFunction\n {\n     private final int bucketCount;\n-    private final List<TypeInfo> typeInfos;\n+    private final Optional<List<TypeInfo>> typeInfos;\n+    private final Optional<List<Type>> types;\n+    private final HiveBucketProperty.BucketingType bucketingType;\n \n-    public HiveBucketFunction(int bucketCount, List<HiveType> hiveTypes)\n+    public static HiveBucketFunction createHiveCompatibleBucketFunction(\n+            int bucketCount,\n+            List<HiveType> hiveTypes)\n+    {\n+        return new HiveBucketFunction(bucketCount, Optional.of(hiveTypes), Optional.empty());\n+    }\n+\n+    public static HiveBucketFunction createPrestoNativeBucketFunction(\n+            int bucketCount,\n+            List<Type> types)\n+    {\n+        return new HiveBucketFunction(bucketCount, Optional.empty(), Optional.of(types));\n+    }\n+\n+    private HiveBucketFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjo1NlrOGjMW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjo1NlrOGjMW8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTgyNA==", "bodyText": "Why do we need to use hive compatible bucket property if partitionColumns.isEmpty() || !partitioningHandle.getTypes().isPresent()?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r439555824", "createdAt": "2020-06-12T17:36:56Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -859,7 +861,24 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n                         Sets.difference(ImmutableSet.copyOf(partitioning.getPartitionColumns()), allColumns)));\n             }\n             HivePartitioningHandle partitioningHandle = (HivePartitioningHandle) partitioning.getPartitioningHandle();\n-            return new HiveBucketProperty(partitioning.getPartitionColumns(), partitioningHandle.getBucketCount(), ImmutableList.of());\n+            List<String> partitionColumns = partitioning.getPartitionColumns();\n+            if (partitionColumns.isEmpty() || !partitioningHandle.getTypes().isPresent()) {\n+                return new HiveBucketProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f32be3d86121c7a7380503c8444d80dc5d250b3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU1MDQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNDowN1rOGkarJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNDowN1rOGkarJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzODk0OA==", "bodyText": "nit IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440838948", "createdAt": "2020-06-16T13:14:07Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveNodePartitioningProvider.java", "diffHunk": "@@ -49,8 +51,15 @@ public BucketFunction getBucketFunction(\n             int bucketCount)\n     {\n         HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle;\n-        List<HiveType> hiveTypes = handle.getHiveTypes();\n-        return new HiveBucketFunction(bucketCount, hiveTypes);\n+        BucketFunctionType bucketFunctionType = handle.getBucketFunctionType();\n+        switch (bucketFunctionType) {\n+            case HIVE_COMPATIBLE:\n+                return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get());\n+            case PRESTO_NATIVE:\n+                return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get());\n+            default:\n+                throw new IllegalStateException(\"Unsupported bucket function type \" + bucketFunctionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU1MTkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNDozMVrOGkasCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNDozMVrOGkasCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzOTE3Ng==", "bodyText": "nit IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440839176", "createdAt": "2020-06-16T13:14:31Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -143,10 +146,20 @@ public HivePageSink(\n             bucketColumns = bucketProperty.get().getBucketedBy().stream()\n                     .mapToInt(dataColumnNameToIdMap::get)\n                     .toArray();\n-            List<HiveType> bucketColumnTypes = bucketProperty.get().getBucketedBy().stream()\n-                    .map(dataColumnNameToTypeMap::get)\n-                    .collect(toList());\n-            bucketFunction = new HiveBucketFunction(bucketCount, bucketColumnTypes);\n+            BucketFunctionType bucketFunctionType = bucketProperty.get().getBucketFunctionType();\n+            switch (bucketFunctionType) {\n+                case HIVE_COMPATIBLE:\n+                    List<HiveType> bucketColumnHiveTypes = bucketProperty.get().getBucketedBy().stream()\n+                            .map(dataColumnNameToHiveTypeMap::get)\n+                            .collect(toImmutableList());\n+                    bucketFunction = createHiveCompatibleBucketFunction(bucketCount, bucketColumnHiveTypes);\n+                    break;\n+                case PRESTO_NATIVE:\n+                    bucketFunction = createPrestoNativeBucketFunction(bucketCount, bucketProperty.get().getTypes().get());\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported bucket function type \" + bucketFunctionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU1NDU3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNTowN1rOGkatuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNTowN1rOGkatuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzOTYwOQ==", "bodyText": "nit: static import", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440839609", "createdAt": "2020-06-16T13:15:07Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -13,33 +13,74 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.OptionalInt;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HivePartitioningHandle\n         implements ConnectorPartitioningHandle\n {\n     private final int bucketCount;\n-    private final List<HiveType> hiveTypes;\n     private final OptionalInt maxCompatibleBucketCount;\n+    private final BucketFunctionType bucketFunctionType;\n+    private final Optional<List<HiveType>> hiveTypes;\n+    private final Optional<List<Type>> types;\n \n+    public static HivePartitioningHandle createHiveCompatiblePartitioningHandle(\n+            int bucketCount,\n+            List<HiveType> hiveTypes,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(\n+                bucketCount,\n+                maxCompatibleBucketCount,\n+                BucketFunctionType.HIVE_COMPATIBLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU1NTIxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNToxNFrOGkauDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNToxNFrOGkauDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzOTY5Mg==", "bodyText": "nit: static import", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440839692", "createdAt": "2020-06-16T13:15:14Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -13,33 +13,74 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.OptionalInt;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class HivePartitioningHandle\n         implements ConnectorPartitioningHandle\n {\n     private final int bucketCount;\n-    private final List<HiveType> hiveTypes;\n     private final OptionalInt maxCompatibleBucketCount;\n+    private final BucketFunctionType bucketFunctionType;\n+    private final Optional<List<HiveType>> hiveTypes;\n+    private final Optional<List<Type>> types;\n \n+    public static HivePartitioningHandle createHiveCompatiblePartitioningHandle(\n+            int bucketCount,\n+            List<HiveType> hiveTypes,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(\n+                bucketCount,\n+                maxCompatibleBucketCount,\n+                BucketFunctionType.HIVE_COMPATIBLE,\n+                Optional.of(hiveTypes),\n+                Optional.empty());\n+    }\n+\n+    public static HivePartitioningHandle createPrestoNativePartitioningHandle(\n+            int bucketCount,\n+            List<Type> types,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        return new HivePartitioningHandle(\n+                bucketCount,\n+                maxCompatibleBucketCount,\n+                BucketFunctionType.PRESTO_NATIVE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU1OTEwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNjowNlrOGkawbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNjowNlrOGkawbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MDMwMQ==", "bodyText": "\"buckets=%s, bucketFunctionType=%s, types=%s\"", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440840301", "createdAt": "2020-06-16T13:16:06Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -49,21 +90,37 @@ public int getBucketCount()\n     }\n \n     @JsonProperty\n-    public List<HiveType> getHiveTypes()\n+    public Optional<List<HiveType>> getHiveTypes()\n     {\n         return hiveTypes;\n     }\n \n+    @JsonProperty\n+    public Optional<List<Type>> getTypes()\n+    {\n+        return types;\n+    }\n+\n     @JsonProperty\n     public OptionalInt getMaxCompatibleBucketCount()\n     {\n         return maxCompatibleBucketCount;\n     }\n \n+    @JsonProperty\n+    public BucketFunctionType getBucketFunctionType()\n+    {\n+        return bucketFunctionType;\n+    }\n+\n     @Override\n     public String toString()\n     {\n-        return format(\"buckets=%s, hiveTypes=%s\", bucketCount, hiveTypes);\n+        return format(\n+                \"buckets=%s,\" + \"bucketFunctionType=%s,\" + \"types=%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU2MDE3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNjoyMVrOGkaxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNjoyMVrOGkaxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MDQ2NA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440840464", "createdAt": "2020-06-16T13:16:21Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitioningHandle.java", "diffHunk": "@@ -49,21 +90,37 @@ public int getBucketCount()\n     }\n \n     @JsonProperty\n-    public List<HiveType> getHiveTypes()\n+    public Optional<List<HiveType>> getHiveTypes()\n     {\n         return hiveTypes;\n     }\n \n+    @JsonProperty\n+    public Optional<List<Type>> getTypes()\n+    {\n+        return types;\n+    }\n+\n     @JsonProperty\n     public OptionalInt getMaxCompatibleBucketCount()\n     {\n         return maxCompatibleBucketCount;\n     }\n \n+    @JsonProperty\n+    public BucketFunctionType getBucketFunctionType()\n+    {\n+        return bucketFunctionType;\n+    }\n+\n     @Override\n     public String toString()\n     {\n-        return format(\"buckets=%s, hiveTypes=%s\", bucketCount, hiveTypes);\n+        return format(\n+                \"buckets=%s,\" + \"bucketFunctionType=%s,\" + \"types=%s\",\n+                bucketCount,\n+                bucketFunctionType,\n+                bucketFunctionType.equals(BucketFunctionType.HIVE_COMPATIBLE) ? hiveTypes.get() : types.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU2MzEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNzowM1rOGkay6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxNzowM1rOGkay6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MDkzOA==", "bodyText": "IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440840938", "createdAt": "2020-06-16T13:17:03Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -859,7 +862,30 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n                         Sets.difference(ImmutableSet.copyOf(partitioning.getPartitionColumns()), allColumns)));\n             }\n             HivePartitioningHandle partitioningHandle = (HivePartitioningHandle) partitioning.getPartitioningHandle();\n-            return new HiveBucketProperty(partitioning.getPartitionColumns(), partitioningHandle.getBucketCount(), ImmutableList.of());\n+            List<String> partitionColumns = partitioning.getPartitionColumns();\n+            BucketFunctionType bucketFunctionType = partitioningHandle.getBucketFunctionType();\n+            switch (bucketFunctionType) {\n+                case HIVE_COMPATIBLE:\n+                    return new HiveBucketProperty(\n+                            partitionColumns,\n+                            partitioningHandle.getBucketCount(),\n+                            ImmutableList.of(),\n+                            HIVE_COMPATIBLE,\n+                            Optional.empty());\n+                case PRESTO_NATIVE:\n+                    Map<String, Type> columnNameToTypeMap = columns.stream()\n+                            .collect(toMap(ColumnMetadata::getName, ColumnMetadata::getType));\n+                    return new HiveBucketProperty(\n+                            partitionColumns,\n+                            partitioningHandle.getBucketCount(),\n+                            ImmutableList.of(),\n+                            PRESTO_NATIVE,\n+                            Optional.of(partitionColumns.stream()\n+                                    .map(columnNameToTypeMap::get)\n+                                    .collect(toImmutableList())));\n+                default:\n+                    throw new IllegalStateException(\"Unsupported bucket function type \" + bucketFunctionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY4MjQ4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0MzoyOVrOGkb97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowODo1OFrOGknQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MDE0Mg==", "bodyText": "Let's simply check that the bucketFunction type is the same, and that the types also match (similar like for the getCommonPartitioningHandle)", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440860142", "createdAt": "2020-06-16T13:43:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2187,10 +2231,15 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         checkArgument(hiveLayoutHandle.getBucketHandle().isPresent(), \"Hive connector only provides alternative layout for bucketed table\");\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n+        Optional<List<HiveType>> hiveTypes = hivePartitioningHandle.getHiveTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMDE2OQ==", "bodyText": "This can only be HIVE_COMPATIBLE, see explanation checkArgument( hivePartitioningHandle.getBucketFunctionType().equals(HIVE_COMPATIBLE) && hiveTypes.isPresent(), \"partitionColumns in HiveTableLayoutHandle must use a hive compatible bucket function\");", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440930169", "createdAt": "2020-06-16T15:14:02Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2187,10 +2231,15 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         checkArgument(hiveLayoutHandle.getBucketHandle().isPresent(), \"Hive connector only provides alternative layout for bucketed table\");\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n+        Optional<List<HiveType>> hiveTypes = hivePartitioningHandle.getHiveTypes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MDE0Mg=="}, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NTE4MA==", "bodyText": "As per discussion offline we decided to keep an assertion, as this method shouldn't be used for temporary tables", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441045180", "createdAt": "2020-06-16T18:08:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2187,10 +2231,15 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         checkArgument(hiveLayoutHandle.getBucketHandle().isPresent(), \"Hive connector only provides alternative layout for bucketed table\");\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n+        Optional<List<HiveType>> hiveTypes = hivePartitioningHandle.getHiveTypes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MDE0Mg=="}, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY5MzE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0NTo0MVrOGkcEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxODowNFrOGkgchw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MTg0OA==", "bodyText": "Let's simply create the HivePartitioningHandle based on the actual HiveBucketProperty. We should assume the HiveBucketProperty is created right based on the ConnectorTableMetadata", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440861848", "createdAt": "2020-06-16T13:45:41Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2351,19 +2393,21 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n         if (!bucketProperty.isPresent()) {\n             return Optional.empty();\n         }\n+        checkArgument(bucketProperty.get().getBucketFunctionType().equals(BucketFunctionType.HIVE_COMPATIBLE), \"Must be hive compatible bucket function type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMzUxMQ==", "bodyText": "We had a discussion earlier, getNewTableLayout is never used for temporary table, so I added a checkArgument and removed conditional creation of HivePartitioningHandle based on the actual HiveBucketProperty.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440933511", "createdAt": "2020-06-16T15:18:04Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2351,19 +2393,21 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n         if (!bucketProperty.isPresent()) {\n             return Optional.empty();\n         }\n+        checkArgument(bucketProperty.get().getBucketFunctionType().equals(BucketFunctionType.HIVE_COMPATIBLE), \"Must be hive compatible bucket function type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MTg0OA=="}, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY5NzUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0NjozM1rOGkcHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMjoyN1rOGkgLJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MjUzOA==", "bodyText": "Let's simply use a constructor here", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440862538", "createdAt": "2020-06-16T13:46:33Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2297,12 +2339,12 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n             throw new PrestoException(NOT_SUPPORTED, \"Writing to bucketed sorted Hive tables is disabled\");\n         }\n \n-        HivePartitioningHandle partitioningHandle = new HivePartitioningHandle(\n+        HivePartitioningHandle partitioningHandle = createHivePartitioningHandle(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyOTA2Mg==", "bodyText": "There are two places which create HivePartitioningHandle using HiveBucketHandle and HiveBucketProperty, a function is created to remove duplicated code.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r440929062", "createdAt": "2020-06-16T15:12:27Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2297,12 +2339,12 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n             throw new PrestoException(NOT_SUPPORTED, \"Writing to bucketed sorted Hive tables is disabled\");\n         }\n \n-        HivePartitioningHandle partitioningHandle = new HivePartitioningHandle(\n+        HivePartitioningHandle partitioningHandle = createHivePartitioningHandle(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MjUzOA=="}, "originalCommit": {"oid": "008ba566b6a25dbf83bc8161377af21caacff23c"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk3NDQzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozNjo1OFrOGlQI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozNDo0NVrOGmXBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg==", "bodyText": "I'm not sure how safe it to ignore. Let's add an assertion that the getBucketFunctionType().equals(HIVE_COMPATIBLE)", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441714942", "createdAt": "2020-06-17T17:36:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNTUzNw==", "bodyText": "Actually it is already checked in getHiveBuckets. We can remove this assertion here.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441715537", "createdAt": "2020-06-17T17:37:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMzQ5NQ==", "bodyText": "This one is needed to return empty HiveBucketFilter:   ignore bucket pruning", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441733495", "createdAt": "2020-06-17T18:08:18Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzEzNg==", "bodyText": "I'm not sure if it is safe to ignore it. There shouldn't be any bucket pruning for temporary tables though.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441747136", "createdAt": "2020-06-17T18:32:50Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1ODk0Mw==", "bodyText": "Since code path exist for bucketed temporary table : Optional<HiveBucketFilter> bucketFilter = shouldIgnoreTableBucketing ? Optional.empty() : getHiveBucketFilter(table, effectivePredicate);    Thus we cannot use assertion but should ignore.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441758943", "createdAt": "2020-06-17T18:50:53Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MTQ2Mw==", "bodyText": "Or add the check in call site: shouldIgnoreTableBucketing || bucket function type == PRESTO_NATIVE ? Optional.empty() : getHiveBucketFilter(table, effectivePredicate);\nSame thing, let's keep it inside.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441761463", "createdAt": "2020-06-17T18:53:10Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MzIxMw==", "bodyText": "It feels like this shortcut is not needed. Temporary tables are never filtered. Thus it seems like the method should return at if (!bindings.isPresent()) {, before reaching the getHiveBuckets(table, bindings.get()) that would fail if the hash function is not HIVE_COMPATIBLE", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441943213", "createdAt": "2020-06-18T03:09:05Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1MzM4MQ==", "bodyText": "bindings could be a non-empty Optional object for temporary table, test will fail if I revert this change. The shortcut has its value to avoid unneeded code path.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r442553381", "createdAt": "2020-06-18T23:28:00Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NjI2Nw==", "bodyText": "Okay, I just checked the code, and it seems to be safe to skip bucket filter.\nLet's at least extract this condition into a separate branch and add a comment, e.g.:\nif (!hiveBucketProperty.isPresent()) {\n  return Optional.empty();\n}\nif(!hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)){\n  // bucket filtering is only supported for tables bucketed with HIVE_COMPATIBLE hash function\n  return Optional.empty();\n}", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r442876267", "createdAt": "2020-06-19T14:34:45Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -287,7 +305,8 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (!table.getStorage().getBucketProperty().isPresent()) {\n+        Optional<HiveBucketProperty> hiveBucketProperty = table.getStorage().getBucketProperty();\n+        if (!hiveBucketProperty.isPresent() || !hiveBucketProperty.get().getBucketFunctionType().equals(HIVE_COMPATIBLE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNDk0Mg=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk4NzY0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MDo0MlrOGlQRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MDo0MlrOGlQRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNzEzOQ==", "bodyText": "hiveBucketProperty is only used by the getPartitionMetadata. We can pass the bucketHandle directly to that method to avoid this \"lossy\" conversion.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441717139", "createdAt": "2020-06-17T17:40:42Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -223,7 +225,14 @@ public ConnectorSplitSource getSplits(\n \n         Optional<HiveBucketProperty> hiveBucketProperty = Optional.empty();\n         if (bucketHandle.isPresent() && !bucketHandle.get().isVirtuallyBucketed()) {\n-            hiveBucketProperty = bucketHandle.map(HiveBucketHandle::toTableBucketProperty);\n+            hiveBucketProperty = bucketHandle.map(handle -> new HiveBucketProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjAxMDk4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0NzoxNFrOGlQgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMjozNVrOGlTemA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMDk4OA==", "bodyText": "Let's use the HivePartitioningHandle constructor directly here to avoid this switch. We are not changing the function, we simply replacing the bucket count. It's a little not intuitive to see another branching here.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441720988", "createdAt": "2020-06-17T17:47:14Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2142,19 +2174,31 @@ public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTa\n             return Optional.empty();\n         }\n \n-        return Optional.of(new HivePartitioningHandle(\n-                smallerBucketCount,\n-                leftHandle.getHiveTypes(),\n-                maxCompatibleBucketCount));\n+        BucketFunctionType bucketFunctionType = leftHandle.getBucketFunctionType();\n+        switch (bucketFunctionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTYyNA==", "bodyText": "Ok, I will remove the restriction to not use HivePartitioningHandle constructor directly and and more checking in constructor.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441769624", "createdAt": "2020-06-17T19:02:35Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2142,19 +2174,31 @@ public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTa\n             return Optional.empty();\n         }\n \n-        return Optional.of(new HivePartitioningHandle(\n-                smallerBucketCount,\n-                leftHandle.getHiveTypes(),\n-                maxCompatibleBucketCount));\n+        BucketFunctionType bucketFunctionType = leftHandle.getBucketFunctionType();\n+        switch (bucketFunctionType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMDk4OA=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjAxMzczOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0Nzo1OFrOGlQiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0Nzo1OFrOGlQiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMTQwNw==", "bodyText": "hiveTypes.isPresent() is extra. It is checked in the HivePartitioningHandle constructor", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441721407", "createdAt": "2020-06-17T17:47:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2187,10 +2231,15 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         checkArgument(hiveLayoutHandle.getBucketHandle().isPresent(), \"Hive connector only provides alternative layout for bucketed table\");\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n+        Optional<List<HiveType>> hiveTypes = hivePartitioningHandle.getHiveTypes();\n         checkArgument(\n-                hivePartitioningHandle.getHiveTypes().equals(bucketTypes),\n+                hivePartitioningHandle.getBucketFunctionType().equals(HIVE_COMPATIBLE) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjAyOTcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1MjoxOFrOGlQsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1MjoxOFrOGlQsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMzk3OQ==", "bodyText": "nit: \"bucketFunctionType is expected to be HIVE_COMPATIBLE, got: %s\", hivePartitioningHandle.getBucketFunctionType(),", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441723979", "createdAt": "2020-06-17T17:52:18Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2187,10 +2231,15 @@ public ConnectorTableLayoutHandle getAlternativeLayoutHandle(ConnectorSession se\n         checkArgument(hiveLayoutHandle.getBucketHandle().isPresent(), \"Hive connector only provides alternative layout for bucketed table\");\n         HiveBucketHandle bucketHandle = hiveLayoutHandle.getBucketHandle().get();\n         ImmutableList<HiveType> bucketTypes = bucketHandle.getColumns().stream().map(HiveColumnHandle::getHiveType).collect(toImmutableList());\n+        Optional<List<HiveType>> hiveTypes = hivePartitioningHandle.getHiveTypes();\n         checkArgument(\n-                hivePartitioningHandle.getHiveTypes().equals(bucketTypes),\n+                hivePartitioningHandle.getBucketFunctionType().equals(HIVE_COMPATIBLE) &&\n+                        hiveTypes.isPresent(),\n+                \"partitionColumns in HiveTableLayoutHandle must use a hive compatible bucket function\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjAzMTg4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Mjo1MFrOGlQtqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Mjo1MFrOGlQtqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDMyOQ==", "bodyText": "nit: \"bucketFunctionType is expected to be HIVE_COMPATIBLE, got: %s\", bucketProperty.get().getBucketFunctionType()", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441724329", "createdAt": "2020-06-17T17:52:50Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2351,19 +2393,21 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n         if (!bucketProperty.isPresent()) {\n             return Optional.empty();\n         }\n+        checkArgument(bucketProperty.get().getBucketFunctionType().equals(BucketFunctionType.HIVE_COMPATIBLE), \"Must be hive compatible bucket function type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA0OTk0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1NzozNVrOGlQ5hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzoyOToxOFrOGmDVng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ==", "bodyText": "This should always be present, let's make it non Optional", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441727365", "createdAt": "2020-06-17T17:57:35Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTYyMA==", "bodyText": "I initially use non-optional, but there was failed test due to empty HiveBucketProperty", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441735620", "createdAt": "2020-06-17T18:12:08Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0Njc1OQ==", "bodyText": "In what case the HiveBucketProperty is missing?", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441746759", "createdAt": "2020-06-17T18:32:09Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MjY4MQ==", "bodyText": "Here are some examples: https://api.travis-ci.com/v3/job/347805400/log.txt,   HiveBucketProperty is optional inside Storage class", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441792681", "createdAt": "2020-06-17T19:47:12Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MjI4OQ==", "bodyText": "Okay, now I understand. The bucketProperty will be missing only if the table is \"virtually bucketed\". Let's have a special case for that to make it explicit, otherwise it is very confusing.\nHonestly i don't really like this method. It is very confusing. It is very hard to understand in what cases  bucketProperty is present, why bucketCount, hiveBucketHandle and maxCompatibleBucketCount may have different bucket count, etc. I would recommend to inline this method. It will result in a couple of lines of duplicated code, but it should make things much clearer.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441942289", "createdAt": "2020-06-18T03:05:16Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Mzc1OA==", "bodyText": "The constructor is inline now.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r442553758", "createdAt": "2020-06-18T23:29:18Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzM2NQ=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA1MTAxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Nzo1M1rOGlQ6OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowODo1MlrOGlTrcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzU0NA==", "bodyText": "Let's use hiveBucketHandle.getBucketCount() instead of passing it with parameter", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441727544", "createdAt": "2020-06-17T17:57:53Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MjkxNQ==", "bodyText": "One place is using getReadBucketCount(), the other place is using getTotalBucketCount()", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441772915", "createdAt": "2020-06-17T19:08:52Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzU0NA=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA1MjI1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1ODoxNVrOGlQ7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzowNTo0MVrOGleBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzc2Nw==", "bodyText": "Let's have a switch, similar to other places", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441727767", "createdAt": "2020-06-17T17:58:15Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        if (bucketProperty.isPresent() &&\n+                bucketProperty.get().getBucketFunctionType().equals(PRESTO_NATIVE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5ODkxMw==", "bodyText": "Since bucketProperty could be empty,  this function is a little different from other places:  if hive bucker property exists and indicates to use PRESTO_NATIVE, then use it, otherwise,  use the old way.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441798913", "createdAt": "2020-06-17T19:58:46Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        if (bucketProperty.isPresent() &&\n+                bucketProperty.get().getBucketFunctionType().equals(PRESTO_NATIVE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzc2Nw=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MjM3OA==", "bodyText": "It feels like the bucketProperty should be empty only if the table is virtually bucketed. Let's have a special case for that.", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441942378", "createdAt": "2020-06-18T03:05:41Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2603,27 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    private HivePartitioningHandle createHivePartitioningHandle(\n+            int bucketCount,\n+            HiveBucketHandle hiveBucketHandle,\n+            Optional<HiveBucketProperty> bucketProperty,\n+            OptionalInt maxCompatibleBucketCount)\n+    {\n+        if (bucketProperty.isPresent() &&\n+                bucketProperty.get().getBucketFunctionType().equals(PRESTO_NATIVE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzc2Nw=="}, "originalCommit": {"oid": "7e955991e3e5ef07cebc131db15971c397ef60da"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzM4NjMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzowOTo0OVrOGleFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzowOTo0OVrOGleFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MzM4Mw==", "bodyText": "nit: Expected bucketFunctionType to be HIVE_COMPATIBLE, got %s ...", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r441943383", "createdAt": "2020-06-18T03:09:49Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -324,7 +343,10 @@ private static int hashBytes(int initialValue, Slice bytes)\n \n     private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, Set<NullableValue>> bindings)\n     {\n-        List<String> bucketColumns = table.getStorage().getBucketProperty().get().getBucketedBy();\n+        HiveBucketProperty hiveBucketProperty = table.getStorage().getBucketProperty().get();\n+        checkArgument(hiveBucketProperty.getBucketFunctionType().equals(HIVE_COMPATIBLE),\n+                \"Expect hive compatible bucket function type to calculate bucket number based on Hive TypeInfo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "445f7132e30e48cfcec31cc9605822eecc6add01"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTE3MzIyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNzo0NVrOGmWyVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNzo0NVrOGmWyVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MjQwNA==", "bodyText": "nit: new IllegalArgumentException(\"bucketProperty is expected to be present\")", "url": "https://github.com/prestodb/presto/pull/14631#discussion_r442872404", "createdAt": "2020-06-19T14:27:45Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2074,16 +2100,48 @@ public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTa\n         // never ignore table bucketing for temporary tables as those are created such explicitly by the engine request\n         boolean bucketExecutionEnabled = table.getTableType().equals(TEMPORARY_TABLE) || isBucketExecutionEnabled(session);\n         if (bucketExecutionEnabled && hiveLayoutHandle.getBucketHandle().isPresent()) {\n-            tablePartitioning = hiveLayoutHandle.getBucketHandle().map(hiveBucketHandle -> new ConnectorTablePartitioning(\n-                    new HivePartitioningHandle(\n-                            hiveBucketHandle.getReadBucketCount(),\n-                            hiveBucketHandle.getColumns().stream()\n-                                    .map(HiveColumnHandle::getHiveType)\n-                                    .collect(Collectors.toList()),\n-                            OptionalInt.empty()),\n+            HiveBucketHandle hiveBucketHandle = hiveLayoutHandle.getBucketHandle().get();\n+            HivePartitioningHandle partitioningHandle;\n+            int bucketCount = hiveBucketHandle.getReadBucketCount();\n+            OptionalInt maxCompatibleBucketCount = OptionalInt.empty();\n+\n+            // Virtually bucketed table does not have table bucket property\n+            if (hiveBucketHandle.isVirtuallyBucketed()) {\n+                partitioningHandle = createHiveCompatiblePartitioningHandle(\n+                        bucketCount,\n+                        hiveBucketHandle.getColumns().stream()\n+                                .map(HiveColumnHandle::getHiveType)\n+                                .collect(toImmutableList()),\n+                        maxCompatibleBucketCount);\n+            }\n+            else {\n+                HiveBucketProperty bucketProperty = table.getStorage().getBucketProperty()\n+                        .orElseThrow(() -> new NoSuchElementException(\"Bucket property should be set\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5217aa45e58861a5c1791f2f6fa0213f818b2426"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2413, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}