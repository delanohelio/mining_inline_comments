{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDU5NTM3", "number": 14045, "title": "Add Hive directory listing cache", "bodyText": "Cherry-pick of trinodb/trino@b25ebeb\nCo-authored-by: Zhenxiao Luo zluo@twitter.com\n== RELEASE NOTES ==\n\nHive Changes\n* Add directory listing cache for Hive Connector", "createdAt": "2020-02-02T21:41:01Z", "url": "https://github.com/prestodb/presto/pull/14045", "merged": true, "mergeCommit": {"oid": "ceb5784d26c2128944c617fb4a24b01539f42d02"}, "closed": true, "closedAt": "2020-02-12T23:20:26Z", "author": {"login": "zhenxiao"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAgPP7AFqTM1MTk3MzA0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDtuleABqjMwMzI2MzUwODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTczMDQ2", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-351973046", "createdAt": "2020-02-02T22:39:42Z", "commit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NTk4ODYx", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-354598861", "createdAt": "2020-02-06T16:38:18Z", "commit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjozODoxOFrOFmiBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjo1MToxNFrOFmighw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0NzY0Mg==", "bodyText": "I'm wondering if this class could be written in a way that it only handles caching, and delegate the actual listing to the actual DirectoryLister? CachingHiveMetastore might be a good reference. This would make it easier for other DirectoryLister implementation to benefit from the caching functionality.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375947642", "createdAt": "2020-02-06T16:38:18Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.Weigher;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.weakref.jmx.Managed;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILE_NOT_FOUND;\n+import static com.facebook.presto.hive.HiveFileInfo.createHiveFileInfo;\n+import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CachingDirectoryLister", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0ODY3OQ==", "bodyText": "I personally feel it might be better if tables are parsed before passed in. No strong opinion.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375948679", "createdAt": "2020-02-06T16:40:04Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.Weigher;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.weakref.jmx.Managed;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILE_NOT_FOUND;\n+import static com.facebook.presto.hive.HiveFileInfo.createHiveFileInfo;\n+import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CachingDirectoryLister\n+        implements DirectoryLister\n+{\n+    private final Cache<Path, List<LocatedFileStatus>> cache;\n+    private final Set<SchemaTableName> tableNames;\n+\n+    @Inject\n+    public CachingDirectoryLister(HiveClientConfig hiveClientConfig)\n+    {\n+        this(hiveClientConfig.getFileStatusCacheExpireAfterWrite(), hiveClientConfig.getFileStatusCacheMaxSize(), hiveClientConfig.getFileStatusCacheTables());\n+    }\n+\n+    public CachingDirectoryLister(Duration expireAfterWrite, long maxSize, List<String> tables)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0OTE2NQ==", "bodyText": "Is this final really necessary?", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375949165", "createdAt": "2020-02-06T16:40:48Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.Weigher;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.weakref.jmx.Managed;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILE_NOT_FOUND;\n+import static com.facebook.presto.hive.HiveFileInfo.createHiveFileInfo;\n+import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CachingDirectoryLister\n+        implements DirectoryLister\n+{\n+    private final Cache<Path, List<LocatedFileStatus>> cache;\n+    private final Set<SchemaTableName> tableNames;\n+\n+    @Inject\n+    public CachingDirectoryLister(HiveClientConfig hiveClientConfig)\n+    {\n+        this(hiveClientConfig.getFileStatusCacheExpireAfterWrite(), hiveClientConfig.getFileStatusCacheMaxSize(), hiveClientConfig.getFileStatusCacheTables());\n+    }\n+\n+    public CachingDirectoryLister(Duration expireAfterWrite, long maxSize, List<String> tables)\n+    {\n+        this.cache = CacheBuilder.newBuilder()\n+                .maximumWeight(maxSize)\n+                .weigher((Weigher<Path, List<LocatedFileStatus>>) (key, value) -> value.size())\n+                .expireAfterWrite(expireAfterWrite.toMillis(), TimeUnit.MILLISECONDS)\n+                .recordStats()\n+                .build();\n+        this.tableNames = tables.stream()\n+                .map(CachingDirectoryLister::parseTableName)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private static SchemaTableName parseTableName(String tableName)\n+    {\n+        String[] parts = tableName.split(\"\\\\.\");\n+        checkArgument(parts.length == 2, \"Invalid schemaTableName: %s\", tableName);\n+        return new SchemaTableName(parts[0], parts[1]);\n+    }\n+\n+    @Override\n+    public Iterator<HiveFileInfo> list(FileSystem fileSystem, Table table, Path path, NamenodeStats namenodeStats, NestedDirectoryPolicy nestedDirectoryPolicy)\n+    {\n+        SchemaTableName schemaTableName = new SchemaTableName(table.getDatabaseName(), table.getTableName());\n+\n+        List<LocatedFileStatus> files = cache.getIfPresent(path);\n+        if (files != null) {\n+            return new HiveFileIterator(path, p -> new HadoopFileInfoIterator(simpleRemoteIterator(files)), namenodeStats, nestedDirectoryPolicy);\n+        }\n+        RemoteIterator<LocatedFileStatus> iterator = null;\n+        try {\n+            iterator = fileSystem.listLocatedStatus(path);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Hive file location does not exist: \" + path);\n+        }\n+\n+        if (!tableNames.contains(schemaTableName)) {\n+            final HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(iterator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0OTIzMQ==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375949231", "createdAt": "2020-02-06T16:40:52Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.Weigher;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.weakref.jmx.Managed;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILE_NOT_FOUND;\n+import static com.facebook.presto.hive.HiveFileInfo.createHiveFileInfo;\n+import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CachingDirectoryLister\n+        implements DirectoryLister\n+{\n+    private final Cache<Path, List<LocatedFileStatus>> cache;\n+    private final Set<SchemaTableName> tableNames;\n+\n+    @Inject\n+    public CachingDirectoryLister(HiveClientConfig hiveClientConfig)\n+    {\n+        this(hiveClientConfig.getFileStatusCacheExpireAfterWrite(), hiveClientConfig.getFileStatusCacheMaxSize(), hiveClientConfig.getFileStatusCacheTables());\n+    }\n+\n+    public CachingDirectoryLister(Duration expireAfterWrite, long maxSize, List<String> tables)\n+    {\n+        this.cache = CacheBuilder.newBuilder()\n+                .maximumWeight(maxSize)\n+                .weigher((Weigher<Path, List<LocatedFileStatus>>) (key, value) -> value.size())\n+                .expireAfterWrite(expireAfterWrite.toMillis(), TimeUnit.MILLISECONDS)\n+                .recordStats()\n+                .build();\n+        this.tableNames = tables.stream()\n+                .map(CachingDirectoryLister::parseTableName)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private static SchemaTableName parseTableName(String tableName)\n+    {\n+        String[] parts = tableName.split(\"\\\\.\");\n+        checkArgument(parts.length == 2, \"Invalid schemaTableName: %s\", tableName);\n+        return new SchemaTableName(parts[0], parts[1]);\n+    }\n+\n+    @Override\n+    public Iterator<HiveFileInfo> list(FileSystem fileSystem, Table table, Path path, NamenodeStats namenodeStats, NestedDirectoryPolicy nestedDirectoryPolicy)\n+    {\n+        SchemaTableName schemaTableName = new SchemaTableName(table.getDatabaseName(), table.getTableName());\n+\n+        List<LocatedFileStatus> files = cache.getIfPresent(path);\n+        if (files != null) {\n+            return new HiveFileIterator(path, p -> new HadoopFileInfoIterator(simpleRemoteIterator(files)), namenodeStats, nestedDirectoryPolicy);\n+        }\n+        RemoteIterator<LocatedFileStatus> iterator = null;\n+        try {\n+            iterator = fileSystem.listLocatedStatus(path);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Hive file location does not exist: \" + path);\n+        }\n+\n+        if (!tableNames.contains(schemaTableName)) {\n+            final HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(iterator);\n+            return new HiveFileIterator(path, p -> fileIterator, namenodeStats, nestedDirectoryPolicy);\n+        }\n+        final HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(cachingRemoteIterator(iterator, path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1MTA2OQ==", "bodyText": "nit: how about cachedTableNames?", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375951069", "createdAt": "2020-02-06T16:43:44Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.Weigher;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.weakref.jmx.Managed;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILE_NOT_FOUND;\n+import static com.facebook.presto.hive.HiveFileInfo.createHiveFileInfo;\n+import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CachingDirectoryLister\n+        implements DirectoryLister\n+{\n+    private final Cache<Path, List<LocatedFileStatus>> cache;\n+    private final Set<SchemaTableName> tableNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1MTQ2Mw==", "bodyText": "Maybe we should make the default value to be unused? For example, expire immediately after write and keep cache size to be 0. Though I understand that by setting fileStatusCacheTables to empty list, this feature is effectively disabled. Open to different opinions :)", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375951463", "createdAt": "2020-02-06T16:44:22Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -155,6 +157,10 @@\n     private boolean adaptiveFilterReorderingEnabled = true;\n     private boolean zstdJniDecompressionEnabled;\n \n+    private Duration fileStatusCacheExpireAfterWrite = new Duration(1, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NTU5MQ==", "bodyText": "This being a config seems to be a bit inflexible for making changes if the hot table changes as workload shifts, since it would require a cluster restart. Yet I don't see an easy way besides using a mysql table for dynamic configuration (like DbResourceGroupConfigurationManager), so maybe we should just keep it as is.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r375955591", "createdAt": "2020-02-06T16:51:14Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -155,6 +157,10 @@\n     private boolean adaptiveFilterReorderingEnabled = true;\n     private boolean zstdJniDecompressionEnabled;\n \n+    private Duration fileStatusCacheExpireAfterWrite = new Duration(1, TimeUnit.MINUTES);\n+    private long fileStatusCacheMaxSize = 1000 * 1000;\n+    private List<String> fileStatusCacheTables = ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be783992ab56c75d7384a5e9910ac52ea0b0fd52"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODIyNjEz", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-356822613", "createdAt": "2020-02-11T16:51:13Z", "commit": {"oid": "a10d2d4c939c196005b58b7427176abe1ff2e432"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1MToxM1rOFoQ0aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1MTo0MVrOFoQ1ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MjkyMw==", "bodyText": "nit: Maybe cachedTableNames = ImmutableSet.copyOf(requireNonNull(cachedTableNames, \"cachedTableNames is null\"). I'm not sure if a defensive copy is necessary here though.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r377762923", "createdAt": "2020-02-11T16:51:13Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -49,25 +49,28 @@\n         implements DirectoryLister\n {\n     private final Cache<Path, List<LocatedFileStatus>> cache;\n-    private final Set<SchemaTableName> tableNames;\n+    private final Set<SchemaTableName> cachedTableNames;\n \n     @Inject\n     public CachingDirectoryLister(HiveClientConfig hiveClientConfig)\n     {\n-        this(hiveClientConfig.getFileStatusCacheExpireAfterWrite(), hiveClientConfig.getFileStatusCacheMaxSize(), hiveClientConfig.getFileStatusCacheTables());\n+        this(\n+                hiveClientConfig.getFileStatusCacheExpireAfterWrite(),\n+                hiveClientConfig.getFileStatusCacheMaxSize(),\n+                hiveClientConfig.getFileStatusCacheTables().stream()\n+                        .map(CachingDirectoryLister::parseTableName)\n+                        .collect(Collectors.toSet()));\n     }\n \n-    public CachingDirectoryLister(Duration expireAfterWrite, long maxSize, List<String> tables)\n+    public CachingDirectoryLister(Duration expireAfterWrite, long maxSize, Set<SchemaTableName> tables)\n     {\n-        this.cache = CacheBuilder.newBuilder()\n+        cache = CacheBuilder.newBuilder()\n                 .maximumWeight(maxSize)\n                 .weigher((Weigher<Path, List<LocatedFileStatus>>) (key, value) -> value.size())\n                 .expireAfterWrite(expireAfterWrite.toMillis(), TimeUnit.MILLISECONDS)\n                 .recordStats()\n                 .build();\n-        this.tableNames = tables.stream()\n-                .map(CachingDirectoryLister::parseTableName)\n-                .collect(Collectors.toSet());\n+        cachedTableNames = tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10d2d4c939c196005b58b7427176abe1ff2e432"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MzIxMA==", "bodyText": "nit: set to 0 as well? 1000 * 1000 is very weird \ud83d\ude02.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r377763210", "createdAt": "2020-02-11T16:51:41Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -157,7 +157,7 @@\n     private boolean adaptiveFilterReorderingEnabled = true;\n     private boolean zstdJniDecompressionEnabled;\n \n-    private Duration fileStatusCacheExpireAfterWrite = new Duration(1, TimeUnit.MINUTES);\n+    private Duration fileStatusCacheExpireAfterWrite = new Duration(0, TimeUnit.SECONDS);\n     private long fileStatusCacheMaxSize = 1000 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10d2d4c939c196005b58b7427176abe1ff2e432"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODM4MjA0", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-356838204", "createdAt": "2020-02-11T17:10:46Z", "commit": {"oid": "29c63617da61fa6475b209a7ac65cc69868df58c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxMDo0NlrOFoRkWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxMDo0NlrOFoRkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NTE5NQ==", "bodyText": "Is it possible to cache HiveFileInfo, for example Cache<Path, List<HiveFileInfo>> cache? This way we don't need the wrappers around iterator, and thus could directly use the result from delegete#list.", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r377775195", "createdAt": "2020-02-11T17:10:46Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -98,38 +101,12 @@ private static SchemaTableName parseTableName(String tableName)\n         }\n \n         if (!cachedTableNames.contains(schemaTableName)) {\n-            HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(iterator);\n-            return new HiveFileIterator(path, p -> fileIterator, namenodeStats, nestedDirectoryPolicy);\n+            return delegate.list(fileSystem, table, path, namenodeStats, nestedDirectoryPolicy);\n         }\n         HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(cachingRemoteIterator(iterator, path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c63617da61fa6475b209a7ac65cc69868df58c"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1755232949f1286bd9f9d167b40d3737ba1191e", "author": {"user": {"login": "qqibrow", "name": "qqibrow"}}, "url": "https://github.com/prestodb/presto/commit/c1755232949f1286bd9f9d167b40d3737ba1191e", "committedDate": "2020-02-11T20:08:07Z", "message": "Add Hive directory listing cache\n\nCherry-pick of https://github.com/prestosql/presto/commit/b25ebeb43f06f4c4b86280f1b5f62ad22918c312\n\nCo-authored-by: Zhenxiao Luo <zluo@twitter.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a5a716e021f37a6c3d0a3f3a88222bbd11e317", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/c8a5a716e021f37a6c3d0a3f3a88222bbd11e317", "committedDate": "2020-02-11T20:22:00Z", "message": "Make file status cache disabled by default"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29c63617da61fa6475b209a7ac65cc69868df58c", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/29c63617da61fa6475b209a7ac65cc69868df58c", "committedDate": "2020-02-11T01:23:56Z", "message": "Implement CachingDirectoryListor with delegation"}, "afterCommit": {"oid": "99f6380dd0f6f17d36110fda754143b70c6f70bb", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/99f6380dd0f6f17d36110fda754143b70c6f70bb", "committedDate": "2020-02-11T22:05:00Z", "message": "Implement CachingDirectoryListor with delegation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Njc5NDY1", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-357679465", "createdAt": "2020-02-12T18:19:04Z", "commit": {"oid": "99f6380dd0f6f17d36110fda754143b70c6f70bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxOTowNVrOFo5bXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxOTowNVrOFo5bXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyODI1Mw==", "bodyText": "I was imagining if we could do the following:\nIterator<HiveFileInfo> iterator = delegate.list(...);\nif (cachedTableNames.contains(schemaTableName)) {\n  return cachingIterator(iterator, path); \n}\nreturn iterator;\n\nAnd then we also change cachingRemoteIterator to:\nIterator<HiveFileInfo> cachingIterator(Iterator<HiveFileInfo> iterator, Path path) {\n  return new Iterator<HiveFileInfo>() {\n    private final List<HiveFileInfo> files = new ArrayList<>();\n    ...\n  };\n}\n\nThe reason I'm asking is that the current design does not really go through the delegate DirectoryLister when we need to leverage cache. Let me know what you think :) Besides this, all looks good!", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r378428253", "createdAt": "2020-02-12T18:19:05Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -87,49 +92,23 @@ private static SchemaTableName parseTableName(String tableName)\n     {\n         SchemaTableName schemaTableName = new SchemaTableName(table.getDatabaseName(), table.getTableName());\n \n-        List<LocatedFileStatus> files = cache.getIfPresent(path);\n+        List<HiveFileInfo> files = cache.getIfPresent(path);\n         if (files != null) {\n-            return new HiveFileIterator(path, p -> new HadoopFileInfoIterator(simpleRemoteIterator(files)), namenodeStats, nestedDirectoryPolicy, pathFilter);\n-        }\n-        RemoteIterator<LocatedFileStatus> iterator = null;\n-        try {\n-            iterator = fileSystem.listLocatedStatus(path);\n-        }\n-        catch (IOException e) {\n-            throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Hive file location does not exist: \" + path);\n+            return files.iterator();\n         }\n \n-        if (!cachedTableNames.contains(schemaTableName)) {\n-            HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(iterator);\n+        if (cachedTableNames.contains(schemaTableName)) {\n+            RemoteIterator<LocatedFileStatus> iterator = null;\n+            try {\n+                iterator = fileSystem.listLocatedStatus(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f6380dd0f6f17d36110fda754143b70c6f70bb"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99f6380dd0f6f17d36110fda754143b70c6f70bb", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/99f6380dd0f6f17d36110fda754143b70c6f70bb", "committedDate": "2020-02-11T22:05:00Z", "message": "Implement CachingDirectoryListor with delegation"}, "afterCommit": {"oid": "9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3", "committedDate": "2020-02-12T20:45:02Z", "message": "Implement CachingDirectoryListor with delegation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODA0NDMz", "url": "https://github.com/prestodb/presto/pull/14045#pullrequestreview-357804433", "createdAt": "2020-02-12T21:35:18Z", "commit": {"oid": "9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTozNToxOVrOFo_YtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo0MDowNFrOFo_hkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyNTg3Ng==", "bodyText": "nit: maybe keep the safe copy part of code?", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r378525876", "createdAt": "2020-02-12T21:35:19Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -87,101 +82,44 @@ private static SchemaTableName parseTableName(String tableName)\n     {\n         SchemaTableName schemaTableName = new SchemaTableName(table.getDatabaseName(), table.getTableName());\n \n-        List<LocatedFileStatus> files = cache.getIfPresent(path);\n+        List<HiveFileInfo> files = cache.getIfPresent(path);\n         if (files != null) {\n-            return new HiveFileIterator(path, p -> new HadoopFileInfoIterator(simpleRemoteIterator(files)), namenodeStats, nestedDirectoryPolicy, pathFilter);\n-        }\n-        RemoteIterator<LocatedFileStatus> iterator = null;\n-        try {\n-            iterator = fileSystem.listLocatedStatus(path);\n-        }\n-        catch (IOException e) {\n-            throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Hive file location does not exist: \" + path);\n-        }\n-\n-        if (!cachedTableNames.contains(schemaTableName)) {\n-            HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(iterator);\n-            return new HiveFileIterator(path, p -> fileIterator, namenodeStats, nestedDirectoryPolicy, pathFilter);\n+            return files.iterator();\n         }\n-        HadoopFileInfoIterator fileIterator = new HadoopFileInfoIterator(cachingRemoteIterator(iterator, path));\n-        return new HiveFileIterator(path, p -> fileIterator, namenodeStats, nestedDirectoryPolicy, pathFilter);\n-    }\n-\n-    public static class HadoopFileInfoIterator\n-            implements RemoteIterator<HiveFileInfo>\n-    {\n-        private final RemoteIterator<LocatedFileStatus> locatedFileStatusIterator;\n \n-        public HadoopFileInfoIterator(RemoteIterator<LocatedFileStatus> locatedFileStatusIterator)\n-        {\n-            this.locatedFileStatusIterator = requireNonNull(locatedFileStatusIterator, \"locatedFileStatusIterator is null\");\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-                throws IOException\n-        {\n-            return locatedFileStatusIterator.hasNext();\n-        }\n-\n-        @Override\n-        public HiveFileInfo next()\n-                throws IOException\n-        {\n-            return createHiveFileInfo(locatedFileStatusIterator.next(), Optional.empty());\n+        Iterator<HiveFileInfo> iterator = delegate.list(fileSystem, table, path, namenodeStats, nestedDirectoryPolicy, pathFilter);\n+        if (cachedTableNames.contains(schemaTableName)) {\n+            return cachingIterator(iterator, path);\n         }\n+        return iterator;\n     }\n \n-    private RemoteIterator<LocatedFileStatus> cachingRemoteIterator(RemoteIterator<LocatedFileStatus> iterator, Path path)\n+    private Iterator<HiveFileInfo> cachingIterator(Iterator<HiveFileInfo> iterator, Path path)\n     {\n-        return new RemoteIterator<LocatedFileStatus>()\n+        return new Iterator<HiveFileInfo>()\n         {\n-            private final List<LocatedFileStatus> files = new ArrayList<>();\n+            private final List<HiveFileInfo> files = new ArrayList<>();\n \n             @Override\n             public boolean hasNext()\n-                    throws IOException\n             {\n                 boolean hasNext = iterator.hasNext();\n                 if (!hasNext) {\n-                    cache.put(path, ImmutableList.copyOf(files));\n+                    cache.put(path, files);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODE0NA==", "bodyText": "nit: Maybe move this down to the changes below to keep DirectoryLister binding code together?", "url": "https://github.com/prestodb/presto/pull/14045#discussion_r378528144", "createdAt": "2020-02-12T21:40:04Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -97,7 +97,7 @@ public void configure(Binder binder)\n \n         binder.bind(HdfsConfigurationInitializer.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, DynamicConfigurationProvider.class);\n-        binder.bind(DirectoryLister.class).to(CachingDirectoryLister.class).in(Scopes.SINGLETON);\n+        binder.bind(DirectoryLister.class).annotatedWith(ForCachingDirectoryLister.class).to(HadoopDirectoryLister.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4673047053ed4296c5b88f0709411006d10e4d0b", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/4673047053ed4296c5b88f0709411006d10e4d0b", "committedDate": "2020-02-12T22:04:12Z", "message": "Implement CachingDirectoryListor with delegation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/9e9de7ed37223fa1fc66dc3e0d678b1c13a4e1e3", "committedDate": "2020-02-12T20:45:02Z", "message": "Implement CachingDirectoryListor with delegation"}, "afterCommit": {"oid": "4673047053ed4296c5b88f0709411006d10e4d0b", "author": {"user": {"login": "zhenxiao", "name": "Zhenxiao Luo"}}, "url": "https://github.com/prestodb/presto/commit/4673047053ed4296c5b88f0709411006d10e4d0b", "committedDate": "2020-02-12T22:04:12Z", "message": "Implement CachingDirectoryListor with delegation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}