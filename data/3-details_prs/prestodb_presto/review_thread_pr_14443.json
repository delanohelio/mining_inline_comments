{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjA3MzUy", "number": 14443, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMDoxNlrOD20kqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1ODowMlrOD22MMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODExMDUwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMDoxNlrOGMwe8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMjoxOVrOGMwk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMDQ1MQ==", "bodyText": "Shouldn't the return type be qdigest(T)?", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416030451", "createdAt": "2020-04-27T18:00:16Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: scale_qdigest(qdigest(T), scale_factor) -> T", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e6ea808bcd60572b35ad34a3ca78c7b3381cc2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMTk3NQ==", "bodyText": "Yep, fixed.", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416031975", "createdAt": "2020-04-27T18:02:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: scale_qdigest(qdigest(T), scale_factor) -> T", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMDQ1MQ=="}, "originalCommit": {"oid": "62e6ea808bcd60572b35ad34a3ca78c7b3381cc2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODM3MTc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NzoxMFrOGMy21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NzoxMFrOGMy21w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTMzNQ==", "bodyText": "private static", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069335", "createdAt": "2020-04-27T18:57:10Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testScaleNegative()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+    }\n+\n+    @Test\n+    public void testScale()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        // Before scaling.\n+        assertEquals(qdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(1, 0),\n+                        new QuantileDigest.Bucket(1, 1),\n+                        new QuantileDigest.Bucket(1, 2),\n+                        new QuantileDigest.Bucket(1, 3),\n+                        new QuantileDigest.Bucket(1, 4),\n+                        new QuantileDigest.Bucket(1, 5),\n+                        new QuantileDigest.Bucket(1, 6),\n+                        new QuantileDigest.Bucket(1, 7),\n+                        new QuantileDigest.Bucket(1, 8),\n+                        new QuantileDigest.Bucket(1, 9)));\n+\n+        // Scale up.\n+        SqlVarbinary sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 2)\", toHexString(qdigest)),\n+                QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        QuantileDigest scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(2, 0),\n+                        new QuantileDigest.Bucket(2, 1),\n+                        new QuantileDigest.Bucket(2, 2),\n+                        new QuantileDigest.Bucket(2, 3),\n+                        new QuantileDigest.Bucket(2, 4),\n+                        new QuantileDigest.Bucket(2, 5),\n+                        new QuantileDigest.Bucket(2, 6),\n+                        new QuantileDigest.Bucket(2, 7),\n+                        new QuantileDigest.Bucket(2, 8),\n+                        new QuantileDigest.Bucket(2, 9)));\n+\n+        // Scale down.\n+        sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(0.5, 0),\n+                        new QuantileDigest.Bucket(0.5, 1),\n+                        new QuantileDigest.Bucket(0.5, 2),\n+                        new QuantileDigest.Bucket(0.5, 3),\n+                        new QuantileDigest.Bucket(0.5, 4),\n+                        new QuantileDigest.Bucket(0.5, 5),\n+                        new QuantileDigest.Bucket(0.5, 6),\n+                        new QuantileDigest.Bucket(0.5, 7),\n+                        new QuantileDigest.Bucket(0.5, 8),\n+                        new QuantileDigest.Bucket(0.5, 9)));\n+    }\n+\n+    private void addAll(QuantileDigest digest, long... values)\n+    {\n+        requireNonNull(values, \"values is null\");\n+        for (long value : values) {\n+            digest.add(value);\n+        }\n+    }\n+\n+    private String toHexString(QuantileDigest qdigest)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a1a295c121b22b60164c692e8ae2837bb16723"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODM3MjM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NzoxOVrOGMy3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NzoxOVrOGMy3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTQzMw==", "bodyText": "private static", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069433", "createdAt": "2020-04-27T18:57:19Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testScaleNegative()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+    }\n+\n+    @Test\n+    public void testScale()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        // Before scaling.\n+        assertEquals(qdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(1, 0),\n+                        new QuantileDigest.Bucket(1, 1),\n+                        new QuantileDigest.Bucket(1, 2),\n+                        new QuantileDigest.Bucket(1, 3),\n+                        new QuantileDigest.Bucket(1, 4),\n+                        new QuantileDigest.Bucket(1, 5),\n+                        new QuantileDigest.Bucket(1, 6),\n+                        new QuantileDigest.Bucket(1, 7),\n+                        new QuantileDigest.Bucket(1, 8),\n+                        new QuantileDigest.Bucket(1, 9)));\n+\n+        // Scale up.\n+        SqlVarbinary sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 2)\", toHexString(qdigest)),\n+                QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        QuantileDigest scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(2, 0),\n+                        new QuantileDigest.Bucket(2, 1),\n+                        new QuantileDigest.Bucket(2, 2),\n+                        new QuantileDigest.Bucket(2, 3),\n+                        new QuantileDigest.Bucket(2, 4),\n+                        new QuantileDigest.Bucket(2, 5),\n+                        new QuantileDigest.Bucket(2, 6),\n+                        new QuantileDigest.Bucket(2, 7),\n+                        new QuantileDigest.Bucket(2, 8),\n+                        new QuantileDigest.Bucket(2, 9)));\n+\n+        // Scale down.\n+        sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(0.5, 0),\n+                        new QuantileDigest.Bucket(0.5, 1),\n+                        new QuantileDigest.Bucket(0.5, 2),\n+                        new QuantileDigest.Bucket(0.5, 3),\n+                        new QuantileDigest.Bucket(0.5, 4),\n+                        new QuantileDigest.Bucket(0.5, 5),\n+                        new QuantileDigest.Bucket(0.5, 6),\n+                        new QuantileDigest.Bucket(0.5, 7),\n+                        new QuantileDigest.Bucket(0.5, 8),\n+                        new QuantileDigest.Bucket(0.5, 9)));\n+    }\n+\n+    private void addAll(QuantileDigest digest, long... values)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a1a295c121b22b60164c692e8ae2837bb16723"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODM3NDY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1Nzo0OVrOGMy4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1Nzo0OVrOGMy4iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTc2OQ==", "bodyText": "add expected regexp", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069769", "createdAt": "2020-04-27T18:57:49Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a1a295c121b22b60164c692e8ae2837bb16723"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODM3NTU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1ODowMlrOGMy5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1ODowMlrOGMy5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTkxMw==", "bodyText": "add expected regexp, to avoid future changes change the actual exception being thrown.", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069913", "createdAt": "2020-04-27T18:58:02Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a1a295c121b22b60164c692e8ae2837bb16723"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2822, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}