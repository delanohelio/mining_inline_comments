{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1Njg5OTMx", "number": 14108, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNTo1M1rODgJsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODoyNzozMlrODj6Ngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5ODMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNTo1M1rOFqOb7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNTo1M1rOFqOb7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTAzNg==", "bodyText": "Make a public static final constant in class SplitContext for new SplitContext(false) and use it everywhere in the codebase when necessary.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821036", "createdAt": "2020-02-15T09:35:53Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java", "diffHunk": "@@ -1962,7 +1963,7 @@ private void doTestBucketedTableEvolutionWithDifferentReadCount(HiveStorageForma\n \n             ImmutableList.Builder<MaterializedRow> allRows = ImmutableList.builder();\n             for (ConnectorSplit split : splits) {\n-                try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(transaction.getTransactionHandle(), session, split, tableHandle.getLayout().get(), columnHandles)) {\n+                try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(transaction.getTransactionHandle(), session, split, tableHandle.getLayout().get(), columnHandles, new SplitContext(false))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5OTA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNzozN1rOFqOcSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNzozN1rOFqOcSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTEzMA==", "bodyText": "private", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821130", "createdAt": "2020-02-15T09:37:37Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +210,26 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(node, true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(chosenNode, false);\n+    }\n+\n+    static class NodeResult", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5OTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNzo0NVrOFqOcTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozNzo0NVrOFqOcTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTEzMw==", "bodyText": "Optional.ofNullable", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821133", "createdAt": "2020-02-15T09:37:45Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +210,26 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(node, true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(chosenNode, false);\n+    }\n+\n+    static class NodeResult\n+    {\n+        private InternalNode node;\n+        boolean shouldCache;\n+\n+        public NodeResult(InternalNode node, boolean shouldCache)\n+        {\n+            this.node = node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5OTIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozODowMVrOFqOcXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozODowMVrOFqOcXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTE0OA==", "bodyText": "never access raw members. Use getter and setter", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821148", "createdAt": "2020-02-15T09:38:01Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +150,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (chosenNode.node == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5OTc3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozOToyNVrOFqOcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozOToyNVrOFqOcoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTIxNg==", "bodyText": "Optional", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821216", "createdAt": "2020-02-15T09:39:25Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +210,26 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(node, true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(chosenNode, false);\n+    }\n+\n+    static class NodeResult\n+    {\n+        private InternalNode node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDM5OTg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozOTo0MVrOFqOcqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTozOTo0MVrOFqOcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTIyNQ==", "bodyText": "chosenNode.getNode.isPresent()", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821225", "createdAt": "2020-02-15T09:39:41Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +150,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (chosenNode.node == null) {\n                 chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getQueuedSplitCountForStage, preferredNodeCount, maxPendingSplitsPerTask);\n             }\n \n-            if (chosenNode != null) {\n-                assignment.put(chosenNode, split);\n-                assignmentStats.addAssignedSplit(chosenNode);\n+            if (chosenNode.node != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQwMDE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0MDozNlrOFqOczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0MDozNlrOFqOczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTI2MA==", "bodyText": "@Nullable", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821260", "createdAt": "2020-02-15T09:40:36Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +210,26 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(node, true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(chosenNode, false);\n+    }\n+\n+    static class NodeResult\n+    {\n+        private InternalNode node;\n+        boolean shouldCache;\n+\n+        public NodeResult(InternalNode node, boolean shouldCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQwMjMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NjowM1rOFqOdzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NjowM1rOFqOdzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTUxNw==", "bodyText": "this is not used anywhere", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821517", "createdAt": "2020-02-15T09:46:03Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -33,24 +34,32 @@\n     private final ConnectorTransactionHandle transactionHandle;\n     private final ConnectorSplit connectorSplit;\n     private final Lifespan lifespan;\n+    private final SplitContext splitContext;\n \n     // TODO: inline\n     public Split(ConnectorId connectorId, ConnectorTransactionHandle transactionHandle, ConnectorSplit connectorSplit)\n     {\n-        this(connectorId, transactionHandle, connectorSplit, Lifespan.taskWide());\n+        this(connectorId, transactionHandle, connectorSplit, Lifespan.taskWide(), new SplitContext(false));\n+    }\n+\n+    public Split(ConnectorId connectorId, ConnectorTransactionHandle transactionHandle, ConnectorSplit connectorSplit, SplitContext splitContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQwMjU1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0Njo0MFrOFqOd6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0Njo0MFrOFqOd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTU0NA==", "bodyText": "cachable", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821544", "createdAt": "2020-02-15T09:46:40Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public class SplitContext\n+{\n+    boolean shouldCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQwMjc0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorPageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NzowNFrOFqOd_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NzowNFrOFqOd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTU2NA==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821564", "createdAt": "2020-02-15T09:47:04Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorPageSourceProvider.java", "diffHunk": "@@ -18,25 +18,39 @@\n import com.facebook.presto.spi.ConnectorSession;\n import com.facebook.presto.spi.ConnectorSplit;\n import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.SplitContext;\n \n import java.util.List;\n \n public interface ConnectorPageSourceProvider\n {\n     /**\n      * @param columns columns that should show up in the output page, in this order\n+     * @param splitContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQwMjgxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorPageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NzoxNlrOFqOeBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOTo0NzoxNlrOFqOeBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMTU3Mw==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379821573", "createdAt": "2020-02-15T09:47:16Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorPageSourceProvider.java", "diffHunk": "@@ -18,25 +18,39 @@\n import com.facebook.presto.spi.ConnectorSession;\n import com.facebook.presto.spi.ConnectorSplit;\n import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.SplitContext;\n \n import java.util.List;\n \n public interface ConnectorPageSourceProvider\n {\n     /**\n      * @param columns columns that should show up in the output page, in this order\n+     * @param splitContext\n      */\n     @Deprecated\n-    default ConnectorPageSource createPageSource(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorSplit split, List<ColumnHandle> columns)\n+    default ConnectorPageSource createPageSource(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorSplit split,\n+            List<ColumnHandle> columns,\n+            SplitContext splitContext)\n     {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n      * @param columns columns that should show up in the output page, in this order\n+     * @param splitContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae6c198c1a53a7b805dd0f15de211142f1342e9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc1NDcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDo0NjoxNVrOFqRM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDo0NjoxNVrOFqRM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjM0MQ==", "bodyText": "code style", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379866341", "createdAt": "2020-02-16T00:46:15Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -100,6 +112,25 @@ public String toString()\n                 .add(\"transactionHandle\", transactionHandle)\n                 .add(\"connectorSplit\", connectorSplit)\n                 .add(\"lifespan\", lifespan)\n+                .add(\"splitContext\", splitContext)\n                 .toString();\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) { return true; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8768410a01f7f3ae2bc338e7c65c99256cfdd4ed"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc1NTE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDo0NzozNFrOFqRNEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDo0NzozNFrOFqRNEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjM4Nw==", "bodyText": "\"node is null\"", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379866387", "createdAt": "2020-02-16T00:47:34Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +211,36 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(Optional.of(node), true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(Optional.ofNullable(chosenNode), false);\n+    }\n+\n+    private static class NodeResult\n+    {\n+        private Optional<InternalNode> node;\n+        private boolean shouldCache;\n+\n+        public NodeResult(Optional<InternalNode> node, boolean shouldCache)\n+        {\n+            this.node = requireNonNull(node, \"Optional<InternalNode> is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8768410a01f7f3ae2bc338e7c65c99256cfdd4ed"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc4MDcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMToxNFrOFqRZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMToxNFrOFqRZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTUxNA==", "bodyText": "you still need to create a new Split; check my comment below", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379869514", "createdAt": "2020-02-16T02:11:14Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,15 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {\n                 chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getQueuedSplitCountForStage, preferredNodeCount, maxPendingSplitsPerTask);\n             }\n \n-            if (chosenNode != null) {\n-                assignment.put(chosenNode, split);\n-                assignmentStats.addAssignedSplit(chosenNode);\n+            if (chosenNode.getNode().isPresent()) {\n+                split.setSplitContext(new SplitContext(chosenNode.ifShouldCache()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc4MDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMToyOFrOFqRZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMToyOFrOFqRZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTUyOQ==", "bodyText": "final", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379869529", "createdAt": "2020-02-16T02:11:28Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +205,36 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(Optional.of(node), true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(Optional.ofNullable(chosenNode), false);\n+    }\n+\n+    private static class NodeResult\n+    {\n+        private Optional<InternalNode> node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc4MTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMTo0NVrOFqRZaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMTo0NVrOFqRZaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTU0Nw==", "bodyText": "final", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379869547", "createdAt": "2020-02-16T02:11:45Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -34,23 +36,27 @@\n     private final ConnectorSplit connectorSplit;\n     private final Lifespan lifespan;\n \n+    private SplitContext splitContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc4MTAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMTo1MVrOFqRZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMTo1MVrOFqRZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTU0OA==", "bodyText": "remove this line", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379869548", "createdAt": "2020-02-16T02:11:51Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -34,23 +36,27 @@\n     private final ConnectorSplit connectorSplit;\n     private final Lifespan lifespan;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc4MTUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMjoxMzoyNlrOFqRZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0NDoxNFrOFtrmkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTYxMg==", "bodyText": "You still need equals and hashCode function, so that splitContext can be immutable.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379869612", "createdAt": "2020-02-16T02:13:26Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -77,6 +83,17 @@ public Lifespan getLifespan()\n         return lifespan;\n     }\n \n+    @JsonProperty\n+    public SplitContext getSplitContext()\n+    {\n+        return splitContext;\n+    }\n+\n+    public void setSplitContext(SplitContext splitContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3OTgzMg==", "bodyText": "So I have these two version of code both ready\n1.Provide SplitContext as a mutable field, as the code above\n2.Use hashCode and equals to indicate if they're the same Split (not include SplitContext)\nkewang1024@376fb8a\n(https://github.com/kewang1024/presto/commits/test_pass_cache)\nWhen SourcePartitionedScheduler use SimpleNodeSelector to do scheduling for pending task, we may change some split's SplitContext to cacheable and return those split back to SourcePartitionedScheduler\nSourcePartitionedScheduler will evict those split from pendingTask (a split Set)\nfor\n\nPro: more straightforward  since we are removing the same split from split set.\nCon: Split not immutable any more\n2.Pro: Split immutable\nCon: seems a little hacky to evict from a set using a different Split (but they're same because we don't include SplitContext in equals and hash method), and possibly cause confusion if we lose context at some point\n\nAlso want to know your opinion on it @shixuan-fan @wenleix", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379879832", "createdAt": "2020-02-16T06:54:01Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -77,6 +83,17 @@ public Lifespan getLifespan()\n         return lifespan;\n     }\n \n+    @JsonProperty\n+    public SplitContext getSplitContext()\n+    {\n+        return splitContext;\n+    }\n+\n+    public void setSplitContext(SplitContext splitContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTYxMg=="}, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk3NTkyNg==", "bodyText": "We don't use mutable data structure in our codebase. Otherwise, we can avoid creating SplitContext by directly change the context for HiveSplit", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r379975926", "createdAt": "2020-02-17T03:53:23Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -77,6 +83,17 @@ public Lifespan getLifespan()\n         return lifespan;\n     }\n \n+    @JsonProperty\n+    public SplitContext getSplitContext()\n+    {\n+        return splitContext;\n+    }\n+\n+    public void setSplitContext(SplitContext splitContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTYxMg=="}, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0NDYyNA==", "bodyText": "I agree that an immutable class is easier to reason and understand.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r383444624", "createdAt": "2020-02-24T18:44:14Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/Split.java", "diffHunk": "@@ -77,6 +83,17 @@ public Lifespan getLifespan()\n         return lifespan;\n     }\n \n+    @JsonProperty\n+    public SplitContext getSplitContext()\n+    {\n+        return splitContext;\n+    }\n+\n+    public void setSplitContext(SplitContext splitContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTYxMg=="}, "originalCommit": {"oid": "cf9d54110a31503636029b226f34c18c98fb6509"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM1NTcwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0NTozN1rOFtrpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozMjowOFrOFt111A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0NTMwNA==", "bodyText": "nit: maybe we'd want a builder pattern for this class? Even though currently there is only one field, a builder pattern makes future work easier to understand.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r383445304", "createdAt": "2020-02-24T18:45:37Z", "author": {"login": "shixuan-fan"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class SplitContext\n+{\n+    public static final SplitContext NON_CACHEABLE = new SplitContext(false);\n+\n+    private final boolean cacheable;\n+\n+    @JsonCreator\n+    public SplitContext(@JsonProperty boolean cacheable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147543c86f185835f668cab1ca5b7ea8adf545b8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMjM3Mg==", "bodyText": "Currently I couldn't come up with anything that we may need to add to SplitContext, maybe we can use it when we have additional optional attribute for SplitContext\nthanks for the good advice, left a todo for future change", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r383612372", "createdAt": "2020-02-25T01:32:08Z", "author": {"login": "kewang1024"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/SplitContext.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class SplitContext\n+{\n+    public static final SplitContext NON_CACHEABLE = new SplitContext(false);\n+\n+    private final boolean cacheable;\n+\n+    @JsonCreator\n+    public SplitContext(@JsonProperty boolean cacheable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0NTMwNA=="}, "originalCommit": {"oid": "147543c86f185835f668cab1ca5b7ea8adf545b8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODE0MDE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoxMDo1NVrOFuPpDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowOTozNlrOFu2a-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNTA4Ng==", "bodyText": "How about we keep chosenNode to null for this case? I don't know the history of why this is null rather than Optional.empty(), but I personally would prefer the latter..", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384035086", "createdAt": "2020-02-25T18:10:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIxODc1MA==", "bodyText": "Do you want to keep chosenNode.getNode()  null or Optional.empty()?\nIf it is Optional.empty(), then it should be our current case", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384218750", "createdAt": "2020-02-26T00:58:03Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNTA4Ng=="}, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3MDQ1Nw==", "bodyText": "I don't have strong opinion around null vs empty, but I'd prefer we make decision based on chosenNode being null/empty, instead of chosenNode.getNode() :)", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384670457", "createdAt": "2020-02-26T18:09:36Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNTA4Ng=="}, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODE0Njc3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoxMzoyOVrOFuPtgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxNDo0MFrOFuTsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNjIyNA==", "bodyText": "I remembered @wenleix once mentioned that changing Split in scheduling time might not be respected by Presto-on-Spark. I'll let @wenleix chime in here but would like to call it out so we are aware :)", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384036224", "createdAt": "2020-02-25T18:13:29Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {\n                 chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getQueuedSplitCountForStage, preferredNodeCount, maxPendingSplitsPerTask);\n             }\n \n-            if (chosenNode != null) {\n-                assignment.put(chosenNode, split);\n-                assignmentStats.addAssignedSplit(chosenNode);\n+            if (chosenNode.getNode().isPresent()) {\n+                split = new Split(\n+                        split.getConnectorId(),\n+                        split.getTransactionHandle(),\n+                        split.getConnectorSplit(),\n+                        split.getLifespan(),\n+                        new SplitContext(chosenNode.ifShouldCache()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMTUxMw==", "bodyText": "@wenleix mentioned to me as well. I vaguely remember this won't affect spark. Will let @wenleix comment.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384101513", "createdAt": "2020-02-25T20:14:40Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            NodeResult chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.getNode().isPresent()) {\n                 chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getQueuedSplitCountForStage, preferredNodeCount, maxPendingSplitsPerTask);\n             }\n \n-            if (chosenNode != null) {\n-                assignment.put(chosenNode, split);\n-                assignmentStats.addAssignedSplit(chosenNode);\n+            if (chosenNode.getNode().isPresent()) {\n+                split = new Split(\n+                        split.getConnectorId(),\n+                        split.getTransactionHandle(),\n+                        split.getConnectorSplit(),\n+                        split.getLifespan(),\n+                        new SplitContext(chosenNode.ifShouldCache()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNjIyNA=="}, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODE1NDQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoxNTo1MVrOFuPyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoxNTo1MVrOFuPyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNzQzMg==", "bodyText": "Let's just make this InternalNode. I think if there is no result, we should mark NodeResult as Optional.empty() or null instead.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384037432", "createdAt": "2020-02-25T18:15:51Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +211,36 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(Optional.of(node), true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(Optional.ofNullable(chosenNode), false);\n+    }\n+\n+    private static class NodeResult\n+    {\n+        private final Optional<InternalNode> node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODE4ODc3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNTo0NVrOFuQHVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNTo0NVrOFuQHVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MjgzNw==", "bodyText": "Maybe cachable? I understand why shouldCache was chosen but ifShouldCache seems a bit awkward comparing to isCachable. Open to other suggestions as well.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384042837", "createdAt": "2020-02-25T18:25:45Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +211,36 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n-                return node;\n+                return new NodeResult(Optional.of(node), true);\n             }\n             // fallback to choosing the least busy nodes\n             if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n         }\n-        return chosenNode;\n+        return new NodeResult(Optional.ofNullable(chosenNode), false);\n+    }\n+\n+    private static class NodeResult\n+    {\n+        private final Optional<InternalNode> node;\n+        private final boolean shouldCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae30888267cc9d886657873797282586aa01565"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODIwMTA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyOToxOFrOFuQPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyOToxOFrOFuQPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDgxMg==", "bodyText": "Why is cacheable a property for BucketNodeMap? Shouldn't this be a property for a node-bucket pair?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384044812", "createdAt": "2020-02-25T18:29:18Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "diffHunk": "@@ -39,6 +39,8 @@ public BucketNodeMap(ToIntFunction<Split> splitToBucket)\n \n     public abstract boolean isDynamic();\n \n+    public abstract boolean isCacheable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c2473f4ad03d74c8f3bbf12ec4a2e8ecc1b8d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU1MDMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMjoxMFrOFuTnvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMjoxMFrOFuTnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDI4Nw==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384100287", "createdAt": "2020-02-25T20:12:10Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "diffHunk": "@@ -15,7 +15,9 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n+import com.sun.javafx.scene.control.behavior.OptionalBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863ccc73575f682b9bb788ba0237d9e88daa035d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU1MzMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMzowNVrOFuTpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMzowNVrOFuTpjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDc0OQ==", "bodyText": "final", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384100749", "createdAt": "2020-02-25T20:13:05Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.facebook.presto.execution.scheduler;\n+\n+import com.facebook.presto.metadata.InternalNode;\n+\n+public class InternalNodeAndCache\n+{\n+    private final InternalNode internalNode;\n+    private boolean cacheable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863ccc73575f682b9bb788ba0237d9e88daa035d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTM3ODQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTozMTo1M1rOFubgZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTozMTo1M1rOFubgZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyOTQ3OA==", "bodyText": "If I read this condition correctly, this will make HARD_AFFINITY to return split that is not cacheable. Can we add tests to verify that?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384229478", "createdAt": "2020-02-26T01:31:53Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -202,14 +211,39 @@ private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNode\n \n             // choose the preferred node first as long as they're not busy\n             if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjE3NzY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowNTo0M1rOFu2Spg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDowMToyMVrOFvAyIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2ODMyNg==", "bodyText": "In this case !bucketNodeMap.isDynamic() seems a bit redundant?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384668326", "createdAt": "2020-02-26T18:05:43Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "diffHunk": "@@ -335,8 +335,8 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n                     // verify execution is consistent with planner's decision on dynamic lifespan schedule\n                     verify(bucketNodeMap.isDynamic() == dynamicLifespanSchedule);\n \n-                    if (!bucketNodeMap.isDynamic()) {\n-                        stageNodeList = ((FixedBucketNodeMap) bucketNodeMap).getBucketToNode().stream()\n+                    if (!bucketNodeMap.isDynamic() || bucketNodeMap.getBucketToNode().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0MDIyNg==", "bodyText": "In this case !bucketNodeMap.isDynamic() seems a bit redundant?\n\nif we change bucketNodeMap.getBucketToNode().isPresent() to other function, we may need to keep it", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384840226", "createdAt": "2020-02-27T00:01:21Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "diffHunk": "@@ -335,8 +335,8 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n                     // verify execution is consistent with planner's decision on dynamic lifespan schedule\n                     verify(bucketNodeMap.isDynamic() == dynamicLifespanSchedule);\n \n-                    if (!bucketNodeMap.isDynamic()) {\n-                        stageNodeList = ((FixedBucketNodeMap) bucketNodeMap).getBucketToNode().stream()\n+                    if (!bucketNodeMap.isDynamic() || bucketNodeMap.getBucketToNode().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2ODMyNg=="}, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjIwNjIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODoxNDoxMlrOFu2k3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODo1Njo0MlrOFu3_Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3Mjk4OA==", "bodyText": "I'm not entirely sure if this is a good predicate since this would cover both of the following cases:\n\nThere is initial preferred mapping\nThere is no initial preferred mapping, but with at least one bucketToNode assignment by calling assignOrUpdateBucketToNode\n\nBased on my understanding on the comment, the second case might not be desired?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384672988", "createdAt": "2020-02-26T18:14:12Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -63,16 +77,25 @@ public int getBucketCount()\n     }\n \n     @Override\n-    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node)\n+    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node, boolean cacheable)\n     {\n         checkArgument(bucketedId >= 0 && bucketedId < bucketCount);\n         requireNonNull(node, \"node is null\");\n-        bucketToNode.put(bucketedId, node);\n+        bucketToNodeAndCache.put(bucketedId, new InternalNodeAndCache(node, cacheable));\n     }\n \n     @Override\n     public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNodeAndCache.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5MDczMQ==", "bodyText": "Yes you're right, both situation could happen.\nBy saying \"the second case might not be desired\",  I'm guessing you're referring to the call in SectionExecutionFactory?\nif it's the call in SectionExecutionFactory, I think we should be safe, because we call getBucketToNode right after nodePartitioningManager.getBucketNodeMap, there is no situation for assignOrUpdateBucketToNode to happen.\nBut I understand your concern, maybe your suggestion is to have a different method name to indicate that it's initialized instead of checking the map count?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384690731", "createdAt": "2020-02-26T18:46:57Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -63,16 +77,25 @@ public int getBucketCount()\n     }\n \n     @Override\n-    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node)\n+    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node, boolean cacheable)\n     {\n         checkArgument(bucketedId >= 0 && bucketedId < bucketCount);\n         requireNonNull(node, \"node is null\");\n-        bucketToNode.put(bucketedId, node);\n+        bucketToNodeAndCache.put(bucketedId, new InternalNodeAndCache(node, cacheable));\n     }\n \n     @Override\n     public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNodeAndCache.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3Mjk4OA=="}, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5MjI0OQ==", "bodyText": "Yeah I think if what we want to check is initial preferred mapping exists, let's make it exclusive and explicit :D. Also, the method name might need to be changed to reflect the fact that we are only returning the mapping when there is initial mapping.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384692249", "createdAt": "2020-02-26T18:49:42Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -63,16 +77,25 @@ public int getBucketCount()\n     }\n \n     @Override\n-    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node)\n+    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node, boolean cacheable)\n     {\n         checkArgument(bucketedId >= 0 && bucketedId < bucketCount);\n         requireNonNull(node, \"node is null\");\n-        bucketToNode.put(bucketedId, node);\n+        bucketToNodeAndCache.put(bucketedId, new InternalNodeAndCache(node, cacheable));\n     }\n \n     @Override\n     public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNodeAndCache.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3Mjk4OA=="}, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5NjE0Ng==", "bodyText": "Sounds reasonable! Will do", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384696146", "createdAt": "2020-02-26T18:56:42Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -63,16 +77,25 @@ public int getBucketCount()\n     }\n \n     @Override\n-    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node)\n+    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node, boolean cacheable)\n     {\n         checkArgument(bucketedId >= 0 && bucketedId < bucketCount);\n         requireNonNull(node, \"node is null\");\n-        bucketToNode.put(bucketedId, node);\n+        bucketToNodeAndCache.put(bucketedId, new InternalNodeAndCache(node, cacheable));\n     }\n \n     @Override\n     public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNodeAndCache.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3Mjk4OA=="}, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjIxMzY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODoxNjoyN1rOFu2ppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozOTozOFrOFu3bJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NDIxMw==", "bodyText": "Just out of curiosity, what would happen if bucketNodeMap is updated in DynamicBucketNodeMap (thus stageNodeList is not consistent with DynamicBucketNodeMap#getBucketToNode)?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384674213", "createdAt": "2020-02-26T18:16:27Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "diffHunk": "@@ -335,8 +335,8 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n                     // verify execution is consistent with planner's decision on dynamic lifespan schedule\n                     verify(bucketNodeMap.isDynamic() == dynamicLifespanSchedule);\n \n-                    if (!bucketNodeMap.isDynamic()) {\n-                        stageNodeList = ((FixedBucketNodeMap) bucketNodeMap).getBucketToNode().stream()\n+                    if (!bucketNodeMap.isDynamic() || bucketNodeMap.getBucketToNode().isPresent()) {\n+                        stageNodeList = bucketNodeMap.getBucketToNode().get().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4Njg4NA==", "bodyText": "It would be the same behavior as we assign random stageNodeList, when we do scheduling, we would distribute bucket (the bucket that couldn't find its desired bucket) to a random node.\nbucketNodeMap being updated in DynamicBucketNodeMap would only happen in DynamicLifespanScheduler, which means it happens when some node/task failed and affinity can't be enforced , thus we have to fall back to random choosing.\nSo the difference with random stageNodeList, we try best effort to put bucket to their desired node, then fall back to random if affinity can't be achieved.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384686884", "createdAt": "2020-02-26T18:39:38Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "diffHunk": "@@ -335,8 +335,8 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n                     // verify execution is consistent with planner's decision on dynamic lifespan schedule\n                     verify(bucketNodeMap.isDynamic() == dynamicLifespanSchedule);\n \n-                    if (!bucketNodeMap.isDynamic()) {\n-                        stageNodeList = ((FixedBucketNodeMap) bucketNodeMap).getBucketToNode().stream()\n+                    if (!bucketNodeMap.isDynamic() || bucketNodeMap.getBucketToNode().isPresent()) {\n+                        stageNodeList = bucketNodeMap.getBucketToNode().get().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NDIxMw=="}, "originalCommit": {"oid": "dbec75df1266ef4af3260b16fd2812c80c66a2b5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg3NzI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyMDo1NlrOFvGalw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyMDo1NlrOFvGalw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjUwMw==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384932503", "createdAt": "2020-02-27T06:20:56Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler;\n+\n+import com.facebook.presto.metadata.InternalNode;\n+\n+public class InternalNodeAndCache\n+{\n+    private final InternalNode internalNode;\n+    private final boolean cacheable;\n+\n+    public InternalNodeAndCache(InternalNode internalNode, boolean cacheable)\n+    {\n+        this.internalNode = internalNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ef87f0476585f5a96d1236b6601e6d6542f971"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg4NTMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNTo0MVrOFvGfYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNTo0MVrOFvGfYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzcyOA==", "bodyText": "toImmutableList()", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384933728", "createdAt": "2020-02-27T06:25:41Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -15,40 +15,50 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.function.ToIntFunction;\n+import java.util.stream.Collectors;\n \n import static java.util.Objects.requireNonNull;\n \n // the bucket to node mapping is fixed and pre-assigned\n public class FixedBucketNodeMap\n         extends BucketNodeMap\n {\n-    private final List<InternalNode> bucketToNode;\n+    private final List<InternalNodeAndCache> bucketToNodeAndCache;\n \n-    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode)\n+    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode, boolean cacheable)\n     {\n         super(splitToBucket);\n-        this.bucketToNode = ImmutableList.copyOf(requireNonNull(bucketToNode, \"bucketToNode is null\"));\n+        requireNonNull(bucketToNode, \"bucketToNode is null\");\n+        this.bucketToNodeAndCache = bucketToNode.stream().map(internalNode -> new InternalNodeAndCache(internalNode, cacheable)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ef87f0476585f5a96d1236b6601e6d6542f971"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg4Nzg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNzoxMVrOFvGg1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNzoxMVrOFvGg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDEwMw==", "bodyText": "toImmutableList()", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r384934103", "createdAt": "2020-02-27T06:27:11Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -59,8 +69,9 @@ public boolean isDynamic()\n         return false;\n     }\n \n-    public List<InternalNode> getBucketToNode()\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n     {\n-        return bucketToNode;\n+        return Optional.of(bucketToNodeAndCache.stream().map(InternalNodeAndCache::getInternalNode).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ef87f0476585f5a96d1236b6601e6d6542f971"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA4MjU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1Nzo0M1rOFvbW6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1Nzo0M1rOFvbW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NTYyNw==", "bodyText": "nit: not sure how much value it would add, but maybe have a variable for chosenNode.get().getInternalNode() since it is used twice.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385275627", "createdAt": "2020-02-27T17:57:43Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -149,14 +151,21 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n-            if (chosenNode == null) {\n+            Optional<NodeResult> chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getTotalSplitCount, preferredNodeCount, maxSplitsPerNode);\n+            if (!chosenNode.isPresent()) {\n                 chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats::getQueuedSplitCountForStage, preferredNodeCount, maxPendingSplitsPerTask);\n             }\n \n-            if (chosenNode != null) {\n-                assignment.put(chosenNode, split);\n-                assignmentStats.addAssignedSplit(chosenNode);\n+            if (chosenNode.isPresent()) {\n+                split = new Split(\n+                        split.getConnectorId(),\n+                        split.getTransactionHandle(),\n+                        split.getConnectorSplit(),\n+                        split.getLifespan(),\n+                        new SplitContext(chosenNode.get().isCacheable()));\n+\n+                assignment.put(chosenNode.get().getInternalNode(), split);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5458310af01500ea1496808f962d76263f6a32b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA5NDc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMToxOVrOFvbefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMToxOVrOFvbefA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NzU2NA==", "bodyText": "Hmmmm I'm wondering if we could combine this with NodeResult in the previous commit. The content seems to be the same? Also maybe name this InternalNodeInfo(I don't have a very good name) in case we want to put more information/context in this class?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385277564", "createdAt": "2020-02-27T18:01:19Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/InternalNodeAndCache.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler;\n+\n+import com.facebook.presto.metadata.InternalNode;\n+\n+public class InternalNodeAndCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af987f18814b2e52af29d01d31d6fffffbcd6a20"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjEwMjU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMzo1N1rOFvbjxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMzo1N1rOFvbjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODkxNg==", "bodyText": "Curious: why is this an Optional<Boolean>? I thought whether a split is cacheable should be a boolean instead? In that case we might as well just change the method name to isSplitCacheable. getAssignedNodeCache is a bit confusing because it seems that we are returning a cache.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385278916", "createdAt": "2020-02-27T18:03:57Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/BucketNodeMap.java", "diffHunk": "@@ -44,5 +46,10 @@ public BucketNodeMap(ToIntFunction<Split> splitToBucket)\n         return getAssignedNode(splitToBucket.applyAsInt(split));\n     }\n \n+    public final Optional<Boolean> getAssignedNodeCache(Split split)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af987f18814b2e52af29d01d31d6fffffbcd6a20"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjExNTIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowODowMlrOFvbrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowODowMlrOFvbrnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4MDkyNw==", "bodyText": "It seems that this cacheable solely depends on whether there is bucketToPreferredNode in the argument? Is there a use case where we called the other constructor but set cacheable to false?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385280927", "createdAt": "2020-02-27T18:08:02Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -32,24 +32,24 @@\n         extends BucketNodeMap\n {\n     private final int bucketCount;\n-    private final Int2ObjectMap<InternalNode> bucketToNode = new Int2ObjectOpenHashMap<>();\n+    private final Int2ObjectMap<InternalNodeAndCache> bucketToNodeAndCache = new Int2ObjectOpenHashMap<>();\n     private final boolean initialMapExist;\n \n-    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount)\n+    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount, boolean cacheable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af987f18814b2e52af29d01d31d6fffffbcd6a20"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjEzOTU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxNTo1N1rOFvb7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxNTo1N1rOFvb7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NDk1Mg==", "bodyText": "Maybe name this isBucketCacheable? Also, if bucket does not exist, I'm guessing we should also return false? An empty result is a bit confusing.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385284952", "createdAt": "2020-02-27T18:15:57Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -58,7 +58,19 @@ public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount,\n     @Override\n     public Optional<InternalNode> getAssignedNode(int bucketedId)\n     {\n-        return Optional.ofNullable(bucketToNode.get(bucketedId));\n+        if (!bucketToNodeAndCache.containsKey(bucketedId)) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(bucketToNodeAndCache.get(bucketedId).getInternalNode());\n+    }\n+\n+    @Override\n+    public Optional<Boolean> getAssignedNodeCache(int bucketedId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af987f18814b2e52af29d01d31d6fffffbcd6a20"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjE1NTUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyMDo1NVrOFvcFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyMDo1NVrOFvcFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NzUyOQ==", "bodyText": "I think this could be an interface method, and for FixedBucketNodeMap just return true. This way we don't need to do downcasting :)\nAlso, maybe name this hasInitialMap?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385287529", "createdAt": "2020-02-27T18:20:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -75,4 +80,18 @@ public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNode.size() == 0) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(ImmutableList.copyOf(bucketToNode.values()));\n+    }\n+\n+    public boolean ifInitialMapExist()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0c495b0c0bb5a6ba79485c6c909c8bcf691ea2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjE1NzkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyMTozNlrOFvcG5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyMTozNlrOFvcG5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NzkwOQ==", "bodyText": "If ifInitialMapExist becomes an interface method, then we don't need !bucketNodeMap.isDynamic() anymore.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385287909", "createdAt": "2020-02-27T18:21:36Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SectionExecutionFactory.java", "diffHunk": "@@ -335,8 +336,8 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n                     // verify execution is consistent with planner's decision on dynamic lifespan schedule\n                     verify(bucketNodeMap.isDynamic() == dynamicLifespanSchedule);\n \n-                    if (!bucketNodeMap.isDynamic()) {\n-                        stageNodeList = ((FixedBucketNodeMap) bucketNodeMap).getBucketToNode().stream()\n+                    if (!bucketNodeMap.isDynamic() || ((DynamicBucketNodeMap) bucketNodeMap).ifInitialMapExist()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0c495b0c0bb5a6ba79485c6c909c8bcf691ea2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjkzNzE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjozNzo0NlrOFvjsyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjozNzo0NlrOFvjsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMjI5Nw==", "bodyText": "bucketToNodeInfo.isEmpty()", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385412297", "createdAt": "2020-02-27T22:37:46Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -63,16 +80,31 @@ public int getBucketCount()\n     }\n \n     @Override\n-    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node)\n+    public void assignOrUpdateBucketToNode(int bucketedId, InternalNode node, boolean cacheable)\n     {\n         checkArgument(bucketedId >= 0 && bucketedId < bucketCount);\n         requireNonNull(node, \"node is null\");\n-        bucketToNode.put(bucketedId, node);\n+        bucketToNodeInfo.put(bucketedId, new InternalNodeInfo(node, cacheable));\n     }\n \n     @Override\n     public boolean isDynamic()\n     {\n         return true;\n     }\n+\n+    @Override\n+    public boolean hasInitialMap()\n+    {\n+        return hasInitialMap;\n+    }\n+\n+    @Override\n+    public Optional<List<InternalNode>> getBucketToNode()\n+    {\n+        if (bucketToNodeInfo.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbf3cd5472c49703fac972d73c936e609d4941f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzI3Mjc1OnYy", "diffSide": "RIGHT", "path": "presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorPageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToyNTo1M1rOFvm0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToyNTo1M1rOFvm0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MzM1MA==", "bodyText": "fix this and all other places", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385463350", "createdAt": "2020-02-28T01:25:53Z", "author": {"login": "highker"}, "path": "presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorPageSourceProvider.java", "diffHunk": "@@ -53,7 +54,12 @@ public RaptorPageSourceProvider(StorageManager storageManager)\n     }\n \n     @Override\n-    public ConnectorPageSource createPageSource(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorSplit split, List<ColumnHandle> columns)\n+    public ConnectorPageSource createPageSource(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorSplit split,\n+            List<ColumnHandle> columns,\n+            SplitContext splitContext)\n     {\n         RaptorSplit raptorSplit = (RaptorSplit) split;\n         HiveFileContext hiveFileContext = DEFAULT_HIVE_FILE_CONTEXT; // TODO: adjust cacheable accordingly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684bf8de98df7b9023a8bdf597c6c85df0370f2f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzMxOTQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo1Mzo1MFrOFvnQMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo1Mzo1MFrOFvnQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDUxNQ==", "bodyText": "remove commemt", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385470515", "createdAt": "2020-02-28T01:53:50Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -233,7 +251,7 @@ public ConnectorPageSource createPageSource(ConnectorTransactionHandle transacti\n                     layout.getDomainPredicate(),\n                     optimizedRemainingPredicate,\n                     hiveStorageTimeZone,\n-                    new HiveFileContext(true, split.getExtraFileInfo().map(BinaryExtraHiveFileInfo::new)));  // TODO: adjust cacheable accordingly\n+                    new HiveFileContext(splitContext.isCacheable(), split.getExtraFileInfo().map(BinaryExtraHiveFileInfo::new)));  // TODO: adjust cacheable accordingly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71c78c8a817c3ac2ca51c44c235bfc3aca622f1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ3NTI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/execution/TestNodeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0NDozOFrOFvot7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0NDozOFrOFvot7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NDUxMQ==", "bodyText": "this won't pass style check", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385494511", "createdAt": "2020-02-28T03:44:38Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestNodeScheduler.java", "diffHunk": "@@ -353,6 +354,32 @@ public void testAffinityAssignment()\n         assertEquals(splitPlacementResult.getAssignments().keySet().size(), 3);\n     }\n \n+    @Test\n+    public void testHardAffinityAssignment()\n+    {\n+        NodeTaskMap nodeTaskMap = new NodeTaskMap(finalizerService);\n+        TestingTransactionHandle transactionHandle = TestingTransactionHandle.create();\n+        NodeSchedulerConfig nodeSchedulerConfig = new NodeSchedulerConfig()\n+                .setMaxSplitsPerNode(20)\n+                .setIncludeCoordinator(false)\n+                .setMaxPendingSplitsPerTask(10);\n+\n+        NodeScheduler nodeScheduler = new NodeScheduler(new LegacyNetworkTopology(), nodeManager, nodeSchedulerConfig, nodeTaskMap);\n+        NodeSelector nodeSelector = nodeScheduler.createNodeSelector(CONNECTOR_ID, 3);\n+\n+        Set<Split> splits = new HashSet<>();\n+\n+        // Adding one more split (1 % 3 = 1), 1 splits will be distributed to 1 nodes\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        SplitPlacementResult splitPlacementResult = nodeSelector.computeAssignments(splits, ImmutableList.of());\n+        for (Split split : splitPlacementResult.getAssignments().values())\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29355ca9fa92db264c5ea808be454ea030d8bca0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ3NTQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/execution/TestNodeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0NDo1NVrOFvouFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0NDo1NVrOFvouFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NDU1MA==", "bodyText": "assertTrue", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385494550", "createdAt": "2020-02-28T03:44:55Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestNodeScheduler.java", "diffHunk": "@@ -353,6 +354,32 @@ public void testAffinityAssignment()\n         assertEquals(splitPlacementResult.getAssignments().keySet().size(), 3);\n     }\n \n+    @Test\n+    public void testHardAffinityAssignment()\n+    {\n+        NodeTaskMap nodeTaskMap = new NodeTaskMap(finalizerService);\n+        TestingTransactionHandle transactionHandle = TestingTransactionHandle.create();\n+        NodeSchedulerConfig nodeSchedulerConfig = new NodeSchedulerConfig()\n+                .setMaxSplitsPerNode(20)\n+                .setIncludeCoordinator(false)\n+                .setMaxPendingSplitsPerTask(10);\n+\n+        NodeScheduler nodeScheduler = new NodeScheduler(new LegacyNetworkTopology(), nodeManager, nodeSchedulerConfig, nodeTaskMap);\n+        NodeSelector nodeSelector = nodeScheduler.createNodeSelector(CONNECTOR_ID, 3);\n+\n+        Set<Split> splits = new HashSet<>();\n+\n+        // Adding one more split (1 % 3 = 1), 1 splits will be distributed to 1 nodes\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        splits.add(new Split(CONNECTOR_ID, transactionHandle, new TestHardAffinitySplitRemote()));\n+        SplitPlacementResult splitPlacementResult = nodeSelector.computeAssignments(splits, ImmutableList.of());\n+        for (Split split : splitPlacementResult.getAssignments().values())\n+        {\n+            assertEquals(split.getSplitContext().isCacheable(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29355ca9fa92db264c5ea808be454ea030d8bca0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTc5NjI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODoyNDozM1rOFv-ecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyNzo1N1rOFwAQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDk5NQ==", "bodyText": "I somehow feel this cacheable is not needed because everything in fixed map should be cacheable?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385850995", "createdAt": "2020-02-28T18:24:33Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -15,40 +15,50 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.function.ToIntFunction;\n \n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static java.util.Objects.requireNonNull;\n \n // the bucket to node mapping is fixed and pre-assigned\n public class FixedBucketNodeMap\n         extends BucketNodeMap\n {\n-    private final List<InternalNode> bucketToNode;\n+    private final List<InternalNodeInfo> bucketToNodeInfo;\n \n-    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode)\n+    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode, boolean cacheable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ebf0eef85d69fa34a23d9cd039eae528ba100e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MDI5Nw==", "bodyText": "for a FixedBucketNodeMap, there are situations of HARD_AFFINITY and NO_PREFERENCE, they both use FixedBucketNodeMap, but cacheable for NO_PREFERENCE is false, cacheable for HARD_AFFINITY is true", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385870297", "createdAt": "2020-02-28T19:05:45Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -15,40 +15,50 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.function.ToIntFunction;\n \n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static java.util.Objects.requireNonNull;\n \n // the bucket to node mapping is fixed and pre-assigned\n public class FixedBucketNodeMap\n         extends BucketNodeMap\n {\n-    private final List<InternalNode> bucketToNode;\n+    private final List<InternalNodeInfo> bucketToNodeInfo;\n \n-    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode)\n+    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode, boolean cacheable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDk5NQ=="}, "originalCommit": {"oid": "80ebf0eef85d69fa34a23d9cd039eae528ba100e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MTM0Nw==", "bodyText": "Aha! Thanks for explaining. So I guess in FixedBucketNodeMap it might be reasonable to make cacheable a bucket node map level property then, since there won't be update in the mapping.", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385871347", "createdAt": "2020-02-28T19:08:05Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -15,40 +15,50 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.function.ToIntFunction;\n \n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static java.util.Objects.requireNonNull;\n \n // the bucket to node mapping is fixed and pre-assigned\n public class FixedBucketNodeMap\n         extends BucketNodeMap\n {\n-    private final List<InternalNode> bucketToNode;\n+    private final List<InternalNodeInfo> bucketToNodeInfo;\n \n-    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode)\n+    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode, boolean cacheable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDk5NQ=="}, "originalCommit": {"oid": "80ebf0eef85d69fa34a23d9cd039eae528ba100e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDIyNA==", "bodyText": "But as you suggested, storing the cacheable info in InternalNodeInfo would be a more general way, since DynamicBucketNodeMap could have a mixed List of InternalNodeInfo, we still need to iterate through the list", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385880224", "createdAt": "2020-02-28T19:27:57Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/FixedBucketNodeMap.java", "diffHunk": "@@ -15,40 +15,50 @@\n \n import com.facebook.presto.metadata.InternalNode;\n import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.function.ToIntFunction;\n \n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static java.util.Objects.requireNonNull;\n \n // the bucket to node mapping is fixed and pre-assigned\n public class FixedBucketNodeMap\n         extends BucketNodeMap\n {\n-    private final List<InternalNode> bucketToNode;\n+    private final List<InternalNodeInfo> bucketToNodeInfo;\n \n-    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode)\n+    public FixedBucketNodeMap(ToIntFunction<Split> splitToBucket, List<InternalNode> bucketToNode, boolean cacheable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDk5NQ=="}, "originalCommit": {"oid": "80ebf0eef85d69fa34a23d9cd039eae528ba100e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTgwNDgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODoyNzozMlrOFv-j7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODoyNzozMlrOFv-j7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MjM5Ng==", "bodyText": "ditto, I'm not sure if this cacheable is useful. Bucket is initialized to preferred node, so they should be cacheable?", "url": "https://github.com/prestodb/presto/pull/14108#discussion_r385852396", "createdAt": "2020-02-28T18:27:32Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -30,30 +32,45 @@\n         extends BucketNodeMap\n {\n     private final int bucketCount;\n-    private final Int2ObjectMap<InternalNode> bucketToNode = new Int2ObjectOpenHashMap<>();\n+    private final Int2ObjectMap<InternalNodeInfo> bucketToNodeInfo = new Int2ObjectOpenHashMap<>();\n+    private final boolean hasInitialMap;\n \n     public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount)\n     {\n         super(splitToBucket);\n         checkArgument(bucketCount > 0, \"bucketCount must be positive\");\n         this.bucketCount = bucketCount;\n+        hasInitialMap = false;\n     }\n \n-    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount, List<InternalNode> bucketToPreferredNode)\n+    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount, List<InternalNode> bucketToPreferredNode, boolean cacheable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ebf0eef85d69fa34a23d9cd039eae528ba100e"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}