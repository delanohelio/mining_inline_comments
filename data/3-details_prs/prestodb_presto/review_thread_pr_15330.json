{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODQyODA2", "number": 15330, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1NzozM1rOExATvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzo0NjoxOFrOExZyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIwNzM1OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/ArrayBlockBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1NzozM1rOHm5ppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowNjowNVrOHm5xYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjQ4NQ==", "bodyText": "can this lead to int overflow?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510552485", "createdAt": "2020-10-23T01:57:33Z", "author": {"login": "bhhari"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/ArrayBlockBuilder.java", "diffHunk": "@@ -292,6 +292,14 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         return new ArrayBlockBuilder(blockBuilderStatus, values.newBlockBuilderLike(blockBuilderStatus), newSize);\n     }\n \n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(positionCount), expectedEntries);\n+        int valueExpectedEntries = positionCount == 0 ? expectedEntries : (int) (((long) offsets[positionCount] * expectedEntries) / positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDQ2NQ==", "bodyText": "Yes it can. offsets[positionCount] could be millions and expectedEntries could be thousands. The following code\n        int offset = 2000000;\n        int expectedEntries = 5000;\n        int positionCount = 1000;\n        int result1 = offset * expectedEntries / positionCount;\n        int result2 = (int) ((long)offset * expectedEntries / positionCount);\n        System.out.println( result1 + \" \" + result2 );\n\noutputs\n1410065 10000000", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510554465", "createdAt": "2020-10-23T02:06:05Z", "author": {"login": "yingsu00"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/ArrayBlockBuilder.java", "diffHunk": "@@ -292,6 +292,14 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         return new ArrayBlockBuilder(blockBuilderStatus, values.newBlockBuilderLike(blockBuilderStatus), newSize);\n     }\n \n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(positionCount), expectedEntries);\n+        int valueExpectedEntries = positionCount == 0 ? expectedEntries : (int) (((long) offsets[positionCount] * expectedEntries) / positionCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjQ4NQ=="}, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIwOTQ3OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/VariableWidthBlockBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1OToxMVrOHm5rEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1OToxMVrOHm5rEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1Mjg0OQ==", "bodyText": "int overflow? also use Math.toExactInt", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510552849", "createdAt": "2020-10-23T01:59:11Z", "author": {"login": "bhhari"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/VariableWidthBlockBuilder.java", "diffHunk": "@@ -381,6 +382,15 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         return new VariableWidthBlockBuilder(blockBuilderStatus, calculateBlockResetSize(positions), calculateBlockResetBytes(currentSizeInBytes));\n     }\n \n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int currentSizeInBytes = offsets[positions];\n+        return new VariableWidthBlockBuilder(blockBuilderStatus,\n+                max(calculateBlockResetSize(positions), expectedEntries),\n+                max(calculateBlockResetBytes(currentSizeInBytes), positions == 0 ? currentSizeInBytes : (int) ((long) currentSizeInBytes * expectedEntries) / positions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIxMzU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowMTozN1rOHm5tWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzozNzo0MFrOHm7DvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MzQzNA==", "bodyText": "curious, why does 1 long take 1800 bytes?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510553434", "createdAt": "2020-10-23T02:01:37Z", "author": {"login": "bhhari"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -80,6 +83,28 @@ public void testNewBlockBuilderLike()\n             assertEquals(newPageBuilder.getBlockBuilder(i).getPositionCount(), 0);\n             assertTrue(newPageBuilder.getBlockBuilder(i).getRetainedSizeInBytes() < pageBuilder.getBlockBuilder(i).getRetainedSizeInBytes());\n         }\n+\n+        BlockBuilder newBigintBlockBuilder = bigintBlockBuilder.newBlockBuilderLike(null, 200);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 0);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 80);\n+        newBigintBlockBuilder.writeLong(0);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 1);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NTU0OA==", "bodyText": "@bhhari It's because the new newBlockBuilderLike(null, 200) reserved space for 200 elements. I added comments for these lines:\n        // Reserved 200 longs and booleans for nulls array\n        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);\n\n        ...\n        // Reserved 200 varchars of average length 5.9, and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 2360);\n\n        ...\n        // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510575548", "createdAt": "2020-10-23T03:37:40Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -80,6 +83,28 @@ public void testNewBlockBuilderLike()\n             assertEquals(newPageBuilder.getBlockBuilder(i).getPositionCount(), 0);\n             assertTrue(newPageBuilder.getBlockBuilder(i).getRetainedSizeInBytes() < pageBuilder.getBlockBuilder(i).getRetainedSizeInBytes());\n         }\n+\n+        BlockBuilder newBigintBlockBuilder = bigintBlockBuilder.newBlockBuilderLike(null, 200);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 0);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 80);\n+        newBigintBlockBuilder.writeLong(0);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 1);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MzQzNA=="}, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjM4Mjc1OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/RowBlockBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzo0NjoxOFrOHnhJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDowMTozN1rOHomsqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5OTQ5NA==", "bodyText": "Why not just use newSize? Are you trying to account for some fraction of rows being null?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r511199494", "createdAt": "2020-10-23T23:46:18Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/RowBlockBuilder.java", "diffHunk": "@@ -298,4 +300,16 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         }\n         return new RowBlockBuilder(blockBuilderStatus, newBlockBuilders, new int[newSize + 1], new boolean[newSize]);\n     }\n+\n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(getPositionCount()), expectedEntries);\n+        BlockBuilder[] newBlockBuilders = new BlockBuilder[numFields];\n+        int nestedExpectedEntries = positionCount == 0 ? expectedEntries : toIntExact((long) fieldBlockOffsets[positionCount] * newSize / positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecf2dcbd3c767987080febeec2336642a92b9c6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzOTExNQ==", "bodyText": "@mbasmanova It's because the positions could be nulls. For example, expectedEntries could be 100 but fieldBlockOffsets[positionCount] could be 0.\nI added the following comment:\n// We still calculate the new expected fieldBlockBuilders sizes because the positions could be nulls.", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r512339115", "createdAt": "2020-10-27T00:01:37Z", "author": {"login": "yingsu00"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/RowBlockBuilder.java", "diffHunk": "@@ -298,4 +300,16 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         }\n         return new RowBlockBuilder(blockBuilderStatus, newBlockBuilders, new int[newSize + 1], new boolean[newSize]);\n     }\n+\n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(getPositionCount()), expectedEntries);\n+        BlockBuilder[] newBlockBuilders = new BlockBuilder[numFields];\n+        int nestedExpectedEntries = positionCount == 0 ? expectedEntries : toIntExact((long) fieldBlockOffsets[positionCount] * newSize / positionCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5OTQ5NA=="}, "originalCommit": {"oid": "1ecf2dcbd3c767987080febeec2336642a92b9c6"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3538, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}