{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTk5MjIz", "number": 14748, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxNDoyM1rOEJ0Ggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoyODo1NVrOENWupQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI2Mjc1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxNDoyM1rOGqgiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxNDoyM1rOGqgiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNjQxMQ==", "bodyText": "I don't think we need to send provider around?", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r447226411", "createdAt": "2020-06-29T20:14:23Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.cache.CacheConfig;\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.inject.Inject;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.facebook.presto.hive.CacheQuotaUtil.GLOBAL_PATH;\n+import static com.facebook.presto.hive.CacheQuotaUtil.completePartitionPath;\n+import static com.facebook.presto.hive.CacheQuotaUtil.completeTablePath;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConfigBasedCacheQuotaProvider\n+        implements CacheQuotaProvider\n+{\n+    public static final ConfigBasedCacheQuotaProvider NO_CACHE_REQUIREMENT = new ConfigBasedCacheQuotaProvider(GLOBAL, Optional.empty());\n+\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> configuredCacheQuota;\n+\n+    @Inject\n+    public ConfigBasedCacheQuotaProvider(CacheConfig cacheConfig)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        this.cacheQuotaScope = cacheConfig.getCacheQuotaScope();\n+        this.configuredCacheQuota = cacheConfig.getDefaultCacheQuota();\n+    }\n+\n+    @JsonCreator\n+    public ConfigBasedCacheQuotaProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f421674c28cea7d180f4d63f48ce7bf79478dd00"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY3NjYxOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMzoxMFrOGtew6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMzoxMFrOGtew6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MzE0Ng==", "bodyText": "nit: you could get this String by creating SchemaTableName and using SchemaTableName#toString", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450343146", "createdAt": "2020-07-06T16:33:10Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public class CacheQuotaUtil\n+{\n+    private CacheQuotaUtil() {}\n+\n+    public static final String GLOBAL_PATH = \".\";\n+\n+    public static String completeTablePath(String schema, String table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY4MzI0OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozNDo1NVrOGte1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozNDo1NVrOGte1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NDIyMw==", "bodyText": "This function signature seems to be a bit conflict with the javadoc above, which mentions we could get quota on partition scope. Since we don't want to compute it for every split, the easiest way to move forward is to add comment here saying we don't support different partition quota within one table.\nOf course we could return a map or make CacheQuotaRequirement to be more sophisticated, but let's start with something simple.", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450344223", "createdAt": "2020-07-06T16:34:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public interface CacheQuotaProvider\n+{\n+    /**\n+     * @return corresponding quota for specific schema, table, and partition\n+     * @param schema\n+     * @param table\n+     *\n+     */\n+    CacheQuotaRequirement getCacheQuota(String schema, String table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODExMDMwOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0MjoyMlrOGti91Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0MjoyMlrOGti91Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMTk4OQ==", "bodyText": "I don't see this class being used in open source. Maybe we should move this to where it resides?", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450411989", "createdAt": "2020-07-06T18:42:22Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public class CacheQuotaUtil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODExMzQ3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0MzoyN1rOGti_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjozNToyMFrOGuGqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMjQ5Mw==", "bodyText": "I think for config based provider, we are still able to support PARTITION as a scope?", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450412493", "createdAt": "2020-07-06T18:43:27Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.cache.CacheConfig;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.inject.Inject;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.facebook.presto.hive.CacheQuotaScope.SCHEMA;\n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConfigBasedCacheQuotaProvider\n+        implements CacheQuotaProvider\n+{\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> configuredCacheQuota;\n+\n+    @Inject\n+    public ConfigBasedCacheQuotaProvider(CacheConfig cacheConfig)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        this.cacheQuotaScope = cacheConfig.getCacheQuotaScope();\n+        this.configuredCacheQuota = cacheConfig.getDefaultCacheQuota();\n+    }\n+\n+    @Override\n+    public CacheQuotaRequirement getCacheQuota(String schema, String table)\n+    {\n+        switch (cacheQuotaScope) {\n+            case GLOBAL:\n+                return new CacheQuotaRequirement(GLOBAL, configuredCacheQuota);\n+            case SCHEMA:\n+                return new CacheQuotaRequirement(SCHEMA, configuredCacheQuota);\n+            case TABLE:\n+                return new CacheQuotaRequirement(TABLE, configuredCacheQuota);\n+            default:\n+                throw new PrestoException(HIVE_UNKNOWN_ERROR, format(\"%s is not supported\", configuredCacheQuota));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzQxOA==", "bodyText": "Since we're moving the calculation process from worker to coordinator, and on coordinator, in order to avoid calculation for every split, we then move the logic to HiveSplitManager.getSplits(), where we can only access Schema and Table info.\nSo basically we can only support those two for now.", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450643418", "createdAt": "2020-07-07T06:43:47Z", "author": {"login": "kewang1024"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.cache.CacheConfig;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.inject.Inject;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.facebook.presto.hive.CacheQuotaScope.SCHEMA;\n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConfigBasedCacheQuotaProvider\n+        implements CacheQuotaProvider\n+{\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> configuredCacheQuota;\n+\n+    @Inject\n+    public ConfigBasedCacheQuotaProvider(CacheConfig cacheConfig)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        this.cacheQuotaScope = cacheConfig.getCacheQuotaScope();\n+        this.configuredCacheQuota = cacheConfig.getDefaultCacheQuota();\n+    }\n+\n+    @Override\n+    public CacheQuotaRequirement getCacheQuota(String schema, String table)\n+    {\n+        switch (cacheQuotaScope) {\n+            case GLOBAL:\n+                return new CacheQuotaRequirement(GLOBAL, configuredCacheQuota);\n+            case SCHEMA:\n+                return new CacheQuotaRequirement(SCHEMA, configuredCacheQuota);\n+            case TABLE:\n+                return new CacheQuotaRequirement(TABLE, configuredCacheQuota);\n+            default:\n+                throw new PrestoException(HIVE_UNKNOWN_ERROR, format(\"%s is not supported\", configuredCacheQuota));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMjQ5Mw=="}, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5Njc0Nw==", "bodyText": "For config based, we don't use schema and table anyway and directly read from config, so we could still keep the same behavior I suppose?", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r450996747", "createdAt": "2020-07-07T16:35:20Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.cache.CacheConfig;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.inject.Inject;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.facebook.presto.hive.CacheQuotaScope.SCHEMA;\n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConfigBasedCacheQuotaProvider\n+        implements CacheQuotaProvider\n+{\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> configuredCacheQuota;\n+\n+    @Inject\n+    public ConfigBasedCacheQuotaProvider(CacheConfig cacheConfig)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        this.cacheQuotaScope = cacheConfig.getCacheQuotaScope();\n+        this.configuredCacheQuota = cacheConfig.getDefaultCacheQuota();\n+    }\n+\n+    @Override\n+    public CacheQuotaRequirement getCacheQuota(String schema, String table)\n+    {\n+        switch (cacheQuotaScope) {\n+            case GLOBAL:\n+                return new CacheQuotaRequirement(GLOBAL, configuredCacheQuota);\n+            case SCHEMA:\n+                return new CacheQuotaRequirement(SCHEMA, configuredCacheQuota);\n+            case TABLE:\n+                return new CacheQuotaRequirement(TABLE, configuredCacheQuota);\n+            default:\n+                throw new PrestoException(HIVE_UNKNOWN_ERROR, format(\"%s is not supported\", configuredCacheQuota));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMjQ5Mw=="}, "originalCommit": {"oid": "f288d72e22cdd34635b773f42403c24915639737"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjIyMzQ1OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1Nzo0OFrOGuxFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1Nzo0OFrOGuxFsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MTk1NQ==", "bodyText": "nit: Cache quota requirement for given schema and table?", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r451691955", "createdAt": "2020-07-08T16:57:48Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public interface CacheQuotaProvider\n+{\n+    /**\n+     * @return corresponding quota for specific schema, table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae42521cb95cc60d170213815bfdae92b9f18df"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjMyNDExOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyNDo1NlrOGuyFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyNDo1NlrOGuyFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwODIyNQ==", "bodyText": "Actually maybe we should name this CacheQuotaRequirementProvider? We already have a CacheQuota class, so maybe not make it more confusing.", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r451708225", "createdAt": "2020-07-08T17:24:56Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ConfigBasedCacheQuotaProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.cache.CacheConfig;\n+import com.google.inject.Inject;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConfigBasedCacheQuotaProvider\n+        implements CacheQuotaProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d6500b5b805e7aec5f0234acf047ba4b9384880"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDM5MzMzOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirementProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoyODo1NVrOGv_igA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoyODo1NVrOGv_igA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3NzI4MA==", "bodyText": "getCacheQuotaRequirement", "url": "https://github.com/prestodb/presto/pull/14748#discussion_r452977280", "createdAt": "2020-07-10T17:28:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirementProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public interface CacheQuotaRequirementProvider\n+{\n+    /**\n+     * @return cache quota requirement for a given schema and table\n+     *\n+     * @param schema\n+     * @param table\n+     *\n+     */\n+    CacheQuotaRequirement getCacheQuota(String schema, String table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0602552c22c64e9b4e9ee85ea3a5ab5a358bfa7b"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2554, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}