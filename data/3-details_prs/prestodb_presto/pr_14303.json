{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDE2NDk2", "number": 14303, "title": "Extract common subexpression in page projection at codegen", "bodyText": "Testing with Facebook workload shows positive CPU improvements overall. There are known corner cases that might cause regression, namely, very long list of projects with common sub expressions. In this case, we will compile all projections with cse into a single PageProjection, this would result in large bytecode size, and for some reason, a very wide projection has performance regression (We see similar behavior for wide ROW). These will be addressed in a follow up PR. The optimization can be turned off if regression is observed.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Add optimization for page projection by extract and compute common subexpressions among all projections first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.", "createdAt": "2020-03-28T00:09:15Z", "url": "https://github.com/prestodb/presto/pull/14303", "merged": true, "mergeCommit": {"oid": "b6659dac0d67ff8dc80561b97fb0794a9a7eb0f8"}, "closed": true, "closedAt": "2020-04-30T22:15:43Z", "author": {"login": "rongrong"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS4oobgBqjMxODExMDkxMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc0mDDgFqTQwMzkxMzEwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fbce588bc0f1da060b361d1fb2be97c8ee9dcf4", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7fbce588bc0f1da060b361d1fb2be97c8ee9dcf4", "committedDate": "2020-03-28T00:07:51Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "d8ce0b2c1c66df6e1931211e3f8161644e286804", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d8ce0b2c1c66df6e1931211e3f8161644e286804", "committedDate": "2020-03-31T01:15:02Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8ce0b2c1c66df6e1931211e3f8161644e286804", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d8ce0b2c1c66df6e1931211e3f8161644e286804", "committedDate": "2020-03-31T01:15:02Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "946081ed93d3b079f625e8eabb83f0dc09c2334c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/946081ed93d3b079f625e8eabb83f0dc09c2334c", "committedDate": "2020-03-31T18:38:39Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "946081ed93d3b079f625e8eabb83f0dc09c2334c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/946081ed93d3b079f625e8eabb83f0dc09c2334c", "committedDate": "2020-03-31T18:38:39Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "7ff097ced412410a277176e43d11591d665ed64c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7ff097ced412410a277176e43d11591d665ed64c", "committedDate": "2020-03-31T18:49:33Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ff097ced412410a277176e43d11591d665ed64c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7ff097ced412410a277176e43d11591d665ed64c", "committedDate": "2020-03-31T18:49:33Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "66994e59285ba121b8a1eea26230a75d35db536d", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/66994e59285ba121b8a1eea26230a75d35db536d", "committedDate": "2020-04-01T17:35:00Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66994e59285ba121b8a1eea26230a75d35db536d", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/66994e59285ba121b8a1eea26230a75d35db536d", "committedDate": "2020-04-01T17:35:00Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "4bb98e645febaec592457914a8fa3fcbddf36d8b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4bb98e645febaec592457914a8fa3fcbddf36d8b", "committedDate": "2020-04-01T18:04:37Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bb98e645febaec592457914a8fa3fcbddf36d8b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4bb98e645febaec592457914a8fa3fcbddf36d8b", "committedDate": "2020-04-01T18:04:37Z", "message": "Prototype common sub expression"}, "afterCommit": {"oid": "f530635764adad741943d6fdda11e34c41b4d45f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f530635764adad741943d6fdda11e34c41b4d45f", "committedDate": "2020-04-06T19:28:55Z", "message": "Prototype common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b982f4504c2e0e9e06bcec1bb2dd2e1ce91c9a1d", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b982f4504c2e0e9e06bcec1bb2dd2e1ce91c9a1d", "committedDate": "2020-04-07T03:27:30Z", "message": "Refactor PageProjection to produce List<Block>"}, "afterCommit": {"oid": "e3bee69b07a37d470e2887452a4a702da42f0796", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e3bee69b07a37d470e2887452a4a702da42f0796", "committedDate": "2020-04-07T03:35:56Z", "message": "Refactor PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3bee69b07a37d470e2887452a4a702da42f0796", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e3bee69b07a37d470e2887452a4a702da42f0796", "committedDate": "2020-04-07T03:35:56Z", "message": "Refactor PageProjection to produce List<Block>"}, "afterCommit": {"oid": "19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "committedDate": "2020-04-07T06:23:25Z", "message": "Refactor PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "committedDate": "2020-04-07T06:23:25Z", "message": "Refactor PageProjection to produce List<Block>"}, "afterCommit": {"oid": "cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "committedDate": "2020-04-07T06:30:40Z", "message": "Allow PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "committedDate": "2020-04-07T06:30:40Z", "message": "Allow PageProjection to produce List<Block>"}, "afterCommit": {"oid": "b1760988234e10d46abb30912b402d6c9db7264e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b1760988234e10d46abb30912b402d6c9db7264e", "committedDate": "2020-04-07T19:11:42Z", "message": "Allow PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1760988234e10d46abb30912b402d6c9db7264e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b1760988234e10d46abb30912b402d6c9db7264e", "committedDate": "2020-04-07T19:11:42Z", "message": "Allow PageProjection to produce List<Block>"}, "afterCommit": {"oid": "6718851a5a9999dd75b65676391ce63d32715969", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6718851a5a9999dd75b65676391ce63d32715969", "committedDate": "2020-04-07T19:43:09Z", "message": "Allow PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6718851a5a9999dd75b65676391ce63d32715969", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6718851a5a9999dd75b65676391ce63d32715969", "committedDate": "2020-04-07T19:43:09Z", "message": "Allow PageProjection to produce List<Block>"}, "afterCommit": {"oid": "38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "committedDate": "2020-04-07T21:57:09Z", "message": "Allow PageProjection to produce List<Block>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "committedDate": "2020-04-07T21:57:09Z", "message": "Allow PageProjection to produce List<Block>"}, "afterCommit": {"oid": "f4931f696b30b6d424a2a88ea7ac174081c238e9", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f4931f696b30b6d424a2a88ea7ac174081c238e9", "committedDate": "2020-04-08T01:28:05Z", "message": "Add API in PageFunctionCompiler to compile a list of projections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4931f696b30b6d424a2a88ea7ac174081c238e9", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f4931f696b30b6d424a2a88ea7ac174081c238e9", "committedDate": "2020-04-08T01:28:05Z", "message": "Add API in PageFunctionCompiler to compile a list of projections"}, "afterCommit": {"oid": "6eecccd7e728b621c597fca5685eeb4da9844c7f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6eecccd7e728b621c597fca5685eeb4da9844c7f", "committedDate": "2020-04-10T23:15:26Z", "message": "Generate projection bytecode based on common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eecccd7e728b621c597fca5685eeb4da9844c7f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6eecccd7e728b621c597fca5685eeb4da9844c7f", "committedDate": "2020-04-10T23:15:26Z", "message": "Generate projection bytecode based on common sub expression"}, "afterCommit": {"oid": "e1eb3c66da2be75bc9b32358ff82a3b82242952f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e1eb3c66da2be75bc9b32358ff82a3b82242952f", "committedDate": "2020-04-11T04:31:03Z", "message": "Generate projection bytecode based on common sub expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1eb3c66da2be75bc9b32358ff82a3b82242952f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e1eb3c66da2be75bc9b32358ff82a3b82242952f", "committedDate": "2020-04-11T04:31:03Z", "message": "Generate projection bytecode based on common sub expression"}, "afterCommit": {"oid": "723ec6a2c244d1621fda956c30d334be0b1603ed", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/723ec6a2c244d1621fda956c30d334be0b1603ed", "committedDate": "2020-04-11T04:32:48Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "723ec6a2c244d1621fda956c30d334be0b1603ed", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/723ec6a2c244d1621fda956c30d334be0b1603ed", "committedDate": "2020-04-11T04:32:48Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "committedDate": "2020-04-13T20:01:21Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "committedDate": "2020-04-13T20:01:21Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "a0faed75a168b4a6fee70fca7372f2619bc535e1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a0faed75a168b4a6fee70fca7372f2619bc535e1", "committedDate": "2020-04-14T19:52:36Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDcxOTM0", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-394071934", "createdAt": "2020-04-15T19:29:24Z", "commit": {"oid": "837fa3721c77492d94d1fbbe7f2c80212edd3bc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToyOToyNVrOGGIbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToyOToyNVrOGGIbtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MjgwNA==", "bodyText": "int channel", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r409082804", "createdAt": "2020-04-15T19:29:25Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java", "diffHunk": "@@ -283,32 +295,39 @@ private ProcessBatchResult processBatch(int batchSize)\n                 }\n \n                 // if possible, use previouslyComputedResults produced in prior optimistic failure attempt\n-                PageProjection projection = projections.get(i);\n-                if (previouslyComputedResults[i] != null && previouslyComputedResults[i].getPositionCount() >= batchSize) {\n-                    blocks[i] = previouslyComputedResults[i].getRegion(0, batchSize);\n+                int[] outputChannels = projection.getOutputChannels();\n+                // The progress on all output channels of a projection should be the same, so we just use the first one.\n+                if (previouslyComputedResults[outputChannels[0]] != null && previouslyComputedResults[outputChannels[0]].getPositionCount() >= batchSize) {\n+                    for (Integer channel : outputChannels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "837fa3721c77492d94d1fbbe7f2c80212edd3bc2"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDc0MzU2", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-394074356", "createdAt": "2020-04-15T19:32:57Z", "commit": {"oid": "a0faed75a168b4a6fee70fca7372f2619bc535e1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0faed75a168b4a6fee70fca7372f2619bc535e1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a0faed75a168b4a6fee70fca7372f2619bc535e1", "committedDate": "2020-04-14T19:52:36Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "4b484fe748adee59ce4e150ed52ebdee95be7bcd", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4b484fe748adee59ce4e150ed52ebdee95be7bcd", "committedDate": "2020-04-15T20:30:23Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b484fe748adee59ce4e150ed52ebdee95be7bcd", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4b484fe748adee59ce4e150ed52ebdee95be7bcd", "committedDate": "2020-04-15T20:30:23Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "committedDate": "2020-04-15T20:41:52Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTI2NDgy", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-394126482", "createdAt": "2020-04-15T20:52:47Z", "commit": {"oid": "fa7f31d3adfcb1a5efcac52d9605dd30a413344f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTI3ODkx", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-394127891", "createdAt": "2020-04-15T20:54:58Z", "commit": {"oid": "fa7f31d3adfcb1a5efcac52d9605dd30a413344f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "committedDate": "2020-04-15T20:41:52Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "bad9a818f1ceb2353b719024906d7b349e2850a7", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/bad9a818f1ceb2353b719024906d7b349e2850a7", "committedDate": "2020-04-15T22:09:53Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDgwNDIw", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-395080420", "createdAt": "2020-04-17T00:09:56Z", "commit": {"oid": "bad9a818f1ceb2353b719024906d7b349e2850a7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDgwNzkz", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-395080793", "createdAt": "2020-04-17T00:11:07Z", "commit": {"oid": "bad9a818f1ceb2353b719024906d7b349e2850a7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bad9a818f1ceb2353b719024906d7b349e2850a7", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/bad9a818f1ceb2353b719024906d7b349e2850a7", "committedDate": "2020-04-15T22:09:53Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "committedDate": "2020-04-20T21:27:57Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "committedDate": "2020-04-20T21:27:57Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "committedDate": "2020-04-20T23:39:06Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "committedDate": "2020-04-20T23:39:06Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "committedDate": "2020-04-21T03:24:18Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODc1Mzcw", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-397875370", "createdAt": "2020-04-22T06:22:58Z", "commit": {"oid": "956d82c8b6d2b0f3224dd2c8a9fc0f54caa5eadc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMjo1OFrOGJlVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMjo1OFrOGJlVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjA3Mw==", "bodyText": "hmmmm under what circumstances will we skip the end label?", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r412702073", "createdAt": "2020-04-22T06:22:58Z", "author": {"login": "highker"}, "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/control/SwitchStatement.java", "diffHunk": "@@ -41,23 +41,31 @@ public static SwitchBuilder switchBuilder()\n         return new SwitchBuilder();\n     }\n \n+    public static SwitchBuilder switchBuilder(boolean skipEndLabel)\n+    {\n+        return new SwitchBuilder(skipEndLabel);\n+    }\n+\n     private final LabelNode endLabel = new LabelNode(\"switchEnd\");\n     private final LabelNode defaultLabel = new LabelNode(\"switchDefault\");\n     private final String comment;\n     private final BytecodeExpression expression;\n     private final SortedSet<CaseStatement> cases;\n     private final BytecodeNode defaultBody;\n+    private final boolean skipEndLabel;\n \n     private SwitchStatement(\n             String comment,\n             BytecodeExpression expression,\n             Iterable<CaseStatement> cases,\n-            BytecodeNode defaultBody)\n+            BytecodeNode defaultBody,\n+            boolean skipEndLabel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956d82c8b6d2b0f3224dd2c8a9fc0f54caa5eadc"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "committedDate": "2020-04-21T03:24:18Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "3e42abdc7f734870575f5964ca25fee32838bac8", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3e42abdc7f734870575f5964ca25fee32838bac8", "committedDate": "2020-04-22T22:46:44Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e42abdc7f734870575f5964ca25fee32838bac8", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3e42abdc7f734870575f5964ca25fee32838bac8", "committedDate": "2020-04-22T22:46:44Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "c28e19cff6f361335aee76dd6a9493fd3776b320", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/c28e19cff6f361335aee76dd6a9493fd3776b320", "committedDate": "2020-04-23T01:00:36Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c28e19cff6f361335aee76dd6a9493fd3776b320", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/c28e19cff6f361335aee76dd6a9493fd3776b320", "committedDate": "2020-04-23T01:00:36Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "7f9623da934b65e3dc5ab0ca78dee8576d121263", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7f9623da934b65e3dc5ab0ca78dee8576d121263", "committedDate": "2020-04-23T02:59:26Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f9623da934b65e3dc5ab0ca78dee8576d121263", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7f9623da934b65e3dc5ab0ca78dee8576d121263", "committedDate": "2020-04-23T02:59:26Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "3d892f282ec0181f371ad089de8af657775fe788", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3d892f282ec0181f371ad089de8af657775fe788", "committedDate": "2020-04-23T03:24:23Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d892f282ec0181f371ad089de8af657775fe788", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3d892f282ec0181f371ad089de8af657775fe788", "committedDate": "2020-04-23T03:24:23Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "936e3744f9cee997c953584aa66749e1700e174c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/936e3744f9cee997c953584aa66749e1700e174c", "committedDate": "2020-04-23T19:27:59Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "936e3744f9cee997c953584aa66749e1700e174c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/936e3744f9cee997c953584aa66749e1700e174c", "committedDate": "2020-04-23T19:27:59Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "792de9d82270d2e5c58da135759e20882de52821", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/792de9d82270d2e5c58da135759e20882de52821", "committedDate": "2020-04-23T19:42:42Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "792de9d82270d2e5c58da135759e20882de52821", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/792de9d82270d2e5c58da135759e20882de52821", "committedDate": "2020-04-23T19:42:42Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "fb713d45275193f987f52113075e981f5a39051a", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/fb713d45275193f987f52113075e981f5a39051a", "committedDate": "2020-04-23T20:22:44Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb713d45275193f987f52113075e981f5a39051a", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/fb713d45275193f987f52113075e981f5a39051a", "committedDate": "2020-04-23T20:22:44Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "b4e75c8b90284266381dc929450e4f22bf450c84", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b4e75c8b90284266381dc929450e4f22bf450c84", "committedDate": "2020-04-24T00:03:32Z", "message": "Add CSE logging for testing (testing only will remove)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4e75c8b90284266381dc929450e4f22bf450c84", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b4e75c8b90284266381dc929450e4f22bf450c84", "committedDate": "2020-04-24T00:03:32Z", "message": "Add CSE logging for testing (testing only will remove)"}, "afterCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/57269af89e11a5fed1657b1e462dea66ecbf913b", "committedDate": "2020-04-24T21:56:33Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTQyNDcy", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-400542472", "createdAt": "2020-04-26T19:51:45Z", "commit": {"oid": "790306ff807826122fd01f631f9b86667886d04e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo1MTo0NVrOGMJM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo1OTowOVrOGMJSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NjgzNg==", "bodyText": "type(List.class, BlockBuilder.class) I guess? IIRC, without parametric, the code will be List<Object>\ncausing casting overhead. Same for many other places", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415386836", "createdAt": "2020-04-26T19:51:45Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -242,31 +249,33 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n         // process\n-        generateProcessMethod(classDefinition, blockBuilderField, propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n+        generateProcessMethod(classDefinition, blockBuilderFields, projections.size(), propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n \n         // getResult\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getResult\", type(Object.class), ImmutableList.of());\n         method.getBody().append(method.getThis().getField(resultField)).ret(Object.class);\n \n         // evaluate\n-        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projection, metadata, sqlFunctionProperties);\n-        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projection, blockBuilderField);\n+        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections, metadata, sqlFunctionProperties, \"\");\n+        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projections, blockBuilderFields);\n \n         // constructor\n-        Parameter blockBuilder = arg(\"blockBuilder\", BlockBuilder.class);\n+        Parameter blockBuilders = arg(\"blockBuilders\", List.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790306ff807826122fd01f631f9b86667886d04e"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzQ4Mg==", "bodyText": "hmmmm.... why .get(0) here?", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415387482", "createdAt": "2020-04-26T19:55:27Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -135,7 +140,7 @@ public PageFunctionCompiler(Metadata metadata, int expressionCacheSize)\n             filterCache = CacheBuilder.newBuilder()\n                     .recordStats()\n                     .maximumSize(expressionCacheSize)\n-                    .build(CacheLoader.from(cacheKey -> compileFilterInternal(cacheKey.sqlFunctionProperties, cacheKey.rowExpression, Optional.empty())));\n+                    .build(CacheLoader.from(cacheKey -> compileFilterInternal(cacheKey.sqlFunctionProperties, cacheKey.rowExpressions.get(0), Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790306ff807826122fd01f631f9b86667886d04e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzkzMg==", "bodyText": "What happens to other types of RowExpressions?", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415387932", "createdAt": "2020-04-26T19:57:32Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -197,12 +187,29 @@ public CacheStatsMBean getFilterCache()\n             return () -> projectionFunction;\n         }\n \n-        PageFieldsToInputParametersRewriter.Result result = rewritePageFieldsToInputParameters(projection);\n+        if (projectionCache == null) {\n+            return compileProjectionInternal(sqlFunctionProperties, ImmutableList.of(projection), classNameSuffix);\n+        }\n+        return projectionCache.getUnchecked(new CacheKey(sqlFunctionProperties, ImmutableList.of(projection)));\n+    }\n+\n+    private Supplier<PageProjectionWithOutputs> toPageProjectionWithOutputs(Supplier<PageProjection> pageProjection, int[] outputChannels)\n+    {\n+        return () -> new PageProjectionWithOutputs(pageProjection.get(), outputChannels);\n+    }\n+\n+    private Supplier<PageProjection> compileProjectionInternal(SqlFunctionProperties sqlFunctionProperties, List<RowExpression> projections, Optional<String> classNameSuffix)\n+    {\n+        requireNonNull(projections, \"projections is null\");\n+        checkArgument(projections.stream().allMatch(projection -> projection instanceof CallExpression || projection instanceof SpecialFormExpression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790306ff807826122fd01f631f9b86667886d04e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4ODIzNQ==", "bodyText": "I guess we don't have to do a copy if the list is immutable?", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415388235", "createdAt": "2020-04-26T19:59:09Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -242,31 +249,33 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n         // process\n-        generateProcessMethod(classDefinition, blockBuilderField, propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n+        generateProcessMethod(classDefinition, blockBuilderFields, projections.size(), propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n \n         // getResult\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getResult\", type(Object.class), ImmutableList.of());\n         method.getBody().append(method.getThis().getField(resultField)).ret(Object.class);\n \n         // evaluate\n-        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projection, metadata, sqlFunctionProperties);\n-        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projection, blockBuilderField);\n+        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections, metadata, sqlFunctionProperties, \"\");\n+        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projections, blockBuilderFields);\n \n         // constructor\n-        Parameter blockBuilder = arg(\"blockBuilder\", BlockBuilder.class);\n+        Parameter blockBuilders = arg(\"blockBuilders\", List.class);\n         Parameter properties = arg(\"properties\", SqlFunctionProperties.class);\n         Parameter page = arg(\"page\", Page.class);\n         Parameter selectedPositions = arg(\"selectedPositions\", SelectedPositions.class);\n \n-        MethodDefinition constructorDefinition = classDefinition.declareConstructor(a(PUBLIC), blockBuilder, properties, page, selectedPositions);\n+        MethodDefinition constructorDefinition = classDefinition.declareConstructor(a(PUBLIC), blockBuilders, properties, page, selectedPositions);\n \n         BytecodeBlock body = constructorDefinition.getBody();\n         Variable thisVariable = constructorDefinition.getThis();\n \n         body.comment(\"super();\")\n                 .append(thisVariable)\n                 .invokeConstructor(Object.class)\n-                .append(thisVariable.setField(blockBuilderField, blockBuilder))\n+                .append(thisVariable)\n+                .append(invokeStatic(ImmutableList.class, \"copyOf\", ImmutableList.class, blockBuilders.cast(Collection.class)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790306ff807826122fd01f631f9b86667886d04e"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjYwMjEz", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-383260213", "createdAt": "2020-03-28T00:13:28Z", "commit": {"oid": "7fbce588bc0f1da060b361d1fb2be97c8ee9dcf4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDoxMzoyOFrOF9FFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowNzozOVrOGMoMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MDgwNA==", "bodyText": "spelling", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r399590804", "createdAt": "2020-03-28T00:13:28Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionRewriter.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.RowExpressionVisitor;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class CommonSubExpressionRewriter\n+{\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> rewriteWithCSEByLevel(List<RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        Map<Integer, Set<RowExpression>> cseByLevel = expressionCollector.cseByLevel;\n+        if (cseByLevel.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        PlanVariableAllocator variableAllocator = new PlanVariableAllocator();\n+        ImmutableMap.Builder<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressions = ImmutableMap.builder();\n+        Map<RowExpression, VariableReferenceExpression> rewriteWith = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        int maxCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        for (int i = startCSELevel; i <= maxCSELevel; i++) {\n+            if (cseByLevel.containsKey(i)) {\n+                ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+                ImmutableMap.Builder<RowExpression, VariableReferenceExpression> expressionVariableMapBuilder = ImmutableMap.builder();\n+                for (RowExpression expression : cseByLevel.get(i)) {\n+                    RowExpression rewritten = expression.accept(rewritter, null);\n+                    expressionVariableMapBuilder.put(rewritten, variableAllocator.newVariable(rewritten));\n+                }\n+                Map<RowExpression, VariableReferenceExpression> expressionVariableMap = expressionVariableMapBuilder.build();\n+                commonSubExpressions.put(i, expressionVariableMap);\n+                rewriteWith.putAll(expressionVariableMap);\n+            }\n+        }\n+        return commonSubExpressions.build();\n+    }\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> rewriteWithCSEByLevel(RowExpression expression)\n+    {\n+        return rewriteWithCSEByLevel(ImmutableList.of(expression));\n+    }\n+\n+    public static RowExpression rewriteExpressionWithCSE(RowExpression expression, Map<RowExpression, VariableReferenceExpression> rewriteWith)\n+    {\n+        ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbce588bc0f1da060b361d1fb2be97c8ee9dcf4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTUzMw==", "bodyText": "plural - expressions - will be good", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r401229533", "createdAt": "2020-03-31T21:35:32Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -149,6 +149,7 @@\n     public static final String PARTITIONING_PRECISION_STRATEGY = \"partitioning_precision_strategy\";\n     public static final String EXPERIMENTAL_FUNCTIONS_ENABLED = \"experimental_functions_enabled\";\n     public static final String USE_LEGACY_SCHEDULER = \"use_legacy_scheduler\";\n+    public static final String OPTIMIZE_COMMON_SUB_EXPRESSION = \"optimize_common_sub_expression\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff097ced412410a277176e43d11591d665ed64c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzQyNw==", "bodyText": "subexpression (no underscore)\nSo\noptimize_common_subexpressions", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r401697427", "createdAt": "2020-04-01T15:18:39Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -149,6 +149,7 @@\n     public static final String PARTITIONING_PRECISION_STRATEGY = \"partitioning_precision_strategy\";\n     public static final String EXPERIMENTAL_FUNCTIONS_ENABLED = \"experimental_functions_enabled\";\n     public static final String USE_LEGACY_SCHEDULER = \"use_legacy_scheduler\";\n+    public static final String OPTIMIZE_COMMON_SUB_EXPRESSION = \"optimize_common_sub_expression\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff097ced412410a277176e43d11591d665ed64c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3MTYwMg==", "bodyText": "Please breakup complex expression for readability or one arg per line", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415871602", "createdAt": "2020-04-27T14:41:19Z", "author": {"login": "kaikalur"}, "path": "presto-benchmark/src/main/java/com/facebook/presto/benchmark/HandTpchQuery6.java", "diffHunk": "@@ -71,12 +72,12 @@ public HandTpchQuery6(LocalQueryRunner localQueryRunner)\n         //    and quantity < 24;\n         OperatorFactory tableScanOperator = createTableScanOperator(0, new PlanNodeId(\"test\"), \"lineitem\", \"extendedprice\", \"discount\", \"shipdate\", \"quantity\");\n \n-        Supplier<PageProjection> projection = new PageFunctionCompiler(localQueryRunner.getMetadata(), 0).compileProjection(session.getSqlFunctionProperties(), field(0, BIGINT), Optional.empty());\n+        List<Supplier<PageProjectionWithOutputs>> projection = new PageFunctionCompiler(localQueryRunner.getMetadata(), 0).compileProjections(session.getSqlFunctionProperties(), ImmutableList.of(field(0, BIGINT)), false, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3Njc3MQ==", "bodyText": "Spelling", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415876771", "createdAt": "2020-04-27T14:47:12Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionRewriter.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.RowExpressionVisitor;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.WHEN;\n+import static com.facebook.presto.sql.relational.Expressions.subExpressions;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static java.util.function.Function.identity;\n+\n+public class CommonSubExpressionRewriter\n+{\n+    private CommonSubExpressionRewriter() {}\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> collectCSEByLevel(List<? extends RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        if (expressionCollector.cseByLevel.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        Map<Integer, Map<RowExpression, Integer>> cseByLevel = removeRedundantCSE(expressionCollector.cseByLevel, expressionCollector.expressionCount);\n+\n+        PlanVariableAllocator variableAllocator = new PlanVariableAllocator();\n+        ImmutableMap.Builder<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressions = ImmutableMap.builder();\n+        Map<RowExpression, VariableReferenceExpression> rewriteWith = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        int maxCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        for (int i = startCSELevel; i <= maxCSELevel; i++) {\n+            if (cseByLevel.containsKey(i)) {\n+                ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+                ImmutableMap.Builder<RowExpression, VariableReferenceExpression> expressionVariableMapBuilder = ImmutableMap.builder();\n+                for (Map.Entry<RowExpression, Integer> entry : cseByLevel.get(i).entrySet()) {\n+                    RowExpression rewrittenExpression = entry.getKey().accept(rewritter, null);\n+                    expressionVariableMapBuilder.put(rewrittenExpression, variableAllocator.newVariable(rewrittenExpression, \"cse\"));\n+                }\n+                Map<RowExpression, VariableReferenceExpression> expressionVariableMap = expressionVariableMapBuilder.build();\n+                commonSubExpressions.put(i, expressionVariableMap);\n+                rewriteWith.putAll(expressionVariableMap.entrySet().stream().collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue())));\n+            }\n+        }\n+        return commonSubExpressions.build();\n+    }\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> collectCSEByLevel(RowExpression expression)\n+    {\n+        return collectCSEByLevel(ImmutableList.of(expression));\n+    }\n+\n+    public static List<RowExpression> getExpressionsWithCSE(List<? extends RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        Set<RowExpression> cse = expressionCollector.cseByLevel.values().stream().flatMap(Set::stream).collect(toImmutableSet());\n+        SubExpressionChecker subExpressionChecker = new SubExpressionChecker(cse);\n+        return expressions.stream().filter(expression -> expression.accept(subExpressionChecker, null)).collect(toImmutableList());\n+    }\n+\n+    public static RowExpression rewriteExpressionWithCSE(RowExpression expression, Map<RowExpression, VariableReferenceExpression> rewriteWith)\n+    {\n+        ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+        return expression.accept(rewritter, null);\n+    }\n+\n+    private static Map<Integer, Map<RowExpression, Integer>> removeRedundantCSE(Map<Integer, Set<RowExpression>> cseByLevel, Map<RowExpression, Integer> expressionCount)\n+    {\n+        Map<Integer, Map<RowExpression, Integer>> results = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        int stopCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        for (int i = startCSELevel; i > stopCSELevel; i--) {\n+            Map<RowExpression, Integer> expressions = cseByLevel.get(i).stream().filter(expression -> expressionCount.get(expression) > 0).collect(toImmutableMap(identity(), expressionCount::get));\n+            if (!expressions.isEmpty()) {\n+                results.put(i, expressions);\n+            }\n+            for (RowExpression expression : expressions.keySet()) {\n+                int expressionOccurrence = expressionCount.get(expression);\n+                subExpressions(expression).stream()\n+                        .filter(subExpression -> !subExpression.equals(expression))\n+                        .forEach(subExpression -> {\n+                            if (expressionCount.containsKey(subExpression)) {\n+                                expressionCount.put(subExpression, expressionCount.get(subExpression) - expressionOccurrence);\n+                            }\n+                        });\n+            }\n+        }\n+        Map<RowExpression, Integer> expressions = cseByLevel.get(stopCSELevel).stream().filter(expression -> expressionCount.get(expression) > 0).collect(toImmutableMap(identity(), expression -> expressionCount.get(expression) + 1));\n+        if (!expressions.isEmpty()) {\n+            results.put(stopCSELevel, expressions);\n+        }\n+        return results;\n+    }\n+\n+    static class SubExpressionChecker\n+            implements RowExpressionVisitor<Boolean, Void>\n+    {\n+        private final Set<RowExpression> subExpressions;\n+\n+        SubExpressionChecker(Set<RowExpression> subExpressions)\n+        {\n+            this.subExpressions = subExpressions;\n+        }\n+\n+        @Override\n+        public Boolean visitCall(CallExpression call, Void context)\n+        {\n+            if (subExpressions.contains(call)) {\n+                return true;\n+            }\n+            if (call.getArguments().isEmpty()) {\n+                return false;\n+            }\n+            return call.getArguments().stream().anyMatch(expression -> expression.accept(this, null));\n+        }\n+\n+        @Override\n+        public Boolean visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return subExpressions.contains(reference);\n+        }\n+\n+        @Override\n+        public Boolean visitConstant(ConstantExpression literal, Void context)\n+        {\n+            return subExpressions.contains(literal);\n+        }\n+\n+        @Override\n+        public Boolean visitLambda(LambdaDefinitionExpression lambda, Void context)\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitVariableReference(VariableReferenceExpression reference, Void context)\n+        {\n+            return subExpressions.contains(reference);\n+        }\n+\n+        @Override\n+        public Boolean visitSpecialForm(SpecialFormExpression specialForm, Void context)\n+        {\n+            if (subExpressions.contains(specialForm)) {\n+                return true;\n+            }\n+            if (specialForm.getArguments().isEmpty()) {\n+                return false;\n+            }\n+            return specialForm.getArguments().stream().anyMatch(expression -> expression.accept(this, null));\n+        }\n+    }\n+\n+    static class ExpressionRewritter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg5Mzc5MQ==", "bodyText": "To maintain symmetry and clean logic, keep this check in the method itself.", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415893791", "createdAt": "2020-04-27T15:06:33Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -597,15 +777,96 @@ private static void declareBlockVariables(RowExpression expression, Parameter pa\n                 callSiteBinder);\n     }\n \n+    private static class CommonSubExpressionFields\n+    {\n+        private final FieldDefinition evaluatedField;\n+        private final FieldDefinition resultField;\n+        private final Class<?> resultType;\n+        private final String methodName;\n+\n+        public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n+        {\n+            this.evaluatedField = evaluatedField;\n+            this.resultField = resultField;\n+            this.resultType = resultType;\n+            this.methodName = methodName;\n+        }\n+    }\n+\n+    private static class CSEFieldAndVariableReferenceCompiler\n+            implements RowExpressionVisitor<BytecodeNode, Scope>\n+    {\n+        private final InputReferenceCompiler inputReferenceCompiler;\n+        private final Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap;\n+        private final Variable thisVariable;\n+\n+        public CSEFieldAndVariableReferenceCompiler(CallSiteBinder callSiteBinder, Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap, Variable thisVariable)\n+        {\n+            this.inputReferenceCompiler = new InputReferenceCompiler(\n+                    (scope, field) -> scope.getVariable(\"block_\" + field),\n+                    (scope, field) -> scope.getVariable(\"position\"),\n+                    callSiteBinder);\n+            this.variableMap = ImmutableMap.copyOf(variableMap);\n+            this.thisVariable = thisVariable;\n+        }\n+        @Override\n+        public BytecodeNode visitCall(CallExpression call, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitInputReference(InputReferenceExpression reference, Scope context)\n+        {\n+            return inputReferenceCompiler.visitInputReference(reference, context);\n+        }\n+\n+        @Override\n+        public BytecodeNode visitConstant(ConstantExpression literal, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n+        {\n+            CommonSubExpressionFields fields = variableMap.get(reference);\n+            IfStatement ifStatement = new IfStatement()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b"}, "originalPosition": 570}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg5NDY2Ng==", "bodyText": "Can we guarantee this is invokespecial?", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415894666", "createdAt": "2020-04-27T15:07:39Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -597,15 +777,96 @@ private static void declareBlockVariables(RowExpression expression, Parameter pa\n                 callSiteBinder);\n     }\n \n+    private static class CommonSubExpressionFields\n+    {\n+        private final FieldDefinition evaluatedField;\n+        private final FieldDefinition resultField;\n+        private final Class<?> resultType;\n+        private final String methodName;\n+\n+        public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n+        {\n+            this.evaluatedField = evaluatedField;\n+            this.resultField = resultField;\n+            this.resultType = resultType;\n+            this.methodName = methodName;\n+        }\n+    }\n+\n+    private static class CSEFieldAndVariableReferenceCompiler\n+            implements RowExpressionVisitor<BytecodeNode, Scope>\n+    {\n+        private final InputReferenceCompiler inputReferenceCompiler;\n+        private final Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap;\n+        private final Variable thisVariable;\n+\n+        public CSEFieldAndVariableReferenceCompiler(CallSiteBinder callSiteBinder, Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap, Variable thisVariable)\n+        {\n+            this.inputReferenceCompiler = new InputReferenceCompiler(\n+                    (scope, field) -> scope.getVariable(\"block_\" + field),\n+                    (scope, field) -> scope.getVariable(\"position\"),\n+                    callSiteBinder);\n+            this.variableMap = ImmutableMap.copyOf(variableMap);\n+            this.thisVariable = thisVariable;\n+        }\n+        @Override\n+        public BytecodeNode visitCall(CallExpression call, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitInputReference(InputReferenceExpression reference, Scope context)\n+        {\n+            return inputReferenceCompiler.visitInputReference(reference, context);\n+        }\n+\n+        @Override\n+        public BytecodeNode visitConstant(ConstantExpression literal, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n+        {\n+            CommonSubExpressionFields fields = variableMap.get(reference);\n+            IfStatement ifStatement = new IfStatement()\n+                    .condition(thisVariable.getField(fields.evaluatedField))\n+                    .ifFalse(new BytecodeBlock()\n+                            .append(thisVariable.invoke(fields.methodName, void.class, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b"}, "originalPosition": 573}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/57269af89e11a5fed1657b1e462dea66ecbf913b", "committedDate": "2020-04-24T21:56:33Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "d2a64222b8976e178ac94f7d23bd770116d57a57", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d2a64222b8976e178ac94f7d23bd770116d57a57", "committedDate": "2020-04-29T17:48:12Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2a64222b8976e178ac94f7d23bd770116d57a57", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d2a64222b8976e178ac94f7d23bd770116d57a57", "committedDate": "2020-04-29T17:48:12Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "committedDate": "2020-04-29T18:13:56Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "committedDate": "2020-04-29T18:13:56Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "committedDate": "2020-04-29T18:29:52Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODI1NTYw", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-403825560", "createdAt": "2020-04-30T19:45:05Z", "commit": {"oid": "e5d4b030e8de0a6d9dc045c7a811a19c3f51889a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4369099cd3aaed5e2870418b519dd54642657a30", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4369099cd3aaed5e2870418b519dd54642657a30", "committedDate": "2020-04-30T20:00:29Z", "message": "Change PageProjection to produce List<Block>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a518852d5e3f1986fdfb3cef7a8701c6ecb07041", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a518852d5e3f1986fdfb3cef7a8701c6ecb07041", "committedDate": "2020-04-30T20:00:29Z", "message": "Add API in PageFunctionCompiler to compile a list of projections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a39866678131e30c49516c04c1af617f4f57a2", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a3a39866678131e30c49516c04c1af617f4f57a2", "committedDate": "2020-04-30T20:00:29Z", "message": "Remove PageProjection::getType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e36c801ac4fe51b1c89a0ec002e921989df50f1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/9e36c801ac4fe51b1c89a0ec002e921989df50f1", "committedDate": "2020-04-30T20:00:29Z", "message": "Change PageFunctionCompiler to compile a list of projections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "committedDate": "2020-04-29T18:29:52Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "5990f72e31b87e9e6948211a20b35ea4a355d956", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/5990f72e31b87e9e6948211a20b35ea4a355d956", "committedDate": "2020-04-30T20:00:45Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cfd30fdd16319dced15f32141385b1775420766", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/0cfd30fdd16319dced15f32141385b1775420766", "committedDate": "2020-04-30T20:29:52Z", "message": "Generate projection bytecode based on common sub expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de77438330d4a54ac6e366cfbcabe7ca0c9be189", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/de77438330d4a54ac6e366cfbcabe7ca0c9be189", "committedDate": "2020-04-30T20:29:52Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5990f72e31b87e9e6948211a20b35ea4a355d956", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/5990f72e31b87e9e6948211a20b35ea4a355d956", "committedDate": "2020-04-30T20:00:45Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}, "afterCommit": {"oid": "de77438330d4a54ac6e366cfbcabe7ca0c9be189", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/de77438330d4a54ac6e366cfbcabe7ca0c9be189", "committedDate": "2020-04-30T20:29:52Z", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTEzMTA2", "url": "https://github.com/prestodb/presto/pull/14303#pullrequestreview-403913106", "createdAt": "2020-04-30T22:12:35Z", "commit": {"oid": "de77438330d4a54ac6e366cfbcabe7ca0c9be189"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}