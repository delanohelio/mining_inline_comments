{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTc5ODIy", "number": 14670, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1MTo0M1rOEGm3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MzoyNVrOEMqjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzYzNjc0OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1MTo0M1rOGlgfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1MTo0M1rOGlgfyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MjkyMA==", "bodyText": "nit: start a new line for getBenchmarkSuiteObject(SUITE, QUERY_SET)?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r441982920", "createdAt": "2020-06-18T05:51:43Z", "author": {"login": "yingsu00"}, "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java", "diffHunk": "@@ -73,6 +74,8 @@ public void testSupplySuite()\n \n         insertBenchmarkSuite(handle, SUITE, QUERY_SET, PHASE_SPECIFICATION_LIST_CODEC.toJson(getBenchmarkSuitePhases()), MAP_CODEC.toJson(getBenchmarkSuiteSessionProperties()));\n \n-        assertEquals(new DbBenchmarkSuiteSupplier(jdbi, new BenchmarkSuiteConfig().setSuite(SUITE)).get(), getBenchmarkSuiteObject(SUITE, QUERY_SET));\n+        assertEquals(new MySqlBenchmarkSuiteSupplier(\n+                new MySqlBenchmarkSuiteConfig().setDatabaseUrl(mySqlServer.getJdbcUrl(XDB)),\n+                new BenchmarkSuiteConfig().setSuite(SUITE)).get(), getBenchmarkSuiteObject(SUITE, QUERY_SET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83828f58b1f98567435bd92a5d7a06db4b2c146"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODQyMDU0OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTowMDoxMFrOGpQhvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTowMDoxMFrOGpQhvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTU4Mg==", "bodyText": "Does STREAM mean single stream and CONCURRENT means multiple of streams? Or CONCURRENT means no streams? Could you add some comment?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445915582", "createdAt": "2020-06-26T01:00:10Z", "author": {"login": "yingsu00"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.benchmark.framework;\n+\n+public enum ExecutionStrategy\n+{\n+    STREAM,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1914034351b35d5a41e651ad9bdf980aa314572b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODY2NDI1OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo1MTozNFrOGpS1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoxNjo1M1rOGrM5Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzQyOQ==", "bodyText": "Why is the queries mutable? Everything else is final, why does the queries need to change given a fixed suite and querySet?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445953429", "createdAt": "2020-06-26T03:51:34Z", "author": {"login": "yingsu00"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java", "diffHunk": "@@ -63,13 +85,54 @@ public boolean equals(Object obj)\n             return false;\n         }\n         BenchmarkSuite o = (BenchmarkSuite) obj;\n-        return Objects.equals(suiteInfo, o.suiteInfo) &&\n+        return Objects.equals(suite, o.suite) &&\n+                Objects.equals(querySet, o.querySet) &&\n+                Objects.equals(phases, o.phases) &&\n+                Objects.equals(sessionProperties, o.sessionProperties) &&\n                 Objects.equals(queries, o.queries);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(suiteInfo, queries);\n+        return Objects.hash(suite, querySet, phases, sessionProperties, queries);\n+    }\n+\n+    public static class JdbiBuilder\n+    {\n+        private final String suite;\n+        private final String querySet;\n+        private final List<PhaseSpecification> phases;\n+        private final Map<String, String> sessionProperties;\n+        private List<BenchmarkQuery> queries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f02adae990b674fd83b26729a72689d7dba41af"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1MzIxMA==", "bodyText": "Answered below.", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447953210", "createdAt": "2020-06-30T20:16:53Z", "author": {"login": "caithagoras"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java", "diffHunk": "@@ -63,13 +85,54 @@ public boolean equals(Object obj)\n             return false;\n         }\n         BenchmarkSuite o = (BenchmarkSuite) obj;\n-        return Objects.equals(suiteInfo, o.suiteInfo) &&\n+        return Objects.equals(suite, o.suite) &&\n+                Objects.equals(querySet, o.querySet) &&\n+                Objects.equals(phases, o.phases) &&\n+                Objects.equals(sessionProperties, o.sessionProperties) &&\n                 Objects.equals(queries, o.queries);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(suiteInfo, queries);\n+        return Objects.hash(suite, querySet, phases, sessionProperties, queries);\n+    }\n+\n+    public static class JdbiBuilder\n+    {\n+        private final String suite;\n+        private final String querySet;\n+        private final List<PhaseSpecification> phases;\n+        private final Map<String, String> sessionProperties;\n+        private List<BenchmarkQuery> queries;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzQyOQ=="}, "originalCommit": {"oid": "0f02adae990b674fd83b26729a72689d7dba41af"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODY2NzM3OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo1Mzo0NVrOGpS3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMzowOFrOGrNGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzkwNg==", "bodyText": "Same question as above: why do we need to use setQueries instead of make it part of the constructor?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445953906", "createdAt": "2020-06-26T03:53:45Z", "author": {"login": "yingsu00"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java", "diffHunk": "@@ -40,11 +39,8 @@ public BenchmarkSuite get()\n     {\n         return jdbi.inTransaction(handle -> {\n             BenchmarkSuiteDao dao = handle.attach(BenchmarkSuiteDao.class);\n-            BenchmarkSuiteInfo suiteInfo = dao.getBenchmarkSuiteInfo(suitesTableName, suite);\n-            return new BenchmarkSuite(\n-                    suite,\n-                    suiteInfo,\n-                    dao.getBenchmarkQueries(queriesTableName, suiteInfo.getQuerySet()));\n+            BenchmarkSuite.JdbiBuilder suiteBuilder = dao.getBenchmarkSuite(suitesTableName, suite);\n+            return suiteBuilder.setQueries(dao.getBenchmarkQueries(queriesTableName, suiteBuilder.getQuerySet())).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f02adae990b674fd83b26729a72689d7dba41af"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NjUzMQ==", "bodyText": "You can find that all fields of BenchmarkSuite are immutable. queries is mutable only in this JdbiBuilder inner-class.\n\nWhy do we need to use setQueries instead of make it part of the constructor?\nThis is because we need to run 2 MySQL queries to fetch all information about a suite.\n\n\ndao.getBenchmarkSuite gets some the suite configuration by reading benchmark_suites.\ndao.getBenchmarkQueries gets the list of queries by reading benchmark_queries.\n\nThe result of 1st query needs to be stored in some intermediate object. Before the refactoring, the result is mapped to BenchmarkSuiteInfo class, and a BenchmarkSuite contains both BenchmarkSuiteInfo and the query lists. With the refactoring, I removed BenchmarkSuiteInfo, and replace it with the builder class instead. The result of the 1st query is mapped to BenchmarkSuite.JdbiBuilder using the constructor, while the result of the 2nd query is added to the build using the setter. And finally JdbiBuilder.build() returns a BenchmarkSuite object.", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447956531", "createdAt": "2020-06-30T20:23:08Z", "author": {"login": "caithagoras"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java", "diffHunk": "@@ -40,11 +39,8 @@ public BenchmarkSuite get()\n     {\n         return jdbi.inTransaction(handle -> {\n             BenchmarkSuiteDao dao = handle.attach(BenchmarkSuiteDao.class);\n-            BenchmarkSuiteInfo suiteInfo = dao.getBenchmarkSuiteInfo(suitesTableName, suite);\n-            return new BenchmarkSuite(\n-                    suite,\n-                    suiteInfo,\n-                    dao.getBenchmarkQueries(queriesTableName, suiteInfo.getQuerySet()));\n+            BenchmarkSuite.JdbiBuilder suiteBuilder = dao.getBenchmarkSuite(suitesTableName, suite);\n+            return suiteBuilder.setQueries(dao.getBenchmarkQueries(queriesTableName, suiteBuilder.getQuerySet())).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzkwNg=="}, "originalCommit": {"oid": "0f02adae990b674fd83b26729a72689d7dba41af"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODY3Mjc0OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo1ODowNFrOGpS6pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NzowM1rOGrN2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDcyNw==", "bodyText": "Why are all tests with empty session properties? Can we add some test with non-empty session properties?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445954727", "createdAt": "2020-06-26T03:58:04Z", "author": {"login": "yingsu00"}, "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java", "diffHunk": "@@ -126,9 +127,9 @@ public static void insertBenchmarkSuite(Handle handle, String suite, String quer\n \n     public static BenchmarkSuite getBenchmarkSuiteObject(String suite, String querySet)\n     {\n-        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery2 = new BenchmarkQuery(\"Q2\", \"SELECT 2\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery3 = new BenchmarkQuery(\"Q3\", \"SELECT 3\", CATALOG, SCHEMA);\n+        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a462337c1a6aec4b0a4ea3e6e1851ff1f1d7d1ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2ODc5NA==", "bodyText": "Test added.", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447968794", "createdAt": "2020-06-30T20:47:03Z", "author": {"login": "caithagoras"}, "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java", "diffHunk": "@@ -126,9 +127,9 @@ public static void insertBenchmarkSuite(Handle handle, String suite, String quer\n \n     public static BenchmarkSuite getBenchmarkSuiteObject(String suite, String querySet)\n     {\n-        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery2 = new BenchmarkQuery(\"Q2\", \"SELECT 2\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery3 = new BenchmarkQuery(\"Q3\", \"SELECT 3\", CATALOG, SCHEMA);\n+        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDcyNw=="}, "originalCommit": {"oid": "a462337c1a6aec4b0a4ea3e6e1851ff1f1d7d1ca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE1NTM0OnYy", "diffSide": "RIGHT", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MzoyNVrOGu6QWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjoyMjo0OVrOGu7Nlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjEzOA==", "bodyText": "So basically BenchmarkRunner will have as many executors are there are execution strategies?", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r451842138", "createdAt": "2020-07-08T21:43:25Z", "author": {"login": "rongrong"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkRunner.java", "diffHunk": "@@ -16,72 +16,78 @@\n import com.facebook.airlift.event.client.EventClient;\n import com.facebook.presto.benchmark.event.BenchmarkPhaseEvent;\n import com.facebook.presto.benchmark.event.BenchmarkSuiteEvent;\n-import com.facebook.presto.benchmark.executor.PhaseExecutor;\n-import com.facebook.presto.benchmark.executor.PhaseExecutorFactory;\n import com.facebook.presto.benchmark.source.BenchmarkSuiteSupplier;\n import com.google.common.collect.ImmutableSet;\n import com.google.inject.Inject;\n \n import javax.annotation.PostConstruct;\n \n-import java.util.List;\n import java.util.Set;\n \n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.FAILED;\n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.SUCCEEDED;\n+import static com.facebook.presto.benchmark.framework.ExecutionStrategy.CONCURRENT;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class BenchmarkRunner\n {\n     private final BenchmarkSuiteSupplier benchmarkSuiteSupplier;\n-    private final PhaseExecutorFactory phaseExecutorFactory;\n+    private final ConcurrentPhaseExecutor concurrentPhaseExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a508bad61b888fb5abc7b030f051b691ce261a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1NzgxNQ==", "bodyText": "Yes, and there will only be 2 in the foreseeable future. CONCURRENT and STREAM", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r451857815", "createdAt": "2020-07-08T22:22:49Z", "author": {"login": "caithagoras"}, "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkRunner.java", "diffHunk": "@@ -16,72 +16,78 @@\n import com.facebook.airlift.event.client.EventClient;\n import com.facebook.presto.benchmark.event.BenchmarkPhaseEvent;\n import com.facebook.presto.benchmark.event.BenchmarkSuiteEvent;\n-import com.facebook.presto.benchmark.executor.PhaseExecutor;\n-import com.facebook.presto.benchmark.executor.PhaseExecutorFactory;\n import com.facebook.presto.benchmark.source.BenchmarkSuiteSupplier;\n import com.google.common.collect.ImmutableSet;\n import com.google.inject.Inject;\n \n import javax.annotation.PostConstruct;\n \n-import java.util.List;\n import java.util.Set;\n \n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.FAILED;\n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.SUCCEEDED;\n+import static com.facebook.presto.benchmark.framework.ExecutionStrategy.CONCURRENT;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class BenchmarkRunner\n {\n     private final BenchmarkSuiteSupplier benchmarkSuiteSupplier;\n-    private final PhaseExecutorFactory phaseExecutorFactory;\n+    private final ConcurrentPhaseExecutor concurrentPhaseExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjEzOA=="}, "originalCommit": {"oid": "29a508bad61b888fb5abc7b030f051b691ce261a"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2466, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}