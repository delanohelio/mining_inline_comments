{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzU0MjY5", "number": 15295, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowNzoyM1rOEwtwCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNjoyNFrOExNY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE2NjgxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowNzoyNFrOHmceTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo1MzoyMVrOHm1OAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDQ0Ng==", "bodyText": "Compaction logic is somewhat difficult to get right, hence, it would be better to re-use it by calling compactValues. Also, blockSizeInBytes and nullCount can be computed in separate loops for readability.\n        compactValues(positions, positionCount);\n\n        long blockSizeInBytes = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int id = values[i];\n            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n        }\n\n        int nullCount = 0;  // the nulls count for selected positions\n        for (int i = 0; i < positionCount; i++) {\n            int id = values[i];\n            nullCount += (id == currentDictionarySize - 1 ? 1 : 0);\n        }", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074446", "createdAt": "2020-10-22T11:07:24Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3NDA3OA==", "bodyText": "@mbasmanova Thanks for the rewrite! How about calculating them in the same loop? This will use less number of lines and still readable:\n        compactValues(positions, positionCount);\n\n        long blockSizeInBytes = 0;\n        int nullCount = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int id = values[i];\n            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n            nullCount += (id == currentDictionarySize - 1 ? 1 : 0);\n        }", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510474078", "createdAt": "2020-10-22T21:40:11Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDQ0Ng=="}, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3OTg3NQ==", "bodyText": "That works as long as we get to reuse compactValues. Also, null count calculation can be mode a bit more readable:\nif (id == currentDictionarySize - 1) {\n   nullCount++;\n}", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510479875", "createdAt": "2020-10-22T21:53:21Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDQ0Ng=="}, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE2ODU4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowNzo1M1rOHmcfcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo1ODo0MFrOHm1W1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDczNg==", "bodyText": "This doesn't seem right. I think it should be nullCount == positionCount.", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074736", "createdAt": "2020-10-22T11:07:53Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions\n+        int i = 0;\n+        int j = 0;\n+        while (i < positionCount && j < outputPositionCount) {\n+            if (positions[i] != outputPositions[j]) {\n+                j++;\n+                continue;\n+            }\n \n-        if (positionCount == outputPositionCount) {\n-            DictionaryBlock block = new DictionaryBlock(positionCount, dictionary, values);\n+            int id = this.values[j];\n+            values[i] = id;\n \n-            values = null;\n-            return block;\n+            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n+            nullsCount += (id == currentDictionarySize - 1 ? 1 : 0);\n+\n+            i++;\n+            j++;\n         }\n \n-        int[] valuesCopy = new int[positionCount];\n+        // If all selected positions are null, just return RLE block.\n+        if (nullsCount == outputPositionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MjEzNQ==", "bodyText": "Thanks Masha. Yes it should be positionCount.", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510482135", "createdAt": "2020-10-22T21:58:40Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions\n+        int i = 0;\n+        int j = 0;\n+        while (i < positionCount && j < outputPositionCount) {\n+            if (positions[i] != outputPositions[j]) {\n+                j++;\n+                continue;\n+            }\n \n-        if (positionCount == outputPositionCount) {\n-            DictionaryBlock block = new DictionaryBlock(positionCount, dictionary, values);\n+            int id = this.values[j];\n+            values[i] = id;\n \n-            values = null;\n-            return block;\n+            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n+            nullsCount += (id == currentDictionarySize - 1 ? 1 : 0);\n+\n+            i++;\n+            j++;\n         }\n \n-        int[] valuesCopy = new int[positionCount];\n+        // If all selected positions are null, just return RLE block.\n+        if (nullsCount == outputPositionCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDczNg=="}, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE3MDE1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowODoyNlrOHmcgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowODoyNlrOHmcgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDk5NA==", "bodyText": "naming consistency: nullsCount -> nullCount (to match positionCount and outputPositionCount)", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074994", "createdAt": "2020-10-22T11:08:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE3MzA0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowOTowOFrOHmciIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowOTowOFrOHmciIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NTQyNQ==", "bodyText": "nullsCount -> nullCount", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510075425", "createdAt": "2020-10-22T11:09:08Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE3NzQ4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToxMDoyNlrOHmckyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToxMDoyNlrOHmckyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NjEwNA==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510076104", "createdAt": "2020-10-22T11:10:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTE3Nzc2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToxMDozMVrOHmck8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToxMDozMVrOHmck8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NjE0Ng==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510076146", "createdAt": "2020-10-22T11:10:31Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int k = 0; k < positionCount; k++) {\n+            int id = values[k];\n+            int offset = dictionaryOffsetVector[id];\n+            int length = dictionaryOffsetVector[id + 1] - offset;\n+            System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+            currentOffset += length;\n+            offsetVector[k + 1] = currentOffset;\n+        }\n+\n+        if (nullsCount > 0) {\n+            boolean[] isNullVector = new boolean[positionCount];\n+            for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDM1MDY3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNjoyNFrOHnOKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNjoyNFrOHnOKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4ODU5OA==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510888598", "createdAt": "2020-10-23T13:36:24Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +694,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            int id = values[i];\n+            int offset = dictionaryOffsetVector[id];\n+            int length = dictionaryOffsetVector[id + 1] - offset;\n+            System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+            currentOffset += length;\n+            offsetVector[i + 1] = currentOffset;\n+        }\n+\n+        if (nullCount > 0) {\n+            boolean[] isNullVector = new boolean[positionCount];\n+            for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c3822fbf760f263afbe57e9e9aa458f1a19e1a"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3499, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}