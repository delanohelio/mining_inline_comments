{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjM3NjAz", "number": 14842, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1MDoxN1rOEO1Y_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1OTo1NFrOERk63w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTkwMjcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1MDoxN1rOGyNcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1MDoxN1rOGyNcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwMjE5OA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r455302198", "createdAt": "2020-07-15T19:50:17Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "diffHunk": "@@ -649,6 +650,7 @@ public BuiltInFunctionNamespaceManager(\n                 .function(ARRAY_CONCAT_FUNCTION)\n                 .functions(ARRAY_CONSTRUCTOR, ARRAY_SUBSCRIPT, ARRAY_TO_JSON, JSON_TO_ARRAY, JSON_STRING_TO_ARRAY)\n                 .function(SET_AGG)\n+                .function(SetUnionFunction.SET_UNION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b6d04b79adcdc73006b57c3a6e64c01a77ba3af"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg3ODAyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1NzoyMFrOG1z7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1ODoyNFrOG1z9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3ODUxMQ==", "bodyText": "We normally use upper case character to represent type, and we use \"()\" rather than \"<>\", so maybe change it to array(T) instead.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459078511", "createdAt": "2020-07-22T20:57:20Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -147,6 +147,10 @@ General Aggregate Functions\n \n         Returns an array created from the distinct input ``x`` elements.\n \n+.. function:: set_union(array<x>) -> array<x>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTExMQ==", "bodyText": "Maybe add an example to make it clearer.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459079111", "createdAt": "2020-07-22T20:58:24Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -147,6 +147,10 @@ General Aggregate Functions\n \n         Returns an array created from the distinct input ``x`` elements.\n \n+.. function:: set_union(array<x>) -> array<x>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3ODUxMQ=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg4NTQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1OTozM1rOG10AIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1Mzo0NFrOG2XbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTcxMg==", "bodyText": "Add an empty line between public static final and static static final variables.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459079712", "createdAt": "2020-07-22T20:59:33Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDExMQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660111", "createdAt": "2020-07-23T18:53:44Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTcxMg=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg5NzA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowMzowN1rOG10HXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1Mzo1MlrOG2Xbjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTU2NA==", "bodyText": "Can we be a little more specific? This function definitely behaves differently from set_agg so they probably should not have exactly the same description?", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459081564", "createdAt": "2020-07-22T21:03:07Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDE3NQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660175", "createdAt": "2020-07-23T18:53:52Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTU2NA=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkyMTA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMDoxOVrOG10Vxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoxMFrOG2XcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NTI1NQ==", "bodyText": "While the types are correct, the names are misleading. The function input type is array<T> not T. T is the element type and array<T> is both the input type and output type.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459085255", "createdAt": "2020-07-22T21:10:19Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDM0Mw==", "bodyText": "You are totally right, and I have renamed to \"elementType\" and \"arrayType\".", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660343", "createdAt": "2020-07-23T18:54:10Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NTI1NQ=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkyNjYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMjowMVrOG10ZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoxOFrOG2XcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjA4OQ==", "bodyText": "It's probably more efficient to just do ImmutableList.of(type.getTypeSignature()) here rather than creating an ImmutableList of one element and iterate through it.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459086089", "createdAt": "2020-07-22T21:12:01Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQxNw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660417", "createdAt": "2020-07-23T18:54:18Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjA4OQ=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkzMjIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMzo1MVrOG10chw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoyNFrOG2Xcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Njk4Mw==", "bodyText": "You can probably inline the function.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459086983", "createdAt": "2020-07-22T21:13:51Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQ4Mw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660483", "createdAt": "2020-07-23T18:54:24Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Njk4Mw=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk0NTI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxNzo0MFrOG10kTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDozMVrOG2Xc8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4ODk3Mg==", "bodyText": "The type of arrayType should be ArrayType. Make it specific so the cast in line 127 is safe.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459088972", "createdAt": "2020-07-22T21:17:40Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)\n+    {\n+        return ImmutableList.of(new ParameterMetadata(STATE), new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, value), new ParameterMetadata(BLOCK_INDEX));\n+    }\n+\n+    public static void input(Type type, Type arrayType, SetAggregationState state, Block inputBlock, int position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDUyOQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660529", "createdAt": "2020-07-23T18:54:31Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)\n+    {\n+        return ImmutableList.of(new ParameterMetadata(STATE), new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, value), new ParameterMetadata(BLOCK_INDEX));\n+    }\n+\n+    public static void input(Type type, Type arrayType, SetAggregationState state, Block inputBlock, int position)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4ODk3Mg=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk1MTQ0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxOTozNVrOG10n-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDo1MFrOG2XdpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4OTkxMw==", "bodyText": "Can we add some tests with group bys  as well?", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459089913", "createdAt": "2020-07-22T21:19:35Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8512,6 +8512,34 @@ public void testComparisonWithLike()\n                 \"ON t1.orderkey=t2.orderkey\");\n     }\n \n+    @Test\n+    public void testSetUnion()\n+    {\n+        // sanity\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2], array[3, 4], array[5, 6]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 5, 6]\");\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[2, 3, 4], array[7, 8]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 7, 8]\");\n+        // all nulls should return empty array to match behavior of array_distinct(flatten(array_agg(x)))\n+        assertQuery(\n+                \"select set_union(x) from (values null, null, null) as t(x)\",\n+                \"select array[]\");\n+        // nulls inside arrays should be captured while pure nulls should be ignored\n+        assertQuery(\n+                \"select set_union(x) from (values null, array[null], null) as t(x)\",\n+                \"select array[null]\");\n+        // null inside arrays should be captured\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[null], null) as t(x)\",\n+                \"select array[1, 2, 3, null]\");\n+        // return null for empty rows\n+        assertQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDcwOQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660709", "createdAt": "2020-07-23T18:54:50Z", "author": {"login": "prithvip"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8512,6 +8512,34 @@ public void testComparisonWithLike()\n                 \"ON t1.orderkey=t2.orderkey\");\n     }\n \n+    @Test\n+    public void testSetUnion()\n+    {\n+        // sanity\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2], array[3, 4], array[5, 6]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 5, 6]\");\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[2, 3, 4], array[7, 8]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 7, 8]\");\n+        // all nulls should return empty array to match behavior of array_distinct(flatten(array_agg(x)))\n+        assertQuery(\n+                \"select set_union(x) from (values null, null, null) as t(x)\",\n+                \"select array[]\");\n+        // nulls inside arrays should be captured while pure nulls should be ignored\n+        assertQuery(\n+                \"select set_union(x) from (values null, array[null], null) as t(x)\",\n+                \"select array[null]\");\n+        // null inside arrays should be captured\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[null], null) as t(x)\",\n+                \"select array[1, 2, 3, null]\");\n+        // return null for empty rows\n+        assertQuery(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4OTkxMw=="}, "originalCommit": {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY1NTYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1ODowNVrOG2Xk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDoyNDo1N1rOG2f2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA==", "bodyText": "I think it's cleaner to move this line to generateAggregation so generateAggregation only takes elementType as input. But I don't have strong opinions.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459662574", "createdAt": "2020-07-23T18:58:05Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782e041eba2168195467581b40629d4c0427112f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mjk5Mw==", "bodyText": "If I do that, I would need to add typeManager as a parameter to generateAggregation, right? Or are you suggesting something different?", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459672993", "createdAt": "2020-07-23T19:18:04Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}, "originalCommit": {"oid": "782e041eba2168195467581b40629d4c0427112f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4NDQ2NA==", "bodyText": "True. It's ok either ways. Currently you could give generateAggregation incompatible elementType and arrayType, which is the thing I don't like. But since it's a private method I don't have strong opinions either ways.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459684464", "createdAt": "2020-07-23T19:39:58Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}, "originalCommit": {"oid": "782e041eba2168195467581b40629d4c0427112f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5ODE2OQ==", "bodyText": "I got rid of the generateAggregation method altogether and inlined it into specialize method", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459798169", "createdAt": "2020-07-24T00:24:57Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}, "originalCommit": {"oid": "782e041eba2168195467581b40629d4c0427112f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY2MTQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1OTo1NFrOG2XolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMToyM1rOG2YU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzUwOA==", "bodyText": "You can inline this and remove the variable.", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459663508", "createdAt": "2020-07-23T18:59:54Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(elementType.getTypeSignature())));\n+        return generateAggregation(elementType, arrayType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type elementType, ArrayType arrayType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(elementType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4e2922767b3becdbe0c3b36e813a659bc01b38"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDg2MQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459674861", "createdAt": "2020-07-23T19:21:23Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(elementType.getTypeSignature())));\n+        return generateAggregation(elementType, arrayType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type elementType, ArrayType arrayType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(elementType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzUwOA=="}, "originalCommit": {"oid": "cc4e2922767b3becdbe0c3b36e813a659bc01b38"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2368, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}