{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjM4ODMw", "number": 13979, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo1NDo0MFrODZqfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDoxOTo1NVrODapILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjM3MTU4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo1NDo0MFrOFgLjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0Mjo1NVrOFhp4Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ==", "bodyText": "Do we need this new error code? Maybe just use EXCEEDED_FUNCTION_MEMORY_LIMIT. @wenleix what do you think?", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369287939", "createdAt": "2020-01-21T22:54:40Z", "author": {"login": "yingsu00"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5NzI3Mg==", "bodyText": "@yingsu00 : I agree an error code like EXCEEDED_MAX_ARRAY_SIZE sound too specific -- we might also want to restrict map or varchar size in the future. But EXCEEDED_FUNCTION_MEMORY_LIMIT doesn't sound like for this purpose as well.\nWhat about CELL_TOO_LARGE? -- basically it complaints the single array result from array_agg is too large. cc @highker , @rschlussel", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369397272", "createdAt": "2020-01-22T07:05:16Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxODY5Mg==", "bodyText": "@yingsu00 : I agree an error code like EXCEEDED_MAX_ARRAY_SIZE sound too specific -- we might also want to restrict map or varchar size in the future. But EXCEEDED_FUNCTION_MEMORY_LIMIT doesn't sound like for this purpose as well.\n\nI saw EXCEEDED_FUNCTION_MEMORY_LIMIT was only used in TypedSet#addNewElement which was mostly used aggregation functions. It is for very similar situation where a single element is too large to be added to destination BlockBuilder. If we're going to introduce new error code, maybe we should unify the usages.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369418692", "createdAt": "2020-01-22T08:17:48Z", "author": {"login": "yingsu00"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDQwMw==", "bodyText": "Leaning towards EXCEEDED_FUNCTION_MEMORY_LIMIT as well since it is for a similar use case, and if we don't want to add very specific error codes.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370324403", "createdAt": "2020-01-23T19:56:36Z", "author": {"login": "sujay-jain"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzM4MQ==", "bodyText": "@sujay-jain @yinghai : No it's not the memory used by function. EXCEEDED_FUNCTION_MEMORY_LIMIT should be used when some function internal state exceeds memory limit, such as the internal hash table. In this case, the aggregation internal memory usage is correctly tracked and doesn't exceed. It's the final produced result too large.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370797381", "createdAt": "2020-01-24T19:13:36Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzU0NQ==", "bodyText": "@sujay-jain : Please don't mark open discussion as \"resolved\" as it makes difficult to track.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370797545", "createdAt": "2020-01-24T19:13:53Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzQ0Mg==", "bodyText": "@sujay-jain : Please don't open discussion as \"resolved\" as it makes difficult to track.\nsorry about that! wasn't sure about the best flow :)", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370833442", "createdAt": "2020-01-24T20:42:55Z", "author": {"login": "sujay-jain"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    EXCEEDED_MAX_ARRAY_SIZE(0x0000_002B, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NzkzOQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjM4MTMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo1OToxNVrOFgLpNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0OTozMlrOFhKnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4OTUyNQ==", "bodyText": "nit: I don't see other places using () around the values in the output message. Remove the brackets.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369289525", "createdAt": "2020-01-21T22:59:15Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {\n+                    throw new PrestoException(EXCEEDED_MAX_ARRAY_SIZE, format(\"Array size (%s) exceeds the maximum array size (%s)\", entryBuilder.getRetainedSizeInBytes(), MAX_ARRAY_SIZE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTAyMg==", "bodyText": "Could you please run BenchmarkArrayAggregation with and without the change to see how much regression this size check introduces?", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369291022", "createdAt": "2020-01-21T23:03:24Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {\n+                    throw new PrestoException(EXCEEDED_MAX_ARRAY_SIZE, format(\"Array size (%s) exceeds the maximum array size (%s)\", entryBuilder.getRetainedSizeInBytes(), MAX_ARRAY_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4OTUyNQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMTE1Ng==", "bodyText": "Thanks for sugesting this! Here are the results. There are slight variations in sub nanosecond range if I'm reading this correctly. So doesn't seem like there a regression?\nMaster\nRun complete. Total time: 00:14:50\n\n\n\nBenchmark\n(type)\nMode\nCnt\nScore\nError\nUnits\n\n\n\n\nBenchmarkArrayAggregation.arrayAggregation\nBIGINT\navgt\n20\n9.560\n\u00b1 0.209\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nVARCHAR\navgt\n20\n26.718\n\u00b1 0.720\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nDOUBLE\navgt\n20\n9.388\n\u00b1 0.177\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nBOOLEAN\navgt\n20\n6.659\n\u00b1 0.178\nns/op\n\n\n\nWith current Changes\nRun complete. Total time: 00:14:49\n\n\n\nBenchmark\n(type)\nMode\nCnt\nScore\nError\nUnits\n\n\n\n\nBenchmarkArrayAggregation.arrayAggregation\nBIGINT\navgt\n20\n9.745\n\u00b1 0.391\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nVARCHAR\navgt\n20\n25.441\n\u00b1 0.524\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nDOUBLE\navgt\n20\n9.201\n\u00b1 0.178\nns/op\n\n\nBenchmarkArrayAggregation.arrayAggregation\nBOOLEAN\navgt\n20\n6.883\n\u00b1 0.338\nns/op", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370321156", "createdAt": "2020-01-23T19:49:32Z", "author": {"login": "sujay-jain"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {\n+                    throw new PrestoException(EXCEEDED_MAX_ARRAY_SIZE, format(\"Array size (%s) exceeds the maximum array size (%s)\", entryBuilder.getRetainedSizeInBytes(), MAX_ARRAY_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4OTUyNQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzA4MDQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzowODozM1rOFgSRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowOTo1NVrOFhnlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5ODA0MQ==", "bodyText": "I think you might want to \"cut the line\" earlier. For example, if the current retained size is already MAX_ARRAY_SIZE - 10, and the next element has length 11 (thinking about ARRAY<VARCHAR>). You will still get cannot allocate Slice XXX error.\nI would say just define an constant like MAX_ENTRY_RETAINED_SIZE = 1_000_000_000 in this class.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369398041", "createdAt": "2020-01-22T07:08:33Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMTQ5OQ==", "bodyText": "Also, does it make sense to do the size check after the appendTo call? :)", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r369401499", "createdAt": "2020-01-22T07:22:01Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5ODA0MQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NTI5Ng==", "bodyText": "if we're cutting the line at almost half the actual limit I don't see much difference between before or after.. Earlier I was erring towards new USER_ERROR as opposed to INTERNAL_ERROR coming from airlift. Leaving it like this but happy to discuss if you feel strongly about moving the check to after the append", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370295296", "createdAt": "2020-01-23T18:54:24Z", "author": {"login": "sujay-jain"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5ODA0MQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTg0MQ==", "bodyText": "@sujay-jain : I usually don't click \"Resolve conversation\" if it's still an open conversation :). I will leave it to the commenter to resolve it .\nIt's not about the behavior, I am pretty sure in almost real cases, they have the same result. It's from code flow perspective, you want to do the size check after you append something, rather than before you don't do any change ( thinking about eager check vs. lazy check). And in general we prefer eager check so the exception happened right after the problem happens.", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370795841", "createdAt": "2020-01-24T19:09:55Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ARRAY_SIZE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5ODA0MQ=="}, "originalCommit": {"oid": "4e1e3ad3cd43615bef269af93abfabca411a1f06"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjYyOTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDoxNTo1NlrOFhtkvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjoxNDozMFrOFhyluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int MAX_ENTRY_RETAINED_SIZE = 1_000_000_000;\n          \n          \n            \n                private static final int MAX_ENTRY_RETAINED_SIZE_IN_BYTES = 1_000_000_000;", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370894013", "createdAt": "2020-01-25T00:15:56Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -41,16 +42,19 @@\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.operator.aggregation.AggregationUtils.generateAggregationName;\n+import static com.facebook.presto.spi.StandardErrorCode.CELL_TOO_LARGE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n import static com.facebook.presto.util.Reflection.methodHandle;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class ArrayAggregationFunction\n         extends SqlAggregationFunction\n {\n     private static final String NAME = \"array_agg\";\n+    private static final int MAX_ENTRY_RETAINED_SIZE = 1_000_000_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b17656ba6d53a0725a370687d6b5ff5f83b4f96"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjE4NA==", "bodyText": "MAX_ENTRY_RETAINED_SIZE_IN_BYTES = new DataSize(1, GIGABYTE).toBytes", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370976184", "createdAt": "2020-01-26T06:14:30Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -41,16 +42,19 @@\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.operator.aggregation.AggregationUtils.generateAggregationName;\n+import static com.facebook.presto.spi.StandardErrorCode.CELL_TOO_LARGE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n import static com.facebook.presto.util.Reflection.methodHandle;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class ArrayAggregationFunction\n         extends SqlAggregationFunction\n {\n     private static final String NAME = \"array_agg\";\n+    private static final int MAX_ENTRY_RETAINED_SIZE = 1_000_000_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDAxMw=="}, "originalCommit": {"oid": "1b17656ba6d53a0725a370687d6b5ff5f83b4f96"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjYzNDA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDoxOTo1NVrOFhtnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjo1NTo1MlrOFiKDow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDcwMg==", "bodyText": "Maybe consider using DataSize in format string so we can use the nice toString which includes units?", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r370894702", "createdAt": "2020-01-25T00:19:55Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                elementType.appendTo(block, position, entryBuilder);\n+\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ENTRY_RETAINED_SIZE) {\n+                    throw new PrestoException(CELL_TOO_LARGE, format(\"Array size %s exceeds the maximum supported array size %s\", entryBuilder.getRetainedSizeInBytes(), MAX_ENTRY_RETAINED_SIZE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b17656ba6d53a0725a370687d6b5ff5f83b4f96"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzcyOQ==", "bodyText": "changed.. Does it then make sense to use DataSize everywhere and not just the format String?", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r371027729", "createdAt": "2020-01-26T20:38:32Z", "author": {"login": "sujay-jain"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                elementType.appendTo(block, position, entryBuilder);\n+\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ENTRY_RETAINED_SIZE) {\n+                    throw new PrestoException(CELL_TOO_LARGE, format(\"Array size %s exceeds the maximum supported array size %s\", entryBuilder.getRetainedSizeInBytes(), MAX_ENTRY_RETAINED_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDcwMg=="}, "originalCommit": {"oid": "1b17656ba6d53a0725a370687d6b5ff5f83b4f96"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2MDY3NQ==", "bodyText": "I would avoid using it in the hot areas of this method", "url": "https://github.com/prestodb/presto/pull/13979#discussion_r371360675", "createdAt": "2020-01-27T16:55:52Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/ArrayAggregationFunction.java", "diffHunk": "@@ -137,7 +141,13 @@ public static void output(Type elementType, ArrayAggregationState state, BlockBu\n         }\n         else {\n             BlockBuilder entryBuilder = out.beginBlockEntry();\n-            state.forEach((block, position) -> elementType.appendTo(block, position, entryBuilder));\n+            state.forEach((block, position) -> {\n+                elementType.appendTo(block, position, entryBuilder);\n+\n+                if (entryBuilder.getRetainedSizeInBytes() > MAX_ENTRY_RETAINED_SIZE) {\n+                    throw new PrestoException(CELL_TOO_LARGE, format(\"Array size %s exceeds the maximum supported array size %s\", entryBuilder.getRetainedSizeInBytes(), MAX_ENTRY_RETAINED_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDcwMg=="}, "originalCommit": {"oid": "1b17656ba6d53a0725a370687d6b5ff5f83b4f96"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3160, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}