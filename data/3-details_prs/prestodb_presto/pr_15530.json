{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzcwMDQx", "number": 15530, "title": "Scan memory optimizations", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-12-16T18:50:45Z", "url": "https://github.com/prestodb/presto/pull/15530", "merged": true, "mergeCommit": {"oid": "8d6ac0ee73f2bbc859f66e667c1b3a8ba99bac0a"}, "closed": true, "closedAt": "2020-12-22T22:58:04Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm7jbNgFqTU1NDI1NzUzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoyrLIgFqTU1NzQxMzI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjU3NTM2", "url": "https://github.com/prestodb/presto/pull/15530#pullrequestreview-554257536", "createdAt": "2020-12-17T03:39:13Z", "commit": {"oid": "9f620c9240e643df2c66aed53da050d94d39c3db"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzozOToxNFrOIHjPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDowMTo1NlrOIHjrUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODM5Mw==", "bodyText": "I see several issues here\n\nsliceInputRetainedSizeInBytes was already counted on line 91. For the no compression case, counting the buffer size here is double counting.\nsetBytes() should be counting all retained memory for this object, but here you're only counting buffer. It is just one part of the memory used by OrcInputStream object. Other parts include instance size, temporaryBuffer size, compressedSliceInput but these are not counted.", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544788393", "createdAt": "2020-12-17T03:39:14Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -94,13 +94,15 @@ public OrcInputStream(\n             int sliceInputPosition = toIntExact(sliceInput.position());\n             int sliceInputRemaining = toIntExact(sliceInput.remaining());\n             this.buffer = new byte[sliceInputRemaining];\n+            bufferMemoryUsage.setBytes(sliceInputRemaining);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f620c9240e643df2c66aed53da050d94d39c3db"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODY5Mw==", "bodyText": "Similarly to the above, the size should not be 0 but should at least contains instance size, temporaryBuffer size, compressedSliceInput size.", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544788693", "createdAt": "2020-12-17T03:40:03Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -94,13 +94,15 @@ public OrcInputStream(\n             int sliceInputPosition = toIntExact(sliceInput.position());\n             int sliceInputRemaining = toIntExact(sliceInput.remaining());\n             this.buffer = new byte[sliceInputRemaining];\n+            bufferMemoryUsage.setBytes(sliceInputRemaining);\n             this.length = buffer.length;\n             sliceInput.readFully(buffer, sliceInputPosition, sliceInputRemaining);\n             this.compressedSliceInput = EMPTY_SLICE.getInput();\n         }\n         else {\n             this.compressedSliceInput = sliceInput;\n             this.buffer = new byte[0];\n+            bufferMemoryUsage.setBytes(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f620c9240e643df2c66aed53da050d94d39c3db"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4OTIyOA==", "bodyText": "One more thing, line 91 could just be\nthis.bufferMemoryUsage.setBytes(sliceInputRetainedSizeInBytes);\n\nWe don't need to create a new child context on systemMemoryContext.", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544789228", "createdAt": "2020-12-17T03:41:51Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -94,13 +94,15 @@ public OrcInputStream(\n             int sliceInputPosition = toIntExact(sliceInput.position());\n             int sliceInputRemaining = toIntExact(sliceInput.remaining());\n             this.buffer = new byte[sliceInputRemaining];\n+            bufferMemoryUsage.setBytes(sliceInputRemaining);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODM5Mw=="}, "originalCommit": {"oid": "9f620c9240e643df2c66aed53da050d94d39c3db"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4OTUxNw==", "bodyText": "Will you be able to add a test for the compression case? The existing test is for no compression.", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544789517", "createdAt": "2020-12-17T03:42:37Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestSelectiveOrcReader.java", "diffHunk": "@@ -964,7 +964,7 @@ public void testMemoryTracking()\n \n                 page.getLoadedPage();\n \n-                assertBetweenInclusive(systemMemoryUsage.getBytes(), 150000L, 160000L);\n+                assertBetweenInclusive(systemMemoryUsage.getBytes(), 250000L, 300000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f620c9240e643df2c66aed53da050d94d39c3db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MDEzMw==", "bodyText": "Why does the memory usage increase for this commit?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544790133", "createdAt": "2020-12-17T03:44:40Z", "author": {"login": "yingsu00"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestOrcBatchPageSourceMemoryTracking.java", "diffHunk": "@@ -192,7 +192,7 @@ public void testPageSource()\n             Block block = page.getBlock(1);\n \n             createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n-            assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 300000L, 500000L); // Memory usage after lazy-loading the actual block\n+            assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 400000L, 650000L); // Memory usage after lazy-loading the actual block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2c7af1d71c6dbcbbec9e981a2c8f971e881e8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MDQ2MA==", "bodyText": "I think the buffer can be reused across stripes instead of just among different InputStreams within a Stripe. Do you think this is possible?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544790460", "createdAt": "2020-12-17T03:45:54Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -653,7 +654,8 @@ private void advanceToNextStripe()\n             dwrfEncryptionInfo = Optional.of(createDwrfEncryptionInfo(encryptionLibrary.get(), stripeDecryptionKeyMetadata, intermediateKeyMetadata, dwrfEncryptionGroupMap));\n         }\n \n-        Stripe stripe = stripeReader.readStripe(stripeInformation, currentStripeSystemMemoryContext, dwrfEncryptionInfo);\n+        SharedBuffer sharedDecompressionBuffer = new SharedBuffer(currentStripeSystemMemoryContext.newOrcLocalMemoryContext(\"sharedDecompressionBuffer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2c7af1d71c6dbcbbec9e981a2c8f971e881e8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NTQ3Mg==", "bodyText": "I see this class is only for reusing the compression buffer in OrcInputStream. Would it make sense to have a more generic allocator that implements ArrayAllocator?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r544795472", "createdAt": "2020-12-17T04:01:56Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/SharedBuffer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.stream;\n+\n+import com.facebook.presto.orc.OrcLocalMemoryContext;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@NotThreadSafe\n+public class SharedBuffer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2c7af1d71c6dbcbbec9e981a2c8f971e881e8"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53c2c7af1d71c6dbcbbec9e981a2c8f971e881e8", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/53c2c7af1d71c6dbcbbec9e981a2c8f971e881e8", "committedDate": "2020-12-16T18:23:51Z", "message": "Reuse decompression buffer between multiple OrcInputStream's\n\nMultiple instances of an OrcInputStream can share the same decompression\nbuffer when reading a stripe, as the streams are always read serially"}, "afterCommit": {"oid": "a644fcde70a4047768955d7c4699f95c9bc80808", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/a644fcde70a4047768955d7c4699f95c9bc80808", "committedDate": "2020-12-22T02:25:33Z", "message": "Reuse decompression buffer between multiple OrcInputStream's\n\nMultiple instances of an OrcInputStream can share the same decompression\nbuffer when reading a stripe, as the streams are always read serially"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODA4Nzk2", "url": "https://github.com/prestodb/presto/pull/15530#pullrequestreview-556808796", "createdAt": "2020-12-22T04:17:26Z", "commit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDoxNzoyNlrOIJt0jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo1MzozN1rOIJuU3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1ODgyOA==", "bodyText": "nit: move it to the private final section at line 60?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547058828", "createdAt": "2020-12-22T04:17:26Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -33,40 +34,42 @@\n import static com.facebook.presto.orc.checkpoint.InputStreamCheckpoint.decodeDecompressedOffset;\n import static com.facebook.presto.orc.stream.LongDecode.zigzagDecode;\n import static com.google.common.base.MoreObjects.toStringHelper;\n-import static com.google.common.base.Preconditions.checkArgument;\n import static io.airlift.slice.SizeOf.SIZE_OF_DOUBLE;\n import static io.airlift.slice.SizeOf.SIZE_OF_FLOAT;\n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n import static io.airlift.slice.SizeOf.SIZE_OF_SHORT;\n+import static io.airlift.slice.SizeOf.sizeOf;\n import static io.airlift.slice.Slices.EMPTY_SLICE;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public final class OrcInputStream\n         extends InputStream\n {\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(OrcInputStream.class).instanceSize();\n+\n     private static final long VARINT_MASK = 0x8080_8080_8080_8080L;\n     private static final int MAX_VARINT_LENGTH = 10;\n \n     private final OrcDataSourceId orcDataSourceId;\n     private final FixedLengthSliceInput compressedSliceInput;\n+    private final long compressedSliceInputRetainedSizeInBytes;\n     private final Optional<OrcDecompressor> decompressor;\n     private final Optional<DwrfDataEncryptor> dwrfDecryptor;\n \n     private int currentCompressedBlockOffset;\n \n     private byte[] buffer;\n     private byte[] compressedBuffer;\n-    private byte[] decompressionResultBuffer;\n     private int position;\n     private int length;\n     private int uncompressedOffset;\n \n     // Temporary memory for reading a float or double at buffer boundary.\n-    private byte[] temporaryBuffer = new byte[SIZE_OF_DOUBLE];\n+    private final byte[] temporaryBuffer = new byte[SIZE_OF_DOUBLE];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MjA1OA==", "bodyText": "nit: move it to the private final section at line 60?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547062058", "createdAt": "2020-12-22T04:31:41Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -33,40 +34,42 @@\n import static com.facebook.presto.orc.checkpoint.InputStreamCheckpoint.decodeDecompressedOffset;\n import static com.facebook.presto.orc.stream.LongDecode.zigzagDecode;\n import static com.google.common.base.MoreObjects.toStringHelper;\n-import static com.google.common.base.Preconditions.checkArgument;\n import static io.airlift.slice.SizeOf.SIZE_OF_DOUBLE;\n import static io.airlift.slice.SizeOf.SIZE_OF_FLOAT;\n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n import static io.airlift.slice.SizeOf.SIZE_OF_SHORT;\n+import static io.airlift.slice.SizeOf.sizeOf;\n import static io.airlift.slice.Slices.EMPTY_SLICE;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public final class OrcInputStream\n         extends InputStream\n {\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(OrcInputStream.class).instanceSize();\n+\n     private static final long VARINT_MASK = 0x8080_8080_8080_8080L;\n     private static final int MAX_VARINT_LENGTH = 10;\n \n     private final OrcDataSourceId orcDataSourceId;\n     private final FixedLengthSliceInput compressedSliceInput;\n+    private final long compressedSliceInputRetainedSizeInBytes;\n     private final Optional<OrcDecompressor> decompressor;\n     private final Optional<DwrfDataEncryptor> dwrfDecryptor;\n \n     private int currentCompressedBlockOffset;\n \n     private byte[] buffer;\n     private byte[] compressedBuffer;\n-    private byte[] decompressionResultBuffer;\n     private int position;\n     private int length;\n     private int uncompressedOffset;\n \n     // Temporary memory for reading a float or double at buffer boundary.\n-    private byte[] temporaryBuffer = new byte[SIZE_OF_DOUBLE];\n+    private final byte[] temporaryBuffer = new byte[SIZE_OF_DOUBLE];\n \n-    private final OrcLocalMemoryContext bufferMemoryUsage;\n+    private final OrcLocalMemoryContext memoryUsage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MjgyMg==", "bodyText": "The calculation of the retained size of the compressedSliceInput is simple and should be fast. Do we really need to add this field? Can we remove it, and in getRetainedSizeInBytes() just replace it with compressedSliceInput.getRetainedSize()?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547062822", "createdAt": "2020-12-22T04:35:10Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -33,40 +34,42 @@\n import static com.facebook.presto.orc.checkpoint.InputStreamCheckpoint.decodeDecompressedOffset;\n import static com.facebook.presto.orc.stream.LongDecode.zigzagDecode;\n import static com.google.common.base.MoreObjects.toStringHelper;\n-import static com.google.common.base.Preconditions.checkArgument;\n import static io.airlift.slice.SizeOf.SIZE_OF_DOUBLE;\n import static io.airlift.slice.SizeOf.SIZE_OF_FLOAT;\n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n import static io.airlift.slice.SizeOf.SIZE_OF_SHORT;\n+import static io.airlift.slice.SizeOf.sizeOf;\n import static io.airlift.slice.Slices.EMPTY_SLICE;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public final class OrcInputStream\n         extends InputStream\n {\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(OrcInputStream.class).instanceSize();\n+\n     private static final long VARINT_MASK = 0x8080_8080_8080_8080L;\n     private static final int MAX_VARINT_LENGTH = 10;\n \n     private final OrcDataSourceId orcDataSourceId;\n     private final FixedLengthSliceInput compressedSliceInput;\n+    private final long compressedSliceInputRetainedSizeInBytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzE0Mg==", "bodyText": "I would remove this line and line 107 and calculate it in getRetainedSize()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547063142", "createdAt": "2020-12-22T04:36:20Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -86,22 +89,25 @@ public OrcInputStream(\n         // memory reserved in the systemMemoryContext is never release and instead it is\n         // expected that the context itself will be destroyed at the end of the read\n         requireNonNull(systemMemoryContext, \"systemMemoryContext is null\");\n-        this.bufferMemoryUsage = systemMemoryContext.newOrcLocalMemoryContext(OrcInputStream.class.getSimpleName());\n-        checkArgument(sliceInputRetainedSizeInBytes >= 0, \"sliceInputRetainedSizeInBytes is negative\");\n-        systemMemoryContext.newOrcLocalMemoryContext(OrcInputStream.class.getSimpleName()).setBytes(sliceInputRetainedSizeInBytes);\n+        this.memoryUsage = systemMemoryContext.newOrcLocalMemoryContext(OrcInputStream.class.getSimpleName());\n \n         if (!decompressor.isPresent() && !dwrfDecryptor.isPresent()) {\n+            // for unencrypted uncompressed input read the entire input and discard the original sliceInput\n             int sliceInputPosition = toIntExact(sliceInput.position());\n             int sliceInputRemaining = toIntExact(sliceInput.remaining());\n             this.buffer = new byte[sliceInputRemaining];\n             this.length = buffer.length;\n             sliceInput.readFully(buffer, sliceInputPosition, sliceInputRemaining);\n             this.compressedSliceInput = EMPTY_SLICE.getInput();\n+            this.compressedSliceInputRetainedSizeInBytes = compressedSliceInput.getRetainedSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTYyMg==", "bodyText": "Remove this line and count once at the end of advance()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065622", "createdAt": "2020-12-22T04:46:52Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -471,24 +479,25 @@ private void advance()\n                 length = buffer.length;\n             }\n             position = 0;\n+            memoryUsage.setBytes(getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTY1NA==", "bodyText": "Remove this line and count once at the end of advance()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065654", "createdAt": "2020-12-22T04:46:59Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -471,24 +479,25 @@ private void advance()\n                 length = buffer.length;\n             }\n             position = 0;\n+            memoryUsage.setBytes(getRetainedSizeInBytes());\n         }\n         else {\n             compressedBuffer = ensureCapacity(compressedBuffer, chunkLength);\n+            memoryUsage.setBytes(getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTY5Ng==", "bodyText": "Remove this line and count once at the end of advance()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065696", "createdAt": "2020-12-22T04:47:13Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -471,24 +479,25 @@ private void advance()\n                 length = buffer.length;\n             }\n             position = 0;\n+            memoryUsage.setBytes(getRetainedSizeInBytes());\n         }\n         else {\n             compressedBuffer = ensureCapacity(compressedBuffer, chunkLength);\n+            memoryUsage.setBytes(getRetainedSizeInBytes());\n             int readCompressed = compressedSliceInput.read(compressedBuffer, 0, chunkLength);\n             if (dwrfDecryptor.isPresent()) {\n                 compressedBuffer = dwrfDecryptor.get().decrypt(compressedBuffer, 0, chunkLength);\n                 readCompressed = compressedBuffer.length;\n             }\n \n-            buffer = decompressionResultBuffer;\n             OrcDecompressor.OutputBuffer output = new OrcDecompressor.OutputBuffer()\n             {\n                 @Override\n                 public byte[] initialize(int size)\n                 {\n                     if (buffer == null || size > buffer.length) {\n                         buffer = new byte[size];\n-                        bufferMemoryUsage.setBytes(buffer.length);\n+                        memoryUsage.setBytes(getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTcyNg==", "bodyText": "Remove this line and count once at the end of advance()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065726", "createdAt": "2020-12-22T04:47:21Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -500,18 +509,26 @@ private void advance()\n                 {\n                     if (size > buffer.length) {\n                         buffer = Arrays.copyOfRange(buffer, 0, size);\n-                        bufferMemoryUsage.setBytes(buffer.length);\n+                        memoryUsage.setBytes(getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTgxMw==", "bodyText": "compressedSliceInputRetainedSizeInBytes -> compressedSliceInput.getRetainedSize()", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065813", "createdAt": "2020-12-22T04:47:44Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -500,18 +509,26 @@ private void advance()\n                 {\n                     if (size > buffer.length) {\n                         buffer = Arrays.copyOfRange(buffer, 0, size);\n-                        bufferMemoryUsage.setBytes(buffer.length);\n+                        memoryUsage.setBytes(getRetainedSizeInBytes());\n                     }\n                     return buffer;\n                 }\n             };\n             length = decompressor.get().decompress(compressedBuffer, 0, readCompressed, output);\n-            decompressionResultBuffer = buffer;\n             position = 0;\n         }\n         uncompressedOffset = position;\n     }\n \n+    private long getRetainedSizeInBytes()\n+    {\n+        return INSTANCE_SIZE +\n+                compressedSliceInputRetainedSizeInBytes +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTkwOA==", "bodyText": "Nice!", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547065908", "createdAt": "2020-12-22T04:48:14Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestSelectiveOrcReader.java", "diffHunk": "@@ -908,6 +911,14 @@ public void testVarBinaries()\n     @Test\n     public void testMemoryTracking()\n             throws Exception\n+    {\n+        testMemoryTracking(NONE, 150000L, 170000L);\n+        testMemoryTracking(ZSTD, 150000L, 170000L);\n+        testMemoryTracking(ZLIB, 220000L, 240000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NjE2Mg==", "bodyText": "Curious: why is ZSTD the same as NONE?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547066162", "createdAt": "2020-12-22T04:49:18Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestSelectiveOrcReader.java", "diffHunk": "@@ -908,6 +911,14 @@ public void testVarBinaries()\n     @Test\n     public void testMemoryTracking()\n             throws Exception\n+    {\n+        testMemoryTracking(NONE, 150000L, 170000L);\n+        testMemoryTracking(ZSTD, 150000L, 170000L);\n+        testMemoryTracking(ZLIB, 220000L, 240000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NTkwOA=="}, "originalCommit": {"oid": "1ebcc86e5f755aa467bb4cd53917bb764237617b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzEwMA==", "bodyText": "Shall we add this line back to cover before lazy-loading case?", "url": "https://github.com/prestodb/presto/pull/15530#discussion_r547067100", "createdAt": "2020-12-22T04:53:37Z", "author": {"login": "yingsu00"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestOrcBatchPageSourceMemoryTracking.java", "diffHunk": "@@ -184,67 +184,37 @@ public void testPageSource()\n \n         assertEquals(pageSource.getSystemMemoryUsage(), 0);\n \n-        long memoryUsage = -1;\n         int totalRows = 0;\n         while (totalRows < 20000) {\n             assertFalse(pageSource.isFinished());\n             Page page = pageSource.getNextPage();\n             assertNotNull(page);\n             Block block = page.getBlock(1);\n \n-            if (memoryUsage == -1) {\n-                assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 180000L, 189999L); // Memory usage before lazy-loading the block\n-                createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n-                memoryUsage = pageSource.getSystemMemoryUsage();\n-                assertBetweenInclusive(memoryUsage, 610000L, 619999L); // Memory usage after lazy-loading the actual block\n-            }\n-            else {\n-                assertEquals(pageSource.getSystemMemoryUsage(), memoryUsage);\n-                createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n-                assertEquals(pageSource.getSystemMemoryUsage(), memoryUsage);\n-            }\n+            createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n+            assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 390000L, 619999L); // Memory usage after lazy-loading the actual block\n             totalRows += page.getPositionCount();\n         }\n \n-        memoryUsage = -1;\n         while (totalRows < 40000) {\n             assertFalse(pageSource.isFinished());\n             Page page = pageSource.getNextPage();\n             assertNotNull(page);\n             Block block = page.getBlock(1);\n \n-            if (memoryUsage == -1) {\n-                assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 180000L, 189999L); // Memory usage before lazy-loading the block\n-                createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n-                memoryUsage = pageSource.getSystemMemoryUsage();\n-                assertBetweenInclusive(memoryUsage, 610000L, 619999L); // Memory usage after lazy-loading the actual block\n-            }\n-            else {\n-                assertEquals(pageSource.getSystemMemoryUsage(), memoryUsage);\n-                createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n-                assertEquals(pageSource.getSystemMemoryUsage(), memoryUsage);\n-            }\n+            createUnboundedVarcharType().getSlice(block, block.getPositionCount() - 1); // trigger loading for lazy block\n+            assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 390000L, 619999L); // Memory usage after lazy-loading the actual block\n             totalRows += page.getPositionCount();\n         }\n \n-        memoryUsage = -1;\n         while (totalRows < NUM_ROWS) {\n             assertFalse(pageSource.isFinished());\n             Page page = pageSource.getNextPage();\n             assertNotNull(page);\n             Block block = page.getBlock(1);\n \n-            if (memoryUsage == -1) {\n-                assertBetweenInclusive(pageSource.getSystemMemoryUsage(), 90000L, 99999L); // Memory usage before lazy-loading the block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5e9ed0b3527641d8cf46604e0f8edc237a4a3e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de66b1777307f591ee4aee2acff8c02a6fdf6055", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/de66b1777307f591ee4aee2acff8c02a6fdf6055", "committedDate": "2020-12-22T16:31:54Z", "message": "Improve OrcInputStream memory tracking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12c74328ed67da86d2aa5398169de8d428cb8337", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/12c74328ed67da86d2aa5398169de8d428cb8337", "committedDate": "2020-12-22T16:39:20Z", "message": "Shrink cached buffers in OrcInputStream\n\nShrink cached buffers in OrcInputStream to avoid unnecesary memory overhead\n\nCached buffers tend to expand over time and retain extra memory.\nIn the situation when the number of ORC streams is high and the data\nis very unevenly distributed the overhead of retaining overly expanded buffer\ncan be very high"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a8db4ae471bf0a645ae31519120132e9ae7c85", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/93a8db4ae471bf0a645ae31519120132e9ae7c85", "committedDate": "2020-12-22T16:40:45Z", "message": "Reuse decompression buffer between multiple OrcInputStream's\n\nMultiple instances of an OrcInputStream can share the same decompression\nbuffer when reading a stripe, as the streams are always read serially"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a644fcde70a4047768955d7c4699f95c9bc80808", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/a644fcde70a4047768955d7c4699f95c9bc80808", "committedDate": "2020-12-22T02:25:33Z", "message": "Reuse decompression buffer between multiple OrcInputStream's\n\nMultiple instances of an OrcInputStream can share the same decompression\nbuffer when reading a stripe, as the streams are always read serially"}, "afterCommit": {"oid": "93a8db4ae471bf0a645ae31519120132e9ae7c85", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/93a8db4ae471bf0a645ae31519120132e9ae7c85", "committedDate": "2020-12-22T16:40:45Z", "message": "Reuse decompression buffer between multiple OrcInputStream's\n\nMultiple instances of an OrcInputStream can share the same decompression\nbuffer when reading a stripe, as the streams are always read serially"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDEzMjY1", "url": "https://github.com/prestodb/presto/pull/15530#pullrequestreview-557413265", "createdAt": "2020-12-22T22:56:37Z", "commit": {"oid": "93a8db4ae471bf0a645ae31519120132e9ae7c85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4565, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}