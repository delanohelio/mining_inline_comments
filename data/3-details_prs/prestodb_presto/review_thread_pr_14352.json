{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODk0Mzgz", "number": 14352, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNDowMFrODvwsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozODozN1rODx2RAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA3NDg0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/internationalization.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNDowMFrOGCYEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNDowMFrOGCYEuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDc2Mw==", "bodyText": "Put this in a section as Myanmar Functions maybe?", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r405144763", "createdAt": "2020-04-07T22:14:00Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/internationalization.rst", "diffHunk": "@@ -0,0 +1,20 @@\n+==============================\n+Internationalization Functions\n+==============================\n+\n+.. note::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA3OTc2OnYy", "diffSide": "RIGHT", "path": "presto-i18n/src/main/java/com/facebook/presto/i18n/I18nMyanmarFunctions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNTo1N1rOGCYHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMToxM1rOGEDEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTUxMg==", "bodyText": "is 0.9 always a good threshold?", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r405145512", "createdAt": "2020-04-07T22:15:57Z", "author": {"login": "rongrong"}, "path": "presto-i18n/src/main/java/com/facebook/presto/i18n/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1NDY2MA==", "bodyText": "This is what we use for the Facebook site - we are experimenting with this, but for now we don't have data supporting a different threshold.", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r405154660", "createdAt": "2020-04-07T22:39:20Z", "author": {"login": "nlagrow"}, "path": "presto-i18n/src/main/java/com/facebook/presto/i18n/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTUxMg=="}, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4Mjc0Ng==", "bodyText": "Maybe define it as a constant. You can also consider adding a function taking threshold as input.", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r406882746", "createdAt": "2020-04-10T18:23:48Z", "author": {"login": "rongrong"}, "path": "presto-i18n/src/main/java/com/facebook/presto/i18n/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTUxMg=="}, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NzY4Nw==", "bodyText": "Added a constant - I think adding functions w. threshold as input is a great idea, but let's keep it simple in this rev.\nI'm thinking of:\n\nadd threshold as an option to both MYANMAR_FONT_ENCODING and MYANMAR_NORMALIZE_UNICODE\nadd an option for whether to split on newlines to MYANMAR_FONT_ENCODING - a lot of times, Myanmar content will be posted as paragraphs of Zawgyi followed by paragraphs of Unicode\n\nbut for now, MYANAMR_NORMALIZE_UNICODE should help the most with any text matching queries", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r406897687", "createdAt": "2020-04-10T19:01:13Z", "author": {"login": "nlagrow"}, "path": "presto-i18n/src/main/java/com/facebook/presto/i18n/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTUxMg=="}, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA4NTgyOnYy", "diffSide": "RIGHT", "path": "presto-i18n/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxODozMlrOGCYLeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxODozMlrOGCYLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NjQ4OA==", "bodyText": "Let's name it presto-i18n-functions since this is a function plugin package.", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r405146488", "createdAt": "2020-04-07T22:18:32Z", "author": {"login": "rongrong"}, "path": "presto-i18n/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.235-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-i18n</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80b7213cc55fa07cbc3b5b8ecb2790d73efd93e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTc1NDIyOnYy", "diffSide": "RIGHT", "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMToyNTowNlrOGFhgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1MDo0MFrOGFiQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0NTAzNA==", "bodyText": "Do you want to use the constant ZAWGYI_PROBABILITY_THRESHOLD  here as well?", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r408445034", "createdAt": "2020-04-14T21:25:06Z", "author": {"login": "rongrong"}, "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n.functions;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    /**\n+     * ZawgyiDetector returns a confidence score that a given string is Zawgyi encoded.\n+     * This constant defines the default confidence at which a string is treated as Zawgyi.\n+     */\n+    private static final double ZAWGYI_PROBABILITY_THRESHOLD = 0.9;\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a25a23402e2168d3fddee2bcc2ff373efc55e42"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzQyOQ==", "bodyText": "ah yes! thanks for noticing will patch that", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r408457429", "createdAt": "2020-04-14T21:50:40Z", "author": {"login": "nlagrow"}, "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n.functions;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");\n+\n+    /**\n+     * ZawgyiDetector returns a confidence score that a given string is Zawgyi encoded.\n+     * This constant defines the default confidence at which a string is treated as Zawgyi.\n+     */\n+    private static final double ZAWGYI_PROBABILITY_THRESHOLD = 0.9;\n+\n+    @Description(\"labels whether input strings use Unicode or Zawgyi font encoding\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice myanmarFontEncoding(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (detector.getZawgyiProbability(slice.toStringUtf8()) > 0.9) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0NTAzNA=="}, "originalCommit": {"oid": "6a25a23402e2168d3fddee2bcc2ff373efc55e42"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk1OTA3OnYy", "diffSide": "RIGHT", "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozODozN1rOGFjcwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjo1NjoxMlrOGFj1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3Njg2NQ==", "bodyText": "Actually should these also be private static final? Put the variables before the constructor per convention.", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r408476865", "createdAt": "2020-04-14T22:38:37Z", "author": {"login": "rongrong"}, "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n.functions;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "172e5d21d99bf5fdf7811d63d2c531419f22d4e1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzIwMg==", "bodyText": "They can be - updated & shifted the definition of these and ZAWGYI_PROBABILITY_THRESHOLD", "url": "https://github.com/prestodb/presto/pull/14352#discussion_r408483202", "createdAt": "2020-04-14T22:56:12Z", "author": {"login": "nlagrow"}, "path": "presto-i18n-functions/src/main/java/com/facebook/presto/i18n/functions/I18nMyanmarFunctions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.i18n.functions;\n+\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import com.google.myanmartools.TransliterateZ2U;\n+import com.google.myanmartools.ZawgyiDetector;\n+import io.airlift.slice.Slice;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public final class I18nMyanmarFunctions\n+{\n+    private I18nMyanmarFunctions() {}\n+\n+    static ZawgyiDetector detector = new ZawgyiDetector();\n+    static TransliterateZ2U z2uTransliterator = new TransliterateZ2U(\"Zawgyi to Unicode\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3Njg2NQ=="}, "originalCommit": {"oid": "172e5d21d99bf5fdf7811d63d2c531419f22d4e1"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2756, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}