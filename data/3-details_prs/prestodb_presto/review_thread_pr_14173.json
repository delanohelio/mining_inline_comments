{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzA5MjA3", "number": 14173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo0OToyMFrODma9Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NToyM1rODmbFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjE0MTYyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo0OToyMFrOFz1HGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo0OToyMFrOFz1HGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTg2Nw==", "bodyText": "Shall we add a new static helper for protected void adjustMaxBatchSize(long averageRowBytes) so we can reuse the code?", "url": "https://github.com/prestodb/presto/pull/14173#discussion_r389891867", "createdAt": "2020-03-09T18:49:20Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -237,7 +247,17 @@ public AbstractOrcRecordReader(\n \n         maxBytesPerCell = new long[streamReaders.length];\n \n-        nextBatchSize = initialBatchSize;\n+        if (onlyFixedWidthColumns) {\n+            if (totalFixedWidth == 0) {\n+                nextBatchSize = MAX_BATCH_SIZE;\n+            }\n+            else {\n+                nextBatchSize = toIntExact(min(MAX_BATCH_SIZE, max(1, maxBlockBytes / totalFixedWidth)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6652e62df958ed175ef733011c1048381d06a6ee"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjE2MjE5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NToyM1rOFz1T8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NToyM1rOFz1T8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTE1Mg==", "bodyText": "Shall we move this logic out of this loop and move it closer to where it is used? Given it's in the constructor, having two for loops shouldn't be a performance concern. It will be clearer to separate the logic. Or, it could be even better to move the logic into another help like adjustMaxBatchSizeBasedOnTypes (something like this name).", "url": "https://github.com/prestodb/presto/pull/14173#discussion_r389895152", "createdAt": "2020-03-09T18:55:23Z", "author": {"login": "highker"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -154,14 +155,23 @@ public AbstractOrcRecordReader(\n \n         // reduce the included columns to the set that is also present\n         ImmutableSet.Builder<Integer> presentColumns = ImmutableSet.builder();\n-        ImmutableMap.Builder<Integer, Type> presentColumnsAndTypes = ImmutableMap.builder();\n         OrcType root = types.get(0);\n+        boolean onlyFixedWidthColumns = true;\n+        int totalFixedWidth = 0;\n         for (Map.Entry<Integer, Type> entry : includedColumns.entrySet()) {\n             // an old file can have less columns since columns can be added\n             // after the file was written\n             if (entry.getKey() >= 0 && entry.getKey() < root.getFieldCount()) {\n                 presentColumns.add(entry.getKey());\n-                presentColumnsAndTypes.put(entry.getKey(), entry.getValue());\n+\n+                Type type = entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6652e62df958ed175ef733011c1048381d06a6ee"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3112, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}