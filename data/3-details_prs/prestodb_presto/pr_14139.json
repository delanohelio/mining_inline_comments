{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDcyNDU3", "number": 14139, "title": "Adding fnv1 and fnv1a hash functions", "bodyText": "Fixes #12500.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Added fnv1_32, fnv1_64, fnv1a_32, fnv1a_64,", "createdAt": "2020-02-21T21:06:06Z", "url": "https://github.com/prestodb/presto/pull/14139", "merged": true, "mergeCommit": {"oid": "778e885e0818ac1a857071277142611173e637ba"}, "closed": true, "closedAt": "2020-02-28T23:27:40Z", "author": {"login": "widagdos"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGn6CVgFqTM2Mjk2NDIzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH2kpLgFqTM2NDM1MzY3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTY0MjM2", "url": "https://github.com/prestodb/presto/pull/14139#pullrequestreview-362964236", "createdAt": "2020-02-21T22:51:55Z", "commit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo1MTo1NlrOFtG7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo1OTowNVrOFtHDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzY2Mg==", "bodyText": "Presto Java code follow camel convention (and don't usually use _). What about fnv1Hash32? ? Ditto for other methods.", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382843662", "createdAt": "2020-02-21T22:51:56Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/FnvHash.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+// Taken from https://github.com/airlift/slice/blob/95d5876d3f4c57321767113e97416a42bc41749a/src/main/java/io/airlift/slice/FnvHash.java\n+class FnvHash\n+{\n+    private static final long FNV_64_OFFSET_BASIS = 0xcbf29ce484222325L;\n+    private static final long FNV_64_PRIME = 0x100000001b3L;\n+\n+    private static final int FNV_32_OFFSET_BASIS = 0x811c9dc5;\n+    private static final int FNV_32_PRIME = 0x01000193;\n+\n+    private FnvHash()\n+    {\n+    }\n+\n+    static int fnv1_32(Slice data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzgwOA==", "bodyText": "ditto for this method name :)", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382843808", "createdAt": "2020-02-21T22:52:29Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/VarbinaryFunctions.java", "diffHunk": "@@ -315,6 +315,38 @@ public static long crc32(@SqlType(StandardTypes.VARBINARY) Slice slice)\n         return crc32.getValue();\n     }\n \n+    @Description(\"compute fnv-1 32 bit\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long fnv1_32(@SqlType(StandardTypes.VARBINARY) Slice slice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NDA4OQ==", "bodyText": "can this be a public method?", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382844089", "createdAt": "2020-02-21T22:53:28Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/FnvHash.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+// Taken from https://github.com/airlift/slice/blob/95d5876d3f4c57321767113e97416a42bc41749a/src/main/java/io/airlift/slice/FnvHash.java\n+class FnvHash\n+{\n+    private static final long FNV_64_OFFSET_BASIS = 0xcbf29ce484222325L;\n+    private static final long FNV_64_PRIME = 0x100000001b3L;\n+\n+    private static final int FNV_32_OFFSET_BASIS = 0x811c9dc5;\n+    private static final int FNV_32_PRIME = 0x01000193;\n+\n+    private FnvHash()\n+    {\n+    }\n+\n+    static int fnv1_32(Slice data)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzY2Mg=="}, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NDQ5OQ==", "bodyText": "What about the following?\n/**\n * Reference implementation: https://tools.ietf.org/html/draft-eastlake-fnv-17#section-6\n * TODO: Move this utility class to airlift:slice\n */", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382844499", "createdAt": "2020-02-21T22:54:49Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/FnvHash.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+// Taken from https://github.com/airlift/slice/blob/95d5876d3f4c57321767113e97416a42bc41749a/src/main/java/io/airlift/slice/FnvHash.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NTM3MQ==", "bodyText": "Is is by deign that in this method, we first do multiplication and xor , while in fnv1a_32 we first do xor then multiplication.", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382845371", "createdAt": "2020-02-21T22:57:48Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/FnvHash.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+// Taken from https://github.com/airlift/slice/blob/95d5876d3f4c57321767113e97416a42bc41749a/src/main/java/io/airlift/slice/FnvHash.java\n+class FnvHash\n+{\n+    private static final long FNV_64_OFFSET_BASIS = 0xcbf29ce484222325L;\n+    private static final long FNV_64_PRIME = 0x100000001b3L;\n+\n+    private static final int FNV_32_OFFSET_BASIS = 0x811c9dc5;\n+    private static final int FNV_32_PRIME = 0x01000193;\n+\n+    private FnvHash()\n+    {\n+    }\n+\n+    static int fnv1_32(Slice data)\n+    {\n+        int hash = FNV_32_OFFSET_BASIS;\n+\n+        for (int i = 0; i < data.length(); ++i) {\n+            int dataByte = data.getUnsignedByte(i);\n+            hash *= FNV_32_PRIME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NTYyOA==", "bodyText": "Thanks for the nice test cases!\nnit for the comment: space after //", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382845628", "createdAt": "2020-02-21T22:58:40Z", "author": {"login": "wenleix"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestVarbinaryFunctions.java", "diffHunk": "@@ -364,6 +364,29 @@ public void testCrc32()\n         assertFunction(\"crc32(to_utf8('ABCDEFGHIJKLM'))\", BIGINT, 4223167559L);\n     }\n \n+    @Test\n+    public void testFnv()\n+    {\n+        // https://nqv.github.io/fnv/\n+        assertFunction(\"fnv1_32(from_hex(''))\", BIGINT, 0x811c9dc5L + Integer.MIN_VALUE * 2L);\n+        assertFunction(\"fnv1_32(from_hex('19'))\", BIGINT, 0x050c5d06L);\n+        assertFunction(\"fnv1_32(from_hex('F5'))\", BIGINT, 0x050c5deaL); //Check for sign extension bug", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NTc0MA==", "bodyText": "nit:\n// ground truth result is generated via https://nqv.github.io/fnv/", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r382845740", "createdAt": "2020-02-21T22:59:05Z", "author": {"login": "wenleix"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestVarbinaryFunctions.java", "diffHunk": "@@ -364,6 +364,29 @@ public void testCrc32()\n         assertFunction(\"crc32(to_utf8('ABCDEFGHIJKLM'))\", BIGINT, 4223167559L);\n     }\n \n+    @Test\n+    public void testFnv()\n+    {\n+        // https://nqv.github.io/fnv/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a95a5daa3d2b002e7411a502f92fc0f72ab70c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68", "author": {"user": {"login": "widagdos", "name": "Widagdo Setiawan"}}, "url": "https://github.com/prestodb/presto/commit/f0391fd25c90780d7b8f282b128730504d734e68", "committedDate": "2020-02-21T23:48:25Z", "message": "Adding fnv1 and fnv1a hash functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab01d2ee4b7dab0b4528ccea1b954c012c6d4530", "author": {"user": {"login": "widagdos", "name": "Widagdo Setiawan"}}, "url": "https://github.com/prestodb/presto/commit/ab01d2ee4b7dab0b4528ccea1b954c012c6d4530", "committedDate": "2020-02-21T23:40:04Z", "message": "Adding fnv1 and fnv1a hash functions"}, "afterCommit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68", "author": {"user": {"login": "widagdos", "name": "Widagdo Setiawan"}}, "url": "https://github.com/prestodb/presto/commit/f0391fd25c90780d7b8f282b128730504d734e68", "committedDate": "2020-02-21T23:48:25Z", "message": "Adding fnv1 and fnv1a hash functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTkwMDQ0", "url": "https://github.com/prestodb/presto/pull/14139#pullrequestreview-362990044", "createdAt": "2020-02-22T00:33:50Z", "commit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzUzMzkw", "url": "https://github.com/prestodb/presto/pull/14139#pullrequestreview-364353390", "createdAt": "2020-02-25T18:38:03Z", "commit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozODowM1rOFuQiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozODowM1rOFuQiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTcxNw==", "bodyText": "Please static import the functions per coding convention.", "url": "https://github.com/prestodb/presto/pull/14139#discussion_r384049717", "createdAt": "2020-02-25T18:38:03Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/VarbinaryFunctions.java", "diffHunk": "@@ -315,6 +315,38 @@ public static long crc32(@SqlType(StandardTypes.VARBINARY) Slice slice)\n         return crc32.getValue();\n     }\n \n+    @Description(\"compute fnv-1 32 bit\")\n+    @ScalarFunction(\"fnv1_32\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long fnv1Hash32(@SqlType(StandardTypes.VARBINARY) Slice slice)\n+    {\n+        return FnvHash.fnv1Hash32(slice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzUzNjc5", "url": "https://github.com/prestodb/presto/pull/14139#pullrequestreview-364353679", "createdAt": "2020-02-25T18:38:27Z", "commit": {"oid": "f0391fd25c90780d7b8f282b128730504d734e68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2289, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}