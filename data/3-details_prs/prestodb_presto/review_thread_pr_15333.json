{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjQ4MDg0", "number": 15333, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0Njo1OVrOEvf4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMDozNFrOEv_Cnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQwODU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0Njo1OVrOHkhCbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo0Nzo1MlrOHlJ7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ==", "bodyText": "Doesn't this cause problem if I have\nSELECT ...\nFROM T1\nJOIN T2\nUSING(x)\nORDER BY x\nAdd a test case for this.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508052079", "createdAt": "2020-10-19T20:46:59Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -360,9 +362,10 @@ protected Boolean visitFunctionCall(FunctionCall node, Void context)\n                                     .map(NodeRef::of)\n                                     .map(columnReferences::get)\n                                     .filter(Objects::nonNull)\n+                                    .flatMap(List::stream)\n                                     .collect(toImmutableList());\n                             for (Expression sortKey : sortKeys) {\n-                                if (!node.getArguments().contains(sortKey) && !fieldIds.contains(columnReferences.get(NodeRef.of(sortKey)))) {\n+                                if (!node.getArguments().contains(sortKey) && !fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1ODcxOQ==", "bodyText": "I'm not sure I follow, what is the problem? This is analyzing ORDER BY of aggregation expression, not the whole query.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508058719", "createdAt": "2020-10-19T20:59:27Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -360,9 +362,10 @@ protected Boolean visitFunctionCall(FunctionCall node, Void context)\n                                     .map(NodeRef::of)\n                                     .map(columnReferences::get)\n                                     .filter(Objects::nonNull)\n+                                    .flatMap(List::stream)\n                                     .collect(toImmutableList());\n                             for (Expression sortKey : sortKeys) {\n-                                if (!node.getArguments().contains(sortKey) && !fieldIds.contains(columnReferences.get(NodeRef.of(sortKey)))) {\n+                                if (!node.getArguments().contains(sortKey) && !fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ=="}, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMjAwOA==", "bodyText": "I'm not sure I follow, what is the problem? This is analyzing ORDER BY of aggregation expression, not the whole query.\n\nSince you are touching in the ORDER BY clause, I think it's good have the test as I suggested.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508722008", "createdAt": "2020-10-20T17:47:52Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -360,9 +362,10 @@ protected Boolean visitFunctionCall(FunctionCall node, Void context)\n                                     .map(NodeRef::of)\n                                     .map(columnReferences::get)\n                                     .filter(Objects::nonNull)\n+                                    .flatMap(List::stream)\n                                     .collect(toImmutableList());\n                             for (Expression sortKey : sortKeys) {\n-                                if (!node.getArguments().contains(sortKey) && !fieldIds.contains(columnReferences.get(NodeRef.of(sortKey)))) {\n+                                if (!node.getArguments().contains(sortKey) && !fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ=="}, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQxMzI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0ODoyNVrOHkhFRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjoxNlrOHkiRAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjgwNA==", "bodyText": "Add a getter for this instead of duplicating this check multiple places.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508052804", "createdAt": "2020-10-19T20:48:25Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -516,7 +520,9 @@ protected Boolean visitFieldReference(FieldReference node, Void context)\n                 return true;\n             }\n \n-            FieldId fieldId = requireNonNull(columnReferences.get(NodeRef.<Expression>of(node)), \"No FieldId for FieldReference\");\n+            List<FieldId> fieldIdList = columnReferences.get(NodeRef.<Expression>of(node));\n+            checkState(fieldIdList.size() == 1, \"No FieldId for FieldReference\");\n+            FieldId fieldId = fieldIdList.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjE5Mg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508072192", "createdAt": "2020-10-19T21:26:16Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -516,7 +520,9 @@ protected Boolean visitFieldReference(FieldReference node, Void context)\n                 return true;\n             }\n \n-            FieldId fieldId = requireNonNull(columnReferences.get(NodeRef.<Expression>of(node)), \"No FieldId for FieldReference\");\n+            List<FieldId> fieldIdList = columnReferences.get(NodeRef.<Expression>of(node));\n+            checkState(fieldIdList.size() == 1, \"No FieldId for FieldReference\");\n+            FieldId fieldId = fieldIdList.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjgwNA=="}, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQxNjU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ScopeReferenceExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0OToyNlrOHkhHUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMToxMlrOHkhf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzMyOQ==", "bodyText": "Shouldn't it be allMatch?", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508053329", "createdAt": "2020-10-19T20:49:26Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ScopeReferenceExtractor.java", "diffHunk": "@@ -38,20 +36,18 @@ public static boolean hasReferencesToScope(Node node, Analysis analysis, Scope s\n \n     public static Stream<Expression> getReferencesToScope(Node node, Analysis analysis, Scope scope)\n     {\n-        Map<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n+        ListMultimap<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n \n         return AstUtils.preOrder(node)\n                 .filter(Expression.class::isInstance)\n                 .map(Expression.class::cast)\n                 .filter(expression -> columnReferences.containsKey(NodeRef.of(expression)))\n-                .filter(expression -> isReferenceToScope(expression, scope, columnReferences));\n+                .filter(expression -> hasReferenceToScope(expression, scope, columnReferences));\n     }\n \n-    private static boolean isReferenceToScope(Expression node, Scope scope, Map<NodeRef<Expression>, FieldId> columnReferences)\n+    private static boolean hasReferenceToScope(Expression node, Scope scope, ListMultimap<NodeRef<Expression>, FieldId> columnReferences)\n     {\n-        FieldId fieldId = columnReferences.get(NodeRef.of(node));\n-        requireNonNull(fieldId, () -> \"No FieldId for \" + node);\n-        return isFieldFromScope(fieldId, scope);\n+        return columnReferences.get(NodeRef.of(node)).stream().anyMatch(fieldId -> isFieldFromScope(fieldId, scope));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTYyNg==", "bodyText": "This function is finding references to the given scope, so as long as there is some reference (any), we should include it.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508059626", "createdAt": "2020-10-19T21:01:12Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ScopeReferenceExtractor.java", "diffHunk": "@@ -38,20 +36,18 @@ public static boolean hasReferencesToScope(Node node, Analysis analysis, Scope s\n \n     public static Stream<Expression> getReferencesToScope(Node node, Analysis analysis, Scope scope)\n     {\n-        Map<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n+        ListMultimap<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n \n         return AstUtils.preOrder(node)\n                 .filter(Expression.class::isInstance)\n                 .map(Expression.class::cast)\n                 .filter(expression -> columnReferences.containsKey(NodeRef.of(expression)))\n-                .filter(expression -> isReferenceToScope(expression, scope, columnReferences));\n+                .filter(expression -> hasReferenceToScope(expression, scope, columnReferences));\n     }\n \n-    private static boolean isReferenceToScope(Expression node, Scope scope, Map<NodeRef<Expression>, FieldId> columnReferences)\n+    private static boolean hasReferenceToScope(Expression node, Scope scope, ListMultimap<NodeRef<Expression>, FieldId> columnReferences)\n     {\n-        FieldId fieldId = columnReferences.get(NodeRef.of(node));\n-        requireNonNull(fieldId, () -> \"No FieldId for \" + node);\n-        return isFieldFromScope(fieldId, scope);\n+        return columnReferences.get(NodeRef.of(node)).stream().anyMatch(fieldId -> isFieldFromScope(fieldId, scope));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzMyOQ=="}, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQyNjIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/GroupingOperationRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo1MjoxMFrOHkhNGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjowNVrOHkiQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NDgxMQ==", "bodyText": "refactor this into a getter/helper function", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508054811", "createdAt": "2020-10-19T20:52:10Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/GroupingOperationRewriter.java", "diffHunk": "@@ -54,13 +54,16 @@ public static Expression rewriteGroupingOperation(GroupingOperation expression,\n         }\n         else {\n             checkState(groupIdVariable.isPresent(), \"groupId symbol is missing\");\n+            List<FieldId> fieldIdList = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0)));\n+            checkState(fieldIdList.size() == 1, \"grouping column must reference exactly one field\");\n \n-            RelationId relationId = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0))).getRelationId();\n+            RelationId relationId = fieldIdList.get(0).getRelationId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjA5NQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508072095", "createdAt": "2020-10-19T21:26:05Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/GroupingOperationRewriter.java", "diffHunk": "@@ -54,13 +54,16 @@ public static Expression rewriteGroupingOperation(GroupingOperation expression,\n         }\n         else {\n             checkState(groupIdVariable.isPresent(), \"groupId symbol is missing\");\n+            List<FieldId> fieldIdList = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0)));\n+            checkState(fieldIdList.size() == 1, \"grouping column must reference exactly one field\");\n \n-            RelationId relationId = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0))).getRelationId();\n+            RelationId relationId = fieldIdList.get(0).getRelationId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NDgxMQ=="}, "originalCommit": {"oid": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjY0NTkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzozNzozOVrOHlJiyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowMzozMlrOHlO7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNTcyMQ==", "bodyText": "We normally use the most generic type. So use MultiMap here instead.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508715721", "createdAt": "2020-10-20T17:37:39Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -103,7 +104,7 @@\n     // fields and expressions in the group by clause\n     private final Set<FieldId> groupingFields;\n     private final List<Expression> expressions;\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences;\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12cd933ce63d12ef650775a7229b4884de8a3a10"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzk4Mw==", "bodyText": "Ok, changed all the ListMultimap to Multimap.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508803983", "createdAt": "2020-10-20T20:03:32Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -103,7 +104,7 @@\n     // fields and expressions in the group by clause\n     private final Set<FieldId> groupingFields;\n     private final List<Expression> expressions;\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences;\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNTcyMQ=="}, "originalCommit": {"oid": "12cd933ce63d12ef650775a7229b4884de8a3a10"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ5MzcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyNDo0MlrOHlRrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoxMjoyNFrOHlTCqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0ODk3NA==", "bodyText": "Nits: Multimap", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508848974", "createdAt": "2020-10-20T21:24:42Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -83,7 +85,7 @@\n     private final Map<NodeRef<Table>, Query> namedQueries = new LinkedHashMap<>();\n \n     private final Map<NodeRef<Node>, Scope> scopes = new LinkedHashMap<>();\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences = new LinkedHashMap<>();\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences = ArrayListMultimap.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTMzNg==", "bodyText": "Fixed", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871336", "createdAt": "2020-10-20T22:12:24Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -83,7 +85,7 @@\n     private final Map<NodeRef<Table>, Query> namedQueries = new LinkedHashMap<>();\n \n     private final Map<NodeRef<Node>, Scope> scopes = new LinkedHashMap<>();\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences = new LinkedHashMap<>();\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences = ArrayListMultimap.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0ODk3NA=="}, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ5NzA3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyNTo0NlrOHlRtSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoxMjoyOFrOHlTCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0OTQ4MA==", "bodyText": "Nits: Multimap", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508849480", "createdAt": "2020-10-20T21:25:46Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -480,9 +487,9 @@ public void addFunctionHandles(Map<NodeRef<FunctionCall>, FunctionHandle> infos)\n         return unmodifiableSet(columnReferences.keySet());\n     }\n \n-    public Map<NodeRef<Expression>, FieldId> getColumnReferenceFields()\n+    public ListMultimap<NodeRef<Expression>, FieldId> getColumnReferenceFields()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTM1Mg==", "bodyText": "Fixed", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871352", "createdAt": "2020-10-20T22:12:28Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -480,9 +487,9 @@ public void addFunctionHandles(Map<NodeRef<FunctionCall>, FunctionHandle> infos)\n         return unmodifiableSet(columnReferences.keySet());\n     }\n \n-    public Map<NodeRef<Expression>, FieldId> getColumnReferenceFields()\n+    public ListMultimap<NodeRef<Expression>, FieldId> getColumnReferenceFields()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0OTQ4MA=="}, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUwMDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyNjo1MVrOHlRvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoxMjozM1rOHlTC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MDA1NA==", "bodyText": "It makes more sense to use \"column reference\" rather than \"field reference\". Or maybe checkAndGetColumnReferenceField.", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508850054", "createdAt": "2020-10-20T21:26:51Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -169,4 +171,12 @@ private static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n         Object enumValue = enumType.getEnumMap().get(enumKey);\n         return enumValue instanceof String ? Optional.of(utf8Slice((String) enumValue)) : Optional.of(enumValue);\n     }\n+\n+    public static FieldId checkAndGetFieldReferenceForExpression(Expression expression, Multimap<NodeRef<Expression>, FieldId> columnReferences)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTM4MA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871380", "createdAt": "2020-10-20T22:12:33Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -169,4 +171,12 @@ private static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n         Object enumValue = enumType.getEnumMap().get(enumKey);\n         return enumValue instanceof String ? Optional.of(utf8Slice((String) enumValue)) : Optional.of(enumValue);\n     }\n+\n+    public static FieldId checkAndGetFieldReferenceForExpression(Expression expression, Multimap<NodeRef<Expression>, FieldId> columnReferences)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MDA1NA=="}, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxMzkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/UtilizedColumnsAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMDozNFrOHlR3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoxMjozNlrOHlTC7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjA1OA==", "bodyText": "analysis.getColumnReferenceFields().get(NodeRef.of(expression))\n    .forEach(context:: addFieldIdToExplore);", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508852058", "createdAt": "2020-10-20T21:30:34Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/UtilizedColumnsAnalyzer.java", "diffHunk": "@@ -429,7 +441,9 @@ private void handleRelation(Relation relation, Context context, Relation... chil\n         private void handleExpression(Expression expression, Context context)\n         {\n             if (analysis.getColumnReferenceFields().containsKey(NodeRef.of(expression))) {\n-                context.addFieldIdToExplore(analysis.getColumnReferenceFields().get(NodeRef.of(expression)));\n+                for (FieldId fieldId : analysis.getColumnReferenceFields().get(NodeRef.of(expression))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTQwNA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871404", "createdAt": "2020-10-20T22:12:36Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/UtilizedColumnsAnalyzer.java", "diffHunk": "@@ -429,7 +441,9 @@ private void handleRelation(Relation relation, Context context, Relation... chil\n         private void handleExpression(Expression expression, Context context)\n         {\n             if (analysis.getColumnReferenceFields().containsKey(NodeRef.of(expression))) {\n-                context.addFieldIdToExplore(analysis.getColumnReferenceFields().get(NodeRef.of(expression)));\n+                for (FieldId fieldId : analysis.getColumnReferenceFields().get(NodeRef.of(expression))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjA1OA=="}, "originalCommit": {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3544, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}