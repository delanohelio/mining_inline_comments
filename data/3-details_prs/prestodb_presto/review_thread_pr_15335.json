{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzI5NzY0", "number": 15335, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Mjo1MFrOExXxQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNDozNlrOExX8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA1MTIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/NodeSpillConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Mjo1MFrOHneIoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Mjo1MFrOHneIoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MDI0MA==", "bodyText": "nit: @NotNull", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511150240", "createdAt": "2020-10-23T20:52:50Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/NodeSpillConfig.java", "diffHunk": "@@ -75,4 +76,16 @@ public NodeSpillConfig setSpillEncryptionEnabled(boolean spillEncryptionEnabled)\n         this.spillEncryptionEnabled = spillEncryptionEnabled;\n         return this;\n     }\n+\n+    public DataSize getTemporaryStoreBufferSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA1OTc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/spiller/TestTemporaryStoreSingleStreamSpiller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1NjoxOFrOHneNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjo1OTo0MlrOHn68fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MTU1MQ==", "bodyText": "nit: Initialize in @BeforeClass", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511151551", "createdAt": "2020-10-23T20:56:18Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/test/java/com/facebook/presto/spiller/TestTemporaryStoreSingleStreamSpiller.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spiller;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.io.OutputStreamDataSink;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.memory.context.LocalMemoryContext;\n+import com.facebook.presto.operator.PageAssertions;\n+import com.facebook.presto.spi.page.PageCodecMarker;\n+import com.facebook.presto.spi.page.PagesSerdeUtil;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import com.facebook.presto.testing.TestingTemporaryStoreManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterators;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.units.DataSize;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.memory.context.AggregatedMemoryContext.newSimpleAggregatedMemoryContext;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.MoreFiles.listFiles;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static com.google.common.util.concurrent.MoreExecutors.listeningDecorator;\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.lang.Double.doubleToLongBits;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.file.Files.newInputStream;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestTemporaryStoreSingleStreamSpiller\n+{\n+    private static final List<Type> TYPES = ImmutableList.of(BIGINT, DOUBLE, VARBINARY);\n+\n+    private final ListeningExecutorService executor = listeningDecorator(newCachedThreadPool());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyMjI2OQ==", "bodyText": "@arhimondr : Just curious, what's the difference?", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511622269", "createdAt": "2020-10-25T16:59:42Z", "author": {"login": "wenleix"}, "path": "presto-main/src/test/java/com/facebook/presto/spiller/TestTemporaryStoreSingleStreamSpiller.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spiller;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.io.OutputStreamDataSink;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.memory.context.LocalMemoryContext;\n+import com.facebook.presto.operator.PageAssertions;\n+import com.facebook.presto.spi.page.PageCodecMarker;\n+import com.facebook.presto.spi.page.PagesSerdeUtil;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import com.facebook.presto.testing.TestingTemporaryStoreManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterators;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.units.DataSize;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.memory.context.AggregatedMemoryContext.newSimpleAggregatedMemoryContext;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.MoreFiles.listFiles;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static com.google.common.util.concurrent.MoreExecutors.listeningDecorator;\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.lang.Double.doubleToLongBits;\n+import static java.lang.Math.toIntExact;\n+import static java.nio.file.Files.newInputStream;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestTemporaryStoreSingleStreamSpiller\n+{\n+    private static final List<Type> TYPES = ImmutableList.of(BIGINT, DOUBLE, VARBINARY);\n+\n+    private final ListeningExecutorService executor = listeningDecorator(newCachedThreadPool());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MTU1MQ=="}, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA3MDEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/LocalTemporaryStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMDoxNFrOHneT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMDoxNFrOHneT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzEyMg==", "bodyText": "nit @GuarderBy(\"this\")", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511153122", "createdAt": "2020-10-23T21:00:14Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/LocalTemporaryStore.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spiller;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.io.DataOutput;\n+import com.facebook.presto.common.io.DataSink;\n+import com.facebook.presto.common.io.OutputStreamDataSink;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.storage.TemporaryDataSink;\n+import com.facebook.presto.spi.storage.TemporaryStore;\n+import com.facebook.presto.spi.storage.TemporaryStoreFactory;\n+import com.facebook.presto.spi.storage.TemporaryStoreHandle;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileStore;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.OUT_OF_SPILL_SPACE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.nio.file.Files.createDirectories;\n+import static java.nio.file.Files.delete;\n+import static java.nio.file.Files.getFileStore;\n+import static java.nio.file.Files.newDirectoryStream;\n+import static java.nio.file.StandardOpenOption.APPEND;\n+import static java.util.Objects.requireNonNull;\n+\n+public class LocalTemporaryStore\n+        implements TemporaryStore\n+{\n+    public static final String NAME = \"local\";\n+    public static final String TEMPORARY_STORE_PATH = \"temporary-store.path\";\n+\n+    private static final Logger log = Logger.get(LocalTemporaryStore.class);\n+\n+    private static final String SPILL_FILE_PREFIX = \"spill\";\n+    private static final String SPILL_FILE_SUFFIX = \".bin\";\n+    private static final String SPILL_FILE_GLOB = \"spill*.bin\";\n+\n+    private final List<Path> spillPaths;\n+    private final double maxUsedSpaceThreshold;\n+    private int roundRobinIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA3MDgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/LocalTemporaryStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMDoyOVrOHneUSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMDoyOVrOHneUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIyNw==", "bodyText": "nit: \"spillPaths is null\"", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511153227", "createdAt": "2020-10-23T21:00:29Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/LocalTemporaryStore.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spiller;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.io.DataOutput;\n+import com.facebook.presto.common.io.DataSink;\n+import com.facebook.presto.common.io.OutputStreamDataSink;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.storage.TemporaryDataSink;\n+import com.facebook.presto.spi.storage.TemporaryStore;\n+import com.facebook.presto.spi.storage.TemporaryStoreFactory;\n+import com.facebook.presto.spi.storage.TemporaryStoreHandle;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileStore;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.OUT_OF_SPILL_SPACE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.nio.file.Files.createDirectories;\n+import static java.nio.file.Files.delete;\n+import static java.nio.file.Files.getFileStore;\n+import static java.nio.file.Files.newDirectoryStream;\n+import static java.nio.file.StandardOpenOption.APPEND;\n+import static java.util.Objects.requireNonNull;\n+\n+public class LocalTemporaryStore\n+        implements TemporaryStore\n+{\n+    public static final String NAME = \"local\";\n+    public static final String TEMPORARY_STORE_PATH = \"temporary-store.path\";\n+\n+    private static final Logger log = Logger.get(LocalTemporaryStore.class);\n+\n+    private static final String SPILL_FILE_PREFIX = \"spill\";\n+    private static final String SPILL_FILE_SUFFIX = \".bin\";\n+    private static final String SPILL_FILE_GLOB = \"spill*.bin\";\n+\n+    private final List<Path> spillPaths;\n+    private final double maxUsedSpaceThreshold;\n+    private int roundRobinIndex;\n+\n+    public LocalTemporaryStore(List<Path> spillPaths, double maxUsedSpaceThreshold)\n+    {\n+        this.spillPaths = ImmutableList.copyOf(requireNonNull(spillPaths));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA4MDIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/TemporaryStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNDozNlrOHneaNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNDozNlrOHneaNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NDc0Mg==", "bodyText": "I don't feel very strong about this, but I would recommend allowing multiple storages, similar as we allow multiple connectors.\nBasically instead of having a single file etc/temporary-store.properties we can have a directory, etc/stores. And under that directory we can have multiple configuration files, e.g.: local.properties, hdfs.properties, ...\nAnd then some particular module can be configured to use a specific storage:\ne.g.: storage-based-spiller-store=local or storage-based-spiller-store=hdfs.\nThat would allow different functionality to use different stores. For example spilling could use local store, when Broadcast join in Presto on spark would use hdfs store.", "url": "https://github.com/prestodb/presto/pull/15335#discussion_r511154742", "createdAt": "2020-10-23T21:04:36Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/TemporaryStoreManager.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spiller;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.storage.TemporaryStore;\n+import com.facebook.presto.spi.storage.TemporaryStoreFactory;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static com.facebook.presto.spiller.LocalTemporaryStore.TEMPORARY_STORE_PATH;\n+import static com.facebook.presto.util.PropertiesUtil.loadProperties;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TemporaryStoreManager\n+{\n+    private static final Logger log = Logger.get(TemporaryStoreManager.class);\n+    private static final File TEMPORARY_STORE_CONFIGURATION = new File(\"etc/temporary-store.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474a2df079d7e407bb2c4f42c176bda8f781b6a"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}