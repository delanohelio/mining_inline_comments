{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMzczNzI3", "number": 15549, "title": "Fix SliceDirectSelectiveStreamReader for dataLength is 0", "bodyText": "For batch read mode, when dataLength is 0 and offsets array was not\nreset, the offsets array for previous batch would be used to create\nthe output Block. This causes IndexOutOfBoundsException for downstream\noperators. This fix initializes the offsets array to 0 for the batch\nread mode.\n== NO RELEASE NOTE ==", "createdAt": "2020-12-21T09:56:19Z", "url": "https://github.com/prestodb/presto/pull/15549", "merged": true, "mergeCommit": {"oid": "ab78e27d92221a616133027ef88b3385948ec8b3"}, "closed": true, "closedAt": "2021-01-04T22:19:02Z", "author": {"login": "yingsu00"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoTvIegBqjQxMzU0NDM3MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds3m8SgFqTU2MTA5NDAxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e104dde3516dd3abf947aade2baf5b410c38401", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/2e104dde3516dd3abf947aade2baf5b410c38401", "committedDate": "2020-12-21T09:52:54Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "df27d2a55ce9dd73344ad0ade9aa57ee7742de6b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/df27d2a55ce9dd73344ad0ade9aa57ee7742de6b", "committedDate": "2020-12-21T10:53:36Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df27d2a55ce9dd73344ad0ade9aa57ee7742de6b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/df27d2a55ce9dd73344ad0ade9aa57ee7742de6b", "committedDate": "2020-12-21T10:53:36Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "17df06bbc8123c6959df88f6e616e3bad222412c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/17df06bbc8123c6959df88f6e616e3bad222412c", "committedDate": "2020-12-22T04:14:01Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTQyODgx", "url": "https://github.com/prestodb/presto/pull/15549#pullrequestreview-557142881", "createdAt": "2020-12-22T15:01:23Z", "commit": {"oid": "676c3a5891b5cd640b971e22bd70fcfa84ec5319"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMToyM1rOIJ-IoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMToyM1rOIJ-IoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNjExMg==", "bodyText": "I noticed that useBatchMode method has a lot of commented out code. Please, remove.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r547326112", "createdAt": "2020-12-22T15:01:23Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -688,13 +688,13 @@ else if (isNotNull) {\n             }\n             dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n-            offsets = ensureCapacity(offsets, totalPositions + 1);\n+            offsets = ensureCapacity(offsets, totalPositions + 1, SMALL, INITIALIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676c3a5891b5cd640b971e22bd70fcfa84ec5319"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTQ0MDQ3", "url": "https://github.com/prestodb/presto/pull/15549#pullrequestreview-557144047", "createdAt": "2020-12-22T15:02:55Z", "commit": {"oid": "17df06bbc8123c6959df88f6e616e3bad222412c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17df06bbc8123c6959df88f6e616e3bad222412c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/17df06bbc8123c6959df88f6e616e3bad222412c", "committedDate": "2020-12-22T04:14:01Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "825779e8f43249670e31ca892f530d7a0a2b090b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/825779e8f43249670e31ca892f530d7a0a2b090b", "committedDate": "2020-12-23T06:17:27Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3OTYyMjQw", "url": "https://github.com/prestodb/presto/pull/15549#pullrequestreview-557962240", "createdAt": "2020-12-23T15:23:09Z", "commit": {"oid": "098de5bef96a82e26b22d014244982d988b7358e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyMzoxMFrOIKn6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyODoyMlrOIKoD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMDUwMA==", "bodyText": "This variable seems unnecessary. Why not just combine the two loops?", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548010500", "createdAt": "2020-12-23T15:23:10Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "diffHunk": "@@ -935,6 +928,19 @@ public static void assertFileContentsPresto(\n         assertEquals(rowsProcessed, expectedValues.get(0).size());\n     }\n \n+    static void assertBlockEquals(Type type, Block block, List<?> expectedValues, int offset)\n+    {\n+        int positionCount = block.getPositionCount();\n+        List<Object> data = new ArrayList<>(positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "098de5bef96a82e26b22d014244982d988b7358e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTM1Mg==", "bodyText": "shouldn't resetDataStream be called on dictionaryReader as well? or on currentReader?", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548011352", "createdAt": "2020-12-23T15:24:53Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceSelectiveStreamReader.java", "diffHunk": "@@ -151,4 +152,10 @@ public static int computeTruncatedLength(Slice slice, int offset, int length, in\n         }\n         return length;\n     }\n+\n+    @VisibleForTesting\n+    public void resetDataStream()\n+    {\n+        ((SliceDirectSelectiveStreamReader) directReader).resetDataStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMjYwNg==", "bodyText": "Is this test specific to DWRF encoding? If not, perhaps, run it on all supported encodings.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548012606", "createdAt": "2020-12-23T15:27:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders\n+{\n+    /**\n+     * This test tests SliceDirectSelectiveStreamReader for the case where all elements to read are empty strings. The output Block should be a valid VariableWidthBlock with an\n+     * empty Slice. It is to simulate a problem seen in production. The state of SliceDirectSelectiveStreamReader to reproduce the problem is:\n+     * - dataStream: null\n+     * - presentStream: null\n+     * - lengthStream: not null\n+     * - filter: null\n+     * - outputRequired: true\n+     * - offsets array: non zeros\n+     * The test issues two reads, the first one reads a non-empty string and populates non-zero offsets. The second one reads the empty string with the above conditions met.\n+     */\n+    @Test\n+    public void testEmptySlice()\n+            throws Exception\n+    {\n+        Type type = VARCHAR;\n+        List<Type> types = ImmutableList.of(type);\n+        List<List<?>> values = ImmutableList.of(ImmutableList.of(\"a\", \"\"));\n+\n+        TempFile tempFile = new TempFile();\n+        writeOrcColumnsPresto(tempFile.getFile(), DWRF, CompressionKind.NONE, Optional.empty(), types, values, new OrcWriterStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMjY5Nw==", "bodyText": "nit: perhaps, testAllEmptyStrings", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548012697", "createdAt": "2020-12-23T15:27:40Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders\n+{\n+    /**\n+     * This test tests SliceDirectSelectiveStreamReader for the case where all elements to read are empty strings. The output Block should be a valid VariableWidthBlock with an\n+     * empty Slice. It is to simulate a problem seen in production. The state of SliceDirectSelectiveStreamReader to reproduce the problem is:\n+     * - dataStream: null\n+     * - presentStream: null\n+     * - lengthStream: not null\n+     * - filter: null\n+     * - outputRequired: true\n+     * - offsets array: non zeros\n+     * The test issues two reads, the first one reads a non-empty string and populates non-zero offsets. The second one reads the empty string with the above conditions met.\n+     */\n+    @Test\n+    public void testEmptySlice()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzAyMA==", "bodyText": "This name is very generic, but the test itself applies only to SliceDirectSelectiveStreamReader. Perhaps, rename to TestSliceDirectSelectiveStreamReader.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548013020", "createdAt": "2020-12-23T15:28:22Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "825779e8f43249670e31ca892f530d7a0a2b090b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/825779e8f43249670e31ca892f530d7a0a2b090b", "committedDate": "2020-12-23T06:17:27Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da", "committedDate": "2020-12-23T23:03:38Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjg1NTQy", "url": "https://github.com/prestodb/presto/pull/15549#pullrequestreview-558285542", "createdAt": "2020-12-24T00:40:48Z", "commit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo0MDo0OFrOIK7kwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo0MDo0OFrOIK7kwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMjczNw==", "bodyText": "this variable is not used; remove", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548332737", "createdAt": "2020-12-24T00:40:48Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "diffHunk": "@@ -935,6 +928,15 @@ public static void assertFileContentsPresto(\n         assertEquals(rowsProcessed, expectedValues.get(0).size());\n     }\n \n+    static void assertBlockEquals(Type type, Block block, List<?> expectedValues, int offset)\n+    {\n+        int positionCount = block.getPositionCount();\n+        List<Object> data = new ArrayList<>(positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da", "committedDate": "2020-12-23T23:03:38Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "1ef409330cf7001370ac43719c0197b9c9db6798", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1ef409330cf7001370ac43719c0197b9c9db6798", "committedDate": "2020-12-24T02:55:35Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1acf46992fb7e785d1cd58cd5766a4342096423", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/b1acf46992fb7e785d1cd58cd5766a4342096423", "committedDate": "2021-01-02T05:14:37Z", "message": "Extract assertBlockEquals() in OrcTester"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b5e316cd3d94b993dad0d3cd4f2322c6a479dc", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/85b5e316cd3d94b993dad0d3cd4f2322c6a479dc", "committedDate": "2021-01-02T05:14:37Z", "message": "Fix SliceDirectSelectiveStreamReader for dataLength is 0\n\nFor batch read mode, when dataLength is 0 and offsets array was not\nreset, the offsets array for previous batch would be used to create\nthe output Block. This causes IndexOutOfBoundsException for downstream\noperators. This fix initializes the offsets array to 0 for the batch\nread mode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e6995a4f9eb6724409a5432ef8cec70512e14ad", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1e6995a4f9eb6724409a5432ef8cec70512e14ad", "committedDate": "2021-01-02T05:14:37Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ef409330cf7001370ac43719c0197b9c9db6798", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1ef409330cf7001370ac43719c0197b9c9db6798", "committedDate": "2020-12-24T02:55:35Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}, "afterCommit": {"oid": "1e6995a4f9eb6724409a5432ef8cec70512e14ad", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1e6995a4f9eb6724409a5432ef8cec70512e14ad", "committedDate": "2021-01-02T05:14:37Z", "message": "Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\n\nuseBatchMode() in SliceDirectSelectiveStreamReader was mistakenly\ncommented out and was set to true all the time. This commit fixes this\nproblem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f76b7c8a2054d4e1a5e982bfe90450a403038cd", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/2f76b7c8a2054d4e1a5e982bfe90450a403038cd", "committedDate": "2021-01-03T06:12:11Z", "message": "Fix testSubfieldValue in OrcTester\n\nWhen filtering the expected rows for ARRAY type, null rows would be\nmistakenly filtered out when the filter is not null but nullAllowed\nis true. This commit fixes this problem by calling filter.testNull()."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6e41f03172d714ebd2e622b9edb7f606a54895f", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/a6e41f03172d714ebd2e622b9edb7f606a54895f", "committedDate": "2021-01-03T02:59:53Z", "message": "Fix array of varchar"}, "afterCommit": {"oid": "d0a12f734914d7201f2df0ba48bd8daa00d2d279", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d0a12f734914d7201f2df0ba48bd8daa00d2d279", "committedDate": "2021-01-03T06:12:18Z", "message": "Fix SliceDirectSelectiveStreamReader for ARRAY of VARCHAR\n\nFor the batch read mode, the testNull should be called on all qulifying\nrows instead of just being called once because the filter is\nPositionalFilter and the filter's internal state needs to be updated.\nThis commit fixes this problem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c373115eed737e0f7a7a6bc8139600124c7c094c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/c373115eed737e0f7a7a6bc8139600124c7c094c", "committedDate": "2021-01-04T01:21:24Z", "message": "Fix SliceDirectSelectiveStreamReader for ARRAY of VARCHAR\n\nFor the batch read mode, the testNull should be called on all qulifying\nrows instead of just being called once because the filter is\nPositionalFilter and the filter's internal state needs to be updated.\nThis commit fixes this problem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0a12f734914d7201f2df0ba48bd8daa00d2d279", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d0a12f734914d7201f2df0ba48bd8daa00d2d279", "committedDate": "2021-01-03T06:12:18Z", "message": "Fix SliceDirectSelectiveStreamReader for ARRAY of VARCHAR\n\nFor the batch read mode, the testNull should be called on all qulifying\nrows instead of just being called once because the filter is\nPositionalFilter and the filter's internal state needs to be updated.\nThis commit fixes this problem."}, "afterCommit": {"oid": "c373115eed737e0f7a7a6bc8139600124c7c094c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/c373115eed737e0f7a7a6bc8139600124c7c094c", "committedDate": "2021-01-04T01:21:24Z", "message": "Fix SliceDirectSelectiveStreamReader for ARRAY of VARCHAR\n\nFor the batch read mode, the testNull should be called on all qulifying\nrows instead of just being called once because the filter is\nPositionalFilter and the filter's internal state needs to be updated.\nThis commit fixes this problem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMDk0MDE2", "url": "https://github.com/prestodb/presto/pull/15549#pullrequestreview-561094016", "createdAt": "2021-01-04T14:57:13Z", "commit": {"oid": "c373115eed737e0f7a7a6bc8139600124c7c094c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}