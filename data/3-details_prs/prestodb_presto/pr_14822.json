{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTc0Mjc0", "number": 14822, "title": "Support return type coercion in CREATE FUNCTION", "bodyText": "Currently, within CREATE FUNCTION syntax, we currently restrict that the return type declared by the RETURNS clause must exactly match the expression type in the body. The change here will be relaxing that restrictions.\n=== RELEASE NOTES ===\n\nGeneral Change\n* Add support to create functions whose function body type is coercible to the declared return type.", "createdAt": "2020-07-10T01:37:00Z", "url": "https://github.com/prestodb/presto/pull/14822", "merged": true, "mergeCommit": {"oid": "3cf806989cab06f269cfcb4a2a7ac7335252cd3f"}, "closed": true, "closedAt": "2020-07-15T18:28:54Z", "author": {"login": "jetsasank"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczrBGEAFqTQ0NjcyNDUxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc09fWqAH2gAyNDQ3MTc0Mjc0OjQ5OWM2ZWZkNGE5MGZkMGY5YjdlYTYyZTU4NjQyYjIwZWRhMmZlYmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzI0NTEx", "url": "https://github.com/prestodb/presto/pull/14822#pullrequestreview-446724511", "createdAt": "2020-07-10T22:02:12Z", "commit": {"oid": "b7f2926e498aaf995bc308246590258b4688ded9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMzoxMVrOGwG4mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMzoxMVrOGwG4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NzYyNw==", "bodyText": "As we discussed offline. We want to test that those functions can not only be created, but also be executed. Please add test cases that invokes this created function.", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r453097627", "createdAt": "2020-07-10T22:03:11Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -86,9 +86,7 @@ public void testCreateFunctionInvalidFunctionName()\n     @Test\n     public void testCreateFunctionInvalidSemantics()\n     {\n-        assertQueryFails(\n-                \"CREATE FUNCTION testing.common.tan (x int) RETURNS varchar COMMENT 'tangent trigonometric function' RETURN sin(x) / cos(x)\",\n-                \"Function implementation type 'double' does not match declared return type 'varchar'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.common.tan (x int) RETURNS varchar COMMENT 'tangent trigonometric function' RETURN sin(x) / cos(x)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f2926e498aaf995bc308246590258b4688ded9"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzYzMjU1", "url": "https://github.com/prestodb/presto/pull/14822#pullrequestreview-448363255", "createdAt": "2020-07-14T18:33:25Z", "commit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMzoyNVrOGxgPrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0MzowN1rOGxglDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTcxMQ==", "bodyText": "nit: Let use lower-underscore format for function names (as a convention) in the test. e.g. testing.test.return_double. Same and below.", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454561711", "createdAt": "2020-07-14T18:33:25Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.\\\"returnDouble\\\" ()\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzM0OA==", "bodyText": "Let's place those test cases into a test separate method.\n@Test\npublic void testCreateFunctionWithCoercion() {\n    ...\n}", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454563348", "createdAt": "2020-07-14T18:36:21Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDA1Mw==", "bodyText": "This is a case where we're testing that cast is not added. Let's move it to the bottom and add a comment\n// no explicit cast added", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454564053", "createdAt": "2020-07-14T18:37:36Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.\\\"returnDouble\\\" ()\\n\" +\n+                \"RETURNS DOUBLE\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST(1 AS double)\";\n+\n+        MaterializedResult rows = computeActual(\"SHOW CREATE FUNCTION testing.test.returnDouble()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnDoubleFormatted, \"\"));\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnInt() RETURNS INTEGER RETURN 1\");\n+        String createFunctionReturnIntFormatted = \"CREATE FUNCTION testing.test.\\\"returnInt\\\" ()\\n\" +\n+                \"RETURNS INTEGER\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN 1\";\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.test.returnInt()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnIntFormatted, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NTEyNQ==", "bodyText": "Let's also add some assertion to this case trying to run this function\ncomputeActual(\"SELECT testing.test.return_double() + 1\")\nassert ...", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454565125", "createdAt": "2020-07-14T18:39:33Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.\\\"returnDouble\\\" ()\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTcxMQ=="}, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NjMyOQ==", "bodyText": "nit: ... since we have verified that the actual type of the body is coercible to declared return type.", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454566329", "createdAt": "2020-07-14T18:41:36Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -95,6 +98,17 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .build();\n         String body = formatSql(statement.getBody(), Optional.empty());\n \n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NzE4Mw==", "bodyText": "String body;\nif () {\n    body = ...\n}\nelse {\n    body = ...\n}\nSo that you don't need to do any extra format when body is a Return.", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454567183", "createdAt": "2020-07-14T18:43:07Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -95,6 +98,17 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .build();\n         String body = formatSql(statement.getBody(), Optional.empty());\n \n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8dc562f386707188baf24294a4a1b4b2da59f4"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Mzg2NjQ3", "url": "https://github.com/prestodb/presto/pull/14822#pullrequestreview-448386647", "createdAt": "2020-07-14T19:07:16Z", "commit": {"oid": "245ba41960e4cef0ab3c9fa6e579f1acc9a1e467"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxOTowNzoxNlrOGxhZcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxOToxMDoxOVrOGxhgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDU5NQ==", "bodyText": "Similar to what we're doing with the previous test case, let's also verify the execution of the function. e.g\ne.g.\ncomputeActual(\"SELECT lower(testing.test.return_varchar())\", ...", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454580595", "createdAt": "2020-07-14T19:07:16Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -114,6 +114,50 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n     }\n \n+    @Test\n+    public void testCreateFunctionWithCoercion()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.return_double() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.return_double ()\\n\" +\n+                \"RETURNS DOUBLE\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST(1 AS double)\";\n+\n+        MaterializedResult rows = computeActual(\"SHOW CREATE FUNCTION testing.test.return_double()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnDoubleFormatted, \"\"));\n+\n+        rows = computeActual(\"SELECT testing.test.return_double() + 1\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields().get(0), 2.0);\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.return_varchar() RETURNS VARCHAR RETURN 'ABC'\");\n+        String createFunctionReturnVarcharFormatted = \"CREATE FUNCTION testing.test.return_varchar ()\\n\" +\n+                \"RETURNS varchar\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST('ABC' AS varchar)\";\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.test.return_varchar()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnVarcharFormatted, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "245ba41960e4cef0ab3c9fa6e579f1acc9a1e467"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MjMyNA==", "bodyText": "Sorry, I didn't meant to introduce those duplicate lines. How about:\nRoutineBody body = statement.getBody();\nif (...) {\n    // update body in some cases\n}\n\nreturn new SqlInvokedFunction(\n    ...\n    formatSql(...)\n    ...\n);", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454582324", "createdAt": "2020-07-14T19:10:19Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -93,7 +96,26 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .setDeterminism(RoutineCharacteristics.Determinism.valueOf(statement.getCharacteristics().getDeterminism().name()))\n                 .setNullCallClause(RoutineCharacteristics.NullCallClause.valueOf(statement.getCharacteristics().getNullCallClause().name()))\n                 .build();\n-        String body = formatSql(statement.getBody(), Optional.empty());\n+        String body;\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+            else\n+            {\n+                body = formatSql(statement.getBody(), Optional.empty());\n+            }\n+        }\n+        else\n+        {\n+            body = formatSql(statement.getBody(), Optional.empty());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "245ba41960e4cef0ab3c9fa6e579f1acc9a1e467"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDY0ODQy", "url": "https://github.com/prestodb/presto/pull/14822#pullrequestreview-448464842", "createdAt": "2020-07-14T21:03:56Z", "commit": {"oid": "c98b7266b468ae8569ae7c1638e7d2c59904e573"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTowMzo1NlrOGxlREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTowMzo1NlrOGxlREg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0Mzk4Ng==", "bodyText": "Inline line 108 and line 109.\nbody = new Return(new Cast(...));", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454643986", "createdAt": "2020-07-14T21:03:56Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -105,14 +106,8 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n             if (!bodyType.equals(metadata.getType(returnType))) {\n                 // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n                 Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n-                body = formatSql(new Return(castExpression), Optional.empty());\n+                body = new Return(castExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b7266b468ae8569ae7c1638e7d2c59904e573"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDk5Mjk5", "url": "https://github.com/prestodb/presto/pull/14822#pullrequestreview-448499299", "createdAt": "2020-07-14T22:05:17Z", "commit": {"oid": "e5b5dcec97531a35b90d80ffdba009ef33fe3f67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowNToxN1rOGxnBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowNToxN1rOGxnBuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MjgyNQ==", "bodyText": "Somehow you introduced duplicated code blocks. I guess that's during the squash?", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454672825", "createdAt": "2020-07-14T22:05:17Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -93,15 +97,36 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .setDeterminism(RoutineCharacteristics.Determinism.valueOf(statement.getCharacteristics().getDeterminism().name()))\n                 .setNullCallClause(RoutineCharacteristics.NullCallClause.valueOf(statement.getCharacteristics().getNullCallClause().name()))\n                 .build();\n-        String body = formatSql(statement.getBody(), Optional.empty());\n+        RoutineBody body = statement.getBody();\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n+                body = new Return(new Cast(bodyExpression, statement.getReturnType()));\n+            }\n+        }\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b5dcec97531a35b90d80ffdba009ef33fe3f67"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499c6efd4a90fd0f9b7ea62e58642b20eda2febf", "author": {"user": {"login": "jetsasank", "name": "Teja Sasank"}}, "url": "https://github.com/prestodb/presto/commit/499c6efd4a90fd0f9b7ea62e58642b20eda2febf", "committedDate": "2020-07-14T22:08:36Z", "message": "Support return type coercion in CREATE FUNCTION"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1239, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}