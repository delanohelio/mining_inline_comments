{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NDEzMzI0", "number": 15383, "title": "Make encryption key explicit when reading DWRF stripes", "bodyText": "DWRF StripeInformation only contains keymetadata if the keymetadata for\nthis stripe would be different from the previous stripe.  However, when\nwe read stripes in the record reader, we exclude stripes that are not\npart of the split, so we may not have info about what the keys were in\nthe previous stripe.  Therefore, we explicitly set the implied key\ninformation.\nTest plan - Added unit test and verified with failing production query for table written by another system that now succeeds.\n== RELEASE NOTES ==\n\nHive Changes\n* Fix a bug with reading encrypted DWRF tables where queries could fail with a NullPointerException", "createdAt": "2020-11-03T00:36:49Z", "url": "https://github.com/prestodb/presto/pull/15383", "merged": true, "mergeCommit": {"oid": "c67b9f6916595c1e58fbaf1756451752e6f9bbd8"}, "closed": true, "closedAt": "2020-11-04T18:08:58Z", "author": {"login": "rschlussel"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYvhfOABqjM5NTA4NDYwNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZPJnKgFqTUyMzQ0ODM0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05a4abef2aa90ccef5fcfed56aa0926a34bd38dd", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/05a4abef2aa90ccef5fcfed56aa0926a34bd38dd", "committedDate": "2020-11-03T00:30:48Z", "message": "Cleanup unused variables in OrcReader"}, "afterCommit": {"oid": "4a879c2323ac227e1900995f0653f368feeef731", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/4a879c2323ac227e1900995f0653f368feeef731", "committedDate": "2020-11-03T02:13:07Z", "message": "Cleanup unused variables in OrcReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b167f7aae3b21aeebac62d0bbe533449fb0a09", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/45b167f7aae3b21aeebac62d0bbe533449fb0a09", "committedDate": "2020-11-03T23:32:00Z", "message": "Cleanup unused variables in OrcReader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a879c2323ac227e1900995f0653f368feeef731", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/4a879c2323ac227e1900995f0653f368feeef731", "committedDate": "2020-11-03T02:13:07Z", "message": "Cleanup unused variables in OrcReader"}, "afterCommit": {"oid": "239978562be053390511400bc5de7485217308a9", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/239978562be053390511400bc5de7485217308a9", "committedDate": "2020-11-03T23:35:22Z", "message": "Make encryption key explicit when reading DWRF stripes\n\nDWRF StripeInformation only contains keymetadata if the keymetadata for\nthis stripe would be different from the previous stripe.  However, when\nwe read stripes in the record reader, we exclude stripes that are not\npart of the split, so we may not have info about what the keys were in\nthe previous stripe.  Therefore, we explicitly set the implied key\ninformation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTk0OTUw", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-522994950", "createdAt": "2020-11-04T01:58:28Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1ODoyOFrOHtGmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1ODoyOFrOHtGmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjE2Nw==", "bodyText": "What does iek1 mean here?", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517056167", "createdAt": "2020-11-04T01:58:28Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestDecryption.java", "diffHunk": "@@ -458,6 +467,65 @@ public void testEncryptionMultipleColumns()\n                 outputColumns);\n     }\n \n+    @Test\n+    public void testSkipFirstStripe()\n+            throws Exception\n+    {\n+        OrcDataSource orcDataSource = new FileOrcDataSource(\n+                new File(getResource(\"encrypted_2splits.dwrf\").getFile()),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                true);\n+        Slice iek1 = Slices.utf8Slice(\"key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTk3MDQx", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-522997041", "createdAt": "2020-11-04T02:05:19Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowNToxOVrOHtGteQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowNToxOVrOHtGteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NzkxMw==", "bodyText": "Could you please explain why we needed this change?", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517057913", "createdAt": "2020-11-04T02:05:19Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TestingEncryptionLibrary.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Override\n     public byte[] encryptKey(byte[] keyMetadata, byte[] input, int offset, int length)\n     {\n-        return encrypt(keyMetadata, input, offset, length);\n+        return keyMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTk4MjIw", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-522998220", "createdAt": "2020-11-04T02:09:37Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowOTozN1rOHtGxfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowOTozN1rOHtGxfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1ODk0MQ==", "bodyText": "nit: maybe stripeInformationList?  stripeInformations doesn't sound right.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517058941", "createdAt": "2020-11-04T02:09:37Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -248,22 +248,33 @@ private static KeyProvider toKeyProvider(DwrfProto.Encryption.KeyProvider keyPro\n         }\n     }\n \n-    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> types)\n-    {\n-        return ImmutableList.copyOf(Iterables.transform(types, DwrfMetadataReader::toStripeInformation));\n+    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> stripeInformations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTk4OTA5", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-522998909", "createdAt": "2020-11-04T02:12:03Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjoxMjowNFrOHtGz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjoxMjowNFrOHtGz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1OTU0NA==", "bodyText": "For the first stripe, previousKeyMetadata will be empty. Could we hit some edge case there?", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517059544", "createdAt": "2020-11-04T02:12:04Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -248,22 +248,33 @@ private static KeyProvider toKeyProvider(DwrfProto.Encryption.KeyProvider keyPro\n         }\n     }\n \n-    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> types)\n-    {\n-        return ImmutableList.copyOf(Iterables.transform(types, DwrfMetadataReader::toStripeInformation));\n+    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> stripeInformations)\n+    {\n+        ImmutableList.Builder<StripeInformation> stripeInfoBuilder = ImmutableList.builder();\n+        List<byte[]> previousKeysMetadata = ImmutableList.of();\n+        for (DwrfProto.StripeInformation dwrfStripeInfo : stripeInformations) {\n+            StripeInformation prestoStripeInfo = toStripeInformation(dwrfStripeInfo, previousKeysMetadata);\n+            stripeInfoBuilder.add(prestoStripeInfo);\n+            previousKeysMetadata = prestoStripeInfo.getKeyMetadata();\n+        }\n+        return stripeInfoBuilder.build();\n     }\n \n-    private static StripeInformation toStripeInformation(DwrfProto.StripeInformation stripeInformation)\n+    private static StripeInformation toStripeInformation(DwrfProto.StripeInformation stripeInformation, List<byte[]> previousKeyMetadata)\n     {\n+        List<byte[]> keyMetadata = stripeInformation.getKeyMetadataList().stream()\n+                .map(ByteString::toByteArray)\n+                .collect(toImmutableList());\n+        if (keyMetadata.size() == 0) {\n+            keyMetadata = previousKeyMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTk5Njgx", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-522999681", "createdAt": "2020-11-04T02:14:33Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjoxNDozNFrOHtG2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjoxNDozNFrOHtG2YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2MDE5Mg==", "bodyText": "nits: maybe currentStripeInfo instead of prestoStripeInfo and previousKeyMetadata instead of previousKeysMetadata", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517060192", "createdAt": "2020-11-04T02:14:34Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -248,22 +248,33 @@ private static KeyProvider toKeyProvider(DwrfProto.Encryption.KeyProvider keyPro\n         }\n     }\n \n-    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> types)\n-    {\n-        return ImmutableList.copyOf(Iterables.transform(types, DwrfMetadataReader::toStripeInformation));\n+    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> stripeInformations)\n+    {\n+        ImmutableList.Builder<StripeInformation> stripeInfoBuilder = ImmutableList.builder();\n+        List<byte[]> previousKeysMetadata = ImmutableList.of();\n+        for (DwrfProto.StripeInformation dwrfStripeInfo : stripeInformations) {\n+            StripeInformation prestoStripeInfo = toStripeInformation(dwrfStripeInfo, previousKeysMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDIzNTAx", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-523023501", "createdAt": "2020-11-04T03:38:16Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzozODoxNlrOHtIFTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzozODoxNlrOHtIFTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4MDM5OA==", "bodyText": "Move this private function to be after all public tests.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517080398", "createdAt": "2020-11-04T03:38:16Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestDecryption.java", "diffHunk": "@@ -458,6 +467,65 @@ public void testEncryptionMultipleColumns()\n                 outputColumns);\n     }\n \n+    @Test\n+    public void testSkipFirstStripe()\n+            throws Exception\n+    {\n+        OrcDataSource orcDataSource = new FileOrcDataSource(\n+                new File(getResource(\"encrypted_2splits.dwrf\").getFile()),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                true);\n+        Slice iek1 = Slices.utf8Slice(\"key\");\n+        OrcReader orcReader = new OrcReader(\n+                orcDataSource,\n+                DWRF,\n+                new StorageOrcFileTailSource(),\n+                new StorageStripeMetadataSource(),\n+                NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n+                new OrcReaderOptions(\n+                        new DataSize(1, MEGABYTE),\n+                        new DataSize(1, MEGABYTE),\n+                        MAX_BLOCK_SIZE,\n+                        false,\n+                        false,\n+                        false),\n+                false,\n+                new DwrfEncryptionProvider(new UnsupportedEncryptionLibrary(), new TestingEncryptionLibrary()),\n+                DwrfKeyProvider.of(ImmutableMap.of(0, iek1)));\n+\n+        int offset = 10;\n+        try (OrcSelectiveRecordReader recordReader = getSelectiveRecordReader(orcDataSource, orcReader, offset)) {\n+            assertFileContentsPresto(\n+                    ImmutableList.of(BIGINT),\n+                    recordReader,\n+                    ImmutableList.of(ImmutableList.of(1L)),\n+                    ImmutableList.of(0));\n+        }\n+    }\n+\n+    private OrcSelectiveRecordReader getSelectiveRecordReader(OrcDataSource orcDataSource, OrcReader orcReader, int offset)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60264c8f9981da46ba4b6da6ab0abc75e25b100", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/c60264c8f9981da46ba4b6da6ab0abc75e25b100", "committedDate": "2020-11-04T14:49:42Z", "message": "Make encryption key explicit when reading DWRF stripes\n\nDWRF StripeInformation only contains keymetadata if the keymetadata for\nthis stripe would be different from the previous stripe.  However, when\nwe read stripes in the record reader, we exclude stripes that are not\npart of the split, so we may not have info about what the keys were in\nthe previous stripe.  Therefore, we explicitly set the implied key\ninformation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "239978562be053390511400bc5de7485217308a9", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/239978562be053390511400bc5de7485217308a9", "committedDate": "2020-11-03T23:35:22Z", "message": "Make encryption key explicit when reading DWRF stripes\n\nDWRF StripeInformation only contains keymetadata if the keymetadata for\nthis stripe would be different from the previous stripe.  However, when\nwe read stripes in the record reader, we exclude stripes that are not\npart of the split, so we may not have info about what the keys were in\nthe previous stripe.  Therefore, we explicitly set the implied key\ninformation."}, "afterCommit": {"oid": "c60264c8f9981da46ba4b6da6ab0abc75e25b100", "author": {"user": {"login": "rschlussel", "name": "Rebecca Schlussel"}}, "url": "https://github.com/prestodb/presto/commit/c60264c8f9981da46ba4b6da6ab0abc75e25b100", "committedDate": "2020-11-04T14:49:42Z", "message": "Make encryption key explicit when reading DWRF stripes\n\nDWRF StripeInformation only contains keymetadata if the keymetadata for\nthis stripe would be different from the previous stripe.  However, when\nwe read stripes in the record reader, we exclude stripes that are not\npart of the split, so we may not have info about what the keys were in\nthe previous stripe.  Therefore, we explicitly set the implied key\ninformation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDIxMTA0", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-523421104", "createdAt": "2020-11-04T14:37:13Z", "commit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDozNzoxM1rOHta9Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0NTo0OFrOHtbV8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4OTU3MQ==", "bodyText": "That's fair. I changed it because I figured the loss in test coverage would be minimal, so why have 2 classes, but I think it is still some loss in coverage, so it makes sense to keep it as it was and introduce a new class.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517389571", "createdAt": "2020-11-04T14:37:13Z", "author": {"login": "rschlussel"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TestingEncryptionLibrary.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Override\n     public byte[] encryptKey(byte[] keyMetadata, byte[] input, int offset, int length)\n     {\n-        return encrypt(keyMetadata, input, offset, length);\n+        return keyMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NzkxMw=="}, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MTYzMA==", "bodyText": "for currentStripeInfo vs. prestoStripeInfo, I was trying to capture that we were converting from DwrfProto.StripeInformation object to Presto's stripeInformation logic, so I'll leave that name as is.  Changed previousKeyMetadata though.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517391630", "createdAt": "2020-11-04T14:39:57Z", "author": {"login": "rschlussel"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -248,22 +248,33 @@ private static KeyProvider toKeyProvider(DwrfProto.Encryption.KeyProvider keyPro\n         }\n     }\n \n-    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> types)\n-    {\n-        return ImmutableList.copyOf(Iterables.transform(types, DwrfMetadataReader::toStripeInformation));\n+    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> stripeInformations)\n+    {\n+        ImmutableList.Builder<StripeInformation> stripeInfoBuilder = ImmutableList.builder();\n+        List<byte[]> previousKeysMetadata = ImmutableList.of();\n+        for (DwrfProto.StripeInformation dwrfStripeInfo : stripeInformations) {\n+            StripeInformation prestoStripeInfo = toStripeInformation(dwrfStripeInfo, previousKeysMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2MDE5Mg=="}, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5NDI0Nw==", "bodyText": "For that case, if keyMetadata is empty, then keyMetadata and previousKeyMetadata are the same (both an empty list), so it doesn't really matter which one we use.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517394247", "createdAt": "2020-11-04T14:43:31Z", "author": {"login": "rschlussel"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -248,22 +248,33 @@ private static KeyProvider toKeyProvider(DwrfProto.Encryption.KeyProvider keyPro\n         }\n     }\n \n-    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> types)\n-    {\n-        return ImmutableList.copyOf(Iterables.transform(types, DwrfMetadataReader::toStripeInformation));\n+    private static List<StripeInformation> toStripeInformation(List<DwrfProto.StripeInformation> stripeInformations)\n+    {\n+        ImmutableList.Builder<StripeInformation> stripeInfoBuilder = ImmutableList.builder();\n+        List<byte[]> previousKeysMetadata = ImmutableList.of();\n+        for (DwrfProto.StripeInformation dwrfStripeInfo : stripeInformations) {\n+            StripeInformation prestoStripeInfo = toStripeInformation(dwrfStripeInfo, previousKeysMetadata);\n+            stripeInfoBuilder.add(prestoStripeInfo);\n+            previousKeysMetadata = prestoStripeInfo.getKeyMetadata();\n+        }\n+        return stripeInfoBuilder.build();\n     }\n \n-    private static StripeInformation toStripeInformation(DwrfProto.StripeInformation stripeInformation)\n+    private static StripeInformation toStripeInformation(DwrfProto.StripeInformation stripeInformation, List<byte[]> previousKeyMetadata)\n     {\n+        List<byte[]> keyMetadata = stripeInformation.getKeyMetadataList().stream()\n+                .map(ByteString::toByteArray)\n+                .collect(toImmutableList());\n+        if (keyMetadata.size() == 0) {\n+            keyMetadata = previousKeyMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1OTU0NA=="}, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5NTk1NQ==", "bodyText": "intermediate encryption key.  i'll just inline this, though.", "url": "https://github.com/prestodb/presto/pull/15383#discussion_r517395955", "createdAt": "2020-11-04T14:45:48Z", "author": {"login": "rschlussel"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestDecryption.java", "diffHunk": "@@ -458,6 +467,65 @@ public void testEncryptionMultipleColumns()\n                 outputColumns);\n     }\n \n+    @Test\n+    public void testSkipFirstStripe()\n+            throws Exception\n+    {\n+        OrcDataSource orcDataSource = new FileOrcDataSource(\n+                new File(getResource(\"encrypted_2splits.dwrf\").getFile()),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                new DataSize(1, MEGABYTE),\n+                true);\n+        Slice iek1 = Slices.utf8Slice(\"key\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjE2Nw=="}, "originalCommit": {"oid": "239978562be053390511400bc5de7485217308a9"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDQ4MzQ0", "url": "https://github.com/prestodb/presto/pull/15383#pullrequestreview-523448344", "createdAt": "2020-11-04T15:04:25Z", "commit": {"oid": "c60264c8f9981da46ba4b6da6ab0abc75e25b100"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4657, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}