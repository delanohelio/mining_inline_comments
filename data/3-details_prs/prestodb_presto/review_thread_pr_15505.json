{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTYxNzUw", "number": 15505, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozNzo1MFrOFB_9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjozMzozMVrOFH9FKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQwNzM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozNzo1MFrOIA71lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozNzo1MFrOIA71lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MTI4Nw==", "bodyText": "Not too sure what we think of this way of alerting the TaskThresholdMemoryRevokingScheduler. Not ideal but this is the cleanest way I could think of - other alternatives are passing the listener around somehow instead of piggybacking on MemoryPool. The thing I dont like about this is that MemoryPool now has two sets of disparate listeners and technically this is a task/operator context allocation.", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r537851287", "createdAt": "2020-12-07T21:37:50Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java", "diffHunk": "@@ -287,6 +287,12 @@ private void updatePeakMemoryReservations()\n         peakTotalMemoryReservation.accumulateAndGet(totalMemory, Math::max);\n     }\n \n+    // listen to revocable memory allocations and call any listeners waiting on task memory allocation\n+    private void updateTaskRevocableMemoryReservation()\n+    {\n+        driverContext.getPipelineContext().getTaskContext().getQueryContext().getMemoryPool().onTaskMemoryReserved(driverContext.getTaskId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac08606824504faa963b3594b1fa6bdff677ee4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTEwNTAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNTozMTozM1rOIITspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTozMzozN1rOIOuk2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MjI0NQ==", "bodyText": "Why not just keep SqlTaskManager here directly?", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r545582245", "createdAt": "2020-12-18T05:31:33Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -31,16 +35,19 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n+import static com.facebook.presto.execution.MemoryRevokingScheduler.getMemoryPools;\n import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n public class TaskThresholdMemoryRevokingScheduler\n {\n     private static final Logger log = Logger.get(TaskThresholdMemoryRevokingScheduler.class);\n \n-    private final Supplier<List<SqlTask>> currentTasksSupplier;\n+    private final Supplier<List<SqlTask>> allTasksSupplier;\n+    private final Function<TaskId, SqlTask> taskSupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ddbd50a47c2d617da84b2bb90b5e0685e754e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxMzk1Nw==", "bodyText": "Testing - without parameterizing it, it is difficult to make this part of the code modular and testable.", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r552313957", "createdAt": "2021-01-06T01:33:06Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -31,16 +35,19 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n+import static com.facebook.presto.execution.MemoryRevokingScheduler.getMemoryPools;\n import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n public class TaskThresholdMemoryRevokingScheduler\n {\n     private static final Logger log = Logger.get(TaskThresholdMemoryRevokingScheduler.class);\n \n-    private final Supplier<List<SqlTask>> currentTasksSupplier;\n+    private final Supplier<List<SqlTask>> allTasksSupplier;\n+    private final Function<TaskId, SqlTask> taskSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MjI0NQ=="}, "originalCommit": {"oid": "f1ddbd50a47c2d617da84b2bb90b5e0685e754e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNDA3NQ==", "bodyText": "See @VisibleForTesting constructor for reference", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r552314075", "createdAt": "2021-01-06T01:33:37Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -31,16 +35,19 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n+import static com.facebook.presto.execution.MemoryRevokingScheduler.getMemoryPools;\n import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n public class TaskThresholdMemoryRevokingScheduler\n {\n     private static final Logger log = Logger.get(TaskThresholdMemoryRevokingScheduler.class);\n \n-    private final Supplier<List<SqlTask>> currentTasksSupplier;\n+    private final Supplier<List<SqlTask>> allTasksSupplier;\n+    private final Function<TaskId, SqlTask> taskSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MjI0NQ=="}, "originalCommit": {"oid": "f1ddbd50a47c2d617da84b2bb90b5e0685e754e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODgyMTkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjoyMToxN1rOIJns7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjoyMToxN1rOIJns7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk1ODU3Mg==", "bodyText": "Move this to a new class MemoryRevokingUtils", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r546958572", "createdAt": "2020-12-21T22:21:17Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -111,7 +111,7 @@ private static double checkFraction(double value, String valueName)\n         return value;\n     }\n \n-    private static List<MemoryPool> getMemoryPools(LocalMemoryManager localMemoryManager)\n+    public static List<MemoryPool> getMemoryPools(LocalMemoryManager localMemoryManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ddbd50a47c2d617da84b2bb90b5e0685e754e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODg1MDk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/memory/TaskRevocableMemoryListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjozMzozMVrOIJn9cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjozMzozMVrOIJn9cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk2MjgwMQ==", "bodyText": "Let's add this", "url": "https://github.com/prestodb/presto/pull/15505#discussion_r546962801", "createdAt": "2020-12-21T22:33:31Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/TaskRevocableMemoryListener.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.memory;\n+\n+import com.facebook.presto.execution.TaskId;\n+\n+import java.util.function.BiConsumer;\n+\n+public interface TaskRevocableMemoryListener\n+{\n+    //TODO javadoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ddbd50a47c2d617da84b2bb90b5e0685e754e5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3261, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}