{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzA4MDA0", "number": 14204, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo0OToxNFrODk7ayQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozMjoxMFrODr3x1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQ4ODQxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo0OToxNFrOFxhqqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjo0NDozMlrOF75LJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjEzNw==", "bodyText": "use checkArgument", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r387476137", "createdAt": "2020-03-04T06:49:14Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0NzA0Nw==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398347047", "createdAt": "2020-03-26T06:44:32Z", "author": {"login": "beinan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjEzNw=="}, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQ4ODc4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo0OToyOFrOFxhq5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjo0NDo0MFrOF75LTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjE5OA==", "bodyText": "s/f/field/g", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r387476198", "createdAt": "2020-03-04T06:49:28Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        f -> f.getName().get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0NzA4NA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398347084", "createdAt": "2020-03-26T06:44:40Z", "author": {"login": "beinan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        f -> f.getName().get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjE5OA=="}, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQ4OTg1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo1MDowM1rOFxhrhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjo0NjowNFrOF75M1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjM1OQ==", "bodyText": "why use parquetFieldType.getName() + \"_\"?\nif prestoFieldType == null, we should return false?", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r387476359", "createdAt": "2020-03-04T06:50:03Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        f -> f.getName().get(),\n+                                        f -> f.getType()));\n                         for (int i = 0; i < groupType.getFields().size(); i++) {\n-                            if (!checkSchemaMatch(groupType.getFields().get(i), type.getTypeParameters().get(i))) {\n+                            org.apache.parquet.schema.Type parquetFieldType = groupType.getFields().get(i);\n+                            Type prestoFieldType = prestoFieldMap.get(parquetFieldType.getName());\n+                            if (prestoFieldType == null) {\n+                                prestoFieldType = prestoFieldMap.get(parquetFieldType.getName() + \"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0NzQ3OQ==", "bodyText": "Good call, this feature is twitter specific, which shouldn't in this pr", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398347479", "createdAt": "2020-03-26T06:46:04Z", "author": {"login": "beinan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,19 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkState(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        f -> f.getName().get(),\n+                                        f -> f.getType()));\n                         for (int i = 0; i < groupType.getFields().size(); i++) {\n-                            if (!checkSchemaMatch(groupType.getFields().get(i), type.getTypeParameters().get(i))) {\n+                            org.apache.parquet.schema.Type parquetFieldType = groupType.getFields().get(i);\n+                            Type prestoFieldType = prestoFieldMap.get(parquetFieldType.getName());\n+                            if (prestoFieldType == null) {\n+                                prestoFieldType = prestoFieldMap.get(parquetFieldType.getName() + \"_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NjM1OQ=="}, "originalCommit": {"oid": "2e2526cd3ed7fb860e8852c7f599df2b6dffc810"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI3MTMzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMzoxM1rOF8d9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMjo1NlrOGFrIsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTcyNQ==", "bodyText": "do we need to check type here? prestoType is from type, which is ROW. I think we do not need this line", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398949725", "createdAt": "2020-03-26T23:23:13Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,17 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkArgument(type instanceof RowType, \"It must be a RowType here.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjgwMw==", "bodyText": "good call, removed", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r408602803", "createdAt": "2020-04-15T06:12:56Z", "author": {"login": "beinan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,17 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkArgument(type instanceof RowType, \"It must be a RowType here.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTcyNQ=="}, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI3ODY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyNjoyMFrOF8eBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMzowOVrOGFrI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDgwNw==", "bodyText": "test out of order fields in nested Row type", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398950807", "createdAt": "2020-03-26T23:26:20Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjg3MA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r408602870", "createdAt": "2020-04-15T06:13:09Z", "author": {"login": "beinan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDgwNw=="}, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI4NjgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyOTozOVrOF8eF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMzoxNFrOGFrJDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTkyMA==", "bodyText": "test field name case sensitivity in nested Row type", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398951920", "createdAt": "2020-03-26T23:29:39Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter\n+        TestColumn writeColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_int\", \"s_double\"),\n+                                        ImmutableList.of(javaIntObjectInspector, javaDoubleObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(1, 5.0))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE)), rowBlockOf(ImmutableList.of(INTEGER, DOUBLE), 1L, 5.0))));\n+        TestColumn readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_double\", \"s_int\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing field name case insensitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjg5NA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r408602894", "createdAt": "2020-04-15T06:13:14Z", "author": {"login": "beinan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter\n+        TestColumn writeColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_int\", \"s_double\"),\n+                                        ImmutableList.of(javaIntObjectInspector, javaDoubleObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(1, 5.0))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE)), rowBlockOf(ImmutableList.of(INTEGER, DOUBLE), 1L, 5.0))));\n+        TestColumn readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_double\", \"s_int\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing field name case insensitive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTkyMA=="}, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI4ODYxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozMDoyOFrOF8eG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMzoxOVrOGFrJKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MjE4Nw==", "bodyText": "test field name mismatch in nested Row type", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398952187", "createdAt": "2020-03-26T23:30:28Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter\n+        TestColumn writeColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_int\", \"s_double\"),\n+                                        ImmutableList.of(javaIntObjectInspector, javaDoubleObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(1, 5.0))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE)), rowBlockOf(ImmutableList.of(INTEGER, DOUBLE), 1L, 5.0))));\n+        TestColumn readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_double\", \"s_int\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing field name case insensitive.\n+        readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_DOUBLE\", \"s_INT\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing rename a sub-field would cause a failure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjkyMg==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r408602922", "createdAt": "2020-04-15T06:13:19Z", "author": {"login": "beinan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -722,6 +723,90 @@ public void testSchemaMismatch()\n                 .isFailingForPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()), expectedErrorCode, expectedMessageRowLongNest);\n     }\n \n+    @Test\n+    public void testSchemaMismatchOnNestedStruct()\n+            throws Exception\n+    {\n+        //testing fields order does NOT matter\n+        TestColumn writeColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_int\", \"s_double\"),\n+                                        ImmutableList.of(javaIntObjectInspector, javaDoubleObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(1, 5.0))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(INTEGER, DOUBLE)), rowBlockOf(ImmutableList.of(INTEGER, DOUBLE), 1L, 5.0))));\n+        TestColumn readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_double\", \"s_int\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing field name case insensitive.\n+        readColumn = new TestColumn(\"column_name\",\n+                getStandardMapObjectInspector(\n+                        javaStringObjectInspector,\n+                        getStandardListObjectInspector(\n+                                getStandardStructObjectInspector(\n+                                        ImmutableList.of(\"s_DOUBLE\", \"s_INT\"),  //out of order\n+                                        ImmutableList.of(javaDoubleObjectInspector, javaIntObjectInspector)))),\n+                ImmutableMap.of(\"test\", ImmutableList.<Object>of(Arrays.asList(5.0, 1))),\n+                mapBlockOf(createUnboundedVarcharType(), new ArrayType(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER))),\n+                        \"test\", arrayBlockOf(RowType.anonymous(ImmutableList.of(DOUBLE, INTEGER)), rowBlockOf(ImmutableList.of(DOUBLE, INTEGER), 5.0, 1L))));\n+        assertThatFileFormat(PARQUET)\n+                .withWriteColumns(ImmutableList.of(writeColumn))\n+                .withReadColumns(ImmutableList.of(readColumn))\n+                .withRowsCount(1)\n+                .withSession(parquetPageSourceSession)\n+                .isReadableByPageSource(new ParquetPageSourceFactory(TYPE_MANAGER, HDFS_ENVIRONMENT, STATS, new HadoopFileOpener()));\n+\n+        //testing rename a sub-field would cause a failure.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MjE4Nw=="}, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI5MjM4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozMjoxMVrOF8eJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxNDozNFrOGFrK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Mjc1OA==", "bodyText": "do we need to error out when prestoFieldType == null? If parquet file has a field not exist in Presto metastore, it is OK we just leave it there. What do you think?", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r398952758", "createdAt": "2020-03-26T23:32:11Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,17 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkArgument(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        field -> field.getName().get().toLowerCase(Locale.ENGLISH),\n+                                        field -> field.getType()));\n                         for (int i = 0; i < groupType.getFields().size(); i++) {\n-                            if (!checkSchemaMatch(groupType.getFields().get(i), type.getTypeParameters().get(i))) {\n+                            org.apache.parquet.schema.Type parquetFieldType = groupType.getFields().get(i);\n+                            String fieldName = parquetFieldType.getName().toLowerCase(Locale.ENGLISH);\n+                            Type prestoFieldType = prestoFieldMap.get(fieldName);\n+                            if (prestoFieldType == null || !checkSchemaMatch(parquetFieldType, prestoFieldType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzM2MQ==", "bodyText": "change the condition to prestoFieldType != null && !checkSchemaMatch(parquetFieldType, prestoFieldType)", "url": "https://github.com/prestodb/presto/pull/14204#discussion_r408603361", "createdAt": "2020-04-15T06:14:34Z", "author": {"login": "beinan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -322,8 +325,17 @@ private static boolean checkSchemaMatch(org.apache.parquet.schema.Type parquetTy\n             switch (prestoType) {\n                 case ROW:\n                     if (groupType.getFields().size() == type.getTypeParameters().size()) {\n+                        checkArgument(type instanceof RowType, \"It must be a RowType here.\");\n+                        RowType rowType = (RowType) type;\n+                        Map<String, Type> prestoFieldMap = rowType.getFields().stream().collect(\n+                                Collectors.toMap(\n+                                        field -> field.getName().get().toLowerCase(Locale.ENGLISH),\n+                                        field -> field.getType()));\n                         for (int i = 0; i < groupType.getFields().size(); i++) {\n-                            if (!checkSchemaMatch(groupType.getFields().get(i), type.getTypeParameters().get(i))) {\n+                            org.apache.parquet.schema.Type parquetFieldType = groupType.getFields().get(i);\n+                            String fieldName = parquetFieldType.getName().toLowerCase(Locale.ENGLISH);\n+                            Type prestoFieldType = prestoFieldMap.get(fieldName);\n+                            if (prestoFieldType == null || !checkSchemaMatch(parquetFieldType, prestoFieldType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Mjc1OA=="}, "originalCommit": {"oid": "dbb3cb744bb0cbaf064c2ac43003c0cdeec85b43"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2850, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}