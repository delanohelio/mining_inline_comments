{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NjMzMDc1", "number": 15319, "reviewThreads": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDoyNTozMFrOEu3SMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo0MDoyNlrOE0PPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc1NzMxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDoyNTozMFrOHjgwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowMjowNVrOHnojVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5ODk2NQ==", "bodyText": "I am curious why is this cached ? What happens if an instance restarts etc and comes up with a different port ? Or atleast should the cache expiry interval be minimized ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r506998965", "createdAt": "2020-10-18T00:25:30Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -110,6 +116,9 @@ public PinotClusterInfoFetcher(\n         this.brokersForTableCache = CacheBuilder.newBuilder()\n                 .expireAfterWrite(cacheExpiryMs, TimeUnit.MILLISECONDS)\n                 .build((CacheLoader.from(this::getAllBrokersForTable)));\n+        this.instanceConfigCache = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2OTMzMw==", "bodyText": "Pinot instance is in general stateful and won't change (much). Restart won't change instance/port etc. Unless user explicitly want to change that, which is really rare.\nAlso cache will be expired based on the configurable time.\nThis cache is to avoid call to pinot controller per request(This is 1 call per split, which means if we have 100 segments and using 1 split per segment, then every query will issue 100 calls to pinot controller for this information)", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508869333", "createdAt": "2020-10-20T22:07:31Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -110,6 +116,9 @@ public PinotClusterInfoFetcher(\n         this.brokersForTableCache = CacheBuilder.newBuilder()\n                 .expireAfterWrite(cacheExpiryMs, TimeUnit.MILLISECONDS)\n                 .build((CacheLoader.from(this::getAllBrokersForTable)));\n+        this.instanceConfigCache = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5ODk2NQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NjgxMQ==", "bodyText": "Hmm. Why ? At the very least, I would expect to be making one call per server to get that server's GRPC port. Why is it per split ? I see that the cache is working in lieu of a batched API at the controller.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510496811", "createdAt": "2020-10-22T22:37:11Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -110,6 +116,9 @@ public PinotClusterInfoFetcher(\n         this.brokersForTableCache = CacheBuilder.newBuilder()\n                 .expireAfterWrite(cacheExpiryMs, TimeUnit.MILLISECONDS)\n                 .build((CacheLoader.from(this::getAllBrokersForTable)));\n+        this.instanceConfigCache = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5ODk2NQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4ODEwNA==", "bodyText": "In order to get the grpc port, we need to query pinot controller based on pinot instance name.\nWhen doing segment level query, we issue one query for every split (which contains the pinot server to query and the segments to query). For non-grpc query, the port is part of instance id to be parsed, however this is not true for grpc, we need to query pinot controller for grpc port per pinot instance.\nIn the worst case scenario,  assume one pinot table has 100 segments, then one presto query could be split into one segment per split, which means, we will issue 100 queries to pinot servers which means we also need to make 100 calls to pinot controllers for instance grpc port and maybe most of them are asking for the same information.\nHence I want to cache the grpc port here. The first query will go to pinot controller to fetch instance config then extract the grpc port. This info will be cached for 2 minutes. Then the next call will be issued along with the query.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511188104", "createdAt": "2020-10-23T22:52:38Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -110,6 +116,9 @@ public PinotClusterInfoFetcher(\n         this.brokersForTableCache = CacheBuilder.newBuilder()\n                 .expireAfterWrite(cacheExpiryMs, TimeUnit.MILLISECONDS)\n                 .build((CacheLoader.from(this::getAllBrokersForTable)));\n+        this.instanceConfigCache = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5ODk2NQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDkxNg==", "bodyText": "Sounds good. This awesome explanation deserves in the code comments :-) !", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511320916", "createdAt": "2020-10-24T05:02:05Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -110,6 +116,9 @@ public PinotClusterInfoFetcher(\n         this.brokersForTableCache = CacheBuilder.newBuilder()\n                 .expireAfterWrite(cacheExpiryMs, TimeUnit.MILLISECONDS)\n                 .build((CacheLoader.from(this::getAllBrokersForTable)));\n+        this.instanceConfigCache = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5ODk2NQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc1Nzc5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDoyNjoyNFrOHjgw7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMjo1N1rOHlTSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTAyMQ==", "bodyText": "Perhaps you can also add some color to the PR description about when is it a good idea to use streaming for segment query path ? I would imagine, always if available ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r506999021", "createdAt": "2020-10-18T00:26:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -490,4 +495,40 @@ public PinotConfig setPushdownTopNBrokerQueries(boolean pushdownTopNBrokerQuerie\n         this.pushdownTopNBrokerQueries = pushdownTopNBrokerQueries;\n         return this;\n     }\n+\n+    public boolean isUseStreamingForSegmentQueries()\n+    {\n+        return useStreamingForSegmentQueries;\n+    }\n+\n+    @Config(\"pinot.use-streaming-for-segment-queries\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3NTQ1MQ==", "bodyText": "Yes, we should use it whenever possible.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508875451", "createdAt": "2020-10-20T22:22:57Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -490,4 +495,40 @@ public PinotConfig setPushdownTopNBrokerQueries(boolean pushdownTopNBrokerQuerie\n         this.pushdownTopNBrokerQueries = pushdownTopNBrokerQueries;\n         return this;\n     }\n+\n+    public boolean isUseStreamingForSegmentQueries()\n+    {\n+        return useStreamingForSegmentQueries;\n+    }\n+\n+    @Config(\"pinot.use-streaming-for-segment-queries\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTAyMQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc1ODc3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDoyODowN1rOHjgxYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzozNjoyOFrOHnm7EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTEzNw==", "bodyText": "Perhaps PinotStreamingSegmentPageSource or PinotSegmentStreamingPageSource ?\n`Coz I think that GRPC is an implementation detail and shouldn't be exposed via the class name.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r506999137", "createdAt": "2020-10-18T00:28:07Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -81,12 +90,22 @@ public ConnectorPageSource createPageSource(\n \n         switch (pinotSplit.getSplitType()) {\n             case SEGMENT:\n-                return new PinotSegmentPageSource(\n+                if (this.pinotConfig.isUseStreamingForSegmentQueries()) {\n+                    return new PinotSegmentPageSourceForGrpc(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI5NDIyNQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511294225", "createdAt": "2020-10-24T03:36:28Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -81,12 +90,22 @@ public ConnectorPageSource createPageSource(\n \n         switch (pinotSplit.getSplitType()) {\n             case SEGMENT:\n-                return new PinotSegmentPageSource(\n+                if (this.pinotConfig.isUseStreamingForSegmentQueries()) {\n+                    return new PinotSegmentPageSourceForGrpc(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTEzNw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc2MDE1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDozMDoyN1rOHjgyAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzozNjozNFrOHnm7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTI5Ng==", "bodyText": "fetchNextPage ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r506999296", "createdAt": "2020-10-18T00:30:27Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -172,6 +175,11 @@ public Page getNextPage()\n         }\n         currentDataTable = dataTableList.pop();\n \n+        return fillPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI5NDI2OA==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511294268", "createdAt": "2020-10-24T03:36:34Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -172,6 +175,11 @@ public Page getNextPage()\n         }\n         currentDataTable = dataTableList.pop();\n \n+        return fillPage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5OTI5Ng=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc2ODA3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0NDoxMVrOHjg1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0NDoxMVrOHjg1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDE3OQ==", "bodyText": "PinotStreamingSegmentPageSource ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507000179", "createdAt": "2020-10-18T00:44:11Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc2ODU5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0NTowMVrOHjg1rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo1NzoxN1rOHlVXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDIzNw==", "bodyText": "I didn't follow why this is not: !serverResponseIterator.hasNext()", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507000237", "createdAt": "2020-10-18T00:45:01Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwOTM4MQ==", "bodyText": "The streaming iterator will return data first and the last part is the result metadata, similar to the query response.\nHence, we need to check the type of response then set the flag.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508909381", "createdAt": "2020-10-20T23:57:17Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDIzNw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc2OTIxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0NTo0MFrOHjg17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDowMDoyNlrOHlVdyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDMwMQ==", "bodyText": "This is a bit confusing: Because if you inline this, it reads as:\nif (closed) {\n  close();\n  return null;\n}", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507000301", "createdAt": "2020-10-18T00:45:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxMTA1MQ==", "bodyText": "right, will simplify this code.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508911051", "createdAt": "2020-10-21T00:00:26Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDMwMQ=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3MDcwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0ODoxNVrOHjg2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo0ODoxNVrOHjg2kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDQ2NQ==", "bodyText": "I think the exception e needs to be chained to the new PinotException and not String.format", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507000465", "createdAt": "2020-10-18T00:48:15Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3MjQ3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1MDo1M1rOHjg3VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDowNTowNVrOHlVjGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDY2MA==", "bodyText": "When does this case occur ? It seems odd to me to have a global GRPC port defined in the config ... is this an error or does this case happen in certain upgrade situations ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507000660", "createdAt": "2020-10-18T00:50:53Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));\n+        String[] hostSplits = host.split(\"_\");\n+        String grpcHost = (hostSplits.length > 1) ? hostSplits[hostSplits.length - 2] : host;\n+        int grpcPort = split.getGrpcPort().isPresent() ? split.getGrpcPort().get() : 0;\n+        // Fallback to default grpc port set by Pinot config.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxMjQwOQ==", "bodyText": "This is more about system integration and upgrade steps:\nPinot added the gRpcPort field into instance config later than the streaming connector, so this API call may not get the real gRpc port back, hence we need a fallback global gRpc port.\nBasically the logic is that, if we can read the port from instance config, we use it, otherwise go to look at the default gRpc port.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508912409", "createdAt": "2020-10-21T00:05:05Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));\n+        String[] hostSplits = host.split(\"_\");\n+        String grpcHost = (hostSplits.length > 1) ? hostSplits[hostSplits.length - 2] : host;\n+        int grpcPort = split.getGrpcPort().isPresent() ? split.getGrpcPort().get() : 0;\n+        // Fallback to default grpc port set by Pinot config.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMDY2MA=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3NTc3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1NjoyNFrOHjg4ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDowNjoyNVrOHlVkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTAyNw==", "bodyText": "I didn't follow the need for these changes around the extra arguments to addTime ? Is this required by prestodb/presto-pinot-driver#5 ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001027", "createdAt": "2020-10-18T00:56:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testParsePinotSchemaToPinotColumns()\n                 .addMetric(\"floatMetric\", FieldSpec.DataType.FLOAT)\n                 .addMetric(\"doubleMetric\", FieldSpec.DataType.DOUBLE)\n                 .addMetric(\"bytesMetric\", FieldSpec.DataType.BYTES)\n-                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"), new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxMjc2Mg==", "bodyText": "We are bumping directly from pinot lib 0.1.0 to 0.5.0 after the upgrade.\nSo the old API is already deprecated and removed.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508912762", "createdAt": "2020-10-21T00:06:25Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testParsePinotSchemaToPinotColumns()\n                 .addMetric(\"floatMetric\", FieldSpec.DataType.FLOAT)\n                 .addMetric(\"doubleMetric\", FieldSpec.DataType.DOUBLE)\n                 .addMetric(\"bytesMetric\", FieldSpec.DataType.BYTES)\n-                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"), new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTAyNw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3NjkxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1ODoxM1rOHjg5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDowNzoyMFrOHlVlYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTE2MA==", "bodyText": "Is this PQL or SQL ? the variable name says SQL, but I think the pinot server only speaks PQL ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001160", "createdAt": "2020-10-18T00:58:13Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxMjk5Mg==", "bodyText": "For segment query, the syntax is the same, and we are using Pinot SQL for query processing.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508912992", "createdAt": "2020-10-21T00:07:20Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTE2MA=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3NzA4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1ODozNlrOHjg5Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDowOTozM1rOHlVnqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTE3OA==", "bodyText": "PINOT_INVALID_PQL_GENERATED seems like a wrong enum here.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001178", "createdAt": "2020-10-18T00:58:36Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxMzU3OQ==", "bodyText": "will update", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508913579", "createdAt": "2020-10-21T00:09:33Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTE3OA=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3OTA4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMTowMTozNVrOHjg6NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDoxMTo1NFrOHlVqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTM5Ng==", "bodyText": "I didn't follow this part: Does the host in the split now contain two hostnames ? The GRPC one and the regular one ? An example of the response returned by the server would be helpful in the code comments.\nCan this stuff be done by the split manager when creating the splits ? Ideally you want the splits to be very definitive about what behavior will happen at execution time.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001396", "createdAt": "2020-10-18T01:01:35Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));\n+        String[] hostSplits = host.split(\"_\");\n+        String grpcHost = (hostSplits.length > 1) ? hostSplits[hostSplits.length - 2] : host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxNDI5OA==", "bodyText": "pinot server instance is named as Server_${hostname}_${port}, however this port is not gRpc port.\nHence we need to use this instance name to query Pinot controller for the instance config which contains the gRpc port.\nI can embed this logic to split.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508914298", "createdAt": "2020-10-21T00:11:54Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSourceForGrpc.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponseWrapper;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_PQL_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentPageSourceForGrpc\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponseWrapper> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentPageSourceForGrpc(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            close();\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponseWrapper serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPql(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from %s: %s\", split, e));\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPql(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponseWrapper> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPql().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the pql\"));\n+        String host = split.getSegmentHost().orElseThrow(() -> new PinotException(PINOT_INVALID_PQL_GENERATED, Optional.empty(), \"Expected the segment split to contain the host\"));\n+        String[] hostSplits = host.split(\"_\");\n+        String grpcHost = (hostSplits.length > 1) ? hostSplits[hostSplits.length - 2] : host;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTM5Ng=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc4MDI1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMTowMzo1MFrOHjg6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMTowMzo1MFrOHjg6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTUyOA==", "bodyText": "Same comment as in PinogSegmentPageSourceForGrpc below", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001528", "createdAt": "2020-10-18T01:03:50Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +496,101 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            int grpcPort = instanceConfigCache.get(serverInstance).getGrpcPort();\n+            if (grpcPort <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc4MTEyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMTowNTowN1rOHjg7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMTowNTowN1rOHjg7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTYyMw==", "bodyText": "nit: Change throwable to cause", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001623", "createdAt": "2020-10-18T01:05:07Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +496,101 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            int grpcPort = instanceConfigCache.get(serverInstance).getGrpcPort();\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+            return grpcPort;\n+        }\n+        catch (ExecutionException e) {\n+            Throwable throwable = e.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc4NDQyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplitManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMToxMDoxOFrOHjg8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo0NDoxM1rOHnfRAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTk4Mw==", "bodyText": "If I am reading this line correctly, it means that we will always be using the GRPC mode if the server supports it. Is that intentional ? If so, what does the PinotConfig.isUseStreamingForSegmentQueries imply ?\nPerhaps don't provide the GRPC port if !isUseStreamingForSegmentQueries ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r507001983", "createdAt": "2020-10-18T01:10:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplitManager.java", "diffHunk": "@@ -123,11 +123,16 @@ protected void generateSegmentSplits(\n                 // segments is already shuffled\n                 Iterables.partition(segments, numSegmentsInThisSplit).forEach(\n                         segmentsForThisSplit -> splits.add(\n-                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host)));\n+                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host, getGrpcPort(host))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxNzgzNQ==", "bodyText": "So we will always set grpc port into a pinot split.\nThen in PinotPageSourceProvider, we will decide which SegmentPageSource to use based on the config PinotConfig.isUseStreamingForSegmentQueries.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r508917835", "createdAt": "2020-10-21T00:24:37Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplitManager.java", "diffHunk": "@@ -123,11 +123,16 @@ protected void generateSegmentSplits(\n                 // segments is already shuffled\n                 Iterables.partition(segments, numSegmentsInThisSplit).forEach(\n                         segmentsForThisSplit -> splits.add(\n-                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host)));\n+                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host, getGrpcPort(host))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTk4Mw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMTI5MQ==", "bodyText": "Got it.\nI think we should initialize the global GPRC port to be -1 then ... just to make sure we don't by mistake talk to port 8090 even when PinotConfig.isUseStreamingForSegmentQueries = false", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510501291", "createdAt": "2020-10-22T22:50:42Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplitManager.java", "diffHunk": "@@ -123,11 +123,16 @@ protected void generateSegmentSplits(\n                 // segments is already shuffled\n                 Iterables.partition(segments, numSegmentsInThisSplit).forEach(\n                         segmentsForThisSplit -> splits.add(\n-                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host)));\n+                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host, getGrpcPort(host))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTk4Mw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2ODc2OA==", "bodyText": "make sense, will update the logic to check grpc port > 0 in PinotPageSourceProvider for picking segment page source", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511168768", "createdAt": "2020-10-23T21:44:13Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplitManager.java", "diffHunk": "@@ -123,11 +123,16 @@ protected void generateSegmentSplits(\n                 // segments is already shuffled\n                 Iterables.partition(segments, numSegmentsInThisSplit).forEach(\n                         segmentsForThisSplit -> splits.add(\n-                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host)));\n+                                createSegmentSplit(connectorId, pql, expectedColumnHandles, segmentsForThisSplit, host, getGrpcPort(host))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTk4Mw=="}, "originalCommit": {"oid": "6cb486b66992b1b46c04c06b602ce996b0b5d71f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzgyODUyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjozNTozNFrOHm2OHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo0OTo1MFrOHnfYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NjI4Ng==", "bodyText": "Just curious about if there are any automated tests around ensuring what all do we need to exclude ? Like would anything fail if we exclude less or more ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510496286", "createdAt": "2020-10-22T22:35:34Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/pom.xml", "diffHunk": "@@ -22,6 +22,60 @@\n         <dependency>\n             <groupId>com.facebook.presto.pinot</groupId>\n             <artifactId>pinot-driver</artifactId>\n+            <exclusions>\n+                <exclusion>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3MDY0MQ==", "bodyText": "The maven plugin fails the build.\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:3.0.0-M2:enforce (default) on project presto-pinot-toolkit: Some Enforcer rules have failed. Look above for specific messages explaining why the rule failed. -> [Help 1]", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511170641", "createdAt": "2020-10-23T21:49:50Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/pom.xml", "diffHunk": "@@ -22,6 +22,60 @@\n         <dependency>\n             <groupId>com.facebook.presto.pinot</groupId>\n             <artifactId>pinot-driver</artifactId>\n+            <exclusions>\n+                <exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NjI4Ng=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzgyODg4OnYy", "diffSide": "RIGHT", "path": "presto-main/etc/catalog/pinot.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjozNTo0M1rOHm2OWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjozNTo0M1rOHm2OWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NjM0Ng==", "bodyText": "Lacks newline at end.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510496346", "createdAt": "2020-10-22T22:35:43Z", "author": {"login": "agrawaldevesh"}, "path": "presto-main/etc/catalog/pinot.properties", "diffHunk": "@@ -2,3 +2,4 @@ connector.name=pinot\n \n # Pinot controller endpoint\n pinot.controller-urls=localhost:9000\n+pinot.use-streaming-for-segment-queries=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzgzNjEzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjozOToxNVrOHm2SxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1NjoyOVrOHnggEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NzQ3Nw==", "bodyText": "Can you push this logic of choosing the global rpc port to when the instance config cache is populated ? Either the controller provides you the rpc port, or you choose the global one. I feel it belongs better at \"population\" time than at \"read time\".", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510497477", "createdAt": "2020-10-22T22:39:15Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +496,101 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            int grpcPort = instanceConfigCache.get(serverInstance).getGrpcPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTAwOA==", "bodyText": "make sense, moved this logic into PinotConnection.getGrpcPort(String serverInstance) to apply the pinot configs.\nFor PinotClusterInfoFetcher, we just honor the real value fetched from Pinot cluster.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511189008", "createdAt": "2020-10-23T22:56:29Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +496,101 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            int grpcPort = instanceConfigCache.get(serverInstance).getGrpcPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NzQ3Nw=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg0MDkyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0MToyMlrOHm2VhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowMDozOFrOHngjsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5ODE4MA==", "bodyText": "Please add a comment here, that this is only used as a fallback if the controller does not provide a per server grpc port (if a pinot version older than XX) is running.\nAlso, should the default be something like -1 ... to denote that an RPC port fall back is not set ? I think 8090 encodes some pinot information here that ideally belongs in some config file.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510498180", "createdAt": "2020-10-22T22:41:22Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -86,6 +87,11 @@\n \n     // Requires Pinot version >= 0.4.0.\n     private boolean usePinotSqlForBrokerQueries = true;\n+    // Requires Pinot version >= 0.5.0.\n+    private boolean useStreamingForSegmentQueries;\n+    private boolean usePlainTextForStreamingServer = true;\n+    private int serverGrpcPort = 8090;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTkzOA==", "bodyText": "True, will just put -1 here, which means unless been set, this tis not used.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511189938", "createdAt": "2020-10-23T23:00:38Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -86,6 +87,11 @@\n \n     // Requires Pinot version >= 0.4.0.\n     private boolean usePinotSqlForBrokerQueries = true;\n+    // Requires Pinot version >= 0.5.0.\n+    private boolean useStreamingForSegmentQueries;\n+    private boolean usePlainTextForStreamingServer = true;\n+    private int serverGrpcPort = 8090;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5ODE4MA=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg0NTM0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0MzozNVrOHm2YMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0MzozNVrOHm2YMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5ODg2Nw==", "bodyText": "converted into pages ?\nor deconstructed into pages ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510498867", "createdAt": "2020-10-22T22:43:35Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg0NzAxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0NDoyNlrOHm2ZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoxNjozNlrOHngx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTEzNw==", "bodyText": "Can you add a small comment here that we expect to see a sequence of Data followed by Metadata ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510499137", "createdAt": "2020-10-22T22:44:26Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MzU1Ng==", "bodyText": "will do", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511193556", "createdAt": "2020-10-23T23:16:36Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTEzNw=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg1MTI0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0NjoxN1rOHm2bqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoxNjozM1rOHngxxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTc1NA==", "bodyText": "Will anything be leaked if we throw here ? I am not sure if the byte buffer is native or on heap ? Should we free the byteBuffer after this loop using a try-finally ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510499754", "createdAt": "2020-10-22T22:46:17Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MzU0Mw==", "bodyText": "good catch, I will wrapper with try- finally", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511193543", "createdAt": "2020-10-23T23:16:33Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTc1NA=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg1MjgzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0NzowMVrOHm2cnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzozMDowMFrOHng8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTk5Ng==", "bodyText": "Is getGrpcPort guaranteed to be valid ... > 0 ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510499996", "createdAt": "2020-10-22T22:47:01Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPinotQuery(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\", split), e);\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPinotQuery(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillNextPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponse> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPinotQuery().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the pinot query\"));\n+        String grpcHost = split.getGrpcHost().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the grpc host\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NjM0NQ==", "bodyText": "yes, if grpc port is < 0 then we will go to PinotSegmentPageSource instead of PinotSegmentStreamingPageSource", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511196345", "createdAt": "2020-10-23T23:29:37Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPinotQuery(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\", split), e);\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPinotQuery(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillNextPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponse> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPinotQuery().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the pinot query\"));\n+        String grpcHost = split.getGrpcHost().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the grpc host\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTk5Ng=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NjQxMA==", "bodyText": "Still, it's good to add a check here just in case.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511196410", "createdAt": "2020-10-23T23:30:00Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        if (serverResponseIterator.hasNext()) {\n+            long startTimeNanos = System.nanoTime();\n+            ServerResponse serverResponse = serverResponseIterator.next();\n+            readTimeNanos += System.nanoTime() - startTimeNanos;\n+            switch (serverResponse.getResponseType()) {\n+                case Constants.Response.ResponseType.DATA:\n+                    estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                    // Store each dataTable which will later be constructed into Pages.\n+                    try {\n+                        byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                        DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                        checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                        currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable, serverResponse.getSerializedSize());\n+                    }\n+                    catch (IOException e) {\n+                        throw new PinotException(\n+                            PINOT_DATA_FETCH_EXCEPTION,\n+                            split.getSegmentPinotQuery(),\n+                            String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\", split), e);\n+                    }\n+                    break;\n+                case Constants.Response.ResponseType.METADATA:\n+                    // The last part of the response is Metadata\n+                    currentDataTable = null;\n+                    serverResponseIterator = null;\n+                    close();\n+                    return null;\n+                default:\n+                    throw new PinotException(\n+                        PINOT_UNEXPECTED_RESPONSE,\n+                        split.getSegmentPinotQuery(),\n+                        String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+            }\n+        }\n+        Page page = fillNextPage();\n+        completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+        if (byteBuffer != null) {\n+            byteBuffer.clear();\n+        }\n+        return page;\n+    }\n+\n+    private Iterator<ServerResponse> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPinotQuery().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the pinot query\"));\n+        String grpcHost = split.getGrpcHost().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the grpc host\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTk5Ng=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg1OTA1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0OTozMFrOHm2gCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzozNToyNFrOHnhBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDg3Mw==", "bodyText": "Can you add a comment explaining this logic here. Should the GRPC host be saved as an immutable field in the split, instead of recomputing here ?\nCan you use Optional.map instead of the if condition below ...", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r510500873", "createdAt": "2020-10-22T22:49:30Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplit.java", "diffHunk": "@@ -133,14 +138,29 @@ public SplitType getSplitType()\n         return segments;\n     }\n \n+    public Optional<String> getGrpcHost()\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NzQ1NQ==", "bodyText": "This method is only called once, so I think it's fine to set the logic here.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511197455", "createdAt": "2020-10-23T23:35:24Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSplit.java", "diffHunk": "@@ -133,14 +138,29 @@ public SplitType getSplitType()\n         return segments;\n     }\n \n+    public Optional<String> getGrpcHost()\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDg3Mw=="}, "originalCommit": {"oid": "7114de3793f7870777de068d4aba36b99fdb7810"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA4NTYyOnYy", "diffSide": "RIGHT", "path": "presto-main/etc/catalog/pinot.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowMzoxMlrOHnojpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowNDowM1rOHnoj5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDk5Nw==", "bodyText": "Should we add a comment here that this would only work with versions of Pinot more than X ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511320997", "createdAt": "2020-10-24T05:03:12Z", "author": {"login": "agrawaldevesh"}, "path": "presto-main/etc/catalog/pinot.properties", "diffHunk": "@@ -2,3 +2,4 @@ connector.name=pinot\n \n # Pinot controller endpoint\n pinot.controller-urls=localhost:9000\n+pinot.use-streaming-for-segment-queries=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTA2MA==", "bodyText": "make sense, I will comment out this line then.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321060", "createdAt": "2020-10-24T05:04:03Z", "author": {"login": "xiangfu0"}, "path": "presto-main/etc/catalog/pinot.properties", "diffHunk": "@@ -2,3 +2,4 @@ connector.name=pinot\n \n # Pinot controller endpoint\n pinot.controller-urls=localhost:9000\n+pinot.use-streaming-for-segment-queries=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDk5Nw=="}, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA4Nzg2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowNjoxOFrOHnoknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxOTozNTo1NlrOHnz5BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTI0NQ==", "bodyText": "When will this exception be hit ? My understanding is that when the controller does not have the per instance grpc port, it will simply return -1 for that and we will go through the regular if condition on line 119. I don't know whether we should fall back in case of an exception. Are you thinking of cases like where the controller is down or such ?\nCan we catch a more specific exception ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321245", "createdAt": "2020-10-24T05:06:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "diffHunk": "@@ -110,4 +110,19 @@ public TimeBoundary getTimeBoundary(String tableName)\n     {\n         return pinotClusterInfoFetcher.getTimeBoundaryForTable(tableName);\n     }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        int grpcPort;\n+        try {\n+            grpcPort = pinotClusterInfoFetcher.getGrpcPort(serverInstance);\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+        }\n+        catch (Exception e) {\n+            grpcPort = pinotConfig.getServerGrpcPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMjU5MQ==", "bodyText": "The only thing I can think of is that the pinot controller is unavailable so the http call will fail.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511322591", "createdAt": "2020-10-24T05:21:55Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "diffHunk": "@@ -110,4 +110,19 @@ public TimeBoundary getTimeBoundary(String tableName)\n     {\n         return pinotClusterInfoFetcher.getTimeBoundaryForTable(tableName);\n     }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        int grpcPort;\n+        try {\n+            grpcPort = pinotClusterInfoFetcher.getGrpcPort(serverInstance);\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+        }\n+        catch (Exception e) {\n+            grpcPort = pinotConfig.getServerGrpcPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTI0NQ=="}, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzA1Nw==", "bodyText": "I could be wrong, but I think that the rest of the code is also susceptible to failing when the controller fails. So it may be okay to just propagate the exception, since it is not like you are adding a new vulnerability.\nWhere is the Pinot Server's GRPC port specified in the Pinot configuration (ie on the Pinot cluster side): If there too, the port is fixed (how does that work for k8s then, which does not like fixed ports), then I can see why having a fall back port specified in the pinot config makes sense.\nI don't have a strong feeling here, and I am totally fine with having this config. It just seems weird to me to use some pre-configured port value when we couldn't get the real thing :-). Either way the query will fail.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511493057", "createdAt": "2020-10-24T17:08:03Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "diffHunk": "@@ -110,4 +110,19 @@ public TimeBoundary getTimeBoundary(String tableName)\n     {\n         return pinotClusterInfoFetcher.getTimeBoundaryForTable(tableName);\n     }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        int grpcPort;\n+        try {\n+            grpcPort = pinotClusterInfoFetcher.getGrpcPort(serverInstance);\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+        }\n+        catch (Exception e) {\n+            grpcPort = pinotConfig.getServerGrpcPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTI0NQ=="}, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMjkzNA==", "bodyText": "It's a fixed port that user can specify in pinot server config, then it will be stored in Zookeeper and pinot controller provides API to retrieve it.\nThis is the zk record:", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511502934", "createdAt": "2020-10-24T18:56:35Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "diffHunk": "@@ -110,4 +110,19 @@ public TimeBoundary getTimeBoundary(String tableName)\n     {\n         return pinotClusterInfoFetcher.getTimeBoundaryForTable(tableName);\n     }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        int grpcPort;\n+        try {\n+            grpcPort = pinotClusterInfoFetcher.getGrpcPort(serverInstance);\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+        }\n+        catch (Exception e) {\n+            grpcPort = pinotConfig.getServerGrpcPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTI0NQ=="}, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjY5Mw==", "bodyText": "It's a fixed port that user can specify in pinot server config, then it will be stored in Zookeeper and pinot controller provides API to retrieve it.\nThis is the zk record:\n\n\nI rethink this one, if in case of controller is down, we don't need to handle the case, then it' ok to remove this config.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511506693", "createdAt": "2020-10-24T19:35:56Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConnection.java", "diffHunk": "@@ -110,4 +110,19 @@ public TimeBoundary getTimeBoundary(String tableName)\n     {\n         return pinotClusterInfoFetcher.getTimeBoundaryForTable(tableName);\n     }\n+\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        int grpcPort;\n+        try {\n+            grpcPort = pinotClusterInfoFetcher.getGrpcPort(serverInstance);\n+            if (grpcPort <= 0) {\n+                grpcPort = pinotConfig.getServerGrpcPort();\n+            }\n+        }\n+        catch (Exception e) {\n+            grpcPort = pinotConfig.getServerGrpcPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTI0NQ=="}, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA4ODY5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowNzoyNlrOHnok-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowNzoyNlrOHnok-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTMzNw==", "bodyText": "nit: pinotSplit.getGrpcPort().orElse(-1) > 0", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321337", "createdAt": "2020-10-24T05:07:26Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -81,12 +86,24 @@ public ConnectorPageSource createPageSource(\n \n         switch (pinotSplit.getSplitType()) {\n             case SEGMENT:\n-                return new PinotSegmentPageSource(\n+                if (this.pinotConfig.isUseStreamingForSegmentQueries() &&\n+                        pinotSplit.getGrpcPort().isPresent() &&\n+                        pinotSplit.getGrpcPort().get() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4198abd41b16dfea38c8199ec23d313102031d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA4OTkzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowOTozMVrOHnolkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTowOTozMVrOHnolkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTQ4OA==", "bodyText": "nit: What's a truck ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321488", "createdAt": "2020-10-24T05:09:31Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        try {\n+            // Pinot gRPC server response iterator returns:\n+            //   - n data trucks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA5MjE0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNToxMjoyOVrOHnomkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNToxMjoyOVrOHnomkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTc0Ng==", "bodyText": "nit: More descriptive name than i", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321746", "createdAt": "2020-10-24T05:12:29Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.VariableWidthBlock;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VariableWidthType;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.facebook.presto.testing.assertions.Assert;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestPinotStreamingSegmentPageSource\n+        extends TestPinotSegmentPageSource\n+{\n+    private static final class MockServerResponse\n+            extends ServerResponse\n+    {\n+        private DataTable dataTable;\n+\n+        public MockServerResponse(Server.ServerResponse serverResponse)\n+        {\n+            super(serverResponse);\n+        }\n+\n+        public MockServerResponse(DataTable dataTable)\n+        {\n+            super(null);\n+            this.dataTable = dataTable;\n+        }\n+\n+        public String getResponseType()\n+        {\n+            return Constants.Response.ResponseType.DATA;\n+        }\n+\n+        public int getSerializedSize()\n+        {\n+            return 0;\n+        }\n+\n+        public ByteBuffer getPayloadReadOnlyByteBuffer()\n+        {\n+            try {\n+                return ByteBuffer.wrap(dataTable.toBytes());\n+            }\n+            catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public DataTable getDataTable(ByteBuffer byteBuffer) throws IOException\n+        {\n+            return SimpleDataTable.fromBytes(byteBuffer);\n+        }\n+    }\n+\n+    private static final class MockPinotStreamingQueryClient\n+            extends PinotStreamingQueryClient\n+    {\n+        private final ImmutableList<DataTable> dataTables;\n+\n+        MockPinotStreamingQueryClient(PinotStreamingQueryClient.Config pinotConfig, List<DataTable> dataTables)\n+        {\n+            super(pinotConfig);\n+            this.dataTables = ImmutableList.copyOf(dataTables);\n+        }\n+\n+        @Override\n+        public Iterator<ServerResponse> submit(String host, int port, GrpcRequestBuilder requestBuilder)\n+        {\n+            return new Iterator<ServerResponse>()\n+            {\n+                int i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA5Mjk3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNToxNDoxNlrOHnom-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNjoyODozM1rOHno9ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTg0OA==", "bodyText": "sigh, so much test code duplication :-(", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511321848", "createdAt": "2020-10-24T05:14:16Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.VariableWidthBlock;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VariableWidthType;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.facebook.presto.testing.assertions.Assert;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestPinotStreamingSegmentPageSource\n+        extends TestPinotSegmentPageSource\n+{\n+    private static final class MockServerResponse\n+            extends ServerResponse\n+    {\n+        private DataTable dataTable;\n+\n+        public MockServerResponse(Server.ServerResponse serverResponse)\n+        {\n+            super(serverResponse);\n+        }\n+\n+        public MockServerResponse(DataTable dataTable)\n+        {\n+            super(null);\n+            this.dataTable = dataTable;\n+        }\n+\n+        public String getResponseType()\n+        {\n+            return Constants.Response.ResponseType.DATA;\n+        }\n+\n+        public int getSerializedSize()\n+        {\n+            return 0;\n+        }\n+\n+        public ByteBuffer getPayloadReadOnlyByteBuffer()\n+        {\n+            try {\n+                return ByteBuffer.wrap(dataTable.toBytes());\n+            }\n+            catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public DataTable getDataTable(ByteBuffer byteBuffer) throws IOException\n+        {\n+            return SimpleDataTable.fromBytes(byteBuffer);\n+        }\n+    }\n+\n+    private static final class MockPinotStreamingQueryClient\n+            extends PinotStreamingQueryClient\n+    {\n+        private final ImmutableList<DataTable> dataTables;\n+\n+        MockPinotStreamingQueryClient(PinotStreamingQueryClient.Config pinotConfig, List<DataTable> dataTables)\n+        {\n+            super(pinotConfig);\n+            this.dataTables = ImmutableList.copyOf(dataTables);\n+        }\n+\n+        @Override\n+        public Iterator<ServerResponse> submit(String host, int port, GrpcRequestBuilder requestBuilder)\n+        {\n+            return new Iterator<ServerResponse>()\n+            {\n+                int i;\n+\n+                @Override\n+                public boolean hasNext()\n+                {\n+                    return i < dataTables.size();\n+                }\n+\n+                @Override\n+                public ServerResponse next()\n+                {\n+                    return new MockServerResponse(dataTables.get(i++));\n+                }\n+            };\n+        }\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNDI4OA==", "bodyText": "I will clean this up.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511324288", "createdAt": "2020-10-24T05:45:23Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.VariableWidthBlock;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VariableWidthType;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.facebook.presto.testing.assertions.Assert;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestPinotStreamingSegmentPageSource\n+        extends TestPinotSegmentPageSource\n+{\n+    private static final class MockServerResponse\n+            extends ServerResponse\n+    {\n+        private DataTable dataTable;\n+\n+        public MockServerResponse(Server.ServerResponse serverResponse)\n+        {\n+            super(serverResponse);\n+        }\n+\n+        public MockServerResponse(DataTable dataTable)\n+        {\n+            super(null);\n+            this.dataTable = dataTable;\n+        }\n+\n+        public String getResponseType()\n+        {\n+            return Constants.Response.ResponseType.DATA;\n+        }\n+\n+        public int getSerializedSize()\n+        {\n+            return 0;\n+        }\n+\n+        public ByteBuffer getPayloadReadOnlyByteBuffer()\n+        {\n+            try {\n+                return ByteBuffer.wrap(dataTable.toBytes());\n+            }\n+            catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public DataTable getDataTable(ByteBuffer byteBuffer) throws IOException\n+        {\n+            return SimpleDataTable.fromBytes(byteBuffer);\n+        }\n+    }\n+\n+    private static final class MockPinotStreamingQueryClient\n+            extends PinotStreamingQueryClient\n+    {\n+        private final ImmutableList<DataTable> dataTables;\n+\n+        MockPinotStreamingQueryClient(PinotStreamingQueryClient.Config pinotConfig, List<DataTable> dataTables)\n+        {\n+            super(pinotConfig);\n+            this.dataTables = ImmutableList.copyOf(dataTables);\n+        }\n+\n+        @Override\n+        public Iterator<ServerResponse> submit(String host, int port, GrpcRequestBuilder requestBuilder)\n+        {\n+            return new Iterator<ServerResponse>()\n+            {\n+                int i;\n+\n+                @Override\n+                public boolean hasNext()\n+                {\n+                    return i < dataTables.size();\n+                }\n+\n+                @Override\n+                public ServerResponse next()\n+                {\n+                    return new MockServerResponse(dataTables.get(i++));\n+                }\n+            };\n+        }\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTg0OA=="}, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNzU4OQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511327589", "createdAt": "2020-10-24T06:28:33Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotStreamingSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.VariableWidthBlock;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VariableWidthType;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.facebook.presto.testing.assertions.Assert;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestPinotStreamingSegmentPageSource\n+        extends TestPinotSegmentPageSource\n+{\n+    private static final class MockServerResponse\n+            extends ServerResponse\n+    {\n+        private DataTable dataTable;\n+\n+        public MockServerResponse(Server.ServerResponse serverResponse)\n+        {\n+            super(serverResponse);\n+        }\n+\n+        public MockServerResponse(DataTable dataTable)\n+        {\n+            super(null);\n+            this.dataTable = dataTable;\n+        }\n+\n+        public String getResponseType()\n+        {\n+            return Constants.Response.ResponseType.DATA;\n+        }\n+\n+        public int getSerializedSize()\n+        {\n+            return 0;\n+        }\n+\n+        public ByteBuffer getPayloadReadOnlyByteBuffer()\n+        {\n+            try {\n+                return ByteBuffer.wrap(dataTable.toBytes());\n+            }\n+            catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public DataTable getDataTable(ByteBuffer byteBuffer) throws IOException\n+        {\n+            return SimpleDataTable.fromBytes(byteBuffer);\n+        }\n+    }\n+\n+    private static final class MockPinotStreamingQueryClient\n+            extends PinotStreamingQueryClient\n+    {\n+        private final ImmutableList<DataTable> dataTables;\n+\n+        MockPinotStreamingQueryClient(PinotStreamingQueryClient.Config pinotConfig, List<DataTable> dataTables)\n+        {\n+            super(pinotConfig);\n+            this.dataTables = ImmutableList.copyOf(dataTables);\n+        }\n+\n+        @Override\n+        public Iterator<ServerResponse> submit(String host, int port, GrpcRequestBuilder requestBuilder)\n+        {\n+            return new Iterator<ServerResponse>()\n+            {\n+                int i;\n+\n+                @Override\n+                public boolean hasNext()\n+                {\n+                    return i < dataTables.size();\n+                }\n+\n+                @Override\n+                public ServerResponse next()\n+                {\n+                    return new MockServerResponse(dataTables.get(i++));\n+                }\n+            };\n+        }\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTg0OA=="}, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzA5NDM3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNToxNTowNlrOHnonlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTo0Nzo0MVrOHnow-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMjAwNg==", "bodyText": "Should we also check that the splits return a valid GRPC host ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511322006", "createdAt": "2020-10-24T05:15:06Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "diffHunk": "@@ -125,10 +125,13 @@ private void assertSplits(List<PinotSplit> splits, int numSplitsExpected, PinotS\n     private void assertSegmentSplitWellFormed(PinotSplit split, boolean expectFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNDQwOQ==", "bodyText": "The only check I can think is length > 0", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511324409", "createdAt": "2020-10-24T05:47:41Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "diffHunk": "@@ -125,10 +125,13 @@ private void assertSplits(List<PinotSplit> splits, int numSplitsExpected, PinotS\n     private void assertSegmentSplitWellFormed(PinotSplit split, boolean expectFilter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMjAwNg=="}, "originalCommit": {"oid": "ab821abc728c11cb3ebbb8128f25750a73bd4017"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDIwOTA0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzowOToyM1rOHnzERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzowOToyM1rOHnzERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzE4OQ==", "bodyText": "nit: Extra newline ?", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511493189", "createdAt": "2020-10-24T17:09:23Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a2b32fbd40552b512e0120e749cd9872702c06d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDM3OTI5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDo1OToxMlrOHn0UiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDo1OToxMlrOHn0UiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMzczNw==", "bodyText": "This is a stale comment now.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511513737", "createdAt": "2020-10-24T20:59:12Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +504,100 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    // Fetch grpc port based on below policy:\n+    //   1. Extract grpc port from Pinot instance config\n+    //   2. If gRpc port < 0 then return fallback server grpc port setting by config: `pinot.server-grpc-port`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2740568a46aade69e8eafec4097abf74d42e530"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA3OTA4OnYy", "diffSide": "LEFT", "path": "presto-pinot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMDowOVrOHr2kbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMDowOVrOHr2kbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NDg3Nw==", "bodyText": "keep tihs", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515744877", "createdAt": "2020-11-02T05:20:09Z", "author": {"login": "highker"}, "path": "presto-pinot/pom.xml", "diffHunk": "@@ -22,13 +22,22 @@\n         <dependency>\n             <groupId>com.facebook.presto</groupId>\n             <artifactId>presto-pinot-toolkit</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.google.protobuf</groupId>\n+                    <artifactId>protobuf-java</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.google.errorprone</groupId>\n+                    <artifactId>error_prone_annotations</artifactId>\n+                </exclusion>\n+            </exclusions>\n         </dependency>\n \n         <dependency>\n             <groupId>com.google.guava</groupId>\n             <artifactId>guava</artifactId>\n         </dependency>\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4MzY1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMzoyMFrOHr2m5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMzoyMFrOHr2m5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTUwOQ==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515745509", "createdAt": "2020-11-02T05:23:20Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +504,98 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    // Fetch grpc port from Pinot instance config.\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            return instanceConfigCache.get(serverInstance).getGrpcPort();\n+        }\n+        catch (ExecutionException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof PinotException) {\n+                throw (PinotException) cause;\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(),\n+                    \"Error when getting instance config for \" + serverInstance, cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4Mzc1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMzoyNVrOHr2m8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMzoyNVrOHr2m8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTUyMg==", "bodyText": "remove else", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515745522", "createdAt": "2020-11-02T05:23:25Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +504,98 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()\n+        {\n+            return instanceName;\n+        }\n+\n+        public String getHostName()\n+        {\n+            return hostName;\n+        }\n+\n+        public boolean isEnabled()\n+        {\n+            return enabled;\n+        }\n+\n+        public int getPort()\n+        {\n+            return port;\n+        }\n+\n+        public int getGrpcPort()\n+        {\n+            return grpcPort;\n+        }\n+\n+        public List<String> getTags()\n+        {\n+            return tags;\n+        }\n+\n+        public List<String> getPools()\n+        {\n+            return pools;\n+        }\n+    }\n+\n+    public Instance getInstance(String instanceName)\n+    {\n+        try {\n+            String responseBody = sendHttpGetToController(String.format(INSTANCE_API_TEMPLATE, instanceName));\n+            return instanceJsonCodec.fromJson(responseBody);\n+        }\n+        catch (Exception throwable) {\n+            throw new PinotException(PINOT_UNABLE_TO_FIND_INSTANCE, Optional.empty(), \"Error when fetching instance configs for \" + instanceName, throwable);\n+        }\n+    }\n+\n+    // Fetch grpc port from Pinot instance config.\n+    public int getGrpcPort(String serverInstance)\n+    {\n+        try {\n+            return instanceConfigCache.get(serverInstance).getGrpcPort();\n+        }\n+        catch (ExecutionException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof PinotException) {\n+                throw (PinotException) cause;\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4NTkwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNDo0MFrOHr2oJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNDo0MFrOHr2oJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTgzMQ==", "bodyText": "Is this class json serializable? If it is, let's annotate each getter with @JsonProperty.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515745831", "createdAt": "2020-11-02T05:24:40Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -486,4 +504,98 @@ public TimeBoundary getTimeBoundaryForTable(String table)\n             throw e;\n         }\n     }\n+\n+    public static class Instance\n+    {\n+        private final String instanceName;\n+        private final String hostName;\n+        private final boolean enabled;\n+        private final int port;\n+        private final int grpcPort;\n+        private final List<String> tags;\n+        private final List<String> pools;\n+\n+        @JsonCreator\n+        public Instance(\n+                @JsonProperty String instanceName,\n+                @JsonProperty String hostName,\n+                @JsonProperty boolean enabled,\n+                @JsonProperty int port,\n+                @JsonProperty int grpcPort,\n+                @JsonProperty List<String> tags,\n+                @JsonProperty List<String> pools)\n+        {\n+            this.instanceName = instanceName;\n+            this.hostName = hostName;\n+            this.enabled = enabled;\n+            this.port = port;\n+            this.grpcPort = grpcPort;\n+            this.tags = tags;\n+            this.pools = pools;\n+        }\n+\n+        public String getInstanceName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4NzkyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNTo0MFrOHr2pMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNTo0MFrOHr2pMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NjA5Nw==", "bodyText": "put this to the end to be the same order as the ones on stack and constructor parameters.", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515746097", "createdAt": "2020-11-02T05:25:40Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotClusterInfoFetcher.java", "diffHunk": "@@ -95,12 +107,14 @@ public PinotClusterInfoFetcher(\n             JsonCodec<BrokersForTable> brokersForTableJsonCodec,\n             JsonCodec<RoutingTables> routingTablesJsonCodec,\n             JsonCodec<RoutingTablesV2> routingTablesV2JsonCodec,\n-            JsonCodec<TimeBoundary> timeBoundaryJsonCodec)\n+            JsonCodec<TimeBoundary> timeBoundaryJsonCodec,\n+            JsonCodec<Instance> instanceJsonCodec)\n     {\n         this.brokersForTableJsonCodec = requireNonNull(brokersForTableJsonCodec, \"brokers for table json codec is null\");\n         this.routingTablesJsonCodec = requireNonNull(routingTablesJsonCodec, \"routing tables json codec is null\");\n         this.routingTablesV2JsonCodec = requireNonNull(routingTablesV2JsonCodec, \"routing tables v2 json codec is null\");\n         this.timeBoundaryJsonCodec = requireNonNull(timeBoundaryJsonCodec, \"time boundary json codec is null\");\n+        this.instanceJsonCodec = requireNonNull(instanceJsonCodec, \"instance json codec is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4OTgxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNjo1OFrOHr2qPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyNjo1OFrOHr2qPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NjM2Ng==", "bodyText": "private\nwe should keep DataType static imported rather than having FieldSpec.DataType here", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515746366", "createdAt": "2020-11-02T05:26:58Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -112,7 +111,7 @@ public static Type getPrestoTypeFromPinotType(FieldSpec field, boolean inferDate\n         return new ArrayType(getPrestoTypeFromPinotType(field.getDataType()));\n     }\n \n-    public static Type getPrestoTypeFromPinotType(DataType dataType)\n+    public static Type getPrestoTypeFromPinotType(FieldSpec.DataType dataType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA5MjI1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyODo0NlrOHr2rtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyODo0NlrOHr2rtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0Njc0Mg==", "bodyText": "_SIZE -> _BYTES\nEither 128 * 1024 * 1024 -> new DataSize(128, MEGABYTE).toBytes() or just make the type to be DataSize. We support DataSize from config", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515746742", "createdAt": "2020-11-02T05:28:46Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -38,6 +38,7 @@\n     public static final int DEFAULT_MIN_CONNECTIONS_PER_SERVER = 10;\n     public static final int DEFAULT_THREAD_POOL_SIZE = 30;\n     public static final int DEFAULT_NON_AGGREGATE_LIMIT_FOR_BROKER_QUERIES = 25_000;\n+    public static final int DEFAULT_STREAMING_SERVER_GRPC_MAX_INBOUND_MESSAGE_SIZE = 128 * 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA5NTI4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMDoyN1rOHr2tRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMDoyN1rOHr2tRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzE0Mg==", "bodyText": "this seems to be unused", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515747142", "createdAt": "2020-11-02T05:30:27Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotErrorCode.java", "diffHunk": "@@ -37,6 +37,9 @@\n     PINOT_INVALID_CONFIGURATION(10, INTERNAL_ERROR),\n     PINOT_DATA_FETCH_EXCEPTION(11, EXTERNAL, true),\n     PINOT_REQUEST_GENERATOR_FAILURE(12, INTERNAL_ERROR),\n+    PINOT_UNABLE_TO_FIND_INSTANCE(13, EXTERNAL),\n+    PINOT_GRPC_EXCEPTION(14, EXTERNAL),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA5NjgzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMToyNlrOHr2uIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMToyNlrOHr2uIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzM2MA==", "bodyText": "remove else", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515747360", "createdAt": "2020-11-02T05:31:26Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -81,12 +86,23 @@ public ConnectorPageSource createPageSource(\n \n         switch (pinotSplit.getSplitType()) {\n             case SEGMENT:\n-                return new PinotSegmentPageSource(\n+                if (this.pinotConfig.isUseStreamingForSegmentQueries() &&\n+                        pinotSplit.getGrpcPort().orElse(-1) > 0) {\n+                    return new PinotSegmentStreamingPageSource(\n+                        session,\n+                        this.pinotConfig,\n+                        this.pinotStreamingQueryClient,\n+                        pinotSplit,\n+                        handles);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA5NzYwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMTo0OVrOHr2uhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMTo0OVrOHr2uhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzQ2MQ==", "bodyText": "remove this\nput these two conditions into one line", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515747461", "createdAt": "2020-11-02T05:31:49Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -81,12 +86,23 @@ public ConnectorPageSource createPageSource(\n \n         switch (pinotSplit.getSplitType()) {\n             case SEGMENT:\n-                return new PinotSegmentPageSource(\n+                if (this.pinotConfig.isUseStreamingForSegmentQueries() &&\n+                        pinotSplit.getGrpcPort().orElse(-1) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA5ODQ3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMjoyM1rOHr2vCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozMjoyM1rOHr2vCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzU5NQ==", "bodyText": "make this final", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515747595", "createdAt": "2020-11-02T05:32:23Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -64,20 +62,20 @@\n             ErrorCode.PINOT_INSUFFICIENT_SERVER_RESPONSE, PINOT_INSUFFICIENT_SERVER_RESPONSE,\n             ErrorCode.PINOT_INVALID_PQL_GENERATED, PINOT_INVALID_PQL_GENERATED);\n \n-    private final List<PinotColumnHandle> columnHandles;\n-    private final List<Type> columnTypes;\n-    private final PinotConfig pinotConfig;\n-    private final PinotSplit split;\n+    protected final List<PinotColumnHandle> columnHandles;\n+    protected final List<Type> columnTypes;\n+    protected final PinotConfig pinotConfig;\n+    protected final PinotSplit split;\n     private final PinotScatterGatherQueryClient pinotQueryClient;\n-    private final ConnectorSession session;\n+    protected final ConnectorSession session;\n \n     // dataTableList stores the dataTable returned from each server. Each dataTable is constructed to a Page, and then destroyed to save memory.\n     private LinkedList<PinotDataTableWithSize> dataTableList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjEwMjE2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNDo0MlrOHr2xEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNDo0MlrOHr2xEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODExNA==", "bodyText": "break a line after this", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515748114", "createdAt": "2020-11-02T05:34:42Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjEwMzE0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNToxMVrOHr2xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNToxMVrOHr2xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODI1MQ==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515748251", "createdAt": "2020-11-02T05:35:11Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        try {\n+            // Pinot gRPC server response iterator returns:\n+            //   - n data blocks based on inbound message size;\n+            //   - 1 metadata of the query results.\n+            // So we need to check ResponseType of each ServerResponse.\n+            if (serverResponseIterator.hasNext()) {\n+                long startTimeNanos = System.nanoTime();\n+                ServerResponse serverResponse = serverResponseIterator.next();\n+                readTimeNanos += System.nanoTime() - startTimeNanos;\n+                switch (serverResponse.getResponseType()) {\n+                    case Constants.Response.ResponseType.DATA:\n+                        estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                        // Store each dataTable which will later be constructed into Pages.\n+                        try {\n+                            byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                            DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                            checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                            currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable,\n+                                serverResponse.getSerializedSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjEwMzQ4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNToyNVrOHr2xzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNToyNVrOHr2xzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODMwMg==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515748302", "createdAt": "2020-11-02T05:35:25Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        try {\n+            // Pinot gRPC server response iterator returns:\n+            //   - n data blocks based on inbound message size;\n+            //   - 1 metadata of the query results.\n+            // So we need to check ResponseType of each ServerResponse.\n+            if (serverResponseIterator.hasNext()) {\n+                long startTimeNanos = System.nanoTime();\n+                ServerResponse serverResponse = serverResponseIterator.next();\n+                readTimeNanos += System.nanoTime() - startTimeNanos;\n+                switch (serverResponse.getResponseType()) {\n+                    case Constants.Response.ResponseType.DATA:\n+                        estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                        // Store each dataTable which will later be constructed into Pages.\n+                        try {\n+                            byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                            DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                            checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                            currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable,\n+                                serverResponse.getSerializedSize());\n+                        }\n+                        catch (IOException e) {\n+                            throw new PinotException(PINOT_DATA_FETCH_EXCEPTION, split.getSegmentPinotQuery(), String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\",\n+                                split), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjEwNDM1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNjowMFrOHr2yQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozNjowMFrOHr2yQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODQxNw==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515748417", "createdAt": "2020-11-02T05:36:00Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        try {\n+            // Pinot gRPC server response iterator returns:\n+            //   - n data blocks based on inbound message size;\n+            //   - 1 metadata of the query results.\n+            // So we need to check ResponseType of each ServerResponse.\n+            if (serverResponseIterator.hasNext()) {\n+                long startTimeNanos = System.nanoTime();\n+                ServerResponse serverResponse = serverResponseIterator.next();\n+                readTimeNanos += System.nanoTime() - startTimeNanos;\n+                switch (serverResponse.getResponseType()) {\n+                    case Constants.Response.ResponseType.DATA:\n+                        estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                        // Store each dataTable which will later be constructed into Pages.\n+                        try {\n+                            byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                            DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                            checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                            currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable,\n+                                serverResponse.getSerializedSize());\n+                        }\n+                        catch (IOException e) {\n+                            throw new PinotException(PINOT_DATA_FETCH_EXCEPTION, split.getSegmentPinotQuery(), String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\",\n+                                split), e);\n+                        }\n+                        break;\n+                    case Constants.Response.ResponseType.METADATA:\n+                        // The last part of the response is Metadata\n+                        currentDataTable = null;\n+                        serverResponseIterator = null;\n+                        close();\n+                        return null;\n+                    default:\n+                        throw new PinotException(PINOT_UNEXPECTED_RESPONSE, split.getSegmentPinotQuery(),\n+                            String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjEwODE5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozODoyOFrOHr20Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTozODoyOFrOHr20Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODk2Mg==", "bodyText": "miss a throw", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515748962", "createdAt": "2020-11-02T05:38:28Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_DATA_FETCH_EXCEPTION;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_INVALID_SEGMENT_QUERY_GENERATED;\n+import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNEXPECTED_RESPONSE;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * This class retrieves Pinot data from a Pinot client, and re-constructs the data into Presto Pages.\n+ */\n+public class PinotSegmentStreamingPageSource\n+        extends PinotSegmentPageSource\n+{\n+    private final PinotStreamingQueryClient pinotStreamingQueryClient;\n+    private Iterator<ServerResponse> serverResponseIterator;\n+    private long completedPositions;\n+\n+    public PinotSegmentStreamingPageSource(\n+            ConnectorSession session,\n+            PinotConfig pinotConfig,\n+            PinotStreamingQueryClient pinotStreamingQueryClient,\n+            PinotSplit split,\n+            List<PinotColumnHandle> columnHandles)\n+    {\n+        super(session, pinotConfig, null, split, columnHandles);\n+        this.pinotStreamingQueryClient = requireNonNull(pinotStreamingQueryClient, \"pinotStreamingQueryClient is null\");\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    /**\n+     * @return constructed page for pinot data.\n+     */\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (closed) {\n+            return null;\n+        }\n+        if (serverResponseIterator == null) {\n+            serverResponseIterator = queryPinot(split);\n+        }\n+        ByteBuffer byteBuffer = null;\n+        try {\n+            // Pinot gRPC server response iterator returns:\n+            //   - n data blocks based on inbound message size;\n+            //   - 1 metadata of the query results.\n+            // So we need to check ResponseType of each ServerResponse.\n+            if (serverResponseIterator.hasNext()) {\n+                long startTimeNanos = System.nanoTime();\n+                ServerResponse serverResponse = serverResponseIterator.next();\n+                readTimeNanos += System.nanoTime() - startTimeNanos;\n+                switch (serverResponse.getResponseType()) {\n+                    case Constants.Response.ResponseType.DATA:\n+                        estimatedMemoryUsageInBytes = serverResponse.getSerializedSize();\n+                        // Store each dataTable which will later be constructed into Pages.\n+                        try {\n+                            byteBuffer = serverResponse.getPayloadReadOnlyByteBuffer();\n+                            DataTable dataTable = serverResponse.getDataTable(byteBuffer);\n+                            checkExceptions(dataTable, split, PinotSessionProperties.isMarkDataFetchExceptionsAsRetriable(session));\n+                            currentDataTable = new PinotSegmentPageSource.PinotDataTableWithSize(dataTable,\n+                                serverResponse.getSerializedSize());\n+                        }\n+                        catch (IOException e) {\n+                            throw new PinotException(PINOT_DATA_FETCH_EXCEPTION, split.getSegmentPinotQuery(), String.format(\"Encountered Pinot exceptions when fetching data table from Split: < %s >\",\n+                                split), e);\n+                        }\n+                        break;\n+                    case Constants.Response.ResponseType.METADATA:\n+                        // The last part of the response is Metadata\n+                        currentDataTable = null;\n+                        serverResponseIterator = null;\n+                        close();\n+                        return null;\n+                    default:\n+                        throw new PinotException(PINOT_UNEXPECTED_RESPONSE, split.getSegmentPinotQuery(),\n+                            String.format(\"Encountered Pinot exceptions, unknown response type - %s\", serverResponse.getResponseType()));\n+                }\n+            }\n+            Page page = fillNextPage();\n+            completedPositions += currentDataTable.getDataTable().getNumberOfRows();\n+            return page;\n+        }\n+        finally {\n+            if (byteBuffer != null) {\n+                byteBuffer.clear();\n+            }\n+        }\n+    }\n+\n+    private Iterator<ServerResponse> queryPinot(PinotSplit split)\n+    {\n+        String sql = split.getSegmentPinotQuery().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the pinot query\"));\n+        String grpcHost = split.getGrpcHost().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the grpc host\"));\n+        int grpcPort = split.getGrpcPort().orElseThrow(() -> new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the segment split to contain the grpc port\"));\n+        if (grpcPort <= 0) {\n+            new PinotException(PINOT_INVALID_SEGMENT_QUERY_GENERATED, Optional.empty(), \"Expected the grpc port > 0 always\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjExMTk0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentStreamingPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo0MDoyNlrOHr22bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo0MDoyNlrOHr22bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0OTQ4NA==", "bodyText": "directly return new Pinot...", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r515749484", "createdAt": "2020-11-02T05:40:26Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentStreamingPageSource.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.pinot.grpc.Constants;\n+import com.facebook.presto.pinot.grpc.GrpcRequestBuilder;\n+import com.facebook.presto.pinot.grpc.PinotStreamingQueryClient;\n+import com.facebook.presto.pinot.grpc.ServerResponse;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataTable;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.pinot.MockPinotClusterInfoFetcher.DEFAULT_GRPC_PORT;\n+\n+public class TestPinotSegmentStreamingPageSource\n+        extends TestPinotSegmentPageSource\n+{\n+    private static final class MockServerResponse\n+            extends ServerResponse\n+    {\n+        private DataTable dataTable;\n+\n+        public MockServerResponse(Server.ServerResponse serverResponse)\n+        {\n+            super(serverResponse);\n+        }\n+\n+        public MockServerResponse(DataTable dataTable)\n+        {\n+            super(null);\n+            this.dataTable = dataTable;\n+        }\n+\n+        public String getResponseType()\n+        {\n+            return Constants.Response.ResponseType.DATA;\n+        }\n+\n+        public int getSerializedSize()\n+        {\n+            return 0;\n+        }\n+\n+        public ByteBuffer getPayloadReadOnlyByteBuffer()\n+        {\n+            try {\n+                return ByteBuffer.wrap(dataTable.toBytes());\n+            }\n+            catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public DataTable getDataTable(ByteBuffer byteBuffer) throws IOException\n+        {\n+            return SimpleDataTable.fromBytes(byteBuffer);\n+        }\n+    }\n+\n+    private static final class MockPinotStreamingQueryClient\n+            extends PinotStreamingQueryClient\n+    {\n+        private final ImmutableList<DataTable> dataTables;\n+\n+        MockPinotStreamingQueryClient(PinotStreamingQueryClient.Config pinotConfig, List<DataTable> dataTables)\n+        {\n+            super(pinotConfig);\n+            this.dataTables = ImmutableList.copyOf(dataTables);\n+        }\n+\n+        @Override\n+        public Iterator<ServerResponse> submit(String host, int port, GrpcRequestBuilder requestBuilder)\n+        {\n+            return new Iterator<ServerResponse>()\n+            {\n+                int index;\n+\n+                @Override\n+                public boolean hasNext()\n+                {\n+                    return index < dataTables.size();\n+                }\n+\n+                @Override\n+                public ServerResponse next()\n+                {\n+                    return new MockServerResponse(dataTables.get(index++));\n+                }\n+            };\n+        }\n+    }\n+\n+    @Override\n+    PinotSegmentPageSource getPinotSegmentPageSource(\n+            ConnectorSession session,\n+            List<DataTable> dataTables,\n+            PinotSplit mockPinotSplit,\n+            List<PinotColumnHandle> handlesSurviving)\n+    {\n+        MockPinotStreamingQueryClient mockPinotQueryClient = new MockPinotStreamingQueryClient(new PinotStreamingQueryClient.Config(pinotConfig.getStreamingServerGrpcMaxInboundMessageSize(), true), dataTables);\n+        PinotSegmentPageSource pinotSegmentPageSource = new PinotSegmentStreamingPageSource(session, pinotConfig, mockPinotQueryClient, mockPinotSplit, handlesSurviving);\n+        return pinotSegmentPageSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff425cf680a314456e8d69c68c2eb69472c3f1"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3514, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}