{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzk2NDQ1", "number": 14463, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowNTozNFrOD4MCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMToyMTozMFrOD4Qqog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ0MDc3OnYy", "diffSide": "RIGHT", "path": "presto-bytecode/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowNTozNFrOGO4cDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxODozMlrOGO6s6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NzkzMw==", "bodyText": "Is this necessary?", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418257933", "createdAt": "2020-04-30T20:05:34Z", "author": {"login": "rongrong"}, "path": "presto-bytecode/pom.xml", "diffHunk": "@@ -61,6 +61,10 @@\n             <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTAxNw==", "bodyText": "Removed", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418295017", "createdAt": "2020-04-30T21:18:32Z", "author": {"login": "kaikalur"}, "path": "presto-bytecode/pom.xml", "diffHunk": "@@ -61,6 +61,10 @@\n             <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NzkzMw=="}, "originalCommit": {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ0NTQ5OnYy", "diffSide": "RIGHT", "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowNzowN1rOGO4fCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxMjoxMFrOGO6g7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA==", "bodyText": "Can we have this throw some bytecode specific exception and catch that in presto-main so we don't need to introduce dependency to spi in bytecode? presto-bytecode should be a pretty low level independent package.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418258698", "createdAt": "2020-04-30T20:07:07Z", "author": {"login": "rongrong"}, "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java", "diffHunk": "@@ -124,6 +129,21 @@ public ClassGenerator dumpClassFilesTo(Optional<Path> dumpClassPath)\n         Map<String, byte[]> bytecodes = new LinkedHashMap<>();\n \n         for (ClassDefinition classDefinition : classDefinitions) {\n+            // We call the simpler class writer first to get any errors out using simpler setting.\n+            // This helps when we have large queries that can potentially cause COMPUTE_FRAMES\n+            // (used by SmartClassWriter for doing more thorough analysis)\n+            ClassWriter simpleClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+            classDefinition.visit(simpleClassWriter);\n+            try {\n+                simpleClassWriter.toByteArray();\n+            }\n+            catch (ClassTooLargeException | MethodTooLargeException largeCodeException) {\n+                throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MjE2Mg==", "bodyText": "too many places. I guess we need big refactoring :(", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418272162", "createdAt": "2020-04-30T20:33:23Z", "author": {"login": "kaikalur"}, "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java", "diffHunk": "@@ -124,6 +129,21 @@ public ClassGenerator dumpClassFilesTo(Optional<Path> dumpClassPath)\n         Map<String, byte[]> bytecodes = new LinkedHashMap<>();\n \n         for (ClassDefinition classDefinition : classDefinitions) {\n+            // We call the simpler class writer first to get any errors out using simpler setting.\n+            // This helps when we have large queries that can potentially cause COMPUTE_FRAMES\n+            // (used by SmartClassWriter for doing more thorough analysis)\n+            ClassWriter simpleClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+            classDefinition.visit(simpleClassWriter);\n+            try {\n+                simpleClassWriter.toByteArray();\n+            }\n+            catch (ClassTooLargeException | MethodTooLargeException largeCodeException) {\n+                throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA=="}, "originalCommit": {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MTk0OA==", "bodyText": "OK moved it CompilerUtils and handling it there.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418291948", "createdAt": "2020-04-30T21:12:10Z", "author": {"login": "kaikalur"}, "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java", "diffHunk": "@@ -124,6 +129,21 @@ public ClassGenerator dumpClassFilesTo(Optional<Path> dumpClassPath)\n         Map<String, byte[]> bytecodes = new LinkedHashMap<>();\n \n         for (ClassDefinition classDefinition : classDefinitions) {\n+            // We call the simpler class writer first to get any errors out using simpler setting.\n+            // This helps when we have large queries that can potentially cause COMPUTE_FRAMES\n+            // (used by SmartClassWriter for doing more thorough analysis)\n+            ClassWriter simpleClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+            classDefinition.visit(simpleClassWriter);\n+            try {\n+                simpleClassWriter.toByteArray();\n+            }\n+            catch (ClassTooLargeException | MethodTooLargeException largeCodeException) {\n+                throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA=="}, "originalCommit": {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwMDA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNjo0N1rOGO677Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyNTo0OVrOGO8dGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ==", "bodyText": "If you unwrap looking for a specific exception you should keep going until you find it and not just one level.\nI think maybe you want to wrap in a new PrestoException with the contents of the wrapped PrestoException.\nYou lose less (admittedly not that important) information that way.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418298861", "createdAt": "2020-04-30T21:26:47Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1315,7 +1315,11 @@ private PhysicalOperation visitScanFilterAndProject(\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (RuntimeException e) {\n+            catch (Exception e) {\n+                if (e.getCause() instanceof  PrestoException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d510093daa5c0310a29baed588081a97672fc486"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA4Ng==", "bodyText": "I was hoping none wraps PrestoException in another PrestoException.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418302086", "createdAt": "2020-04-30T21:33:56Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1315,7 +1315,11 @@ private PhysicalOperation visitScanFilterAndProject(\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (RuntimeException e) {\n+            catch (Exception e) {\n+                if (e.getCause() instanceof  PrestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}, "originalCommit": {"oid": "d510093daa5c0310a29baed588081a97672fc486"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzU4MQ==", "bodyText": "I was hoping none wraps PrestoException in another PrestoException. Also I'm just mimicking the previous catch PrestoException. I have seen that pattern a few places - if you get PrestoException you just throw it again.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418303581", "createdAt": "2020-04-30T21:37:16Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1315,7 +1315,11 @@ private PhysicalOperation visitScanFilterAndProject(\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (RuntimeException e) {\n+            catch (Exception e) {\n+                if (e.getCause() instanceof  PrestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}, "originalCommit": {"oid": "d510093daa5c0310a29baed588081a97672fc486"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMzczNw==", "bodyText": "So I reverted back to the old code as the flow doesn't seem to be relevant for user queries. We still block it but the message is different.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418323737", "createdAt": "2020-04-30T22:25:49Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1315,7 +1315,11 @@ private PhysicalOperation visitScanFilterAndProject(\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (RuntimeException e) {\n+            catch (Exception e) {\n+                if (e.getCause() instanceof  PrestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}, "originalCommit": {"oid": "d510093daa5c0310a29baed588081a97672fc486"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjg3OTIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozMjo1MlrOGO8n_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo0OTo0NFrOGO_Hig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw==", "bodyText": "What's the point of this code? I think you want to catch ByteCodeTooLargeException?", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418326527", "createdAt": "2020-04-30T22:32:52Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -191,6 +191,9 @@ public CacheStatsMBean getFilterCache()\n         try {\n             pageProjectionWorkClass = defineClass(pageProjectionWorkDefinition, Work.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n         }\n+        catch (PrestoException prestoException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjgxOA==", "bodyText": "Oh i see you did that in CompilerUtils so this should not be needed?", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418326818", "createdAt": "2020-04-30T22:33:41Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -191,6 +191,9 @@ public CacheStatsMBean getFilterCache()\n         try {\n             pageProjectionWorkClass = defineClass(pageProjectionWorkDefinition, Work.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n         }\n+        catch (PrestoException prestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjE3OA==", "bodyText": "So if I don't have it here, it's not getting surfaced as user error. It will become COMPILER_ERROR which we don't want", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418356178", "createdAt": "2020-05-01T00:07:39Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -191,6 +191,9 @@ public CacheStatsMBean getFilterCache()\n         try {\n             pageProjectionWorkClass = defineClass(pageProjectionWorkDefinition, Work.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n         }\n+        catch (PrestoException prestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NzM3MA==", "bodyText": "what? why? that doesn't make sense? Why catching and rethrow it would change the error type?", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418367370", "createdAt": "2020-05-01T00:49:44Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -191,6 +191,9 @@ public CacheStatsMBean getFilterCache()\n         try {\n             pageProjectionWorkClass = defineClass(pageProjectionWorkDefinition, Work.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n         }\n+        catch (PrestoException prestoException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjg4NDc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozNToxNFrOGO8rRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzowMToxOVrOGO9N9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNzM2Ng==", "bodyText": "This is not needed if you already handles the exception in the other method?", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418327366", "createdAt": "2020-04-30T22:35:14Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -54,12 +60,20 @@ public static ParameterizedType makeClassName(String baseName)\n \n     public static <T> Class<? extends T> defineClass(ClassDefinition classDefinition, Class<T> superType, Map<Long, MethodHandle> callSiteBindings, ClassLoader parentClassLoader)\n     {\n-        return defineClass(classDefinition, superType, new DynamicClassLoader(parentClassLoader, callSiteBindings));\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNjI0Nw==", "bodyText": "both were public so I just added it :) now removed.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418336247", "createdAt": "2020-04-30T23:01:19Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -54,12 +60,20 @@ public static ParameterizedType makeClassName(String baseName)\n \n     public static <T> Class<? extends T> defineClass(ClassDefinition classDefinition, Class<T> superType, Map<Long, MethodHandle> callSiteBindings, ClassLoader parentClassLoader)\n     {\n-        return defineClass(classDefinition, superType, new DynamicClassLoader(parentClassLoader, callSiteBindings));\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNzM2Ng=="}, "originalCommit": {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzE5ODY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMToyMToxNlrOGO_k0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowNTo0NlrOGPC6RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDg2Nw==", "bodyText": "remove extra newline. This won't pass style check.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418374867", "createdAt": "2020-05-01T01:21:16Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad7201c20098cb2edde6aa19b74ab13a33142a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTUwOQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418429509", "createdAt": "2020-05-01T06:05:46Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDg2Nw=="}, "originalCommit": {"oid": "3ad7201c20098cb2edde6aa19b74ab13a33142a5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzE5OTA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMToyMTozMFrOGO_lEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowNTozMlrOGPC6IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDkyOA==", "bodyText": "also remove the newline on line 42.", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418374928", "createdAt": "2020-05-01T01:21:30Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad7201c20098cb2edde6aa19b74ab13a33142a5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTQ3Mw==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418429473", "createdAt": "2020-05-01T06:05:32Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDkyOA=="}, "originalCommit": {"oid": "3ad7201c20098cb2edde6aa19b74ab13a33142a5"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}