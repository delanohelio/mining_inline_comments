{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjEyODgx", "number": 15563, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNTo0NDowMlrOFKTZRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1OTo0OVrOFRKX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzQ3ODQ1OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNTo0NDowMlrOINAVNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTozNjoyOVrOIN-ZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNzgyOQ==", "bodyText": "since it's really just a type + a name, should we call this a NamedType instead?\n(semantic implies that it's a type that contains info about the meaning of your data, but you could have a  semantic type that is anonymous)", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r550507829", "createdAt": "2020-12-31T15:44:02Z", "author": {"login": "daniel-ohayon"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemanticType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxMTAyMQ==", "bodyText": "another thought: this looks a lot like an early version of what the SQL2016 spec calls a \"distinct type\"\n\"The definition of a distinct type specifies its name and the name of its source type.\" (section 4.7.2)", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r550511021", "createdAt": "2020-12-31T15:58:02Z", "author": {"login": "daniel-ohayon"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemanticType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNzgyOQ=="}, "originalCommit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxMjIzMA==", "bodyText": "if we ever wanted to support \"opaque alias types\" like\nKilogram as bigint and gram as bigint\nsuch that\nCAST(5 as kilogram) = cast(3 as gram)\n\nis a type-checking error, would this design allow for that?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r550512230", "createdAt": "2020-12-31T15:59:47Z", "author": {"login": "daniel-ohayon"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemanticType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNzgyOQ=="}, "originalCommit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyNDY1MQ==", "bodyText": "Ya I thought about calling it NamedType instead. It kinda depends on whether we want to make this specific to external types, or change this to be something more fundamentally used in parser (BIGINT the physical type can also have a corresponding semantic type BIGINT).", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r551524651", "createdAt": "2021-01-04T19:36:29Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemanticType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNzgyOQ=="}, "originalCommit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODI0NzYxOnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo1NDozMFrOIQg1Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo1OTo0M1rOIQg-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4NTk5NQ==", "bodyText": "Maybe I don't have the full picture. Why is this changed from start to end?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r554185995", "createdAt": "2021-01-08T20:54:30Z", "author": {"login": "caithagoras"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -252,7 +260,7 @@ VarcharEnumMap getVarcharEnumMap()\n         Set<Integer> indices = new HashSet<>();\n         Matcher enumMatcher = ENUM_PREFIX.matcher(signature);\n         while (enumMatcher.find()) {\n-            indices.add(enumMatcher.start());\n+            indices.add(enumMatcher.end());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "365f5df443e2357574ee86fe3e57c81a5e8a4dc9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4ODM0Ng==", "bodyText": "The enum signature format is changed from typename(enum:type{enum_map}) to\nenumtype(typename{enum_map})", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r554188346", "createdAt": "2021-01-08T20:59:43Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -252,7 +260,7 @@ VarcharEnumMap getVarcharEnumMap()\n         Set<Integer> indices = new HashSet<>();\n         Matcher enumMatcher = ENUM_PREFIX.matcher(signature);\n         while (enumMatcher.find()) {\n-            indices.add(enumMatcher.start());\n+            indices.add(enumMatcher.end());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4NTk5NQ=="}, "originalCommit": {"oid": "365f5df443e2357574ee86fe3e57c81a5e8a4dc9"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAwMjY4OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/BigintEnumType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoxOTo1NVrOISMCZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoxNzozOFrOITMo2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MjUwMA==", "bodyText": "Is case sensitivity taken care of here?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555942500", "createdAt": "2021-01-12T17:19:55Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/BigintEnumType.java", "diffHunk": "@@ -157,7 +162,7 @@ public boolean equals(Object o)\n             return false;\n         }\n \n-        LongEnumType other = (LongEnumType) o;\n+        BigintEnumType other = (BigintEnumType) o;\n \n         return Objects.equals(getTypeSignature().getBase(), other.getTypeSignature().getBase())\n                 && Objects.equals(getEnumMap(), other.getEnumMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwMDkyMg==", "bodyText": "Hmm, the enum mapping should be case sensitive. The type name probably should not.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r557000922", "createdAt": "2021-01-14T02:17:38Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/BigintEnumType.java", "diffHunk": "@@ -157,7 +162,7 @@ public boolean equals(Object o)\n             return false;\n         }\n \n-        LongEnumType other = (LongEnumType) o;\n+        BigintEnumType other = (BigintEnumType) o;\n \n         return Objects.equals(getTypeSignature().getBase(), other.getTypeSignature().getBase())\n                 && Objects.equals(getEnumMap(), other.getEnumMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MjUwMA=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAwOTg1OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/StandardTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyMTo0M1rOISMG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoxNDozNFrOITMk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MzY2Mw==", "bodyText": "Is this user visible? The names are a bit odd. Not sure if  enum will work better", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555943663", "createdAt": "2021-01-12T17:21:43Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/StandardTypes.java", "diffHunk": "@@ -45,6 +45,8 @@\n     public static final String IPPREFIX = \"ipprefix\";\n     public static final String GEOMETRY = \"Geometry\";\n     public static final String BING_TILE = \"BingTile\";\n+    public static final String BIGINT_ENUM = \"BigintEnum\";\n+    public static final String VARCHAR_ENUM = \"VarcharEnum\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5OTkzNA==", "bodyText": "There are 2 types of enums and they cannot be both of type \"enum\". This would be visible in error messages and plans. If you have better suggestions I'm all ears.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r556999934", "createdAt": "2021-01-14T02:14:34Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/StandardTypes.java", "diffHunk": "@@ -45,6 +45,8 @@\n     public static final String IPPREFIX = \"ipprefix\";\n     public static final String GEOMETRY = \"Geometry\";\n     public static final String BING_TILE = \"BingTile\";\n+    public static final String BIGINT_ENUM = \"BigintEnum\";\n+    public static final String VARCHAR_ENUM = \"VarcharEnum\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MzY2Mw=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAxMjQ5OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyMjoyMlrOISMImw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoxMzoxM1rOITMjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDA5MQ==", "bodyText": "Why ENGLISH?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555944091", "createdAt": "2021-01-12T17:22:22Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -219,31 +222,36 @@ else if (c == ',') {\n     private static class EnumMapParsingData\n     {\n         final int mapEndIndex;\n+        private final String typeName;\n         private final Map<String, String> map;\n-        final boolean isLongEnum;\n+        private final boolean isBigintEnum;\n \n-        EnumMapParsingData(int mapEndIndex, Map<String, String> map, boolean isLongEnum)\n+        EnumMapParsingData(int mapEndIndex, String typeName, Map<String, String> map, boolean isBigintEnum)\n         {\n             this.mapEndIndex = mapEndIndex;\n+            this.typeName = typeName;\n             this.map = map;\n-            this.isLongEnum = isLongEnum;\n+            this.isBigintEnum = isBigintEnum;\n         }\n \n         LongEnumMap getLongEnumMap()\n         {\n-            checkArgument(isLongEnum, \"Invalid enum map format\");\n+            checkArgument(isBigintEnum, \"Invalid enum map format\");\n             return new LongEnumMap(\n+                    typeName,\n                     map.entrySet().stream()\n                             .collect(Collectors.toMap(Map.Entry::getKey, e -> Long.parseLong(e.getValue()))));\n         }\n \n         VarcharEnumMap getVarcharEnumMap()\n         {\n-            checkArgument(!isLongEnum, \"Invalid enum map format\");\n+            checkArgument(!isBigintEnum, \"Invalid enum map format\");\n             // Varchar enum values are base32-encoded so that they are case-insensitive, which is expected of TypeSigntures\n             Base32 base32 = new Base32();\n-            return new VarcharEnumMap(map.entrySet().stream()\n-                    .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));\n+            return new VarcharEnumMap(\n+                    typeName,\n+                    map.entrySet().stream()\n+                            .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5OTU1MQ==", "bodyText": "I don't know... That's what's used in code in similar situations. It's no longer recommended to not providing a locale.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r556999551", "createdAt": "2021-01-14T02:13:13Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -219,31 +222,36 @@ else if (c == ',') {\n     private static class EnumMapParsingData\n     {\n         final int mapEndIndex;\n+        private final String typeName;\n         private final Map<String, String> map;\n-        final boolean isLongEnum;\n+        private final boolean isBigintEnum;\n \n-        EnumMapParsingData(int mapEndIndex, Map<String, String> map, boolean isLongEnum)\n+        EnumMapParsingData(int mapEndIndex, String typeName, Map<String, String> map, boolean isBigintEnum)\n         {\n             this.mapEndIndex = mapEndIndex;\n+            this.typeName = typeName;\n             this.map = map;\n-            this.isLongEnum = isLongEnum;\n+            this.isBigintEnum = isBigintEnum;\n         }\n \n         LongEnumMap getLongEnumMap()\n         {\n-            checkArgument(isLongEnum, \"Invalid enum map format\");\n+            checkArgument(isBigintEnum, \"Invalid enum map format\");\n             return new LongEnumMap(\n+                    typeName,\n                     map.entrySet().stream()\n                             .collect(Collectors.toMap(Map.Entry::getKey, e -> Long.parseLong(e.getValue()))));\n         }\n \n         VarcharEnumMap getVarcharEnumMap()\n         {\n-            checkArgument(!isLongEnum, \"Invalid enum map format\");\n+            checkArgument(!isBigintEnum, \"Invalid enum map format\");\n             // Varchar enum values are base32-encoded so that they are case-insensitive, which is expected of TypeSigntures\n             Base32 base32 = new Base32();\n-            return new VarcharEnumMap(map.entrySet().stream()\n-                    .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));\n+            return new VarcharEnumMap(\n+                    typeName,\n+                    map.entrySet().stream()\n+                            .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDA5MQ=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAxNjQ4OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyMzoyMFrOISMLGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoxMjoyOFrOITMipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDcyOA==", "bodyText": "Is the signature already case normalized?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555944728", "createdAt": "2021-01-12T17:23:20Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -273,13 +281,14 @@ VarcharEnumMap getVarcharEnumMap()\n     private static EnumMapParsingData parseEnumMap(String signature, int startIndex)\n     {\n         EnumMapParsingState state = EnumMapParsingState.EXPECT_KEY;\n-        boolean isLongEnum = signature.substring(startIndex).trim().toLowerCase(ENGLISH).startsWith(LONG_ENUM_PREFIX);\n-        int openBracketIndex = startIndex + (isLongEnum ? LONG_ENUM_PREFIX.length() : VARCHAR_ENUM_PREFIX.length()) + 1;\n+        boolean isBigintEnum = signature.startsWith(BIGINT_ENUM_PREFIX, startIndex - BIGINT_ENUM_PREFIX.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5OTMzMg==", "bodyText": "Yes, the caller normalized the signature before calling. There are tests cases to test this as well.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r556999332", "createdAt": "2021-01-14T02:12:28Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -273,13 +281,14 @@ VarcharEnumMap getVarcharEnumMap()\n     private static EnumMapParsingData parseEnumMap(String signature, int startIndex)\n     {\n         EnumMapParsingState state = EnumMapParsingState.EXPECT_KEY;\n-        boolean isLongEnum = signature.substring(startIndex).trim().toLowerCase(ENGLISH).startsWith(LONG_ENUM_PREFIX);\n-        int openBracketIndex = startIndex + (isLongEnum ? LONG_ENUM_PREFIX.length() : VARCHAR_ENUM_PREFIX.length()) + 1;\n+        boolean isBigintEnum = signature.startsWith(BIGINT_ENUM_PREFIX, startIndex - BIGINT_ENUM_PREFIX.length() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDcyOA=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAyMTYyOnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/UserDefinedType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyNDozMFrOISMOHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoxMToyMlrOITMhfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NTUwMg==", "bodyText": "Why qualified? Can it be just a simple id?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555945502", "createdAt": "2021-01-12T17:24:30Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/UserDefinedType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class UserDefinedType\n+{\n+    private final QualifiedObjectName name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5OTAzNg==", "bodyText": "No, all external types are managed by FunctionNamespaceManager, which manages catalogs. This is also aligned with the spec as <schema-resolved user-defined type name>.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r556999036", "createdAt": "2021-01-14T02:11:22Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/UserDefinedType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class UserDefinedType\n+{\n+    private final QualifiedObjectName name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NTUwMg=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAzNTY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyNzo0M1rOISMWwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjowODo1NlrOITMeqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzcxMw==", "bodyText": "What is a \"static type\"?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555947713", "createdAt": "2021-01-12T17:27:43Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -199,18 +191,16 @@ public Type getType(TypeSignature signature)\n             if (type.isPresent()) {\n                 return type.get();\n             }\n-            try {\n-                return parametricTypeCache.getUnchecked(signature);\n-            }\n-            catch (UncheckedExecutionException e) {\n-                throwIfUnchecked(e.getCause());\n-                throw new RuntimeException(e.getCause());\n-            }\n         }\n \n         Optional<FunctionNamespaceManager<?>> functionNamespaceManager = getServingFunctionNamespaceManager(signature.getTypeSignatureBase());\n         checkArgument(functionNamespaceManager.isPresent(), \"Cannot find function namespace for type '%s'\", signature.getBase());\n-        return instantiateParametricType(signature, functionNamespaceManager.get());\n+        Optional<UserDefinedType> userDefinedType = functionNamespaceManager.get().getUserDefinedType(signature.getTypeSignatureBase().getQualifiedObjectName());\n+        if (!userDefinedType.isPresent()) {\n+            throw new IllegalArgumentException(\"Unknown type \" + signature);\n+        }\n+        checkArgument(userDefinedType.get().getPhysicalTypeSignature().getTypeSignatureBase().isStandardType(), \"UserDefinedType must be based on static types.\");\n+        return getType(userDefinedType.get().getPhysicalTypeSignature());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5ODMxNQ==", "bodyText": "Built in types / types that's defined in code thus cannot be changed. Do you have a better name for them? I can use \"standard types\", which is sort of true. At least they are all defined in StandardTypes.java. Though they are not really the \"standard type\" in the spec.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r556998315", "createdAt": "2021-01-14T02:08:56Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -199,18 +191,16 @@ public Type getType(TypeSignature signature)\n             if (type.isPresent()) {\n                 return type.get();\n             }\n-            try {\n-                return parametricTypeCache.getUnchecked(signature);\n-            }\n-            catch (UncheckedExecutionException e) {\n-                throwIfUnchecked(e.getCause());\n-                throw new RuntimeException(e.getCause());\n-            }\n         }\n \n         Optional<FunctionNamespaceManager<?>> functionNamespaceManager = getServingFunctionNamespaceManager(signature.getTypeSignatureBase());\n         checkArgument(functionNamespaceManager.isPresent(), \"Cannot find function namespace for type '%s'\", signature.getBase());\n-        return instantiateParametricType(signature, functionNamespaceManager.get());\n+        Optional<UserDefinedType> userDefinedType = functionNamespaceManager.get().getUserDefinedType(signature.getTypeSignatureBase().getQualifiedObjectName());\n+        if (!userDefinedType.isPresent()) {\n+            throw new IllegalArgumentException(\"Unknown type \" + signature);\n+        }\n+        checkArgument(userDefinedType.get().getPhysicalTypeSignature().getTypeSignatureBase().isStandardType(), \"UserDefinedType must be based on static types.\");\n+        return getType(userDefinedType.get().getPhysicalTypeSignature());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzcxMw=="}, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNTQwMDUxOnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1OTo0OVrOIXb47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMjozNTowN1rOIXfW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0NTEwMQ==", "bodyText": "Is the order the same as the user given? That might be good.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r561445101", "createdAt": "2021-01-21T00:59:49Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "diffHunk": "@@ -114,25 +123,22 @@ public boolean equals(Object o)\n \n             LongEnumMap other = (LongEnumMap) o;\n \n-            return Objects.equals(this.enumMap, other.enumMap);\n+            return Objects.equals(typeName, other.typeName) && Objects.equals(enumMap, other.enumMap);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"enum:bigint{\"\n-                    + enumMap.entrySet()\n-                    .stream()\n+            return format(\"%s{%s}\", typeName, enumMap.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91639d87cddb531f812798c6d6b1dc942c533fa"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTUwMTk0Mw==", "bodyText": "Depending on how it's stored at the source it might or might not be possible to have the order as \"user given\". Since we are implementing it as map, that's not really possible. I don't want to make this like a map block that's too complicated. \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r561501943", "createdAt": "2021-01-21T02:35:07Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "diffHunk": "@@ -114,25 +123,22 @@ public boolean equals(Object o)\n \n             LongEnumMap other = (LongEnumMap) o;\n \n-            return Objects.equals(this.enumMap, other.enumMap);\n+            return Objects.equals(typeName, other.typeName) && Objects.equals(enumMap, other.enumMap);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"enum:bigint{\"\n-                    + enumMap.entrySet()\n-                    .stream()\n+            return format(\"%s{%s}\", typeName, enumMap.entrySet().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0NTEwMQ=="}, "originalCommit": {"oid": "f91639d87cddb531f812798c6d6b1dc942c533fa"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3319, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}