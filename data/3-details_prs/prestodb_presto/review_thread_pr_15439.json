{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODQwNTMy", "number": 15439, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTozOToxM1rOE5sq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzowMTo1MVrOE6bKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTM2MTYyOnYy", "diffSide": "LEFT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTozOToxM1rOH0UEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1Njo0MVrOH1O5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxNjczNg==", "bodyText": "Is this an intentional change?", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524616736", "createdAt": "2020-11-16T21:39:13Z", "author": {"login": "sdruzkin"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2062,7 +2062,6 @@ public void testMaps()\n         assertQuery(\"SELECT col['puppies'] FROM tmp_map6\", \"SELECT 'kittens'\");\n \n         assertUpdate(\"CREATE TABLE tmp_map7 AS SELECT MAP(ARRAY[TRUE], ARRAY[FALSE]) AS col\", 1);\n-        assertQuery(\"SELECT col[TRUE] FROM tmp_map7\", \"SELECT FALSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDcxNw==", "bodyText": "No, thanks for the catch.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525580717", "createdAt": "2020-11-17T22:56:41Z", "author": {"login": "yingsu00"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2062,7 +2062,6 @@ public void testMaps()\n         assertQuery(\"SELECT col['puppies'] FROM tmp_map6\", \"SELECT 'kittens'\");\n \n         assertUpdate(\"CREATE TABLE tmp_map7 AS SELECT MAP(ARRAY[TRUE], ARRAY[FALSE]) AS col\", 1);\n-        assertQuery(\"SELECT col[TRUE] FROM tmp_map7\", \"SELECT FALSE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxNjczNg=="}, "originalCommit": {"oid": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTM5NzMwOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NDo0MFrOH0UcYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NDo0MFrOH0UcYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMjk0NQ==", "bodyText": "lengthVectorIndex can be replaced with i", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524622945", "createdAt": "2020-11-16T21:44:40Z", "author": {"login": "sdruzkin"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "diffHunk": "@@ -138,4 +164,39 @@ public static void convertLengthVectorToOffsetVector(int[] vector)\n             currentLength = nextLength;\n         }\n     }\n+\n+    public static void convertLengthVectorToOffsetVector(int[] lengthVector, boolean[] isNullVector, int positionCount, int[] offsetVector)\n+    {\n+        offsetVector[0] = 0;\n+        int lengthVectorIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            if (isNullVector[i]) {\n+                offsetVector[i + 1] = offsetVector[i];\n+            }\n+            else {\n+                offsetVector[i + 1] = offsetVector[i] + lengthVector[lengthVectorIndex++];\n+            }\n+        }\n+    }\n+\n+    public static void convertLengthVectorToOffsetVector(int[] lengthVector, int positionCount, int[] offsetVector)\n+    {\n+        offsetVector[0] = 0;\n+        int lengthVectorIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            offsetVector[i + 1] = offsetVector[i] + lengthVector[lengthVectorIndex++];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTY3ODgxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyMDozMVrOH0XcCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyMDozMVrOH0XcCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MjAxMA==", "bodyText": "would be nice to wrap this comment", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524672010", "createdAt": "2020-11-16T22:20:31Z", "author": {"login": "sdruzkin"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,46 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;\n             data = ensureCapacity(data, maxLength);\n+            if (useBatchMode(positionCount, totalPositions) && filter != null) {\n+                offsets = ensureCapacity(offsets, totalPositions + 1);\n+            }\n         }\n \n         dataAsSlice = Slices.wrappedBuffer(data);\n+        return dataLength;\n+    }\n+\n+    private boolean useBatchMode(int positionCount, int totalPositionCount)\n+    {\n+        // maxCodePointCount < 0 means it's unbounded varchar\n+        if (lengthStream == null || maxCodePointCount >= 0) {\n+            return false;\n+        }\n+\n+        double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n+        if (filter == null) {  // readNoFilter\n+            // When there is no filter, batch mode performs better for almost all inputFilterRate. But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg4NzY0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjoyNDoyM1rOH1ew2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODoyNTo1M1rOH1iH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MDYwMA==", "bodyText": "offsets[0] is not initialized to 0 ? Though this may be safe, as java initializes the array values to 0.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525840600", "createdAt": "2020-11-18T06:24:23Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "diffHunk": "@@ -72,6 +72,32 @@ public static void unpackByteNulls(byte[] values, boolean[] isNull, int position\n         }\n     }\n \n+    public static void packByteArrayOffsetsAndNulls(byte[] values, int[] offsets, boolean[] nulls, int[] positions, int positionCount)\n+    {\n+        int valuesIndex = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg5NTY0Nw==", "bodyText": "offset[0] is always 0 in the reader as the position starts from 0.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525895647", "createdAt": "2020-11-18T08:25:53Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "diffHunk": "@@ -72,6 +72,32 @@ public static void unpackByteNulls(byte[] values, boolean[] isNull, int position\n         }\n     }\n \n+    public static void packByteArrayOffsetsAndNulls(byte[] values, int[] offsets, boolean[] nulls, int[] positions, int positionCount)\n+    {\n+        int valuesIndex = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MDYwMA=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg5NTkzOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjoyODoxNFrOH1e17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0MTo0M1rOH1itfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MTkwMQ==", "bodyText": "can the positionCount be 0 ?", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525841901", "createdAt": "2020-11-18T06:28:14Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTI3OQ==", "bodyText": "No. The positionCount comes from the batchSize in OrcSelectiveRecordReader and it starts with 1 and onwards. After each read, if output positionCount is 0, it will cause early termination of the StreamReader read loop in OrcSelectiveRecordReader.getNextPage()", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525905279", "createdAt": "2020-11-18T08:41:43Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MTkwMQ=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjkxMTgxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjozNDo1OVrOH1e_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1MTo1NlrOH1jGlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NDMxNA==", "bodyText": "Reading the comment and this line is little confusing. Can you please add comment on Why this is enabled only for unboundedVarchar ?", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525844314", "createdAt": "2020-11-18T06:34:59Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;\n             data = ensureCapacity(data, maxLength);\n+            if (useBatchMode(positionCount, totalPositions) && filter != null) {\n+                offsets = ensureCapacity(offsets, totalPositions + 1);\n+            }\n         }\n \n         dataAsSlice = Slices.wrappedBuffer(data);\n+        return dataLength;\n+    }\n+\n+    private boolean useBatchMode(int positionCount, int totalPositionCount)\n+    {\n+        // maxCodePointCount < 0 means it's unbounded varchar\n+        if (lengthStream == null || maxCodePointCount >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMTcwMA==", "bodyText": "If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated. Please see line 290 where length truncation happens.\nint truncatedLength = computeTruncatedLength(dataAsSlice, dataOffset, length, maxCodePointCount, isCharType);\noffsets[outputPositionCount + 1] = offset + truncatedLength;\n\nI added the following comments. Does that help?\n// maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525911700", "createdAt": "2020-11-18T08:51:56Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;\n             data = ensureCapacity(data, maxLength);\n+            if (useBatchMode(positionCount, totalPositions) && filter != null) {\n+                offsets = ensureCapacity(offsets, totalPositions + 1);\n+            }\n         }\n \n         dataAsSlice = Slices.wrappedBuffer(data);\n+        return dataLength;\n+    }\n+\n+    private boolean useBatchMode(int positionCount, int totalPositionCount)\n+    {\n+        // maxCodePointCount < 0 means it's unbounded varchar\n+        if (lengthStream == null || maxCodePointCount >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NDMxNA=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjkyNTY2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo0MDo0OFrOH1fHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo0MDo0OFrOH1fHLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NjMxNw==", "bodyText": "nit: you can mark this final and defer initialization. Java compiler will throw error, when it is not set in all paths.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525846317", "createdAt": "2020-11-18T06:40:48Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -184,9 +219,43 @@ private int readNoFilter(int[] positions, int positionCount)\n         return streamPosition;\n     }\n \n-    private int readWithFilter(int[] positions, int positionCount)\n+    private int readWithFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        int totalPositionCount = positions[positionCount - 1] + 1;\n+        if (useBatchMode(positionCount, totalPositionCount)) {\n+            if (dataStream != null) {\n+                dataStream.next(data, 0, dataLength);\n+            }\n+\n+            int filteredPositionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjkzOTgxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo0NjoyN1rOH1fPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1ODo1OFrOH1jYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0ODQwMA==", "bodyText": "The other code path sets nulls array unconditionally, why is the nullsAllowed condition added here ?", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525848400", "createdAt": "2020-11-18T06:46:27Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;\n+        if (useBatchMode(positionCount, totalPositionCount)) {\n+            if (presentStream == null) {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+\n+                    if (totalPositionCount > positionCount) {\n+                        packByteArrayAndOffsets(data, offsets, positions, positionCount);\n+                    }\n+                }\n+            }\n+            else {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, isNullVector, totalPositionCount, offsets);\n+                }\n+\n+                if (totalPositionCount > positionCount) {\n+                    packByteArrayOffsetsAndNulls(data, offsets, isNullVector, positions, positionCount);\n+                }\n+\n+                if (nullsAllowed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxNjM2Nw==", "bodyText": "Both readNoFilter and readWithFilter had this check. This is because the nulls vector was created when presentStream != null && nullsAllowed.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525916367", "createdAt": "2020-11-18T08:58:58Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;\n+        if (useBatchMode(positionCount, totalPositionCount)) {\n+            if (presentStream == null) {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+\n+                    if (totalPositionCount > positionCount) {\n+                        packByteArrayAndOffsets(data, offsets, positions, positionCount);\n+                    }\n+                }\n+            }\n+            else {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, isNullVector, totalPositionCount, offsets);\n+                }\n+\n+                if (totalPositionCount > positionCount) {\n+                    packByteArrayOffsetsAndNulls(data, offsets, isNullVector, positions, positionCount);\n+                }\n+\n+                if (nullsAllowed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0ODQwMA=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njk1NTg3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1Mjo0MlrOH1fYkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToxMTo1MlrOH1j46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDc3MA==", "bodyText": "positionCount must be greater than 0 here as the first line in the method calls\nint totalPositionCount = positions[positionCount - 1] + 1;", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525850770", "createdAt": "2020-11-18T06:52:42Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -331,6 +400,79 @@ private void skipData(int start, int items)\n         }\n     }\n \n+    // No nulls\n+    private int evaluateFilter(int[] positions, int positionCount)\n+    {\n+        int positionsIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            int position = positions[i];\n+            if (filter.testLength(lengthVector[position])) {\n+                outputPositions[positionsIndex++] = position;  // compact positions on the fly\n+            }\n+        }\n+\n+        int filteredPositionCount = 0;\n+        if (positionsIndex > 0) {\n+            if (dataStream == null) {\n+                // The length check has passed and there is no need to run testBytes because there is no data\n+                filteredPositionCount = positionsIndex;\n+            }\n+            else {\n+                int totalPositionCount = outputPositions[positionsIndex - 1] + 1;\n+                convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+                filteredPositionCount = testBytes(outputPositions, positionsIndex);\n+            }\n+        }\n+\n+        return filteredPositionCount;\n+    }\n+\n+    private int evaluateFilterWithNull(int[] positions, int positionCount)\n+    {\n+        if (positionCount > 0 && dataStream != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyNDU4NA==", "bodyText": "Yes, you are right. I removed the positionCount > 0 check.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525924584", "createdAt": "2020-11-18T09:11:52Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -331,6 +400,79 @@ private void skipData(int start, int items)\n         }\n     }\n \n+    // No nulls\n+    private int evaluateFilter(int[] positions, int positionCount)\n+    {\n+        int positionsIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            int position = positions[i];\n+            if (filter.testLength(lengthVector[position])) {\n+                outputPositions[positionsIndex++] = position;  // compact positions on the fly\n+            }\n+        }\n+\n+        int filteredPositionCount = 0;\n+        if (positionsIndex > 0) {\n+            if (dataStream == null) {\n+                // The length check has passed and there is no need to run testBytes because there is no data\n+                filteredPositionCount = positionsIndex;\n+            }\n+            else {\n+                int totalPositionCount = outputPositions[positionsIndex - 1] + 1;\n+                convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+                filteredPositionCount = testBytes(outputPositions, positionsIndex);\n+            }\n+        }\n+\n+        return filteredPositionCount;\n+    }\n+\n+    private int evaluateFilterWithNull(int[] positions, int positionCount)\n+    {\n+        if (positionCount > 0 && dataStream != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDc3MA=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njk3ODI2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzowMTo1MVrOH1flsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToxNDo0NFrOH1kAew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NDEzMQ==", "bodyText": "Isn't this case has maxLength as 0 ?", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525854131", "createdAt": "2020-11-18T07:01:51Z", "author": {"login": "arunthirupathi"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyNjUyMw==", "bodyText": "@arunthirupathi outputRequired == false doesn't mean the maxLength is 0. outputRequired means this column is one of the output columns. Some columns may not be output columns but still need to read because it has filters.", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525926523", "createdAt": "2020-11-18T09:14:44Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NDEzMQ=="}, "originalCommit": {"oid": "fbd657affad13876a992781910842934f1443a45"}, "originalPosition": 270}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3398, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}