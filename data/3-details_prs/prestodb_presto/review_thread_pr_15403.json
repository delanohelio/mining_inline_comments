{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzcyNjUz", "number": 15403, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo1MToyMFrOE14L5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNjoyN1rOE2Jh6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTMwNTM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/FileSingleStreamSpiller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo1MToyMFrOHuZvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo1MToyMFrOHuZvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxODI0NQ==", "bodyText": "I think we can split with much moderate size? -- e.g. something like 8M?", "url": "https://github.com/prestodb/presto/pull/15403#discussion_r518418245", "createdAt": "2020-11-05T22:51:20Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -144,11 +144,15 @@ private void writePages(Iterator<Page> pageIterator)\n             while (pageIterator.hasNext()) {\n                 Page page = pageIterator.next();\n                 spilledPagesInMemorySize += page.getSizeInBytes();\n-                SerializedPage serializedPage = serde.serialize(page);\n-                long pageSize = serializedPage.getSizeInBytes();\n-                localSpillContext.updateBytes(pageSize);\n-                spillerStats.addToTotalSpilledBytes(pageSize);\n-                writeSerializedPage(output, serializedPage);\n+                // page serialization requires  page.getSizeInBytes() + Integer.BYTES to fit in an integer\n+                splitPage(page, Integer.MAX_VALUE - Integer.BYTES).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae5faa58c78267e87bd1f9f413cf3470a835e94"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE0Njk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/spiller/FileSingleStreamSpiller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNjoyN1rOHu0baw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNjoyN1rOHu0baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NTUzMQ==", "bodyText": "We should probably add a similar fix to the storage based spiller\nCC: @wenleix", "url": "https://github.com/prestodb/presto/pull/15403#discussion_r518855531", "createdAt": "2020-11-06T16:16:27Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -144,11 +145,15 @@ private void writePages(Iterator<Page> pageIterator)\n             while (pageIterator.hasNext()) {\n                 Page page = pageIterator.next();\n                 spilledPagesInMemorySize += page.getSizeInBytes();\n-                SerializedPage serializedPage = serde.serialize(page);\n-                long pageSize = serializedPage.getSizeInBytes();\n-                localSpillContext.updateBytes(pageSize);\n-                spillerStats.addToTotalSpilledBytes(pageSize);\n-                writeSerializedPage(output, serializedPage);\n+                // page serialization requires  page.getSizeInBytes() + Integer.BYTES to fit in an integer\n+                splitPage(page, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69e066cbfa9fa190bd42f7f2c00953eb80b8d50"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3370, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}