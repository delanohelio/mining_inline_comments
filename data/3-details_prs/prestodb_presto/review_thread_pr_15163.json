{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjAzNDgw", "number": 15163, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzowOVrOEjeSTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzowOVrOEjeSTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjMxODIwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzowOVrOHR10ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjo1NDo0MFrOHSAX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTY0Mg==", "bodyText": "nit: Reorder this method to after the next two parseXXX methods().", "url": "https://github.com/prestodb/presto/pull/15163#discussion_r488469642", "createdAt": "2020-09-15T08:07:09Z", "author": {"login": "yingsu00"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java", "diffHunk": "@@ -368,39 +369,80 @@ private void parseStringColumn(int column)\n             nulls[column] = true;\n         }\n         else {\n-            Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveWritableObject(fieldData);\n-            checkState(fieldValue != null, \"fieldValue should not be null\");\n-            BinaryComparable hiveValue;\n-            if (fieldValue instanceof Text) {\n-                hiveValue = (Text) fieldValue;\n-            }\n-            else if (fieldValue instanceof BytesWritable) {\n-                hiveValue = (BytesWritable) fieldValue;\n-            }\n-            else if (fieldValue instanceof HiveVarcharWritable) {\n-                hiveValue = ((HiveVarcharWritable) fieldValue).getTextValue();\n-            }\n-            else if (fieldValue instanceof HiveCharWritable) {\n-                hiveValue = ((HiveCharWritable) fieldValue).getTextValue();\n+            PrimitiveObjectInspector inspector = (PrimitiveObjectInspector) fieldInspectors[column];\n+            Slice value;\n+            if (inspector.preferWritable()) {\n+                value = parseStringFromPrimitiveWritableObjectValue(types[column], inspector.getPrimitiveWritableObject(fieldData));\n             }\n             else {\n-                throw new IllegalStateException(\"unsupported string field type: \" + fieldValue.getClass().getName());\n+                value = parseStringFromPrimitiveJavaObjectValue(types[column], inspector.getPrimitiveJavaObject(fieldData));\n             }\n+            slices[column] = value;\n+            nulls[column] = false;\n+        }\n+    }\n \n-            // create a slice view over the hive value and trim to character limits\n-            Slice value = Slices.wrappedBuffer(hiveValue.getBytes(), 0, hiveValue.getLength());\n-            Type type = types[column];\n-            if (isVarcharType(type)) {\n-                value = truncateToLength(value, type);\n-            }\n-            if (isCharType(type)) {\n-                value = truncateToLengthAndTrimSpaces(value, type);\n-            }\n+    private static Slice trimStringToCharacterLimits(Type type, Slice value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c79a2a9fdea158801bebcd69a48be92b5d2e86a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0MjU1Mg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15163#discussion_r488642552", "createdAt": "2020-09-15T12:54:40Z", "author": {"login": "pettyjamesm"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java", "diffHunk": "@@ -368,39 +369,80 @@ private void parseStringColumn(int column)\n             nulls[column] = true;\n         }\n         else {\n-            Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveWritableObject(fieldData);\n-            checkState(fieldValue != null, \"fieldValue should not be null\");\n-            BinaryComparable hiveValue;\n-            if (fieldValue instanceof Text) {\n-                hiveValue = (Text) fieldValue;\n-            }\n-            else if (fieldValue instanceof BytesWritable) {\n-                hiveValue = (BytesWritable) fieldValue;\n-            }\n-            else if (fieldValue instanceof HiveVarcharWritable) {\n-                hiveValue = ((HiveVarcharWritable) fieldValue).getTextValue();\n-            }\n-            else if (fieldValue instanceof HiveCharWritable) {\n-                hiveValue = ((HiveCharWritable) fieldValue).getTextValue();\n+            PrimitiveObjectInspector inspector = (PrimitiveObjectInspector) fieldInspectors[column];\n+            Slice value;\n+            if (inspector.preferWritable()) {\n+                value = parseStringFromPrimitiveWritableObjectValue(types[column], inspector.getPrimitiveWritableObject(fieldData));\n             }\n             else {\n-                throw new IllegalStateException(\"unsupported string field type: \" + fieldValue.getClass().getName());\n+                value = parseStringFromPrimitiveJavaObjectValue(types[column], inspector.getPrimitiveJavaObject(fieldData));\n             }\n+            slices[column] = value;\n+            nulls[column] = false;\n+        }\n+    }\n \n-            // create a slice view over the hive value and trim to character limits\n-            Slice value = Slices.wrappedBuffer(hiveValue.getBytes(), 0, hiveValue.getLength());\n-            Type type = types[column];\n-            if (isVarcharType(type)) {\n-                value = truncateToLength(value, type);\n-            }\n-            if (isCharType(type)) {\n-                value = truncateToLengthAndTrimSpaces(value, type);\n-            }\n+    private static Slice trimStringToCharacterLimits(Type type, Slice value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTY0Mg=="}, "originalCommit": {"oid": "5c79a2a9fdea158801bebcd69a48be92b5d2e86a"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3652, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}