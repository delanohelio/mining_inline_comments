{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODYyNzU5", "number": 14125, "title": "Add cast bingtile to/from bigint", "bodyText": "Externally, tiles are encoded in a string of chars '0' to '3' called a\nquadkey.  Internally, Presto encodes a tile in 64 bits, represented by a\nBIGINT.  Storing a tile as a bigint is not only more space/cpu efficient\nthan storing it as a quadkey, but it also avoids the bucket-skew problem\ncaused by the non-uniform distribution of hash(quadkey) mod 2^k.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Add `cast(tile AS bigint)` and `cast(bigint_value AS bingtile)` to encode/decode Bing tiles to/from bigints.  This is a more efficient storage format that also reduces bucket skew in some cases.", "createdAt": "2020-02-20T16:46:17Z", "url": "https://github.com/prestodb/presto/pull/14125", "merged": true, "mergeCommit": {"oid": "3977cbf887bef782d2aaaecffb76fa206e107c65"}, "closed": true, "closedAt": "2020-03-11T00:32:17Z", "author": {"login": "jagill"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGRGB6ABqjMwNTgwNDM2NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMWfaqAFqTM3MjE5ODc3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6a63eb46dbbd44ceb78cb8d654ffc7cacab36f8", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b6a63eb46dbbd44ceb78cb8d654ffc7cacab36f8", "committedDate": "2020-02-20T16:44:24Z", "message": "Add bing_tile_to/from_bigint functions\n\nExternally, tiles are encoded in a string of chars '0' to '3' called a\nquadkey.  Internally, Presto encodes a tile in 64 bits, represented by a\nBIGINT.  Storing a tile as a bigint is not only more space/cpu efficient\nthan storing it as a quadkey, but it also avoids the bucket-skew problem\ncaused by the non-uniform distribution of `hash(quadkey) mod 2^k`."}, "afterCommit": {"oid": "674f067c4214d2c352662b4732856a9f8ae8e840", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/674f067c4214d2c352662b4732856a9f8ae8e840", "committedDate": "2020-02-20T20:20:04Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "674f067c4214d2c352662b4732856a9f8ae8e840", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/674f067c4214d2c352662b4732856a9f8ae8e840", "committedDate": "2020-02-20T20:20:04Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets."}, "afterCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/f47cbe04d287aa2d10d49ff965ba219eb63af899", "committedDate": "2020-02-20T21:09:24Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDA4NDc5", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-365408479", "createdAt": "2020-02-27T04:30:02Z", "commit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozMDowMlrOFvE7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozMDowMlrOFvE7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ==", "bodyText": "I would do this in a loop of say 1000 just to make sure we get good signal.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r384908051", "createdAt": "2020-02-27T04:30:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,32 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    public void testBingTileBigint()\n+    {\n+        Random random = new Random(1812);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/f47cbe04d287aa2d10d49ff965ba219eb63af899", "committedDate": "2020-02-20T21:09:24Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}, "afterCommit": {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/99d62603c4216ce7d3e876afe3d0e89e73547b85", "committedDate": "2020-02-28T16:53:47Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzA0MDA4", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-366704008", "createdAt": "2020-02-28T21:44:44Z", "commit": {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0NDo0NFrOFwDtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0NDo0NFrOFwDtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNjY1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\n          \n          \n            \n                        throw new PrestoException(INVALID_CAST_ARGUMENT,", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385936650", "createdAt": "2020-02-28T21:44:44Z", "author": {"login": "tdcmeehan"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +87,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/99d62603c4216ce7d3e876afe3d0e89e73547b85", "committedDate": "2020-02-28T16:53:47Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}, "afterCommit": {"oid": "08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "committedDate": "2020-03-02T14:01:51Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "committedDate": "2020-03-02T14:01:51Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}, "afterCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "committedDate": "2020-03-02T14:23:27Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTUzOTYw", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-368553960", "createdAt": "2020-03-04T07:31:58Z", "commit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDI0MjY3", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-372024267", "createdAt": "2020-03-10T14:49:20Z", "commit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDMwMDM4", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-372030038", "createdAt": "2020-03-10T14:55:03Z", "commit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1NTowNFrOF0SoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNjo1OVrOF0TMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTQ3Mw==", "bodyText": "\"Unknown Bing Tile encoding version: %s\"", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390375473", "createdAt": "2020-03-10T14:55:04Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java", "diffHunk": "@@ -148,19 +154,38 @@ public String toQuadKey()\n     }\n \n     /**\n-     * Encodes Bing tile as a 64-bit long: 23 bits for X, followed by 23 bits for Y,\n-     * followed by 5 bits for zoomLevel\n+     * Encodes Bing tile as a 64-bit long:\n+     * Version (5 bits), 0 (4 bits), x (23 bits), Zoom (5 bits), 0 (4 bits), y (23 bits)\n+     * (high bits left, low bits right).\n+     *\n+     * This arrangement maximizes low-bit entropy for the Java long hash function.\n      */\n     public long encode()\n     {\n-        return (((long) x) << 28) + (y << 5) + zoomLevel;\n+        // Java's long hash function just XORs itself right shifted 32.\n+        // This is used for bucketing, so if you have 2^k buckets, this only\n+        // keeps the k lowest bits.  This puts the highest entropy bits\n+        // (finest resolution x and y bits) in places that contribute to the\n+        // low bits of the hash.\n+        return (((long) VERSION << VERSION_OFFSET) | y | ((long) x << 32) | ((long) zoomLevel << ZOOM_OFFSET));\n     }\n \n     public static BingTile decode(long tile)\n     {\n-        int tileX = (int) (tile >> 28);\n-        int tileY = (int) ((tile % (1 << 28)) >> 5);\n-        int zoomLevel = (int) (tile % (1 << 5));\n+        int version = (int) (tile >>> VERSION_OFFSET) & BITS_5;\n+        if (version == 0) {\n+            return decodeV0(tile);\n+        }\n+        else {\n+            throw new IllegalArgumentException(format(\"Unknown Bing Tile encoding version: {}\", version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDM4Mg==", "bodyText": "follow up: Currently BingTile.decode must create an object of BingTile. The main reason for calling BingTile.decode is to validate the tile stored in a long. For efficiency I would recommend to have a dedicated method, e.g.: BingTile.validate or smthng.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380382", "createdAt": "2020-03-10T15:01:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +88,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDY1Mw==", "bodyText": "nit: public", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380653", "createdAt": "2020-03-10T15:01:36Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MTgzMw==", "bodyText": "nit: extract these 3 lines into something like testRoundTrip(BingTile tile)", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390381833", "createdAt": "2020-03-10T15:03:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MzMzNA==", "bodyText": "I'm not sure if this code really has to be fuzzed.\nHow about standard test cases:\n\nMin zoom\nMax zoom\nMin x and y\nMax x and y\nSeveral different combinations of values in between", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390383334", "createdAt": "2020-03-10T15:05:13Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDY5MQ==", "bodyText": "This test is only supposed to verify the integration of the tile encoding (that is tested in the test above), and the function mechanism. Instead of fuzzing i would recommend adding just a few simple test cases to verify the integration is in place.", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390384691", "createdAt": "2020-03-10T15:06:59Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(\n+                        random.nextInt(1 << zoom),\n+                        random.nextInt(1 << zoom),\n+                        zoom);\n+                BingTile actual = BingTile.decode(expected.encode());\n+                assertEquals(actual, expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testBingTileCast()\n+    {\n+        Random random = new Random(1812);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/9a3758c7c063d505d37f823d8d79f6e9b4124e56", "committedDate": "2020-03-10T16:13:59Z", "message": "Add BingTile cast to/from bigint\n\nExternally, tiles are encoded in a string of chars '0' to '3' called a\nquadkey.  Internally, Presto encodes a tile in 64 bits, represented by a\nBIGINT.  Storing a tile as a bigint is not only more space/cpu efficient\nthan storing it as a quadkey, but it also avoids the bucket-skew problem\ncaused by the non-uniform distribution of `hash(quadkey) mod 2^k`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cae98f93636c7c5bb0e1117fe277ba0cb672c357", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/cae98f93636c7c5bb0e1117fe277ba0cb672c357", "committedDate": "2020-03-10T16:14:55Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "committedDate": "2020-03-02T14:23:27Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}, "afterCommit": {"oid": "cae98f93636c7c5bb0e1117fe277ba0cb672c357", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/cae98f93636c7c5bb0e1117fe277ba0cb672c357", "committedDate": "2020-03-10T16:14:55Z", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTk4Nzc0", "url": "https://github.com/prestodb/presto/pull/14125#pullrequestreview-372198774", "createdAt": "2020-03-10T18:05:24Z", "commit": {"oid": "cae98f93636c7c5bb0e1117fe277ba0cb672c357"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2268, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}