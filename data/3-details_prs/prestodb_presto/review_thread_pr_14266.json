{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNzI5NDAw", "number": 14266, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyMjoxMlrODpsm3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyMjoxMlrODpsm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ5MDU0OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyMjoxMlrOF5CZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTowOToxMFrOF5H0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MjQxNA==", "bodyText": "This logic is Hive-specific. Does Verifier support only Hive connector?", "url": "https://github.com/prestodb/presto/pull/14266#discussion_r395352414", "createdAt": "2020-03-19T22:22:12Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java", "diffHunk": "@@ -191,7 +205,62 @@ private QualifiedName generateTemporaryTableName(Optional<QualifiedName> origina\n         else {\n             zeroRowQuery = new Query(query.getWith(), query.getQueryBody(), Optional.empty(), Optional.of(\"0\"));\n         }\n-        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getColumnNames();\n+        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getMetadata();\n+    }\n+\n+    private Query rewriteNonStorableColumns(Query query, ResultSetMetaData metadata)\n+    {\n+        // Skip if all columns are storable\n+        List<TypeSignature> columnTypes = getColumnTypes(metadata);\n+        if (columnTypes.stream().noneMatch(type -> getColumnTypeRewrite(type).isPresent())) {\n+            return query;\n+        }\n+\n+        // Cannot handle SELECT query with top-level SetOperation\n+        if (!(query.getQueryBody() instanceof QuerySpecification)) {\n+            return query;\n+        }\n+\n+        QuerySpecification querySpecification = (QuerySpecification) query.getQueryBody();\n+        List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n+        // Cannot handle SELECT *\n+        if (selectItems.stream().anyMatch(AllColumns.class::isInstance)) {\n+            return query;\n+        }\n+\n+        List<SelectItem> newItems = new ArrayList<>();\n+        checkState(selectItems.size() == columnTypes.size(), \"SelectItem count (%s) mismatches column count (%s)\", selectItems.size(), columnTypes.size());\n+        for (int i = 0; i < selectItems.size(); i++) {\n+            SingleColumn singleColumn = (SingleColumn) selectItems.get(i);\n+            Optional<TypeSignature> columnTypeRewrite = getColumnTypeRewrite(columnTypes.get(i));\n+            if (columnTypeRewrite.isPresent()) {\n+                newItems.add(new SingleColumn(new Cast(singleColumn.getExpression(), columnTypeRewrite.get().toString()), singleColumn.getAlias()));\n+            }\n+            else {\n+                newItems.add(singleColumn);\n+            }\n+        }\n+\n+        return new Query(\n+                query.getWith(),\n+                new QuerySpecification(\n+                        new Select(querySpecification.getSelect().isDistinct(), newItems),\n+                        querySpecification.getFrom(),\n+                        querySpecification.getWhere(),\n+                        querySpecification.getGroupBy(),\n+                        querySpecification.getHaving(),\n+                        querySpecification.getOrderBy(),\n+                        querySpecification.getLimit()),\n+                query.getOrderBy(),\n+                query.getLimit());\n+    }\n+\n+    private static Optional<TypeSignature> getColumnTypeRewrite(TypeSignature type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74818c1bb0c877f7c7a899583feb2fbe26b1e717"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0MTMyOA==", "bodyText": "This is the assumption so far. Verifier are unaware about what connector is associated with a given catalog, so it won't be able make decisions around that as well.", "url": "https://github.com/prestodb/presto/pull/14266#discussion_r395441328", "createdAt": "2020-03-20T05:09:10Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java", "diffHunk": "@@ -191,7 +205,62 @@ private QualifiedName generateTemporaryTableName(Optional<QualifiedName> origina\n         else {\n             zeroRowQuery = new Query(query.getWith(), query.getQueryBody(), Optional.empty(), Optional.of(\"0\"));\n         }\n-        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getColumnNames();\n+        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getMetadata();\n+    }\n+\n+    private Query rewriteNonStorableColumns(Query query, ResultSetMetaData metadata)\n+    {\n+        // Skip if all columns are storable\n+        List<TypeSignature> columnTypes = getColumnTypes(metadata);\n+        if (columnTypes.stream().noneMatch(type -> getColumnTypeRewrite(type).isPresent())) {\n+            return query;\n+        }\n+\n+        // Cannot handle SELECT query with top-level SetOperation\n+        if (!(query.getQueryBody() instanceof QuerySpecification)) {\n+            return query;\n+        }\n+\n+        QuerySpecification querySpecification = (QuerySpecification) query.getQueryBody();\n+        List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n+        // Cannot handle SELECT *\n+        if (selectItems.stream().anyMatch(AllColumns.class::isInstance)) {\n+            return query;\n+        }\n+\n+        List<SelectItem> newItems = new ArrayList<>();\n+        checkState(selectItems.size() == columnTypes.size(), \"SelectItem count (%s) mismatches column count (%s)\", selectItems.size(), columnTypes.size());\n+        for (int i = 0; i < selectItems.size(); i++) {\n+            SingleColumn singleColumn = (SingleColumn) selectItems.get(i);\n+            Optional<TypeSignature> columnTypeRewrite = getColumnTypeRewrite(columnTypes.get(i));\n+            if (columnTypeRewrite.isPresent()) {\n+                newItems.add(new SingleColumn(new Cast(singleColumn.getExpression(), columnTypeRewrite.get().toString()), singleColumn.getAlias()));\n+            }\n+            else {\n+                newItems.add(singleColumn);\n+            }\n+        }\n+\n+        return new Query(\n+                query.getWith(),\n+                new QuerySpecification(\n+                        new Select(querySpecification.getSelect().isDistinct(), newItems),\n+                        querySpecification.getFrom(),\n+                        querySpecification.getWhere(),\n+                        querySpecification.getGroupBy(),\n+                        querySpecification.getHaving(),\n+                        querySpecification.getOrderBy(),\n+                        querySpecification.getLimit()),\n+                query.getOrderBy(),\n+                query.getLimit());\n+    }\n+\n+    private static Optional<TypeSignature> getColumnTypeRewrite(TypeSignature type)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MjQxNA=="}, "originalCommit": {"oid": "74818c1bb0c877f7c7a899583feb2fbe26b1e717"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2919, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}