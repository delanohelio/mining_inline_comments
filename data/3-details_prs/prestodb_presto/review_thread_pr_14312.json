{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDc4ODM0", "number": 14312, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0NTo0MVrODs9Gyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjo0MFrODtQGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY1MDk5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0NTo0MVrOF-GJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzo1NFrOF-kZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Njg5NQ==", "bodyText": "nit: remove function. Usually we just reference the function with the link.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400656895", "createdAt": "2020-03-31T05:45:41Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NjY2OA==", "bodyText": "Do you mean just surrounding it with double backquotes?", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401046668", "createdAt": "2020-03-31T16:23:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Njg5NQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MjM2MA==", "bodyText": "I mean removing the word function at the end of the sentence.\n... through :func:`khyperloglog_agg`.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401152360", "createdAt": "2020-03-31T19:13:54Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Njg5NQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY1MTc5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0NjowNFrOF-GKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0NTozOVrOF-nj2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NzAxNQ==", "bodyText": "Double backquotes:\n``MinHash``\n``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400657015", "createdAt": "2020-03-31T05:46:04Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NDE3MA==", "bodyText": "All these references to MinHash and HyperLogLog are referring to data structures and not some type in Presto.  I'm indifferent either way, but I was under the impression we'd use code formatting for Presto types that one might use in a SQL statement.  Or in other words, what's the rule for when we use monoformat?", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401054170", "createdAt": "2020-03-31T16:35:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NzAxNQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNDE4NQ==", "bodyText": "makes sense", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401204185", "createdAt": "2020-03-31T20:45:39Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NzAxNQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY1NzIzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0ODo0NVrOF-GNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyMjo1NFrOF-ktUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Nzg0MQ==", "bodyText": "Similar to HyperLogLog and P4HyperLogLog, create an entry with label in language/types.rst\n:ref:`hyperloglog_type` can be cast to and from ``varbinary`` ...", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400657841", "createdAt": "2020-03-31T05:48:45Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NzQ1OA==", "bodyText": "This line is not updated yet. You can replace KHyperLogLog sketches  with\n:ref:`hyperloglog_type`", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401157458", "createdAt": "2020-03-31T19:22:54Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Nzg0MQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY1ODc4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0OToyOFrOF-GOhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0OToyOFrOF-GOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODA1NA==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658054", "createdAt": "2020-03-31T05:49:28Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are\n+    accumulated in the last bucket.\n+\n+.. function:: reidentification_potential(khll, threshold) ->  double\n+\n+    The reidentification potential is the ratio of ``x`` values that have a\n+    ``uniqueness`` under the given ``threshold``.\n+\n+.. function:: merge(khll) -> KHyperLogLog\n+    :noindex:\n+\n+    Returns the KHyperLogLog of the aggregate union of the individual KHyperLogLog\n+    structures.\n+\n+.. function:: merge_khll(array(khll)) -> HKyperLogLog\n+\n+    Returns the KHyperLogLog of the union of an array of KHyperLogLog structures.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY1ODk3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0OTozMlrOF-GOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0OTozMlrOF-GOng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODA3OA==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658078", "createdAt": "2020-03-31T05:49:32Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are\n+    accumulated in the last bucket.\n+\n+.. function:: reidentification_potential(khll, threshold) ->  double\n+\n+    The reidentification potential is the ratio of ``x`` values that have a\n+    ``uniqueness`` under the given ``threshold``.\n+\n+.. function:: merge(khll) -> KHyperLogLog\n+    :noindex:\n+\n+    Returns the KHyperLogLog of the aggregate union of the individual KHyperLogLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2MjEwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MTowNVrOF-GQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MTowNVrOF-GQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODU1OA==", "bodyText": "nit: associated with", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658558", "createdAt": "2020-03-31T05:51:05Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2MzI3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MTo0N1rOF-GRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNTowMlrOF-kcQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODc1Mg==", "bodyText": "looks like typo", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658752", "createdAt": "2020-03-31T05:51:47Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0ODgzNA==", "bodyText": "Not sure it's a typo, but does All uniqueness values greater than sound better?", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401048834", "createdAt": "2020-03-31T16:26:55Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODc1Mg=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzA4OA==", "bodyText": "Yes, I think that would be more readable.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401153088", "createdAt": "2020-03-31T19:15:02Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODc1Mg=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2NDU0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MjozMFrOF-GR_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MjozMFrOF-GR_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODk0MA==", "bodyText": "nit:\nthe ``uniqueness``\nthe relative frequency", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658940", "createdAt": "2020-03-31T05:52:30Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2NTQzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1Mjo1M1rOF-GSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1Mjo1M1rOF-GSew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTA2Nw==", "bodyText": "``MinHash``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659067", "createdAt": "2020-03-31T05:52:53Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2NTg2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MzoxNFrOF-GSxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MzoxNFrOF-GSxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTE0MQ==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659141", "createdAt": "2020-03-31T05:53:14Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY2Njc3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MzozNlrOF-GTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1MzozNlrOF-GTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTI2Mw==", "bodyText": "``MinHash``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659263", "createdAt": "2020-03-31T05:53:36Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY3NTkyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1Nzo1OVrOF-GYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1Nzo1OVrOF-GYeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDYwMg==", "bodyText": "MinHash\nAdd a period (\".\") at the end of the line.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660602", "createdAt": "2020-03-31T05:57:59Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY3NjMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1ODoxNFrOF-GYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1ODoxNFrOF-GYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDY3Mg==", "bodyText": "HyperLogLog", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660672", "createdAt": "2020-03-31T05:58:14Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY3NjcyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1ODoyNlrOF-GY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1ODoyNlrOF-GY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDczNQ==", "bodyText": "MinHash", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660735", "createdAt": "2020-03-31T05:58:26Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc2MjU1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/language/types.rst", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjo0MFrOF-kfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNDo0OVrOGEDlyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzk2MQ==", "bodyText": "I believe you need to add the label before the KHperLogLog heading. See example right above.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401153961", "createdAt": "2020-03-31T19:16:40Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -279,6 +279,14 @@ Calculating the approximate distinct count can be done much more cheaply than an\n     A P4HyperLogLog sketch is similar to :ref:`hyperloglog_type`, but it starts (and remains)\n     in the dense representation.\n \n+KHyperLogLog\n+------------\n+\n+KHyperLogLog is a data sketch that can be used to compactly represents the association of two\n+columns. See :doc:`/functions/khyperloglog`.\n+\n+.. _khyperloglog_type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzgwNA==", "bodyText": "It seems redundant to add the section header plus a sub-header with the exact same name.  Nevertheless, changed it to that for consistency.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401193804", "createdAt": "2020-03-31T20:27:16Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -279,6 +279,14 @@ Calculating the approximate distinct count can be done much more cheaply than an\n     A P4HyperLogLog sketch is similar to :ref:`hyperloglog_type`, but it starts (and remains)\n     in the dense representation.\n \n+KHyperLogLog\n+------------\n+\n+KHyperLogLog is a data sketch that can be used to compactly represents the association of two\n+columns. See :doc:`/functions/khyperloglog`.\n+\n+.. _khyperloglog_type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzk2MQ=="}, "originalCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTAxNA==", "bodyText": "Looks like we have an misunderstanding here. We don't need the sub-header. I mean to put line 291 before line 285. Line 291 is a label, which is used by other parts of the doc to reference the type. Placing the reference here is essentially making a link to the next section \"Quantile Digest\", instead of to the KHyperLogLog section.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r406905014", "createdAt": "2020-04-10T19:21:22Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -279,6 +279,14 @@ Calculating the approximate distinct count can be done much more cheaply than an\n     A P4HyperLogLog sketch is similar to :ref:`hyperloglog_type`, but it starts (and remains)\n     in the dense representation.\n \n+KHyperLogLog\n+------------\n+\n+KHyperLogLog is a data sketch that can be used to compactly represents the association of two\n+columns. See :doc:`/functions/khyperloglog`.\n+\n+.. _khyperloglog_type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzk2MQ=="}, "originalCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjMxMw==", "bodyText": "Just to avoid confusion, by line 291, I meant this line:\n.. _khyperloglog_type:", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r406906313", "createdAt": "2020-04-10T19:24:49Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -279,6 +279,14 @@ Calculating the approximate distinct count can be done much more cheaply than an\n     A P4HyperLogLog sketch is similar to :ref:`hyperloglog_type`, but it starts (and remains)\n     in the dense representation.\n \n+KHyperLogLog\n+------------\n+\n+KHyperLogLog is a data sketch that can be used to compactly represents the association of two\n+columns. See :doc:`/functions/khyperloglog`.\n+\n+.. _khyperloglog_type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzk2MQ=="}, "originalCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2958, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}