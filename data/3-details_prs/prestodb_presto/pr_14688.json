{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTE1MDYy", "number": 14688, "title": "Fix estimated serialized size for BlockEncodingBuffers", "bodyText": "We used Blocks' sizeInBytes or logicalSizeInBytes to estimate the max capacity of the BlockEncodingBuffers. However, there were some error in calculating the max capacity from the decodedBlock.estimatedSerializedSizeInBytes such that the exclusive portion(exclusive of children BlockEncodingBuffers) of the current BlockEncodingBuffer was mistakenly passed to the children BlockEncodingBuffers as inclusive portion. Also, the max capacity for the nested blocks was incorrectly calculated if they are RLE or Dictionary Blocks . This PR fixes these two problems. With these fixes, the CPU time for the reported regressed query in T67972617 was reduced  from 100s to 20s.\n== NO RELEASE NOTE ==", "createdAt": "2020-06-21T08:36:30Z", "url": "https://github.com/prestodb/presto/pull/14688", "merged": true, "mergeCommit": {"oid": "6b51cbf52a138150962a4c1145b4517bc6da89c8"}, "closed": true, "closedAt": "2020-07-06T12:51:44Z", "author": {"login": "yingsu00"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctnus9gBqjM0NjYyMzQ5MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxl-oSABqjM1MTI0Nzc4NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7725277053d369739e26cd866658e75a7decb271", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/7725277053d369739e26cd866658e75a7decb271", "committedDate": "2020-06-21T08:39:41Z", "message": "Break long lines in decodeBlock()"}, "afterCommit": {"oid": "1a8424f345a6dcec0108d862d5bd5de93446a811", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1a8424f345a6dcec0108d862d5bd5de93446a811", "committedDate": "2020-06-22T02:48:05Z", "message": "Break long lines in decodeBlock()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTg5OTU3", "url": "https://github.com/prestodb/presto/pull/14688#pullrequestreview-434989957", "createdAt": "2020-06-22T14:39:44Z", "commit": {"oid": "1a8424f345a6dcec0108d862d5bd5de93446a811"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjQ3OTcw", "url": "https://github.com/prestodb/presto/pull/14688#pullrequestreview-435647970", "createdAt": "2020-06-23T10:25:47Z", "commit": {"oid": "1a8424f345a6dcec0108d862d5bd5de93446a811"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a8424f345a6dcec0108d862d5bd5de93446a811", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1a8424f345a6dcec0108d862d5bd5de93446a811", "committedDate": "2020-06-22T02:48:05Z", "message": "Break long lines in decodeBlock()"}, "afterCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/71ce03c9a501ed7af075ba504cb79b3cfe84477d", "committedDate": "2020-06-30T09:54:00Z", "message": "Allow additional error margin for estimatedMaxCapacity\n\nIn \"Enforce buffer size limits for BlockEncodingBuffer\" we introduced\nestimatedMaxCapacity such that the growth of the buffers beyond that\nvalue become slower. However the estimated max capacity is not always\n100% accurate, and an underestimated value has negative impact on the\nCPU performance. This commit gives the estimatedMaxCapacity some head\nroom by introducing a graceFactorFordMaxCapacity with default value\n1.2f."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTM4ODAw", "url": "https://github.com/prestodb/presto/pull/14688#pullrequestreview-439938800", "createdAt": "2020-06-30T11:54:34Z", "commit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo1NDozNVrOGq40uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMjo1OFrOGq5GyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyNDM3Ng==", "bodyText": "What's the motivation to have the default implementation? It seems incorrect to report region-size as region-logical-size.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447624376", "createdAt": "2020-06-30T11:54:35Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/Block.java", "diffHunk": "@@ -205,6 +205,15 @@ default long getLogicalSizeInBytes()\n      */\n     long getRegionSizeInBytes(int position, int length);\n \n+    /**\n+     * Returns the size of {@code block.getRegion(position, length)}.\n+     * The method can be expensive. Do not use it outside an implementation of Block.\n+     */\n+    default long getRegionLogicalSizeInBytes(int position, int length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyNzM5Ng==", "bodyText": "This loop is duplicated between here and getRegionLogicalSizeInBytes. Consider refactoring to avoid copy-paste.\npublic long getLogicalSizeInBytes() {\n   return getRegionLogicalSizeInBytes(0, getPositionCount());\n}\n\npublic long getRegionLogicalSizeInBytes(int positionOffset, int length) {\n   if (positionOffset == 0 && length == getPositionCount() && logicalSizeInBytes >= 0) {\n      return logicalSizeInBytes;\n   }\n\n   ...loop\n\n\n   if (positionOffset == 0 && length == getPositionCount()) {\n      logicalSizeInBytes = sizeInBytes;\n   }\n   return sizeInBytes;\n}\n}", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447627396", "createdAt": "2020-06-30T12:00:08Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java", "diffHunk": "@@ -248,7 +248,7 @@ public long getLogicalSizeInBytes()\n         for (int i = 0; i < getPositionCount(); i++) {\n             int position = getId(i);\n             if (seenSizes[position] < 0) {\n-                seenSizes[position] = dictionary.getRegionSizeInBytes(position, 1);\n+                seenSizes[position] = dictionary.getRegionLogicalSizeInBytes(position, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyOTAwMA==", "bodyText": "consider replacing comments with variable names, e.g.\n\nBlock arrayOfLong =\nBlock arrayOfRleOfLong =\nBlock arrayOfRleOfArrayOfLong =\n...", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447629000", "createdAt": "2020-06-30T12:02:58Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestArrayBlock.java", "diffHunk": "@@ -158,6 +164,38 @@ public void testEstimatedDataSizeForStats()\n         }\n     }\n \n+    @Test\n+    public void testLogicalSizeInBytes()\n+    {\n+        int positionCount = 100;\n+        int[] offsets = IntStream.rangeClosed(0, positionCount).toArray();\n+        boolean[] nulls = new boolean[positionCount];\n+\n+        // Array(LongArrayBlock)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTQ1OTQ2", "url": "https://github.com/prestodb/presto/pull/14688#pullrequestreview-439945946", "createdAt": "2020-06-30T12:04:50Z", "commit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNDo1MFrOGq5Ksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNzowM1rOGq5Pxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMDAwMg==", "bodyText": "all caps with underscores\nconsider making this configurable", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447630002", "createdAt": "2020-06-30T12:04:50Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public class Arrays\n {\n+    private static final double graceFactorFordMaxCapacity = 1.2f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTMwMg==", "bodyText": "This is a generic method that can be used in many places. However, the commit says that the change applies only to one specific use case. I'd expect the caller to apply this new factor when computing estimatedMaxCapacity.\n\nuse Math.toIntExact instead of (int)", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447631302", "createdAt": "2020-06-30T12:07:03Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -108,7 +110,7 @@ else if (buffer.length < capacity) {\n \n     public static byte[] ensureCapacity(byte[] buffer, int capacity, int estimatedMaxCapacity, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)\n     {\n-        int newCapacity = max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity));\n+        int newCapacity = (int) max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity * graceFactorFordMaxCapacity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/71ce03c9a501ed7af075ba504cb79b3cfe84477d", "committedDate": "2020-06-30T09:54:00Z", "message": "Allow additional error margin for estimatedMaxCapacity\n\nIn \"Enforce buffer size limits for BlockEncodingBuffer\" we introduced\nestimatedMaxCapacity such that the growth of the buffers beyond that\nvalue become slower. However the estimated max capacity is not always\n100% accurate, and an underestimated value has negative impact on the\nCPU performance. This commit gives the estimatedMaxCapacity some head\nroom by introducing a graceFactorFordMaxCapacity with default value\n1.2f."}, "afterCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b", "committedDate": "2020-07-02T12:41:11Z", "message": "Allow additional error margin for estimatedMaxCapacity\n\nIn \"Enforce buffer size limits for BlockEncodingBuffer\" we introduced\nestimatedMaxCapacity such that the growth of the buffers beyond that\nvalue become slower. However the estimated max capacity is not always\n100% accurate, and a underestimated value has negative impact on the\nCPU performance. This commit gives the estimatedMaxCapacity some head\nroom by introducing a GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY with\ndefault value 1.2f."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjk5NTA5", "url": "https://github.com/prestodb/presto/pull/14688#pullrequestreview-441699509", "createdAt": "2020-07-02T13:52:18Z", "commit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzo1MjoxOFrOGsN3qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzo1MjoxOFrOGsN3qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNzc3MA==", "bodyText": "nit: perhaps, refactor to extract a helper method to avoid copy-paste", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r449017770", "createdAt": "2020-07-02T13:52:18Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -239,8 +239,8 @@ protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNod\n         double targetBufferSize = partitionBufferCapacity * decodedBlockPageSizeFraction *\n                 (estimatedSerializedSizeInBytes - childrenEstimatedSerializedSizeInBytes) / estimatedSerializedSizeInBytes;\n \n-        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE));\n-        estimatedOffsetBufferMaxCapacity = (int) (targetBufferSize * Integer.BYTES / POSITION_SIZE);\n+        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b", "committedDate": "2020-07-02T12:41:11Z", "message": "Allow additional error margin for estimatedMaxCapacity\n\nIn \"Enforce buffer size limits for BlockEncodingBuffer\" we introduced\nestimatedMaxCapacity such that the growth of the buffers beyond that\nvalue become slower. However the estimated max capacity is not always\n100% accurate, and a underestimated value has negative impact on the\nCPU performance. This commit gives the estimatedMaxCapacity some head\nroom by introducing a GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY with\ndefault value 1.2f."}, "afterCommit": {"oid": "e8511df6365f108d010d12d50b17e79bca23dadf", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/e8511df6365f108d010d12d50b17e79bca23dadf", "committedDate": "2020-07-02T23:02:09Z", "message": "Refactor buffer max capacity calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ee722bf73b74777e97855038a0b8f637f5271d8", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/2ee722bf73b74777e97855038a0b8f637f5271d8", "committedDate": "2020-07-04T09:13:04Z", "message": "Fix serialized size estimation in BlockEncodingBuffers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4df0d74df0e9c7035c6fb99e6aabd0de2b1bbbd0", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/4df0d74df0e9c7035c6fb99e6aabd0de2b1bbbd0", "committedDate": "2020-07-04T09:13:04Z", "message": "Remove childrenEstimatedSerializedSizeInBytes from DecodedBlockNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "772a2196a151d2001aba83ebce8f57d93c666ea1", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/772a2196a151d2001aba83ebce8f57d93c666ea1", "committedDate": "2020-07-04T09:13:04Z", "message": "Fix getLogicalSizeInBytes() for Blocks\n\ngetLogicalSizeInBytes was supposed to get the deflated sizes of the\nblocks if they are DictionaryBlock or RunLengthEncodedBlock. However\nif the nested blocks are DictionaryBlock or RunLengthEncodedBlock,\nthe size was not correctly calculated. This commit fixed this issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b31a74f261cac9178b6cb9aed8b7bfec2e0d19", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/b2b31a74f261cac9178b6cb9aed8b7bfec2e0d19", "committedDate": "2020-07-04T09:13:04Z", "message": "Fix estimatedSerializedSizeInBytes for RLE and Dictionary Blocks\n\nWhen a block passed to OptimizedPartitionedOutputOperator is a RLE or\nDictionary block, we used to estimated the serialized size using\ngetLogicalSize() which returns the size of the block after inflation.\nHowever the child block of the RLE or Dictionary Block was using plain\nsizeInBytes without considering it is going to be expanded. This\ncommit fixes this problem by adding a scale factor to estimate how many\ntimes the child blocks are going to be expanded."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7adb6a246121dd960d69d41bc3e1c51211263b63", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/7adb6a246121dd960d69d41bc3e1c51211263b63", "committedDate": "2020-07-04T09:13:04Z", "message": "Add tests for max buffer capacity estimation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36f2c8359f6c9b0dc0f3c7d7dbc76fbbae86d63f", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/36f2c8359f6c9b0dc0f3c7d7dbc76fbbae86d63f", "committedDate": "2020-07-04T09:13:04Z", "message": "Always make space for nullsBuffer and hashTablesBuffer\n\nBlock.getSizeInBytes() and Block.getLogicalSizeInBytes() always adds up\nthe sizes of nulls buffer even if the block cannot contain nulls. When\nestimating the max buffer capacity for BlockEncodingBuffers, we can also\nleave the space for the nullsBuffer and hashTablesBuffer. This will not\nwaste memory because the buffers are not actually allocated until blocks\nwith nulls or hashtables come in. It will make the buffers sizes\nproportional to the blocks' logical sizes, and make the code cleaner."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e033722c85d9dd91eea1314202c294ebc1b8c7f7", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/e033722c85d9dd91eea1314202c294ebc1b8c7f7", "committedDate": "2020-07-04T09:13:04Z", "message": "Allow additional error margin for estimatedMaxCapacity\n\nIn \"Enforce buffer size limits for BlockEncodingBuffer\" we introduced\nestimatedMaxCapacity such that the growth of the buffers beyond that\nvalue become slower. However the estimated max capacity is not always\n100% accurate, and a underestimated value has negative impact on the\nCPU performance. This commit gives the estimatedMaxCapacity some head\nroom by introducing a GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY with\ndefault value 1.2f."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "533fd29ed4b6708d51808e2eeb5b6c44922e19a5", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/533fd29ed4b6708d51808e2eeb5b6c44922e19a5", "committedDate": "2020-07-04T09:13:04Z", "message": "Refactor buffer max capacity calculation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8511df6365f108d010d12d50b17e79bca23dadf", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/e8511df6365f108d010d12d50b17e79bca23dadf", "committedDate": "2020-07-02T23:02:09Z", "message": "Refactor buffer max capacity calculation"}, "afterCommit": {"oid": "533fd29ed4b6708d51808e2eeb5b6c44922e19a5", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/533fd29ed4b6708d51808e2eeb5b6c44922e19a5", "committedDate": "2020-07-04T09:13:04Z", "message": "Refactor buffer max capacity calculation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1440, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}