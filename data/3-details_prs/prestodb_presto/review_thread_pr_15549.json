{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMzczNzI3", "number": 15549, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMToyM1rOFIMEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo0MDo0OFrOFIzQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMwNTkyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMToyM1rOIJ-IoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyMDozNFrOIKK30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNjExMg==", "bodyText": "I noticed that useBatchMode method has a lot of commented out code. Please, remove.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r547326112", "createdAt": "2020-12-22T15:01:23Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -688,13 +688,13 @@ else if (isNotNull) {\n             }\n             dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n-            offsets = ensureCapacity(offsets, totalPositions + 1);\n+            offsets = ensureCapacity(offsets, totalPositions + 1, SMALL, INITIALIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676c3a5891b5cd640b971e22bd70fcfa84ec5319"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNDgwMA==", "bodyText": "I noticed that useBatchMode method has a lot of commented out code. Please, remove.\n\nThis is fixed in the second commit \"Limit batch read mode to certain conditions for SliceDirectSelectiveStreamReader\"", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r547534800", "createdAt": "2020-12-22T22:20:34Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -688,13 +688,13 @@ else if (isNotNull) {\n             }\n             dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n-            offsets = ensureCapacity(offsets, totalPositions + 1);\n+            offsets = ensureCapacity(offsets, totalPositions + 1, SMALL, INITIALIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNjExMg=="}, "originalCommit": {"oid": "676c3a5891b5cd640b971e22bd70fcfa84ec5319"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTcyODQ0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyMzoxMFrOIKn6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyMzoxMFrOIKn6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMDUwMA==", "bodyText": "This variable seems unnecessary. Why not just combine the two loops?", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548010500", "createdAt": "2020-12-23T15:23:10Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "diffHunk": "@@ -935,6 +928,19 @@ public static void assertFileContentsPresto(\n         assertEquals(rowsProcessed, expectedValues.get(0).size());\n     }\n \n+    static void assertBlockEquals(Type type, Block block, List<?> expectedValues, int offset)\n+    {\n+        int positionCount = block.getPositionCount();\n+        List<Object> data = new ArrayList<>(positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "098de5bef96a82e26b22d014244982d988b7358e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTczMzk1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceSelectiveStreamReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDo1M1rOIKn9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzowNzo0N1rOIK6ZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTM1Mg==", "bodyText": "shouldn't resetDataStream be called on dictionaryReader as well? or on currentReader?", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548011352", "createdAt": "2020-12-23T15:24:53Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceSelectiveStreamReader.java", "diffHunk": "@@ -151,4 +152,10 @@ public static int computeTruncatedLength(Slice slice, int offset, int length, in\n         }\n         return length;\n     }\n+\n+    @VisibleForTesting\n+    public void resetDataStream()\n+    {\n+        ((SliceDirectSelectiveStreamReader) directReader).resetDataStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMwOTI0Mw==", "bodyText": "@mbasmanova currentReader is only set after the first startStripe() is called. I added dictionaryReader too.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548309243", "createdAt": "2020-12-23T23:00:16Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceSelectiveStreamReader.java", "diffHunk": "@@ -151,4 +152,10 @@ public static int computeTruncatedLength(Slice slice, int offset, int length, in\n         }\n         return length;\n     }\n+\n+    @VisibleForTesting\n+    public void resetDataStream()\n+    {\n+        ((SliceDirectSelectiveStreamReader) directReader).resetDataStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTM1Mg=="}, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMxMzQwNA==", "bodyText": "public class SliceSelectiveStreamReader\n        implements SelectiveStreamReader\n{\n   @VisibleForTesting\n    public void resetDataStream()\n    {\n        ((SliceDirectSelectiveStreamReader) directReader).resetDataStream();\n        ((SliceDictionarySelectiveReader) dictionaryReader).resetDataStream();\n    }\n}", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548313404", "createdAt": "2020-12-23T23:07:47Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceSelectiveStreamReader.java", "diffHunk": "@@ -151,4 +152,10 @@ public static int computeTruncatedLength(Slice slice, int offset, int length, in\n         }\n         return length;\n     }\n+\n+    @VisibleForTesting\n+    public void resetDataStream()\n+    {\n+        ((SliceDirectSelectiveStreamReader) directReader).resetDataStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTM1Mg=="}, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTc0MjA5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNzoyNlrOIKoCPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzowNDo0NFrOIK6Vvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMjYwNg==", "bodyText": "Is this test specific to DWRF encoding? If not, perhaps, run it on all supported encodings.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548012606", "createdAt": "2020-12-23T15:27:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders\n+{\n+    /**\n+     * This test tests SliceDirectSelectiveStreamReader for the case where all elements to read are empty strings. The output Block should be a valid VariableWidthBlock with an\n+     * empty Slice. It is to simulate a problem seen in production. The state of SliceDirectSelectiveStreamReader to reproduce the problem is:\n+     * - dataStream: null\n+     * - presentStream: null\n+     * - lengthStream: not null\n+     * - filter: null\n+     * - outputRequired: true\n+     * - offsets array: non zeros\n+     * The test issues two reads, the first one reads a non-empty string and populates non-zero offsets. The second one reads the empty string with the above conditions met.\n+     */\n+    @Test\n+    public void testEmptySlice()\n+            throws Exception\n+    {\n+        Type type = VARCHAR;\n+        List<Type> types = ImmutableList.of(type);\n+        List<List<?>> values = ImmutableList.of(ImmutableList.of(\"a\", \"\"));\n+\n+        TempFile tempFile = new TempFile();\n+        writeOrcColumnsPresto(tempFile.getFile(), DWRF, CompressionKind.NONE, Optional.empty(), types, values, new OrcWriterStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMxMjUxMA==", "bodyText": "Sure. I added the following settings\n    private Set<OrcTester.Format> formats = ImmutableSet.of(ORC_12, ORC_11, DWRF);\n    private Set<CompressionKind> compressions = ImmutableSet.of(NONE, SNAPPY, ZLIB, LZ4, ZSTD);", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548312510", "createdAt": "2020-12-23T23:04:44Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders\n+{\n+    /**\n+     * This test tests SliceDirectSelectiveStreamReader for the case where all elements to read are empty strings. The output Block should be a valid VariableWidthBlock with an\n+     * empty Slice. It is to simulate a problem seen in production. The state of SliceDirectSelectiveStreamReader to reproduce the problem is:\n+     * - dataStream: null\n+     * - presentStream: null\n+     * - lengthStream: not null\n+     * - filter: null\n+     * - outputRequired: true\n+     * - offsets array: non zeros\n+     * The test issues two reads, the first one reads a non-empty string and populates non-zero offsets. The second one reads the empty string with the above conditions met.\n+     */\n+    @Test\n+    public void testEmptySlice()\n+            throws Exception\n+    {\n+        Type type = VARCHAR;\n+        List<Type> types = ImmutableList.of(type);\n+        List<List<?>> values = ImmutableList.of(ImmutableList.of(\"a\", \"\"));\n+\n+        TempFile tempFile = new TempFile();\n+        writeOrcColumnsPresto(tempFile.getFile(), DWRF, CompressionKind.NONE, Optional.empty(), types, values, new OrcWriterStats());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMjYwNg=="}, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTc0MjcxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNzo0MFrOIKoCmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNzo0MFrOIKoCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMjY5Nw==", "bodyText": "nit: perhaps, testAllEmptyStrings", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548012697", "createdAt": "2020-12-23T15:27:40Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders\n+{\n+    /**\n+     * This test tests SliceDirectSelectiveStreamReader for the case where all elements to read are empty strings. The output Block should be a valid VariableWidthBlock with an\n+     * empty Slice. It is to simulate a problem seen in production. The state of SliceDirectSelectiveStreamReader to reproduce the problem is:\n+     * - dataStream: null\n+     * - presentStream: null\n+     * - lengthStream: not null\n+     * - filter: null\n+     * - outputRequired: true\n+     * - offsets array: non zeros\n+     * The test issues two reads, the first one reads a non-empty string and populates non-zero offsets. The second one reads the empty string with the above conditions met.\n+     */\n+    @Test\n+    public void testEmptySlice()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTc0NDc5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyODoyMlrOIKoD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNTozNVrOIK0Yvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzAyMA==", "bodyText": "This name is very generic, but the test itself applies only to SliceDirectSelectiveStreamReader. Perhaps, rename to TestSliceDirectSelectiveStreamReader.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548013020", "createdAt": "2020-12-23T15:28:22Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMzE1NQ==", "bodyText": "@mbasmanova I'm thinking to add more tests there, including more generic tests that cover all types, and also a test to resolve #15343 Do you think we can keep it as is for now?", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548213155", "createdAt": "2020-12-23T20:33:14Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzAyMA=="}, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDk3NQ==", "bodyText": "Sounds good.", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548214975", "createdAt": "2020-12-23T20:35:35Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcSelectiveStreamReaders.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.orc.reader.SelectiveStreamReader;\n+import com.facebook.presto.orc.reader.SliceSelectiveStreamReader;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.orc.OrcTester.Format.DWRF;\n+import static com.facebook.presto.orc.OrcTester.assertBlockEquals;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.writeOrcColumnsPresto;\n+import static com.facebook.presto.orc.TestingOrcPredicate.createOrcPredicate;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.Math.min;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestOrcSelectiveStreamReaders", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzAyMA=="}, "originalCommit": {"oid": "c74367d64d2f609defabe4205b29bfa8e30fa6b2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzcyNjUzOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo0MDo0OFrOIK7kwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDo1MjowNFrOIK-iIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMjczNw==", "bodyText": "this variable is not used; remove", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548332737", "createdAt": "2020-12-24T00:40:48Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "diffHunk": "@@ -935,6 +928,15 @@ public static void assertFileContentsPresto(\n         assertEquals(rowsProcessed, expectedValues.get(0).size());\n     }\n \n+    static void assertBlockEquals(Type type, Block block, List<?> expectedValues, int offset)\n+    {\n+        int positionCount = block.getPositionCount();\n+        List<Object> data = new ArrayList<>(positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM4MTIxOQ==", "bodyText": "@mbasmanova Variable removed and tests passed. Thank you! Merry Christmas!", "url": "https://github.com/prestodb/presto/pull/15549#discussion_r548381219", "createdAt": "2020-12-24T04:52:04Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/OrcTester.java", "diffHunk": "@@ -935,6 +928,15 @@ public static void assertFileContentsPresto(\n         assertEquals(rowsProcessed, expectedValues.get(0).size());\n     }\n \n+    static void assertBlockEquals(Type type, Block block, List<?> expectedValues, int offset)\n+    {\n+        int positionCount = block.getPositionCount();\n+        List<Object> data = new ArrayList<>(positionCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMjczNw=="}, "originalCommit": {"oid": "f420e9cd85d8dbeb0147b1ecdfb3ea86b28619da"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3305, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}