{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDMxMjg4", "number": 14799, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNDo1NFrOEMG0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozNzowOVrOEMQGtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMwMTE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNDo1NFrOGuBi7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNDo1NFrOGuBi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzAwNA==", "bodyText": "since this isn't dependent on the hive supported statistics at all, I would list out supported statistics here rather than calling getSupportedColumnStatistics.", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r450913004", "createdAt": "2020-07-07T14:34:54Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -981,6 +982,19 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        try {\n+            return MetastoreUtil.getSupportedColumnStatistics(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99fa9a623e9eb82b630c443a39179591494583a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTQ4NjIzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNToxNDozNVrOGuDYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNToxNDozNVrOGuDYVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzA2Mg==", "bodyText": "This function will be very similar to getSupportedColumnStatistics, replace throwing error with return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r450943062", "createdAt": "2020-07-07T15:14:35Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -981,6 +982,19 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        try {\n+            return MetastoreUtil.getSupportedColumnStatistics(type);\n+        }\n+        // In case there are unsupported column types (native format), specify a default column statistics.\n+        catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99fa9a623e9eb82b630c443a39179591494583a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5MDcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTo0N1rOGuHaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTo0N1rOGuHaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTA5NA==", "bodyText": "we can also do non-nulls by default.", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451009094", "createdAt": "2020-07-07T16:55:47Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -984,6 +1000,29 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n+        }\n+        // For other unknown column types, specify a default column statistics TOTAL_SIZE.\n+        return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced9a959482f944c2370df22cbdc72bc529ac6c6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM5NzkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToyMjo1OFrOGuMYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNDozNVrOGuNsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA==", "bodyText": "I don't think this is a reliable way to know if something is a temporary table, since technically any table can start with that prefix", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451090490", "createdAt": "2020-07-07T19:22:58Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,22 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDE1MA==", "bodyText": "You can use Table::PrestoTableType to check temporary table.", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451094150", "createdAt": "2020-07-07T19:30:03Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,22 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}, "originalCommit": {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNjY5OQ==", "bodyText": "I see. How about changing it to this:\nOptional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\nreturn getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451106699", "createdAt": "2020-07-07T19:54:08Z", "author": {"login": "pguofb"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,22 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}, "originalCommit": {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMTk1MQ==", "bodyText": "seems reasonable.", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451111951", "createdAt": "2020-07-07T20:04:35Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,22 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}, "originalCommit": {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ5NjE0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1MzozMlrOGuNWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1MzozMlrOGuNWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNjM4Mg==", "bodyText": "nit  // default    is enough\nor keep names same using TOTAL_SIZE_IN_BYTES and NUMBER_OF_NON_NULL_VALUES", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451106382", "createdAt": "2020-07-07T19:53:32Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -984,6 +1000,29 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n+        }\n+        // For other unknown column types, specify default column statistics TOTAL_SIZE and NON_NULL_VALUES which is not specific to any data type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjgyMjMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozNzowOVrOGuQglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo0NDozMlrOGuQttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1ODE2NA==", "bodyText": "is this never called for temporary tables?", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451158164", "createdAt": "2020-07-07T21:37:09Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,23 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        Optional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);\n     }\n \n     @Override\n     public TableStatisticsMetadata getStatisticsCollectionMetadata(ConnectorSession session, ConnectorTableMetadata tableMetadata)\n     {\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62c550f8015d2eae7661af071400fb37911c6c2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MTUyNQ==", "bodyText": "Yeah, this is never called for temporary tables. This is only called by AnalyzePlan.", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451161525", "createdAt": "2020-07-07T21:44:32Z", "author": {"login": "pguofb"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,23 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        Optional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);\n     }\n \n     @Override\n     public TableStatisticsMetadata getStatisticsCollectionMetadata(ConnectorSession session, ConnectorTableMetadata tableMetadata)\n     {\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1ODE2NA=="}, "originalCommit": {"oid": "b62c550f8015d2eae7661af071400fb37911c6c2"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2327, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}