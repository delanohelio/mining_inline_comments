{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MzkxNTIx", "number": 15173, "title": "Implement Spilling Strategies", "bodyText": "This PR adds multiple different spilling strategies that can be swapped between using the config experimental.spiller.task-spilling-strategy.\nORDER_BY_CREATE_TIME - current default strategy. Watch memory pools for revocable memory exceeding threshold, sort tasks by create time, revoke individual operators until we reach the lower threshold.\nORDER_BY_REVOCABLE_BYTES - NEW. Watch memory pools for revocable memory exceeding threshold, sort tasks by most allocated revocable bytes, revoke individual operators until we reach the lower threshold.\nPER_TASK_MEMORY_THRESHOLD - NEW. Watch revocable memory pool for memory exceeding per task memory threshold defined by experimental.spiller.max-revocable-task-memory. Spill operators in task until it lowers to this threshold.\nTODO\n\nfinish integration tests\nbetter commit message\nRelease note\n\n== RELEASE NOTES ==\n\nGeneral Changes\n* Add config `experimental.spiller.task-spilling-strategy` for choosing different spilling strategy to use.", "createdAt": "2020-09-15T15:47:27Z", "url": "https://github.com/prestodb/presto/pull/15173", "merged": true, "mergeCommit": {"oid": "544b5a4313fac313ddf6534e7740c2ddfd0c0bd5"}, "closed": true, "closedAt": "2020-09-29T23:35:36Z", "author": {"login": "sachdevs"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJJ4aZgBqjM3NjkxMDEwNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNvOmQABqjM4MjE3OTEzMzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00ac981a3b299df2d3211b4b3797b739f2dcd12e", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/00ac981a3b299df2d3211b4b3797b739f2dcd12e", "committedDate": "2020-09-15T15:46:30Z", "message": "Prototype spilling strategies for testing"}, "afterCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/5347917c2dfe02e6f4cf3595a85f2a021fc4479f", "committedDate": "2020-09-15T15:53:01Z", "message": "Prototype spilling strategies for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTgyMTQ4", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-489182148", "createdAt": "2020-09-15T23:51:21Z", "commit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo1MToyMlrOHSbHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNzo1OFrOHSba6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MDczNg==", "bodyText": "break line before this", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489080736", "createdAt": "2020-09-15T23:51:22Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -48,11 +51,14 @@\n     private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n \n     private static final Ordering<SqlTask> ORDER_BY_CREATE_TIME = Ordering.natural().onResultOf(task -> task.getTaskInfo().getStats().getCreateTime());\n+    private static final Ordering<SqlTask> ORDER_BY_REVOCABLE_MEMORY = Ordering.natural().onResultOf(task -> task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes());\n     private final List<MemoryPool> memoryPools;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MDk3OA==", "bodyText": "OptionalLong as this might not be used if we choose other strategies.", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489080978", "createdAt": "2020-09-15T23:52:14Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -48,11 +51,14 @@\n     private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n \n     private static final Ordering<SqlTask> ORDER_BY_CREATE_TIME = Ordering.natural().onResultOf(task -> task.getTaskInfo().getStats().getCreateTime());\n+    private static final Ordering<SqlTask> ORDER_BY_REVOCABLE_MEMORY = Ordering.natural().onResultOf(task -> task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes());\n     private final List<MemoryPool> memoryPools;\n     private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;\n     private final ScheduledExecutorService taskManagementExecutor;\n     private final double memoryRevokingThreshold;\n     private final double memoryRevokingTarget;\n+    private final long maxRevocableMemoryPerTask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTAxOQ==", "bodyText": "Both requireNonNull", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489081019", "createdAt": "2020-09-15T23:52:23Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -82,13 +90,17 @@ public MemoryRevokingScheduler(\n             Supplier<? extends Collection<SqlTask>> currentTasksSupplier,\n             ScheduledExecutorService taskManagementExecutor,\n             double memoryRevokingThreshold,\n-            double memoryRevokingTarget)\n+            double memoryRevokingTarget,\n+            long maxRevocableMemoryPerTask,\n+            TaskSpillingStrategy taskSpillingStrategy)\n     {\n         this.memoryPools = ImmutableList.copyOf(requireNonNull(memoryPools, \"memoryPools is null\"));\n         this.currentTasksSupplier = requireNonNull(currentTasksSupplier, \"currentTasksSupplier is null\");\n         this.taskManagementExecutor = requireNonNull(taskManagementExecutor, \"taskManagementExecutor is null\");\n         this.memoryRevokingThreshold = checkFraction(memoryRevokingThreshold, \"memoryRevokingThreshold\");\n         this.memoryRevokingTarget = checkFraction(memoryRevokingTarget, \"memoryRevokingTarget\");\n+        this.maxRevocableMemoryPerTask = maxRevocableMemoryPerTask;\n+        this.spillingStrategy = taskSpillingStrategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTkwNA==", "bodyText": "ORDER_BY_CREATE_TIME, ORDER_BY_REVOCABLE_BYTES , PER_TASK_MEMORY_THRESHOLD\nAlso add javadoc or comments to each option.", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489081904", "createdAt": "2020-09-15T23:55:20Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -222,6 +225,13 @@ public boolean isAdoptingMergedPreference()\n         }\n     }\n \n+    public enum TaskSpillingStrategy\n+    {\n+        SPILL_BY_CREATE_TIME,\n+        SPILL_BY_REVOCABLE_BYTES,\n+        SPILL_BY_TASK_MEMORY_THRESHOLD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTQwNA==", "bodyText": "We might need some unit/integration tests on this path", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489085404", "createdAt": "2020-09-16T00:07:03Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -184,6 +218,45 @@ private void scheduleRevoking()\n         });\n     }\n \n+    private synchronized void revokeHighMemoryTasks()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTY3NA==", "bodyText": "We might need to think about renaming this or merging this with above to not confuse people with different spilling strategies.", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r489085674", "createdAt": "2020-09-16T00:07:58Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -184,6 +218,45 @@ private void scheduleRevoking()\n         });\n     }\n \n+    private synchronized void revokeHighMemoryTasks()\n+    {\n+        if (checkPending.getAndSet(false)) {\n+            Collection<SqlTask> sqlTasks = requireNonNull(currentTasksSupplier.get());\n+            for (SqlTask task : sqlTasks) {\n+                long currentTaskAllocation = task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes();\n+\n+                if (currentTaskAllocation > maxRevocableMemoryPerTask) {\n+                    AtomicLong remainingBytesToRevokeAtomic = new AtomicLong(currentTaskAllocation - maxRevocableMemoryPerTask);\n+                    task.getQueryContext().accept(new VoidTraversingQueryContextVisitor<AtomicLong>()\n+                    {\n+                        @Override\n+                        public Void visitQueryContext(QueryContext queryContext, AtomicLong remainingBytesToRevoke)\n+                        {\n+                            if (remainingBytesToRevoke.get() < 0) {\n+                                // exit immediately if no work needs to be done\n+                                return null;\n+                            }\n+                            return super.visitQueryContext(queryContext, remainingBytesToRevoke);\n+                        }\n+\n+                        @Override\n+                        public Void visitOperatorContext(OperatorContext operatorContext, AtomicLong remainingBytesToRevoke)\n+                        {\n+                            if (remainingBytesToRevoke.get() > 0) {\n+                                long revokedBytes = operatorContext.requestMemoryRevoking();\n+                                if (revokedBytes > 0) {\n+                                    remainingBytesToRevoke.addAndGet(-revokedBytes);\n+                                    log.debug(\"taskId=%s: requested revoking %s; remaining %s\", task.getTaskInfo().getTaskId(), revokedBytes, remainingBytesToRevoke.get());\n+                                }\n+                            }\n+                            return null;\n+                        }\n+                    }, remainingBytesToRevokeAtomic);\n+                }\n+            }\n+        }\n+    }\n+\n     private synchronized void runMemoryRevoking()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f"}, "originalPosition": 145}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5347917c2dfe02e6f4cf3595a85f2a021fc4479f", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/5347917c2dfe02e6f4cf3595a85f2a021fc4479f", "committedDate": "2020-09-15T15:53:01Z", "message": "Prototype spilling strategies for testing"}, "afterCommit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/3d0be0088915633f1b3989227d961e58a1521224", "committedDate": "2020-09-24T03:51:33Z", "message": "Implement spilling strategies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODkxMzky", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-496891392", "createdAt": "2020-09-25T22:12:35Z", "commit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxMjozNlrOHYVHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxMjozNlrOHYVHWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3MzgxNw==", "bodyText": "Sorry if it's a dumb question. I just realized memory revoking scheduler (and MemoryRevokingScheduler) doesn't implement any interface. Curious how are they get called? I assume it's related to the @PostConstruct and @PreDestroy annotation?", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r495273817", "createdAt": "2020-09-25T22:12:36Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODk0Mzgx", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-496894381", "createdAt": "2020-09-25T22:21:39Z", "commit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoyMTozOVrOHYVdVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoyMTozOVrOHYVdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3OTQ0Nw==", "bodyText": "nit: consider use a switch? So you can throw UnsupportedOperationException for enum values not applicable.", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r495279447", "createdAt": "2020-09-25T22:21:39Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -244,10 +251,12 @@ public Long mergeResults(List<Long> childrenResults)\n     private void requestRevoking(MemoryPool memoryPool, Collection<SqlTask> sqlTasks, long remainingBytesToRevoke)\n     {\n         AtomicLong remainingBytesToRevokeAtomic = new AtomicLong(remainingBytesToRevoke);\n+        Ordering<SqlTask> sqlTaskOrdering = spillingStrategy == TaskSpillingStrategy.ORDER_BY_CREATE_TIME ? ORDER_BY_CREATE_TIME : ORDER_BY_REVOCABLE_MEMORY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d0be0088915633f1b3989227d961e58a1521224", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/3d0be0088915633f1b3989227d961e58a1521224", "committedDate": "2020-09-24T03:51:33Z", "message": "Implement spilling strategies"}, "afterCommit": {"oid": "0b338429442481f5748b9561d6b41374d189b746", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/0b338429442481f5748b9561d6b41374d189b746", "committedDate": "2020-09-28T18:12:28Z", "message": "Implement spilling strategies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b338429442481f5748b9561d6b41374d189b746", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/0b338429442481f5748b9561d6b41374d189b746", "committedDate": "2020-09-28T18:12:28Z", "message": "Implement spilling strategies"}, "afterCommit": {"oid": "46ed059c03bd9442fbafd57dd9edf5bb82cde515", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/46ed059c03bd9442fbafd57dd9edf5bb82cde515", "committedDate": "2020-09-28T18:48:21Z", "message": "Implement spilling strategies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODE5MjY5", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-497819269", "createdAt": "2020-09-28T19:09:25Z", "commit": {"oid": "46ed059c03bd9442fbafd57dd9edf5bb82cde515"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowOToyNVrOHZL-lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowOToyNVrOHZL-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MjY5NQ==", "bodyText": "Should we treat join and aggregation spill the same way? The cost of spilling them is not uniform.\nWith join if you spill it then the entire probe side has to be spilled incurring a 3x IO cost.\nWith aggregation if you spill it will have to merge in one more run, but it can continue to use memory to avoid creating more sorted runs.\nIn practice whether this distinction matters often???", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496172695", "createdAt": "2020-09-28T19:09:25Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -222,6 +225,13 @@ public boolean isAdoptingMergedPreference()\n         }\n     }\n \n+    public enum TaskSpillingStrategy\n+    {\n+        ORDER_BY_CREATE_TIME, // When spilling is triggered, revoke tasks in order of oldest to newest\n+        ORDER_BY_REVOCABLE_BYTES, // When spilling is triggered, revoke tasks by most allocated revocable memory to least allocated revocable memory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ed059c03bd9442fbafd57dd9edf5bb82cde515"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46ed059c03bd9442fbafd57dd9edf5bb82cde515", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/46ed059c03bd9442fbafd57dd9edf5bb82cde515", "committedDate": "2020-09-28T18:48:21Z", "message": "Implement spilling strategies"}, "afterCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/400f1fbd85811e04bfcad29e9372c7b77fbb68b0", "committedDate": "2020-09-28T19:15:36Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDgyNDY4", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-498082468", "createdAt": "2020-09-29T04:11:59Z", "commit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoxMTo1OVrOHZX6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyNDowOVrOHZYcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2ODE5OA==", "bodyText": "s/Mocked/Testing", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496368198", "createdAt": "2020-09-29T04:11:59Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestMemoryRevokingScheduler.java", "diffHunk": "@@ -262,13 +398,76 @@ private OperatorContext createContexts(SqlTask sqlTask)\n         return operatorContext;\n     }\n \n+    private MockedOperatorContext createMockedContexts(SqlTask sqlTask, String operatorName)\n+    {\n+        // update task to update underlying taskHolderReference with taskExecution + create a new taskContext\n+        sqlTask.updateTask(TEST_SESSION,\n+                Optional.of(PLAN_FRAGMENT),\n+                ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID, ImmutableSet.of(SPLIT), false)),\n+                createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds(),\n+                Optional.of(new TableWriteInfo(Optional.empty(), Optional.empty(), Optional.empty())));\n+\n+        // use implicitly created task context from updateTask. It should be the only task in this QueryContext's tasks\n+        TaskContext taskContext = sqlTask.getQueryContext().getTaskContextByTaskId(sqlTask.getTaskId());\n+        PipelineContext pipelineContext = taskContext.addPipelineContext(0, false, false, false);\n+        DriverContext driverContext = pipelineContext.addDriverContext();\n+        MockedOperatorContext mockedOperatorContext = new MockedOperatorContext(\n+                1,\n+                new PlanNodeId(\"na\"),\n+                \"na\",\n+                driverContext,\n+                executor,\n+                driverContext.getDriverMemoryContext().newMemoryTrackingContext(),\n+                operatorName);\n+        driverContext.addOperatorContext(mockedOperatorContext);\n+        return mockedOperatorContext;\n+    }\n+\n+    private static class MockedOperatorContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2ODQwMQ==", "bodyText": "createTestingOperatorContexts", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496368401", "createdAt": "2020-09-29T04:12:15Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestMemoryRevokingScheduler.java", "diffHunk": "@@ -262,13 +398,76 @@ private OperatorContext createContexts(SqlTask sqlTask)\n         return operatorContext;\n     }\n \n+    private MockedOperatorContext createMockedContexts(SqlTask sqlTask, String operatorName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2OTMyOQ==", "bodyText": "We probably need to fix TestFeaturesConfig", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496369329", "createdAt": "2020-09-29T04:13:39Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -78,6 +79,8 @@\n     private int concurrentLifespansPerTask;\n     private boolean spatialJoinsEnabled = true;\n     private boolean fastInequalityJoins = true;\n+    private TaskSpillingStrategy taskSpillingStrategy = ORDER_BY_CREATE_TIME;\n+    private long maxRevocableMemoryPerTask = 500000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2OTc2NQ==", "bodyText": "break a line after this.", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496369765", "createdAt": "2020-09-29T04:14:17Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3MjU5Mg==", "bodyText": "I guess this variable is not thread-safe? Maybe have synchronized methods/blocks + \"GuardedBy(\"this\")\"", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496372592", "createdAt": "2020-09-29T04:18:15Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;\n+    private final ScheduledExecutorService taskManagementExecutor;\n+    private final long maxRevocableMemoryPerTask;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scheduledFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NTMyMA==", "bodyText": "This is not thread-safe", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496375320", "createdAt": "2020-09-29T04:21:57Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;\n+    private final ScheduledExecutorService taskManagementExecutor;\n+    private final long maxRevocableMemoryPerTask;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scheduledFuture;\n+\n+    private final AtomicBoolean checkPending = new AtomicBoolean();\n+\n+    @Inject\n+    public TaskThresholdMemoryRevokingScheduler(\n+            SqlTaskManager sqlTaskManager,\n+            TaskManagementExecutor taskManagementExecutor,\n+            FeaturesConfig config)\n+    {\n+        this(\n+                requireNonNull(sqlTaskManager, \"sqlTaskManager cannot be null\")::getAllTasks,\n+                requireNonNull(taskManagementExecutor, \"taskManagementExecutor cannot be null\").getExecutor(),\n+                config.getMaxRevocableMemoryPerTask());\n+        log.debug(\"Using TaskThresholdMemoryRevokingScheduler spilling strategy\");\n+    }\n+\n+    @VisibleForTesting\n+    TaskThresholdMemoryRevokingScheduler(\n+            Supplier<? extends Collection<SqlTask>> currentTasksSupplier,\n+            ScheduledExecutorService taskManagementExecutor,\n+            long maxRevocableMemoryPerTask)\n+    {\n+        this.currentTasksSupplier = requireNonNull(currentTasksSupplier, \"currentTasksSupplier is null\");\n+        this.taskManagementExecutor = requireNonNull(taskManagementExecutor, \"taskManagementExecutor is null\");\n+        this.maxRevocableMemoryPerTask = maxRevocableMemoryPerTask;\n+    }\n+\n+    @PostConstruct\n+    public void start()\n+    {\n+        registerTaskMemoryPeriodicCheck();\n+    }\n+\n+    private void registerTaskMemoryPeriodicCheck()\n+    {\n+        this.scheduledFuture = taskManagementExecutor.scheduleWithFixedDelay(() -> {\n+            try {\n+                revokeHighMemoryTasksIfNeeded();\n+            }\n+            catch (Throwable e) {\n+                log.error(e, \"Error requesting task memory revoking\");\n+            }\n+        }, 1, 1, SECONDS);\n+    }\n+\n+    @PreDestroy\n+    public void stop()\n+    {\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(true);\n+            scheduledFuture = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjM5OQ==", "bodyText": "Why not just use Supplier<List<SqlTask>>?", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496376399", "createdAt": "2020-09-29T04:23:31Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjgzMw==", "bodyText": "if (currentTaskAllocation < maxRevocableMemoryPerTask) {\n    continue;\n}\n\n....", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496376833", "createdAt": "2020-09-29T04:24:09Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;\n+    private final ScheduledExecutorService taskManagementExecutor;\n+    private final long maxRevocableMemoryPerTask;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scheduledFuture;\n+\n+    private final AtomicBoolean checkPending = new AtomicBoolean();\n+\n+    @Inject\n+    public TaskThresholdMemoryRevokingScheduler(\n+            SqlTaskManager sqlTaskManager,\n+            TaskManagementExecutor taskManagementExecutor,\n+            FeaturesConfig config)\n+    {\n+        this(\n+                requireNonNull(sqlTaskManager, \"sqlTaskManager cannot be null\")::getAllTasks,\n+                requireNonNull(taskManagementExecutor, \"taskManagementExecutor cannot be null\").getExecutor(),\n+                config.getMaxRevocableMemoryPerTask());\n+        log.debug(\"Using TaskThresholdMemoryRevokingScheduler spilling strategy\");\n+    }\n+\n+    @VisibleForTesting\n+    TaskThresholdMemoryRevokingScheduler(\n+            Supplier<? extends Collection<SqlTask>> currentTasksSupplier,\n+            ScheduledExecutorService taskManagementExecutor,\n+            long maxRevocableMemoryPerTask)\n+    {\n+        this.currentTasksSupplier = requireNonNull(currentTasksSupplier, \"currentTasksSupplier is null\");\n+        this.taskManagementExecutor = requireNonNull(taskManagementExecutor, \"taskManagementExecutor is null\");\n+        this.maxRevocableMemoryPerTask = maxRevocableMemoryPerTask;\n+    }\n+\n+    @PostConstruct\n+    public void start()\n+    {\n+        registerTaskMemoryPeriodicCheck();\n+    }\n+\n+    private void registerTaskMemoryPeriodicCheck()\n+    {\n+        this.scheduledFuture = taskManagementExecutor.scheduleWithFixedDelay(() -> {\n+            try {\n+                revokeHighMemoryTasksIfNeeded();\n+            }\n+            catch (Throwable e) {\n+                log.error(e, \"Error requesting task memory revoking\");\n+            }\n+        }, 1, 1, SECONDS);\n+    }\n+\n+    @PreDestroy\n+    public void stop()\n+    {\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(true);\n+            scheduledFuture = null;\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public void revokeHighMemoryTasksIfNeeded()\n+    {\n+        if (checkPending.compareAndSet(false, true)) {\n+            revokeHighMemoryTasks();\n+        }\n+    }\n+\n+    private synchronized void revokeHighMemoryTasks()\n+    {\n+        if (checkPending.getAndSet(false)) {\n+            Collection<SqlTask> sqlTasks = requireNonNull(currentTasksSupplier.get());\n+            for (SqlTask task : sqlTasks) {\n+                long currentTaskAllocation = task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes();\n+\n+                if (currentTaskAllocation > maxRevocableMemoryPerTask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/400f1fbd85811e04bfcad29e9372c7b77fbb68b0", "committedDate": "2020-09-28T19:15:36Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}, "afterCommit": {"oid": "c56cc077543868cc09331d9ebb8fac38d43b3065", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/c56cc077543868cc09331d9ebb8fac38d43b3065", "committedDate": "2020-09-29T17:03:00Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c56cc077543868cc09331d9ebb8fac38d43b3065", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/c56cc077543868cc09331d9ebb8fac38d43b3065", "committedDate": "2020-09-29T17:03:00Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}, "afterCommit": {"oid": "43a9b80f218c2f33e71a466303ad196a9cf1c28c", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/43a9b80f218c2f33e71a466303ad196a9cf1c28c", "committedDate": "2020-09-29T17:09:17Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDg3NTQ3", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-498087547", "createdAt": "2020-09-29T04:30:28Z", "commit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozMDoyOFrOHZYtVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo1ODoyMVrOHZ1HDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4MTI3MQ==", "bodyText": "nit: why not just use sqlTaskOrdering here?", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496381271", "createdAt": "2020-09-29T04:30:28Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -244,10 +253,25 @@ public Long mergeResults(List<Long> childrenResults)\n     private void requestRevoking(MemoryPool memoryPool, Collection<SqlTask> sqlTasks, long remainingBytesToRevoke)\n     {\n         AtomicLong remainingBytesToRevokeAtomic = new AtomicLong(remainingBytesToRevoke);\n+\n+        Ordering<SqlTask> sqlTaskOrdering;\n+        switch (spillingStrategy) {\n+            case ORDER_BY_CREATE_TIME:\n+                sqlTaskOrdering = ORDER_BY_CREATE_TIME;\n+                break;\n+            case ORDER_BY_REVOCABLE_BYTES:\n+                sqlTaskOrdering = ORDER_BY_REVOCABLE_MEMORY;\n+                break;\n+            case PER_TASK_MEMORY_THRESHOLD:\n+            default:\n+                throw new UnsupportedOperationException(\"Unexpected spilling strategy in MemoryRevokingScheduler\");\n+        }\n+        log.debug(\"Ordering by %s\", spillingStrategy == TaskSpillingStrategy.ORDER_BY_CREATE_TIME ? ORDER_BY_CREATE_TIME : ORDER_BY_REVOCABLE_MEMORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NjIwNw==", "bodyText": "Looks like it's just copied from existing MemoryRevokingScheduler \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496846207", "createdAt": "2020-09-29T15:57:59Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;\n+    private final ScheduledExecutorService taskManagementExecutor;\n+    private final long maxRevocableMemoryPerTask;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scheduledFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3MjU5Mg=="}, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NjYwNg==", "bodyText": "Because existing MemoryRevokingScheduler is using Supplier<? extends Collection<SqlTask>>? \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496846606", "createdAt": "2020-09-29T15:58:21Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(MemoryRevokingScheduler.class);\n+    private final Supplier<? extends Collection<SqlTask>> currentTasksSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjM5OQ=="}, "originalCommit": {"oid": "400f1fbd85811e04bfcad29e9372c7b77fbb68b0"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzE3NjY0", "url": "https://github.com/prestodb/presto/pull/15173#pullrequestreview-498717664", "createdAt": "2020-09-29T17:26:04Z", "commit": {"oid": "43a9b80f218c2f33e71a466303ad196a9cf1c28c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNjowNVrOHZ5Ljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNjowNVrOHZ5Ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMzI5NQ==", "bodyText": "nti: currentRevocableMemory?", "url": "https://github.com/prestodb/presto/pull/15173#discussion_r496913295", "createdAt": "2020-09-29T17:26:05Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.memory.QueryContext;\n+import com.facebook.presto.memory.VoidTraversingQueryContextVisitor;\n+import com.facebook.presto.operator.OperatorContext;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TaskThresholdMemoryRevokingScheduler\n+{\n+    private static final Logger log = Logger.get(TaskThresholdMemoryRevokingScheduler.class);\n+\n+    private final Supplier<List<SqlTask>> currentTasksSupplier;\n+    private final ScheduledExecutorService taskManagementExecutor;\n+    private final long maxRevocableMemoryPerTask;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scheduledFuture;\n+\n+    private final AtomicBoolean checkPending = new AtomicBoolean();\n+\n+    @Inject\n+    public TaskThresholdMemoryRevokingScheduler(\n+            SqlTaskManager sqlTaskManager,\n+            TaskManagementExecutor taskManagementExecutor,\n+            FeaturesConfig config)\n+    {\n+        this(\n+                requireNonNull(sqlTaskManager, \"sqlTaskManager cannot be null\")::getAllTasks,\n+                requireNonNull(taskManagementExecutor, \"taskManagementExecutor cannot be null\").getExecutor(),\n+                config.getMaxRevocableMemoryPerTask());\n+        log.debug(\"Using TaskThresholdMemoryRevokingScheduler spilling strategy\");\n+    }\n+\n+    @VisibleForTesting\n+    TaskThresholdMemoryRevokingScheduler(\n+            Supplier<List<SqlTask>> currentTasksSupplier,\n+            ScheduledExecutorService taskManagementExecutor,\n+            long maxRevocableMemoryPerTask)\n+    {\n+        this.currentTasksSupplier = requireNonNull(currentTasksSupplier, \"currentTasksSupplier is null\");\n+        this.taskManagementExecutor = requireNonNull(taskManagementExecutor, \"taskManagementExecutor is null\");\n+        this.maxRevocableMemoryPerTask = maxRevocableMemoryPerTask;\n+    }\n+\n+    @PostConstruct\n+    public void start()\n+    {\n+        registerTaskMemoryPeriodicCheck();\n+    }\n+\n+    private void registerTaskMemoryPeriodicCheck()\n+    {\n+        this.scheduledFuture = taskManagementExecutor.scheduleWithFixedDelay(() -> {\n+            try {\n+                revokeHighMemoryTasksIfNeeded();\n+            }\n+            catch (Throwable e) {\n+                log.error(e, \"Error requesting task memory revoking\");\n+            }\n+        }, 1, 1, SECONDS);\n+    }\n+\n+    @PreDestroy\n+    public void stop()\n+    {\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(true);\n+            scheduledFuture = null;\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    void revokeHighMemoryTasksIfNeeded()\n+    {\n+        if (checkPending.compareAndSet(false, true)) {\n+            revokeHighMemoryTasks();\n+        }\n+    }\n+\n+    private synchronized void revokeHighMemoryTasks()\n+    {\n+        if (checkPending.getAndSet(false)) {\n+            Collection<SqlTask> sqlTasks = requireNonNull(currentTasksSupplier.get());\n+            for (SqlTask task : sqlTasks) {\n+                long currentTaskAllocation = task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a9b80f218c2f33e71a466303ad196a9cf1c28c"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43a9b80f218c2f33e71a466303ad196a9cf1c28c", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/43a9b80f218c2f33e71a466303ad196a9cf1c28c", "committedDate": "2020-09-29T17:09:17Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}, "afterCommit": {"oid": "d6e2c5be9ba3bb0eac66e3a153574e1adfb47e1d", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/d6e2c5be9ba3bb0eac66e3a153574e1adfb47e1d", "committedDate": "2020-09-29T17:54:39Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6e2c5be9ba3bb0eac66e3a153574e1adfb47e1d", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/d6e2c5be9ba3bb0eac66e3a153574e1adfb47e1d", "committedDate": "2020-09-29T17:54:39Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}, "afterCommit": {"oid": "4be43f5793275a763a5e6f4775609f175e9c1d78", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/4be43f5793275a763a5e6f4775609f175e9c1d78", "committedDate": "2020-09-29T19:07:08Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bf9207af6b6890599dfe115ab9fccd2921dd633", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/5bf9207af6b6890599dfe115ab9fccd2921dd633", "committedDate": "2020-09-29T21:39:30Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4be43f5793275a763a5e6f4775609f175e9c1d78", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/4be43f5793275a763a5e6f4775609f175e9c1d78", "committedDate": "2020-09-29T19:07:08Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}, "afterCommit": {"oid": "5bf9207af6b6890599dfe115ab9fccd2921dd633", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/5bf9207af6b6890599dfe115ab9fccd2921dd633", "committedDate": "2020-09-29T21:39:30Z", "message": "Introduce TaskSpillingStrategy and multiple spilling strategies\nThis adds ordering tasks by revocable bytes and per task memory\nthreshold alongside ordering by create time."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}