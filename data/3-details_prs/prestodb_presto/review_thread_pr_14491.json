{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzY4NzU1", "number": 14491, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowODowMlrOD6BxtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowODowMlrOD6BxtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTczMTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowODowMlrOGRojrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozNTo0MlrOGRtMcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MzQ3MQ==", "bodyText": "When you are at it - is it feasible to make all these also fields instead of passing so many arguments?", "url": "https://github.com/prestodb/presto/pull/14491#discussion_r421143471", "createdAt": "2020-05-06T23:08:02Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -839,13 +866,8 @@ public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context\n         public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n         {\n             CommonSubExpressionFields fields = variableMap.get(reference);\n-            IfStatement ifStatement = new IfStatement()\n-                    .condition(thisVariable.getField(fields.evaluatedField))\n-                    .ifFalse(new BytecodeBlock()\n-                            .append(thisVariable.invoke(fields.methodName, void.class, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\"))));\n             return new BytecodeBlock()\n-                    .append(ifStatement)\n-                    .append(thisVariable.getField(fields.resultField))\n+                    .append(thisVariable.invoke(fields.methodName, fields.resultType, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4957dc04962c1dc01292ce54b7ef697b65f40470"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5MzE1MA==", "bodyText": "What do you mean? They are function parameters in evaluate as well, and these functions are called from evaluate. I think it makes more sense to keep them consistent.", "url": "https://github.com/prestodb/presto/pull/14491#discussion_r421193150", "createdAt": "2020-05-07T01:53:06Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -839,13 +866,8 @@ public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context\n         public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n         {\n             CommonSubExpressionFields fields = variableMap.get(reference);\n-            IfStatement ifStatement = new IfStatement()\n-                    .condition(thisVariable.getField(fields.evaluatedField))\n-                    .ifFalse(new BytecodeBlock()\n-                            .append(thisVariable.invoke(fields.methodName, void.class, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\"))));\n             return new BytecodeBlock()\n-                    .append(ifStatement)\n-                    .append(thisVariable.getField(fields.resultField))\n+                    .append(thisVariable.invoke(fields.methodName, fields.resultType, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MzQ3MQ=="}, "originalCommit": {"oid": "4957dc04962c1dc01292ce54b7ef697b65f40470"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTQ0MQ==", "bodyText": "I guess so. It's just that the whole param passing is unnecessary. Saves a few bytes in the method size too :) Hopefully the JIT will remove all that at least from performance point of view, it should be ok", "url": "https://github.com/prestodb/presto/pull/14491#discussion_r421219441", "createdAt": "2020-05-07T03:35:42Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -839,13 +866,8 @@ public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context\n         public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n         {\n             CommonSubExpressionFields fields = variableMap.get(reference);\n-            IfStatement ifStatement = new IfStatement()\n-                    .condition(thisVariable.getField(fields.evaluatedField))\n-                    .ifFalse(new BytecodeBlock()\n-                            .append(thisVariable.invoke(fields.methodName, void.class, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\"))));\n             return new BytecodeBlock()\n-                    .append(ifStatement)\n-                    .append(thisVariable.getField(fields.resultField))\n+                    .append(thisVariable.invoke(fields.methodName, fields.resultType, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MzQ3MQ=="}, "originalCommit": {"oid": "4957dc04962c1dc01292ce54b7ef697b65f40470"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2581, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}