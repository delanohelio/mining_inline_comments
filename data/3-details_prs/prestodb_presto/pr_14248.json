{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MjI4NzIy", "number": 14248, "title": "Add AccessControlContext to store client information for security purposes", "bodyText": "== RELEASE NOTES ==\n\nSPI Changes\n* All the methods in ``SystemAccessControl`` now take additional \n  parameter ``AccessControlContext context``", "createdAt": "2020-03-14T09:08:42Z", "url": "https://github.com/prestodb/presto/pull/14248", "merged": true, "mergeCommit": {"oid": "efd979afa5efcf616ac1ae0b806fcad3a0cf1ab0"}, "closed": true, "closedAt": "2020-03-26T18:32:48Z", "author": {"login": "NikhilCollooru"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOlRWyAFqTM3NTY2NTQ1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRNabxABqjMxNjU2MjE0NTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjY1NDU3", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-375665457", "createdAt": "2020-03-17T00:26:15Z", "commit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyNjoxNVrOF3KGoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoyNDoxNFrOF3kAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTUzNg==", "bodyText": "Should we just change this to take the Identity as the first argument ? That way this matches all the other functions and if you take a look at the callsite, it anyways gets the principal from the Identity", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r393381536", "createdAt": "2020-03-17T00:26:15Z", "author": {"login": "mayankgarg1990"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/SystemAccessControl.java", "diffHunk": "@@ -51,7 +52,7 @@\n      *\n      * @throws AccessDeniedException if not allowed\n      */\n-    void checkCanSetUser(Optional<Principal> principal, String userName);\n+    void checkCanSetUser(Optional<Principal> principal, String userName, Map<String, String> extraInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MzczMg==", "bodyText": "why provided?", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r393383732", "createdAt": "2020-03-17T00:35:33Z", "author": {"login": "mayankgarg1990"}, "path": "presto-spi/pom.xml", "diffHunk": "@@ -43,6 +43,12 @@\n             <artifactId>jol-core</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNTk2MQ==", "bodyText": "Given the way it is being set, do you feel that just calling it clientInformation might be a better option?", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r393805961", "createdAt": "2020-03-17T16:24:14Z", "author": {"login": "mayankgarg1990"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/Identity.java", "diffHunk": "@@ -29,18 +31,20 @@\n     private final Optional<Principal> principal;\n     private final Map<String, SelectedRole> roles;\n     private final Map<String, String> extraCredentials;\n+    private Map<String, String> extraInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQzNDY5", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-376443469", "createdAt": "2020-03-17T22:16:51Z", "commit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxNjo1MVrOF3v-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxNjo1MVrOF3v-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjE0Nw==", "bodyText": "Guava should not be a part of the SPI. Please revert.", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r394002147", "createdAt": "2020-03-17T22:16:51Z", "author": {"login": "arhimondr"}, "path": "presto-spi/pom.xml", "diffHunk": "@@ -43,6 +43,12 @@\n             <artifactId>jol-core</artifactId>\n         </dependency>\n \n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "546af4ae63e59f6a431417c11401d22695196c81", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/546af4ae63e59f6a431417c11401d22695196c81", "committedDate": "2020-03-14T08:15:45Z", "message": "Add extraInfo to Identity"}, "afterCommit": {"oid": "24cb5fc2df5ffa46e7cffd56d052a5636d33356f", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/24cb5fc2df5ffa46e7cffd56d052a5636d33356f", "committedDate": "2020-03-20T05:49:08Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjMzNTk3", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-378633597", "createdAt": "2020-03-20T16:27:51Z", "commit": {"oid": "24cb5fc2df5ffa46e7cffd56d052a5636d33356f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyNzo1MVrOF5aygQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjozMDo1MFrOF5a6EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MjA2NQ==", "bodyText": "just return Optional<String> that way the implementation can decide what to do if the value is not present.", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395752065", "createdAt": "2020-03-20T16:27:51Z", "author": {"login": "mayankgarg1990"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/AccessControlContext.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.security;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+import java.util.Optional;\n+\n+public class AccessControlContext\n+{\n+    private final QueryId queryId;\n+    private final Optional<String> clientInfo;\n+\n+    public AccessControlContext(QueryId queryId, Optional<String> clientInfo)\n+    {\n+        this.queryId = queryId;\n+        this.clientInfo = clientInfo;\n+    }\n+\n+    public String getQueryId()\n+    {\n+        return queryId.getId();\n+    }\n+\n+    public String getClientInfo()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cb5fc2df5ffa46e7cffd56d052a5636d33356f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1NDAwMA==", "bodyText": "not used?", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395754000", "createdAt": "2020-03-20T16:30:50Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/SessionRepresentation.java", "diffHunk": "@@ -37,6 +38,9 @@\n \n public final class SessionRepresentation\n {\n+    private static final String CLIENT_INFO = \"client_info\";\n+    private static final String QUERY_ID = \"query_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cb5fc2df5ffa46e7cffd56d052a5636d33356f"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24cb5fc2df5ffa46e7cffd56d052a5636d33356f", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/24cb5fc2df5ffa46e7cffd56d052a5636d33356f", "committedDate": "2020-03-20T05:49:08Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/ddd8abeba55b84cd79a69344c0ba5c03c77f0996", "committedDate": "2020-03-20T17:23:58Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzMyNDc2", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-378732476", "createdAt": "2020-03-20T18:47:03Z", "commit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0NzowNFrOF5fdlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo1NzoxNVrOF5fx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODYzMA==", "bodyText": "I would recommend to group together the parameters that are generic to every method:\ne.g.:\ncheckCanCreateSchema(ConnectorTransactionHandle transactionHandle, ConnectorIdentity identity, AccessControlContext context, String schemaName)\n\nIt is much easier to read the interface as it is easier to figure out what parameters are important, and what are a boilerplate.\nIntellij has an utility for changing method signatures. It allows to easily change the parameters order.", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395828630", "createdAt": "2020-03-20T18:47:04Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -61,38 +62,38 @@ public LegacyAccessControl(\n     }\n \n     @Override\n-    public void checkCanCreateSchema(ConnectorTransactionHandle transactionHandle, ConnectorIdentity identity, String schemaName)\n+    public void checkCanCreateSchema(ConnectorTransactionHandle transactionHandle, ConnectorIdentity identity, String schemaName, AccessControlContext context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTU3NQ==", "bodyText": "The AccessControlContext is based on the values that are already stored in the Session. Thus introduces data duplication that is potentially a risk of going out of sync. It doesn't feel like this object should be stored here.", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395829575", "createdAt": "2020-03-20T18:48:55Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/Session.java", "diffHunk": "@@ -80,6 +81,7 @@\n     private final Map<String, Map<String, String>> unprocessedCatalogProperties;\n     private final SessionPropertyManager sessionPropertyManager;\n     private final Map<String, String> preparedStatements;\n+    private final AccessControlContext accessControlContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMDU3NA==", "bodyText": "I wonder if we should simply create the AccessControlContext in the getAccessControlContext (and maybe rename the method to something like createAccessControlContext)", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395830574", "createdAt": "2020-03-20T18:50:53Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/Session.java", "diffHunk": "@@ -80,6 +81,7 @@\n     private final Map<String, Map<String, String>> unprocessedCatalogProperties;\n     private final SessionPropertyManager sessionPropertyManager;\n     private final Map<String, String> preparedStatements;\n+    private final AccessControlContext accessControlContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTU3NQ=="}, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMzU4MQ==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395833581", "createdAt": "2020-03-20T18:56:46Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/AccessControlContext.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.security;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+import java.util.Optional;\n+\n+public class AccessControlContext\n+{\n+    private final QueryId queryId;\n+    private final Optional<String> clientInfo;\n+\n+    public AccessControlContext(QueryId queryId, Optional<String> clientInfo)\n+    {\n+        this.queryId = queryId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMzYzMA==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395833630", "createdAt": "2020-03-20T18:56:52Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/AccessControlContext.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.security;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+import java.util.Optional;\n+\n+public class AccessControlContext\n+{\n+    private final QueryId queryId;\n+    private final Optional<String> clientInfo;\n+\n+    public AccessControlContext(QueryId queryId, Optional<String> clientInfo)\n+    {\n+        this.queryId = queryId;\n+        this.clientInfo = clientInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMzc2Mg==", "bodyText": "return queryId", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395833762", "createdAt": "2020-03-20T18:57:07Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/AccessControlContext.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.security;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+import java.util.Optional;\n+\n+public class AccessControlContext\n+{\n+    private final QueryId queryId;\n+    private final Optional<String> clientInfo;\n+\n+    public AccessControlContext(QueryId queryId, Optional<String> clientInfo)\n+    {\n+        this.queryId = queryId;\n+        this.clientInfo = clientInfo;\n+    }\n+\n+    public String getQueryId()\n+    {\n+        return queryId.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMzgzNA==", "bodyText": "QueryId", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r395833834", "createdAt": "2020-03-20T18:57:15Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/security/AccessControlContext.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.security;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+import java.util.Optional;\n+\n+public class AccessControlContext\n+{\n+    private final QueryId queryId;\n+    private final Optional<String> clientInfo;\n+\n+    public AccessControlContext(QueryId queryId, Optional<String> clientInfo)\n+    {\n+        this.queryId = queryId;\n+        this.clientInfo = clientInfo;\n+    }\n+\n+    public String getQueryId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddd8abeba55b84cd79a69344c0ba5c03c77f0996", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/ddd8abeba55b84cd79a69344c0ba5c03c77f0996", "committedDate": "2020-03-20T17:23:58Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "d33955c6e0b2a958ebe28eadc3ec6f324049487c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d33955c6e0b2a958ebe28eadc3ec6f324049487c", "committedDate": "2020-03-20T20:58:44Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d33955c6e0b2a958ebe28eadc3ec6f324049487c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d33955c6e0b2a958ebe28eadc3ec6f324049487c", "committedDate": "2020-03-20T20:58:44Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/4d099b76e8a2aa9133b46bbe1f881f590aaa5b29", "committedDate": "2020-03-20T22:16:27Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTQzMzM0", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-379543334", "createdAt": "2020-03-23T15:30:37Z", "commit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "state": "APPROVED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMDozN1rOF6K1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozNzo1MlrOF6LMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTM4NQ==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396539385", "createdAt": "2020-03-23T15:30:37Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AccessControl.java", "diffHunk": "@@ -117,154 +118,158 @@\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema);\n+    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema);\n \n     /**\n      * Filter the list of tables and views to those visible to the identity.\n      */\n-    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames);\n+    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames);\n \n     /**\n      * Check if identity is allowed to add columns to the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to drop columns from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to rename a column in the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to insert into the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to delete from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to create the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to drop the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to create a view that selects from the specified columns.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to grant a privilege to the grantee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption);\n+    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTQ4NA==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396539484", "createdAt": "2020-03-23T15:30:44Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AccessControl.java", "diffHunk": "@@ -117,154 +118,158 @@\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema);\n+    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema);\n \n     /**\n      * Filter the list of tables and views to those visible to the identity.\n      */\n-    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames);\n+    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames);\n \n     /**\n      * Check if identity is allowed to add columns to the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to drop columns from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to rename a column in the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to insert into the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to delete from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to create the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to drop the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to create a view that selects from the specified columns.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to grant a privilege to the grantee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption);\n+    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption);\n \n     /**\n      * Check if identity is allowed to revoke a privilege from the revokee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor);\n+    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTY3OQ==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396539679", "createdAt": "2020-03-23T15:30:59Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AccessControl.java", "diffHunk": "@@ -117,154 +118,158 @@\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema);\n+    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema);\n \n     /**\n      * Filter the list of tables and views to those visible to the identity.\n      */\n-    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames);\n+    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames);\n \n     /**\n      * Check if identity is allowed to add columns to the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to drop columns from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to rename a column in the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to insert into the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to delete from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to create the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to drop the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to create a view that selects from the specified columns.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to grant a privilege to the grantee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption);\n+    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption);\n \n     /**\n      * Check if identity is allowed to revoke a privilege from the revokee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor);\n+    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor);\n \n     /**\n      * Check if identity is allowed to set the specified system property.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSetSystemSessionProperty(Identity identity, String propertyName);\n+    void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName);\n \n     /**\n      * Check if identity is allowed to set the specified catalog property.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName);\n+    void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName);\n \n     /**\n      * Check if identity is allowed to select from the specified columns.  The column set can be empty.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to create the specified role.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName);\n+    void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName);\n \n     /**\n      * Check if identity is allowed to drop the specified role.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName);\n+    void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName);\n \n     /**\n      * Check if identity is allowed to grant the specified roles to the specified principals.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName);\n+    void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTc1Mg==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396539752", "createdAt": "2020-03-23T15:31:04Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AccessControl.java", "diffHunk": "@@ -117,154 +118,158 @@\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema);\n+    void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema);\n \n     /**\n      * Filter the list of tables and views to those visible to the identity.\n      */\n-    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames);\n+    Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames);\n \n     /**\n      * Check if identity is allowed to add columns to the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to drop columns from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to rename a column in the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to insert into the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to delete from the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName);\n+    void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName);\n \n     /**\n      * Check if identity is allowed to create the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to drop the specified view.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName);\n+    void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName);\n \n     /**\n      * Check if identity is allowed to create a view that selects from the specified columns.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to grant a privilege to the grantee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption);\n+    void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption);\n \n     /**\n      * Check if identity is allowed to revoke a privilege from the revokee on the specified table.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor);\n+    void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor);\n \n     /**\n      * Check if identity is allowed to set the specified system property.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSetSystemSessionProperty(Identity identity, String propertyName);\n+    void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName);\n \n     /**\n      * Check if identity is allowed to set the specified catalog property.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName);\n+    void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName);\n \n     /**\n      * Check if identity is allowed to select from the specified columns.  The column set can be empty.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames);\n+    void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n     /**\n      * Check if identity is allowed to create the specified role.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName);\n+    void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName);\n \n     /**\n      * Check if identity is allowed to drop the specified role.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName);\n+    void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName);\n \n     /**\n      * Check if identity is allowed to grant the specified roles to the specified principals.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName);\n+    void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName);\n \n     /**\n      * Check if identity is allowed to revoke the specified roles from the specified principals.\n      *\n      * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed\n      */\n-    void checkCanRevokeRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor, Optional<PrestoPrincipal> grantor, String catalogName);\n+    void checkCanRevokeRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor,\n+            Optional<PrestoPrincipal> grantor, String catalogName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTAxNQ==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541015", "createdAt": "2020-03-23T15:32:39Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AllowAllAccessControl.java", "diffHunk": "@@ -29,180 +30,184 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return catalogs;\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return schemaNames;\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return tableNames;\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTA4MA==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541080", "createdAt": "2020-03-23T15:32:44Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AllowAllAccessControl.java", "diffHunk": "@@ -29,180 +30,184 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return catalogs;\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return schemaNames;\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return tableNames;\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTE2OA==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541168", "createdAt": "2020-03-23T15:32:49Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AllowAllAccessControl.java", "diffHunk": "@@ -29,180 +30,184 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return catalogs;\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return schemaNames;\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return tableNames;\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)\n     {\n     }\n \n     @Override\n-    public void checkCanSetSystemSessionProperty(Identity identity, String propertyName)\n+    public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName)\n     {\n     }\n \n     @Override\n-    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName)\n+    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName)\n     {\n     }\n \n     @Override\n-    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName)\n+    public void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTIzOQ==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541239", "createdAt": "2020-03-23T15:32:55Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/AllowAllAccessControl.java", "diffHunk": "@@ -29,180 +30,184 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return catalogs;\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return schemaNames;\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return tableNames;\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)\n     {\n     }\n \n     @Override\n-    public void checkCanSetSystemSessionProperty(Identity identity, String propertyName)\n+    public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName)\n     {\n     }\n \n     @Override\n-    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName)\n+    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName)\n     {\n     }\n \n     @Override\n-    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n     }\n \n     @Override\n-    public void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName)\n+    public void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n     }\n \n     @Override\n-    public void checkCanRevokeRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanRevokeRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor,\n+            Optional<PrestoPrincipal> grantor, String catalogName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTUxNA==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541514", "createdAt": "2020-03-23T15:33:15Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/DenyAllAccessControl.java", "diffHunk": "@@ -63,211 +64,215 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n         denySetUser(principal, userName);\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n         denyQueryIntegrityCheck();\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyCatalogAccess(catalogName);\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyCreateSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyDropSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n         denyRenameSchema(schemaName.toString(), newSchemaName);\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyCreateTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n         denyRenameTable(tableName.toString(), newTableName.toString());\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n         denyShowTablesMetadata(schema.toString());\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyShowSchemas();\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyAddColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyRenameColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyInsertTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDeleteTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyCreateView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyDropView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denyCreateViewWithSelect(tableName.toString(), identity);\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTU2Ng==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541566", "createdAt": "2020-03-23T15:33:19Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/DenyAllAccessControl.java", "diffHunk": "@@ -63,211 +64,215 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n         denySetUser(principal, userName);\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n         denyQueryIntegrityCheck();\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyCatalogAccess(catalogName);\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyCreateSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyDropSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n         denyRenameSchema(schemaName.toString(), newSchemaName);\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyCreateTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n         denyRenameTable(tableName.toString(), newTableName.toString());\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n         denyShowTablesMetadata(schema.toString());\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyShowSchemas();\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyAddColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyRenameColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyInsertTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDeleteTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyCreateView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyDropView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denyCreateViewWithSelect(tableName.toString(), identity);\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n         denyGrantTablePrivilege(privilege.name(), tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTYzMg==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541632", "createdAt": "2020-03-23T15:33:24Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/DenyAllAccessControl.java", "diffHunk": "@@ -63,211 +64,215 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n         denySetUser(principal, userName);\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n         denyQueryIntegrityCheck();\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyCatalogAccess(catalogName);\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyCreateSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyDropSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n         denyRenameSchema(schemaName.toString(), newSchemaName);\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyCreateTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n         denyRenameTable(tableName.toString(), newTableName.toString());\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n         denyShowTablesMetadata(schema.toString());\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyShowSchemas();\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyAddColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyRenameColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyInsertTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDeleteTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyCreateView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyDropView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denyCreateViewWithSelect(tableName.toString(), identity);\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n         denyGrantTablePrivilege(privilege.name(), tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)\n     {\n         denyRevokeTablePrivilege(privilege.name(), tableName.toString());\n     }\n \n     @Override\n-    public void checkCanSetSystemSessionProperty(Identity identity, String propertyName)\n+    public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName)\n     {\n         denySetSystemSessionProperty(propertyName);\n     }\n \n     @Override\n-    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName)\n+    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName)\n     {\n         denySetCatalogSessionProperty(catalogName, propertyName);\n     }\n \n     @Override\n-    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denySelectColumns(tableName.toString(), columnNames);\n     }\n \n     @Override\n-    public void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n         denyCreateRole(role);\n     }\n \n     @Override\n-    public void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName)\n+    public void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName)\n     {\n         denyDropRole(role);\n     }\n \n     @Override\n-    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MTY5OA==", "bodyText": "nit: unwrap", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396541698", "createdAt": "2020-03-23T15:33:29Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/security/DenyAllAccessControl.java", "diffHunk": "@@ -63,211 +64,215 @@\n         implements AccessControl\n {\n     @Override\n-    public void checkCanSetUser(Optional<Principal> principal, String userName)\n+    public void checkCanSetUser(AccessControlContext accessControlContext, Optional<Principal> principal, String userName)\n     {\n         denySetUser(principal, userName);\n     }\n \n     @Override\n-    public void checkQueryIntegrity(Identity identity, String query)\n+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query)\n     {\n         denyQueryIntegrityCheck();\n     }\n \n     @Override\n-    public Set<String> filterCatalogs(Identity identity, Set<String> catalogs)\n+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAccessCatalog(Identity identity, String catalogName)\n+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyCatalogAccess(catalogName);\n     }\n \n     @Override\n-    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanCreateSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyCreateSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanDropSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName)\n+    public void checkCanDropSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName)\n     {\n         denyDropSchema(schemaName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, CatalogSchemaName schemaName, String newSchemaName)\n+    public void checkCanRenameSchema(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schemaName, String newSchemaName)\n     {\n         denyRenameSchema(schemaName.toString(), newSchemaName);\n     }\n \n     @Override\n-    public void checkCanCreateTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanCreateTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyCreateTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n+    public void checkCanRenameTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, QualifiedObjectName newTableName)\n     {\n         denyRenameTable(tableName.toString(), newTableName.toString());\n     }\n \n     @Override\n-    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, CatalogSchemaName schema)\n+    public void checkCanShowTablesMetadata(TransactionId transactionId, Identity identity, AccessControlContext context, CatalogSchemaName schema)\n     {\n         denyShowTablesMetadata(schema.toString());\n     }\n \n     @Override\n-    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, String catalogName, Set<SchemaTableName> tableNames)\n+    public Set<SchemaTableName> filterTables(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, String catalogName)\n+    public void checkCanShowSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName)\n     {\n         denyShowSchemas();\n     }\n \n     @Override\n-    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, String catalogName, Set<String> schemaNames)\n+    public Set<String> filterSchemas(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)\n     {\n         return ImmutableSet.of();\n     }\n \n     @Override\n-    public void checkCanAddColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanAddColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyAddColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanRenameColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyRenameColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDropColumn(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDropColumn(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDropColumn(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanInsertIntoTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyInsertTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, QualifiedObjectName tableName)\n+    public void checkCanDeleteFromTable(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName)\n     {\n         denyDeleteTable(tableName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanCreateView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyCreateView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanDropView(TransactionId transactionId, Identity identity, QualifiedObjectName viewName)\n+    public void checkCanDropView(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName viewName)\n     {\n         denyDropView(viewName.toString());\n     }\n \n     @Override\n-    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanCreateViewWithSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denyCreateViewWithSelect(tableName.toString(), identity);\n     }\n \n     @Override\n-    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee, boolean withGrantOption)\n+    public void checkCanGrantTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal grantee,\n+            boolean withGrantOption)\n     {\n         denyGrantTablePrivilege(privilege.name(), tableName.toString());\n     }\n \n     @Override\n-    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee, boolean grantOptionFor)\n+    public void checkCanRevokeTablePrivilege(TransactionId transactionId, Identity identity, AccessControlContext context, Privilege privilege, QualifiedObjectName tableName, PrestoPrincipal revokee,\n+            boolean grantOptionFor)\n     {\n         denyRevokeTablePrivilege(privilege.name(), tableName.toString());\n     }\n \n     @Override\n-    public void checkCanSetSystemSessionProperty(Identity identity, String propertyName)\n+    public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName)\n     {\n         denySetSystemSessionProperty(propertyName);\n     }\n \n     @Override\n-    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, String catalogName, String propertyName)\n+    public void checkCanSetCatalogSessionProperty(TransactionId transactionId, Identity identity, AccessControlContext context, String catalogName, String propertyName)\n     {\n         denySetCatalogSessionProperty(catalogName, propertyName);\n     }\n \n     @Override\n-    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, QualifiedObjectName tableName, Set<String> columnNames)\n+    public void checkCanSelectFromColumns(TransactionId transactionId, Identity identity, AccessControlContext context, QualifiedObjectName tableName, Set<String> columnNames)\n     {\n         denySelectColumns(tableName.toString(), columnNames);\n     }\n \n     @Override\n-    public void checkCanCreateRole(TransactionId transactionId, Identity identity, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanCreateRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n         denyCreateRole(role);\n     }\n \n     @Override\n-    public void checkCanDropRole(TransactionId transactionId, Identity identity, String role, String catalogName)\n+    public void checkCanDropRole(TransactionId transactionId, Identity identity, AccessControlContext context, String role, String catalogName)\n     {\n         denyDropRole(role);\n     }\n \n     @Override\n-    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanGrantRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean withAdminOption,\n+            Optional<PrestoPrincipal> grantor, String catalogName)\n     {\n         denyGrantRoles(roles, grantees);\n     }\n \n     @Override\n-    public void checkCanRevokeRoles(TransactionId transactionId, Identity identity, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor, Optional<PrestoPrincipal> grantor, String catalogName)\n+    public void checkCanRevokeRoles(TransactionId transactionId, Identity identity, AccessControlContext context, Set<String> roles, Set<PrestoPrincipal> grantees, boolean adminOptionFor,\n+            Optional<PrestoPrincipal> grantor, String catalogName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MzM3NQ==", "bodyText": "nit: We do our best to not to use abbreviation int the code base. You can use context instead.", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396543375", "createdAt": "2020-03-23T15:35:42Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/test/java/com/facebook/presto/security/TestAccessControlManager.java", "diffHunk": "@@ -89,30 +92,31 @@ public void testReadOnlySystemAccessControl()\n         QualifiedObjectName tableName = new QualifiedObjectName(\"catalog\", \"schema\", \"table\");\n         TransactionManager transactionManager = createTestTransactionManager();\n         AccessControlManager accessControlManager = new AccessControlManager(transactionManager);\n+        AccessControlContext ctx = new AccessControlContext(new QueryId(QUERY_ID), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MzYxNg==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396543616", "createdAt": "2020-03-23T15:35:58Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/test/java/com/facebook/presto/security/TestAccessControlManager.java", "diffHunk": "@@ -138,13 +142,14 @@ public void testSetAccessControl()\n     public void testCheckQueryIntegrity()\n     {\n         AccessControlManager accessControlManager = new AccessControlManager(createTestTransactionManager());\n+        AccessControlContext ctx = new AccessControlContext(new QueryId(QUERY_ID), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NDEzMA==", "bodyText": "nit: you can rename it to context", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396544130", "createdAt": "2020-03-23T15:36:39Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/test/java/com/facebook/presto/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -63,6 +65,7 @@\n     private static final QualifiedObjectName aliceTable = new QualifiedObjectName(\"alice-catalog\", \"schema\", \"table\");\n     private static final QualifiedObjectName aliceView = new QualifiedObjectName(\"alice-catalog\", \"schema\", \"view\");\n     private static final CatalogSchemaName aliceSchema = new CatalogSchemaName(\"alice-catalog\", \"schema\");\n+    private static final AccessControlContext accessControlContext = new AccessControlContext(new QueryId(\"query_id\"), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTA2NA==", "bodyText": "nit: Maybe simply CONTEXT?", "url": "https://github.com/prestodb/presto/pull/14248#discussion_r396545064", "createdAt": "2020-03-23T15:37:52Z", "author": {"login": "arhimondr"}, "path": "presto-plugin-toolkit/src/test/java/com/facebook/presto/plugin/base/security/TestFileBasedAccessControl.java", "diffHunk": "@@ -32,52 +34,53 @@\n public class TestFileBasedAccessControl\n {\n     public static final ConnectorTransactionHandle TRANSACTION_HANDLE = new ConnectorTransactionHandle() {};\n+    public static final AccessControlContext ACCESS_CONTROL_CONTEXT = new AccessControlContext(new QueryId(\"query_id\"), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d099b76e8a2aa9133b46bbe1f881f590aaa5b29", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/4d099b76e8a2aa9133b46bbe1f881f590aaa5b29", "committedDate": "2020-03-20T22:16:27Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "544a0769cb5d36af40212a4807238f04dde7d0cd", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/544a0769cb5d36af40212a4807238f04dde7d0cd", "committedDate": "2020-03-23T16:42:31Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "544a0769cb5d36af40212a4807238f04dde7d0cd", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/544a0769cb5d36af40212a4807238f04dde7d0cd", "committedDate": "2020-03-23T16:42:31Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "02d83ef90ab23f17bf13f228e6161e1a0b6d40ef", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/02d83ef90ab23f17bf13f228e6161e1a0b6d40ef", "committedDate": "2020-03-23T18:10:18Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02d83ef90ab23f17bf13f228e6161e1a0b6d40ef", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/02d83ef90ab23f17bf13f228e6161e1a0b6d40ef", "committedDate": "2020-03-23T18:10:18Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "d1960358899774c5bb8bc373d7411dc87feefd41", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d1960358899774c5bb8bc373d7411dc87feefd41", "committedDate": "2020-03-23T18:29:01Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjc4Njcy", "url": "https://github.com/prestodb/presto/pull/14248#pullrequestreview-380678672", "createdAt": "2020-03-24T20:39:37Z", "commit": {"oid": "d1960358899774c5bb8bc373d7411dc87feefd41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc40e88c7fdcd621e974dafb59de2fb152c41a7c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/cc40e88c7fdcd621e974dafb59de2fb152c41a7c", "committedDate": "2020-03-25T20:13:53Z", "message": "Add AccessControlContext to store client information for security purposes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1960358899774c5bb8bc373d7411dc87feefd41", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d1960358899774c5bb8bc373d7411dc87feefd41", "committedDate": "2020-03-23T18:29:01Z", "message": "Add AccessControlContext to store client information for security purposes"}, "afterCommit": {"oid": "cc40e88c7fdcd621e974dafb59de2fb152c41a7c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/cc40e88c7fdcd621e974dafb59de2fb152c41a7c", "committedDate": "2020-03-25T20:13:53Z", "message": "Add AccessControlContext to store client information for security purposes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2048, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}