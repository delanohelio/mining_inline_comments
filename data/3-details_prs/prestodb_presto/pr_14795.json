{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTAzOTI5", "number": 14795, "title": "Add support for Hudi MOR queries", "bodyText": "Allows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. Tested using Hudi merge-on-read table\ninput format.\nThis is a rebase of the hudi presto realtime query patch on presto mainline. Tests are passing but need to double check for any possible new issues for Hudi given the rebase. Just wanted to get this opened for feedback ASAP.\nPlease make sure your submission complies with our Development, Formatting, and Commit Message guidelines.\nFill in the release notes towards the bottom of the PR description.\nSee Release Notes Guidelines for details.\n== RELEASE NOTES ==\n\nHive Changes\n* Allows presto-hive to use custom parquet input formats \n* Add support for Hudi realtime input format for hudi realtime queries", "createdAt": "2020-07-07T02:27:11Z", "url": "https://github.com/prestodb/presto/pull/14795", "merged": true, "mergeCommit": {"oid": "cfb2e7aa077954a02c048e81c97a47994d329852"}, "closed": true, "closedAt": "2020-08-06T01:47:13Z", "author": {"login": "bschell"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy_IbLgBqjM1MjY1ODk1NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8DtyeABqjM2MjY3NzM5MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ad553a8ac0720b23c29e418208a10fd35cd421a", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/6ad553a8ac0720b23c29e418208a10fd35cd421a", "committedDate": "2020-07-06T22:42:05Z", "message": "Add hive custom split info support\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. Tested using Hudi merge-on-read table\ninput format."}, "afterCommit": {"oid": "511726c0f66af56b4e829fee8f4e8a634b87ed2e", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/511726c0f66af56b4e829fee8f4e8a634b87ed2e", "committedDate": "2020-07-08T18:52:15Z", "message": "fix hudi dep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODA4MTU3", "url": "https://github.com/prestodb/presto/pull/14795#pullrequestreview-453808157", "createdAt": "2020-07-23T02:51:00Z", "commit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MTowMFrOG16qMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxNDo1OVrOG169nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4ODc4NQ==", "bodyText": "nit: this.customSplitInfo = ImmutableMap.copyOf(requireNonNull(customSplitInfo, \"customSplitInfo is null\"));", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459188785", "createdAt": "2020-07-23T02:51:00Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -122,6 +124,7 @@ public HiveSplit(\n         this.extraFileInfo = extraFileInfo;\n         this.cacheQuotaRequirement = cacheQuotaRequirement;\n         this.encryptionInformation = encryptionInformation;\n+        this.customSplitInfo = customSplitInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4ODg1NQ==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459188855", "createdAt": "2020-07-23T02:51:23Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java", "diffHunk": "@@ -106,6 +108,7 @@ public InternalHiveSplit(\n         this.s3SelectPushdownEnabled = s3SelectPushdownEnabled;\n         this.partitionInfo = partitionInfo;\n         this.extraFileInfo = extraFileInfo;\n+        this.customSplitInfo = customSplitInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTI3OQ==", "bodyText": "We usually don't pass null neither return null. Pass ImmutableMap.of(). Same for other similar call sites.", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189279", "createdAt": "2020-07-23T02:53:25Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -905,7 +905,8 @@ private void testCursorProvider(HiveRecordCursorProvider cursorProvider,\n                 TRUE_CONSTANT,\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n-                Optional.empty());\n+                Optional.empty(),\n+                null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTM1Ng==", "bodyText": "ImmutableMap.of()", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189356", "createdAt": "2020-07-23T02:53:50Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "diffHunk": "@@ -63,6 +65,8 @@ public void testJsonRoundTrip()\n     {\n         ImmutableList<HivePartitionKey> partitionKeys = ImmutableList.of(new HivePartitionKey(\"a\", \"apple\"), new HivePartitionKey(\"b\", \"42\"));\n         ImmutableList<HostAddress> addresses = ImmutableList.of(HostAddress.fromParts(\"127.0.0.1\", 44), HostAddress.fromParts(\"127.0.0.1\", 45));\n+        Map<String, String> customSplitInfo = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTY2Nw==", "bodyText": "Don't check for null. The general assumption is that the method parameters are never null.", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189667", "createdAt": "2020-07-23T02:55:02Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -211,14 +217,26 @@ private HiveUtil()\n         // Tell hive the columns we would like to read, this lets hive optimize reading column oriented files\n         setReadColumns(configuration, readHiveColumnIndexes);\n \n+        // Only propagate serialization schema configs by default\n+        Predicate<String> schemaFilter = schemaProperty -> schemaProperty.startsWith(\"serialization.\");\n+\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n+        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDU4Mg==", "bodyText": "nit: how about simply extractCustomSplitInfo?", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190582", "createdAt": "2020-07-23T02:59:31Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDYwMQ==", "bodyText": "Inline this", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190601", "createdAt": "2020-07-23T02:59:41Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDcwNQ==", "bodyText": "ditto about method name (extractCustomSplitInfo )", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190705", "createdAt": "2020-07-23T03:00:09Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDc1Mw==", "bodyText": "move it under the loop", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190753", "createdAt": "2020-07-23T03:00:25Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();\n+    }\n+\n+    public static FileSplit recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo)\n+    {\n+        Optional<FileSplit> fileSplit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDg4NQ==", "bodyText": "...format(\"Split converted %s failed to create FileSplit\", converter.getClass()), e", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190885", "createdAt": "2020-07-23T03:01:08Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();\n+    }\n+\n+    public static FileSplit recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo)\n+    {\n+        Optional<FileSplit> fileSplit;\n+        for (CustomSplitConverter converter : converters) {\n+            try {\n+                fileSplit = converter.recreateSplitWithCustomInfo(split, customSplitInfo);\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, \"Split converter : \" + converter.getClass() + \" failed to create fileSplit.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTAzMw==", "bodyText": "Use ImmutableMap.builder()", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191033", "createdAt": "2020-07-23T03:01:51Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTE2Mg==", "bodyText": "Remove this, parameters is not null by default", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191162", "createdAt": "2020-07-23T03:02:39Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTMzMg==", "bodyText": "How about\nString customSplitClass = customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY);\nif(HoodieRealtimeFileSplit.class.getName().equals(customSplitClass)){\n...\n}", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191332", "createdAt": "2020-07-23T03:03:32Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTc2Ng==", "bodyText": "customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY) should never be null, right? If it is - it is a programming error.\nSo, simply\nList<String> deltaLogPaths = Splitter.on(',').splitToList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY))", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191766", "createdAt": "2020-07-23T03:05:32Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {\n+            List<String> deltaLogPaths = Strings.isNullOrEmpty(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY)) ? Collections.emptyList() :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTkyNA==", "bodyText": "Just in case you can check it for null (requireNonNull(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY), \"HUDI_DELTA_FILEPATHS_KEY is missing\"))", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191924", "createdAt": "2020-07-23T03:06:15Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {\n+            List<String> deltaLogPaths = Strings.isNullOrEmpty(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY)) ? Collections.emptyList() :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTc2Ng=="}, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjI0NQ==", "bodyText": "I would recommend checking the customSplitInfo.get(HUDI_BASEPATH_KEY), customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY) for null\nAlso let's go with the one parameter at a line style\nreturn Optional.of(new HoodieRealtimeFileSplit(\n  split, \n  requireNonNull(customSplitInfo.get(HUDI_BASEPATH_KEY), \"HUDI_BASEPATH_KEY is missing\"), \n  deltaLogPaths, \n  requireNonNull(customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY), \"HUDI_MAX_COMMIT_TIME_KEY is missing\")))", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459192245", "createdAt": "2020-07-23T03:07:57Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {\n+            List<String> deltaLogPaths = Strings.isNullOrEmpty(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY)) ? Collections.emptyList() :\n+                    Arrays.asList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY).split(\",\"));\n+            split = new HoodieRealtimeFileSplit(split, customSplitInfo.get(HUDI_BASEPATH_KEY), deltaLogPaths, customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjM2MQ==", "bodyText": "Maybe recreateFileSplitFromCustomInfo?", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459192361", "createdAt": "2020-07-23T03:08:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Interface for Split specific implementation of conversion from Split -> customSplitInfo Map and back.\n+ */\n+public interface CustomSplitConverter\n+{\n+    /**\n+     * This method is expected to return optional.empty() if the FileSplit does not match the split converter.\n+     */\n+    Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split);\n+\n+    /**\n+     * This method is expected to merge the customSplitInfo with split to recreate the custom FileSplit.\n+     * It is expected to return optional.empty() if the customSplitInfo does not match the split converter.\n+     */\n+    Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzEzMg==", "bodyText": "Let's merge it into a one test case method. It generally verifies the same thing, but just different return", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193132", "createdAt": "2020-07-23T03:12:08Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java", "diffHunk": "@@ -87,6 +94,20 @@ public void testToPartitionValues()\n         assertToPartitionValues(\"pk=__HIVE_DEFAULT_PARTITION__\");\n     }\n \n+    @Test\n+    public void testShouldUseRecordReaderFromInputFormatTrue()\n+    {\n+        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat\", \"\");\n+        assertTrue(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(storageFormat, \"test\", Optional.empty(), true, Collections.emptyMap(), Collections.emptyMap())));\n+    }\n+\n+    @Test\n+    public void testShouldUseRecordReaderFromInputFormatFalse()\n+    {\n+        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.HoodieParquetInputFormat\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzQwMQ==", "bodyText": "Let's initialize it in @BeforeClass. Also please add the @AfterClass(alwaysRun=true) method and nullify the field there", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193401", "createdAt": "2020-07-23T03:12:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.parquet;\n+\n+import com.facebook.presto.common.type.TestingTypeManager;\n+import com.facebook.presto.hive.FileFormatDataSourceStats;\n+import com.facebook.presto.hive.HdfsConfigurationInitializer;\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveClientConfig;\n+import com.facebook.presto.hive.HiveHdfsConfiguration;\n+import com.facebook.presto.hive.MetastoreClientConfig;\n+import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestParquetPageSourceFactory\n+{\n+    private static final String PARQUET_HIVE_SERDE = \"parquet.hive.serde.ParquetHiveSerDe\";\n+\n+    private ParquetPageSourceFactory parquetPageSourceFactory;\n+\n+    @BeforeTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5Mzc1Nw==", "bodyText": "It feels like this branch is too generic. Let's add this special extra logic only if the split is the HoodieRealtimeFileSplit", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193757", "createdAt": "2020-07-23T03:14:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -211,14 +217,26 @@ private HiveUtil()\n         // Tell hive the columns we would like to read, this lets hive optimize reading column oriented files\n         setReadColumns(configuration, readHiveColumnIndexes);\n \n+        // Only propagate serialization schema configs by default\n+        Predicate<String> schemaFilter = schemaProperty -> schemaProperty.startsWith(\"serialization.\");\n+\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n+        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4831a4b860495aee23a8f85cc753ada74588353e"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk4NjMw", "url": "https://github.com/prestodb/presto/pull/14795#pullrequestreview-455898630", "createdAt": "2020-07-27T15:35:29Z", "commit": {"oid": "aabdf3ed1399afdc2189f9c0865f69bf9564617e"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTozMFrOG3oCDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNzoyN1rOG3oHLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDc1MA==", "bodyText": "nit: prefer ImmutableMap.of", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460980750", "createdAt": "2020-07-27T15:35:30Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractCustomSplitInfo(FileSplit split)\n+    {\n+        for (CustomSplitConverter converter : converters) {\n+            Optional<Map<String, String>> customSplitData = converter.extractCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabdf3ed1399afdc2189f9c0865f69bf9564617e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTUyOA==", "bodyText": "Why the HoodieRealtimeFileSplit  is created twice?", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460981528", "createdAt": "2020-07-27T15:36:39Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    public static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            Map<String, String> customSplitInfo = ImmutableMap.<String, String>builder()\n+                    .put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName())\n+                    .put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()))\n+                    .put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath())\n+                    .put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime())\n+                    .build();\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateFileSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        String customSplitClass = customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY);\n+        if (HoodieRealtimeFileSplit.class.getName().equals(customSplitClass)) {\n+            requireNonNull(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY), \"HUDI_DELTA_FILEPATHS_KEY is missing\");\n+            List<String> deltaLogPaths = Arrays.asList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY).split(\",\"));\n+            split = new HoodieRealtimeFileSplit(split, customSplitInfo.get(HUDI_BASEPATH_KEY), deltaLogPaths, customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabdf3ed1399afdc2189f9c0865f69bf9564617e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTg5MA==", "bodyText": "nit: prefer ImmutableMap.of (here and in other similar places)", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460981890", "createdAt": "2020-07-27T15:37:11Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -98,13 +101,15 @@ public InternalHiveSplitFactory(\n                 readBucketNumber,\n                 tableBucketNumber,\n                 splittable,\n-                fileInfo.getExtraFileInfo());\n+                fileInfo.getExtraFileInfo(),\n+                Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabdf3ed1399afdc2189f9c0865f69bf9564617e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjA2MA==", "bodyText": "ImmutableMap.of()", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460982060", "createdAt": "2020-07-27T15:37:27Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -968,7 +969,8 @@ private void testPageSourceFactory(HiveBatchPageSourceFactory sourceFactory,\n                 TRUE_CONSTANT,\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n-                Optional.empty());\n+                Optional.empty(),\n+                null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabdf3ed1399afdc2189f9c0865f69bf9564617e"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0609ad57e0279561d946ea9bc31d9fc592fded49", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/0609ad57e0279561d946ea9bc31d9fc592fded49", "committedDate": "2020-07-27T18:28:19Z", "message": "make cr fixes round 2"}, "afterCommit": {"oid": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/936b513f3e3a22380cb554a8950fc02fddf3a89b", "committedDate": "2020-07-28T16:31:16Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/936b513f3e3a22380cb554a8950fc02fddf3a89b", "committedDate": "2020-07-28T16:31:16Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}, "afterCommit": {"oid": "b5be2279f8f812d7b242fa0f05269aaf279eb34d", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/b5be2279f8f812d7b242fa0f05269aaf279eb34d", "committedDate": "2020-08-05T23:13:28Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d0830c280d1203962baafad712bc2563ba9fd0", "author": {"user": {"login": "bschell", "name": null}}, "url": "https://github.com/prestodb/presto/commit/20d0830c280d1203962baafad712bc2563ba9fd0", "committedDate": "2020-08-05T23:20:57Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5be2279f8f812d7b242fa0f05269aaf279eb34d", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/b5be2279f8f812d7b242fa0f05269aaf279eb34d", "committedDate": "2020-08-05T23:13:28Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}, "afterCommit": {"oid": "20d0830c280d1203962baafad712bc2563ba9fd0", "author": {"user": {"login": "bschell", "name": null}}, "url": "https://github.com/prestodb/presto/commit/20d0830c280d1203962baafad712bc2563ba9fd0", "committedDate": "2020-08-05T23:20:57Z", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1215, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}