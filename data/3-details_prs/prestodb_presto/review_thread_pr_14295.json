{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTg2NzA2", "number": 14295, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NjowOFrODryQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1ODo0NVrODwGmkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM4ODk2OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NjowOFrOF8Vcuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyMToyMVrOF8s-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDI5OQ==", "bodyText": "targetSize -> estimatedMaxCapacity for consistency", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r398810299", "createdAt": "2020-03-26T18:46:08Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -104,9 +106,9 @@ else if (buffer.length < capacity) {\n         return buffer;\n     }\n \n-    public static byte[] ensureCapacity(byte[] buffer, int capacity, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)\n+    public static byte[] ensureCapacity(byte[] buffer, int capacity, int targetSize, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5NTc0OQ==", "bodyText": "Done. I renamed the BlockEncodingBuffer fields names too. E.g. valuesBufferTargetSize --> estimatedValueBufferMaxCapacity", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r399195749", "createdAt": "2020-03-27T11:21:21Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -104,9 +106,9 @@ else if (buffer.length < capacity) {\n         return buffer;\n     }\n \n-    public static byte[] ensureCapacity(byte[] buffer, int capacity, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)\n+    public static byte[] ensureCapacity(byte[] buffer, int capacity, int targetSize, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDI5OQ=="}, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM4OTkxOnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NjoyNlrOF8VdaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NjoyNlrOF8VdaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDQ3Mw==", "bodyText": "min(buffer.length, capacity) -> buffer.length", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r398810473", "createdAt": "2020-03-26T18:46:26Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -115,7 +117,7 @@ else if (buffer.length < capacity) {\n         else if (buffer.length < capacity) {\n             newBuffer = allocator.borrowByteArray(newCapacity);\n             if (expansionOption == PRESERVE) {\n-                System.arraycopy(buffer, 0, newBuffer, 0, Math.min(buffer.length, capacity));\n+                System.arraycopy(buffer, 0, newBuffer, 0, min(buffer.length, capacity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQxMDI2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1MTozM1rOF8Vp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyMjowMlrOF8s_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMzY2MQ==", "bodyText": "Instead of casting in multiple places change the type of valuesBuffers to AbstractBlockEncodingBuffer", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r398813661", "createdAt": "2020-03-26T18:51:33Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -201,17 +204,19 @@ public String toString()\n     }\n \n     @Override\n-    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode)\n+    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode, int partitionBufferCapacity)\n     {\n         requireNonNull(decodedBlockNode, \"decodedBlockNode is null\");\n \n         decodedBlockNode = mapPositionsToNestedBlock(decodedBlockNode);\n         ColumnarArray columnarArray = (ColumnarArray) decodedBlockNode.getDecodedBlock();\n         decodedBlock = columnarArray.getNullCheckBlock();\n \n+        setTargetBufferSize(decodedBlockNode, partitionBufferCapacity);\n+\n         populateNestedPositions(columnarArray);\n \n-        ((AbstractBlockEncodingBuffer) valuesBuffers).setupDecodedBlockAndMapPositions(decodedBlockNode.getChildren().get(0));\n+        ((AbstractBlockEncodingBuffer) valuesBuffers).setupDecodedBlockAndMapPositions(decodedBlockNode.getChildren().get(0), partitionBufferCapacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5NjEyOQ==", "bodyText": "Done in new commit 17ee832a6a Change nested buffers to AbstractBlockEncodingBuffer", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r399196129", "createdAt": "2020-03-27T11:22:02Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -201,17 +204,19 @@ public String toString()\n     }\n \n     @Override\n-    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode)\n+    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode, int partitionBufferCapacity)\n     {\n         requireNonNull(decodedBlockNode, \"decodedBlockNode is null\");\n \n         decodedBlockNode = mapPositionsToNestedBlock(decodedBlockNode);\n         ColumnarArray columnarArray = (ColumnarArray) decodedBlockNode.getDecodedBlock();\n         decodedBlock = columnarArray.getNullCheckBlock();\n \n+        setTargetBufferSize(decodedBlockNode, partitionBufferCapacity);\n+\n         populateNestedPositions(columnarArray);\n \n-        ((AbstractBlockEncodingBuffer) valuesBuffers).setupDecodedBlockAndMapPositions(decodedBlockNode.getChildren().get(0));\n+        ((AbstractBlockEncodingBuffer) valuesBuffers).setupDecodedBlockAndMapPositions(decodedBlockNode.getChildren().get(0), partitionBufferCapacity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMzY2MQ=="}, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQyMTExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1MzozM1rOF8Vwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1MzozM1rOF8Vwug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNTQxOA==", "bodyText": "I suggest to inline setTargetBufferSize. It is used only once and doesn't actually set target size.", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r398815418", "createdAt": "2020-03-26T18:53:33Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -201,17 +204,19 @@ public String toString()\n     }\n \n     @Override\n-    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode)\n+    protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNode, int partitionBufferCapacity)\n     {\n         requireNonNull(decodedBlockNode, \"decodedBlockNode is null\");\n \n         decodedBlockNode = mapPositionsToNestedBlock(decodedBlockNode);\n         ColumnarArray columnarArray = (ColumnarArray) decodedBlockNode.getDecodedBlock();\n         decodedBlock = columnarArray.getNullCheckBlock();\n \n+        setTargetBufferSize(decodedBlockNode, partitionBufferCapacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQzNTM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/DecodedBlockNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1NzoxOVrOF8V52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyMzozOFrOF8tDEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzc1Mg==", "bodyText": "Can this be calculated within this class as getRetainedSizeInBytes - sum(child.getRetainedSizeInBytes())? If not, perhaps, move this change into a separate commit.", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r398817752", "createdAt": "2020-03-26T18:57:19Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/DecodedBlockNode.java", "diffHunk": "@@ -42,10 +43,16 @@\n     private final Object decodedBlock;\n     private final List<DecodedBlockNode> children;\n \n-    public DecodedBlockNode(Object decodedBlock, List<DecodedBlockNode> children)\n+    // The portion of the size of the exclusive content of this block to the total size. For example, the exclusive content\n+    // of an ArrayBlock is its offsets and nulls array while not its elementBlock. It is used to estimate the limit of the\n+    // buffers' sizes.\n+    private double sizePortionInPage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5Njk0Nw==", "bodyText": "@mbasmanova Yes you're actually right. I moved the logic to DecodedBlockNode and made a new commit 52456a0fec Introduce sizePortionInPage in DecodedBlockNode", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r399196947", "createdAt": "2020-03-27T11:23:38Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/DecodedBlockNode.java", "diffHunk": "@@ -42,10 +43,16 @@\n     private final Object decodedBlock;\n     private final List<DecodedBlockNode> children;\n \n-    public DecodedBlockNode(Object decodedBlock, List<DecodedBlockNode> children)\n+    // The portion of the size of the exclusive content of this block to the total size. For example, the exclusive content\n+    // of an ArrayBlock is its offsets and nulls array while not its elementBlock. It is used to estimate the limit of the\n+    // buffers' sizes.\n+    private double sizePortionInPage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzc1Mg=="}, "originalCommit": {"oid": "327b32160a036d914d9907afa9cc8da95b8ca2dc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY2NDE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1ODo0NVrOGC6mXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1ODo0NVrOGC6mXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDQzMQ==", "bodyText": "@yingsu00 I think moving away from page.getRetainedSizeInBytes() and using estimated flattened size is the right direction. It allows for much cleaner design. The DecodedBlockNode still needs the original value for the retainedSizeInBytes as it is used in memory tracking. Hence, I suggest to introduce a new variable to store the estimate of the flattened size of the block.", "url": "https://github.com/prestodb/presto/pull/14295#discussion_r405710431", "createdAt": "2020-04-08T17:58:45Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -479,13 +480,15 @@ public void partitionPage(Page page)\n             }\n \n             // Decode the page just once. The decoded blocks will be fed to each PartitionBuffer object to set up AbstractBlockEncodingBuffer.\n+            decodedBlocksRetainedSize = 0;\n             for (int i = 0; i < decodedBlocks.length; i++) {\n                 decodedBlocks[i] = decodeBlock(flattener, blockLeaseCloser, page.getBlock(i));\n+                decodedBlocksRetainedSize += decodedBlocks[i].getRetainedSizeInBytes();\n             }\n \n             // Copy the data to their destination partitions and flush when the buffer is full.\n             for (int i = 0; i < partitionBuffers.length; i++) {\n-                partitionBuffers[i].appendData(decodedBlocks, page.getRetainedSizeInBytes(), fixedWidthRowSize, variableWidthChannels, outputBuffer);\n+                partitionBuffers[i].appendData(decodedBlocks, decodedBlocksRetainedSize, fixedWidthRowSize, variableWidthChannels, outputBuffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd5d9398b65d800ad22962830d76a918338a808"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2946, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}