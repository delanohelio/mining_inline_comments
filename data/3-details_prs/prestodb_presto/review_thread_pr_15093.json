{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA3OTQz", "number": 15093, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyNjowNVrOEdboGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyMjo0M1rOEgEOog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk2Nzk0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyNjowNVrOHIlgwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNToyMVrOHMXI8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA==", "bodyText": "nit: Else if perhaps ? I also think type and blockbuilder cannot be null by the time we get to this function.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478765250", "createdAt": "2020-08-28T00:26:05Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MjM3Nw==", "bodyText": "This block builder null check is inherited from the primitive  setValue which was being called directly and now is being called via this one. Do you think this check can be removed since i don't see a requiredNonNull check in the hierarchy?   They are directly being supplied from pagebuilder", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478782377", "createdAt": "2020-08-28T01:33:00Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjQ3Mw==", "bodyText": "I see, so remove the null check from the primitive setValue one ? now that it is handled here by its caller ?\nAlso, what does it mean if type or blockbuilder are null ? Is that a bug or perhaps it means that an output column-field has to be skipped ? I recall we do that for when creating the PQL query with some hidden column-values (like grouping without aggregation case for example in broker PQL path)", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478792473", "createdAt": "2020-08-28T02:14:11Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NDUwNQ==", "bodyText": "I see, so remove the null check from the primitive setValue one ? now that it is handled here by its caller ?\n\nGood point, the primitive setValue is also being called directly at the moment to set the group-by field value. I am not sure if an array column can be in group-by. @fx19880617 It'd be great if you can clarify.\n\nAlso, what does it mean if type or blockbuilder are null ? Is that a bug or perhaps it means that an output column-field has to be skipped ? I recall we do that for when creating the PQL query with some hidden column-values (like grouping without aggregation case for example in broker PQL path)\n\nHmm I think even for  hidden column we set types and hidden columns wouldn't have to be added to blockbuilders? since we actually do not add them to output variables? It might makes sense to remove this check.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478794505", "createdAt": "2020-08-28T02:22:41Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NTY1NA==", "bodyText": "Hmm, Good point @dharakk ... If an array column cannot be a group by key then we might have to fail the query during pinot pql/sql generation phase :-). I feel that we should just go ahead and forbid that, it kind of does not make much sense to group by on an array (or atleast the semantics are open to interpretation).\nAlso, if you think that type and blockBuilder can never be null, should we put a requireNonNull instead of removing the check ? :-P ?", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478795654", "createdAt": "2020-08-28T02:27:11Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NjAwMQ==", "bodyText": "^^^^ ping", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482696001", "createdAt": "2020-09-03T04:27:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyMjQ3NQ==", "bodyText": "type is coming from PinotColumnHandle and can't be null because there is requiredNonNull for type there. Although for blockBuilder i think we should keep it because they are made in PageBuilder and also there is indeed a hidden column check where for negative columnIndex we pass in null value (Although I am not sure if we would ever encounter it).", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482722475", "createdAt": "2020-09-03T06:00:51Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDA4Mw==", "bodyText": "Also added a check to prevent an array column becoming a groupby column", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482724083", "createdAt": "2020-09-03T06:05:21Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTI1MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk2ODcwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyNjoyOVrOHIlhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDozNjozNVrOHIlq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTM2MA==", "bodyText": "Do we support nested types ? if not, lets somehow explicitly forbid it ? ie arrays inside of arrays.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478765360", "createdAt": "2020-08-28T00:26:29Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (type instanceof ArrayType) {\n+            checkState(value.isArray());\n+\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            ArrayNode arrayNode = (ArrayNode) value;\n+            for (int i = 0; i < arrayNode.size(); i++) {\n+                setValue(((ArrayType) type).getElementType(), childBuilder, asText(arrayNode.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2Nzg2OA==", "bodyText": "no we don't support nested arrays and it is forbidden by the existing condition within the setValue of primitive types,\n if (!(type instanceof FixedWidthType) && !(type instanceof VarcharType)) {\n            throw new PinotException(PINOT_UNSUPPORTED_COLUMN_TYPE, Optional.empty(), \"type '\" + type + \"' not supported\");\n        }", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478767868", "createdAt": "2020-08-28T00:36:35Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSourceBase.java", "diffHunk": "@@ -110,6 +112,30 @@ private static Double parseDouble(String value)\n         }\n     }\n \n+    protected void setValue(Type type, BlockBuilder blockBuilder, JsonNode value)\n+    {\n+        if (type == null || blockBuilder == null) {\n+            return;\n+        }\n+        if (value == null) {\n+            blockBuilder.appendNull();\n+            return;\n+        }\n+        if (type instanceof ArrayType) {\n+            checkState(value.isArray());\n+\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            ArrayNode arrayNode = (ArrayNode) value;\n+            for (int i = 0; i < arrayNode.size(); i++) {\n+                setValue(((ArrayType) type).getElementType(), childBuilder, asText(arrayNode.get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTM2MA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk3MDg3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyNzozNlrOHIliZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MDo0N1rOHMacOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA==", "bodyText": "I couldn't figure out how this change to TypeManager is related. It is definitely a good change and avoids duplicating framework level information.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478765668", "createdAt": "2020-08-28T00:27:36Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODM3OQ==", "bodyText": "This change is to json serialize/deserialize array type in the PinotColumnHandle\nThe type gets serialized via toString() but while deserializing it we are only looking at primitive types here and using typemanager allows us to deserialize all types, i.e. array(varchar) , array(bigint) and so on.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478768379", "createdAt": "2020-08-28T00:38:51Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MTE3OA==", "bodyText": "Got it. Its a testing only change so shouldn't matter much, but this would accept a wider set of types like Maps, nested arrays etc, more so than what the connector can currently take in. Thanks for explaining !", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478771178", "createdAt": "2020-08-28T00:50:03Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MzIxMA==", "bodyText": "Actually we may need this beyond testing, in the coordinator-worker model to pass column handles as json.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478793210", "createdAt": "2020-08-28T02:17:15Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NjE3NQ==", "bodyText": "Yeah good point: We should test this PR in the explicitly different coordinator-worker mode (ie regular mode) too. (The current MetadataUtil is test only apparently)\nAlso what about arrays and the PinotSegmentPageSource ?", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478796175", "createdAt": "2020-08-28T02:29:09Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1MzQ2OA==", "bodyText": "Added an implementation for PinotSegmentPageSource I believe the existing tests cover this change too, looking at rest of the comments.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482653468", "createdAt": "2020-09-03T02:17:48Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NTc0MQ==", "bodyText": "Hmm. I don't see any new tests in this PR about the segment page source multi-value support. How come the existing tests cover it ? IntelliJ\"s run with code coverage is your friend :-P", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482695741", "createdAt": "2020-09-03T04:26:22Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyMzE2NA==", "bodyText": "Actually all the new lines are covered out of the box in the coverage report as we have an all data types check here: https://github.com/prestodb/presto/blob/master/presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentPageSource.java#L372\nAlthough I don't really understand the hashcode check.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482723164", "createdAt": "2020-09-03T06:02:41Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODE2OA==", "bodyText": "Added an equality check for array values", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482778168", "createdAt": "2020-09-03T07:50:47Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/MetadataUtil.java", "diffHunk": "@@ -53,29 +49,25 @@ private MetadataUtil()\n     public static final class TestingTypeDeserializer\n             extends FromStringDeserializer<Type>\n     {\n-        private final Map<String, Type> types = ImmutableMap.of(\n-                StandardTypes.BOOLEAN, BOOLEAN,\n-                StandardTypes.BIGINT, BIGINT,\n-                StandardTypes.INTEGER, INTEGER,\n-                StandardTypes.DOUBLE, DOUBLE,\n-                StandardTypes.VARCHAR, VARCHAR);\n+        private final TypeManager typeManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NTY2OA=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk3MzA4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyODo1OVrOHIljtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoxNzowNFrOHMSy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NjAwNg==", "bodyText": "Should this be in a separate test ? Like testJsonRoundTripWithArrays ?", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r478766006", "createdAt": "2020-08-28T00:28:59Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnHandle.java", "diffHunk": "@@ -26,13 +27,18 @@\n public class TestPinotColumnHandle\n {\n     private final PinotColumnHandle columnHandle = new PinotColumnHandle(\"columnName\", VARCHAR, REGULAR);\n+    private final PinotColumnHandle arrayColumnHandle = new PinotColumnHandle(\"arrayColumn\", new ArrayType(VARCHAR), REGULAR);\n \n     @Test\n     public void testJsonRoundTrip()\n     {\n         String json = COLUMN_CODEC.toJson(columnHandle);\n         PinotColumnHandle copy = COLUMN_CODEC.fromJson(json);\n         assertEquals(copy, columnHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1Mjg4NA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482652884", "createdAt": "2020-09-03T02:17:04Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnHandle.java", "diffHunk": "@@ -26,13 +27,18 @@\n public class TestPinotColumnHandle\n {\n     private final PinotColumnHandle columnHandle = new PinotColumnHandle(\"columnName\", VARCHAR, REGULAR);\n+    private final PinotColumnHandle arrayColumnHandle = new PinotColumnHandle(\"arrayColumn\", new ArrayType(VARCHAR), REGULAR);\n \n     @Test\n     public void testJsonRoundTrip()\n     {\n         String json = COLUMN_CODEC.toJson(columnHandle);\n         PinotColumnHandle copy = COLUMN_CODEC.fromJson(json);\n         assertEquals(copy, columnHandle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NjAwNg=="}, "originalCommit": {"oid": "8f1b7f31b11198fea1388adee82b58d6124b39bb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzk1ODg5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDoxNzowNFrOHMVRIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNjoyMVrOHMXKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MzQxMA==", "bodyText": "Just confirming: This should be writeLong instead of writeInt ? Perhaps add a comment as to why.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482693410", "createdAt": "2020-09-03T04:17:04Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -295,6 +300,66 @@ else if (javaType.equals(Slice.class)) {\n         }\n     }\n \n+    private void writeArrayBlock(BlockBuilder blockBuilder, Type columnType, int columnIndex)\n+    {\n+        for (int rowIndex = 0; rowIndex < currentDataTable.getDataTable().getNumberOfRows(); rowIndex++) {\n+            ColumnDataType columnPinotType = currentDataTable.getDataTable().getDataSchema().getColumnDataType(columnIndex);\n+            Type columnPrestoType = ((ArrayType) columnType).getElementType();\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            switch (columnPinotType) {\n+                case INT_ARRAY:\n+                    int[] intArray = currentDataTable.getDataTable().getIntArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < intArray.length; i++) {\n+                        columnPrestoType.writeLong(childBuilder, intArray[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e8cd6c82467c0f7cb0715fa8a53b4b20de86fd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyMzg2Mw==", "bodyText": "both the numeric types handle the writeLong method and handle it accordingly. So whatever the type instance will handle or throw exception accordingly. Adding a comment (missed in this iteration)", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482723863", "createdAt": "2020-09-03T06:04:45Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -295,6 +300,66 @@ else if (javaType.equals(Slice.class)) {\n         }\n     }\n \n+    private void writeArrayBlock(BlockBuilder blockBuilder, Type columnType, int columnIndex)\n+    {\n+        for (int rowIndex = 0; rowIndex < currentDataTable.getDataTable().getNumberOfRows(); rowIndex++) {\n+            ColumnDataType columnPinotType = currentDataTable.getDataTable().getDataSchema().getColumnDataType(columnIndex);\n+            Type columnPrestoType = ((ArrayType) columnType).getElementType();\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            switch (columnPinotType) {\n+                case INT_ARRAY:\n+                    int[] intArray = currentDataTable.getDataTable().getIntArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < intArray.length; i++) {\n+                        columnPrestoType.writeLong(childBuilder, intArray[i]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MzQxMA=="}, "originalCommit": {"oid": "90e8cd6c82467c0f7cb0715fa8a53b4b20de86fd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQxMw==", "bodyText": "Example: https://github.com/prestodb/presto/blob/master/presto-common/src/main/java/com/facebook/presto/common/type/IntegerType.java#L45", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482724413", "createdAt": "2020-09-03T06:06:21Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -295,6 +300,66 @@ else if (javaType.equals(Slice.class)) {\n         }\n     }\n \n+    private void writeArrayBlock(BlockBuilder blockBuilder, Type columnType, int columnIndex)\n+    {\n+        for (int rowIndex = 0; rowIndex < currentDataTable.getDataTable().getNumberOfRows(); rowIndex++) {\n+            ColumnDataType columnPinotType = currentDataTable.getDataTable().getDataSchema().getColumnDataType(columnIndex);\n+            Type columnPrestoType = ((ArrayType) columnType).getElementType();\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            switch (columnPinotType) {\n+                case INT_ARRAY:\n+                    int[] intArray = currentDataTable.getDataTable().getIntArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < intArray.length; i++) {\n+                        columnPrestoType.writeLong(childBuilder, intArray[i]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MzQxMA=="}, "originalCommit": {"oid": "90e8cd6c82467c0f7cb0715fa8a53b4b20de86fd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzk3MDI3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDoyNDoyMVrOHMVYFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDoyNDoyMVrOHMVYFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NTE4OA==", "bodyText": "My OCD tells me we should hoist the condition outside the loop :-)", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r482695188", "createdAt": "2020-09-03T04:24:21Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -295,6 +300,66 @@ else if (javaType.equals(Slice.class)) {\n         }\n     }\n \n+    private void writeArrayBlock(BlockBuilder blockBuilder, Type columnType, int columnIndex)\n+    {\n+        for (int rowIndex = 0; rowIndex < currentDataTable.getDataTable().getNumberOfRows(); rowIndex++) {\n+            ColumnDataType columnPinotType = currentDataTable.getDataTable().getDataSchema().getColumnDataType(columnIndex);\n+            Type columnPrestoType = ((ArrayType) columnType).getElementType();\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            switch (columnPinotType) {\n+                case INT_ARRAY:\n+                    int[] intArray = currentDataTable.getDataTable().getIntArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < intArray.length; i++) {\n+                        columnPrestoType.writeLong(childBuilder, intArray[i]);\n+                        completedBytes += Long.BYTES;\n+                    }\n+                    break;\n+                case LONG_ARRAY:\n+                    long[] longArray = currentDataTable.getDataTable().getLongArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < longArray.length; i++) {\n+                        columnPrestoType.writeLong(childBuilder, longArray[i]);\n+                        completedBytes += Long.BYTES;\n+                    }\n+                    break;\n+                case FLOAT_ARRAY:\n+                    float[] floatArray = currentDataTable.getDataTable().getFloatArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < floatArray.length; i++) {\n+                        if (columnPrestoType.getJavaType().equals(long.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e8cd6c82467c0f7cb0715fa8a53b4b20de86fd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDU5MTcwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyMjo0M1rOHMuTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyMjo0M1rOHMuTJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwMzUyNg==", "bodyText": "super nit: Should this be a plain java comment ? Thanks for adding the comments !.", "url": "https://github.com/prestodb/presto/pull/15093#discussion_r483103526", "createdAt": "2020-09-03T16:22:43Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -295,6 +300,82 @@ else if (javaType.equals(Slice.class)) {\n         }\n     }\n \n+    private void writeArrayBlock(BlockBuilder blockBuilder, Type columnType, int columnIndex)\n+    {\n+        for (int rowIndex = 0; rowIndex < currentDataTable.getDataTable().getNumberOfRows(); rowIndex++) {\n+            ColumnDataType columnPinotType = currentDataTable.getDataTable().getDataSchema().getColumnDataType(columnIndex);\n+            Type columnPrestoType = ((ArrayType) columnType).getElementType();\n+            BlockBuilder childBuilder = blockBuilder.beginBlockEntry();\n+            switch (columnPinotType) {\n+                case INT_ARRAY:\n+                    int[] intArray = currentDataTable.getDataTable().getIntArray(rowIndex, columnIndex);\n+                    for (int i = 0; i < intArray.length; i++) {\n+                        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bb844385615c875f1c05a177cc50550d32e125"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3589, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}