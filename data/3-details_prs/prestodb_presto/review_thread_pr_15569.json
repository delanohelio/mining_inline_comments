{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NTMwMjIx", "number": 15569, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo1MDozNlrOFNXcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo1Mzo1N1rOFNXg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTU5ODk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/execution/TestMemoryRevokingScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo1MDozNlrOIRivFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0NTozMlrOIRkjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2NTgxMw==", "bodyText": "@pettyjamesm  can you add a simple test which tests specifically the change made by this PR? I.e. something that catches the original bug that would fail without this PR.", "url": "https://github.com/prestodb/presto/pull/15569#discussion_r555265813", "createdAt": "2021-01-11T18:50:36Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestMemoryRevokingScheduler.java", "diffHunk": "@@ -553,31 +557,47 @@ private void assertMemoryRevokingNotRequested()\n         assertMemoryRevokingRequestedFor();\n     }\n \n-    private SqlTask newSqlTask()\n+    private SqlTask newSqlTask(QueryId queryId)\n     {\n-        TaskId taskId = new TaskId(\"query\", 0, 0, idGeneator.incrementAndGet());\n+        QueryContext queryContext = getOrCreateQueryContext(queryId);\n+\n+        TaskId taskId = new TaskId(queryId.getId(), 0, 0, idGeneator.incrementAndGet());\n         URI location = URI.create(\"fake://task/\" + taskId);\n \n         return createSqlTask(\n                 taskId,\n                 location,\n                 \"fake\",\n-                new QueryContext(new QueryId(\"query\"),\n-                        new DataSize(1, MEGABYTE),\n-                        new DataSize(2, MEGABYTE),\n-                        new DataSize(1, MEGABYTE),\n-                        new DataSize(1, GIGABYTE),\n-                        memoryPool,\n-                        new TestingGcMonitor(),\n-                        executor,\n-                        scheduledExecutor,\n-                        new DataSize(1, GIGABYTE),\n-                        spillSpaceTracker),\n+                queryContext,\n                 sqlTaskExecutionFactory,\n                 new MockExchangeClientSupplier(),\n                 executor,\n                 Functions.identity(),\n                 new DataSize(32, MEGABYTE),\n                 new CounterStat());\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3190e1306d3b8e2e5e32a516ca5b98ff52916e47"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NTY4Mw==", "bodyText": "If the refactors to the test class are applied but the fixes in MemoryRevokingScheduler are not (ie: tasks created in tests are assigned to the same real QueryContext instance) then almost all tests will fail because of the over-counting tasks within the same query bug.", "url": "https://github.com/prestodb/presto/pull/15569#discussion_r555295683", "createdAt": "2021-01-11T19:45:32Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/test/java/com/facebook/presto/execution/TestMemoryRevokingScheduler.java", "diffHunk": "@@ -553,31 +557,47 @@ private void assertMemoryRevokingNotRequested()\n         assertMemoryRevokingRequestedFor();\n     }\n \n-    private SqlTask newSqlTask()\n+    private SqlTask newSqlTask(QueryId queryId)\n     {\n-        TaskId taskId = new TaskId(\"query\", 0, 0, idGeneator.incrementAndGet());\n+        QueryContext queryContext = getOrCreateQueryContext(queryId);\n+\n+        TaskId taskId = new TaskId(queryId.getId(), 0, 0, idGeneator.incrementAndGet());\n         URI location = URI.create(\"fake://task/\" + taskId);\n \n         return createSqlTask(\n                 taskId,\n                 location,\n                 \"fake\",\n-                new QueryContext(new QueryId(\"query\"),\n-                        new DataSize(1, MEGABYTE),\n-                        new DataSize(2, MEGABYTE),\n-                        new DataSize(1, MEGABYTE),\n-                        new DataSize(1, GIGABYTE),\n-                        memoryPool,\n-                        new TestingGcMonitor(),\n-                        executor,\n-                        scheduledExecutor,\n-                        new DataSize(1, GIGABYTE),\n-                        spillSpaceTracker),\n+                queryContext,\n                 sqlTaskExecutionFactory,\n                 new MockExchangeClientSupplier(),\n                 executor,\n                 Functions.identity(),\n                 new DataSize(32, MEGABYTE),\n                 new CounterStat());\n     }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2NTgxMw=="}, "originalCommit": {"oid": "3190e1306d3b8e2e5e32a516ca5b98ff52916e47"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTYxMDQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo1Mzo1N1rOIRi2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0OTowMFrOIRkq2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2NzYzNw==", "bodyText": "nit: functional style instead\nreturn taskContext.filter(context -> context.getTaskMemoryContext().getRevocableMemory() >= maxRevocableMemoryPerTask).isPresent();", "url": "https://github.com/prestodb/presto/pull/15569#discussion_r555267637", "createdAt": "2021-01-11T18:53:57Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -167,41 +168,38 @@ private void scheduleRevoking()\n \n     private boolean memoryRevokingNeeded(SqlTask task)\n     {\n-        return task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes() >= maxRevocableMemoryPerTask;\n+        Optional<TaskContext> taskContext = task.getTaskContext();\n+        if (taskContext.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3190e1306d3b8e2e5e32a516ca5b98ff52916e47"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NzQ5OA==", "bodyText": "Changed", "url": "https://github.com/prestodb/presto/pull/15569#discussion_r555297498", "createdAt": "2021-01-11T19:49:00Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskThresholdMemoryRevokingScheduler.java", "diffHunk": "@@ -167,41 +168,38 @@ private void scheduleRevoking()\n \n     private boolean memoryRevokingNeeded(SqlTask task)\n     {\n-        return task.getTaskInfo().getStats().getRevocableMemoryReservationInBytes() >= maxRevocableMemoryPerTask;\n+        Optional<TaskContext> taskContext = task.getTaskContext();\n+        if (taskContext.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2NzYzNw=="}, "originalCommit": {"oid": "3190e1306d3b8e2e5e32a516ca5b98ff52916e47"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3328, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}