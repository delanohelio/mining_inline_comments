{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTIwNTg5", "number": 14908, "title": "Add release notes for 0.239", "bodyText": "Missing Release Notes\nLeiqing Cai\n\n #14670 BenchmarkRunner fixes and make it extensible (Merged by: Leiqing Cai)\n\nNikhil Collooru\n\n #14618 Collect file stats (Merged by: James Sun)\n\nRavion\n\n 5d16273 Added documentation for Presto on Spark\n\nRebecca Schlussel\n\n #14838 Fix bad verify check in DwrfEncryptionInfo (Merged by: Rebecca Schlussel)\n #14068 Bump zookeeper from 3.4.13 to 3.4.14 (Merged by: Rebecca Schlussel)\n\nTim Meehan\n\n #14788 Fixes for completion events post-dispatching (Merged by: Timothy Meehan)\n\nWeidong Duan\n\n #14817 fix inconsistent session value at server and client side (Merged by: Maria Basmanova)\n #14818 fix druid incorrect real data value for Druid connector (Merged by: Zhenxiao Luo)\n\nWenlei Xie\n\n #14841 Allow configurable parser option in Presto-on-Spark (Merged by: Andrii Rosa)\n\nZhenxiao Luo\n\n #14889 Handle NaN in Parquet statistics (Merged by: Zhenxiao Luo)\n\nZhi Wen\n\n #14851 Move authentication support from Presto to Airlift (Merged by: Andrii Rosa)\n #14869 Upgrade airlift to 0.193 and discovery-server to 1.32 (Merged by: Andrii Rosa)\n\ntgorthi\n\n #14822 Support return type coercion in CREATE FUNCTION (Merged by: Leiqing Cai)\n\nExtracted Release Notes\n\n#14527 (Author: Saksham Sachdev): Aggregation ORDER BY & DISTINCT spilling\n\nAdd local disk spilling support for aggregation functions with ORDER BY or DISTINCT syntax.\n\n\n#14632 (Author: Zhi Wen): Add allowed roles for HTTP endpoints\n\nSpecify allowed roles for HTTP endpoints.\n\n\n#14696 (Author: frank.hu): Support common sub-expression optimization in CursorProcessorCompiler\n\nAdd optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property optimize_common_sub_expressions.\n\n\n#14704 (Author: Xiang Fu): Adding Pinot SQL endpoint support\n\nAdd Pinot SQL endpoint support.\n\n\n#14740 (Author: fornaix): Fix confusion matrix computation for classification function\n\nFix  :func:classification_miss_rate and :func:classification_fall_out functions (:pr:14740).\n\n\n#14743 (Author: Sanket Dige): Add invoker security mode for views\n\nAdd support for 2 security modes for views. The default DEFINER security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the creator or.\nDefiner** of the view) rather than the user executing the query. In the INVOKER security mode, tables referenced in the view are accessed using the permissions of the query user (the invoker of the view).\n\n\n#14752 (Author: Swapnil Tailor): Revert \"Reliable Resource Groups with versioning\"\n\nReverting Reliable Resource Group Versioning.\n\n\n#14753 (Author: Adam J. Shook): Implement PrestoDatabaseMetaData getClientInfoProperties\n\nImplemented DatabaseMetaData.getClientInfoProperties API.\n\n\n#14754 (Author: Partha Kanuparthy): Fix thread listing under heavy workloads (thread churn)\n\nFix NPE in /v1/thread end point.\n\n\n#14775 (Author: Partha Kanuparthy): Fix thread snapshot UI due to variable initialization\n\nThe worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.\n\n\n#14784 (Author: Tim Meehan): Fix query completion events for non-dispatched queries\n\nFix missing query completion events for queries which fail prior to dispatching.\n\n\n#14800 (Author: Ariel Weisberg): Partition filtering warning\n\nAdd support for warning on unfiltered partition keys using partition-keys-to-warn-on-no-filtering system property.\n\n\n#14811 (Author: Zhenxiao Luo): Elasticsearch connector improvements\n\nSupport Elasticsearch numeric keyword.\nSupport composite publish_address in Elasticsearch.\nAdd configurations to improve concurrency in Elasticsearch.\n\n\n#14820 (Author: Adli Mousa): Add support of caching for glue metastore\n\nAdd support for caching the Glue metastore.\n\n\n#14831 (Author: Xiang Fu): Move DistinctLimitNode to spi\n\nMove DistinctLimitNode to presto-spi module for connectors to push down.\n\n\n#14836 (Author: Saksham Sachdev): Implement ORDER BY spilling\n\nAdd local disk spilling support for ORDER BY syntax.\n\n\n#14842 (Author: prithvip): Add aggregation function SET_UNION\n\nAdd aggregation function SET_UNION.\n\n\n#14845 (Author: Shixuan Fan): Support evaluating min/max only metadata query\n\nAdd support to optimize min/max only metadata query. This is controlled by existing config optimizer.optimize-metadata-queries and session property optimize_metadata_queries. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n\n\n#14849 (Author: Rebecca Schlussel): Honor ignore_stats_calculator_failures in getTableStatistics\n\nFix an issue where the property ignore_stats_calculator_failures would not be honored for certain queries that had filters pushed down to the table scan.\n\n\n#14857 (Author: James Gill): Upgrade JTS to 1.17.0\n\nUpdate JTS to 1.17.0. This changes the implementation of ST_Buffer: the output might change by a small (1e-10) amount.\n\n\n#14863 (Author: Xiang Fu): Pushdown DistinctLimitNode in Pinot Connector\n\nPushdown DistinctLimitNode to Pinot Query in SQL mode.\n\n\n#14879 (Author: Rebecca Schlussel): Fix infinite loop in non-legacy SqlQueryScheduler\n\nFix potential infinite loop when the setting use_legacy_scheduler is set to false.\n\n\n#14880 (Author: Vic Zhang): Enable async page transport by default\n\nEnable async page transport with non-blocking IO by default. This can be disabled by setting exchange.async-page-transport-enabled configuration property to false.\n\n\n#14886 (Author: Rebecca Schlussel): Unify grouped execution properties\n\nEnable dynamic-schedule-for-grouped-execution by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\nEnable grouped-execution-for-aggregation and experimental.grouped-execution-for-eligible-table-scans by default.\nIntroduce new configuration property grouped-execution-enabled and session property grouped_execution to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of grouped-execution-for-aggregation, grouped-execution-for-join, and experimental.grouped-execution-for-eligible-table-scans to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n\n\n#14900 (Author: Rebecca Schlussel): Revert \"Support grouped execution for eligible table scans\"\n\nRemove experimental feature to perform grouped execution for eligible table scans and its associated configuration property experimental.grouped-execution-for-elligible-table-scans and session property grouped_execution_for_eligible_table_scans.\n\n\n\nAll Commits\n\n6d5cdaa Increase default size for http timeout executors (Vic Zhang)\nc963c79 Enable async page transport by default (Vic Zhang)\nef4b537 Support evaluating min/max only metadata query (Shixuan Fan)\nb1fc202 Remove unused field in MetadataQueryOptimizer (Shixuan Fan)\n259f461 Allow EnforceSingleRowNode for predicate extractor (Shixuan Fan)\n5944e15 Push expression translation above MetadataQueryOptimizer (Shixuan Fan)\n03e80fc Revert \"Support grouped execution for eligible table scans\" (Rebecca Schlussel)\nee0a3af Fetch results eagerly from coordinator (Tim Meehan)\n7cb1d7a Unify grouped execution properties (Rebecca Schlussel)\nc8152d8 Enable grouped execution by default (Rebecca Schlussel)\nf38828f Don't try grouped execution for forceSingleNode (Rebecca Schlussel)\n82cd9bc Minor refactor to RemoteSourceFactory (Wenlei Xie)\n57c24f1 Fix flaky testRuntimeOptimizedStagesCorrectness (Peizhen Guo)\n9ae3a21 Clean up KdbTree node intersection logic (James Gill)\n7e3d217 Upgrade JTS to 1.17.0 (James Gill)\n23082e8 Fix infinite loop in scheduler for finished query (Rebecca Schlussel)\n6f01b1e Remove extra new line (Rebecca Schlussel)\n81f6349 Handle NaN in Parquet statistics (Zhenxiao Luo)\n4c2b8c2 Add aggregation function SET_UNION (prithvip)\n392ec92 Close spiller on Operator#close for ORDER BY spilling (Saksham Sachdev)\ne418fe7 Extract order by queries tests to separate class (Saksham Sachdev)\n4722c75 Convert revocable memory to user memory on OrderBy finish (Saksham Sachdev)\n1a56a5e Use OrderingCompiler in OrderBy spilling (Saksham Sachdev)\n9d11bdb Add Spill To Disk for ORDER BY (Saksham Sachdev)\n37f6c26 Use WorkProcessor in OrderByOperator (Saksham Sachdev)\n3b7f846 Extract DummySpillerFactory from TestHashAggregationOperator (Saksham Sachdev)\n4d8ead5 Produce more than single page in testHashAggregation (Saksham Sachdev)\n93255a2 Allow memory revoke only during operator finish phase (Saksham Sachdev)\n9b50094 Revoke memory after initial output page has been produced in tests (Saksham Sachdev)\n6a55eb4 Adding DistinctLimit pushdown support in Pinot Connector (Xiang Fu)\n8045dbe Collect statistics of files committed by OrcFileWriter (Nikhil Collooru)\n89632d3 Improve Alluxio cache documentation (Bin Fan)\n9831c83 support caching for glue metastore (Adli Mousa)\n6354727 Add getSplitSizeInBytes in SPI ConnectorSplit (Vic Zhang)\nd35acde Add properties for Presto-on-Spark split distribution (Vic Zhang)\n58585b2 Add test checking QueryCompletedEvent (Peizhen Guo)\nae5770a Add runtimeOptimizedStages in QueryCompletedEvent (Peizhen Guo)\n2cb629e Make maxConcurrency optional in ConcurrentExecutionPhase (Leiqing Cai)\n4514b99 Refactor PhaseExecutor (Leiqing Cai)\na4e7a78 Allow session properties to be specified with queries (Leiqing Cai)\nf8cfad6 Refactor BenchmarkSuite (Leiqing Cai)\n515ccf9 Fix PhaseSpecification (Leiqing Cai)\nc61baf4 Make benchmark runner extensible (Leiqing Cai)\naf8058a Make BenchmarkSuiteSupplier extensible (Leiqing Cai)\nb743588 Specify allowed roles for HTTP endpoints (Zhi Wen)\nf28613e Move authentication support from Presto to Airlift (Zhi Wen)\n3469944 Refactor userAgent handle in Presto-on-Spark (Wenlei Xie)\n9d2efe6 Allow export Spark queue in Presto-on-Spark query event (Wenlei Xie)\n38ee80c Allow customizing clientInfo and userAgent in Presto-on-Spark (Wenlei Xie)\n4f1b626 Upgrade airlift to 0.193 and discovery-server to 1.32 (Zhi Wen)\nbad48ac Pass user info into PrestoSparkRunner (Wenlei Xie)\n7d9d8dc Change TableStatistics constructor to private (Peizhen Guo)\n1ef8df5 Remove DistributionStat for PeakRunningTasks (Vic Zhang)\n6e98e41 Bugfixing: escape pinot query string before set it into json request (Xiang Fu)\n9499923 Fix subfield pruning to be enabled by featureConfig (Mayank Garg)\nbfc5ea8 Avoid creating tiny splits at the end of block boundaries (James Petty)\n91b058e Add invoker security mode for views (Sanket Dige)\nd7949f7 Remove unused PushdownFilterResult (James Sun)\n2d2693f Fix failure during optimization of LIKE expression (Rebecca Schlussel)\n9e012a2 Don't ignore stats failures in tests (Rebecca Schlussel)\naa049cc Honor ignore_stats_calculator_failures in getTableStatistics (Rebecca Schlussel)\n589325b Support Pinot new SQL endpoint for broker queries. (Xiang Fu)\n573b8d1 Fix configuration for Alluxio metastore module (David Zhu)\nf5868d4 Explicitly not supporting external functions in lambda and join filter (Rongrong Zhong)\nb8f4c99 Add rule to rewrite filter with remote function to project (Rongrong Zhong)\n4aa2ded Plan projection with remote functions (Rongrong Zhong)\n2608642 Add Locality to ProjectNode (Rongrong Zhong)\n0890b3d Invoke CBO at SqlQueryScheduler for Join Swapping (Peizhen Guo)\nd86aeee Add a session property for runtime optimizer (Peizhen Guo)\n3cf8069 Support return type coercion in CREATE FUNCTION (tgorthi)\n19228af Warn on configured unfiltered partitions (Ariel Weisberg)\n816e977 Support for checking partition key filter coverage (Ariel Weisberg)\n7cc8bd3 Rename PlanSanityChecker to PlanChecker (Ariel Weisberg)\n4f2f854 Introduce CacheQuotaRequirementProvider (Ke Wang)\na63cb8a Allow configurable parser option in Presto-on-Spark (Wenlei Xie)\nb14f68a Do not prune duplicate ConstantExpression (Rongrong Zhong)\n2869400 Fix bad verify check in DwrfEncryptionInfo (Rebecca Schlussel)\n670ecb5 Allow query info to be stored in a file upon query finish (Andrii Rosa)\n6e98dd1 Add ability to register event listener in Presto on Spark (Andrii Rosa)\n3f69d1f Implement QueryMonitor callbacks for Presto on Spark (Andrii Rosa)\n2f0575c Collect TaskInfo for Presto on Spark tasks (Andrii Rosa)\n323592f Prepare to collect TaskInfo from Presto on Spark tasks (Andrii Rosa)\n41483c3 Apply compression to Presto on Spark splits (Andrii Rosa)\n829b667 Fix inconsistent session value from both server and client side (Weidong Duan)\n20a1726 Fix query completion events prior to execution (Tim Meehan)\n3177a90 Skip isSplittable reflection for RCFileInputFormat (Rohit Jain)\n058bda4 Include scheduling stats of bucketed table to NodeSelectionStats (Ke Wang)\ndece3cd Fix bytecode generation for SQL functions (prithvip)\nbd300f7 Move DistinctLimitNode to spi (Xiang Fu)\n728b8b0 Fix document in Presto-on-Spark (Wenlei Xie)\n3943983 fix druid incorrect real data value for DruidBrokerPageSource (Weidong Duan)\n5d16273 Added documentation for Presto on Spark (Ravion)\n84b7b0a Allow DictionaryBlock for MinMaxBy aggregation (Vic Zhang)\n13ea2ea Add documentation for Elasticsearch connector concurrency configs (Zhenxiao Luo)\n0e4e646 Improve concurrency for Elasticsearch calls (Zhenxiao Luo)\n93f7843 Enable testShowCreateTable for Elasticsearch connector (Zhenxiao Luo)\n277da41 Remove fake properties from Elastic Search column metadata (Zhenxiao Luo)\n15ff958 Optimize Elasticsearch queries that fetch no columns (Zhenxiao Luo)\nd58624d Fix ElasticsearchClient package name (Zhenxiao Luo)\n2cafb69 Support composite publish_address in Elasticsearch (Zhenxiao Luo)\n25b636f Support elasticsearch numeric keyword (Zhenxiao Luo)\ne182413 Fix reading encrypted streams at offset 0 (Rebecca Schlussel)\n6143044 Avoid fetching encryption information when no columns requested (Mayank Garg)\n86a3cb0 Implement additional serialization methods for Spark shuffle (Andrii Rosa)\n56f9022 Fix file stats for encryption groups (Rebecca Schlussel)\n443d105 Fix encryption with dictionary encodings (Rebecca Schlussel)\n863a534 Fix dwrf decryption for empty files (Rebecca Schlussel)\na54efd9 Minor cleanup in TestDecryption (Rebecca Schlussel)\n4a3d46c Use the same RowExpressionCompiler in CursorProcessorCompiler (Rongrong Zhong)\nb8b3059 Attach user and query ID to JDBC SQL strings (Naveen Cherukuri)\ne22ebb0 Add documentation for driver.max-page-partitioning-buffer-count (Ying Su)\nbbda157 Run PruneRedundantProjectionAssignments after RowExpression change (Rongrong Zhong)\nf2b3910 Make TestElasticsearchIntegrationSmokeTest single threaded (Zhenxiao Luo)\n92c3d3c Change getSupportedColumnStatistics for temp table (Peizhen Guo)\n7fdb787 Fix flaky testAndInFilter test (Rebecca Schlussel)\nb9cde3a Add support for column names with spaces to SubfieldTokenizer (Masha Basmanova)\n57428cc Add a test for Presto-on-Spark (Wenlei Xie)\n2f5d368 adding dist code (Partha Kanuparthy)\n22b9d9c Fix thread snapshot UI due to variable initialization (Partha Kanuparthy)\n7b71284 Revert \"Fix thread snapshot UI due to variable initialization\" (Partha Kanuparthy)\n9796999 Fix thread snapshot UI due to variable initialization (Partha Kanuparthy)\n709d229 fix for thread listing under heavy workloads (Partha Kanuparthy)\nee71bf5 Allow configure SQL invoked function implementation type (Rongrong Zhong)\n54f7e41 Add support for DWRF encryption without compression (Rebecca Schlussel)\na543417 Pass DwrfWriterEncryption into OrcWriter (Rebecca Schlussel)\nc561c50 Write support for DWRF encryption at rest (Mayank Garg)\n9f89256 Add TestingHiveEventListener (James Sun)\n64e1f90 Fix query completion events for non-dispatched queries (Tim Meehan)\na101186 Bump zookeeper from 3.4.13 to 3.4.14 (Rebecca Schlussel)\ndc2a10a Set sequenceId for dwrf columnEncodings (Rebecca Schlussel)\n1f5a29c Fix stats for dwrf encryption (Rebecca Schlussel)\n6b51cbf Refactor buffer max capacity calculation (Ying Su)\n91cb2ec Allow additional error margin for estimatedMaxCapacity (Ying Su)\ncfcf392 Always make space for nullsBuffer and hashTablesBuffer (Ying Su)\n724e1f9 Add tests for max buffer capacity estimation (Ying Su)\nc5b8979 Fix estimatedSerializedSizeInBytes for RLE and Dictionary Blocks (Ying Su)\n184c000 Fix getLogicalSizeInBytes() for Blocks (Ying Su)\n33bca28 Remove childrenEstimatedSerializedSizeInBytes from DecodedBlockNode (Ying Su)\nea35ddf Fix serialized size estimation in BlockEncodingBuffers (Ying Su)\n3f7dca0 Implement ORDER BY and DISTINCT spilling for aggregation (Saksham Sachdev)\n53e23a1 Clean up create geometry calls (James A. Gill)\nc899dc4 Remove unneeded Esri NaN writing (James A. Gill)\n4803c01 Refactor case statement to use enums (James Gill)\n4cad3f8 Parquet: Handle missing struct columns as part of the nested column pruning (Venki Korukanti)\n5aef7a4 Implement PrestoDatabaseMetaData getClientInfoProperties (Adam J. Shook)\n83d37f7 Remove workaround for ConcurrentMap.compute (Rebecca Schlussel)\n1bc3803 Remove unused methods (Rebecca Schlussel)\ne72fe86 Use byte[] instead of slice for EncryptionLibrary (Rebecca Schlussel)\nda1ccfa Fix reading and writing of column encodings for DWRF (Rebecca Schlussel)\n168a0e9 Fix encryption/decryption of encrypted metadata (Rebecca Schlussel)\n583ee11 Decrypt separately from compression (Rebecca Schlussel)\n21f4cd2 Generate DataEncryptionKeys in OrcWriter (Rebecca Schlussel)\nd72661f Support common sub-expression optimization in CursorProcessorCompiler (frank.hu)\nd60030f Revert \"Reliable Resource Groups with versioning\" (Swapnil Tailor)\nf88def2 Fix artificially high queued query metrics (Jeremy DeGroot)\n9e77bf2 Turn off failure detector by default in tests (Rebecca Schlussel)\nd80fc51 Fix confusion matrix computation for classification function (fornaix)\ne345254 Make TestRaptorIntegrationSmokeTestMySql single threaded (James Sun)\n02e0460 Add documentation for a deployment example (Adam J. Shook)\naabe214 Report field name when decoding Elasticsearch value fails (Zhenxiao Luo)\n31e6bc0 Add support for nested types in Elasticsearch (Zhenxiao Luo)\nd136b07 Fix error message typo in Elasticsearch decoders (Zhenxiao Luo)\n997ed9f Handle empty object field in Elasticsearch (Zhenxiao Luo)\nb7f6c00 Add Elasticsearch array support using definitions in the _meta field (Zhenxiao Luo)\nd389051 Add option to ignore Elasticsearch publish_address (Zhenxiao Luo)\nacd5590 Iterate over Elasticsearch documents in index order (Zhenxiao Luo)\n05f5f46 Refresh Elasticsearch index before test queries (Zhenxiao Luo)\ne2772b0 Add support for querying Elasticsearch aliases (Zhenxiao Luo)\n1785a94 Use filter clause for Elasticsearch queries (Zhenxiao Luo)\n38d8f40 Fix predicate pushdown for Elasticsearch (Zhenxiao Luo)\nb825bdd Handle mixed-case columns in Elasticsearch (Zhenxiao Luo)\nd5ab359 Add support for datetimes exposed as numbers in Elasticsearch (Zhenxiao Luo)\n54879c5 Add support for AWS IAM authorization to Elasticsearch connector (Zhenxiao Luo)\n4e42579 Move ElasticsearchClient to client package (Zhenxiao Luo)\n2824ab2 Support nodes with no public http address (Zhenxiao Luo)\n03c26f4 Use absolute paths for Elasticsearch requests (Zhenxiao Luo)\n83aea2f Add system.nodes table to Elasticsearch (Zhenxiao Luo)\n5da00ca Move IndexMetadata, NodesResponse, SearchShardsResponse, Shard, ElasticsearchNode into Elasticsearch client directory (Zhenxiao Luo)\ndd0e2e6 Refresh Elasticsearch nodes periodically (Zhenxiao Luo)\nba21188 Make Elasticsearch retry timeout configurable (Zhenxiao Luo)\n639897b Add support for Elasticsearch query string syntax (Zhenxiao Luo)\n7f56aab Adjust Elasticsearch timeout defaults (Zhenxiao Luo)\nd914af4 Load tables dynamically in Elasticsearch (Zhenxiao Luo)\nca40434 bulk load elasticsearch test data (Zhenxiao Luo)\n0cbc76f Update Elasticsearch connector to use Elasticsearch Http client (Zhenxiao Luo)\n24d807a Move metadata specific methods to ElasticsearchMetadata (Zhenxiao Luo)\n017661c Embed index and type in Elasticsearch connector handle (Zhenxiao Luo)\n03c8f38 Use shard primary host in Elasticsearch connector to save extra hop in Elasticsearch (Zhenxiao Luo)\nf8bded1 Encapsulate logic for fetching shards (Zhenxiao Luo)\n00d45bd inline method for Elasticsearch getSearchShards() (Zhenxiao Luo)\ncc6be46 Remove indexExactMatch from Elasticsearch connector (Zhenxiao Luo)\n42fd681 Simplify logic for Elasticsearch connector getSearchShards (Zhenxiao Luo)\nbd4a17f Remove unused parameter in Elasticsearch getSearchShards() (Zhenxiao Luo)\n3f7665a clear Elasticsearch scroll when connector query close (Zhenxiao Luo)\ndd5bc6c Make ElasticsearchQueryBuilder stateless (Zhenxiao Luo)\n25b1792 Cache Elasticsearch clients (Zhenxiao Luo)\nc5c5ce5 Make Elasticsearch config catalog wide (Zhenxiao Luo)\nf92194a Rename ElasticSearchConnectorConfig to ElasticSearchConfig (Zhenxiao Luo)\n8e34f48 Fix ObjectMapper typo in ElasticsearchClient (Zhenxiao Luo)\n83931c6 Revert \"Fix ObjectMapper typo in ElasticsearchClient\" (Zhenxiao Luo)\nfa5f78b Revert \"Rename ElasticSearchConnectorConfig to ElasticSearchConfig\" (Zhenxiao Luo)\n8367c65 Revert \"Make Elasticsearch config catalog wide\" (Zhenxiao Luo)\nca6a8bf Revert \"Cache Elasticsearch clients\" (Zhenxiao Luo)\n911db66 Revert \"Make ElasticsearchQueryBuilder stateless\" (Zhenxiao Luo)\n60e7b59 Revert \"clear Elasticsearch scroll when connector query close\" (Zhenxiao Luo)\nc8bb762 Revert \"Remove unused parameter in Elasticsearch getSearchShards()\" (Zhenxiao Luo)\n091933f Revert \"Simplify logic for Elasticsearch connector getSearchShards\" (Zhenxiao Luo)\n890782e Revert \"Remove indexExactMatch from Elasticsearch connector\" (Zhenxiao Luo)\n31e4ab9 Revert \"inline method for Elasticsearch getSearchShards()\" (Zhenxiao Luo)\n738be0b Revert \"Encapsulate logic for fetching shards\" (Zhenxiao Luo)\n326dc71 Revert \"Use shard primary host in Elasticsearch connector to save extra hop in Elasticsearch\" (Zhenxiao Luo)\n6eba421 Revert \"Embed index and type in Elasticsearch connector handle\" (Zhenxiao Luo)\n54f1cbb Revert \"Move metadata specific methods to ElasticsearchMetadata\" (Zhenxiao Luo)\n59154cf Revert \"Update Elasticsearch connector to use Elasticsearch Http client\" (Zhenxiao Luo)\n8186abe Revert \"bulk load elasticsearch test data\" (Zhenxiao Luo)\n2777136 Revert \"Load tables dynamically in Elasticsearch\" (Zhenxiao Luo)\n9ed2baf Revert \"Adjust Elasticsearch timeout defaults\" (Zhenxiao Luo)\nd51a968 Revert \"Add support for Elasticsearch query string syntax\" (Zhenxiao Luo)\n561a4b4 Revert \"Make Elasticsearch retry timeout configurable\" (Zhenxiao Luo)\n5510d4d Revert \"Refresh Elasticsearch nodes periodically\" (Zhenxiao Luo)\n6ac8dbe Revert \"Move IndexMetadata, NodesResponse, SearchShardsResponse, Shard, ElasticsearchNode into Elasticsearch client directory\" (Zhenxiao Luo)\n7df099e Revert \"Add system.nodes table to Elasticsearch\" (Zhenxiao Luo)\nf7521f2 Revert \"Use absolute paths for Elasticsearch requests\" (Zhenxiao Luo)\n323b60a Revert \"Support nodes with no public http address\" (Zhenxiao Luo)\n2a9081f Revert \"Move ElasticsearchClient to client package\" (Zhenxiao Luo)\n7e1e8ce Revert \"Add support for AWS IAM authorization to Elasticsearch connector\" (Zhenxiao Luo)\n5b8c54c Revert \"Add support for datetimes exposed as numbers in Elasticsearch\" (Zhenxiao Luo)\n76d8dc6 Revert \"Handle mixed-case columns in Elasticsearch\" (Zhenxiao Luo)\nc32856d Revert \"Fix predicate pushdown for Elasticsearch\" (Zhenxiao Luo)\nb3705cc Revert \"Use filter clause for Elasticsearch queries\" (Zhenxiao Luo)\n6be1765 Revert \"Add support for querying Elasticsearch aliases\" (Zhenxiao Luo)\n5e9e097 Revert \"Refresh Elasticsearch index before test queries\" (Zhenxiao Luo)\ndf2e257 Revert \"Iterate over Elasticsearch documents in index order\" (Zhenxiao Luo)\n8138809 Revert \"Add option to ignore Elasticsearch publish_address\" (Zhenxiao Luo)\nac103a5 Revert \"Add Elasticsearch array support using definitions in the _meta field\" (Zhenxiao Luo)\n4e726f1 Revert \"Handle empty object field in Elasticsearch\" (Zhenxiao Luo)\n51fdf3a Revert \"Fix error message typo in Elasticsearch decoders\" (Zhenxiao Luo)\n5c2233c Revert \"Add support for nested types in Elasticsearch\" (Zhenxiao Luo)\n6b88754 Revert \"Report field name when decoding Elasticsearch value fails\" (Zhenxiao Luo)\nca60019 Pass encryption info from hive to ORC reader/writer (Rebecca Schlussel)\n38358b8 Add more testing for encryption/decryption (Rebecca Schlussel)\n00d0011 Add DWRF encryption support to ORC writer (Rebecca Schlussel)\nd4a1822 Add encryption support to ORC ColumnWriters (Rebecca Schlussel)\n9ca3b95 Add DWRF encryption support to ORC reader (Rebecca Schlussel)\n81a6b0d Move creation of includedOrcColumns to RecordReader (Rebecca Schlussel)\nf51c5c5 Make columnEncodings into a map (Rebecca Schlussel)\n37b5701 Add metadata support for encrypted DWRF files (Rebecca Schlussel)\nc6415c4 Remove unused field (Rebecca Schlussel)\nf1bfd8c Fix copywrite for TestByteArrayUtils (Rebecca Schlussel)\n7213ae3 Enable statistics aggregation for temporary table. (Peizhen Guo)\n1fbfb40 Disable encryption tests temporarily (Mayank Garg)", "createdAt": "2020-07-28T16:29:15Z", "url": "https://github.com/prestodb/presto/pull/14908", "merged": true, "mergeCommit": {"oid": "412e489d1a835c6d658a6af5ab646e609dcba26f"}, "closed": true, "closedAt": "2020-08-07T17:44:16Z", "author": {"login": "caithagoras"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5aCfWgFqTQ1Njg2MjgxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8oDcRABqjM2MzQxNTEzMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODYyODEz", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-456862813", "createdAt": "2020-07-28T17:40:00Z", "commit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMFrOG4XcOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMFrOG4XcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzQ5Ng==", "bodyText": "I updated the description with the release note for this PR for #14800 but I can't seem to open a PR against your repo to update it here.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461757496", "createdAt": "2020-07-28T17:40:00Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODkzMzgx", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-456893381", "createdAt": "2020-07-28T18:21:01Z", "commit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMTowMVrOG4Y7OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozNjoxMVrOG4Zduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MTgxNg==", "bodyText": "sorry for the confusion.  The commit for Remove experimental feature to perform grouped execution for eligible table scans ... was merged after this one, so this note should just say\nEnable ``grouped-execution-for-aggregation`` by default.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461781816", "createdAt": "2020-07-28T18:21:01Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MjI5MA==", "bodyText": "remove experimental.grouped-execution-for-eligilbe-table-scans from this list, as we decided to get rid of this feature entirely instead.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461782290", "createdAt": "2020-07-28T18:21:49Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MzQ0OA==", "bodyText": "this should be part of the note Add support for 2 security modes for views.  Looks like somehow some other bullets came in between.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461783448", "createdAt": "2020-07-28T18:23:47Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4Mzk5MQ==", "bodyText": "can we get more information about what this means?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461783991", "createdAt": "2020-07-28T18:24:47Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjQ4OQ==", "bodyText": "needs more information and to be in proper release note format.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461786489", "createdAt": "2020-07-28T18:29:07Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjY1Ng==", "bodyText": "needs to be fleshed out", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461786656", "createdAt": "2020-07-28T18:29:25Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NzQxOA==", "bodyText": "Something like\nFix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\nAlso, should be in a separate Web UI section.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461787418", "createdAt": "2020-07-28T18:30:43Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.\n+* The worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4OTI0OA==", "bodyText": "We should add a release note for encryption at rest @mayankgarg1990\n\nAdd support for reading and writing DWRF files with encryption.  To create a table with encrypted columns....", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461789248", "createdAt": "2020-07-28T18:33:46Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.\n+* The worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.\n+* Update JTS to 1.17.0. This changes the implementation of ST_Buffer: the output might change by a small (1e-10) amount.\n+\n+SPI Changes\n+___________\n+* Move `DistinctLimitNode` to `presto-spi` module for connectors to push down.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency in Elasticsearch.\n+* Support Elasticsearch numeric keyword.\n+* Support composite publish_address in Elasticsearch.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MDY1MQ==", "bodyText": "also, can this be moved above the previous note so that all the grouped execution property changes are next to each other.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461790651", "createdAt": "2020-07-28T18:36:11Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/df474ca8a7e076fea0234290c66fe6c46c2fa4c7", "committedDate": "2020-07-28T16:29:10Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "d24cea73d7db4f5ead929a2e7f5d5c1c21595630", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d24cea73d7db4f5ead929a2e7f5d5c1c21595630", "committedDate": "2020-07-28T21:22:27Z", "message": "Add release notes for 0.239"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d24cea73d7db4f5ead929a2e7f5d5c1c21595630", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d24cea73d7db4f5ead929a2e7f5d5c1c21595630", "committedDate": "2020-07-28T21:22:27Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/855901d3b0281c526507198e1bcecd00ebee9ac1", "committedDate": "2020-07-28T21:29:20Z", "message": "Add release notes for 0.239"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDYxNjgz", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-457061683", "createdAt": "2020-07-28T22:04:50Z", "commit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNDo1MFrOG4hE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyMDowNVrOG4huxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNTM1Mg==", "bodyText": "just realized the property is called grouped-execution-for-aggregation-enabled.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461915352", "createdAt": "2020-07-28T22:04:50Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNjUxOA==", "bodyText": "Can you also mention here that grouped-execution-for-aggregation-enabled and grouped-execution-for-join-enabled will be removed in a future release.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461916518", "createdAt": "2020-07-28T22:06:16Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzA2Ng==", "bodyText": "what are the configurations?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461917066", "createdAt": "2020-07-28T22:06:59Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzU4Mw==", "bodyText": "what's a composite publish_address? (maybe this is just because I don't know elasticsearch)", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461917583", "createdAt": "2020-07-28T22:07:44Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.\n+* Add support for numeric keyword.\n+* Add support for composite publish_address.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNDYyMA==", "bodyText": "This description is a bit too technical. If this is accurate, maybe say\nOptimize queries with repeated expressions in filters or projections by computing the common expressions only once.  This can be disabled by the session property\n  ``optimize_common_sub_expressions``.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461924620", "createdAt": "2020-07-28T22:17:12Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjA4NA==", "bodyText": "what's a min/max only metadata query?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461926084", "createdAt": "2020-07-28T22:20:05Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/855901d3b0281c526507198e1bcecd00ebee9ac1", "committedDate": "2020-07-28T21:29:20Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "508c7bbfed259d25641e807c188d698a79483e0f", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/508c7bbfed259d25641e807c188d698a79483e0f", "committedDate": "2020-08-03T13:29:44Z", "message": "Add release notes for 0.239"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "508c7bbfed259d25641e807c188d698a79483e0f", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/508c7bbfed259d25641e807c188d698a79483e0f", "committedDate": "2020-08-03T13:29:44Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/aa23eed765646168d0e3b1dba456f1a8b896f650", "committedDate": "2020-08-03T13:45:37Z", "message": "Add release notes for 0.239"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTkxMTEw", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-460191110", "createdAt": "2020-08-03T17:02:36Z", "commit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowMjozNlrOG7BZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxNjo0OFrOG7B28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MjIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix ``NullPointerException`` in ``/v1/thread`` end point.\n          \n          \n            \n            * Fix error in ``/v1/thread`` end point.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464542206", "createdAt": "2020-08-03T17:02:36Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NjY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              for certain queries that had filters pushed down to the table scan.\n          \n          \n            \n              for certain queries.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464546657", "createdAt": "2020-08-03T17:11:12Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NjkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix missing query completion events for queries which fail prior to dispatching.\n          \n          \n            \n            * Fix missing query completion events for queries which fail prior to execution.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464546923", "createdAt": "2020-08-03T17:11:41Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NzEzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n          \n          \n            \n            * Fix potential performance regression when setting ``use_legacy_scheduler`` is set to ``false``.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464547136", "createdAt": "2020-08-03T17:12:04Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n          \n          \n            \n            *  Fix worker thread snapshot UI to correctly display the stack trace.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464549045", "createdAt": "2020-08-03T17:15:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize queries with repeated expressions in filters or projections by computing the\n+  common expressions only once. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Optimize queries containing only :func:`min` and :func:`max` on columns that can be\n+  evaluated using metadata (e.g., Hive partitions). This is controlled by configuration property\n+  ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true``. The property\n+  ``grouped-execution-for-join-enabled`` will be removed in a future release (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation-enabled`` by default. This property will be removed in\n+  a future release.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTYxOA==", "bodyText": "What is the default setting?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464549618", "createdAt": "2020-08-03T17:16:48Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize queries with repeated expressions in filters or projections by computing the\n+  common expressions only once. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Optimize queries containing only :func:`min` and :func:`max` on columns that can be\n+  evaluated using metadata (e.g., Hive partitions). This is controlled by configuration property\n+  ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true``. The property\n+  ``grouped-execution-for-join-enabled`` will be removed in a future release (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation-enabled`` by default. This property will be removed in\n+  a future release.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/aa23eed765646168d0e3b1dba456f1a8b896f650", "committedDate": "2020-08-03T13:45:37Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/f119c4d146901dd8ace1ee39ca96f5b18f78c5a4", "committedDate": "2020-08-03T17:28:28Z", "message": "Add release notes for 0.239"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDUxMjU4", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-460451258", "createdAt": "2020-08-04T02:17:18Z", "commit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoxNzoxOFrOG7OqAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoxNzoxOFrOG7OqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1OTI5Ng==", "bodyText": "Fix incorrect results from :func:classification_miss_rate, :func:classification_fall_out, and :func:classification_precision (:pr:14740).", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464759296", "createdAt": "2020-08-04T02:17:18Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzE4NzEy", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-463318712", "createdAt": "2020-08-07T13:37:51Z", "commit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/f119c4d146901dd8ace1ee39ca96f5b18f78c5a4", "committedDate": "2020-08-03T17:28:28Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d6f2c373519d0ea7d1b5e913c4aad83d92989589", "committedDate": "2020-08-07T13:40:23Z", "message": "Add release notes for 0.239"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDczMDYy", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-463473062", "createdAt": "2020-08-07T17:12:43Z", "commit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDc4MjEy", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-463478212", "createdAt": "2020-08-07T17:21:03Z", "commit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyMTowM1rOG9h0EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyMTowM1rOG9h0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MDMyMA==", "bodyText": "We may be to add a heading (e.g. **Details** or **Notes**) in parallel with **Highlights** so that it doesn't looks like the sections below are sub-sections of the highlights. We're also missing this with 0.238 release notes, so I'm ok with fixing this later.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r467170320", "createdAt": "2020-08-07T17:21:03Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,80 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d6f2c373519d0ea7d1b5e913c4aad83d92989589", "committedDate": "2020-08-07T13:40:23Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "12429af1ef6a3d086e43a76d3fe4e84e66f3eed4", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/12429af1ef6a3d086e43a76d3fe4e84e66f3eed4", "committedDate": "2020-08-07T17:36:43Z", "message": "Add release notes for 0.239"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDkwMDU0", "url": "https://github.com/prestodb/presto/pull/14908#pullrequestreview-463490054", "createdAt": "2020-08-07T17:40:03Z", "commit": {"oid": "12429af1ef6a3d086e43a76d3fe4e84e66f3eed4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0MDowM1rOG9iYXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0MDowM1rOG9iYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3OTYxNA==", "bodyText": "I think you need\n:pr:`14740`\n\nCould you visually check the other content of the html by running\ncd presto-docs\nmake clean\nmake html", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r467179614", "createdAt": "2020-08-07T17:40:03Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+**Details**\n+==============\n+\n+General Changes\n+_______________\n+* Fix incorrect results from :func:`classification_miss_rate`, :func:`classification_fall_out`\n+  and :func:`classification_precision` (:pr:14740).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12429af1ef6a3d086e43a76d3fe4e84e66f3eed4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b5c92e2f802476e2a1c77e5a95237270e1477c", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/50b5c92e2f802476e2a1c77e5a95237270e1477c", "committedDate": "2020-08-07T17:41:19Z", "message": "Add release notes for 0.239"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12429af1ef6a3d086e43a76d3fe4e84e66f3eed4", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/12429af1ef6a3d086e43a76d3fe4e84e66f3eed4", "committedDate": "2020-08-07T17:36:43Z", "message": "Add release notes for 0.239"}, "afterCommit": {"oid": "50b5c92e2f802476e2a1c77e5a95237270e1477c", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/50b5c92e2f802476e2a1c77e5a95237270e1477c", "committedDate": "2020-08-07T17:41:19Z", "message": "Add release notes for 0.239"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 349, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}