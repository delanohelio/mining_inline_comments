{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTE1MDYy", "number": 14688, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo1NDozNVrOEKD-Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzo1MjoxOFrOEK5_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg2MjkxOnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/Block.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo1NDozNVrOGq40uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxNzo0MlrOGrUh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyNDM3Ng==", "bodyText": "What's the motivation to have the default implementation? It seems incorrect to report region-size as region-logical-size.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447624376", "createdAt": "2020-06-30T11:54:35Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/Block.java", "diffHunk": "@@ -205,6 +205,15 @@ default long getLogicalSizeInBytes()\n      */\n     long getRegionSizeInBytes(int position, int length);\n \n+    /**\n+     * Returns the size of {@code block.getRegion(position, length)}.\n+     * The method can be expensive. Do not use it outside an implementation of Block.\n+     */\n+    default long getRegionLogicalSizeInBytes(int position, int length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODMzNQ==", "bodyText": "@mbasmanova For leaf blocks (ie. non Array/Map/Row/Dict/RLE blocks), the logicalSizeInBytes is the same as sizeInBytes. See the following code:\n/**\n     * Returns the size of the block contents, regardless of internal representation.\n     * The same logical data values should always have the same size, no matter\n     * what block type is used or how they are represented within a specific block.\n     *\n     * This can differ substantially from {@link #getSizeInBytes} for certain block\n     * types. For RLE, it will be {@code N} times larger. For dictionary, it will be\n     * larger based on how many times dictionary entries are reused.\n     */\n    default long getLogicalSizeInBytes()\n    {\n        return getSizeInBytes();\n    }\n\nSimilarly, regional logical size for leaf blocks is the same as the regional size. We have default implementation here so that we don't have to implement the same thing for all leaf blocks.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r448078335", "createdAt": "2020-07-01T02:17:42Z", "author": {"login": "yingsu00"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/Block.java", "diffHunk": "@@ -205,6 +205,15 @@ default long getLogicalSizeInBytes()\n      */\n     long getRegionSizeInBytes(int position, int length);\n \n+    /**\n+     * Returns the size of {@code block.getRegion(position, length)}.\n+     * The method can be expensive. Do not use it outside an implementation of Block.\n+     */\n+    default long getRegionLogicalSizeInBytes(int position, int length)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyNDM3Ng=="}, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg4MjM4OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMDowOFrOGq5AhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMDowOFrOGq5AhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyNzM5Ng==", "bodyText": "This loop is duplicated between here and getRegionLogicalSizeInBytes. Consider refactoring to avoid copy-paste.\npublic long getLogicalSizeInBytes() {\n   return getRegionLogicalSizeInBytes(0, getPositionCount());\n}\n\npublic long getRegionLogicalSizeInBytes(int positionOffset, int length) {\n   if (positionOffset == 0 && length == getPositionCount() && logicalSizeInBytes >= 0) {\n      return logicalSizeInBytes;\n   }\n\n   ...loop\n\n\n   if (positionOffset == 0 && length == getPositionCount()) {\n      logicalSizeInBytes = sizeInBytes;\n   }\n   return sizeInBytes;\n}\n}", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447627396", "createdAt": "2020-06-30T12:00:08Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java", "diffHunk": "@@ -248,7 +248,7 @@ public long getLogicalSizeInBytes()\n         for (int i = 0; i < getPositionCount(); i++) {\n             int position = getId(i);\n             if (seenSizes[position] < 0) {\n-                seenSizes[position] = dictionary.getRegionSizeInBytes(position, 1);\n+                seenSizes[position] = dictionary.getRegionLogicalSizeInBytes(position, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg5MjU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/block/TestArrayBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMjo1OFrOGq5GyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo1NjozNFrOGsBnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyOTAwMA==", "bodyText": "consider replacing comments with variable names, e.g.\n\nBlock arrayOfLong =\nBlock arrayOfRleOfLong =\nBlock arrayOfRleOfArrayOfLong =\n...", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447629000", "createdAt": "2020-06-30T12:02:58Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestArrayBlock.java", "diffHunk": "@@ -158,6 +164,38 @@ public void testEstimatedDataSizeForStats()\n         }\n     }\n \n+    @Test\n+    public void testLogicalSizeInBytes()\n+    {\n+        int positionCount = 100;\n+        int[] offsets = IntStream.rangeClosed(0, positionCount).toArray();\n+        boolean[] nulls = new boolean[positionCount];\n+\n+        // Array(LongArrayBlock)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxNjk0OQ==", "bodyText": "@mbasmanova I renamed the variables. However it's not as straightforward as the comment:\n// Row(Dictionary(LongArrayBlock), Dictionary(Row(LongArrayBlock, LongArrayBlock)))\nBlock rowOfDictionaryOfLongAndDictionaryOfRowOfLongAndLong = ...\n\nSo I kept both the comments and renamed variables.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r448816949", "createdAt": "2020-07-02T07:56:34Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestArrayBlock.java", "diffHunk": "@@ -158,6 +164,38 @@ public void testEstimatedDataSizeForStats()\n         }\n     }\n \n+    @Test\n+    public void testLogicalSizeInBytes()\n+    {\n+        int positionCount = 100;\n+        int[] offsets = IntStream.rangeClosed(0, positionCount).toArray();\n+        boolean[] nulls = new boolean[positionCount];\n+\n+        // Array(LongArrayBlock)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyOTAwMA=="}, "originalCommit": {"oid": "ee04597d09e6711414eb27ea0c534e322d1eaf33"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg5OTEzOnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNDo1MFrOGq5Ksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowNjozOFrOGsJ73A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMDAwMg==", "bodyText": "all caps with underscores\nconsider making this configurable", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447630002", "createdAt": "2020-06-30T12:04:50Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public class Arrays\n {\n+    private static final double graceFactorFordMaxCapacity = 1.2f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1MzMwOA==", "bodyText": "@mbasmanova I will send a separate PR to make it configurable.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r448953308", "createdAt": "2020-07-02T12:06:38Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public class Arrays\n {\n+    private static final double graceFactorFordMaxCapacity = 1.2f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMDAwMg=="}, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTkwNzgwOnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNzowM1rOGq5Pxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowOTowM1rOGsKAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTMwMg==", "bodyText": "This is a generic method that can be used in many places. However, the commit says that the change applies only to one specific use case. I'd expect the caller to apply this new factor when computing estimatedMaxCapacity.\n\nuse Math.toIntExact instead of (int)", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r447631302", "createdAt": "2020-06-30T12:07:03Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -108,7 +110,7 @@ else if (buffer.length < capacity) {\n \n     public static byte[] ensureCapacity(byte[] buffer, int capacity, int estimatedMaxCapacity, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)\n     {\n-        int newCapacity = max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity));\n+        int newCapacity = (int) max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity * graceFactorFordMaxCapacity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NDUxMQ==", "bodyText": "This is a generic method that can be used in many places. However, the commit says that the change applies only to one specific use case. I'd expect the caller to apply this new factor when computing estimatedMaxCapacity.\n\nMoved the application of this new factor to setupDecodedBlockAndMapPositions() where the estimatedMaxCapacity is calculated.\n\n\nuse Math.toIntExact instead of (int)\n\n\nIt's actually casting double to int. toIntExact(long) only takes long.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r448954511", "createdAt": "2020-07-02T12:09:03Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -108,7 +110,7 @@ else if (buffer.length < capacity) {\n \n     public static byte[] ensureCapacity(byte[] buffer, int capacity, int estimatedMaxCapacity, ExpansionFactor expansionFactor, ExpansionOption expansionOption, ArrayAllocator allocator)\n     {\n-        int newCapacity = max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity));\n+        int newCapacity = (int) max(capacity, min((int) (capacity * expansionFactor.expansionFactor), estimatedMaxCapacity * graceFactorFordMaxCapacity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTMwMg=="}, "originalCommit": {"oid": "71ce03c9a501ed7af075ba504cb79b3cfe84477d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODcxNDcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzo1MjoxOFrOGsN3qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMzoxOFrOGsfPWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNzc3MA==", "bodyText": "nit: perhaps, refactor to extract a helper method to avoid copy-paste", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r449017770", "createdAt": "2020-07-02T13:52:18Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -239,8 +239,8 @@ protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNod\n         double targetBufferSize = partitionBufferCapacity * decodedBlockPageSizeFraction *\n                 (estimatedSerializedSizeInBytes - childrenEstimatedSerializedSizeInBytes) / estimatedSerializedSizeInBytes;\n \n-        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE));\n-        estimatedOffsetBufferMaxCapacity = (int) (targetBufferSize * Integer.BYTES / POSITION_SIZE);\n+        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NzkxMA==", "bodyText": "@mbasmanova did you mean something like this?\nsetEstimatedNullsBufferMaxCapacity(getEstimatedBufferMaxCapacity(targetBufferSize, Byte.BYTES, POSITION_SIZE));\nestimatedValueBufferMaxCapacity = getEstimatedBufferMaxCapacity(targetBufferSize, Byte.BYTES, POSITION_SIZE);\n\nand in AbstractBlockEncodingBuffer:\nprotected static int getEstimatedBufferMaxCapacity(double targetBufferSize, int unitSize, int positionSize)\n    {\n        return (int) (targetBufferSize * unitSize / positionSize * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY);\n    }", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r449277910", "createdAt": "2020-07-02T21:39:03Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -239,8 +239,8 @@ protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNod\n         double targetBufferSize = partitionBufferCapacity * decodedBlockPageSizeFraction *\n                 (estimatedSerializedSizeInBytes - childrenEstimatedSerializedSizeInBytes) / estimatedSerializedSizeInBytes;\n \n-        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE));\n-        estimatedOffsetBufferMaxCapacity = (int) (targetBufferSize * Integer.BYTES / POSITION_SIZE);\n+        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNzc3MA=="}, "originalCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3OTQ0OA==", "bodyText": "@yingsu00 Yes, this might reduce copy-paste and make it easier to read and ensure we don't forget GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY somewhere.", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r449279448", "createdAt": "2020-07-02T21:43:37Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -239,8 +239,8 @@ protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNod\n         double targetBufferSize = partitionBufferCapacity * decodedBlockPageSizeFraction *\n                 (estimatedSerializedSizeInBytes - childrenEstimatedSerializedSizeInBytes) / estimatedSerializedSizeInBytes;\n \n-        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE));\n-        estimatedOffsetBufferMaxCapacity = (int) (targetBufferSize * Integer.BYTES / POSITION_SIZE);\n+        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNzc3MA=="}, "originalCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMjM2Mg==", "bodyText": "@mbasmanova Hi Masha, I just updated the PR with a new commit e8511df636 Refactor buffer max capacity calculation. Thank you again, and happy long weekend!", "url": "https://github.com/prestodb/presto/pull/14688#discussion_r449302362", "createdAt": "2020-07-02T23:03:18Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -239,8 +239,8 @@ protected void setupDecodedBlockAndMapPositions(DecodedBlockNode decodedBlockNod\n         double targetBufferSize = partitionBufferCapacity * decodedBlockPageSizeFraction *\n                 (estimatedSerializedSizeInBytes - childrenEstimatedSerializedSizeInBytes) / estimatedSerializedSizeInBytes;\n \n-        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE));\n-        estimatedOffsetBufferMaxCapacity = (int) (targetBufferSize * Integer.BYTES / POSITION_SIZE);\n+        setEstimatedNullsBufferMaxCapacity((int) (targetBufferSize * Byte.BYTES / POSITION_SIZE * GRACE_FACTOR_FOR_MAX_BUFFER_CAPACITY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNzc3MA=="}, "originalCommit": {"oid": "61f21f7f2c6b1a6dbdc242b1889b75bb91ddb30b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2496, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}