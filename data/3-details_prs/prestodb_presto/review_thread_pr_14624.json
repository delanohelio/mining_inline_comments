{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzU1MDYz", "number": 14624, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoxMTowNVrOEDnDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTowMDo1OVrOEEGvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjIwOTU0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoxMTowNVrOGguoPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0OTozN1rOGhRH1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw==", "bodyText": "You probably want to introduce some set_agg test rather than this?", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r436971583", "createdAt": "2020-06-08T20:11:05Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testArrayAggDistinct()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463322cacd5fda4b282bbfe30821acc69a8b03db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MTM4Ng==", "bodyText": "Yeah - this started out as a better implementation for array_agg(distinct) but morphed into this new agg. Will fix it.", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r436991386", "createdAt": "2020-06-08T20:47:48Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testArrayAggDistinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw=="}, "originalCommit": {"oid": "463322cacd5fda4b282bbfe30821acc69a8b03db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjcyNQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437536725", "createdAt": "2020-06-09T15:49:37Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testArrayAggDistinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw=="}, "originalCommit": {"oid": "463322cacd5fda4b282bbfe30821acc69a8b03db"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM4MDA1OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0NzowNFrOGhhI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo1NzowM1rOGh485w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTEzNg==", "bodyText": "Can we also add tests for other types and maybe query based on tpch?", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799136", "createdAt": "2020-06-10T00:47:04Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testSetAgg()\n+    {\n+        assertQuery(\"select set_agg(x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4OTI4Nw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438189287", "createdAt": "2020-06-10T14:57:03Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testSetAgg()\n+    {\n+        assertQuery(\"select set_agg(x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTEzNg=="}, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM4MzYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0OToxNlrOGhhLKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNDoyNVrOGh5R4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg==", "bodyText": "Only add this value if we haven't seen it before?", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799722", "createdAt": "2020-06-10T00:49:16Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTg0NQ==", "bodyText": "I don't think this comment is necessary actually, the code is pretty clear.", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799845", "createdAt": "2020-06-10T00:49:47Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg=="}, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NDY1OA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438194658", "createdAt": "2020-06-10T15:04:25Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg=="}, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzQwMjY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTowMDo1OVrOGhhW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNToxMFrOGh5T5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg==", "bodyText": "I know you copied the logic from KeyValuePairs. I'm wondering can we simplify this logic? Since this function can only be called when valuePositionByHash[hashPosition] == EMPTY_SLOT (this is guarded by logic in ValueExists) this should be a checkState rather than an if. Or if we want to use if, we can put the appendTo inside the if statement and remove valueExists.", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437802722", "createdAt": "2020-06-10T01:00:59Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.\n+     * Otherwise, ignore it.\n+     */\n+    public void add(Block value, int valuePosition)\n+    {\n+        if (!valueExists(value, valuePosition)) {\n+            addvalue(value, valuePosition);\n+        }\n+    }\n+\n+    private boolean valueExists(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n+    }\n+\n+    private void addvalue(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        valueType.appendTo(value, position, valueBlockBuilder);\n+        int hashPosition = getHashPositionOfvalue(value, position);\n+        if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NDUxMQ==", "bodyText": "Yeah - I'm going to just inline the whole thing.", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438194511", "createdAt": "2020-06-10T15:04:15Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.\n+     * Otherwise, ignore it.\n+     */\n+    public void add(Block value, int valuePosition)\n+    {\n+        if (!valueExists(value, valuePosition)) {\n+            addvalue(value, valuePosition);\n+        }\n+    }\n+\n+    private boolean valueExists(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n+    }\n+\n+    private void addvalue(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        valueType.appendTo(value, position, valueBlockBuilder);\n+        int hashPosition = getHashPositionOfvalue(value, position);\n+        if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg=="}, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NTE3Mg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438195172", "createdAt": "2020-06-10T15:05:10Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.\n+     * Otherwise, ignore it.\n+     */\n+    public void add(Block value, int valuePosition)\n+    {\n+        if (!valueExists(value, valuePosition)) {\n+            addvalue(value, valuePosition);\n+        }\n+    }\n+\n+    private boolean valueExists(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n+    }\n+\n+    private void addvalue(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        valueType.appendTo(value, position, valueBlockBuilder);\n+        int hashPosition = getHashPositionOfvalue(value, position);\n+        if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg=="}, "originalCommit": {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2400, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}