{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzg0NTU2", "number": 15231, "title": "Support pushdown approx_distinct(x, e) into pinot", "bodyText": "Current Pinot aggregation pushdown only supports approx_distinct(x) but not approx_distinct(x, e).\nSince pinot supports configurable approximate distinct with query function syntax distinctCountHll(x, log2m) (apache/pinot#5564), we can push down approx_distinct(x, e) by converting e to log2m then call pinot function: distinctCountHll\nSome ref to log2m:\nhttps://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/stream/cardinality/HyperLogLog.java#L98\nTest plan\n\nAdding unit tests to check the correct expression to pushdown.\nTested locally with a presto server and pinot up and run the query with real data set.\n\n== RELEASE NOTES ==\n\nPinot Changes\n* Support pushing down aggregation function `approx_distinct(x, e)` to Pinot connector.", "createdAt": "2020-09-27T22:09:28Z", "url": "https://github.com/prestodb/presto/pull/15231", "merged": true, "mergeCommit": {"oid": "9f4203ed016f0e1df551aeb5fd8b880023bcd492"}, "closed": true, "closedAt": "2020-10-04T22:48:25Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNUdpWAFqTQ5NzU2ODk4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPUlRtgBqjM4Mzc4ODc5OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTY4OTg2", "url": "https://github.com/prestodb/presto/pull/15231#pullrequestreview-497568986", "createdAt": "2020-09-28T14:27:39Z", "commit": {"oid": "e18011ebdec17d6545edce9f355c5ec727ea6208"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzo0MFrOHZAUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzo0MFrOHZAUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTY0Nw==", "bodyText": "Nit: uses", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r495981647", "createdAt": "2020-09-28T14:27:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +393,47 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError = Double.parseDouble(standardErrorString);\n+            if (standardError < 0) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                        format(\"Cannot handle approx_distinct parsed as %d from input %s (function %s)\", standardError, standardErrorString, aggregation));\n+            }\n+            // Pinot use DisctintCountHll to do distinct count estimation, with hyperloglog algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e18011ebdec17d6545edce9f355c5ec727ea6208"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e18011ebdec17d6545edce9f355c5ec727ea6208", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/e18011ebdec17d6545edce9f355c5ec727ea6208", "committedDate": "2020-09-27T22:02:16Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}, "afterCommit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/8a7c5884403359370f895f2e1ccdb15f5919912e", "committedDate": "2020-09-28T18:42:15Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODA0Mjc3", "url": "https://github.com/prestodb/presto/pull/15231#pullrequestreview-497804277", "createdAt": "2020-09-28T18:48:04Z", "commit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0ODowNVrOHZLSLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1MDoyM1rOHZLXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MTMyNw==", "bodyText": "typo ... DistinctCountHll, can you also capitalize that to be consistent.\nCan you add some more details on the second argument that is needed: What is log2m in english would help understand the formula on line 433", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r496161327", "createdAt": "2020-09-28T18:48:05Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +393,47 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError = Double.parseDouble(standardErrorString);\n+            if (standardError < 0) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                        format(\"Cannot handle approx_distinct parsed as %d from input %s (function %s)\", standardError, standardErrorString, aggregation));\n+            }\n+            // Pinot uses DisctintCountHll to do distinct count estimation, with hyperloglog algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MTk4OQ==", "bodyText": "Can this throw a parse error ? Should we handle that ? Or perhaps assert the type of the ConstantExpression or VariableReferenceExpression is numeric ?", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r496161989", "createdAt": "2020-09-28T18:49:16Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +393,47 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError = Double.parseDouble(standardErrorString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MjYwMg==", "bodyText": "Does testing with approx_distinct(fare, 0) ... 0 error make sense ? I think that should throw an error. Right ?", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r496162602", "createdAt": "2020-09-28T18:50:23Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -269,6 +269,9 @@ public void testPercentileAggregation()\n     public void testApproxDistinct()\n     {\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"approx_distinct(fare)\", defaultSessionHolder)), \"DISTINCTCOUNTHLL(fare)\");\n+        testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"approx_distinct(fare, 0.1)\", defaultSessionHolder)), \"DISTINCTCOUNTHLL(fare, 6)\");\n+        testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"approx_distinct(fare, 0.02)\", defaultSessionHolder)), \"DISTINCTCOUNTHLL(fare, 11)\");\n+        testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"approx_distinct(fare, 0.01)\", defaultSessionHolder)), \"DISTINCTCOUNTHLL(fare, 13)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a7c5884403359370f895f2e1ccdb15f5919912e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/8a7c5884403359370f895f2e1ccdb15f5919912e", "committedDate": "2020-09-28T18:42:15Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}, "afterCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/331deb8e840f88c9a1aaf7320a6f1314d47cf95a", "committedDate": "2020-09-28T19:41:15Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjQ3MDk0", "url": "https://github.com/prestodb/presto/pull/15231#pullrequestreview-501647094", "createdAt": "2020-10-04T18:21:45Z", "commit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODoyMTo0NVrOHcJRtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODoyNDozN1rOHcJSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDE2NA==", "bodyText": "one param per line; leave the first line empty", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r499274164", "createdAt": "2020-10-04T18:21:45Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +395,68 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDQwOQ==", "bodyText": "one param per line; leave the first line empty\n%d is incorrect. %f is the one to use. Feel free to adjust precision with %f", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r499274409", "createdAt": "2020-10-04T18:24:23Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +395,68 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError;\n+            try {\n+                standardError = Double.parseDouble(standardErrorString);\n+                if (standardError <= LOWEST_APPROX_DISTINCT_MAX_STANDARD_ERROR || standardError >= HIGHEST_APPROX_DISTINCT_MAX_STANDARD_ERROR) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct parsed as %d from input %s (function %s)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDQyMg==", "bodyText": "one param per line; leave the first line empty", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r499274422", "createdAt": "2020-10-04T18:24:32Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +395,68 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError;\n+            try {\n+                standardError = Double.parseDouble(standardErrorString);\n+                if (standardError <= LOWEST_APPROX_DISTINCT_MAX_STANDARD_ERROR || standardError >= HIGHEST_APPROX_DISTINCT_MAX_STANDARD_ERROR) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct parsed as %d from input %s (function %s)\",\n+                            standardError, standardErrorString, aggregation));\n+                }\n+            }\n+            catch (Exception e) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct parsing to numerical value from input %s (function %s)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDQyNw==", "bodyText": "one param per line; leave the first line empty", "url": "https://github.com/prestodb/presto/pull/15231#discussion_r499274427", "createdAt": "2020-10-04T18:24:37Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -392,6 +395,68 @@ else if (fractionInput instanceof VariableReferenceExpression) {\n             return format(\"PERCENTILEEST%d(%s)\", percentile, inputSelections.get(getVariableReference(inputs.get(0))));\n         }\n \n+        private String handleApproxDistinct(CallExpression aggregation, Map<VariableReferenceExpression, Selection> inputSelections)\n+        {\n+            List<RowExpression> inputs = aggregation.getArguments();\n+            if (inputs.isEmpty() || inputs.size() > 2) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Cannot handle approx_distinct function \" + aggregation);\n+            }\n+            Selection selection = inputSelections.get(getVariableReference(inputs.get(0)));\n+            if (inputs.size() == 1) {\n+                return format(\"DISTINCTCOUNTHLL(%s)\", selection);\n+            }\n+            RowExpression standardErrorInput = inputs.get(1);\n+            String standardErrorString;\n+            if (standardErrorInput instanceof ConstantExpression) {\n+                standardErrorString = getLiteralAsString((ConstantExpression) standardErrorInput);\n+            }\n+            else if (standardErrorInput instanceof VariableReferenceExpression) {\n+                Selection fraction = inputSelections.get(standardErrorInput);\n+                if (fraction.getOrigin() != LITERAL) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(),\n+                            \"Cannot handle approx_distinct standard error argument be a non literal \" + aggregation);\n+                }\n+                standardErrorString = fraction.getDefinition();\n+            }\n+            else {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected the standard error to be a constant or a variable \" + standardErrorInput);\n+            }\n+\n+            double standardError;\n+            try {\n+                standardError = Double.parseDouble(standardErrorString);\n+                if (standardError <= LOWEST_APPROX_DISTINCT_MAX_STANDARD_ERROR || standardError >= HIGHEST_APPROX_DISTINCT_MAX_STANDARD_ERROR) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct parsed as %d from input %s (function %s)\",\n+                            standardError, standardErrorString, aggregation));\n+                }\n+            }\n+            catch (Exception e) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct parsing to numerical value from input %s (function %s)\",\n+                        standardErrorString, aggregation));\n+            }\n+            // Pinot uses DISTINCTCOUNTHLL to do distinct count estimation, with hyperloglog algorithm.\n+            //\n+            // The HyperLogLog (HLL) data structure is a probabilistic data structure used to estimate the cardinality\n+            // of a data set.\n+            // In order to construct HLL data structure, the parameter log2m is used which represents the number of\n+            // registers used internally by HLL.\n+            //\n+            // If we want a higher accuracy, we need to set these to higher values. Such a configuration\n+            // will have additional overhead because our HLL will occupy more memory. If we're fine with lower accuracy,\n+            // we can lower those parameters, and our HLL will occupy less memory.\n+            //\n+            // The relative standard deviation of HyperLoglog is:\n+            //     rsd = 1.106 / sqrt(2^(log2m))\n+            // So:\n+            //     log2m = 2 * log(1.106 / rsd) / log(2)\n+            int log2m = (int) (2 * Math.log(1.106 / standardError) / Math.log(2));\n+            if (log2m < 1) {\n+                throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Cannot handle approx_distinct, the log2m generated from error is %d from input %s (function %s)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "331deb8e840f88c9a1aaf7320a6f1314d47cf95a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/331deb8e840f88c9a1aaf7320a6f1314d47cf95a", "committedDate": "2020-09-28T19:41:15Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}, "afterCommit": {"oid": "c9ff18f90ffa882d1dabc7c2fd3f447f28809c98", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c9ff18f90ffa882d1dabc7c2fd3f447f28809c98", "committedDate": "2020-10-04T19:43:36Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3393e40e96621fc96a1588438a4d0ba87fc793bb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/3393e40e96621fc96a1588438a4d0ba87fc793bb", "committedDate": "2020-10-04T19:44:47Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9ff18f90ffa882d1dabc7c2fd3f447f28809c98", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c9ff18f90ffa882d1dabc7c2fd3f447f28809c98", "committedDate": "2020-10-04T19:43:36Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}, "afterCommit": {"oid": "3393e40e96621fc96a1588438a4d0ba87fc793bb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/3393e40e96621fc96a1588438a4d0ba87fc793bb", "committedDate": "2020-10-04T19:44:47Z", "message": "Support pushdown approx_distinct(x, e) into pinot"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4802, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}