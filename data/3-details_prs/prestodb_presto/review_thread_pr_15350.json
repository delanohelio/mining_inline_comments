{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjA0NTkx", "number": 15350, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo1MzozOVrOEyeuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozODo1NFrOEzERxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzY3NTgzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo1MzozOVrOHpJYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo1MzozOVrOHpJYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwNzMyOA==", "bodyText": "wait for airlift release cut", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r512907328", "createdAt": "2020-10-27T17:53:39Z", "author": {"login": "ajaygeorge"}, "path": "pom.xml", "diffHunk": "@@ -45,23 +45,23 @@\n         <air.maven.version>3.3.9</air.maven.version>\n \n         <dep.antlr.version>4.7.1</dep.antlr.version>\n-        <dep.airlift.version>0.195</dep.airlift.version>\n+        <dep.airlift.version>0.197-SNAPSHOT</dep.airlift.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027ed2cfe22510c7fec36a72a15a66eb77b98bd9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODQ2MzgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/ContinuousTaskStatusFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo1OTo0NFrOHp26Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo1NDoxM1rOHqlbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MzI5MA==", "bodyText": "I am wondering if we can use SimpleHttpResponseHandler here instead of creating ThriftHttpResponseHandler. We can maybe wrap ThriftResponse to BaseResponse and keep using  SimpleHttpResponseHandler.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513653290", "createdAt": "2020-10-28T17:59:44Z", "author": {"login": "cemcayiroglu"}, "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/ContinuousTaskStatusFetcher.java", "diffHunk": "@@ -154,26 +167,40 @@ private synchronized void scheduleNextRequest()\n             return;\n         }\n \n-        Request request = setContentTypeHeaders(isBinaryTransportEnabled, prepareGet())\n-                .setUri(uriBuilderFrom(taskStatus.getSelf()).appendPath(\"status\").build())\n-                .setHeader(PRESTO_CURRENT_STATE, taskStatus.getState().toString())\n-                .setHeader(PRESTO_MAX_WAIT, refreshMaxWait.toString())\n-                .build();\n-\n+        Request.Builder requestBuilder;\n         ResponseHandler responseHandler;\n-        if (isBinaryTransportEnabled) {\n+        if (thriftTransportEnabled) {\n+            requestBuilder = ThriftRequestUtils.prepareThriftGet(thriftProtocol);\n+            responseHandler = new ThriftResponseHandler(unwrapThriftCodec(taskStatusCodec));\n+        }\n+        else if (binaryTransportEnabled) {\n+            requestBuilder = getBinaryTransportBuilder(prepareGet());\n             responseHandler = createFullSmileResponseHandler((SmileCodec<TaskStatus>) taskStatusCodec);\n         }\n         else {\n+            requestBuilder = getJsonTransportBuilder(prepareGet());\n             responseHandler = createAdaptingJsonResponseHandler(unwrapJsonCodec(taskStatusCodec));\n         }\n \n+        Request request = requestBuilder.setUri(uriBuilderFrom(taskStatus.getSelf()).appendPath(\"status\").build())\n+                .setHeader(PRESTO_CURRENT_STATE, taskStatus.getState().toString())\n+                .setHeader(PRESTO_MAX_WAIT, refreshMaxWait.toString())\n+                .build();\n+\n         errorTracker.startRequest();\n         future = httpClient.executeAsync(request, responseHandler);\n         currentRequestStartNanos.set(System.nanoTime());\n+        FutureCallback callback;\n+        if (thriftTransportEnabled) {\n+            callback = new ThriftHttpResponseHandler(this, request.getUri(), stats.getHttpResponseStats(), REMOTE_TASK_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxNTQxOA==", "bodyText": "#15350 (comment)", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r514415418", "createdAt": "2020-10-29T16:54:13Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/ContinuousTaskStatusFetcher.java", "diffHunk": "@@ -154,26 +167,40 @@ private synchronized void scheduleNextRequest()\n             return;\n         }\n \n-        Request request = setContentTypeHeaders(isBinaryTransportEnabled, prepareGet())\n-                .setUri(uriBuilderFrom(taskStatus.getSelf()).appendPath(\"status\").build())\n-                .setHeader(PRESTO_CURRENT_STATE, taskStatus.getState().toString())\n-                .setHeader(PRESTO_MAX_WAIT, refreshMaxWait.toString())\n-                .build();\n-\n+        Request.Builder requestBuilder;\n         ResponseHandler responseHandler;\n-        if (isBinaryTransportEnabled) {\n+        if (thriftTransportEnabled) {\n+            requestBuilder = ThriftRequestUtils.prepareThriftGet(thriftProtocol);\n+            responseHandler = new ThriftResponseHandler(unwrapThriftCodec(taskStatusCodec));\n+        }\n+        else if (binaryTransportEnabled) {\n+            requestBuilder = getBinaryTransportBuilder(prepareGet());\n             responseHandler = createFullSmileResponseHandler((SmileCodec<TaskStatus>) taskStatusCodec);\n         }\n         else {\n+            requestBuilder = getJsonTransportBuilder(prepareGet());\n             responseHandler = createAdaptingJsonResponseHandler(unwrapJsonCodec(taskStatusCodec));\n         }\n \n+        Request request = requestBuilder.setUri(uriBuilderFrom(taskStatus.getSelf()).appendPath(\"status\").build())\n+                .setHeader(PRESTO_CURRENT_STATE, taskStatus.getState().toString())\n+                .setHeader(PRESTO_MAX_WAIT, refreshMaxWait.toString())\n+                .build();\n+\n         errorTracker.startRequest();\n         future = httpClient.executeAsync(request, responseHandler);\n         currentRequestStartNanos.set(System.nanoTime());\n+        FutureCallback callback;\n+        if (thriftTransportEnabled) {\n+            callback = new ThriftHttpResponseHandler(this, request.getUri(), stats.getHttpResponseStats(), REMOTE_TASK_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MzI5MA=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODQ4NDE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/ContinuousTaskStatusFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowNDozMVrOHp3HEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowNDozMVrOHp3HEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NjU5NQ==", "bodyText": "Should we move codec and response handler to a class (TaskStatusRequest?) and pass it to  ContinuousTaskStatusFetcher? We can get rid of these if checks and casts.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513656595", "createdAt": "2020-10-28T18:04:31Z", "author": {"login": "cemcayiroglu"}, "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/ContinuousTaskStatusFetcher.java", "diffHunk": "@@ -93,7 +102,9 @@ public ContinuousTaskStatusFetcher(\n             Duration maxErrorDuration,\n             ScheduledExecutorService errorScheduledExecutor,\n             RemoteTaskStats stats,\n-            boolean isBinaryTransportEnabled)\n+            boolean binaryTransportEnabled,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODUwMzQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/thrift/ThriftCodecWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowOToxNlrOHp3S_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowOToxNlrOHp3S_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1OTY0Ng==", "bodyText": "I am not sure if we need this wrapper anymore if we move codec and response handler to a class.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513659646", "createdAt": "2020-10-28T18:09:16Z", "author": {"login": "cemcayiroglu"}, "path": "presto-main/src/main/java/com/facebook/presto/server/thrift/ThriftCodecWrapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.thrift;\n+\n+import com.facebook.drift.codec.ThriftCodec;\n+import com.facebook.presto.server.codec.Codec;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ThriftCodecWrapper<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODUyOTcwOnYy", "diffSide": "RIGHT", "path": "presto-bytecode/src/test/java/com/facebook/presto/bytecode/TestClassGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODoxNjowMlrOHp3jbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0NTozNlrOHqBgRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2Mzg1Mw==", "bodyText": "Why do we need this?", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513663853", "createdAt": "2020-10-28T18:16:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-bytecode/src/test/java/com/facebook/presto/bytecode/TestClassGenerator.java", "diffHunk": "@@ -77,7 +77,7 @@ public void testGenerator()\n             assertThat(writer.toString())\n                     .contains(\"00002 I I  : I I  :     IADD\")\n                     .contains(\"public final class test/Example {\")\n-                    .contains(\"// declaration: int (int, int)\")\n+                    .contains(\"// declaration: int add(int, int)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjg4NA==", "bodyText": "asm upgrade to 9 has a slight change in the way class file is generated.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513826884", "createdAt": "2020-10-28T23:45:36Z", "author": {"login": "ajaygeorge"}, "path": "presto-bytecode/src/test/java/com/facebook/presto/bytecode/TestClassGenerator.java", "diffHunk": "@@ -77,7 +77,7 @@ public void testGenerator()\n             assertThat(writer.toString())\n                     .contains(\"00002 I I  : I I  :     IADD\")\n                     .contains(\"public final class test/Example {\")\n-                    .contains(\"// declaration: int (int, int)\")\n+                    .contains(\"// declaration: int add(int, int)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2Mzg1Mw=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODUzOTU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/codec/Codec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODoxODo0M1rOHp3pwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODoxODo0M1rOHp3pwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2NTQ3Mw==", "bodyText": "Nit: better to move this and associated changes to their own commit", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513665473", "createdAt": "2020-10-28T18:18:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/codec/Codec.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.server.smile;\n+package com.facebook.presto.server.codec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODYyNTg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/InternalCommunicationConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo0MToxOVrOHp4fgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjo1OToyN1rOHqOTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3OTIzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConfigDescription(\"Enables thrift encoding support for coordinator-to-worker communication\")\n          \n          \n            \n                @ConfigDescription(\"Enables thrift encoding support for internal task communication\")", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513679234", "createdAt": "2020-10-28T18:41:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/InternalCommunicationConfig.java", "diffHunk": "@@ -149,6 +152,32 @@ public InternalCommunicationConfig setBinaryTransportEnabled(boolean binaryTrans\n         return this;\n     }\n \n+    public boolean isThriftTransportEnabled()\n+    {\n+        return thriftTransportEnabled;\n+    }\n+\n+    @Config(\"experimental.internal-communication.thrift-transport-enabled\")\n+    @ConfigDescription(\"Enables thrift encoding support for coordinator-to-worker communication\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjI5Mw==", "bodyText": "We might be eventually using this flag for non-task related calls as well. I just modeled this on the binary transport flag.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513996293", "createdAt": "2020-10-29T05:51:43Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/InternalCommunicationConfig.java", "diffHunk": "@@ -149,6 +152,32 @@ public InternalCommunicationConfig setBinaryTransportEnabled(boolean binaryTrans\n         return this;\n     }\n \n+    public boolean isThriftTransportEnabled()\n+    {\n+        return thriftTransportEnabled;\n+    }\n+\n+    @Config(\"experimental.internal-communication.thrift-transport-enabled\")\n+    @ConfigDescription(\"Enables thrift encoding support for coordinator-to-worker communication\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3OTIzNA=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMzQ5MQ==", "bodyText": "Then how about Enables thrift encoding support for internal communication?", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r514003491", "createdAt": "2020-10-29T06:05:57Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/InternalCommunicationConfig.java", "diffHunk": "@@ -149,6 +152,32 @@ public InternalCommunicationConfig setBinaryTransportEnabled(boolean binaryTrans\n         return this;\n     }\n \n+    public boolean isThriftTransportEnabled()\n+    {\n+        return thriftTransportEnabled;\n+    }\n+\n+    @Config(\"experimental.internal-communication.thrift-transport-enabled\")\n+    @ConfigDescription(\"Enables thrift encoding support for coordinator-to-worker communication\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3OTIzNA=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzNjU3Mw==", "bodyText": "done. !", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r514036573", "createdAt": "2020-10-29T06:59:27Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/InternalCommunicationConfig.java", "diffHunk": "@@ -149,6 +152,32 @@ public InternalCommunicationConfig setBinaryTransportEnabled(boolean binaryTrans\n         return this;\n     }\n \n+    public boolean isThriftTransportEnabled()\n+    {\n+        return thriftTransportEnabled;\n+    }\n+\n+    @Config(\"experimental.internal-communication.thrift-transport-enabled\")\n+    @ConfigDescription(\"Enables thrift encoding support for coordinator-to-worker communication\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3OTIzNA=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTgyMDg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/PluginManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozNTozNFrOHqDzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyMjowNVrOHqPEVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NDU0NQ==", "bodyText": "Why do we need this library in the SPI?", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513864545", "createdAt": "2020-10-29T01:35:34Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/server/PluginManager.java", "diffHunk": "@@ -83,6 +83,7 @@\n             .add(\"com.facebook.drift.annotations.\")\n             .add(\"com.facebook.drift.TException\")\n             .add(\"com.facebook.drift.TApplicationException\")\n+            .add(\"org.objectweb.asm.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0OTEwOQ==", "bodyText": "Good catch. I think this was a remnant from the drift-codec excludes hack that we had initially.\nSince we went via the airlift upgrade remote I have removed it and tested server startup and it looks good.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r514049109", "createdAt": "2020-10-29T07:22:05Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/PluginManager.java", "diffHunk": "@@ -83,6 +83,7 @@\n             .add(\"com.facebook.drift.annotations.\")\n             .add(\"com.facebook.drift.TException\")\n             .add(\"com.facebook.drift.TApplicationException\")\n+            .add(\"org.objectweb.asm.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NDU0NQ=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTgyOTE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/thrift/ThriftHttpResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozODo1NFrOHqD5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODowMFrOHqEX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NTk5OQ==", "bodyText": "I assume that this is just an almost verbatim copy of the SimpleHttpResponseHandler. I wonder if the SimpleHttpResponseHandler can be reused to avoid copy-paste?", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513865999", "createdAt": "2020-10-29T01:38:54Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/server/thrift/ThriftHttpResponseHandler.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.thrift;\n+\n+import com.facebook.airlift.http.client.HttpStatus;\n+import com.facebook.airlift.http.client.thrift.ThriftResponse;\n+import com.facebook.presto.server.ServiceUnavailableException;\n+import com.facebook.presto.server.SimpleHttpResponseCallback;\n+import com.facebook.presto.server.SimpleHttpResponseHandlerStats;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.util.concurrent.FutureCallback;\n+\n+import java.net.URI;\n+\n+import static com.facebook.airlift.http.client.HttpStatus.OK;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ThriftHttpResponseHandler<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MzkwMA==", "bodyText": "SimpleHttpResponseHandler\nimplements FutureCallback<BaseResponse>\nwhile\npublic class ThriftHttpResponseHandler\nimplements FutureCallback<ThriftResponse>\nissue is that ThriftResponse doesn't implement com.facebook.presto.server.smile.BaseResponse which sits in presto-main .\nWe can maybe have a follow up task to move BaseResponse upto airlift and then make ThriftResponse implement BaseResponse to have similar handling.", "url": "https://github.com/prestodb/presto/pull/15350#discussion_r513873900", "createdAt": "2020-10-29T01:58:00Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/thrift/ThriftHttpResponseHandler.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.thrift;\n+\n+import com.facebook.airlift.http.client.HttpStatus;\n+import com.facebook.airlift.http.client.thrift.ThriftResponse;\n+import com.facebook.presto.server.ServiceUnavailableException;\n+import com.facebook.presto.server.SimpleHttpResponseCallback;\n+import com.facebook.presto.server.SimpleHttpResponseHandlerStats;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.util.concurrent.FutureCallback;\n+\n+import java.net.URI;\n+\n+import static com.facebook.airlift.http.client.HttpStatus.OK;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ThriftHttpResponseHandler<T>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NTk5OQ=="}, "originalCommit": {"oid": "72b53ebd93f5ddf6912334e6bc0f6e28ef88d274"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3331, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}