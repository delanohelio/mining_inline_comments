{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTgxNTM4", "number": 14800, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoxMjoxNVrOENCkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyOToyNFrOENbslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTA4OTU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoxMjoxNVrOGvgKaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoyNTo1NVrOGvgk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MzIwOQ==", "bodyText": "We usually keep the type from getter method consistent to the setter method.\nWhat about return String here and do the JSON parse in WarnOnScanWithoutPartitionPredicate ?", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r452463209", "createdAt": "2020-07-09T20:12:15Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -1290,4 +1295,22 @@ public FeaturesConfig setOptimizeNullsInJoin(boolean optimizeNullsInJoin)\n         this.optimizeNullsInJoin = optimizeNullsInJoin;\n         return this;\n     }\n+\n+    public List<List<String>> getPartitionKeysToWarnOnNoFiltering()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861301c5fe4ecc6d46e4ad6171fbe5080a17f630"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MDAwNw==", "bodyText": "Having a List<List<>> for configuration looks too complicated ..\nAs discussed offline, let's focus on simple use case. The semantic can be:\nHere is a list of common partitioned columns.  If the table is partitioned on any of these columns, \nwe expect the query need to have filter on at least one of those partitioned columns.\n\nAnd in most companies in Bay Area, this will just be set to [ds] .", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r452470007", "createdAt": "2020-07-09T20:25:55Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -1290,4 +1295,22 @@ public FeaturesConfig setOptimizeNullsInJoin(boolean optimizeNullsInJoin)\n         this.optimizeNullsInJoin = optimizeNullsInJoin;\n         return this;\n     }\n+\n+    public List<List<String>> getPartitionKeysToWarnOnNoFiltering()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MzIwOQ=="}, "originalCommit": {"oid": "861301c5fe4ecc6d46e4ad6171fbe5080a17f630"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDk4OTkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1MzoyMFrOGwFUyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowMTo1MlrOGwFiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjA3Mw==", "bodyText": "nit: I think we usually do toImmutableList() and toImmutableSet() whenever feasible.\nAlso I personally prefer to put new lines for stream APIs, e.g.\n            List<String> partitionKey = tableHandle.getPartitionColumns().stream()\n                    .map(HiveColumnHandle::getName)\n                    .collect(toImmutableList());", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453072073", "createdAt": "2020-07-10T20:53:20Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -3030,6 +3034,19 @@ public void commit()\n         metastore.commit();\n     }\n \n+    @Override\n+    public PartitioningFilterCoverage getPartitioningFilterCoverage(ConnectorTableLayoutHandle connectorTableLayoutHandle, Set<String> relevantPartitionColumns)\n+    {\n+        HiveTableLayoutHandle tableHandle = (HiveTableLayoutHandle) connectorTableLayoutHandle;\n+        List<String> partitionKey = tableHandle.getPartitionColumns().stream().map(HiveColumnHandle::getName).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NTU1MQ==", "bodyText": "Actually I think we don't need this partitionKey anymore (we can directly compute relevantColumns )", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453075551", "createdAt": "2020-07-10T21:01:52Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -3030,6 +3034,19 @@ public void commit()\n         metastore.commit();\n     }\n \n+    @Override\n+    public PartitioningFilterCoverage getPartitioningFilterCoverage(ConnectorTableLayoutHandle connectorTableLayoutHandle, Set<String> relevantPartitionColumns)\n+    {\n+        HiveTableLayoutHandle tableHandle = (HiveTableLayoutHandle) connectorTableLayoutHandle;\n+        List<String> partitionKey = tableHandle.getPartitionColumns().stream().map(HiveColumnHandle::getName).collect(toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjA3Mw=="}, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDk5MDEwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1MzoyNVrOGwFU6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1MzoyNVrOGwFU6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjEwNQ==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453072105", "createdAt": "2020-07-10T20:53:25Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -3030,6 +3034,19 @@ public void commit()\n         metastore.commit();\n     }\n \n+    @Override\n+    public PartitioningFilterCoverage getPartitioningFilterCoverage(ConnectorTableLayoutHandle connectorTableLayoutHandle, Set<String> relevantPartitionColumns)\n+    {\n+        HiveTableLayoutHandle tableHandle = (HiveTableLayoutHandle) connectorTableLayoutHandle;\n+        List<String> partitionKey = tableHandle.getPartitionColumns().stream().map(HiveColumnHandle::getName).collect(toList());\n+        Set<String> relevantColumns = partitionKey.stream().filter(relevantPartitionColumns::contains).collect(toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDk5ODM0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/PartitioningFilterCoverage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1Njo0NFrOGwFaAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxNDozM1rOGwF0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzQxMA==", "bodyText": "Note Hive partition is not a \"partitioning\" at engine level. Presto engine \"partitioning\" corresponds to Hive bucket.  Hive partition filter is modeled as table layout selection in Presto today :(\nWhat about TableLayoutFilterCoverage?  cc @rschlussel", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453073410", "createdAt": "2020-07-10T20:56:44Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/PartitioningFilterCoverage.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+/**\n+ * Result indicating whether a set of filters on partition columns retricts the range of values\n+ * on the columns\n+ */\n+public enum PartitioningFilterCoverage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MDI0MQ==", "bodyText": "Yes, I prefer TableLayoutFilterCoverage", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453080241", "createdAt": "2020-07-10T21:14:33Z", "author": {"login": "rschlussel"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/PartitioningFilterCoverage.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+/**\n+ * Result indicating whether a set of filters on partition columns retricts the range of values\n+ * on the columns\n+ */\n+public enum PartitioningFilterCoverage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzQxMA=="}, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAwMTE1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/PartitioningFilterCoverage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1Nzo0NlrOGwFbvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1Nzo0NlrOGwFbvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3Mzg1NA==", "bodyText": "nit: PARTIAL is a bit vague. The purpose of this class is to provide Three-valued logic right? (True, False, Null). What about just put them as True, False and Unknown?", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453073854", "createdAt": "2020-07-10T20:57:46Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/PartitioningFilterCoverage.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+/**\n+ * Result indicating whether a set of filters on partition columns retricts the range of values\n+ * on the columns\n+ */\n+public enum PartitioningFilterCoverage\n+{\n+    // No columns are restricted\n+    NONE,\n+    // Unknown, not checked, or inapplicable\n+    UNKNOWN,\n+    // At least some columns are restricted\n+    PARTIAL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAwNDE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1ODo1MVrOGwFdqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0NDozOFrOGwzEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDM0NA==", "bodyText": "similarly, what about table-layout-filter-columns-to-warn-on-no-filtering? cc @rschlussel", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453074344", "createdAt": "2020-07-10T20:58:51Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -1290,4 +1292,16 @@ public FeaturesConfig setOptimizeNullsInJoin(boolean optimizeNullsInJoin)\n         this.optimizeNullsInJoin = optimizeNullsInJoin;\n         return this;\n     }\n+\n+    public List<String> getPartitionColumnsToWarnOnNoFiltering()\n+    {\n+        return partitionColumnsToWarnOnNoFiltering;\n+    }\n+\n+    @Config(\"partition-columns-to-warn-on-no-filtering\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758bcb2786ce5017b28fcddcf4b0fd5f3b05f158"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NzYyNQ==", "bodyText": "I would call this: warn-on-no-table-layout-filter", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453077625", "createdAt": "2020-07-10T21:07:14Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -1290,4 +1292,16 @@ public FeaturesConfig setOptimizeNullsInJoin(boolean optimizeNullsInJoin)\n         this.optimizeNullsInJoin = optimizeNullsInJoin;\n         return this;\n     }\n+\n+    public List<String> getPartitionColumnsToWarnOnNoFiltering()\n+    {\n+        return partitionColumnsToWarnOnNoFiltering;\n+    }\n+\n+    @Config(\"partition-columns-to-warn-on-no-filtering\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDM0NA=="}, "originalCommit": {"oid": "758bcb2786ce5017b28fcddcf4b0fd5f3b05f158"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMTQ2Ng==", "bodyText": "Does table layout mean anything at all to the end user? I think that is mixing up implementation details with user visible concepts?", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453821466", "createdAt": "2020-07-13T17:44:38Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -1290,4 +1292,16 @@ public FeaturesConfig setOptimizeNullsInJoin(boolean optimizeNullsInJoin)\n         this.optimizeNullsInJoin = optimizeNullsInJoin;\n         return this;\n     }\n+\n+    public List<String> getPartitionColumnsToWarnOnNoFiltering()\n+    {\n+        return partitionColumnsToWarnOnNoFiltering;\n+    }\n+\n+    @Config(\"partition-columns-to-warn-on-no-filtering\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDM0NA=="}, "originalCommit": {"oid": "758bcb2786ce5017b28fcddcf4b0fd5f3b05f158"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAwNTI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/WarnOnScanWithoutPartitionPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1OToyMVrOGwFebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1OToyMVrOGwFebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDU0Mg==", "bodyText": "nit: I am not a big fan of Yoda conditions.", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453074542", "createdAt": "2020-07-10T20:59:21Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/WarnOnScanWithoutPartitionPredicate.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.PartitioningFilterCoverage;\n+import com.facebook.presto.spi.PrestoWarning;\n+import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.PartitioningFilterCoverage.NONE;\n+import static com.facebook.presto.spi.StandardWarningCode.PERFORMANCE_WARNING;\n+import static com.facebook.presto.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+\n+public final class WarnOnScanWithoutPartitionPredicate\n+        implements PlanChecker.Checker\n+{\n+    private final Set<String> partitionKeysToWarnOnNoFiltering;\n+\n+    WarnOnScanWithoutPartitionPredicate(FeaturesConfig featuresConfig)\n+    {\n+        partitionKeysToWarnOnNoFiltering = ImmutableSet.copyOf(featuresConfig.getPartitionColumnsToWarnOnNoFiltering());\n+    }\n+\n+    @Override\n+    public void validate(PlanNode plan, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        for (TableScanNode scan : searchFrom(plan)\n+                .where(TableScanNode.class::isInstance)\n+                .<TableScanNode>findAll()) {\n+            TableHandle tableHandle = scan.getTable();\n+            PartitioningFilterCoverage partitioningFilterCoverage = metadata.getPartitioningFilterCoverage(session, tableHandle, partitionKeysToWarnOnNoFiltering);\n+            if (NONE == partitioningFilterCoverage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758bcb2786ce5017b28fcddcf4b0fd5f3b05f158"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAyODQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowODo0M1rOGwFsfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowODo0M1rOGwFsfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3ODE0Mw==", "bodyText": "nit: This line's getting long. it's probably about time to split this into one line per-argument.", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453078143", "createdAt": "2020-07-10T21:08:43Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java", "diffHunk": "@@ -188,7 +194,7 @@ public Plan getLogicalPlan(Session session, Statement statement, List<Expression\n         // analyze statement\n         Analysis analysis = analyze(session, statement, parameters, warningCollector);\n         // plan statement\n-        LogicalPlanner logicalPlanner = new LogicalPlanner(true, session, planOptimizers, idAllocator, metadata, sqlParser, statsCalculator, costCalculator, warningCollector);\n+        LogicalPlanner logicalPlanner = new LogicalPlanner(true, session, planOptimizers, idAllocator, metadata, sqlParser, statsCalculator, costCalculator, warningCollector, planChecker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758bcb2786ce5017b28fcddcf4b0fd5f3b05f158"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIwNzI1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyOToyNFrOGwHWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMDo0OVrOGwzpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNTI0OQ==", "bodyText": "hmm... this basically says \"the table is not partitioned; or it's not partitioned on known columns (e.g. ds)\".\nReturning UNKNOWN for this is a bit weird. Because we know there is no violation / concern for sure. But I also don't have a good suggestions.\nSee if @rschlussel has any thought about how the enum values in PartitioningFilterCoverage should be . Otherwise, I am fine to keep it as is :)", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453105249", "createdAt": "2020-07-10T22:29:24Z", "author": {"login": "wenleix"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -3030,6 +3034,19 @@ public void commit()\n         metastore.commit();\n     }\n \n+    @Override\n+    public PartitioningFilterCoverage getPartitioningFilterCoverage(ConnectorTableLayoutHandle connectorTableLayoutHandle, Set<String> relevantPartitionColumns)\n+    {\n+        HiveTableLayoutHandle tableHandle = (HiveTableLayoutHandle) connectorTableLayoutHandle;\n+        List<String> partitionKey = tableHandle.getPartitionColumns().stream().map(HiveColumnHandle::getName).collect(toList());\n+        Set<String> relevantColumns = partitionKey.stream().filter(relevantPartitionColumns::contains).collect(toSet());\n+        if (relevantColumns.isEmpty()) {\n+            return UNKNOWN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTA0MQ==", "bodyText": "Unknown is pulling double duty as both unknown (not implemented by the connector) and not applicable (we know it's fine).\nWe could add a fourth value, the question is does that make the API easier to consume when there is nothing that leverages the distinction between unknown and not applicable.", "url": "https://github.com/prestodb/presto/pull/14800#discussion_r453831041", "createdAt": "2020-07-13T18:00:49Z", "author": {"login": "aweisberg"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -3030,6 +3034,19 @@ public void commit()\n         metastore.commit();\n     }\n \n+    @Override\n+    public PartitioningFilterCoverage getPartitioningFilterCoverage(ConnectorTableLayoutHandle connectorTableLayoutHandle, Set<String> relevantPartitionColumns)\n+    {\n+        HiveTableLayoutHandle tableHandle = (HiveTableLayoutHandle) connectorTableLayoutHandle;\n+        List<String> partitionKey = tableHandle.getPartitionColumns().stream().map(HiveColumnHandle::getName).collect(toList());\n+        Set<String> relevantColumns = partitionKey.stream().filter(relevantPartitionColumns::contains).collect(toSet());\n+        if (relevantColumns.isEmpty()) {\n+            return UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNTI0OQ=="}, "originalCommit": {"oid": "7595fcbcb85d59dd6b1f73e9b29d177f532f12a7"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2331, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}