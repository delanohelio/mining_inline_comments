{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDU5NzAy", "number": 14456, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOToxOVrOD4MG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMzo0M1rOD4QMgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ1MjA3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOToxOVrOGO4jRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOToxOVrOGO4jRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1OTc4Mg==", "bodyText": "final", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418259782", "createdAt": "2020-04-30T20:09:19Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -75,6 +78,7 @@\n     private final GeneratedPql brokerPql;\n     private final PinotConfig pinotConfig;\n     private final List<PinotColumnHandle> columnHandles;\n+    private List<PinotColumnHandle> expectedHandles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ3NzMwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNzoyNFrOGO4zUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNzoyNFrOGO4zUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Mzg5MQ==", "bodyText": "keep all params for format in the same line or one param each line.", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418263891", "createdAt": "2020-04-30T20:17:24Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -169,14 +178,19 @@ private void setValuesForGroupby(\n             JsonNode group,\n             String[] values)\n     {\n+        requireNonNull(group, \"Expected valid group\");\n+        requireNonNull(values, \"Expected valid values in group by\");\n+        Preconditions.checkState(\n+                blockBuilders.size() == values.length + group.size(),\n+                String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ3OTk4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODoxMFrOGO40_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODoxMFrOGO40_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDMxOA==", "bodyText": "private", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418264318", "createdAt": "2020-04-30T20:18:10Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +430,60 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    static class BlockAndTypeBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4MTg3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODo0MVrOGO42JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODo0MVrOGO42JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDYxMg==", "bodyText": "expectedColumnIndex", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418264612", "createdAt": "2020-04-30T20:18:41Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +430,60 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // map the expected column handle to the actual handle\n+            int[] expectedToActual = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < expectedToActual.length; ++i) {\n+                expectedToActual[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();\n+            columnTypes = new ArrayList<>();\n+\n+            for (int expectedColIdx : brokerPql.getExpectedColumnIndices()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4MjY5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODo1NFrOGO42nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODo1NFrOGO42nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDczMg==", "bodyText": "actualColumnIndex", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418264732", "createdAt": "2020-04-30T20:18:54Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +430,60 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // map the expected column handle to the actual handle\n+            int[] expectedToActual = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < expectedToActual.length; ++i) {\n+                expectedToActual[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();\n+            columnTypes = new ArrayList<>();\n+\n+            for (int expectedColIdx : brokerPql.getExpectedColumnIndices()) {\n+                int actualColIdx = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4MzU2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxOToxMlrOGO43JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxOToxMlrOGO43JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDg2OA==", "bodyText": "static import checkState", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418264868", "createdAt": "2020-04-30T20:19:12Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +430,60 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4NDg4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxOTozNFrOGO439A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMzoxNVrOGO-3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTA3Ng==", "bodyText": "move .stream() to the previous line", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418265076", "createdAt": "2020-04-30T20:19:34Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -85,6 +84,10 @@ public PinotSegmentPageSource(\n         this.pinotQueryClient = requireNonNull(pinotQueryClient, \"pinotQueryClient is null\");\n         this.columnHandles = requireNonNull(columnHandles, \"columnHandles is null\");\n         this.session = requireNonNull(session, \"session is null\");\n+        this.columnTypes = columnHandles\n+                .stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzI1NQ==", "bodyText": "not addressed?", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363255", "createdAt": "2020-05-01T00:33:15Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -85,6 +84,10 @@ public PinotSegmentPageSource(\n         this.pinotQueryClient = requireNonNull(pinotQueryClient, \"pinotQueryClient is null\");\n         this.columnHandles = requireNonNull(columnHandles, \"columnHandles is null\");\n         this.session = requireNonNull(session, \"session is null\");\n+        this.columnTypes = columnHandles\n+                .stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTA3Ng=="}, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4NjAwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxOTo1NlrOGO44pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMzo0N1rOGO-4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTI1NQ==", "bodyText": "I would name them expectedColumns and actualColumns", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418265255", "createdAt": "2020-04-30T20:19:56Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -99,6 +102,12 @@ private static void checkExceptions(DataTable dataTable, PinotSplit split)\n         if (!exceptions.isEmpty()) {\n             throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n         }\n+        int columnsExpected = split.getExpectedColumnHandles().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzQwMw==", "bodyText": "not addressed?", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363403", "createdAt": "2020-05-01T00:33:47Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -99,6 +102,12 @@ private static void checkExceptions(DataTable dataTable, PinotSplit split)\n         if (!exceptions.isEmpty()) {\n             throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n         }\n+        int columnsExpected = split.getExpectedColumnHandles().size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTI1NQ=="}, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4Njc1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDoxNVrOGO45JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDoxNVrOGO45JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTM4MQ==", "bodyText": "one param per line for both PinotException() and format()", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418265381", "createdAt": "2020-04-30T20:20:15Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -99,6 +102,12 @@ private static void checkExceptions(DataTable dataTable, PinotSplit split)\n         if (!exceptions.isEmpty()) {\n             throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n         }\n+        int columnsExpected = split.getExpectedColumnHandles().size();\n+        int columnsActual = dataTable.getDataSchema().size();\n+        if (columnsActual != columnsExpected) {\n+            throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4NzY1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDoyOVrOGO45rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNDoxMVrOGO-4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTUxOA==", "bodyText": "index", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418265518", "createdAt": "2020-04-30T20:20:29Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);\n+            int idxReturnedByPinot = expectedColumnHandles.indexOf(handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzU3Nw==", "bodyText": "not addressed?", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363577", "createdAt": "2020-05-01T00:34:11Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);\n+            int idxReturnedByPinot = expectedColumnHandles.indexOf(handle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTUxOA=="}, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4Nzg5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDozNVrOGO451g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNDoxNFrOGO-4xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTU1OA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418265558", "createdAt": "2020-04-30T20:20:35Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);\n+            int idxReturnedByPinot = expectedColumnHandles.indexOf(handle);\n+            if (idxReturnedByPinot < 0) {\n+                throw new PinotException(PinotErrorCode.PINOT_INVALID_PQL_GENERATED, split.getSegmentPql(),\n+                        String.format(\"Expected column handle %s to be present in the handles %s corresponding to the segment PQL\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzU5MA==", "bodyText": "not addressed?", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363590", "createdAt": "2020-05-01T00:34:14Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);\n+            int idxReturnedByPinot = expectedColumnHandles.indexOf(handle);\n+            if (idxReturnedByPinot < 0) {\n+                throw new PinotException(PinotErrorCode.PINOT_INVALID_PQL_GENERATED, split.getSegmentPql(),\n+                        String.format(\"Expected column handle %s to be present in the handles %s corresponding to the segment PQL\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTU1OA=="}, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ5OTA3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDowOFrOGO5A1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDowOFrOGO5A1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzM0OA==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267348", "createdAt": "2020-04-30T20:24:08Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "diffHunk": "@@ -161,26 +190,60 @@ PqlParsedInfo getBasicInfoFromPql(String pqlResponse)\n                                 \"    \\\"segmentStatistics\\\": [],\\n\" +\n                                 \"    \\\"traceInfo\\\": {}\\n\" +\n                                 \"}\",\n-                        ImmutableList.of(BIGINT, BIGINT, VARCHAR, VARCHAR, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT), Optional.empty()}\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        Optional.empty()}\n         };\n     }\n \n     @Test(dataProvider = \"pqlResponses\")\n-    public void testPopulateFromPql(String pql, String pqlResponse, List<Type> types, Optional<Class<? extends PrestoException>> expectedError)\n+    public void testPopulateFromPql(String pql, String pqlResponse, List<PinotColumnHandle> actualHandles,\n+            List<Integer> expectedColumnIndices,\n+            List<PinotColumnHandle> expectedColumnHandles,\n+            Optional<Class<? extends PrestoException>> expectedError)\n             throws IOException\n     {\n         PqlParsedInfo pqlParsedInfo = getBasicInfoFromPql(pqlResponse);\n-        ImmutableList.Builder<BlockBuilder> blockBuilders = ImmutableList.builder();\n-        PageBuilder pageBuilder = new PageBuilder(types);\n-        PinotBrokerPageSource pageSource = getPinotBrokerPageSource();\n-        for (int i = 0; i < types.size(); i++) {\n-            blockBuilders.add(pageBuilder.getBlockBuilder(i));\n+        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator.GeneratedPql(\n+                pinotTable.getTableName(),\n+                pql,\n+                expectedColumnIndices,\n+                pqlParsedInfo.groupByColumns,\n+                false,\n+                false);\n+        PinotBrokerPageSource pageSource = new PinotBrokerPageSource(\n+                pinotConfig,\n+                new TestingConnectorSession(ImmutableList.of()),\n+                generatedPql, actualHandles, expectedColumnHandles, new MockPinotClusterInfoFetcher(pinotConfig), objectMapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ5OTQxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDoxNlrOGO5BEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDoxNlrOGO5BEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzQxMA==", "bodyText": "numNonNullTypes++", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267410", "createdAt": "2020-04-30T20:24:16Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "diffHunk": "@@ -161,26 +190,60 @@ PqlParsedInfo getBasicInfoFromPql(String pqlResponse)\n                                 \"    \\\"segmentStatistics\\\": [],\\n\" +\n                                 \"    \\\"traceInfo\\\": {}\\n\" +\n                                 \"}\",\n-                        ImmutableList.of(BIGINT, BIGINT, VARCHAR, VARCHAR, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT), Optional.empty()}\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        Optional.empty()}\n         };\n     }\n \n     @Test(dataProvider = \"pqlResponses\")\n-    public void testPopulateFromPql(String pql, String pqlResponse, List<Type> types, Optional<Class<? extends PrestoException>> expectedError)\n+    public void testPopulateFromPql(String pql, String pqlResponse, List<PinotColumnHandle> actualHandles,\n+            List<Integer> expectedColumnIndices,\n+            List<PinotColumnHandle> expectedColumnHandles,\n+            Optional<Class<? extends PrestoException>> expectedError)\n             throws IOException\n     {\n         PqlParsedInfo pqlParsedInfo = getBasicInfoFromPql(pqlResponse);\n-        ImmutableList.Builder<BlockBuilder> blockBuilders = ImmutableList.builder();\n-        PageBuilder pageBuilder = new PageBuilder(types);\n-        PinotBrokerPageSource pageSource = getPinotBrokerPageSource();\n-        for (int i = 0; i < types.size(); i++) {\n-            blockBuilders.add(pageBuilder.getBlockBuilder(i));\n+        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator.GeneratedPql(\n+                pinotTable.getTableName(),\n+                pql,\n+                expectedColumnIndices,\n+                pqlParsedInfo.groupByColumns,\n+                false,\n+                false);\n+        PinotBrokerPageSource pageSource = new PinotBrokerPageSource(\n+                pinotConfig,\n+                new TestingConnectorSession(ImmutableList.of()),\n+                generatedPql, actualHandles, expectedColumnHandles, new MockPinotClusterInfoFetcher(pinotConfig), objectMapper);\n+        PinotBrokerPageSource.BlockAndTypeBuilder blockAndTypeBuilder = new PinotBrokerPageSource.BlockAndTypeBuilder(actualHandles, generatedPql, expectedColumnHandles);\n+\n+        validateExpectedColumnIndices(expectedColumnIndices, expectedColumnHandles);\n+        List<BlockBuilder> columnBlockBuilders = blockAndTypeBuilder.getColumnBlockBuilders();\n+        List<Type> columnTypes = blockAndTypeBuilder.getColumnTypes();\n+\n+        assertEquals(columnTypes.size(), columnBlockBuilders.size());\n+\n+        int numNonNullTypes = 0;\n+        for (int i = 0; i < columnTypes.size(); ++i) {\n+            Type type = columnTypes.get(i);\n+            BlockBuilder builder = columnBlockBuilders.get(i);\n+            assertEquals(type == null, builder == null);\n+            if (type != null) {\n+                ++numNonNullTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ5OTYwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDoyMVrOGO5BLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDoyMVrOGO5BLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzQzOA==", "bodyText": "i++", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267438", "createdAt": "2020-04-30T20:24:21Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "diffHunk": "@@ -161,26 +190,60 @@ PqlParsedInfo getBasicInfoFromPql(String pqlResponse)\n                                 \"    \\\"segmentStatistics\\\": [],\\n\" +\n                                 \"    \\\"traceInfo\\\": {}\\n\" +\n                                 \"}\",\n-                        ImmutableList.of(BIGINT, BIGINT, VARCHAR, VARCHAR, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT, BIGINT), Optional.empty()}\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n+                        ImmutableList.of(bigint(\"activeTrips\"), bigint(\"numDrivers\"), varchar(\"region\"), bigint(\"rowtime\"), secondsSinceEpoch, fraction(\"utilization\"), bigint(\"utilizedDrivers\"), bigint(\"vehicleViewId\"), bigint(\"windowEnd\"), bigint(\"windowStart\")),\n+                        Optional.empty()}\n         };\n     }\n \n     @Test(dataProvider = \"pqlResponses\")\n-    public void testPopulateFromPql(String pql, String pqlResponse, List<Type> types, Optional<Class<? extends PrestoException>> expectedError)\n+    public void testPopulateFromPql(String pql, String pqlResponse, List<PinotColumnHandle> actualHandles,\n+            List<Integer> expectedColumnIndices,\n+            List<PinotColumnHandle> expectedColumnHandles,\n+            Optional<Class<? extends PrestoException>> expectedError)\n             throws IOException\n     {\n         PqlParsedInfo pqlParsedInfo = getBasicInfoFromPql(pqlResponse);\n-        ImmutableList.Builder<BlockBuilder> blockBuilders = ImmutableList.builder();\n-        PageBuilder pageBuilder = new PageBuilder(types);\n-        PinotBrokerPageSource pageSource = getPinotBrokerPageSource();\n-        for (int i = 0; i < types.size(); i++) {\n-            blockBuilders.add(pageBuilder.getBlockBuilder(i));\n+        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator.GeneratedPql(\n+                pinotTable.getTableName(),\n+                pql,\n+                expectedColumnIndices,\n+                pqlParsedInfo.groupByColumns,\n+                false,\n+                false);\n+        PinotBrokerPageSource pageSource = new PinotBrokerPageSource(\n+                pinotConfig,\n+                new TestingConnectorSession(ImmutableList.of()),\n+                generatedPql, actualHandles, expectedColumnHandles, new MockPinotClusterInfoFetcher(pinotConfig), objectMapper);\n+        PinotBrokerPageSource.BlockAndTypeBuilder blockAndTypeBuilder = new PinotBrokerPageSource.BlockAndTypeBuilder(actualHandles, generatedPql, expectedColumnHandles);\n+\n+        validateExpectedColumnIndices(expectedColumnIndices, expectedColumnHandles);\n+        List<BlockBuilder> columnBlockBuilders = blockAndTypeBuilder.getColumnBlockBuilders();\n+        List<Type> columnTypes = blockAndTypeBuilder.getColumnTypes();\n+\n+        assertEquals(columnTypes.size(), columnBlockBuilders.size());\n+\n+        int numNonNullTypes = 0;\n+        for (int i = 0; i < columnTypes.size(); ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMTA2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDo0N1rOGO5CDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDo0N1rOGO5CDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzY2Mw==", "bodyText": "i -> expectedColumnIndex", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267663", "createdAt": "2020-04-30T20:24:47Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "diffHunk": "@@ -190,16 +253,22 @@ public void testPopulateFromPql(String pql, String pqlResponse, List<Type> types\n         Optional<String> errorString = thrown.map(e -> Throwables.getStackTraceAsString(e));\n         assertEquals(thrownType, expectedError, String.format(\"Expected error %s, but got error of type %s: %s\", expectedError, thrownType, errorString));\n         if (!expectedError.isPresent()) {\n-            assertEquals(types.size(), pqlParsedInfo.columns);\n+            assertEquals(expectedColumnIndices.size(), pqlParsedInfo.columns);\n             assertEquals(rows, pqlParsedInfo.rows);\n         }\n     }\n \n-    private PinotBrokerPageSource getPinotBrokerPageSource()\n+    private void validateExpectedColumnIndices(List<Integer> expectedColumnIndices, List<PinotColumnHandle> expectedColumnHandles)\n     {\n-        List<PinotColumnHandle> pinotColumnHandles = ImmutableList.of(regionId, fare, city, fare, secondsSinceEpoch);\n-        PinotConfig pinotConfig = new PinotConfig();\n-        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator.GeneratedPql(pinotTable.getTableName(), String.format(\"SELECT %s, %s FROM %s LIMIT %d\", city.getColumnName(), regionId.getColumnName(), pinotTable.getTableName(), pinotConfig.getLimitLargeForSegment()), ImmutableList.of(0, 1), 0, false, true);\n-        return new PinotBrokerPageSource(pinotConfig, new TestingConnectorSession(ImmutableList.of()), generatedPql, pinotColumnHandles, new MockPinotClusterInfoFetcher(pinotConfig), objectMapper);\n+        int numValid = 0;\n+        Set<Integer> uniqueIndices = new HashSet<>();\n+        for (int i : expectedColumnIndices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMTUwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDo1NVrOGO5CVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDo1NVrOGO5CVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzczNA==", "bodyText": "numValid++", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267734", "createdAt": "2020-04-30T20:24:55Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotBrokerPageSource.java", "diffHunk": "@@ -190,16 +253,22 @@ public void testPopulateFromPql(String pql, String pqlResponse, List<Type> types\n         Optional<String> errorString = thrown.map(e -> Throwables.getStackTraceAsString(e));\n         assertEquals(thrownType, expectedError, String.format(\"Expected error %s, but got error of type %s: %s\", expectedError, thrownType, errorString));\n         if (!expectedError.isPresent()) {\n-            assertEquals(types.size(), pqlParsedInfo.columns);\n+            assertEquals(expectedColumnIndices.size(), pqlParsedInfo.columns);\n             assertEquals(rows, pqlParsedInfo.rows);\n         }\n     }\n \n-    private PinotBrokerPageSource getPinotBrokerPageSource()\n+    private void validateExpectedColumnIndices(List<Integer> expectedColumnIndices, List<PinotColumnHandle> expectedColumnHandles)\n     {\n-        List<PinotColumnHandle> pinotColumnHandles = ImmutableList.of(regionId, fare, city, fare, secondsSinceEpoch);\n-        PinotConfig pinotConfig = new PinotConfig();\n-        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator.GeneratedPql(pinotTable.getTableName(), String.format(\"SELECT %s, %s FROM %s LIMIT %d\", city.getColumnName(), regionId.getColumnName(), pinotTable.getTableName(), pinotConfig.getLimitLargeForSegment()), ImmutableList.of(0, 1), 0, false, true);\n-        return new PinotBrokerPageSource(pinotConfig, new TestingConnectorSession(ImmutableList.of()), generatedPql, pinotColumnHandles, new MockPinotClusterInfoFetcher(pinotConfig), objectMapper);\n+        int numValid = 0;\n+        Set<Integer> uniqueIndices = new HashSet<>();\n+        for (int i : expectedColumnIndices) {\n+            assertTrue(i == -1 || i >= 0 && i < expectedColumnHandles.size());\n+            if (i >= 0) {\n+                ++numValid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMjE5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTowOFrOGO5CzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTowOFrOGO5CzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Nzg1Mg==", "bodyText": "i--", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267852", "createdAt": "2020-04-30T20:25:08Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentPageSource.java", "diffHunk": "@@ -327,6 +327,47 @@ private DataTable createDataTableWithAllTypes()\n         }\n     }\n \n+    @Test\n+    public void testPrunedColumns()\n+    {\n+        PinotSessionProperties pinotSessionProperties = new PinotSessionProperties(pinotConfig);\n+        ConnectorSession session = new TestingConnectorSession(pinotSessionProperties.getSessionProperties());\n+        List<DataTable> dataTables = IntStream.range(0, 3).mapToObj(i -> createDataTableWithAllTypes()).collect(toImmutableList());\n+        PinotScatterGatherQueryClient mockPinotQueryClient = new MockPinotScatterGatherQueryClient(new PinotScatterGatherQueryClient.Config(\n+                pinotConfig.getIdleTimeout().toMillis(),\n+                pinotConfig.getThreadPoolSize(),\n+                pinotConfig.getMinConnectionsPerServer(),\n+                pinotConfig.getMaxBacklogPerServer(),\n+                pinotConfig.getMaxConnectionsPerServer()), dataTables);\n+        List<PinotColumnHandle> expectedColumnHandles = createPinotColumnHandlesWithAllTypes();\n+        PinotSplit mockPinotSplit = new PinotSplit(pinotConnectorId.toString(), PinotSplit.SplitType.SEGMENT, expectedColumnHandles, Optional.empty(), Optional.of(\"blah\"), ImmutableList.of(\"seg\"), Optional.of(\"host\"));\n+\n+        ImmutableList.Builder<Integer> columnsSurvivingBuilder = ImmutableList.builder();\n+        for (int i = expectedColumnHandles.size() - 1; i >= 0; --i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMjY5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNToxOVrOGO5DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNToxOVrOGO5DGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzkzMQ==", "bodyText": "k++", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418267931", "createdAt": "2020-04-30T20:25:19Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSegmentPageSource.java", "diffHunk": "@@ -327,6 +327,47 @@ private DataTable createDataTableWithAllTypes()\n         }\n     }\n \n+    @Test\n+    public void testPrunedColumns()\n+    {\n+        PinotSessionProperties pinotSessionProperties = new PinotSessionProperties(pinotConfig);\n+        ConnectorSession session = new TestingConnectorSession(pinotSessionProperties.getSessionProperties());\n+        List<DataTable> dataTables = IntStream.range(0, 3).mapToObj(i -> createDataTableWithAllTypes()).collect(toImmutableList());\n+        PinotScatterGatherQueryClient mockPinotQueryClient = new MockPinotScatterGatherQueryClient(new PinotScatterGatherQueryClient.Config(\n+                pinotConfig.getIdleTimeout().toMillis(),\n+                pinotConfig.getThreadPoolSize(),\n+                pinotConfig.getMinConnectionsPerServer(),\n+                pinotConfig.getMaxBacklogPerServer(),\n+                pinotConfig.getMaxConnectionsPerServer()), dataTables);\n+        List<PinotColumnHandle> expectedColumnHandles = createPinotColumnHandlesWithAllTypes();\n+        PinotSplit mockPinotSplit = new PinotSplit(pinotConnectorId.toString(), PinotSplit.SplitType.SEGMENT, expectedColumnHandles, Optional.empty(), Optional.of(\"blah\"), ImmutableList.of(\"seg\"), Optional.of(\"host\"));\n+\n+        ImmutableList.Builder<Integer> columnsSurvivingBuilder = ImmutableList.builder();\n+        for (int i = expectedColumnHandles.size() - 1; i >= 0; --i) {\n+            if (i % 2 == 0) {\n+                columnsSurvivingBuilder.add(i);\n+            }\n+        }\n+        List<Integer> columnsSurviving = columnsSurvivingBuilder.build();\n+        List<PinotColumnHandle> handlesSurviving = columnsSurviving.stream().map(expectedColumnHandles::get).collect(toImmutableList());\n+        PinotSegmentPageSource pinotSegmentPageSource = new PinotSegmentPageSource(session, pinotConfig, mockPinotQueryClient, mockPinotSplit, handlesSurviving);\n+\n+        for (int i = 0; i < dataTables.size(); ++i) {\n+            Page page = requireNonNull(pinotSegmentPageSource.getNextPage(), \"Expected a valid page\");\n+            Assert.assertEquals(page.getChannelCount(), columnsSurviving.size());\n+            for (int j = 0; j < columnsSurviving.size(); ++j) {\n+                Block block = page.getBlock(j);\n+                int originalColumnIndex = columnsSurviving.get(j);\n+                Type type = PinotColumnUtils.getPrestoTypeFromPinotType(getFieldSpec(\"dontcare\", ALL_TYPES.get(originalColumnIndex)), false, false);\n+                long maxHashCode = Long.MIN_VALUE;\n+                for (int k = 0; k < NUM_ROWS; ++k) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMzg1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTozNlrOGO5D1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTozNlrOGO5D1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2ODExOA==", "bodyText": "List", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418268118", "createdAt": "2020-04-30T20:25:36Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "diffHunk": "@@ -61,8 +61,10 @@ private void testSegmentSplitsHelperNoFilter(PinotTableHandle table, int segment\n         SessionHolder sessionHolder = new SessionHolder(pinotConfig);\n         PlanBuilder planBuilder = createPlanBuilder(sessionHolder);\n         PlanNode plan = tableScan(planBuilder, table, regionId, city, fare, secondsSinceEpoch);\n-        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator(pinotConfig, typeManager, functionMetadataManager, standardFunctionResolution).generate(plan, sessionHolder.getConnectorSession()).get().getGeneratedPql();\n-        PinotTableHandle pinotTableHandle = new PinotTableHandle(table.getConnectorId(), table.getSchemaName(), table.getTableName(), Optional.of(false), Optional.of(generatedPql));\n+        PinotQueryGenerator.PinotQueryGeneratorResult pinotQueryGeneratorResult = new PinotQueryGenerator(pinotConfig, typeManager, functionMetadataManager, standardFunctionResolution).generate(plan, sessionHolder.getConnectorSession()).get();\n+        ImmutableList<PinotColumnHandle> expectedHandles = ImmutableList.copyOf(pinotQueryGeneratorResult.getContext().getAssignments().values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwNDE5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTo0MFrOGO5EAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTo0MFrOGO5EAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2ODE2MQ==", "bodyText": "List", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418268161", "createdAt": "2020-04-30T20:25:40Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotSplitManager.java", "diffHunk": "@@ -74,8 +76,10 @@ private void testSegmentSplitsHelperWithFilter(PinotTableHandle table, int segme\n         SessionHolder sessionHolder = new SessionHolder(pinotConfig);\n         PlanBuilder planBuilder = createPlanBuilder(sessionHolder);\n         PlanNode plan = filter(planBuilder, tableScan(planBuilder, table, regionId, city, fare, secondsSinceEpoch), getRowExpression(\"city = 'Boston'\", sessionHolder));\n-        PinotQueryGenerator.GeneratedPql generatedPql = new PinotQueryGenerator(pinotConfig, typeManager, functionMetadataManager, standardFunctionResolution).generate(plan, sessionHolder.getConnectorSession()).get().getGeneratedPql();\n-        PinotTableHandle pinotTableHandle = new PinotTableHandle(table.getConnectorId(), table.getSchemaName(), table.getTableName(), Optional.of(false), Optional.of(generatedPql));\n+        PinotQueryGenerator.PinotQueryGeneratorResult pinotQueryGeneratorResult = new PinotQueryGenerator(pinotConfig, typeManager, functionMetadataManager, standardFunctionResolution).generate(plan, sessionHolder.getConnectorSession()).get();\n+        ImmutableList<PinotColumnHandle> expectedHandles = ImmutableList.copyOf(pinotQueryGeneratorResult.getContext().getAssignments().values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b6ac211288de923b8ea9bae454b6bd1b17754d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAyODYxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0Mzo0MVrOGO-BbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0Mzo0MVrOGO-BbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0OTQyMQ==", "bodyText": "s/expectedToActual/handleMapping/g", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418349421", "createdAt": "2020-04-30T23:43:41Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,61 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // map the expected column handle to the actual handle\n+            int[] expectedToActual = new int[expectedColumnHandles.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzMDQxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NDozNVrOGO-Cjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NDozNVrOGO-Cjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0OTcxMA==", "bodyText": "s/actualColumnIdx/columnIndex/g", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418349710", "createdAt": "2020-04-30T23:44:35Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,61 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // map the expected column handle to the actual handle\n+            int[] expectedToActual = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < expectedToActual.length; ++i) {\n+                expectedToActual[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();\n+            columnTypes = new ArrayList<>();\n+\n+            for (int expectedColumnIdx : brokerPql.getExpectedColumnIndices()) {\n+                int actualColumnIdx = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzMDk4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NDo1MFrOGO-C5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NDo1MFrOGO-C5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0OTc5Ng==", "bodyText": "s/expectedColumnIdx/expectedColumnIndex/g", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418349796", "createdAt": "2020-04-30T23:44:50Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,61 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // map the expected column handle to the actual handle\n+            int[] expectedToActual = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < expectedToActual.length; ++i) {\n+                expectedToActual[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();\n+            columnTypes = new ArrayList<>();\n+\n+            for (int expectedColumnIdx : brokerPql.getExpectedColumnIndices()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzNjQ1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0Nzo0MFrOGO-GFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0Nzo0MFrOGO-GFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDYxMw==", "bodyText": "s/columnHandleIdx/columnHandleIndex/g", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418350613", "createdAt": "2020-04-30T23:47:40Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzODQzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0ODo1MlrOGO-HVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0ODo1MlrOGO-HVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDkzNQ==", "bodyText": "static import PINOT_INVALID_PQL_GENERATED", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418350935", "createdAt": "2020-04-30T23:48:52Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -150,15 +159,22 @@ public Page getNextPage()\n             return null;\n         }\n         currentDataTable = dataTableList.pop();\n-\n+        List<PinotColumnHandle> expectedColumnHandles = split.getExpectedColumnHandles();\n         PageBuilder pageBuilder = new PageBuilder(columnTypes);\n         // Note that declared positions in the Page should be the same with number of rows in each Block\n         pageBuilder.declarePositions(currentDataTable.getDataTable().getNumberOfRows());\n         for (int columnHandleIdx = 0; columnHandleIdx < columnHandles.size(); columnHandleIdx++) {\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(columnHandleIdx);\n             Type columnType = columnTypes.get(columnHandleIdx);\n             // Write a block for each column in the original order.\n-            writeBlock(blockBuilder, columnType, columnHandleIdx);\n+            PinotColumnHandle handle = columnHandles.get(columnHandleIdx);\n+            int idxReturnedByPinot = expectedColumnHandles.indexOf(handle);\n+            if (idxReturnedByPinot < 0) {\n+                throw new PinotException(PinotErrorCode.PINOT_INVALID_PQL_GENERATED, split.getSegmentPql(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzOTI4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0OTowOVrOGO-HzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0OTowOVrOGO-HzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTA1Mg==", "bodyText": "static import PINOT_UNSUPPORTED_COLUMN_TYPE", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418351052", "createdAt": "2020-04-30T23:49:09Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -255,10 +267,10 @@ else if (javaType.equals(Slice.class)) {\n         }\n         else {\n             throw new PrestoException(\n-                    PINOT_UNSUPPORTED_COLUMN_TYPE,\n+                    PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA0MzgzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1MToyM1rOGO-Kdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1MToyM1rOGO-Kdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTczNQ==", "bodyText": "is handles used?", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418351735", "createdAt": "2020-04-30T23:51:23Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -358,7 +358,9 @@ else if (!groupByColumns.isEmpty()) {\n             query += \" \" + limitKeyWord + \" \" + queryLimit;\n         }\n \n-        List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, getAssignments());\n+        LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments = getAssignments();\n+        List<PinotColumnHandle> handles = ImmutableList.copyOf(assignments.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe1f46cb26cbfb139e0b099ea56ba00ed97d055"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzEwMzQ0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNToyNFrOGO-uNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNToyNFrOGO-uNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDg4NQ==", "bodyText": "static import checkState", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418360885", "createdAt": "2020-05-01T00:25:24Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -169,14 +178,21 @@ private void setValuesForGroupby(\n             JsonNode group,\n             String[] values)\n     {\n+        requireNonNull(group, \"Expected valid group\");\n+        requireNonNull(values, \"Expected valid values in group by\");\n+        Preconditions.checkState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzExODM5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMTo1OVrOGO-2CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMTo1OVrOGO-2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mjg4OA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418362888", "createdAt": "2020-05-01T00:31:59Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -274,6 +279,12 @@ private int issuePqlAndPopulate(\n         });\n     }\n \n+    private static String asText(JsonNode node)\n+    {\n+        Preconditions.checkState(node.isValueNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzExODg3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoxMlrOGO-2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoxMlrOGO-2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mjk0Nw==", "bodyText": "this.pageBuilder", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418362947", "createdAt": "2020-05-01T00:32:12Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,69 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzExOTQ4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoyNVrOGO-2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoyNVrOGO-2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzAyNA==", "bodyText": "this.columnBlockBuilders", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363024", "createdAt": "2020-05-01T00:32:25Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,69 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // The expectedColumnHandles are the handles corresponding to the generated PQL\n+            // However, the engine could end up requesting only a permutation/subset of those handles\n+            // during the actual scan\n+\n+            // Map the handles from planning time to the handles asked in the scan\n+            // so that we know which columns to discard.\n+            int[] handleMapping = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < handleMapping.length; ++i) {\n+                handleMapping[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzExOTU5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoyOFrOGO-2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMjoyOFrOGO-2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzA0MQ==", "bodyText": "this", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363041", "createdAt": "2020-05-01T00:32:28Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -421,4 +432,69 @@ public void close()\n     {\n         finished = true;\n     }\n+\n+    @VisibleForTesting\n+    static class BlockAndTypeBuilder\n+    {\n+        private final PageBuilder pageBuilder;\n+        private final List<BlockBuilder> columnBlockBuilders;\n+        private final List<Type> columnTypes;\n+\n+        public PageBuilder getPageBuilder()\n+        {\n+            return pageBuilder;\n+        }\n+\n+        public List<BlockBuilder> getColumnBlockBuilders()\n+        {\n+            return columnBlockBuilders;\n+        }\n+\n+        public List<Type> getColumnTypes()\n+        {\n+            return columnTypes;\n+        }\n+\n+        @VisibleForTesting\n+        public BlockAndTypeBuilder(List<PinotColumnHandle> columnHandles, GeneratedPql brokerPql, List<PinotColumnHandle> expectedColumnHandles)\n+        {\n+            // When we created the PQL, we came up with some column handles\n+            // however other optimizers post-pushdown can come in and prune/re-order the required column handles\n+            // so we need to map from the column handles the PQL corresponds to, to the actual column handles\n+            // needed in the scan.\n+\n+            List<Type> expectedTypes = columnHandles.stream()\n+                    .map(PinotColumnHandle::getDataType)\n+                    .collect(Collectors.toList());\n+            pageBuilder = new PageBuilder(expectedTypes);\n+            Preconditions.checkState(brokerPql.getExpectedColumnIndices().size() == expectedColumnHandles.size());\n+            Preconditions.checkState(expectedColumnHandles.size() >= columnHandles.size());\n+\n+            // The expectedColumnHandles are the handles corresponding to the generated PQL\n+            // However, the engine could end up requesting only a permutation/subset of those handles\n+            // during the actual scan\n+\n+            // Map the handles from planning time to the handles asked in the scan\n+            // so that we know which columns to discard.\n+            int[] handleMapping = new int[expectedColumnHandles.size()];\n+            for (int i = 0; i < handleMapping.length; ++i) {\n+                handleMapping[i] = columnHandles.indexOf(expectedColumnHandles.get(i));\n+            }\n+\n+            columnBlockBuilders = new ArrayList<>();\n+            columnTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzEyMTkzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMzo0M1rOGO-39Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMTowODoyOFrOGO_ZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzM4MQ==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418363381", "createdAt": "2020-05-01T00:33:43Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -97,7 +105,13 @@ private static void checkExceptions(DataTable dataTable, PinotSplit split)\n             }\n         });\n         if (!exceptions.isEmpty()) {\n-            throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n+            throw new PinotException(PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n+        }\n+        int columnsExpected = split.getExpectedColumnHandles().size();\n+        int columnsActual = dataTable.getDataSchema().size();\n+        if (columnsActual != columnsExpected) {\n+            throw new PinotException(PINOT_EXCEPTION, split.getSegmentPql(), String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MTg4NA==", "bodyText": "new change :-)", "url": "https://github.com/prestodb/presto/pull/14456#discussion_r418371884", "createdAt": "2020-05-01T01:08:28Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotSegmentPageSource.java", "diffHunk": "@@ -97,7 +105,13 @@ private static void checkExceptions(DataTable dataTable, PinotSplit split)\n             }\n         });\n         if (!exceptions.isEmpty()) {\n-            throw new PinotException(PinotErrorCode.PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n+            throw new PinotException(PINOT_EXCEPTION, split.getSegmentPql(), String.format(\"Encountered %d pinot exceptions for split %s: %s\", exceptions.size(), split, exceptions));\n+        }\n+        int columnsExpected = split.getExpectedColumnHandles().size();\n+        int columnsActual = dataTable.getDataSchema().size();\n+        if (columnsActual != columnsExpected) {\n+            throw new PinotException(PINOT_EXCEPTION, split.getSegmentPql(), String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzM4MQ=="}, "originalCommit": {"oid": "891d33a043ef59b2b5e95957a94ee2d535d8b5cd"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2829, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}