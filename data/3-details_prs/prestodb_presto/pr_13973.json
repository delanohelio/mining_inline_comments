{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDQ4NDU1", "number": 13973, "title": "Allocate CPU quanta per query instead of per task", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-01-16T04:23:21Z", "url": "https://github.com/prestodb/presto/pull/13973", "merged": true, "mergeCommit": {"oid": "f63875571e29aade4663cb7e6447d42126add407"}, "closed": true, "closedAt": "2020-02-06T17:16:15Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb69CoOgFqTM0NDA2MjM0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBRJjxAFqTM1MzUxMzI3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDYyMzQ0", "url": "https://github.com/prestodb/presto/pull/13973#pullrequestreview-344062344", "createdAt": "2020-01-16T16:49:36Z", "commit": {"oid": "0c63e963411535a5e32eeac69a9aacf84212d088"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0OTozNlrOFegYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0OTozNlrOFegYcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMjE0Nw==", "bodyText": "let's not call this \"legacy\" since  such scheduling policy might be reasonable for interactive workload . Maybe just a enum about \"TASK_FAIR\" vs. \"QUERY_FAIR\" , tuned for interactive/batch use case :)", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r367532147", "createdAt": "2020-01-16T16:49:36Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -138,6 +138,7 @@\n     public static final String OPTIMIZED_REPARTITIONING_ENABLED = \"optimized_repartitioning\";\n     public static final String AGGREGATION_PARTITIONING_MERGING_STRATEGY = \"aggregation_partitioning_merging_strategy\";\n     public static final String LIST_BUILT_IN_FUNCTIONS_ONLY = \"list_built_in_functions_only\";\n+    public static final String LEGACY_TASK_PRIORITY_TRACKING = \"legacy_task_priority_tracking\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c63e963411535a5e32eeac69a9aacf84212d088"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDY1NDE2", "url": "https://github.com/prestodb/presto/pull/13973#pullrequestreview-344065416", "createdAt": "2020-01-16T16:53:41Z", "commit": {"oid": "0c63e963411535a5e32eeac69a9aacf84212d088"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1Mzo0MVrOFeghlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1Mzo0MVrOFeghlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNDQ4NQ==", "bodyText": "Wait how can this be a session property? -- what about some query claims \"TASK_FAIR\" scheduling while some other query claim \"QUERY_FAIR\"? It looks like more like a cluster-level global config (e.g. configuration property)", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r367534485", "createdAt": "2020-01-16T16:53:41Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -1164,4 +1170,10 @@ public static boolean isListBuiltInFunctionsOnly(Session session)\n     {\n         return session.getSystemProperty(LIST_BUILT_IN_FUNCTIONS_ONLY, Boolean.class);\n     }\n+\n+    @Deprecated\n+    public static boolean isLegacyTaskPriorityTracking(Session session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c63e963411535a5e32eeac69a9aacf84212d088"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c63e963411535a5e32eeac69a9aacf84212d088", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/0c63e963411535a5e32eeac69a9aacf84212d088", "committedDate": "2020-01-16T03:10:22Z", "message": "Allocate CPU quanta per query instead of per task"}, "afterCommit": {"oid": "e0110d07ba5c2a9ba34e532168926d846ea13c5e", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/e0110d07ba5c2a9ba34e532168926d846ea13c5e", "committedDate": "2020-01-23T20:36:49Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0110d07ba5c2a9ba34e532168926d846ea13c5e", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/e0110d07ba5c2a9ba34e532168926d846ea13c5e", "committedDate": "2020-01-23T20:36:49Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}, "afterCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/fa62a7d421dc793f7dced778a0d1a6d3e025882d", "committedDate": "2020-01-24T01:57:01Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNDQ1NDE4", "url": "https://github.com/prestodb/presto/pull/13973#pullrequestreview-350445418", "createdAt": "2020-01-29T21:43:43Z", "commit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0Mzo0M1rOFjYkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1NDoyNlrOFjY3tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjkyMA==", "bodyText": "Why it's called TaskPriorityTracker?", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372646920", "createdAt": "2020-01-29T21:43:43Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -118,6 +124,11 @@\n      */\n     private final MultilevelSplitQueue waitingSplits;\n \n+    /**\n+     * Per query priority trackers\n+     */\n+    private final Function<QueryId, TaskPriorityTracker> taskPriorityTrackerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Nzc2OA==", "bodyText": "nit:\n                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder()\n                        .weakValues()\n                        .build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372647768", "createdAt": "2020-01-29T21:45:30Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -206,6 +247,19 @@ public TaskExecutor(\n         this.guaranteedNumberOfDriversPerTask = guaranteedNumberOfDriversPerTask;\n         this.maximumNumberOfDriversPerTask = maximumNumberOfDriversPerTask;\n         this.waitingSplits = requireNonNull(splitQueue, \"splitQueue is null\");\n+        Function<QueryId, TaskPriorityTracker> taskPriorityTrackerFactory;\n+        switch (taskPriorityTracking) {\n+            case TASK_FAIR:\n+                taskPriorityTrackerFactory = (queryId) -> new TaskPriorityTracker(splitQueue);\n+                break;\n+            case QUERY_FAIR:\n+                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder().weakValues().build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MDQwOQ==", "bodyText": "I am thinking if we should actually have a constructor that takes Function<QueryId, TaskPriorityTracker> as parameter?", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372650409", "createdAt": "2020-01-29T21:51:00Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -185,6 +225,7 @@ public TaskExecutor(\n             int minDrivers,\n             int guaranteedNumberOfDriversPerTask,\n             int maximumNumberOfDriversPerTask,\n+            TaskPriorityTracking taskPriorityTracking,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MTk1Ng==", "bodyText": "nit: new line for enum?", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372651956", "createdAt": "2020-01-29T21:54:26Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java", "diffHunk": "@@ -495,4 +496,22 @@ public TaskManagerConfig setLegacyLifespanCompletionCondition(boolean legacyLife\n         this.legacyLifespanCompletionCondition = legacyLifespanCompletionCondition;\n         return this;\n     }\n+\n+    @NotNull\n+    public TaskPriorityTracking getTaskPriorityTracking()\n+    {\n+        return taskPriorityTracking;\n+    }\n+\n+    @Config(\"task.task-priority-tracking\")\n+    public TaskManagerConfig setTaskPriorityTracking(TaskPriorityTracking taskPriorityTracking)\n+    {\n+        this.taskPriorityTracking = taskPriorityTracking;\n+        return this;\n+    }\n+\n+    public enum TaskPriorityTracking\n+    {\n+        TASK_FAIR, QUERY_FAIR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "committedDate": "2020-01-30T16:18:32Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/fa62a7d421dc793f7dced778a0d1a6d3e025882d", "committedDate": "2020-01-24T01:57:01Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}, "afterCommit": {"oid": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "committedDate": "2020-01-30T16:18:32Z", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTEzMjc2", "url": "https://github.com/prestodb/presto/pull/13973#pullrequestreview-353513276", "createdAt": "2020-02-05T07:38:50Z", "commit": {"oid": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}