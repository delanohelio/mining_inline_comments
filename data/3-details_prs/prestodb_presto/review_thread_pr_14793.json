{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDQ0MTc3", "number": 14793, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowNDo0M1rOEMp32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowNDo0M1rOEMp32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA0NDA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowNDo0M1rOGu5LqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDowNjowMlrOGvf-Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDU1Mg==", "bodyText": "You can write this with stream api as\ncontext.entrySet().stream()\n        .filter(entry -> !lambdaArguments.contains(entry.getKey()))\n        .collect(toImmutableMap(Entry::getKey, Entry::getValue)).", "url": "https://github.com/prestodb/presto/pull/14793#discussion_r451824552", "createdAt": "2020-07-08T21:04:43Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -239,6 +240,20 @@ public static RowExpression bindFunctionArguments(RowExpression function, List<O\n             }\n             return RowExpressionTreeRewriter.rewriteWith(new RowExpressionRewriter<Map<String, RowExpression>>()\n             {\n+                @Override\n+                public RowExpression rewriteLambda(LambdaDefinitionExpression lambda, Map<String, RowExpression> context, RowExpressionTreeRewriter<Map<String, RowExpression>> treeRewriter)\n+                {\n+                    List<String> lambdaArguments = lambda.getArguments();\n+                    ImmutableMap.Builder<String, RowExpression> lambdaContext = ImmutableMap.builder();\n+                    for (Map.Entry<String, RowExpression> entry : context.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d657148d4e2403eb3df9960792bfeee442ac3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MDExMA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14793#discussion_r452460110", "createdAt": "2020-07-09T20:06:02Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -239,6 +240,20 @@ public static RowExpression bindFunctionArguments(RowExpression function, List<O\n             }\n             return RowExpressionTreeRewriter.rewriteWith(new RowExpressionRewriter<Map<String, RowExpression>>()\n             {\n+                @Override\n+                public RowExpression rewriteLambda(LambdaDefinitionExpression lambda, Map<String, RowExpression> context, RowExpressionTreeRewriter<Map<String, RowExpression>> treeRewriter)\n+                {\n+                    List<String> lambdaArguments = lambda.getArguments();\n+                    ImmutableMap.Builder<String, RowExpression> lambdaContext = ImmutableMap.builder();\n+                    for (Map.Entry<String, RowExpression> entry : context.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDU1Mg=="}, "originalCommit": {"oid": "b60d657148d4e2403eb3df9960792bfeee442ac3"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2321, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}