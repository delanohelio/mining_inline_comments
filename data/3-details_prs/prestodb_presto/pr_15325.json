{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTUwNzIy", "number": 15325, "title": "Disable listFiles call to underlying storage", "bodyText": "Get the filenames and filesizes from Metastore partition object and use them to create splits.\nThis way we can avoid list directory call to underlying storage.\n== NO RELEASE NOTE ==", "createdAt": "2020-10-16T23:50:33Z", "url": "https://github.com/prestodb/presto/pull/15325", "merged": true, "mergeCommit": {"oid": "7b41e69c40eb9815e13dce6b41f9a2545c97c60d"}, "closed": true, "closedAt": "2020-11-20T23:36:00Z", "author": {"login": "NikhilCollooru"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTqAqcAFqTUxMTAzNjYyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeQ_MSABqjQwMTkyNTQ4MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDM2NjIw", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-511036620", "createdAt": "2020-10-18T06:12:04Z", "commit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNjoxMjowNFrOHjiNqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNjozMDozOVrOHjiT2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyMjc2MQ==", "bodyText": "we don't need this. It can be obtained from MAX_SPLIT_SIZE session property.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r507022761", "createdAt": "2020-10-18T06:12:04Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -103,6 +112,7 @@\n         implements HiveSplitLoader\n {\n     private static final ListenableFuture<?> COMPLETED_FUTURE = immediateFuture(null);\n+    private static final DataSize TARGET_BLOCK_SIZE = new DataSize(72, MEGABYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyMzYyNw==", "bodyText": "This will still call the underlying remote FS. I think locations only works for colocated HDFS. It should be empty.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r507023627", "createdAt": "2020-10-18T06:22:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -452,13 +462,63 @@ private static boolean shouldUseFileSplitsFromInputFormat(InputFormat<?, ?> inpu\n         }\n \n         HiveDirectoryContext hiveDirectoryContext = new HiveDirectoryContext(recursiveDirWalkerEnabled ? RECURSE : IGNORED, cacheable);\n+\n+        if (HiveSessionProperties.isListFilesDisabled(session) && partition.isPresent()) {\n+            Map<String, String> parameters = partition.get().getParameters();\n+            if (parameters.containsKey(FILE_NAMES) && parameters.containsKey(FILE_SIZES)) {\n+                List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+                List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+\n+                // Verify that the count of fileNames and fileSizes are same\n+                verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+                ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+                for (int i = 0; i < fileNames.size(); i++) {\n+                    Path filePath = new Path(path, fileNames.get(i));\n+                    FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, TARGET_BLOCK_SIZE.toBytes(), 0, filePath);\n+                    try {\n+                        BlockLocation[] locations = fileSystem.getFileBlockLocations(fileStatus, 0, fileStatus.getLen());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyMzY4Mg==", "bodyText": "We need to double check if extraFileContext is empty will cause downstream failure. Because downstream could assume it's always non-empty if we turn the config on. Either we need to add a comment here to indicate it's safe or fix the downstream. cc: @shixuan-fan", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r507023682", "createdAt": "2020-10-18T06:23:47Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -452,13 +462,63 @@ private static boolean shouldUseFileSplitsFromInputFormat(InputFormat<?, ?> inpu\n         }\n \n         HiveDirectoryContext hiveDirectoryContext = new HiveDirectoryContext(recursiveDirWalkerEnabled ? RECURSE : IGNORED, cacheable);\n+\n+        if (HiveSessionProperties.isListFilesDisabled(session) && partition.isPresent()) {\n+            Map<String, String> parameters = partition.get().getParameters();\n+            if (parameters.containsKey(FILE_NAMES) && parameters.containsKey(FILE_SIZES)) {\n+                List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+                List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+\n+                // Verify that the count of fileNames and fileSizes are same\n+                verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+                ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+                for (int i = 0; i < fileNames.size(); i++) {\n+                    Path filePath = new Path(path, fileNames.get(i));\n+                    FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, TARGET_BLOCK_SIZE.toBytes(), 0, filePath);\n+                    try {\n+                        BlockLocation[] locations = fileSystem.getFileBlockLocations(fileStatus, 0, fileStatus.getLen());\n+                        fileListBuilder.add(HiveFileInfo.createHiveFileInfo(new LocatedFileStatus(fileStatus, locations), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyNDM0Ng==", "bodyText": "what about non-partitioned tables?\nwhat if a table is mixed with file paths in some partitions and some not?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r507024346", "createdAt": "2020-10-18T06:30:39Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -452,13 +462,63 @@ private static boolean shouldUseFileSplitsFromInputFormat(InputFormat<?, ?> inpu\n         }\n \n         HiveDirectoryContext hiveDirectoryContext = new HiveDirectoryContext(recursiveDirWalkerEnabled ? RECURSE : IGNORED, cacheable);\n+\n+        if (HiveSessionProperties.isListFilesDisabled(session) && partition.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/449bcc9ed83ac4aff6dcf2f450522c7c5bc33a25", "committedDate": "2020-10-16T23:02:07Z", "message": "Disable listFiles call to underlying storage\n\nGet the filenames and filesizes from Metastore partition object\nand use them to create splits. This way we can avoid listFiles()\ncall to underlying storage."}, "afterCommit": {"oid": "6a0d8aa5e1b1670a5c9f919b97078ed829b7940b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/6a0d8aa5e1b1670a5c9f919b97078ed829b7940b", "committedDate": "2020-11-13T00:31:13Z", "message": "Add DelegatingHiveSplitLoader\n\nManifestHiveSplitLoader has the logic to read filenamse,size from\npartition object and add splits to splitSource. But not all partitions\nmight contain the list of filenames and sizes.Hence we need\nDelegatingHiveSplitLoader to create both HiveSplitLoader\nand ManifestHiveSplitLaoder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a0d8aa5e1b1670a5c9f919b97078ed829b7940b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/6a0d8aa5e1b1670a5c9f919b97078ed829b7940b", "committedDate": "2020-11-13T00:31:13Z", "message": "Add DelegatingHiveSplitLoader\n\nManifestHiveSplitLoader has the logic to read filenamse,size from\npartition object and add splits to splitSource. But not all partitions\nmight contain the list of filenames and sizes.Hence we need\nDelegatingHiveSplitLoader to create both HiveSplitLoader\nand ManifestHiveSplitLaoder."}, "afterCommit": {"oid": "aa8f0099b951a7da3ac2ed3ac0c226f1d3005ef0", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/aa8f0099b951a7da3ac2ed3ac0c226f1d3005ef0", "committedDate": "2020-11-13T03:29:01Z", "message": "Add DelegatingHiveSplitLoader\n\nManifestHiveSplitLoader has the logic to read filenamse,size from\npartition object and add splits to splitSource. But not all partitions\nmight contain the list of filenames and sizes.Hence we need\nDelegatingHiveSplitLoader to create both HiveSplitLoader\nand ManifestHiveSplitLaoder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa8f0099b951a7da3ac2ed3ac0c226f1d3005ef0", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/aa8f0099b951a7da3ac2ed3ac0c226f1d3005ef0", "committedDate": "2020-11-13T03:29:01Z", "message": "Add DelegatingHiveSplitLoader\n\nManifestHiveSplitLoader has the logic to read filenamse,size from\npartition object and add splits to splitSource. But not all partitions\nmight contain the list of filenames and sizes.Hence we need\nDelegatingHiveSplitLoader to create both HiveSplitLoader\nand ManifestHiveSplitLaoder."}, "afterCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/5807b874a75a9e8de04363179f3673de9a764b94", "committedDate": "2020-11-16T00:17:50Z", "message": "Add PartitionLoader to load partitions\n\nAdd DelegatingPartitionLoader to delegate the partion\nloading to ManifestPartitionLoader when Partition retrieved\nfrom Metastore has list of fileNames, sizes in it."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTI4OTg2", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-530928986", "createdAt": "2020-11-16T05:39:12Z", "commit": {"oid": "f05f2812e010c828d968aaf814fe5d7ed48a22cb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTozOToxM1rOHzo26Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTozOTo1MFrOHzo3kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwODg0MQ==", "bodyText": "hive.prefer_manifests_to_list_files", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523908841", "createdAt": "2020-11-16T05:39:13Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -1524,4 +1525,17 @@ public boolean isFileRenamingEnabled()\n     {\n         return this.fileRenamingEnabled;\n     }\n+\n+    @Config(\"hive.list-files-disabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05f2812e010c828d968aaf814fe5d7ed48a22cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwOTAwOQ==", "bodyText": "prefer_manifests_to_list_files", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523909009", "createdAt": "2020-11-16T05:39:50Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -111,6 +111,7 @@\n     public static final String PARTIAL_AGGREGATION_PUSHDOWN_ENABLED = \"partial_aggregation_pushdown_enabled\";\n     public static final String PARTIAL_AGGREGATION_PUSHDOWN_FOR_VARIABLE_LENGTH_DATATYPES_ENABLED = \"partial_aggregation_pushdown_for_variable_length_datatypes_enabled\";\n     public static final String FILE_RENAMING_ENABLED = \"file_renaming_enabled\";\n+    public static final String LIST_FILES_DISABLED = \"list_files_disabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05f2812e010c828d968aaf814fe5d7ed48a22cb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTMwMDkw", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-530930090", "createdAt": "2020-11-16T05:43:31Z", "commit": {"oid": "3ac00c6e9cc1aa8c588fc44939f96d0ca8ce66e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo0MzozMVrOHzo6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo0MzozMVrOHzo6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwOTgwOA==", "bodyText": "Let's have two interfaces for this. Otherwise, we will have regression for https://github.com/prestodb/presto/pull/10760/files", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523909808", "createdAt": "2020-11-16T05:43:31Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -123,7 +123,7 @@ public OrcFileWriter(\n     @Override\n     public long getWrittenBytes()\n     {\n-        return orcWriter.getWrittenBytes() + orcWriter.getBufferedBytes();\n+        return orcWriter.getWrittenBytes();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac00c6e9cc1aa8c588fc44939f96d0ca8ce66e7"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTM0MjQ2", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-530934246", "createdAt": "2020-11-16T05:58:53Z", "commit": {"oid": "bb1bd7832b741a39725bc2411c58fc611b7fe8bc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo1ODo1NFrOHzpI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjowMDoyOFrOHzpKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzQzMw==", "bodyText": "both these two functions can be static. Shall we put them into HiveManifestUtils?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523913433", "createdAt": "2020-11-16T05:58:54Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1970,6 +1981,55 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1bd7832b741a39725bc2411c58fc611b7fe8bc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzU4Nw==", "bodyText": "This should use COMMA", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523913587", "createdAt": "2020-11-16T05:59:27Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1970,6 +1981,55 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(String::valueOf)\n+                .collect(joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1bd7832b741a39725bc2411c58fc611b7fe8bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzg3Ng==", "bodyText": "parseInt", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523913876", "createdAt": "2020-11-16T06:00:28Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1970,6 +1981,55 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(String::valueOf)\n+                .collect(joining(\",\"));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    private String joinFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.valueOf(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1bd7832b741a39725bc2411c58fc611b7fe8bc"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTQzNTY4", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-530943568", "createdAt": "2020-11-16T06:30:49Z", "commit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjozMDo0OVrOHzpomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjo0NjoxNFrOHzp5PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMTU2Mw==", "bodyText": "keep it private and duplicate it to the classes where it is needed.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523921563", "createdAt": "2020-11-16T06:30:49Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -14,112 +14,38 @@\n package com.facebook.presto.hive;\n \n import com.facebook.presto.common.predicate.Domain;\n-import com.facebook.presto.hive.HiveBucketing.HiveBucketFilter;\n-import com.facebook.presto.hive.HiveSplit.BucketConversion;\n-import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n-import com.facebook.presto.hive.metastore.Column;\n-import com.facebook.presto.hive.metastore.Partition;\n-import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.Table;\n-import com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryNotAllowedException;\n-import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n import com.facebook.presto.hive.util.ResumableTask;\n import com.facebook.presto.hive.util.ResumableTasks;\n import com.facebook.presto.spi.ConnectorSession;\n import com.facebook.presto.spi.PrestoException;\n-import com.facebook.presto.spi.SchemaTableName;\n-import com.google.common.base.Suppliers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Iterators;\n-import com.google.common.io.CharStreams;\n import com.google.common.util.concurrent.ListenableFuture;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.PathFilter;\n-import org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat;\n-import org.apache.hadoop.mapred.FileInputFormat;\n-import org.apache.hadoop.mapred.FileSplit;\n-import org.apache.hadoop.mapred.InputFormat;\n-import org.apache.hadoop.mapred.InputSplit;\n-import org.apache.hadoop.mapred.JobConf;\n-import org.apache.hadoop.mapred.TextInputFormat;\n-import org.apache.hudi.hadoop.HoodieParquetInputFormat;\n-import org.apache.hudi.hadoop.HoodieROTablePathFilter;\n-import org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat;\n \n-import java.io.BufferedReader;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.lang.annotation.Annotation;\n-import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Deque;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.Properties;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.Executor;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n-import java.util.function.IntPredicate;\n-import java.util.function.Supplier;\n \n-import static com.facebook.presto.hive.HiveBucketing.getVirtualBucketNumber;\n-import static com.facebook.presto.hive.HiveColumnHandle.pathColumnHandle;\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_BAD_DATA;\n import static com.facebook.presto.hive.HiveErrorCode.HIVE_FILESYSTEM_ERROR;\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_BUCKET_FILES;\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_METADATA;\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_PARTITION_VALUE;\n import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_ERROR;\n-import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n-import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n-import static com.facebook.presto.hive.HiveSessionProperties.isUseListDirectoryCache;\n-import static com.facebook.presto.hive.HiveUtil.getFooterCount;\n-import static com.facebook.presto.hive.HiveUtil.getHeaderCount;\n-import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n-import static com.facebook.presto.hive.NestedDirectoryPolicy.FAIL;\n-import static com.facebook.presto.hive.NestedDirectoryPolicy.IGNORED;\n-import static com.facebook.presto.hive.NestedDirectoryPolicy.RECURSE;\n-import static com.facebook.presto.hive.S3SelectPushdown.shouldEnablePushdownForTable;\n-import static com.facebook.presto.hive.metastore.MetastoreUtil.checkCondition;\n-import static com.facebook.presto.hive.metastore.MetastoreUtil.getHiveSchema;\n-import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n-import static com.facebook.presto.hive.util.ConfigurationUtils.toJobConf;\n-import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static com.google.common.collect.Streams.stream;\n import static com.google.common.util.concurrent.Futures.immediateFuture;\n-import static java.lang.Math.max;\n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n-import static org.apache.hadoop.hive.common.FileUtils.HIDDEN_FILES_PATH_FILTER;\n \n public class BackgroundHiveSplitLoader\n         implements HiveSplitLoader\n {\n-    private static final ListenableFuture<?> COMPLETED_FUTURE = immediateFuture(null);\n+    public static final ListenableFuture<?> COMPLETED_FUTURE = immediateFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMjA0OQ==", "bodyText": "looks like an accidental change", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523922049", "createdAt": "2020-11-16T06:32:40Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -145,7 +71,7 @@ public BackgroundHiveSplitLoader(\n             Table table,\n             Iterable<HivePartitionMetadata> partitions,\n             Optional<Domain> pathDomain,\n-            Optional<BucketSplitInfo> tableBucketInfo,\n+            Optional<StoragePartitionLoader.BucketSplitInfo> tableBucketInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyNDgwOA==", "bodyText": "This is a no-op right? I thought we need to call HiveSplitSource.addToQueue?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523924808", "createdAt": "2020-11-16T06:42:33Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.BackgroundHiveSplitLoader.COMPLETED_FUTURE;\n+import static com.facebook.presto.hive.HiveMetadata.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveMetadata.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final Deque<Iterator<InternalHiveSplit>> fileIterators;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            Deque<Iterator<InternalHiveSplit>> fileIterators,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.fileIterators = requireNonNull(fileIterators, \"fileIterators is null\");\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+\n+        // Verify that the count of fileNames and fileSizes are same\n+        verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+        ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+        for (int i = 0; i < fileNames.size(); i++) {\n+            Path filePath = new Path(path, fileNames.get(i));\n+            FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, getMaxSplitSize(session).toBytes(), 0, filePath);\n+            try {\n+                BlockLocation[] locations = new BlockLocation[] {new BlockLocation(new String[] {\"localhost:50010\"}, new String[] {\"localhost\"}, 0, fileSizes.get(i))};\n+                fileListBuilder.add(HiveFileInfo.createHiveFileInfo(new LocatedFileStatus(fileStatus, locations), Optional.empty()));\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n+\n+        fileIterators.addLast(fileListBuilder.build().stream()\n+                .map(status -> splitFactory.createInternalHiveSplit(status, true))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .iterator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyNTgyMA==", "bodyText": "Let's add a new session property to call directoryLister.list here to do verification on the file names in manifests are the same as the ones listed.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r523925820", "createdAt": "2020-11-16T06:46:14Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.BackgroundHiveSplitLoader.COMPLETED_FUTURE;\n+import static com.facebook.presto.hive.HiveMetadata.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveMetadata.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final Deque<Iterator<InternalHiveSplit>> fileIterators;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            Deque<Iterator<InternalHiveSplit>> fileIterators,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.fileIterators = requireNonNull(fileIterators, \"fileIterators is null\");\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+\n+        // Verify that the count of fileNames and fileSizes are same\n+        verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+        ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+        for (int i = 0; i < fileNames.size(); i++) {\n+            Path filePath = new Path(path, fileNames.get(i));\n+            FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, getMaxSplitSize(session).toBytes(), 0, filePath);\n+            try {\n+                BlockLocation[] locations = new BlockLocation[] {new BlockLocation(new String[] {\"localhost:50010\"}, new String[] {\"localhost\"}, 0, fileSizes.get(i))};\n+                fileListBuilder.add(HiveFileInfo.createHiveFileInfo(new LocatedFileStatus(fileStatus, locations), Optional.empty()));\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n+\n+        fileIterators.addLast(fileListBuilder.build().stream()\n+                .map(status -> splitFactory.createInternalHiveSplit(status, true))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .iterator());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5807b874a75a9e8de04363179f3673de9a764b94", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/5807b874a75a9e8de04363179f3673de9a764b94", "committedDate": "2020-11-16T00:17:50Z", "message": "Add PartitionLoader to load partitions\n\nAdd DelegatingPartitionLoader to delegate the partion\nloading to ManifestPartitionLoader when Partition retrieved\nfrom Metastore has list of fileNames, sizes in it."}, "afterCommit": {"oid": "4019f8cb5cf583526da9558b97ce935d007bae37", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/4019f8cb5cf583526da9558b97ce935d007bae37", "committedDate": "2020-11-17T01:20:50Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4019f8cb5cf583526da9558b97ce935d007bae37", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/4019f8cb5cf583526da9558b97ce935d007bae37", "committedDate": "2020-11-17T01:20:50Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}, "afterCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/2ad53812561e93767216d8dd910c145fcba83bbf", "committedDate": "2020-11-17T03:00:34Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzUyODE5", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-532752819", "createdAt": "2020-11-17T19:46:00Z", "commit": {"oid": "d2067ff424532edd84d556d92962e4594b8dac00"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0NjowMFrOH1GzVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0ODowOFrOH1M0qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0ODAyMQ==", "bodyText": "Let use the consistent names for this:\n\nvariable: preferManifestsToListFiles\nconfig: hive.prefer-manifests-to-list-files\ngetter/setter: isPreferManifestsToListFiles()/setPreferManifestsToListFiles()\nsession property: prefer_manifests_to_list_files", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525448021", "createdAt": "2020-11-17T19:46:00Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -182,6 +182,7 @@\n     private boolean isPartialAggregationPushdownForVariableLengthDatatypesEnabled;\n \n     private boolean fileRenamingEnabled;\n+    private boolean preferManifestToListFiles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2067ff424532edd84d556d92962e4594b8dac00"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1OTk3MQ==", "bodyText": "Usually we wanna avoid default interface. Let's have this in each writer impl.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525459971", "createdAt": "2020-11-17T19:55:46Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java", "diffHunk": "@@ -36,4 +36,9 @@\n     {\n         return Optional.empty();\n     }\n+\n+    default long getFileSize()\n+    {\n+        return getWrittenBytes();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "320d24d15e16c75ac64050f215182995f4e8aa00"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ2MDUxNA==", "bodyText": "getFileSizeInBytes()", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525460514", "createdAt": "2020-11-17T19:56:11Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java", "diffHunk": "@@ -36,4 +36,9 @@\n     {\n         return Optional.empty();\n     }\n+\n+    default long getFileSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "320d24d15e16c75ac64050f215182995f4e8aa00"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyNzU0NA==", "bodyText": "Let's move this above public constants closer to private ones.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525527544", "createdAt": "2020-11-17T21:12:29Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -33,6 +40,13 @@\n     private static final int FILE_SIZE_CHANNEL = 0;\n     private static final int ROW_COUNT_CHANNEL = 1;\n \n+    public static final String FILE_NAMES = \"FILE_NAMES\";\n+    public static final String FILE_SIZES = \"FILE_SIZES\";\n+\n+    // Comma is not a reserved keyword with or without quote\n+    // See https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-Keywords,Non-reservedKeywordsandReservedKeywords\n+    private static final char COMMA = ',';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyODY0Ng==", "bodyText": "\"filenames, sizes\" -> file names and sizes", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525528646", "createdAt": "2020-11-17T21:14:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -1524,4 +1525,17 @@ public boolean isFileRenamingEnabled()\n     {\n         return this.fileRenamingEnabled;\n     }\n+\n+    @Config(\"hive.prefer-manifests-to-list-files\")\n+    @ConfigDescription(\"Prefer to fetch the list of filenames, sizes from manifests rather than storage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2067ff424532edd84d556d92962e4594b8dac00"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjcwOA==", "bodyText": "When will we have optional sizes? Will this cause inconsistency between file names and sizes?\nSuggest using delta encoding. Or more easily, build the string and zstd it.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525532708", "createdAt": "2020-11-17T21:22:16Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +99,53 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = Joiner.on(COMMA).join(fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNTY2Mg==", "bodyText": "private\ncompressFileNames", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525535662", "createdAt": "2020-11-17T21:27:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +99,53 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = Joiner.on(COMMA).join(fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(String::valueOf)\n+                .collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    public static String joinFileNames(List<String> fileNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MDkzNg==", "bodyText": "Leaning towards having a version (e.g., \"V1\", \"V2\", ...) for the file names/sizes format. This can be helpful in the future to use different serde. Once we have that, we can put joinFileNames and Joiner on sizes into for example a V1 class for serde processing. We may introduce V2 sometime in the future.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525540936", "createdAt": "2020-11-17T21:37:26Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +99,53 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = Joiner.on(COMMA).join(fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(String::valueOf)\n+                .collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.putAll(metadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NjMyNg==", "bodyText": "create a similar helper like joinFileNames.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525546326", "createdAt": "2020-11-17T21:47:28Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +99,53 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = Joiner.on(COMMA).join(fileWriteInfos.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NjY2NA==", "bodyText": "Recommend to use roaring bitmap (https://roaringbitmap.org/) for this. It will provide good compression ratio.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525546664", "createdAt": "2020-11-17T21:48:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +99,53 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Join the file names into a consolidated string\n+        String fileNames = joinFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Join the file sizes\n+        String fileSizes = Joiner.on(COMMA).join(fileWriteInfos.stream()\n+                .map(FileWriteInfo::getFileSize)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(String::valueOf)\n+                .collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    public static String joinFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return Joiner.on(COMMA).join(fileNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4ce8f43b9546408285179914e15aece614fd45"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODQ5NjAw", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-532849600", "createdAt": "2020-11-17T22:02:15Z", "commit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMjoxNVrOH1NRwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNjoyNFrOH1NuAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDExNA==", "bodyText": "Use versioning flag to decide maybe", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525554114", "createdAt": "2020-11-17T22:02:15Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/DelegatingPartitionLoader.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.StoragePartitionLoader.BucketSplitInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.util.concurrent.ListenableFuture;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DelegatingPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final ConnectorSession session;\n+    private final PartitionLoader storagePartitionLoader;\n+    private final PartitionLoader manifestPartitionLoader;\n+\n+    public DelegatingPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            Optional<BucketSplitInfo> tableBucketInfo,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            NamenodeStats namenodeStats,\n+            DirectoryLister directoryLister,\n+            Deque<Iterator<InternalHiveSplit>> fileIterators,\n+            boolean recursiveDirWalkerEnabled,\n+            boolean schedulerUsesHostAddresses,\n+            boolean partialAggregationsPushedDown)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.storagePartitionLoader = new StoragePartitionLoader(table, pathDomain, tableBucketInfo, session, hdfsEnvironment, namenodeStats, directoryLister, fileIterators, recursiveDirWalkerEnabled, schedulerUsesHostAddresses, partialAggregationsPushedDown);\n+        this.manifestPartitionLoader = new ManifestPartitionLoader(table, pathDomain, session, hdfsEnvironment, schedulerUsesHostAddresses);\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        if (isListFilesLoadedPartition(session, partition.getPartition())) {\n+            // Partition has list of filenames, sizes. We can avoid the listFiles() call to underlying storage.\n+            return manifestPartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+        }\n+\n+        return storagePartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+    }\n+\n+    public static boolean isListFilesLoadedPartition(ConnectorSession session, Optional<Partition> partition)\n+    {\n+        if (partition.isPresent() && HiveSessionProperties.isManifestsToListFilesPreferred(session)) {\n+            Map<String, String> parameters = partition.get().getParameters();\n+            if (parameters.containsKey(FILE_NAMES) && parameters.containsKey(FILE_SIZES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDIzMw==", "bodyText": "No need to have if, directly return the condition within if.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525554233", "createdAt": "2020-11-17T22:02:30Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/DelegatingPartitionLoader.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.StoragePartitionLoader.BucketSplitInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.util.concurrent.ListenableFuture;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DelegatingPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final ConnectorSession session;\n+    private final PartitionLoader storagePartitionLoader;\n+    private final PartitionLoader manifestPartitionLoader;\n+\n+    public DelegatingPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            Optional<BucketSplitInfo> tableBucketInfo,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            NamenodeStats namenodeStats,\n+            DirectoryLister directoryLister,\n+            Deque<Iterator<InternalHiveSplit>> fileIterators,\n+            boolean recursiveDirWalkerEnabled,\n+            boolean schedulerUsesHostAddresses,\n+            boolean partialAggregationsPushedDown)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.storagePartitionLoader = new StoragePartitionLoader(table, pathDomain, tableBucketInfo, session, hdfsEnvironment, namenodeStats, directoryLister, fileIterators, recursiveDirWalkerEnabled, schedulerUsesHostAddresses, partialAggregationsPushedDown);\n+        this.manifestPartitionLoader = new ManifestPartitionLoader(table, pathDomain, session, hdfsEnvironment, schedulerUsesHostAddresses);\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        if (isListFilesLoadedPartition(session, partition.getPartition())) {\n+            // Partition has list of filenames, sizes. We can avoid the listFiles() call to underlying storage.\n+            return manifestPartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+        }\n+\n+        return storagePartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+    }\n+\n+    public static boolean isListFilesLoadedPartition(ConnectorSession session, Optional<Partition> partition)\n+    {\n+        if (partition.isPresent() && HiveSessionProperties.isManifestsToListFilesPreferred(session)) {\n+            Map<String, String> parameters = partition.get().getParameters();\n+            if (parameters.containsKey(FILE_NAMES) && parameters.containsKey(FILE_SIZES)) {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDk5MA==", "bodyText": "Didn't look deep into this class. Assume it's all about moving code around. Anything specific I should be aware of?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525554990", "createdAt": "2020-11-17T22:04:06Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/StoragePartitionLoader.java", "diffHunk": "@@ -0,0 +1,495 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterators;\n+import com.google.common.io.CharStreams;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat;\n+import org.apache.hadoop.mapred.FileInputFormat;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.hudi.hadoop.HoodieParquetInputFormat;\n+import org.apache.hudi.hadoop.HoodieROTablePathFilter;\n+import org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.lang.annotation.Annotation;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.IntPredicate;\n+import java.util.function.Supplier;\n+\n+import static com.facebook.presto.hive.HiveBucketing.getVirtualBucketNumber;\n+import static com.facebook.presto.hive.HiveColumnHandle.pathColumnHandle;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_BAD_DATA;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_BUCKET_FILES;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveSessionProperties.isUseListDirectoryCache;\n+import static com.facebook.presto.hive.HiveUtil.getFooterCount;\n+import static com.facebook.presto.hive.HiveUtil.getHeaderCount;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.FAIL;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.IGNORED;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.RECURSE;\n+import static com.facebook.presto.hive.S3SelectPushdown.shouldEnablePushdownForTable;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getHiveSchema;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.facebook.presto.hive.util.ConfigurationUtils.toJobConf;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Streams.stream;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static java.lang.Math.max;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.apache.hadoop.hive.common.FileUtils.HIDDEN_FILES_PATH_FILTER;\n+\n+public class StoragePartitionLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NjAyOA==", "bodyText": "Reuse the COMMA constant in the util class", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525556028", "createdAt": "2020-11-17T22:05:54Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveManifestUtils.getFileNames;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NjM0MQ==", "bodyText": "Same comment for the one with roaring bitmap or delta encoding.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525556341", "createdAt": "2020-11-17T22:06:31Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -148,4 +146,22 @@ public static String joinFileNames(List<String> fileNames)\n \n         return Joiner.on(COMMA).join(fileNames);\n     }\n+\n+    public static List<String> getFileNames(String names)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NzIwOA==", "bodyText": "Do we really need this? This could be an empty array right?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525557208", "createdAt": "2020-11-17T22:08:11Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveManifestUtils.getFileNames;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+\n+        // Verify that the count of fileNames and fileSizes are same\n+        verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+        ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+        for (int i = 0; i < fileNames.size(); i++) {\n+            Path filePath = new Path(path, fileNames.get(i));\n+            FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, getMaxSplitSize(session).toBytes(), 0, filePath);\n+            try {\n+                BlockLocation[] locations = new BlockLocation[] {new BlockLocation(new String[] {\"localhost:50010\"}, new String[] {\"localhost\"}, 0, fileSizes.get(i))};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf68f4a0e48a2b4c5a53391f7a2b90a7f3f831"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTc5Mg==", "bodyText": "Move MALFORMED_HIVE_FILE_STATISTICS to its own line", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525559792", "createdAt": "2020-11-17T22:13:20Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -80,10 +96,17 @@ public ManifestPartitionLoader(\n         Map<String, String> parameters = partition.getPartition().get().getParameters();\n         List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n         List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n \n         // Verify that the count of fileNames and fileSizes are same\n         verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n \n+        // Verify that the file names, sizes in manifest are the same as listed by directory lister\n+        if (isManifestVerificationEnabled(session) && isManifestCorrupted(fileNames, fileSizes, path)) {\n+            throw new PrestoException(MALFORMED_HIVE_FILE_STATISTICS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTg5Nw==", "bodyText": "break lines for params inside format", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525559897", "createdAt": "2020-11-17T22:13:30Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -80,10 +96,17 @@ public ManifestPartitionLoader(\n         Map<String, String> parameters = partition.getPartition().get().getParameters();\n         List<String> fileNames = getFileNames(parameters.get(FILE_NAMES));\n         List<Long> fileSizes = Arrays.stream(parameters.get(FILE_SIZES).split(\",\")).map(Long::valueOf).collect(toImmutableList());\n+        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n \n         // Verify that the count of fileNames and fileSizes are same\n         verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n \n+        // Verify that the file names, sizes in manifest are the same as listed by directory lister\n+        if (isManifestVerificationEnabled(session) && isManifestCorrupted(fileNames, fileSizes, path)) {\n+            throw new PrestoException(MALFORMED_HIVE_FILE_STATISTICS,\n+                    format(\"FileNames, sizes stored in the partition parameters are not equal to those returned by listFiles() call to storage. Partition = %s, TableName = %s\", partition.getHivePartition().getPartitionId(), table.getTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDI5Mg==", "bodyText": "Does this change belong to this commit (i.e., the last commit)?", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525560292", "createdAt": "2020-11-17T22:14:20Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -97,8 +120,6 @@ public ManifestPartitionLoader(\n             }\n         }\n \n-        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDUyNg==", "bodyText": "s/fs/fileSystem", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525560526", "createdAt": "2020-11-17T22:14:46Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -146,4 +167,34 @@ public InternalHiveSplitFactory createInternalHiveSplitFactory(\n                 schedulerUsesHostAddresses,\n                 partition.getEncryptionInformation());\n     }\n+\n+    private boolean isManifestCorrupted(List<String> manifestFileNames, List<Long> manifestFileSizes, Path path)\n+            throws IOException\n+    {\n+        ExtendedFileSystem fs = hdfsEnvironment.getFileSystem(hdfsContext, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MTIyNQ==", "bodyText": "Maybe just make this a void function and call it validateManifest", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525561225", "createdAt": "2020-11-17T22:16:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -146,4 +167,34 @@ public InternalHiveSplitFactory createInternalHiveSplitFactory(\n                 schedulerUsesHostAddresses,\n                 partition.getEncryptionInformation());\n     }\n+\n+    private boolean isManifestCorrupted(List<String> manifestFileNames, List<Long> manifestFileSizes, Path path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MTM0NA==", "bodyText": "directly throw; so we can have precise error message.", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r525561344", "createdAt": "2020-11-17T22:16:24Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -146,4 +167,34 @@ public InternalHiveSplitFactory createInternalHiveSplitFactory(\n                 schedulerUsesHostAddresses,\n                 partition.getEncryptionInformation());\n     }\n+\n+    private boolean isManifestCorrupted(List<String> manifestFileNames, List<Long> manifestFileSizes, Path path)\n+            throws IOException\n+    {\n+        ExtendedFileSystem fs = hdfsEnvironment.getFileSystem(hdfsContext, path);\n+        HiveDirectoryContext hiveDirectoryContext = new HiveDirectoryContext(recursiveDirWalkerEnabled ? RECURSE : IGNORED, false);\n+\n+        Iterator<HiveFileInfo> fileInfoIterator = directoryLister.list(fs, table, path, namenodeStats, path1 -> true, hiveDirectoryContext);\n+        int fileCount = 0;\n+        while (fileInfoIterator.hasNext()) {\n+            HiveFileInfo fileInfo = fileInfoIterator.next();\n+            String fileName = fileInfo.getPath().getName();\n+            if (!manifestFileNames.contains(fileName)) {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ad53812561e93767216d8dd910c145fcba83bbf", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/2ad53812561e93767216d8dd910c145fcba83bbf", "committedDate": "2020-11-17T03:00:34Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}, "afterCommit": {"oid": "2b83a785eca28d5eb38d6848778ccc46014f2483", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/2b83a785eca28d5eb38d6848778ccc46014f2483", "committedDate": "2020-11-19T17:39:35Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b83a785eca28d5eb38d6848778ccc46014f2483", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/2b83a785eca28d5eb38d6848778ccc46014f2483", "committedDate": "2020-11-19T17:39:35Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}, "afterCommit": {"oid": "909a2b52777ee012fa42ab84b7fce76213bd3763", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/909a2b52777ee012fa42ab84b7fce76213bd3763", "committedDate": "2020-11-19T18:02:58Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "909a2b52777ee012fa42ab84b7fce76213bd3763", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/909a2b52777ee012fa42ab84b7fce76213bd3763", "committedDate": "2020-11-19T18:02:58Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}, "afterCommit": {"oid": "747a81a7e71a66572e7316f79758e8ef54707554", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/747a81a7e71a66572e7316f79758e8ef54707554", "committedDate": "2020-11-19T19:35:17Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MDg3MDk3", "url": "https://github.com/prestodb/presto/pull/15325#pullrequestreview-535087097", "createdAt": "2020-11-20T05:00:45Z", "commit": {"oid": "a45b81593c8095c07020a6e0c034ae796c1fb667"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMDo0NVrOH292sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNTozOFrOH2-GJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5ODU3Ng==", "bodyText": "static import isPreferManifestsToListFiles", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r527398576", "createdAt": "2020-11-20T05:00:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/DelegatingPartitionLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.StoragePartitionLoader.BucketSplitInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.util.concurrent.ListenableFuture;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.MANIFEST_VERSION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DelegatingPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final ConnectorSession session;\n+    private final PartitionLoader storagePartitionLoader;\n+    private final PartitionLoader manifestPartitionLoader;\n+\n+    public DelegatingPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            Optional<BucketSplitInfo> tableBucketInfo,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            NamenodeStats namenodeStats,\n+            DirectoryLister directoryLister,\n+            Deque<Iterator<InternalHiveSplit>> fileIterators,\n+            boolean recursiveDirWalkerEnabled,\n+            boolean schedulerUsesHostAddresses,\n+            boolean partialAggregationsPushedDown)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.storagePartitionLoader = new StoragePartitionLoader(table, pathDomain, tableBucketInfo, session, hdfsEnvironment, namenodeStats, directoryLister, fileIterators, recursiveDirWalkerEnabled, schedulerUsesHostAddresses, partialAggregationsPushedDown);\n+        this.manifestPartitionLoader = new ManifestPartitionLoader(table, pathDomain, session, hdfsEnvironment, schedulerUsesHostAddresses);\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        if (isListFilesLoadedPartition(session, partition.getPartition())) {\n+            // Partition has list of file names and sizes. We can avoid the listFiles() call to underlying storage.\n+            return manifestPartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+        }\n+\n+        return storagePartitionLoader.loadPartition(partition, hiveSplitSource, stopped);\n+    }\n+\n+    private static boolean isListFilesLoadedPartition(ConnectorSession session, Optional<Partition> partition)\n+    {\n+        if (partition.isPresent() && HiveSessionProperties.isPreferManifestsToListFiles(session)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45b81593c8095c07020a6e0c034ae796c1fb667"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMTc0MQ==", "bodyText": "Make new String[] {\"localhost:50010\"} and new String[] {\"localhost\"} constants. Add comment to these constants to refer to FileSystem.getFileBlockLocations method from Hadoop", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r527401741", "createdAt": "2020-11-20T05:12:44Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileNames;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileSizes;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = decompressFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = decompressFileSizes(parameters.get(FILE_SIZES));\n+\n+        // Verify that the count of fileNames and fileSizes are same\n+        verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+        ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+        for (int i = 0; i < fileNames.size(); i++) {\n+            Path filePath = new Path(path, fileNames.get(i));\n+            FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, getMaxSplitSize(session).toBytes(), 0, filePath);\n+            try {\n+                BlockLocation[] locations = new BlockLocation[] {new BlockLocation(new String[] {\"localhost:50010\"}, new String[] {\"localhost\"}, 0, fileSizes.get(i))};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45b81593c8095c07020a6e0c034ae796c1fb667"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMjA3Mw==", "bodyText": "s/path1/ignore", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r527402073", "createdAt": "2020-11-20T05:14:16Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.MALFORMED_HIVE_FILE_STATISTICS;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileNames;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileSizes;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveSessionProperties.isManifestVerificationEnabled;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.IGNORED;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.RECURSE;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final NamenodeStats namenodeStats;\n+    private final DirectoryLister directoryLister;\n+    private final boolean recursiveDirWalkerEnabled;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            NamenodeStats namenodeStats,\n+            DirectoryLister directoryLister,\n+            boolean recursiveDirWalkerEnabled,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.namenodeStats = requireNonNull(namenodeStats, \"namenodeStats is null\");\n+        this.directoryLister = requireNonNull(directoryLister, \"directoryLister is null\");\n+        this.recursiveDirWalkerEnabled = recursiveDirWalkerEnabled;\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = decompressFileNames(parameters.get(FILE_NAMES));\n+        List<Long> fileSizes = decompressFileSizes(parameters.get(FILE_SIZES));\n+\n+        // Verify that the count of fileNames and fileSizes are same\n+        verify(fileNames.size() == fileSizes.size(), \"List of fileNames and fileSizes differ in length\");\n+\n+        if (isManifestVerificationEnabled(session)) {\n+            // Verify that the file names and sizes in manifest are the same as listed by directory lister\n+            validateManifest(partition, path, fileNames, fileSizes);\n+        }\n+\n+        ImmutableList.Builder<HiveFileInfo> fileListBuilder = ImmutableList.builder();\n+        for (int i = 0; i < fileNames.size(); i++) {\n+            Path filePath = new Path(path, fileNames.get(i));\n+            FileStatus fileStatus = new FileStatus(fileSizes.get(i), false, 1, getMaxSplitSize(session).toBytes(), 0, filePath);\n+            try {\n+                BlockLocation[] locations = new BlockLocation[] {new BlockLocation(new String[] {\"localhost:50010\"}, new String[] {\"localhost\"}, 0, fileSizes.get(i))};\n+\n+                // It is safe to set extraFileContext as empty because downstream code always checks if its present before proceeding.\n+                fileListBuilder.add(HiveFileInfo.createHiveFileInfo(new LocatedFileStatus(fileStatus, locations), Optional.empty()));\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        InternalHiveSplitFactory splitFactory = createInternalHiveSplitFactory(table, partition, session, pathDomain, hdfsEnvironment, hdfsContext, schedulerUsesHostAddresses);\n+\n+        return hiveSplitSource.addToQueue(fileListBuilder.build().stream()\n+                .map(status -> splitFactory.createInternalHiveSplit(status, true))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private InternalHiveSplitFactory createInternalHiveSplitFactory(\n+            Table table,\n+            HivePartitionMetadata partition,\n+            ConnectorSession session,\n+            Optional<Domain> pathDomain,\n+            HdfsEnvironment hdfsEnvironment,\n+            HdfsContext hdfsContext,\n+            boolean schedulerUsesHostAddresses)\n+            throws IOException\n+    {\n+        String partitionName = partition.getHivePartition().getPartitionId();\n+        Storage storage = partition.getPartition().map(Partition::getStorage).orElse(table.getStorage());\n+        String inputFormatName = storage.getStorageFormat().getInputFormat();\n+        int partitionDataColumnCount = partition.getPartition()\n+                .map(p -> p.getColumns().size())\n+                .orElse(table.getDataColumns().size());\n+        List<HivePartitionKey> partitionKeys = getPartitionKeys(table, partition.getPartition());\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Configuration configuration = hdfsEnvironment.getConfiguration(hdfsContext, path);\n+        InputFormat<?, ?> inputFormat = getInputFormat(configuration, inputFormatName, false);\n+        ExtendedFileSystem fileSystem = hdfsEnvironment.getFileSystem(hdfsContext, path);\n+\n+        return new InternalHiveSplitFactory(\n+                fileSystem,\n+                inputFormat,\n+                pathDomain,\n+                getNodeSelectionStrategy(session),\n+                getMaxInitialSplitSize(session),\n+                false,\n+                new HiveSplitPartitionInfo(\n+                        storage,\n+                        path.toUri(),\n+                        partitionKeys,\n+                        partitionName,\n+                        partitionDataColumnCount,\n+                        partition.getPartitionSchemaDifference(),\n+                        Optional.empty()),\n+                schedulerUsesHostAddresses,\n+                partition.getEncryptionInformation());\n+    }\n+\n+    private void validateManifest(HivePartitionMetadata partition, Path path, List<String> manifestFileNames, List<Long> manifestFileSizes)\n+            throws IOException\n+    {\n+        ExtendedFileSystem fileSystem = hdfsEnvironment.getFileSystem(hdfsContext, path);\n+        HiveDirectoryContext hiveDirectoryContext = new HiveDirectoryContext(recursiveDirWalkerEnabled ? RECURSE : IGNORED, false);\n+\n+        Iterator<HiveFileInfo> fileInfoIterator = directoryLister.list(fileSystem, table, path, namenodeStats, path1 -> true, hiveDirectoryContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "747a81a7e71a66572e7316f79758e8ef54707554"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMjUzMw==", "bodyText": "Also get manifest version and validate it's \"V1\"\nAdd a TODO to make versioning available in the future", "url": "https://github.com/prestodb/presto/pull/15325#discussion_r527402533", "createdAt": "2020-11-20T05:15:38Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/ManifestPartitionLoader.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.InternalHiveSplitFactory;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.BlockLocation;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.InputFormat;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.MALFORMED_HIVE_FILE_STATISTICS;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_NAMES;\n+import static com.facebook.presto.hive.HiveManifestUtils.FILE_SIZES;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileNames;\n+import static com.facebook.presto.hive.HiveManifestUtils.decompressFileSizes;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxInitialSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getMaxSplitSize;\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.hive.HiveSessionProperties.isManifestVerificationEnabled;\n+import static com.facebook.presto.hive.HiveUtil.getInputFormat;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.IGNORED;\n+import static com.facebook.presto.hive.NestedDirectoryPolicy.RECURSE;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.getPartitionLocation;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ManifestPartitionLoader\n+        extends PartitionLoader\n+{\n+    private final Table table;\n+    private final Optional<Domain> pathDomain;\n+    private final ConnectorSession session;\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final HdfsContext hdfsContext;\n+    private final NamenodeStats namenodeStats;\n+    private final DirectoryLister directoryLister;\n+    private final boolean recursiveDirWalkerEnabled;\n+    private final boolean schedulerUsesHostAddresses;\n+\n+    public ManifestPartitionLoader(\n+            Table table,\n+            Optional<Domain> pathDomain,\n+            ConnectorSession session,\n+            HdfsEnvironment hdfsEnvironment,\n+            NamenodeStats namenodeStats,\n+            DirectoryLister directoryLister,\n+            boolean recursiveDirWalkerEnabled,\n+            boolean schedulerUsesHostAddresses)\n+    {\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.pathDomain = requireNonNull(pathDomain, \"pathDomain is null\");\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        this.hdfsContext = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n+        this.namenodeStats = requireNonNull(namenodeStats, \"namenodeStats is null\");\n+        this.directoryLister = requireNonNull(directoryLister, \"directoryLister is null\");\n+        this.recursiveDirWalkerEnabled = recursiveDirWalkerEnabled;\n+        this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n+    }\n+\n+    public ListenableFuture<?> loadPartition(HivePartitionMetadata partition, HiveSplitSource hiveSplitSource, boolean stopped)\n+            throws IOException\n+    {\n+        Path path = new Path(getPartitionLocation(table, partition.getPartition()));\n+        Map<String, String> parameters = partition.getPartition().get().getParameters();\n+        List<String> fileNames = decompressFileNames(parameters.get(FILE_NAMES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "747a81a7e71a66572e7316f79758e8ef54707554"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a740bb4eac27acdaaa85c8696c9d16c8d7a0ee", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/16a740bb4eac27acdaaa85c8696c9d16c8d7a0ee", "committedDate": "2020-11-20T05:59:01Z", "message": "Add new session property prefer_manifests_to_list_files\n\nWhen this property is enabled, we try to get the list of\nfilenames, sizes from the Metastore partition and thereby avoid\nlistFiles call to underlying storage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb7f3f8f9e9a20fa2770f4052595c7bc20ccb12", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/7bb7f3f8f9e9a20fa2770f4052595c7bc20ccb12", "committedDate": "2020-11-20T05:59:01Z", "message": "Add PartitionLoader to load partitions\n\nAdd DelegatingPartitionLoader to delegate the partion\nloading to ManifestPartitionLoader when Partition retrieved\nfrom Metastore has list of fileNames, sizes in it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c898bb9747bb06470fe9def2d615ee452a653f72", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/c898bb9747bb06470fe9def2d615ee452a653f72", "committedDate": "2020-11-20T05:59:01Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "747a81a7e71a66572e7316f79758e8ef54707554", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/747a81a7e71a66572e7316f79758e8ef54707554", "committedDate": "2020-11-19T19:35:17Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}, "afterCommit": {"oid": "c898bb9747bb06470fe9def2d615ee452a653f72", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/c898bb9747bb06470fe9def2d615ee452a653f72", "committedDate": "2020-11-20T05:59:01Z", "message": "Add session property manifest_verification_enabled\n\nWhen this property is enabled, the file names & sizes\nstored in manifest/partition parameters will be verified\nagainst the output of listFiles() call."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}