{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MTcyNzc1", "number": 14899, "title": "Add geometry_to_dissolved_bing_tiles and improve geometry_to_bing_tiles", "bodyText": "NB: The first commit of this PR is in #14896; that should be merged first.\nA useful feature (that is requested by users) is to have a tile covering\nof a geometry that recursively dissolves complete sets of children into their\nparents.  This results in a smaller set of tiles with non-uniform zoom\nlevel.  This can be done efficiently, and actually can form the basis\nof the current (uniform zoom level) minimal tile covering function.\nThis PR adds geometry_to_dissolved_bing_tiles, and refactors\ngeometry_to_bing_tiles to use an intermediate result in that algorithm.\nThis increases the performance by 50x on large/complex polygons,\nremoves the complexity restriction on the polygons, and fixes a\ncorrectness bug (see below).\nThe benchmarks before and after:\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op\n\nThe correctness bug is as follows: We consider Bing tiles to not include their southern and\neastern border.  This prevents duplicating points that are on the border of one or more tiles.\nHowever, this restriction was not in the previous geometry_to_bing_tiles algorithm, so the\nzoom=1 covering of POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0)) was the tile \"1\", but the covering\nfor POINT (0 0) (clearly intersecting the above polygon) was the tile \"3\".  This would result\nin some intersections being missed in a tile-based join.  The new algorithm expands them\ncorrectly, which leads to the correct but non-intuitive result of the covering of the polygon of a\nBing tile to not only be that tile, but its east, south, and southeast neighbors.  The intuitive\nconflict can be resolved by noting that while the Bing tile does not include its eastern or southern\nborder, the polygon derived from it does, so to cover that, we must include those adjacent tiles.\n== RELEASE NOTES ==\n\nGeospatial Changes\n* Add geometry_to_dissolved_bing_tiles function, which dissolves complete sets of child tiles to their parent.\n* Improve geometry_to_bing_tiles.  It is 50x faster on complex polygons, the limit on polygon complexity is removed, and some correctness bugs have been fixed.", "createdAt": "2020-07-27T13:41:46Z", "url": "https://github.com/prestodb/presto/pull/14899", "merged": true, "mergeCommit": {"oid": "8473d79a2b4088696601000f44cb99cfe66b222c"}, "closed": true, "closedAt": "2020-07-30T18:06:08Z", "author": {"login": "jagill"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5WsvqgBqjM1OTQ0NDEyMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6BlhrgBqjM2MDQ1MzExOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c16d3626fd842a026519dcb8f72ee68d944ec927", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/c16d3626fd842a026519dcb8f72ee68d944ec927", "committedDate": "2020-07-27T13:29:38Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}, "afterCommit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/24715fad67a4493fb8176a78d8e4e7bc82656d77", "committedDate": "2020-07-28T13:45:57Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzI3NzQ0", "url": "https://github.com/prestodb/presto/pull/14899#pullrequestreview-456727744", "createdAt": "2020-07-28T15:02:25Z", "commit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzMxMjQx", "url": "https://github.com/prestodb/presto/pull/14899#pullrequestreview-456731241", "createdAt": "2020-07-28T15:06:06Z", "commit": {"oid": "e9c1114baa65e83fe9816b848d1bba7dfb71f964"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNjowNlrOG4RQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMzo0NFrOG4Rl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjE3MA==", "bodyText": "nit: What do you think about ImmutableListBuilder + counter?", "url": "https://github.com/prestodb/presto/pull/14899#discussion_r461656170", "createdAt": "2020-07-28T15:06:06Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java", "diffHunk": "@@ -168,4 +186,163 @@ private static int axisToCoordinates(double axis, long mapSize)\n         int tileAxis = (int) clip(axis * mapSize, 0, mapSize - 1);\n         return tileAxis / TILE_PIXELS;\n     }\n+\n+    private static List<BingTile> findRawTileCovering(OGCGeometry ogcGeometry, int maxZoom)\n+    {\n+        Envelope envelope = getEnvelope(ogcGeometry);\n+        Optional<List<BingTile>> trivialResult = handleTrivialCases(envelope, maxZoom);\n+        if (trivialResult.isPresent()) {\n+            return trivialResult.get();\n+        }\n+\n+        accelerateGeometry(\n+                ogcGeometry, OperatorIntersects.local(), Geometry.GeometryAccelerationDegree.enumMedium);\n+\n+        Deque<TilingEntry> stack = new ArrayDeque<>();\n+        Consumer<BingTile> addIntersecting = tile -> {\n+            TilingEntry tilingEntry = new TilingEntry(tile);\n+            if (satisfiesTileEdgeCondition(envelope, tilingEntry)\n+                    && ogcGeometry.intersects(tilingEntry.polygon)) {\n+                stack.push(tilingEntry);\n+            }\n+        };\n+\n+        // Populate with initial tiles.  Since there aren't many low zoom tiles,\n+        // and throwing away totally disjoint ones is cheap (envelope check),\n+        // we might as well start comprehensively.\n+        ImmutableList.of(\n+                BingTile.fromCoordinates(0, 0, 1),\n+                BingTile.fromCoordinates(0, 1, 1),\n+                BingTile.fromCoordinates(1, 0, 1),\n+                BingTile.fromCoordinates(1, 1, 1)\n+        ).forEach(addIntersecting);\n+\n+        List<BingTile> outputTiles = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c1114baa65e83fe9816b848d1bba7dfb71f964"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2MTY3Nw==", "bodyText": "nit: please move it before the findRawTileCovering , as findDissolvedTileCovering  uses findDissolvedTileCovering", "url": "https://github.com/prestodb/presto/pull/14899#discussion_r461661677", "createdAt": "2020-07-28T15:13:44Z", "author": {"login": "arhimondr"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java", "diffHunk": "@@ -168,4 +186,163 @@ private static int axisToCoordinates(double axis, long mapSize)\n         int tileAxis = (int) clip(axis * mapSize, 0, mapSize - 1);\n         return tileAxis / TILE_PIXELS;\n     }\n+\n+    private static List<BingTile> findRawTileCovering(OGCGeometry ogcGeometry, int maxZoom)\n+    {\n+        Envelope envelope = getEnvelope(ogcGeometry);\n+        Optional<List<BingTile>> trivialResult = handleTrivialCases(envelope, maxZoom);\n+        if (trivialResult.isPresent()) {\n+            return trivialResult.get();\n+        }\n+\n+        accelerateGeometry(\n+                ogcGeometry, OperatorIntersects.local(), Geometry.GeometryAccelerationDegree.enumMedium);\n+\n+        Deque<TilingEntry> stack = new ArrayDeque<>();\n+        Consumer<BingTile> addIntersecting = tile -> {\n+            TilingEntry tilingEntry = new TilingEntry(tile);\n+            if (satisfiesTileEdgeCondition(envelope, tilingEntry)\n+                    && ogcGeometry.intersects(tilingEntry.polygon)) {\n+                stack.push(tilingEntry);\n+            }\n+        };\n+\n+        // Populate with initial tiles.  Since there aren't many low zoom tiles,\n+        // and throwing away totally disjoint ones is cheap (envelope check),\n+        // we might as well start comprehensively.\n+        ImmutableList.of(\n+                BingTile.fromCoordinates(0, 0, 1),\n+                BingTile.fromCoordinates(0, 1, 1),\n+                BingTile.fromCoordinates(1, 0, 1),\n+                BingTile.fromCoordinates(1, 1, 1)\n+        ).forEach(addIntersecting);\n+\n+        List<BingTile> outputTiles = new ArrayList<>();\n+        while (!stack.isEmpty()) {\n+            TilingEntry entry = stack.pop();\n+            if (entry.tile.getZoomLevel() == maxZoom || ogcGeometry.contains(entry.polygon)) {\n+                outputTiles.add(entry.tile);\n+            }\n+            else {\n+                entry.tile.findChildren().forEach(addIntersecting);\n+                checkCondition(\n+                        outputTiles.size() + stack.size() <= MAX_COVERING_COUNT,\n+                        \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                                \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                                \"of the geometry.\");\n+            }\n+        }\n+        return outputTiles;\n+    }\n+\n+    private static Optional<List<BingTile>> handleTrivialCases(Envelope envelope, int zoom)\n+    {\n+        checkZoomLevel(zoom);\n+\n+        if (envelope.isEmpty()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        checkLatitude(envelope.getYMin(), LATITUDE_SPAN_OUT_OF_RANGE);\n+        checkLatitude(envelope.getYMax(), LATITUDE_SPAN_OUT_OF_RANGE);\n+        checkLongitude(envelope.getXMin(), LONGITUDE_SPAN_OUT_OF_RANGE);\n+        checkLongitude(envelope.getXMax(), LONGITUDE_SPAN_OUT_OF_RANGE);\n+\n+        if (zoom == 0) {\n+            return Optional.of(ImmutableList.of(BingTile.fromCoordinates(0, 0, 0)));\n+        }\n+        if (envelope.getXMax() == envelope.getXMin() && envelope.getYMax() == envelope.getYMin()) {\n+            return Optional.of(ImmutableList.of(latitudeLongitudeToTile(envelope.getYMax(), envelope.getXMax(), zoom)));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /*\n+     * BingTiles don't contain their eastern/southern edges, so that each point lies\n+     * on a unique tile.  However, the easternmost and southernmost tiles must contain\n+     * their eastern and southern bounds (respectively), because they are the only\n+     * tiles that can.\n+     */\n+    private static boolean satisfiesTileEdgeCondition(Envelope query, TilingEntry entry)\n+    {\n+        BingTile tile = entry.tile;\n+        int maxXY = (1 << tile.getZoomLevel()) - 1;\n+        if (tile.getY() < maxXY && query.getYMax() == entry.envelope.getYMin()) {\n+            return false;\n+        }\n+        if (tile.getX() < maxXY && query.getXMin() == entry.envelope.getXMax()) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Find a minimal set of BingTiles (at different zooms), covering the geometry.\n+     * If a larger tile fits within the geometry, do not split it into smaller\n+     * tiles.  Do not split a tile past maxZoom.\n+     */\n+    public static List<BingTile> findDissolvedTileCovering(OGCGeometry ogcGeometry, int maxZoom)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c1114baa65e83fe9816b848d1bba7dfb71f964"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzQyOTE4", "url": "https://github.com/prestodb/presto/pull/14899#pullrequestreview-456742918", "createdAt": "2020-07-28T15:18:45Z", "commit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzQzMTcw", "url": "https://github.com/prestodb/presto/pull/14899#pullrequestreview-456743170", "createdAt": "2020-07-28T15:18:59Z", "commit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzQ0MzA4", "url": "https://github.com/prestodb/presto/pull/14899#pullrequestreview-456744308", "createdAt": "2020-07-28T15:20:09Z", "commit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/24715fad67a4493fb8176a78d8e4e7bc82656d77", "committedDate": "2020-07-28T13:45:57Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}, "afterCommit": {"oid": "106db28c8cd5eb74852eb0668bdc25004d654b7e", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/106db28c8cd5eb74852eb0668bdc25004d654b7e", "committedDate": "2020-07-28T23:35:17Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a2d737674ac614cabcd53f2a32b7f8fcd413bbe", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/3a2d737674ac614cabcd53f2a32b7f8fcd413bbe", "committedDate": "2020-07-30T15:38:10Z", "message": "Extract accelerateGeometry into GeometryUtils\n\nAlso add a version that accepts a degree of acceleration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c7374d634c423007e51fdf6d03a2f6bc706975", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/09c7374d634c423007e51fdf6d03a2f6bc706975", "committedDate": "2020-07-30T15:38:10Z", "message": "Add geometry_to_dissolved_bing_tiles\n\nA useful feature (that is requested by users) is to have a tile covering\nof a geometry that recursively dissolves complete sets of children into their\nparents.  This results in a smaller set of tiles with non-uniform zoom\nlevel.  This can be done efficiently, and actually can form the basis\nof the current (uniform zoom level) minimal tile covering function.\n\nThis commit implements geometry_to_dissolved_bing_tiles.  Later commits\nwill refactor geometry_to_bing_tiles to use the intermediate state for a\nsignificant efficiency win."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba1019e82c0cd42c779a4356bfa197a23d8fb395", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/ba1019e82c0cd42c779a4356bfa197a23d8fb395", "committedDate": "2020-07-30T15:38:10Z", "message": "Add test cases for geometry_to_bing_tiles\n\nThese test cases at the boundary of tiles, for which we've had problems\nin the past.  In addition, this adds 2 commented out tests, because they\ncurrently fail.  A fix for this bug is in the later commits in this PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f28e53a6d7bacef2139874b627ac81eff54fb5", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/79f28e53a6d7bacef2139874b627ac81eff54fb5", "committedDate": "2020-07-30T15:38:10Z", "message": "Reformatting some geometry_to_bing_tiles tests\n\nIn addition to general legibility, this will make the changes in the later\ncommits easier to see."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe873e9695d46cbceaf32288b634f6abe475d689", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/fe873e9695d46cbceaf32288b634f6abe475d689", "committedDate": "2020-07-30T15:38:10Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "106db28c8cd5eb74852eb0668bdc25004d654b7e", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/106db28c8cd5eb74852eb0668bdc25004d654b7e", "committedDate": "2020-07-28T23:35:17Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}, "afterCommit": {"oid": "fe873e9695d46cbceaf32288b634f6abe475d689", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/fe873e9695d46cbceaf32288b634f6abe475d689", "committedDate": "2020-07-30T15:38:10Z", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 333, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}