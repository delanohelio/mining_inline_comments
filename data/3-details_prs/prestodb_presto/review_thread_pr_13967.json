{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTA2NzU0", "number": 13967, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjowMzo0NFrODYC1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMjoxNVrODZsNVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTM4OTE1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjowMzo0NFrOFdrdDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNzozOFrOFd27MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NDk3Mg==", "bodyText": "@bhhari Filter expressions that get optimized into null should be eliminated at the query planning phase. Why is this not happening? CC: @highker", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r366664972", "createdAt": "2020-01-15T02:03:44Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -177,8 +178,15 @@ public ConnectorPageSource createPageSource(ConnectorTransactionHandle transacti\n             TypeManager typeManager,\n             LoadingCache<RowExpressionCacheKey, RowExpression> rowExpressionCache)\n     {\n-        Set<HiveColumnHandle> interimColumns = ImmutableSet.<HiveColumnHandle>builder()\n-                .addAll(layout.getPredicateColumns().values())\n+        RowExpression optimizedRemainingPredicate = rowExpressionCache.getUnchecked(new RowExpressionCacheKey(layout.getRemainingPredicate(), session));\n+\n+        ImmutableSet.Builder<HiveColumnHandle> interimColumnsBuilder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4350626cb69399a8163f04ab44cb629c99b224ef"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1MjkxMw==", "bodyText": "@bhhari There is another scenario that needs to be handled. An original expression may use 3 columns, but optimized one only one column. In this case, we need to scan only one column, not three.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r366852913", "createdAt": "2020-01-15T12:37:38Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -177,8 +178,15 @@ public ConnectorPageSource createPageSource(ConnectorTransactionHandle transacti\n             TypeManager typeManager,\n             LoadingCache<RowExpressionCacheKey, RowExpression> rowExpressionCache)\n     {\n-        Set<HiveColumnHandle> interimColumns = ImmutableSet.<HiveColumnHandle>builder()\n-                .addAll(layout.getPredicateColumns().values())\n+        RowExpression optimizedRemainingPredicate = rowExpressionCache.getUnchecked(new RowExpressionCacheKey(layout.getRemainingPredicate(), session));\n+\n+        ImmutableSet.Builder<HiveColumnHandle> interimColumnsBuilder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NDk3Mg=="}, "originalCommit": {"oid": "4350626cb69399a8163f04ab44cb629c99b224ef"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODc5MjM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjoxMzoyNlrOFeMKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjo1OTowM1rOFeMtog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMDg1NQ==", "bodyText": "@bhhari Looks like there is some redundancy here. The expression is being split into tuple domain and remaining predicate and these parts are being checked for \"always-false\" separately. Let's just optimize the whole expression and check the result.\nLooks like translatedExpression.getRemainingExpression(), can be replaced by expression and logic using translatedExpression can be removed.\n        // optimize rowExpression and return ValuesNode if false. e.g. 0=1 => false, 1>2 => false, (a = 1 and a = 2) => false\n        RowExpression optimizedRemainingExpression = new RowExpressionOptimizer(metadata).optimize(expression, OPTIMIZED, session.toConnectorSession());\n        if (optimizedRemainingExpression instanceof ConstantExpression) {\n            ConstantExpression constantExpression = (ConstantExpression) optimizedRemainingExpression;\n            if (FALSE_CONSTANT.equals(constantExpression) || constantExpression.getValue() == null) {\n                return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n            }\n        }\n\nThere is still a question about the case when optimized expression is not always-false, but rather uses fewer columns when original expression. This will generate an error, right?", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367200855", "createdAt": "2020-01-16T02:13:26Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "diffHunk": "@@ -329,6 +333,14 @@ public static PlanNode pushPredicateIntoTableScan(\n             return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n         }\n \n+        RowExpression optimizedRemainingExpression = new RowExpressionOptimizer(metadata).optimize(translatedExpression.getRemainingExpression(), OPTIMIZED, session.toConnectorSession());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3bcbe703327b1e3035294cb5809e1654be6c942"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwNTkzNA==", "bodyText": "yes mentioned that in the commit message, it looks like if we use the optmization level as \"Optimize\" we can not serialize it back. This commit only solves the case where its null/false", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367205934", "createdAt": "2020-01-16T02:38:54Z", "author": {"login": "bhhari"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "diffHunk": "@@ -329,6 +333,14 @@ public static PlanNode pushPredicateIntoTableScan(\n             return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n         }\n \n+        RowExpression optimizedRemainingExpression = new RowExpressionOptimizer(metadata).optimize(translatedExpression.getRemainingExpression(), OPTIMIZED, session.toConnectorSession());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMDg1NQ=="}, "originalCommit": {"oid": "c3bcbe703327b1e3035294cb5809e1654be6c942"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwNjYxOA==", "bodyText": "@bhhari  Are you planning to add another commit to fix the remaining issue. Something similar to the original fix could work. E.g. prune the predicate columns on the worker after optimizing the remaining expression.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367206618", "createdAt": "2020-01-16T02:42:05Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "diffHunk": "@@ -329,6 +333,14 @@ public static PlanNode pushPredicateIntoTableScan(\n             return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n         }\n \n+        RowExpression optimizedRemainingExpression = new RowExpressionOptimizer(metadata).optimize(translatedExpression.getRemainingExpression(), OPTIMIZED, session.toConnectorSession());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMDg1NQ=="}, "originalCommit": {"oid": "c3bcbe703327b1e3035294cb5809e1654be6c942"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwOTg5MA==", "bodyText": "I m going to update the same commit, prune it during the planning", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367209890", "createdAt": "2020-01-16T02:59:03Z", "author": {"login": "bhhari"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "diffHunk": "@@ -329,6 +333,14 @@ public static PlanNode pushPredicateIntoTableScan(\n             return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n         }\n \n+        RowExpression optimizedRemainingExpression = new RowExpressionOptimizer(metadata).optimize(translatedExpression.getRemainingExpression(), OPTIMIZED, session.toConnectorSession());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMDg1NQ=="}, "originalCommit": {"oid": "c3bcbe703327b1e3035294cb5809e1654be6c942"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg2Njc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxMzoxNFrOFeM4GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxMzoxNFrOFeM4GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMjU2OA==", "bodyText": "Let's add a test case for expression over multiple columns being optimized into an expression over fewer columns.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367212568", "createdAt": "2020-01-16T03:13:14Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1911,7 +1911,9 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n         domainPredicate.getDomains().get().keySet().stream()\n                 .map(Subfield::getRootName)\n                 .forEach(predicateColumnNames::add);\n-        extractAll(decomposedFilter.getRemainingExpression()).stream()\n+        // optimize the remaining expression before adding to predicateColumns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02aedacfb0e16e7369b701a77e39b68765d0cee9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg2ODY0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxNDo1OVrOFeM5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowNjowMVrOFeeyuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMjg2NA==", "bodyText": "I'm seeing the following test case failing. It used to work because PickTableLayout extracted tuple domain and checked for isNone. I don't think that's a proper way though. It seems like HiveMetadata.pushdownFilter needs to check decomposedFilter.getTupleDomain() for isNone.\n        assertPlan(pushdownFilterEnabled(), \"SELECT linenumber FROM lineitem WHERE linenumber > 10 AND linenumber < 0\",\n                output(values(\"linenumber\")));", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367212864", "createdAt": "2020-01-16T03:14:59Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1911,7 +1911,9 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n         domainPredicate.getDomains().get().keySet().stream()\n                 .map(Subfield::getRootName)\n                 .forEach(predicateColumnNames::add);\n-        extractAll(decomposedFilter.getRemainingExpression()).stream()\n+        // optimize the remaining expression before adding to predicateColumns\n+        RowExpression optimizedRemainingExpression = rowExpressionService.getExpressionOptimizer().optimize(decomposedFilter.getRemainingExpression(), OPTIMIZED, session);\n+        extractAll(optimizedRemainingExpression).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02aedacfb0e16e7369b701a77e39b68765d0cee9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMzU0NQ==", "bodyText": "yes looks like the optimization does not do a good job there, so I will put my previous version", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367223545", "createdAt": "2020-01-16T04:15:44Z", "author": {"login": "bhhari"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1911,7 +1911,9 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n         domainPredicate.getDomains().get().keySet().stream()\n                 .map(Subfield::getRootName)\n                 .forEach(predicateColumnNames::add);\n-        extractAll(decomposedFilter.getRemainingExpression()).stream()\n+        // optimize the remaining expression before adding to predicateColumns\n+        RowExpression optimizedRemainingExpression = rowExpressionService.getExpressionOptimizer().optimize(decomposedFilter.getRemainingExpression(), OPTIMIZED, session);\n+        extractAll(optimizedRemainingExpression).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMjg2NA=="}, "originalCommit": {"oid": "02aedacfb0e16e7369b701a77e39b68765d0cee9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNjEwNA==", "bodyText": "@bhhari The previous version is masking the bug in the connector, but it doesn't fix it. The connector must handle properly the case when tuple domain part of the expression matches nothing (e.g. isNone() == true). Currently, it treats it as if any value matches. You can see that the bug is still there, by changing the query to use range filters on struct subfields:\nSELECT id FROM test WHERE x.a > 10 AND x.a < 0\n\nHere, the connector simply drops the filter as if it is always true.\nA proper fix could be to\n\n[Hive connector] check isNone on tuple domain and return new ConnectorPushdownFilterResult(getTableLayout(session, currentLayoutHandle.get()), FALSE_CONSTANT);\n[Hive connector] check if optimized remaining expression is always false and  return new ConnectorPushdownFilterResult(getTableLayout(session, currentLayoutHandle.get()), FALSE_CONSTANT);\n[Engine/PickTableLayout] Optimize entire expression and, if always false, return ValuesNode without calling the connector. This optimization is optional though. There might not be any reason to put it in. E.g. the change might be to just remove the existing optimization that extracts tuple domain and checks it for isNone.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r367506104", "createdAt": "2020-01-16T16:06:01Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1911,7 +1911,9 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n         domainPredicate.getDomains().get().keySet().stream()\n                 .map(Subfield::getRootName)\n                 .forEach(predicateColumnNames::add);\n-        extractAll(decomposedFilter.getRemainingExpression()).stream()\n+        // optimize the remaining expression before adding to predicateColumns\n+        RowExpression optimizedRemainingExpression = rowExpressionService.getExpressionOptimizer().optimize(decomposedFilter.getRemainingExpression(), OPTIMIZED, session);\n+        extractAll(optimizedRemainingExpression).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMjg2NA=="}, "originalCommit": {"oid": "02aedacfb0e16e7369b701a77e39b68765d0cee9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDA2ODA0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDozNDoxMVrOFf1ScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyMDoyN1rOFgJKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyMzI0OA==", "bodyText": "I think it would be clearer to make an empty layout and run this check earlier in this method\nI would also update PickTableLayout to remove the logic of extracting TupleDomain and checking for none.\n\nprivate static final ConnectorTableLayout EMPTY_TABLE_LAYOUT = new ConnectorTableLayout(new ConnectorTableLayoutHandle() {}) {};\n\n        ExtractionResult<Subfield> decomposedFilter = rowExpressionService.getDomainTranslator()\n                .fromPredicate(session, filter, new SubfieldExtractor(functionResolution, rowExpressionService.getExpressionOptimizer(), session).toColumnExtractor());\n        if (currentLayoutHandle.isPresent()) {\n            HiveTableLayoutHandle currentHiveLayout = (HiveTableLayoutHandle) currentLayoutHandle.get();\n            decomposedFilter = intersectExtractionResult(decomposedFilter, new ExtractionResult(currentHiveLayout.getDomainPredicate(), currentHiveLayout.getRemainingPredicate()));\n        }\n\n        if (decomposedFilter.getTupleDomain().isNone()) {\n            return new ConnectorPushdownFilterResult(EMPTY_TABLE_LAYOUT, FALSE_CONSTANT);\n        }\n\n        RowExpression optimizedRemainingExpression = rowExpressionService.getExpressionOptimizer().optimize(decomposedFilter.getRemainingExpression(), OPTIMIZED, session);\n        if (optimizedRemainingExpression instanceof ConstantExpression) {\n            ConstantExpression constantExpression = (ConstantExpression) optimizedRemainingExpression;\n            if (FALSE_CONSTANT.equals(constantExpression) || constantExpression.getValue() == null) {\n                return new ConnectorPushdownFilterResult(EMPTY_TABLE_LAYOUT, FALSE_CONSTANT);\n            }\n        }", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r368923248", "createdAt": "2020-01-21T10:34:11Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1894,8 +1895,25 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n             }\n         }\n \n+        SchemaTableName tableName = ((HiveTableHandle) tableHandle).getSchemaTableName();\n         HivePartitionResult hivePartitionResult = partitionManager.getPartitions(metastore, tableHandle, constraint, session);\n \n+        //if TupleDomain isNone or optmized remaningExpression is false return ConnectorPushdownFilterResult with TupleDomain.none() layout\n+        if (decomposedFilter.getTupleDomain().isNone()) {\n+            return new ConnectorPushdownFilterResult(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0ODc3OA==", "bodyText": "\"I would also update PickTableLayout to remove the logic of extracting TupleDomain and checking for none.\"  This will result in assertion failure in MetadaManager.pushdownFilter", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r369248778", "createdAt": "2020-01-21T21:20:27Z", "author": {"login": "bhhari"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1894,8 +1895,25 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n             }\n         }\n \n+        SchemaTableName tableName = ((HiveTableHandle) tableHandle).getSchemaTableName();\n         HivePartitionResult hivePartitionResult = partitionManager.getPartitions(metastore, tableHandle, constraint, session);\n \n+        //if TupleDomain isNone or optmized remaningExpression is false return ConnectorPushdownFilterResult with TupleDomain.none() layout\n+        if (decomposedFilter.getTupleDomain().isNone()) {\n+            return new ConnectorPushdownFilterResult(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyMzI0OA=="}, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDA4NTE1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDozOTo1MVrOFf1czg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDozOTo1MVrOFf1czg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNTkwMg==", "bodyText": "This logic relies on the execution to optimize the expression before evaluation. Let's add a comment to highlight this requirement.\n        // Include only columns referenced in the optimized expression. Although the expression is sent to the worker node \n        // unoptimized, the worker is expected to optimize the expression before executing.\n        extractAll(optimizedRemainingExpression).stream()\n                .map(VariableReferenceExpression::getName)\n                .forEach(predicateColumnNames::add);", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r368925902", "createdAt": "2020-01-21T10:39:51Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1911,37 +1929,42 @@ public ConnectorPushdownFilterResult pushdownFilter(ConnectorSession session, Co\n         domainPredicate.getDomains().get().keySet().stream()\n                 .map(Subfield::getRootName)\n                 .forEach(predicateColumnNames::add);\n-        extractAll(decomposedFilter.getRemainingExpression()).stream()\n+        extractAll(optimizedRemainingExpression).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEwNDE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveLogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NTo1OVrOFf1oOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NTo1OVrOFf1oOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyODgyNg==", "bodyText": "Let's also add test cases where both tuple domain and remaining predicate are present, but one of them is always-false.\nLet's update comments for consistency, e.g. use \"remaining predicate\" or \"filter function\" but not both\nnit: capitalize SQL keywords in the queries: orderkey = 1 AND orderkey = 2\nLet's add a test case for always-false tuple domain on subfield; I'd put this into testPushdownFilterOnSubfields method\n\n        // Remaining predicate is NULL\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE cardinality(NULL) > 0\",\n                output(values(\"linenumber\")));\n\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE orderkey > 10 AND cardinality(NULL) > 0\",\n                output(values(\"linenumber\")));\n\n        // Remaining predicate is always FALSE\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE cardinality(ARRAY[1]) > 1\",\n                output(values(\"linenumber\")));\n\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE orderkey > 10 AND cardinality(ARRAY[1]) > 1\",\n                output(values(\"linenumber\")));\n\n        // TupleDomain predicate is always FALSE\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE orderkey = 1 AND orderkey = 2\",\n                output(values(\"linenumber\")));\n\n        assertPlan(pushdownFilterEnabled, \"SELECT linenumber FROM lineitem WHERE orderkey = 1 AND orderkey = 2 AND linenumber % 2 = 1\",\n                output(values(\"linenumber\")));\n\n-- testPushdownFilterOnSubfields\n\n        // TupleDomain predicate is always FALSE\n        assertPlan(pushdownFilterEnabled(), \"SELECT id FROM test_pushdown_filter_on_subfields WHERE c.a = 1 AND c.a = 2\",\n                output(values(\"id\")));", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r368928826", "createdAt": "2020-01-21T10:45:59Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveLogicalPlanner.java", "diffHunk": "@@ -181,6 +182,17 @@ public void testPushdownFilter()\n                 output(exchange(project(\n                         filter(\"mod(orderkey, 2) = 1\",\n                                 strictTableScan(\"lineitem\", identityMap(\"linenumber\", \"orderkey\")))))));\n+        // Null remaining predicate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEwODE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NzoyMlrOFf1qxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NzoyMlrOFf1qxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyOTQ3OA==", "bodyText": "use assertQueryReturnsEmptyResult here", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r368929478", "createdAt": "2020-01-21T10:47:22Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -644,6 +644,7 @@ public void testStructs()\n         // filter-only struct\n         assertQueryUsingH2Cte(\"SELECT orderkey FROM lineitem_ex WHERE info IS NOT NULL\");\n         assertQueryUsingH2Cte(\"SELECT orderkey FROM lineitem_ex WHERE info IS NOT NULL AND info.orderkey = 16515\", rewriter);\n+        assertQueryUsingH2Cte(\"SELECT orderkey FROM lineitem_ex WHERE info IS NOT NULL AND info.orderkey = 16515 and info.orderkye = 16516\", rewriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDMzNjMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjoxMTo1M1rOFf32qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjoxMTo1M1rOFf32qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NTI4OA==", "bodyText": "This query is a bit difficult to understand. Consider a simpler one:\nSELECT partkey FROM lineitem WHERE orderkey > 10 OR if(json_extract(json_parse('{}'), '$.a') IS NOT NULL, quantity * discount) > 0\n\nThe results of that query can be verified and the verification could double-serve as documentation:\n        assertQuery(\"SELECT partkey FROM lineitem WHERE orderkey > 10 OR if(json_extract(json_parse('{}'), '$.a') IS NOT NULL, quantity * discount) > 0\",\n                \"SELECT partkey FROM lineitem WHERE orderkey > 10\");\n\nIt would be nice to add this test to TestHiveLogicalPlanner where we can verify explicitly the list of columns in layout.predicateColumns.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r368965288", "createdAt": "2020-01-21T12:11:53Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -1033,6 +1034,15 @@ public void testNans()\n         }\n     }\n \n+    @Test\n+    public void testFilterFunctionsWithOptimization()\n+    {\n+        // the RowExpressionOptimizer optimizes the second part of the 2nd cardinality function to null hence not pushing down the linenumber as required predicate column\n+        assertQuerySucceeds(getSession(), \"SELECT partkey FROM lineitem WHERE \" +\n+                \"cardinality(ARRAY_INTERSECT(ARRAY[orderkey], map_values(CAST(json_extract(json_parse('{\\\"a\\\": {\\\"a1\\\": {\\\"0\\\": 1}}}'),concat(concat('$.', 'a'), '[\\\"a1\\\"]')) AS MAP(VARCHAR, BIGINT))))) > 0 \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd14e0d63451c8a03c775685b147e63fa21872"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjY1MTU1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMToxOFrOFgOMeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMToxOFrOFgOMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMTMyMA==", "bodyText": "This comment is too low level for this high-level test. Consider removing.", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r369331320", "createdAt": "2020-01-22T01:31:18Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -1033,6 +1034,14 @@ public void testNans()\n         }\n     }\n \n+    @Test\n+    public void testFilterFunctionsWithOptimization()\n+    {\n+        // the RowExpressionOptimizer optimizes the second part of the 2nd cardinality function to null hence not pushing down the linenumber as required predicate column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947665b8b038257b8beeab09c7f60138edd8748"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjY1MzAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMjoxNVrOFgONVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMjoxNVrOFgONVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMTU0Mw==", "bodyText": "typos: replaceExpression() may further optimize the expression; if the resulting expression is always false, then return empty Values node", "url": "https://github.com/prestodb/presto/pull/13967#discussion_r369331543", "createdAt": "2020-01-22T01:32:15Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PickTableLayout.java", "diffHunk": "@@ -323,17 +324,17 @@ public static PlanNode pushPredicateIntoTableScan(\n             expression = predicate;\n         }\n \n-        // optimize rowExpression and return ValuesNode if false. e.g. 0=1 => false, 1>2 => false, (a = 1 and a = 2) => false\n-        DomainTranslator.ExtractionResult<VariableReferenceExpression> translatedExpression = translator.fromPredicate(session.toConnectorSession(), expression, BASIC_COLUMN_EXTRACTOR);\n-        if (translatedExpression.getTupleDomain().isNone()) {\n-            return new ValuesNode(idAllocator.getNextId(), node.getOutputVariables(), ImmutableList.of());\n-        }\n-\n         BiMap<VariableReferenceExpression, VariableReferenceExpression> symbolToColumnMapping = node.getAssignments().entrySet().stream()\n                 .collect(toImmutableBiMap(\n                         Map.Entry::getKey,\n                         entry -> new VariableReferenceExpression(getColumnName(session, metadata, node.getTable(), entry.getValue()), entry.getKey().getType())));\n-        PushdownFilterResult pushdownFilterResult = metadata.pushdownFilter(session, node.getTable(), replaceExpression(expression, symbolToColumnMapping));\n+\n+        RowExpression replacedExpression = replaceExpression(expression, symbolToColumnMapping);\n+        // replaceExpression() may further optimize the expression, if the resulting expression is false and return an empty result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947665b8b038257b8beeab09c7f60138edd8748"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3143, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}