{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzk3ODY0", "number": 14137, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NjowOFrODiff2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyMzo0NVrODqirjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk0MjMzOnYy", "diffSide": "RIGHT", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NjowOFrOFtxVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NjowOFrOFtxVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzODUzNg==", "bodyText": "Store this enum set as a constant", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383538536", "createdAt": "2020-02-24T21:56:08Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk1MzE5OnYy", "diffSide": "RIGHT", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1OTo1NlrOFtxcLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjowMToyN1rOFtxfJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ==", "bodyText": "This is\n\nFrom wikipedia? The Vincenty formula? Worth commenting.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383540269", "createdAt": "2020-02-24T21:59:56Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));\n+        validateSphericalType(\"ST_Distance\", rightGeometry, EnumSet.of(POINT));\n+        Point leftPoint = (Point) leftGeometry.getEsriGeometry();\n+        Point rightPoint = (Point) rightGeometry.getEsriGeometry();\n+\n+        // greatCircleDistance returns distance in KM.\n+        return greatCircleDistance(leftPoint.getY(), leftPoint.getX(), rightPoint.getY(), rightPoint.getX()) * 1000;\n+    }\n+\n+    public static double greatCircleDistance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MTAyOA==", "bodyText": "Oh this is pulled from elsewhere, well you can ignore me then if you really want to.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383541028", "createdAt": "2020-02-24T22:01:27Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));\n+        validateSphericalType(\"ST_Distance\", rightGeometry, EnumSet.of(POINT));\n+        Point leftPoint = (Point) leftGeometry.getEsriGeometry();\n+        Point rightPoint = (Point) rightGeometry.getEsriGeometry();\n+\n+        // greatCircleDistance returns distance in KM.\n+        return greatCircleDistance(leftPoint.getY(), leftPoint.getX(), rightPoint.getY(), rightPoint.getX()) * 1000;\n+    }\n+\n+    public static double greatCircleDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ=="}, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA3ODczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo0Njo0MVrOFtyp0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo0Njo0MVrOFtyp0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MDE0NA==", "bodyText": "oops, also test", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383560144", "createdAt": "2020-02-24T22:46:41Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {\n+                    return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) < radius.getAsDouble();\n+                }\n+                else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n+                    return (buildGeometry, probeGeometry, radius) -> buildGeometry.distance(probeGeometry) <= radius.getAsDouble();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA5ODU4OnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo1NDoyOFrOFty1-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo1NDoyOFrOFty1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MzI1OA==", "bodyText": "Where is the partitioned test?", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383563258", "createdAt": "2020-02-24T22:54:28Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java", "diffHunk": "@@ -311,6 +311,19 @@ public void testDistanceQuery()\n                                                         anyTree(values(ImmutableMap.of(\"b_lng\", 0, \"b_lat\", 1))))))))));\n     }\n \n+    @Test\n+    public void testSphericalDistanceQuery()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTMwMDg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozMDo0N1rOFt0xaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozMDo0N1rOFt0xaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NDg1OQ==", "bodyText": "If everything that follows is euclidian instead of spherical then stuff those into a sub-function the same as you did for sphericalSpatialTest.\nAlso do we care to handle mixed signatures here (some spherical, some not?). What is the right behavior there?", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383594859", "createdAt": "2020-02-25T00:30:47Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1726,7 +1731,14 @@ else if (probeSymbols.contains(new SymbolReference(secondVariable.getName())) &&\n \n         private SpatialPredicate spatialTest(CallExpression functionCall, boolean probeFirst, Optional<OperatorType> comparisonOperator)\n         {\n-            QualifiedFunctionName functionName = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle()).getName();\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle());\n+            QualifiedFunctionName functionName = functionMetadata.getName();\n+\n+            if (functionMetadata.getArgumentTypes().stream().allMatch((typeSignature)\n+                    -> typeSignature.equals(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE))) {\n+                return sphericalSpatialTest(functionName, comparisonOperator);\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTMwMzcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozMjoxMVrOFt0zDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTozMToyMFrOF0meEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NTI3OA==", "bodyText": "Instead of repeating .get() pull it onto the stack and rename the parameter so it doesn't conflict? Don't feel strongly about it, but it feels a hair nicer.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383595278", "createdAt": "2020-02-25T00:32:11Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMDU2Mw==", "bodyText": "It's a little tricky, because comparisonOperator is empty for a bunch of cases, so we can only extract it out a little.  I'm tempted to leave it as is.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r390700563", "createdAt": "2020-03-11T01:31:20Z", "author": {"login": "jagill"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NTI3OA=="}, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTM0OTkwOnYy", "diffSide": "LEFT", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyMzo0NVrOF6WtzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1NTo1NlrOF7ZrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzkwMQ==", "bodyText": "just curious why this todo didn't move.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r396733901", "createdAt": "2020-03-23T20:23:45Z", "author": {"login": "rschlussel"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1390,28 +1352,7 @@ private static boolean envelopes(Slice left, Slice right, EnvelopesPredicate pre\n     @SqlType(DOUBLE)\n     public static Double stSphericalDistance(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice left, @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice right)\n     {\n-        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n-        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n-        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n-            return null;\n-        }\n-\n-        // TODO: support more SphericalGeography types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMTAwNQ==", "bodyText": "I'm not sure what the Presto conventions are for comment TODOs.  No one is actively working on that, and it seems like an issue is a better place to maintain a record of things to do?", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r397831005", "createdAt": "2020-03-25T12:55:56Z", "author": {"login": "jagill"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1390,28 +1352,7 @@ private static boolean envelopes(Slice left, Slice right, EnvelopesPredicate pre\n     @SqlType(DOUBLE)\n     public static Double stSphericalDistance(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice left, @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice right)\n     {\n-        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n-        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n-        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n-            return null;\n-        }\n-\n-        // TODO: support more SphericalGeography types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzkwMQ=="}, "originalCommit": {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3071, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}