{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODcyNTEx", "number": 15257, "title": "Add unit tests on async cache restore", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-10-01T00:26:12Z", "url": "https://github.com/prestodb/presto/pull/15257", "merged": true, "mergeCommit": {"oid": "a93082917f2a62a8fd525b733ba9a849ef649180"}, "closed": true, "closedAt": "2020-10-02T22:47:15Z", "author": {"login": "apc999"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOUbiIgBqjM4MzA1MzQwMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOrw6TgFqTUwMTQxODY0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59bd2e417cbce48a38ea7da5c7abfce47baf982f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/59bd2e417cbce48a38ea7da5c7abfce47baf982f", "committedDate": "2020-10-01T00:23:49Z", "message": "Add unit tests on async cache restore"}, "afterCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/74b2665c21d5f58234decabdb480e62da181c680", "committedDate": "2020-10-01T17:00:05Z", "message": "Add unit tests on async cache restore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODY1MDQz", "url": "https://github.com/prestodb/presto/pull/15257#pullrequestreview-500865043", "createdAt": "2020-10-02T05:18:46Z", "commit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjk5NzI1", "url": "https://github.com/prestodb/presto/pull/15257#pullrequestreview-501299725", "createdAt": "2020-10-02T16:58:43Z", "commit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo1ODo0M1rOHb045w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowMjo0OFrOHb1AUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDEzNQ==", "bodyText": "cacheDirectory", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498940135", "createdAt": "2020-10-02T16:58:43Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,9 +191,29 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n+            throws Exception\n+    {\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDir = new File(badCacheDirectory.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDM0NA==", "bodyText": "merge into one line", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498940344", "createdAt": "2020-10-02T16:59:11Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -199,8 +224,66 @@ public void testCreationFailure()\n                 .setBaseDirectory(cacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));\n         try {\n-            cachingFileSystem(configuration);\n+            AlluxioCachingFileSystem fileSystem = cachingFileSystem(configuration);\n+            long state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MTgyNg==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498941826", "createdAt": "2020-10-02T17:02:24Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -199,8 +224,66 @@ public void testCreationFailure()\n                 .setBaseDirectory(cacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));\n         try {\n-            cachingFileSystem(configuration);\n+            AlluxioCachingFileSystem fileSystem = cachingFileSystem(configuration);\n+            long state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());\n+            // different cases of read can still proceed even cache is read-only or not-in-use\n+            byte[] buffer = new byte[PAGE_SIZE * 2];\n+            int pageOffset = PAGE_SIZE;\n+            // new read\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + 10, buffer, 0, 100), 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + 10, buffer, 0, 100);\n+\n+            // read within the cached page\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + 20, buffer, 0, 90), 90);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 90);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + 20, buffer, 0, 90);\n+\n+            // read partially after the range of the cache\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE - 10, buffer, 0, 100), 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 2 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE - 10, buffer, 0, 100);\n+\n+            // read partially before the range of the cache\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset - 10, buffer, 10, 50), 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 2 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset - 10, buffer, 10, 50);\n+\n+            // skip one page\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE * 3, buffer, 40, 50), 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE * 3, buffer, 40, 50);\n+\n+            // read between cached pages\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE * 2 - 10, buffer, 400, PAGE_SIZE + 20), PAGE_SIZE + 20);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, PAGE_SIZE + 20);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 3 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE * 2 - 10, buffer, 400, PAGE_SIZE + 20);\n+\n+            state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MjAzMg==", "bodyText": "cacheDirectory", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498942032", "createdAt": "2020-10-02T17:02:48Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,9 +191,29 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n+            throws Exception\n+    {\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDir = new File(badCacheDirectory.getPath());\n+        cacheDir.setWritable(false);\n+        CacheConfig cacheConfig = new CacheConfig()\n+                .setCacheType(ALLUXIO)\n+                .setCachingEnabled(true)\n+                .setBaseDirectory(badCacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n+        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        try {\n+            cachingFileSystem(configuration);\n+        }\n+        finally {\n+            cacheDir.setWritable(true);\n+        }\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicReadWithAsyncRestoreFailure()\n             throws Exception\n     {\n         File cacheDir = new File(cacheDirectory.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74b2665c21d5f58234decabdb480e62da181c680", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/74b2665c21d5f58234decabdb480e62da181c680", "committedDate": "2020-10-01T17:00:05Z", "message": "Add unit tests on async cache restore"}, "afterCommit": {"oid": "f040525f76def109094849efb50e4f5aea7c4af5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/f040525f76def109094849efb50e4f5aea7c4af5", "committedDate": "2020-10-02T17:14:30Z", "message": "Add unit tests on async cache restore"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f040525f76def109094849efb50e4f5aea7c4af5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/f040525f76def109094849efb50e4f5aea7c4af5", "committedDate": "2020-10-02T17:14:30Z", "message": "Add unit tests on async cache restore"}, "afterCommit": {"oid": "bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "committedDate": "2020-10-02T17:50:18Z", "message": "Add unit tests on async cache restore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "committedDate": "2020-10-02T17:51:01Z", "message": "Add unit tests on async cache restore"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "committedDate": "2020-10-02T17:50:18Z", "message": "Add unit tests on async cache restore"}, "afterCommit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/prestodb/presto/commit/5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "committedDate": "2020-10-02T17:51:01Z", "message": "Add unit tests on async cache restore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDE3NzE5", "url": "https://github.com/prestodb/presto/pull/15257#pullrequestreview-501417719", "createdAt": "2020-10-02T20:09:57Z", "commit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDowOTo1N1rOHb6Q1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDowOTo1N1rOHb6Q1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODE4MA==", "bodyText": "nit: may be just se literal directly?", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r499028180", "createdAt": "2020-10-02T20:09:57Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,24 +191,100 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n             throws Exception\n     {\n-        File cacheDir = new File(cacheDirectory.getPath());\n-        cacheDir.setWritable(false);\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDirectory = new File(badCacheDirectory.getPath());\n+        cacheDirectory.setWritable(false);\n         CacheConfig cacheConfig = new CacheConfig()\n                 .setCacheType(ALLUXIO)\n                 .setCachingEnabled(true)\n-                .setBaseDirectory(cacheDirectory);\n+                .setBaseDirectory(badCacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n         try {\n             cachingFileSystem(configuration);\n         }\n         finally {\n-            cacheDir.setWritable(true);\n+            cacheDirectory.setWritable(true);\n+        }\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicReadWithAsyncRestoreFailure()\n+            throws Exception\n+    {\n+        File cacheDirectory = new File(this.cacheDirectory.getPath());\n+        cacheDirectory.setWritable(false);\n+        CacheConfig cacheConfig = new CacheConfig()\n+                .setCacheType(ALLUXIO)\n+                .setCachingEnabled(true)\n+                .setBaseDirectory(this.cacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n+        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDE4NTQ1", "url": "https://github.com/prestodb/presto/pull/15257#pullrequestreview-501418545", "createdAt": "2020-10-02T20:11:20Z", "commit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxMToyMFrOHb6Tig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxMToyMFrOHb6Tig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODg3NA==", "bodyText": "I understand that this would be made accessible in later versions?", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r499028874", "createdAt": "2020-10-02T20:11:20Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -234,6 +315,21 @@ public void testInitialization()\n         assertEquals(metricsDomain, conf.get(\"sink.jmx.domain\", \"bad result\"));\n     }\n \n+    // TODO: update unit tests after CacheManager.reset() is available to avoid using reflection to modify singleton\n+    private void resetCacheManager()\n+            throws Exception\n+    {\n+        Field field = CacheManager.Factory.class.getDeclaredField(\"CACHE_MANAGER\");\n+        field.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDE4NjQw", "url": "https://github.com/prestodb/presto/pull/15257#pullrequestreview-501418640", "createdAt": "2020-10-02T20:11:31Z", "commit": {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4824, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}