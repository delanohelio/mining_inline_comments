{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1Mjc0NDAz", "number": 662, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowMDowOVrOEu-PKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowMDo1MlrOEu-PaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Njg5NjQwOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowMDowOVrOHjra5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODowMzo1M1rOHlKjfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzYwNA==", "bodyText": "Fields are not allowed in tests. Can you please refactor and inline in a method that is called by both tests? You may need to inline TaskListener.NULL and launcher as well.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/662#discussion_r507173604", "createdAt": "2020-10-18T15:00:09Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import hudson.Launcher;\n+import hudson.matrix.MatrixAggregator;\n+import hudson.matrix.MatrixBuild;\n+import hudson.matrix.MatrixProject;\n+import hudson.model.BuildListener;\n+import hudson.util.DescribableList;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Tests the class {@link MatrixBridge}.\n+ *\n+ * @author Naveen Sundar\n+ */\n+public class MatrixBridgeTest {\n+    // to be tested\n+    private MatrixBridge matrixBridge;\n+\n+    // Dependencies\n+    private MatrixBuild build;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd30fbddbb0ac76e6ac93c6308452c2c403274bf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMjI4Ng==", "bodyText": "ok", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/662#discussion_r508732286", "createdAt": "2020-10-20T18:03:53Z", "author": {"login": "naveennvrgup"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import hudson.Launcher;\n+import hudson.matrix.MatrixAggregator;\n+import hudson.matrix.MatrixBuild;\n+import hudson.matrix.MatrixProject;\n+import hudson.model.BuildListener;\n+import hudson.util.DescribableList;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Tests the class {@link MatrixBridge}.\n+ *\n+ * @author Naveen Sundar\n+ */\n+public class MatrixBridgeTest {\n+    // to be tested\n+    private MatrixBridge matrixBridge;\n+\n+    // Dependencies\n+    private MatrixBuild build;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzYwNA=="}, "originalCommit": {"oid": "fd30fbddbb0ac76e6ac93c6308452c2c403274bf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Njg5NzA1OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowMDo1MlrOHjrbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODowMzozOFrOHlKjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzY4NA==", "bodyText": "We are using AssertJ in the whole project.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/662#discussion_r507173684", "createdAt": "2020-10-18T15:00:52Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import hudson.Launcher;\n+import hudson.matrix.MatrixAggregator;\n+import hudson.matrix.MatrixBuild;\n+import hudson.matrix.MatrixProject;\n+import hudson.model.BuildListener;\n+import hudson.util.DescribableList;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Tests the class {@link MatrixBridge}.\n+ *\n+ * @author Naveen Sundar\n+ */\n+public class MatrixBridgeTest {\n+    // to be tested\n+    private MatrixBridge matrixBridge;\n+\n+    // Dependencies\n+    private MatrixBuild build;\n+    private Launcher launcher;\n+    private BuildListener listener;\n+    private IssuesRecorder issuesRecorder;\n+\n+    private MatrixProject matrixProject;\n+    private DescribableList describableList;\n+\n+    @Before\n+    public void setup() {\n+        matrixBridge = new MatrixBridge();\n+\n+        build = mock(MatrixBuild.class);\n+        launcher = mock(Launcher.class);\n+        listener = mock(BuildListener.class);\n+        issuesRecorder = mock(IssuesRecorder.class);\n+\n+        matrixProject = mock(MatrixProject.class);\n+        describableList = mock(DescribableList.class);\n+\n+        // stubbing\n+        when(build.getParent()).thenReturn(matrixProject);\n+        when(matrixProject.getPublishersList()).thenReturn(describableList);\n+    }\n+\n+    @Test\n+    public void constructMatrixAggregatorWithoutRecorder() {\n+        when(describableList.get(IssuesRecorder.class)).thenReturn(null);\n+\n+        MatrixAggregator aggregator = matrixBridge.createAggregator(build, launcher, listener);\n+\n+        assertNull(aggregator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd30fbddbb0ac76e6ac93c6308452c2c403274bf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMjE2MA==", "bodyText": "got it \ud83d\udc4d . AssertJ it is", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/662#discussion_r508732160", "createdAt": "2020-10-20T18:03:38Z", "author": {"login": "naveennvrgup"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/MatrixBridgeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import hudson.Launcher;\n+import hudson.matrix.MatrixAggregator;\n+import hudson.matrix.MatrixBuild;\n+import hudson.matrix.MatrixProject;\n+import hudson.model.BuildListener;\n+import hudson.util.DescribableList;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Tests the class {@link MatrixBridge}.\n+ *\n+ * @author Naveen Sundar\n+ */\n+public class MatrixBridgeTest {\n+    // to be tested\n+    private MatrixBridge matrixBridge;\n+\n+    // Dependencies\n+    private MatrixBuild build;\n+    private Launcher launcher;\n+    private BuildListener listener;\n+    private IssuesRecorder issuesRecorder;\n+\n+    private MatrixProject matrixProject;\n+    private DescribableList describableList;\n+\n+    @Before\n+    public void setup() {\n+        matrixBridge = new MatrixBridge();\n+\n+        build = mock(MatrixBuild.class);\n+        launcher = mock(Launcher.class);\n+        listener = mock(BuildListener.class);\n+        issuesRecorder = mock(IssuesRecorder.class);\n+\n+        matrixProject = mock(MatrixProject.class);\n+        describableList = mock(DescribableList.class);\n+\n+        // stubbing\n+        when(build.getParent()).thenReturn(matrixProject);\n+        when(matrixProject.getPublishersList()).thenReturn(describableList);\n+    }\n+\n+    @Test\n+    public void constructMatrixAggregatorWithoutRecorder() {\n+        when(describableList.get(IssuesRecorder.class)).thenReturn(null);\n+\n+        MatrixAggregator aggregator = matrixBridge.createAggregator(build, launcher, listener);\n+\n+        assertNull(aggregator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzY4NA=="}, "originalCommit": {"oid": "fd30fbddbb0ac76e6ac93c6308452c2c403274bf"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4728, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}