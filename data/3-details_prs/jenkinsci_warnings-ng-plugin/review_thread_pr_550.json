{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTA4ODQ4", "number": 550, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NjoyN1rOENUwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNzo0NVrOES0LvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA3MDkzOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NjoyN1rOGv8XWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NjoyN1rOGv8XWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTI3NQ==", "bodyText": "the case should be consistent for each section\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    + \"- ### %d Outstanding Issues\\n\"\n          \n          \n            \n                                    + \"- ### %d outstanding Issues\\n\"", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452925275", "createdAt": "2020-07-10T15:46:27Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA3MzcxOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NzoxNlrOGv8ZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NzoxNlrOGv8ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTczMw==", "bodyText": "I think presentation layer code should be extracted to a different class", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452925733", "createdAt": "2020-07-10T15:47:16Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA3OTk0OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0OTowOVrOGv8dGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1NTo0NlrOGwVRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng==", "bodyText": "hmm I see check annotations showing up on unchanged files do we want that?\nhttps://github.com/XiongKezhi/codingstyle/pull/1/files", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452926746", "createdAt": "2020-07-10T15:49:09Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMjk0OA==", "bodyText": "I'm not sure how we can recognize the changed files of a PR, maybe just report new or delta issues?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452932948", "createdAt": "2020-07-10T16:00:12Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzOTAzNA==", "bodyText": "probably a separate change, should be doable though", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452939034", "createdAt": "2020-07-10T16:11:38Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5OTI4MQ==", "bodyText": "I think it can happen that files will get a new (or old warning) that is in a file that is not part of the PR. Simple use case: add a new checkstyle rule to the configuration. Maybe it makes sense to add it as a configurable option later?\nI think in the beginning we should start with new warnings only:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withAnnotations(extractChecksAnnotations(result.getIssues()))\n          \n          \n            \n                                    .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n          \n      \n    \n    \n  \n\n(It would make sense to have this configurable for a job later)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453099281", "createdAt": "2020-07-10T22:08:10Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNjg1Nw==", "bodyText": "On the other hand: in order to test everything it makes sense to use all warnings. Otherwise we need to change the sources to get some output...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453106857", "createdAt": "2020-07-10T22:35:32Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4OTE2Nw==", "bodyText": "Probably use configuration later, so is the configuration a responsibility for consumers instead of the API itself?\nBTW, what kind of tests we need here? Unit test (test the ChecksDetails constructed) or integration as well?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453189167", "createdAt": "2020-07-11T12:14:58Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyODc1OA==", "bodyText": "Yes, it makes sense that consumers may offer configuration properties for the Checks API.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453328758", "createdAt": "2020-07-12T15:12:48Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyODk1OQ==", "bodyText": "For the tests: I don't think that we need integration tests. It is already kind of hard to test the API with GitHub so using the warnings plugin in these tests will make it even harder. But I think the class can be easily tested using a unit test. (And if not we can see this as a proof that the API might be changed a little bit to support testing)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453328959", "createdAt": "2020-07-12T15:14:52Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyOTQ2Mg==", "bodyText": "Agree on the unit-test.\nFor the configurations, I'm implementing the \"disable checks publishing\" feature as a start, I'll push it later, then we can discuss more other configurations.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453329462", "createdAt": "2020-07-12T15:18:53Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzQyMQ==", "bodyText": "consumers responsibility, I would go with new only for now, it's simple to introduce a spotbugs / checkstyle error for demonstration purposes", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453333421", "createdAt": "2020-07-12T15:55:46Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjc0Ng=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA5MTcyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MjoxMlrOGv8kHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjozODoxN1rOGwHfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyODU0MA==", "bodyText": "I don't think Neutral is the same as Warning\npossibly:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return ChecksConclusion.NEUTRAL;\n          \n          \n            \n                            return ChecksConclusion.FAILURE;", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452928540", "createdAt": "2020-07-10T15:52:12Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNzUxMA==", "bodyText": "WARNING vs. FAILED is a Jenkins specific concept that does not exist in Github", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453107510", "createdAt": "2020-07-10T22:38:17Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyODU0MA=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDExMDU0OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1NzozOFrOGv8v1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMDozMzozMFrOGwMApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTU0Mw==", "bodyText": "I looked into how safe this is,\nIt seems like it in the current state it will only work if all builds are using a github app.\nIf the API and implementation was separated out to different plugins (which I think it needs to be so that warnings-ng doesn't have to depend on github-branch-source) then it would fall back to a NullChecksPublisher and it would be far safer. In that case it would only fail for users with the github-checks plugin installed when they don't have a github app configured.\nThoughts?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452931543", "createdAt": "2020-07-10T15:57:38Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -703,7 +702,8 @@ void publishResult(final Run<?, ?> run, final TaskListener listener, final Strin\n                 reportName, referenceJobName, referenceBuildId, ignoreQualityGate, ignoreFailedBuilds,\n                 getSourceCodeCharset(),\n                 new LogHandler(listener, loggerName, report.getReport()), statusHandler, failOnError);\n-        publisher.attachAction(trendChartType);\n+        ResultAction action = publisher.attachAction(trendChartType);\n+        publisher.publishChecks(action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODg3Mg==", "bodyText": "Not all builds, but builds from a github-branch-source project, for other project builds, they will still get NullChecksPublisher which is safe to use.\nBut for the stable use of warnings-plugin (since it is going to be used for ci.jenkin.io), maybe it's better to split the plugin before releasing this feature for warnings-ng? @uhafner", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r452958872", "createdAt": "2020-07-10T16:50:54Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -703,7 +702,8 @@ void publishResult(final Run<?, ?> run, final TaskListener listener, final Strin\n                 reportName, referenceJobName, referenceBuildId, ignoreQualityGate, ignoreFailedBuilds,\n                 getSourceCodeCharset(),\n                 new LogHandler(listener, loggerName, report.getReport()), statusHandler, failOnError);\n-        publisher.attachAction(trendChartType);\n+        ResultAction action = publisher.attachAction(trendChartType);\n+        publisher.publishChecks(action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTU0Mw=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDM0MA==", "bodyText": "We cannot release the changes in the warning plugin before we do an official release of the Checks API to the update center anyway.\nShouldn't the ChecksPublisherFactory return a NullPublisher if the GitHub App is not configured for the run?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453110340", "createdAt": "2020-07-10T22:49:53Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -703,7 +702,8 @@ void publishResult(final Run<?, ?> run, final TaskListener listener, final Strin\n                 reportName, referenceJobName, referenceBuildId, ignoreQualityGate, ignoreFailedBuilds,\n                 getSourceCodeCharset(),\n                 new LogHandler(listener, loggerName, report.getReport()), statusHandler, failOnError);\n-        publisher.attachAction(trendChartType);\n+        ResultAction action = publisher.attachAction(trendChartType);\n+        publisher.publishChecks(action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTU0Mw=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3OTg5Ng==", "bodyText": "ah, currently not, but it can be easily done if it is safer.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453179896", "createdAt": "2020-07-11T10:10:45Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -703,7 +702,8 @@ void publishResult(final Run<?, ?> run, final TaskListener listener, final Strin\n                 reportName, referenceJobName, referenceBuildId, ignoreQualityGate, ignoreFailedBuilds,\n                 getSourceCodeCharset(),\n                 new LogHandler(listener, loggerName, report.getReport()), statusHandler, failOnError);\n-        publisher.attachAction(trendChartType);\n+        ResultAction action = publisher.attachAction(trendChartType);\n+        publisher.publishChecks(action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTU0Mw=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MTYwNg==", "bodyText": "yes it should be done", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453181606", "createdAt": "2020-07-11T10:33:30Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -703,7 +702,8 @@ void publishResult(final Run<?, ?> run, final TaskListener listener, final Strin\n                 reportName, referenceJobName, referenceBuildId, ignoreQualityGate, ignoreFailedBuilds,\n                 getSourceCodeCharset(),\n                 new LogHandler(listener, loggerName, report.getReport()), statusHandler, failOnError);\n-        publisher.attachAction(trendChartType);\n+        ResultAction action = publisher.attachAction(trendChartType);\n+        publisher.publishChecks(action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTU0Mw=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTE0MTgzOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1OTozMlrOGwGw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjowMToxM1rOGwNqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withName(result.getId())\n          \n          \n            \n                            .withName(labelProvider.getName())", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453095679", "createdAt": "2020-07-10T21:59:32Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MTE0NA==", "bodyText": "Prefer using labelProvider.getId() since the doc uses \"code-coverage\" as an example.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453191144", "createdAt": "2020-07-11T12:38:45Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNjIwNg==", "bodyText": "what doc? name is fine imo", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453206206", "createdAt": "2020-07-11T15:34:17Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNjQ0MQ==", "bodyText": "the GitHub doc for check run: https://docs.github.com/en/rest/reference/checks#check-runs.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453206441", "createdAt": "2020-07-11T15:36:43Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNzYzMQ==", "bodyText": "from what I've seen elsewhere including the checks on this PR everyone else is putting human readable names there.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453207631", "createdAt": "2020-07-11T15:51:21Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODU5OA==", "bodyText": "I'll change it then", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453208598", "createdAt": "2020-07-11T16:01:13Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTY3OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTE0NzQyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMToxOFrOGwG0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMToxOFrOGwG0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NjQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n          \n          \n            \n                                    .withTitle(labelProvider.getLinkName())", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453096488", "createdAt": "2020-07-10T22:01:18Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIwMTE4OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNTo1OFrOGwHSyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNTo1OFrOGwHSyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNDMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withDetailsURL(result.getOwner().getParent().getAbsoluteUrl() + result.getOwner().getSearchUrl()\n          \n          \n            \n                                    + result.getId())\n          \n          \n            \n                            .withDetailsURL(action.getAbsoluteUrl())", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453104331", "createdAt": "2020-07-10T22:25:58Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(result.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(StringUtils.capitalize(result.getId()) + \" Warnings\")\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getIssues()))\n+                        .build())\n+                .withDetailsURL(result.getOwner().getParent().getAbsoluteUrl() + result.getOwner().getSearchUrl()\n+                        + result.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIwMzExOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNzowM1rOGwHT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNzowM1rOGwHT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNDYxMw==", "bodyText": "Required later:\nLabelProvider labelProvider = action.getLabelProvider();", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453104613", "createdAt": "2020-07-10T22:27:03Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    public void publishChecks(final ResultAction action) {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIwNDQ4OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNzo1NVrOGwHUvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoyNzo1NVrOGwHUvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNDgzMQ==", "bodyText": "This code would be better placed in a separate class", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453104831", "createdAt": "2020-07-10T22:27:55Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -148,6 +159,29 @@ ResultAction attachAction(final TrendChartType trendChartType) {\n         return action;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIxOTY2OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjozNjoyNVrOGwHdiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjozNjoyNVrOGwHdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNzA4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"* low: \" + low + \"\\n\"\n          \n          \n            \n                    return \"* Low: \" + low + \"\\n\"", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453107083", "createdAt": "2020-07-10T22:36:25Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIyMDIxOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjozNjo1M1rOGwHd5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjozNjo1M1rOGwHd5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNzE3NA==", "bodyText": "I think it would make more sense to sort the other way round (in the output)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453107174", "createdAt": "2020-07-10T22:36:53Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIyODMxOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo0MTo0MlrOGwHihw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTowMzo0OFrOGwU65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODM1OQ==", "bodyText": "The warnings plugin uses the magic value of 0 to indicate a warning for the whole file. Maybe I should map that to real values in analysis-model. However, columns can be 0 if not used, is this a problem or do we need to suppress the call in such cases?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453108359", "createdAt": "2020-07-10T22:41:42Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3OTEwNA==", "bodyText": "GitHub accepts 0 for the line field, but when using 0, the annotation will not be shown on the file changes view, it will only show in the check run page, so maybe GitHub thinks the same way as you do.\nFor columns, I didn't see anything different with or without it, same for multiple lines annotation \ud83e\udd37", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453179104", "createdAt": "2020-07-11T10:00:31Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODM1OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNzc4MA==", "bodyText": "maybe use line 1?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453207780", "createdAt": "2020-07-11T15:53:06Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODM1OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMxNDU2MA==", "bodyText": "I have not met such warnings for the whole file, what kind of these warnings are? Shouldn't the biggest unit in a file for these static analysis tools is class instead of the whole file?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453314560", "createdAt": "2020-07-12T13:08:19Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODM1OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzU4OA==", "bodyText": "A search for .hasLineStart(0) in my test suite returns 77 matches \ud83d\ude04 So there are a lot of them. I don't know if that is useful though...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453327588", "createdAt": "2020-07-12T15:03:48Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesPublisher.java", "diffHunk": "@@ -243,4 +277,64 @@ private QualityGateEvaluationMode determineQualityGateEvaluationMode(final Repor\n         }\n         return qualityGateEvaluationMode;\n     }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d Outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* low: \" + low + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Error: \" + error + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+                return ChecksConclusion.FAILURE;\n+            case WARNING:\n+                return ChecksConclusion.NEUTRAL;\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODM1OQ=="}, "originalCommit": {"oid": "84bd84b6519a5f2fca0c506bfafcf0e895e14571"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjAzNDY0OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjowNDoxOVrOGwNrHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTowNjozOVrOGwU8nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODg2Mg==", "bodyText": "Anything else can we do here for INACTIVE quality gate?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453208862", "createdAt": "2020-07-11T16:04:19Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+\n+import hudson.model.Result;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static hudson.model.Result.*;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Actually publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    void publishChecks() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(labelProvider.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build());\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE: // TODO:  determine conclusion for it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a237d0043011bb986f232e5838801b16d52fc2f9"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyODAyOQ==", "bodyText": "I don't think so for the moment. If users want to fail a GitHub check because of some warnings but do not want to configure a quality gate in Jenkins then they need to open a feature request in the warnings plugin.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453328029", "createdAt": "2020-07-12T15:06:39Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+\n+import hudson.model.Result;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static hudson.model.Result.*;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Actually publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n+     */\n+    void publishChecks() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(new ChecksDetailsBuilder()\n+                .withName(labelProvider.getId())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build());\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE: // TODO:  determine conclusion for it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODg2Mg=="}, "originalCommit": {"oid": "a237d0043011bb986f232e5838801b16d52fc2f9"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzA2NzQyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1ODozOFrOGwVSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1ODozOFrOGwVSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzY1OA==", "bodyText": "how about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Actually publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.\n          \n          \n            \n                 * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub checks.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453333658", "createdAt": "2020-07-12T15:58:38Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+\n+import hudson.model.Result;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static hudson.model.Result.*;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Actually publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a237d0043011bb986f232e5838801b16d52fc2f9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE3Nzg5OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxODoxNzo0MFrOGwWHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxMTo1M1rOGwaGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzIwNA==", "bodyText": "Booleans should not include is at the start the getter will include that", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453347204", "createdAt": "2020-07-12T18:17:40Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java", "diffHunk": "@@ -58,6 +58,7 @@\n     private String referenceJobName = StringUtils.EMPTY;\n     private String referenceBuildId = StringUtils.EMPTY;\n     private boolean failOnError = false; // by default, it should not fail on error\n+    private boolean isChecksPublishingDisabled = false; // by default, warnings should be published to SCM platforms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f36d693948c4c3d45310d5cc677cc202c0efe4c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMjQ4Mw==", "bodyText": "Just follows the similar options: \n  \n    \n      warnings-ng-plugin/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n    \n    \n         Line 104\n      in\n      b2b19b2\n    \n    \n    \n    \n\n        \n          \n           private boolean isBlameDisabled; \n        \n    \n  \n\n\nIs this style used because the optional is used for disabling a feature? @uhafner", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453412483", "createdAt": "2020-07-13T03:11:53Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java", "diffHunk": "@@ -58,6 +58,7 @@\n     private String referenceJobName = StringUtils.EMPTY;\n     private String referenceBuildId = StringUtils.EMPTY;\n     private boolean failOnError = false; // by default, it should not fail on error\n+    private boolean isChecksPublishingDisabled = false; // by default, warnings should be published to SCM platforms", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzIwNA=="}, "originalCommit": {"oid": "2f36d693948c4c3d45310d5cc677cc202c0efe4c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE3ODIyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxODoxODoxMFrOGwWHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxODozMToxMVrOGwWMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzI0NA==", "bodyText": "Should be isChecksPublishingDisabled and the pmd disable removed", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453347244", "createdAt": "2020-07-12T18:18:10Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -362,6 +363,21 @@ public void setForensicsDisabled(final boolean forensicsDisabled) {\n         isForensicsDisabled = forensicsDisabled;\n     }\n \n+    /**\n+     * Returns whether checks publishing should be disabled.\n+     *\n+     * @return {@code true} if checks publishing should be disabled\n+     */\n+    @SuppressWarnings(\"PMD.BooleanGetMethodName\")\n+    public boolean getChecksPublishingDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f36d693948c4c3d45310d5cc677cc202c0efe4c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0ODUzOQ==", "bodyText": "I would probably call it publishChecks.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r453348539", "createdAt": "2020-07-12T18:31:11Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -362,6 +363,21 @@ public void setForensicsDisabled(final boolean forensicsDisabled) {\n         isForensicsDisabled = forensicsDisabled;\n     }\n \n+    /**\n+     * Returns whether checks publishing should be disabled.\n+     *\n+     * @return {@code true} if checks publishing should be disabled\n+     */\n+    @SuppressWarnings(\"PMD.BooleanGetMethodName\")\n+    public boolean getChecksPublishingDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzI0NA=="}, "originalCommit": {"oid": "2f36d693948c4c3d45310d5cc677cc202c0efe4c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjg2NTAyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo0Mzo1MFrOGxKKlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo1NjozNFrOGxSbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5OTk1OQ==", "bodyText": "Note that using a positive setting and true as default will only work for new freestyle jobs. Existing jobs will not publish the results and need to be manually reconfigured. (This is no big thing, I just want to make sure that you are aware of this issue.)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454199959", "createdAt": "2020-07-14T08:43:50Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -103,7 +103,7 @@\n     private boolean isBlameDisabled;\n     private boolean isForensicsDisabled;\n \n-    private boolean isChecksPublishingDisabled;\n+    private boolean publishChecks = true; // by default, checks will be published", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e3a70424737b979403d797e661826008de4f75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODk0NQ==", "bodyText": "oh, I didn't aware that, maybe it's better to make it backward compatible.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454238945", "createdAt": "2020-07-14T09:51:04Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -103,7 +103,7 @@\n     private boolean isBlameDisabled;\n     private boolean isForensicsDisabled;\n \n-    private boolean isChecksPublishingDisabled;\n+    private boolean publishChecks = true; // by default, checks will be published", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5OTk1OQ=="}, "originalCommit": {"oid": "02e3a70424737b979403d797e661826008de4f75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0NzkxOQ==", "bodyText": "Should be fine...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454247919", "createdAt": "2020-07-14T10:07:34Z", "author": {"login": "timja"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -103,7 +103,7 @@\n     private boolean isBlameDisabled;\n     private boolean isForensicsDisabled;\n \n-    private boolean isChecksPublishingDisabled;\n+    private boolean publishChecks = true; // by default, checks will be published", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5OTk1OQ=="}, "originalCommit": {"oid": "02e3a70424737b979403d797e661826008de4f75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzNTQzNA==", "bodyText": "This is not related to backward compatibility. The question is just if existing users (of Freestyle jobs!) should automatically use the GitHub checks or not. For me it is also ok that they need to manually enable.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454335434", "createdAt": "2020-07-14T12:56:34Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -103,7 +103,7 @@\n     private boolean isBlameDisabled;\n     private boolean isForensicsDisabled;\n \n-    private boolean isChecksPublishingDisabled;\n+    private boolean publishChecks = true; // by default, checks will be published", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5OTk1OQ=="}, "originalCommit": {"oid": "02e3a70424737b979403d797e661826008de4f75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzkyNjA0OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTozODo1OVrOGx6MYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTozODo1OVrOGx6MYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4Njg1MA==", "bodyText": "Remove // comments. These comments typically get out of sync soon.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454986850", "createdAt": "2020-07-15T11:38:59Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzkyOTcxOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0MDowNlrOGx6OjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0MDowNlrOGx6OjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NzQwNQ==", "bodyText": "If you have 2 builds use a variable reference for the first one and run or build for the second one (to make it consistent to most of my other tests)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454987405", "createdAt": "2020-07-15T11:40:06Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzkzMTMzOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0MDozOFrOGx6Phw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0MDozOFrOGx6Phw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NzY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    + \"- ### %d outstanding Issues\\n\"\n          \n          \n            \n                                    + \"- ### %d outstanding issues\\n\"", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454987655", "createdAt": "2020-07-15T11:40:38Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build();\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk4Mjg3OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NjoxOFrOGx6u4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NjoxOFrOGx6u4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTY4MA==", "bodyText": "inline variable", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454995680", "createdAt": "2020-07-15T11:56:18Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk4MzIwOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NjoyNVrOGx6vEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NjoyNVrOGx6vEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTcyOQ==", "bodyText": "inline", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454995729", "createdAt": "2020-07-15T11:56:25Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk4NDQ4OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1Njo0N1rOGx6vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1Njo0N1rOGx6vyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTkxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ChecksDetails createChecksDetailsBasedOnReportFile() {\n          \n          \n            \n                private ChecksDetails createExpectedDetails() {", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454995914", "createdAt": "2020-07-15T11:56:47Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk4NjgwOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NzoyNVrOGx6xMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxODoxMlrOGx9p8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjI3NA==", "bodyText": "Do you have an example output that shows how this is rendered?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454996274", "createdAt": "2020-07-15T11:57:25Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTgyNA==", "bodyText": "No for this specific report :)\nI just copied the checkstyle.xml file from other test cases and constructed the annotation based on what the warnings publisher should do for it.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455029824", "createdAt": "2020-07-15T12:56:50Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjI3NA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNTQ4NA==", "bodyText": "Ok, then I have to wait until I see it in action on my machine. I just wondered if - ###  is valid in markdown since the hashes are used for headers.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455035484", "createdAt": "2020-07-15T13:06:16Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjI3NA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNjA3Mw==", "bodyText": "Is there any specific reason that you sometimes use * and sometimes - for bullet points?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455036073", "createdAt": "2020-07-15T13:07:13Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjI3NA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzU3MA==", "bodyText": "No, I just googled - ### because I want the bullet points with smaller text than ##.\nThe markdown just don't have a unified standard, - ### is valid in GitHub but not valid in somewhere else (say the preview tool: https://markdownlivepreview.com/)\nTurns out * ### is supported by GitHub as well, just tried it. I'll make them consistent.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455043570", "createdAt": "2020-07-15T13:18:12Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjI3NA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk5MTg5OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1ODo1OFrOGx60TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowNDo0MlrOGx9Gcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NzA2OA==", "bodyText": "What are the requirements on GitHub side for the resolution of the filenames? Do they want relative paths starting from the repository root?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r454997068", "createdAt": "2020-07-15T11:58:58Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()\n+                        .withPath(\"X:/Build/Results/jobs/Maven/workspace/tasks/src/main/java/hudson/plugins\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMTQyNA==", "bodyText": "Not officially documented by GitHub, but from what I have done, it's relative paths from the repository root.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455031424", "createdAt": "2020-07-15T12:59:33Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()\n+                        .withPath(\"X:/Build/Results/jobs/Maven/workspace/tasks/src/main/java/hudson/plugins\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NzA2OA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNDQ4Mg==", "bodyText": "Ok, then using getFileName should work. (This is not always so easy since people sometimes design jobs using a complex directory layout. Then it is already hard for my plugin to refer to the correct source code location)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455034482", "createdAt": "2020-07-15T13:04:42Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_REPORT_FILE = \"checkstyle.xml\";\n+    private static final String NEW_REPORT_FILE = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_REPORT_FILE);\n+        enableCheckStyleWarnings(project);\n+\n+        // trigger a build using the report file with 4 issues\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        // trigger a build using the report file with 2 new issues\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_REPORT_FILE);\n+        run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        // extract details from result\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        // verify extracted details\n+        ChecksDetails expectedDetails = createChecksDetailsBasedOnReportFile();\n+        assertThat(details)\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(expectedDetails);\n+    }\n+\n+    private ChecksDetails createChecksDetailsBasedOnReportFile() {\n+        ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n+                .withName(\"CheckStyle\")\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(ChecksConclusion.SUCCESS)\n+                .withDetailsURL(\"http://localhost:39121/jenkins/job/test0/2/\");\n+\n+\n+        ChecksOutput output = new ChecksOutputBuilder()\n+                .withTitle(\"CheckStyle Warnings\")\n+                .withSummary(\"## 6 issues in total:\\n\"\n+                        + \"- ### 2 new issues\\n\"\n+                        + \"- ### 4 outstanding Issues\\n\"\n+                        + \"- ### 2 delta issues\\n\"\n+                        + \"- ### 0 fixed issues\")\n+                .withText(\"## Total Issue Statistics:\\n* Error: 6\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## New Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\"\n+                        + \"## Delta Issue Statistics:\\n* Error: 2\\n* High: 0\\n* Normal: 0\\n* Low: 0\\n\")\n+                .addAnnotation(new ChecksAnnotationBuilder()\n+                        .withPath(\"X:/Build/Results/jobs/Maven/workspace/tasks/src/main/java/hudson/plugins\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NzA2OA=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgxODM3OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMDo1MFrOGyC1Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMDo1MFrOGyC1Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyODM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n          \n          \n            \n                                    .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455128355", "createdAt": "2020-07-15T15:10:50Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgyMzAzOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMjowMFrOGyC4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoyMzoxMFrOGyqs_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE0Ng==", "bodyText": "Then you get for CheckStyle, SpotBugs a detailed description as well:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withRawDetails(issue.getDescription())\n          \n          \n            \n                                    .withRawDetails(labelProvider.getDescription(issue))\n          \n      \n    \n    \n  \n\nThis description will contain HTML tags...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455129146", "createdAt": "2020-07-15T15:12:00Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build();\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+            case WARNING:\n+                return ChecksConclusion.FAILURE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())\n+                        .withEndLine(issue.getLineEnd())\n+                        .withStartColumn(issue.getColumnStart())\n+                        .withEndColumn(issue.getColumnEnd())\n+                        .withRawDetails(issue.getDescription())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0ODI1OA==", "bodyText": "the GitHub just supports markdown (or HTML tag) on the summary and description of the whole output, but not for these specific annotations.\nI'll find a way to extract the plain text as the description (message field) and left the HTML in the raw_details field.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455748258", "createdAt": "2020-07-16T12:28:23Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build();\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+            case WARNING:\n+                return ChecksConclusion.FAILURE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())\n+                        .withEndLine(issue.getLineEnd())\n+                        .withStartColumn(issue.getColumnStart())\n+                        .withEndColumn(issue.getColumnEnd())\n+                        .withRawDetails(issue.getDescription())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE0Ng=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1MjM1NQ==", "bodyText": "Is the getMessage method in Issue just extract the message from the HTML? Then we do not need any further changes.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455752355", "createdAt": "2020-07-16T12:35:52Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build();\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+            case WARNING:\n+                return ChecksConclusion.FAILURE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())\n+                        .withEndLine(issue.getLineEnd())\n+                        .withStartColumn(issue.getColumnStart())\n+                        .withEndColumn(issue.getColumnEnd())\n+                        .withRawDetails(issue.getDescription())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE0Ng=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4MTYzMA==", "bodyText": "The message in Issue returns the header of an issue. The description returns additional information for that issue (from the parsed content). And the description of the labelProvider does return a HTML description of the bug pattern for specific tools (CheckStyle, Spotbugs, PMD), from the tools website or jar file. This part is not in the parsed content. If that part is empty the labelProvider does return the description of the issue. So none of the methods removes the HTML.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r455781630", "createdAt": "2020-07-16T13:23:10Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.util.VisibleForTesting;\n+\n+import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n+import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;\n+import io.jenkins.plugins.analysis.core.util.IssuesStatistics;\n+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksPublisher;\n+import io.jenkins.plugins.checks.api.ChecksPublisherFactory;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+/**\n+ * Publishes warnings as checks to scm platforms.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class WarningChecksPublisher {\n+    private final ResultAction action;\n+\n+    WarningChecksPublisher(final ResultAction action) {\n+        this.action = action;\n+    }\n+\n+    /**\n+     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI,\n+     * e.g. GitHub checks.\n+     */\n+    void publishChecks() {\n+        ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner());\n+        publisher.publish(extractChecksDetails());\n+    }\n+\n+    @VisibleForTesting\n+    ChecksDetails extractChecksDetails() {\n+        AnalysisResult result = action.getResult();\n+        IssuesStatistics totals = result.getTotals();\n+\n+        StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n+\n+        return new ChecksDetailsBuilder()\n+                .withName(labelProvider.getName())\n+                .withStatus(ChecksStatus.COMPLETED)\n+                .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n+                .withOutput(new ChecksOutputBuilder()\n+                        .withTitle(labelProvider.getLinkName())\n+                        .withSummary(extractChecksSummary(totals))\n+                        .withText(extractChecksText(totals))\n+                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\n+                        .build())\n+                .withDetailsURL(action.getAbsoluteUrl())\n+                .build();\n+    }\n+\n+    private String extractChecksSummary(final IssuesStatistics statistics) {\n+        return String.format(\"## %d issues in total:\\n\"\n+                        + \"- ### %d new issues\\n\"\n+                        + \"- ### %d outstanding Issues\\n\"\n+                        + \"- ### %d delta issues\\n\"\n+                        + \"- ### %d fixed issues\",\n+                statistics.getTotalSize(), statistics.getNewSize(), statistics.getTotalSize() - statistics.getNewSize(),\n+                statistics.getDeltaSize(), statistics.getFixedSize());\n+    }\n+\n+    private String extractChecksText(final IssuesStatistics statistics) {\n+        return \"## Total Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getTotalLowSize(), statistics.getTotalNormalSize(),\n+                statistics.getTotalHighSize(), statistics.getTotalErrorSize())\n+                + \"## New Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getNewLowSize(), statistics.getNewNormalSize(),\n+                statistics.getNewHighSize(), statistics.getNewErrorSize())\n+                + \"## Delta Issue Statistics:\\n\"\n+                + generateSeverityText(statistics.getDeltaLowSize(), statistics.getDeltaNormalSize(),\n+                statistics.getDeltaHighSize(), statistics.getDeltaErrorSize());\n+    }\n+\n+    private String generateSeverityText(final int low, final int normal, final int high, final int error) {\n+        return \"* Error: \" + error + \"\\n\"\n+                + \"* High: \" + high + \"\\n\"\n+                + \"* Normal: \" + normal + \"\\n\"\n+                + \"* Low: \" + low + \"\\n\";\n+    }\n+\n+    private ChecksConclusion extractChecksConclusion(final QualityGateStatus status) {\n+        switch (status) {\n+            case INACTIVE:\n+            case PASSED:\n+                return ChecksConclusion.SUCCESS;\n+            case FAILED:\n+            case WARNING:\n+                return ChecksConclusion.FAILURE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported quality gate status: \" + status);\n+        }\n+    }\n+\n+    private List<ChecksAnnotation> extractChecksAnnotations(final Report issues) {\n+        return issues.stream()\n+                .map(issue -> new ChecksAnnotationBuilder()\n+                        .withPath(issue.getFileName())\n+                        .withTitle(issue.getType())\n+                        .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n+                        .withMessage(issue.getSeverity() + \": \" + issue.getMessage())\n+                        .withStartLine(issue.getLineStart())\n+                        .withEndLine(issue.getLineEnd())\n+                        .withStartColumn(issue.getColumnStart())\n+                        .withEndColumn(issue.getColumnEnd())\n+                        .withRawDetails(issue.getDescription())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE0Ng=="}, "originalCommit": {"oid": "4230adf53d5dcd2d3710375d349969e90f6d427f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTgxMjc4OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozMzo1N1rOGz5IwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozMzo1N1rOGz5IwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2NjY4OQ==", "bodyText": "It would make the test more readable if you would also check the value of the quality gate via getAnalysisResult(). From the test one does not see that there are only 6 warnings in the build.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r457066689", "createdAt": "2020-07-20T05:33:57Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Test;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+\n+import hudson.model.AbstractProject;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Result;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateResult;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateType;\n+import io.jenkins.plugins.analysis.warnings.PVSStudio;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_CHECK_STYLE_REPORT = \"checkstyle.xml\";\n+    private static final String NEW_CHECK_STYLE_REPORT = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_CHECK_STYLE_REPORT);\n+        enableCheckStyleWarnings(project);\n+\n+        Run<?, ?> reference = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(reference))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_CHECK_STYLE_REPORT);\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        assertThat(publisher.extractChecksDetails())\n+                .hasFieldOrPropertyWithValue(\"detailsURL\", Optional.of(getResultAction(run).getAbsoluteUrl()))\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(createExpectedCheckStyleDetails());\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsSuccessWhenQualityGateIsPassed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(10, QualityGateType.TOTAL, QualityGateResult.UNSTABLE));\n+\n+        Run<?, ?> build = buildSuccessfully(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4883a1a12aa17d9be8cd7b88101bb80032ae6d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTgxNjU3OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozNToxMFrOGz5K3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozNToxMFrOGz5K3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2NzIyOQ==", "bodyText": "Can you wrap that part in a method and call it with QualityGateResult.FAILURE and QualityGateResult.UNSTABLE. Then we can see that both types correctly map to ChecksConclusion.FAILURE", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r457067229", "createdAt": "2020-07-20T05:35:10Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Test;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+\n+import hudson.model.AbstractProject;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Result;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateResult;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateType;\n+import io.jenkins.plugins.analysis.warnings.PVSStudio;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_CHECK_STYLE_REPORT = \"checkstyle.xml\";\n+    private static final String NEW_CHECK_STYLE_REPORT = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_CHECK_STYLE_REPORT);\n+        enableCheckStyleWarnings(project);\n+\n+        Run<?, ?> reference = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(reference))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_CHECK_STYLE_REPORT);\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        assertThat(publisher.extractChecksDetails())\n+                .hasFieldOrPropertyWithValue(\"detailsURL\", Optional.of(getResultAction(run).getAbsoluteUrl()))\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(createExpectedCheckStyleDetails());\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsSuccessWhenQualityGateIsPassed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(10, QualityGateType.TOTAL, QualityGateResult.UNSTABLE));\n+\n+        Run<?, ?> build = buildSuccessfully(project);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.SUCCESS);\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsFailureWhenQualityGateIsFailed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(1, QualityGateType.TOTAL, QualityGateResult.FAILURE));\n+\n+        Run<?, ?> build = buildWithResult(project, Result.FAILURE);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.FAILURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4883a1a12aa17d9be8cd7b88101bb80032ae6d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTkwOTIyOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowMToxNlrOGz58Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1MToyMFrOG0KrNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3OTg3MA==", "bodyText": "Is the idea here to replace a <a> with plain text? Or shouldn't this be [text](url)?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r457079870", "createdAt": "2020-07-20T06:01:16Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Test;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+\n+import hudson.model.AbstractProject;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Result;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateResult;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateType;\n+import io.jenkins.plugins.analysis.warnings.PVSStudio;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_CHECK_STYLE_REPORT = \"checkstyle.xml\";\n+    private static final String NEW_CHECK_STYLE_REPORT = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_CHECK_STYLE_REPORT);\n+        enableCheckStyleWarnings(project);\n+\n+        Run<?, ?> reference = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(reference))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_CHECK_STYLE_REPORT);\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        assertThat(publisher.extractChecksDetails())\n+                .hasFieldOrPropertyWithValue(\"detailsURL\", Optional.of(getResultAction(run).getAbsoluteUrl()))\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(createExpectedCheckStyleDetails());\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsSuccessWhenQualityGateIsPassed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(10, QualityGateType.TOTAL, QualityGateResult.UNSTABLE));\n+\n+        Run<?, ?> build = buildSuccessfully(project);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.SUCCESS);\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsFailureWhenQualityGateIsFailed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(1, QualityGateType.TOTAL, QualityGateResult.FAILURE));\n+\n+        Run<?, ?> build = buildWithResult(project, Result.FAILURE);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.FAILURE);\n+    }\n+\n+    @Test\n+    public void shouldParseHtmlMessage() {\n+        FreeStyleProject project = createFreeStyleProject();\n+        enableWarnings(project, new PVSStudio());\n+\n+        buildSuccessfully(project);\n+\n+        copySingleFileToWorkspace(project, \"PVSReport.xml\", \"PVSReport.plog\");\n+        Run<?, ?> run = buildSuccessfully(project);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        assertThat(details.getOutput().get().getChecksAnnotations())\n+                .usingElementComparatorOnFields(\"message\")\n+                .containsOnly(new ChecksAnnotationBuilder()\n+                        .withMessage(\"ERROR:\\n\"\n+                                + \"Some diagnostic messages may contain incorrect line number.\\n\"\n+                                + \"V002:https://www.viva64.com/en/w/v002/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4883a1a12aa17d9be8cd7b88101bb80032ae6d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDAzNw==", "bodyText": "The message field doesn't support markdown", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r457354037", "createdAt": "2020-07-20T12:51:20Z", "author": {"login": "XiongKezhi"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.jenkins.plugins.analysis.core.steps;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Test;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+\n+import hudson.model.AbstractProject;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Result;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateResult;\n+import io.jenkins.plugins.analysis.core.util.QualityGate.QualityGateType;\n+import io.jenkins.plugins.analysis.warnings.PVSStudio;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationBuilder;\n+import io.jenkins.plugins.checks.api.ChecksAnnotation.ChecksAnnotationLevel;\n+import io.jenkins.plugins.checks.api.ChecksConclusion;\n+import io.jenkins.plugins.checks.api.ChecksDetails;\n+import io.jenkins.plugins.checks.api.ChecksDetails.ChecksDetailsBuilder;\n+import io.jenkins.plugins.checks.api.ChecksOutput;\n+import io.jenkins.plugins.checks.api.ChecksOutput.ChecksOutputBuilder;\n+import io.jenkins.plugins.checks.api.ChecksStatus;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerTest {\n+    private static final String OLD_CHECK_STYLE_REPORT = \"checkstyle.xml\";\n+    private static final String NEW_CHECK_STYLE_REPORT = \"checkstyle1.xml\";\n+\n+    /**\n+     * Verifies that {@link WarningChecksPublisher} constructs the {@link ChecksDetails} correctly\n+     * with only new issues.\n+     */\n+    @Test\n+    public void shouldCreateChecksDetailsWithNewIssuesAsAnnotations() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(OLD_CHECK_STYLE_REPORT);\n+        enableCheckStyleWarnings(project);\n+\n+        Run<?, ?> reference = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(reference))\n+                .hasTotalSize(4)\n+                .hasNewSize(0);\n+\n+        copyMultipleFilesToWorkspaceWithSuffix(project, NEW_CHECK_STYLE_REPORT);\n+        Run<?, ?> run = buildSuccessfully(project);\n+        assertThat(getAnalysisResult(run))\n+                .hasTotalSize(6)\n+                .hasNewSize(2);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        assertThat(publisher.extractChecksDetails())\n+                .hasFieldOrPropertyWithValue(\"detailsURL\", Optional.of(getResultAction(run).getAbsoluteUrl()))\n+                .usingRecursiveComparison()\n+                .ignoringFields(\"detailsURL\")\n+                .isEqualTo(createExpectedCheckStyleDetails());\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsSuccessWhenQualityGateIsPassed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(10, QualityGateType.TOTAL, QualityGateResult.UNSTABLE));\n+\n+        Run<?, ?> build = buildSuccessfully(project);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.SUCCESS);\n+    }\n+\n+    @Test\n+    public void shouldConcludeChecksAsFailureWhenQualityGateIsFailed() {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(NEW_CHECK_STYLE_REPORT);\n+        enableAndConfigureCheckstyle(project,\n+                recorder -> recorder.addQualityGate(1, QualityGateType.TOTAL, QualityGateResult.FAILURE));\n+\n+        Run<?, ?> build = buildWithResult(project, Result.FAILURE);\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(build));\n+\n+        assertThat(publisher.extractChecksDetails().getConclusion())\n+                .isEqualTo(ChecksConclusion.FAILURE);\n+    }\n+\n+    @Test\n+    public void shouldParseHtmlMessage() {\n+        FreeStyleProject project = createFreeStyleProject();\n+        enableWarnings(project, new PVSStudio());\n+\n+        buildSuccessfully(project);\n+\n+        copySingleFileToWorkspace(project, \"PVSReport.xml\", \"PVSReport.plog\");\n+        Run<?, ?> run = buildSuccessfully(project);\n+\n+        WarningChecksPublisher publisher = new WarningChecksPublisher(getResultAction(run));\n+        ChecksDetails details = publisher.extractChecksDetails();\n+\n+        assertThat(details.getOutput().get().getChecksAnnotations())\n+                .usingElementComparatorOnFields(\"message\")\n+                .containsOnly(new ChecksAnnotationBuilder()\n+                        .withMessage(\"ERROR:\\n\"\n+                                + \"Some diagnostic messages may contain incorrect line number.\\n\"\n+                                + \"V002:https://www.viva64.com/en/w/v002/\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3OTg3MA=="}, "originalCommit": {"oid": "2c4883a1a12aa17d9be8cd7b88101bb80032ae6d"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY0Nzk3OnYy", "diffSide": "RIGHT", "path": "plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNzo0NVrOG4M9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MjoxMVrOG4QEvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ==", "bodyText": "Is this version number ok? Some incompatible changes (new property for the pipeline script) added.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461585805", "createdAt": "2020-07-28T13:37:45Z", "author": {"login": "XiongKezhi"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4OTg3MA==", "bodyText": "don't worry about the version it will be set during release\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <revision>9.0.0</revision>\n          \n          \n            \n                <revision>8.4.0</revision>", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461589870", "createdAt": "2020-07-28T13:43:15Z", "author": {"login": "timja"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ=="}, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxNjE5NA==", "bodyText": "but it will always fail CI which is annoying for development before the release", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461616194", "createdAt": "2020-07-28T14:16:24Z", "author": {"login": "XiongKezhi"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ=="}, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyODU5MA==", "bodyText": "why does it fail CI?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461628590", "createdAt": "2020-07-28T14:32:17Z", "author": {"login": "timja"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ=="}, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTQxNg==", "bodyText": "since it breaks the semantic versioning:\n[ERROR] Failed to execute goal org.revapi:revapi-maven-plugin:0.11.4:check (run-revapi) on project warnings-ng: The following API problems caused the build to fail:\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.PublishIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.RecordIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461631416", "createdAt": "2020-07-28T14:35:41Z", "author": {"login": "XiongKezhi"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ=="}, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNjc5Nw==", "bodyText": "Ah ok", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/550#discussion_r461636797", "createdAt": "2020-07-28T14:42:11Z", "author": {"login": "timja"}, "path": "plugin/pom.xml", "diffHunk": "@@ -21,7 +21,7 @@\n   <url>https://github.com/jenkinsci/warnings-ng-plugin</url>\n \n   <properties>\n-    <revision>8.4.0</revision>\n+    <revision>9.0.0</revision>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTgwNQ=="}, "originalCommit": {"oid": "af01e607274011e50e53192a89593244984d5ca0"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4815, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}