{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDQ0MzM4", "number": 488, "title": "JENKINS-60149: Add UI test for Global Configuration", "bodyText": "@uhafner: Ich sto\u00dfe leider gerade auf eine Wand. Ich hoffe, Sie k\u00f6nnten mir eventuell weiter helfen :)\nUnd zwar habe ich mich f\u00fcr den Test an AffectedFilesResolverITest#shouldShowFileOutsideWorkspaceIfConfigured() gehalten.\nDen Testaufbau habe ich absolut identisch, aber bei mir wird der Link zum Source Code irgendwie nicht erstellt. Das unterschiedliche Ergebnis l\u00e4sst sich auf eine Zeile im Log zur\u00fcck f\u00fchren:\nAn meinem Orientierungstest wird die Datei mit den Issues gelesen und erkannt. Anschlie\u00dfend wird die Datei kopiert und es kommt zu folgender Log-Meldung:\n[GNU C Compiler (gcc)] Creating fingerprints for all affected code blocks to track issues over different builds\n[GNU C Compiler (gcc)] -> created fingerprints for 1 issues (skipped 0 issues)\n[GNU C Compiler (gcc)] Copying affected files to Jenkins' build folder 'C:\\Users\\ANDREA~1\\AppData\\Local\\Temp\\j h8689302102478511521\\jobs\\test0\\builds\\2\\files-with-issues'\n[GNU C Compiler (gcc)] -> 1 copied, 0 not in workspace, 0 not-found, 0 with I/O error\n\nBei meinem Test hingegen wird die Datei nicht kopiert und die Log-Meldung lautet:\n[GNU C Compiler (gcc)] -> created fingerprints for 1 issues (skipped 0 issues)\n[GNU C Compiler (gcc)] Copying affected files to Jenkins' build folder 'E:\\projects\\testen\\warnings-ng-plugin\\ui-tests\\target\\jenkins7580279650552198810home\\jobs\\flexible_knife\\builds\\1\\files-with-issues'\n[GNU C Compiler (gcc)] -> 0 copied, 1 not in workspace, 0 not-found, 0 with I/O error\n\nDer Rest des Logs ist komplett identisch. (Die angegeben Dateipfade sind aufgrund der unterschiedlichen Tests anders. Die Pfade sind aber korrekt)\nIch hab auch die Job- und Systemkonfigurationen zur Laufzeit verglichen und die sind auch identisch.\nHaben Sie eventuell eine Idee, was ich noch \u00fcbersehen haben k\u00f6nnte? Oder habe ich tats\u00e4chlich einen Bug entdeckt? :)", "createdAt": "2020-05-24T17:29:49Z", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488", "merged": true, "mergeCommit": {"oid": "2361f3338f3d07bfdf2e812fe1728c2920307a22"}, "closed": true, "closedAt": "2020-05-31T19:27:59Z", "author": {"login": "astiglme"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckeQVcgH2gAyNDIyNDQ0MzM4Ojg0ZThjMjZkNTQ2MDQ5Y2E0MmNlMWFhMGM3OTA4ZGY0YzY1OGRlNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmw0TzgFqTQyMTUyMTE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "84e8c26d546049ca42ce1aa0c7908df4c658de52", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/84e8c26d546049ca42ce1aa0c7908df4c658de52", "committedDate": "2020-05-24T16:42:21Z", "message": "JENKINS-60149: add source path test for global configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655051830aec40ba8759f95500e12cfd9bab34d3", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/655051830aec40ba8759f95500e12cfd9bab34d3", "committedDate": "2020-05-24T17:13:34Z", "message": "JENKINS-60149: refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d51c58481fef8d1a6f637f4011bbf9fbb4eb2d1", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/7d51c58481fef8d1a6f637f4011bbf9fbb4eb2d1", "committedDate": "2020-05-27T06:56:07Z", "message": "JENKINS-60149: add setter for source directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36dece26580d4f2dd69754a7240a43b65f188530", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/36dece26580d4f2dd69754a7240a43b65f188530", "committedDate": "2020-05-27T07:06:30Z", "message": "JENKINS-60149: add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b641183a2357da4428302541812c94e550c75619", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/b641183a2357da4428302541812c94e550c75619", "committedDate": "2020-05-27T10:33:00Z", "message": "JENKINS-60149: add test for groovy script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "committedDate": "2020-05-27T11:55:39Z", "message": "JENKINS-60149: update documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjQyMTc0", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#pullrequestreview-419642174", "createdAt": "2020-05-27T22:04:40Z", "commit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjowNDo0MFrOGbey1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjowODozM1rOGbe4tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTI3MA==", "bodyText": "JavaDoc f\u00fcr die Klasse", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469270", "createdAt": "2020-05-27T22:04:40Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GroovyConfiguration.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.net.URL;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+\n+import org.jenkinsci.test.acceptance.po.PageObject;\n+\n+public class GroovyConfiguration extends PageObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTM2NA==", "bodyText": "JavaDoc f\u00fcr die Klasse", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469364", "createdAt": "2020-05-27T22:04:54Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GlobalWarningsSettings.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.openqa.selenium.By;\n+\n+import org.jenkinsci.test.acceptance.po.Jenkins;\n+import org.jenkinsci.test.acceptance.po.JenkinsConfig;\n+\n+public class GlobalWarningsSettings extends JenkinsConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTUwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param absolutePath: sourcedirectory path as absoule path.\n          \n          \n            \n                 * @param absolutePath sourcedirectory path as absoule path.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469501", "createdAt": "2020-05-27T22:05:13Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GlobalWarningsSettings.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.openqa.selenium.By;\n+\n+import org.jenkinsci.test.acceptance.po.Jenkins;\n+import org.jenkinsci.test.acceptance.po.JenkinsConfig;\n+\n+public class GlobalWarningsSettings extends JenkinsConfig {\n+\n+    private static final String XPATH_PLUGIN_CONFIG = \"//*[@path='%s']\";\n+\n+    private static final String PATH_PREFIX = \"/io-jenkins-plugins-analysis-\";\n+    private static final String GROOVY_PATH = PATH_PREFIX + \"warnings-groovy-ParserConfiguration/\";\n+    private static final String SOURCE_DIR_PATH = PATH_PREFIX + \"core-model-WarningsPluginConfiguration/\";\n+    private static final String BUTTON_ADD = \"repeatable-add\";\n+    private static final String SOURCE_PATH_FIELD = \"sourceDirectories/path\";\n+    private static final String PARSERS_PREFIX = \"parsers/\";\n+\n+    public GlobalWarningsSettings(final Jenkins jenkins) {\n+        super(jenkins);\n+    }\n+\n+    /**\n+     * Enters the given sourcedirectory path on the system configuration page from jenkins.\n+     * @param absolutePath: sourcedirectory path as absoule path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MDMxMw==", "bodyText": "Es w\u00e4re leichter lesbar, wenn die private Methoden jeweils unter den jeweiligen public tests w\u00e4ren und nicht so abwechselnd.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431470313", "createdAt": "2020-05-27T22:07:20Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MDc3NQ==", "bodyText": "W\u00e4re noch sch\u00f6n, wenn man vorher einen Build starten k\u00f6nnte (ohne Globale Konfiguration), so dass das kopieren fehlschl\u00e4gt.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431470775", "createdAt": "2020-05-27T22:08:33Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjQ3NzIw", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#pullrequestreview-419647720", "createdAt": "2020-05-27T22:15:53Z", "commit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxNTo1M1rOGbfEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxNjo0MFrOGbfF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MzgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void ShouldRunJobWithGroovyConfiguration() {\n          \n          \n            \n                public void shouldRunJobWithGroovyConfiguration() {", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431473831", "createdAt": "2020-05-27T22:15:53Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3Mzk5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long NormalIssueCount = issuesTable.getTableRows().stream()\n          \n          \n            \n                    long normalIssueCount = issuesTable.getTableRows().stream()", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431473997", "createdAt": "2020-05-27T22:16:16Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDA1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long LowIssueCount = issuesTable.getTableRows().stream()\n          \n          \n            \n                    long lowIssueCount = issuesTable.getTableRows().stream()", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431474050", "createdAt": "2020-05-27T22:16:27Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Normal\")).count();\n+\n+        long LowIssueCount = issuesTable.getTableRows().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDEzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(NormalIssueCount).isEqualTo(6);\n          \n          \n            \n                    assertThat(LowIssueCount).isEqualTo(2);\n          \n          \n            \n                    assertThat(normalIssueCount).isEqualTo(6);\n          \n          \n            \n                    assertThat(lowIssueCount).isEqualTo(2);", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431474135", "createdAt": "2020-05-27T22:16:40Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Normal\")).count();\n+\n+        long LowIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Low\")).count();\n+\n+        assertThat(NormalIssueCount).isEqualTo(6);\n+        assertThat(LowIssueCount).isEqualTo(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a"}, "originalPosition": 198}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0802c17e437d293a2f29275077fc75a0b408f90c", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/0802c17e437d293a2f29275077fc75a0b408f90c", "committedDate": "2020-05-28T09:56:08Z", "message": "JENKINS-60149: refactor javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51412961a1c80d222057ead9676bc4a8b9f71495", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/51412961a1c80d222057ead9676bc4a8b9f71495", "committedDate": "2020-05-28T10:03:18Z", "message": "JENKINS-60149: move methods and fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df27f5d5f07eb0f8273afe0241ef58dc4d3e588e", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/df27f5d5f07eb0f8273afe0241ef58dc4d3e588e", "committedDate": "2020-05-28T10:28:30Z", "message": "JENKINS-60149: remove unused attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b793ec9ff71625fd4f0b321d7d7e56c5768781b", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/1b793ec9ff71625fd4f0b321d7d7e56c5768781b", "committedDate": "2020-05-28T10:57:48Z", "message": "JENKINS-60149: add check for failed source file copy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTIxMTkz", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#pullrequestreview-421521193", "createdAt": "2020-05-31T19:27:47Z", "commit": {"oid": "1b793ec9ff71625fd4f0b321d7d7e56c5768781b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 156, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}