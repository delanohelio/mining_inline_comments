{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzY2Njk1", "number": 682, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0MjozMFrOE2hmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0NDo1NFrOE2hnpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjA4OTY1OnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0MjozMFrOHvYGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0MjozMFrOHvYGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQzOTk2OA==", "bodyText": "A lot of warning will go away if you move the class to the bottom.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/682#discussion_r519439968", "createdAt": "2020-11-08T15:42:30Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "diffHunk": "@@ -26,12 +26,37 @@\n \n import io.jenkins.plugins.analysis.core.util.LocalizedSeverity;\n \n+\n /**\n  * Scans a given input stream for open tasks.\n  *\n  * @author Ullrich Hafner\n  */\n class TaskScanner {\n+    class IgnoreSection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15e1e5848ddc33bbaf3790a6bc01bee80414efb4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjA5MDIyOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0Mjo1MlrOHvYGtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0Mjo1MlrOHvYGtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ0MDA1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                class IgnoreSection {\n          \n          \n            \n                private static class IgnoreSection {", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/682#discussion_r519440055", "createdAt": "2020-11-08T15:42:52Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "diffHunk": "@@ -26,12 +26,37 @@\n \n import io.jenkins.plugins.analysis.core.util.LocalizedSeverity;\n \n+\n /**\n  * Scans a given input stream for open tasks.\n  *\n  * @author Ullrich Hafner\n  */\n class TaskScanner {\n+    class IgnoreSection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15e1e5848ddc33bbaf3790a6bc01bee80414efb4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjA5MzgwOnYy", "diffSide": "RIGHT", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxNTo0NDo1NFrOHvYI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToxNDoxMlrOHvlOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ0MDYzMA==", "bodyText": "Can't this be a local variable in the parse method? Otherwise parallel scans will cause problems.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/682#discussion_r519440630", "createdAt": "2020-11-08T15:44:54Z", "author": {"login": "uhafner"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "diffHunk": "@@ -26,12 +26,37 @@\n \n import io.jenkins.plugins.analysis.core.util.LocalizedSeverity;\n \n+\n /**\n  * Scans a given input stream for open tasks.\n  *\n  * @author Ullrich Hafner\n  */\n class TaskScanner {\n+    class IgnoreSection {\n+        private static final String IGNORE_BEGIN = \" task-scanner-ignore-begin\";\n+        private static final String IGNORE_END = \" task-scanner-ignore-end\";\n+\n+        private boolean ignore = false;\n+\n+        public boolean matches(final String line) {\n+            if (line.contains(IGNORE_BEGIN)) {\n+                ignore = true;\n+            }\n+            else if (line.contains(IGNORE_END)) {\n+                ignore = false;\n+            }\n+\n+            return ignore;\n+        }\n+\n+        public void reset() {\n+            ignore = false;\n+        }\n+    }\n+\n+    private final IgnoreSection inIgnoreSection = new IgnoreSection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15e1e5848ddc33bbaf3790a6bc01bee80414efb4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTAzMA==", "bodyText": "Sure, of course. To be honest, I was not aware that one TaskScanner instance is used for all jobs. Will make it a local variable -and get rid of reset() as it is no longer required.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/682#discussion_r519655030", "createdAt": "2020-11-09T09:14:12Z", "author": {"login": "ssproessig"}, "path": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java", "diffHunk": "@@ -26,12 +26,37 @@\n \n import io.jenkins.plugins.analysis.core.util.LocalizedSeverity;\n \n+\n /**\n  * Scans a given input stream for open tasks.\n  *\n  * @author Ullrich Hafner\n  */\n class TaskScanner {\n+    class IgnoreSection {\n+        private static final String IGNORE_BEGIN = \" task-scanner-ignore-begin\";\n+        private static final String IGNORE_END = \" task-scanner-ignore-end\";\n+\n+        private boolean ignore = false;\n+\n+        public boolean matches(final String line) {\n+            if (line.contains(IGNORE_BEGIN)) {\n+                ignore = true;\n+            }\n+            else if (line.contains(IGNORE_END)) {\n+                ignore = false;\n+            }\n+\n+            return ignore;\n+        }\n+\n+        public void reset() {\n+            ignore = false;\n+        }\n+    }\n+\n+    private final IgnoreSection inIgnoreSection = new IgnoreSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ0MDYzMA=="}, "originalCommit": {"oid": "15e1e5848ddc33bbaf3790a6bc01bee80414efb4"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}