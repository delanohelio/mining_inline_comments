{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MjQwODY2", "number": 465, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoyOVrOD6BOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyMDozNVrOD_OApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY0MTU1OnYy", "diffSide": "RIGHT", "path": "plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoyOVrOGRnuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoyOVrOGRnuMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTc3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <version>1.1.1-SNAPSHOT</version>\n          \n          \n            \n                  <version>1.1.0</version>", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r421129779", "createdAt": "2020-05-06T22:30:29Z", "author": {"login": "uhafner"}, "path": "plugin/pom.xml", "diffHunk": "@@ -508,6 +508,12 @@\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>io.jenkins.plugins</groupId>\n+      <artifactId>autograding</artifactId>\n+      <version>1.1.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e084b8c07b008ffeea546d51dcdae22042068458"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzY5NTk4OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyMDo0NFrOGYf2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyMDo0NFrOGYf2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MDczOQ==", "bodyText": "Da wird der Wert von vorher wieder \u00fcberschrieben?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r428340739", "createdAt": "2020-05-20T22:20:44Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd\");\n+\n+        recorder.setTools(checkStyle);\n+        recorder.setTools(spotBugs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c0833d78fecf80c3458ee1c5f4ad029dbcda87"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzcwMjY1OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyMzozMFrOGYf6Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyMzozMFrOGYf6Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MTc2Mw==", "bodyText": "Hier w\u00e4re noch sch\u00f6n, die jeweiligen Results zu holen score.getAnalysisScores(), da sollten ja 3 drin sein. Sonst ist unklar woher die -2 kommt.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r428341763", "createdAt": "2020-05-20T22:23:30Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd\");\n+\n+        recorder.setTools(checkStyle);\n+        recorder.setTools(spotBugs);\n+        recorder.setTools(cpd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        assertThat(score.getAchieved()).isEqualTo(98);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c0833d78fecf80c3458ee1c5f4ad029dbcda87"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzcwNDA0OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyNDowOFrOGYf64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyNDowOFrOGYf64Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MTk4NQ==", "bodyText": "Der Test ist nur im Autograding relevant und kann entfernt werden.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r428341985", "createdAt": "2020-05-20T22:24:08Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd\");\n+\n+        recorder.setTools(checkStyle);\n+        recorder.setTools(spotBugs);\n+        recorder.setTools(cpd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        assertThat(score.getAchieved()).isEqualTo(98);\n+    }\n+\n+    /**\n+     * Makes sure that the autograding plugin interrupts the grading if the configuration is empty.\n+     */\n+    @Test\n+    public void interruptsGradingDueToEmptyConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c0833d78fecf80c3458ee1c5f4ad029dbcda87"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2MzI5OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToxODo0N1rOGZwxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToxODo0N1rOGZwxGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjU4NA==", "bodyText": "K\u00f6nnen Sie den Teil noch raus l\u00f6schen, das verwirrt nur. Dadurch sind es ja 5 Analysis Ergebnisse, aus dem JavaDoc und dem Code oben erwartet man aber nur 4.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Java java = new Java();\n          \n          \n            \n                    for(String file: files) {\n          \n          \n            \n                        java.setPattern(\"**/*\" + file + \"*\");\n          \n          \n            \n                    }\n          \n          \n            \n                    enableWarnings(project, java);", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r429666584", "createdAt": "2020-05-24T19:18:47Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AnalysisScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd*\");\n+\n+        recorder.setTools(checkStyle, spotBugs, cpd, pmd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        List<AnalysisScore> analysisScore = score.getAnalysisScores();\n+        assertThat(score.getAchieved()).isEqualTo(22);\n+        assertThat(analysisScore).hasSize(5);\n+        assertThat(analysisScore.get(0).getTotalImpact()).isEqualTo(0);\n+        assertThat(analysisScore.get(1).getTotalImpact()).isEqualTo(-60);\n+        assertThat(analysisScore.get(2).getTotalImpact()).isEqualTo(-4);\n+        assertThat(analysisScore.get(3).getTotalImpact()).isEqualTo(-2);\n+        assertThat(analysisScore.get(4).getTotalImpact()).isEqualTo(-12);\n+    }\n+\n+    /**\n+     * Create a Freestyle Project with enabled Java warnings.\n+     *\n+     * @param files\n+     *         The files to be imported into the Freestyle project.\n+     *\n+     * @return The created Freestyle Project.\n+     */\n+    private FreeStyleProject createJavaWarningsFreestyleProject(final String... files) {\n+        FreeStyleProject project = createFreeStyleProjectWithWorkspaceFiles(files);\n+        Java java = new Java();\n+        for(String file: files) {\n+            java.setPattern(\"**/*\" + file + \"*\");\n+        }\n+        enableWarnings(project, java);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a842d618cd24446de3ccdcd70d005c0170ed5775"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2MzM5OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToxODo1OVrOGZwxIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToxODo1OVrOGZwxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(analysisScore).hasSize(5);\n          \n          \n            \n                    assertThat(analysisScore).hasSize(4);", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r429666595", "createdAt": "2020-05-24T19:18:59Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AnalysisScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd*\");\n+\n+        recorder.setTools(checkStyle, spotBugs, cpd, pmd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        List<AnalysisScore> analysisScore = score.getAnalysisScores();\n+        assertThat(score.getAchieved()).isEqualTo(22);\n+        assertThat(analysisScore).hasSize(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a842d618cd24446de3ccdcd70d005c0170ed5775"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2NDA4OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyMDoyMlrOGZwxeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyMDoyMlrOGZwxeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(analysisScore.get(0).getTotalImpact()).isEqualTo(0);", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r429666681", "createdAt": "2020-05-24T19:20:22Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AnalysisScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd*\");\n+\n+        recorder.setTools(checkStyle, spotBugs, cpd, pmd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        List<AnalysisScore> analysisScore = score.getAnalysisScores();\n+        assertThat(score.getAchieved()).isEqualTo(22);\n+        assertThat(analysisScore).hasSize(5);\n+        assertThat(analysisScore.get(0).getTotalImpact()).isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a842d618cd24446de3ccdcd70d005c0170ed5775"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2NDIxOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyMDozNVrOGZwxiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyMDozNVrOGZwxiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(analysisScore.get(1).getTotalImpact()).isEqualTo(-60);\n          \n          \n            \n                    assertThat(analysisScore.get(0).getTotalImpact()).isEqualTo(-60);\n          \n          \n            \n                    assertThat(analysisScore.get(0).getId()).isEqualTo(\"checkstyle\");", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/465#discussion_r429666696", "createdAt": "2020-05-24T19:20:35Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/plugins/AutogradingPluginITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings.plugins;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Run;\n+\n+import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n+import io.jenkins.plugins.analysis.warnings.Cpd;\n+import io.jenkins.plugins.analysis.warnings.Java;\n+import io.jenkins.plugins.analysis.warnings.Pmd;\n+import io.jenkins.plugins.analysis.warnings.SpotBugs;\n+import io.jenkins.plugins.analysis.warnings.checkstyle.CheckStyle;\n+import io.jenkins.plugins.grading.AggregatedScore;\n+import io.jenkins.plugins.grading.AnalysisScore;\n+import io.jenkins.plugins.grading.AutoGrader;\n+import io.jenkins.plugins.grading.AutoGradingBuildAction;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * This class tests the compatibility between the warnings-ng and the autograding plugin.\n+ *\n+ * @author Lion Kosiuk\n+ */\n+public class AutogradingPluginITest extends IntegrationTestWithJenkinsPerSuite {\n+\n+    private static final String AUTOGRADER_RESULT = \"{\\\"analysis\\\":{\\\"maxScore\\\":100,\\\"errorImpact\\\":-10,\\\"highImpact\\\":-5,\\\"normalImpact\\\":-2,\\\"lowImpact\\\":-1}}\";\n+\n+    /**\n+     * Ensures that the autographing plugin outputs the expected score after passing the checks.\n+     * Used tools: checkstyle, spotbugs, cpd, pmd\n+     */\n+    @Test\n+    public void checksCorrectGradingWithSeveralTools() {\n+        FreeStyleProject project = createJavaWarningsFreestyleProject(\"checkstyle.xml\", \"spotbugs.xml\", \"cpd.xml\", \"pmd.xml\");\n+\n+        IssuesRecorder recorder = new IssuesRecorder();\n+\n+        CheckStyle checkStyle = new CheckStyle();\n+        checkStyle.setPattern(\"**/*checkstyle*\");\n+\n+        SpotBugs spotBugs = new SpotBugs();\n+        spotBugs.setPattern(\"**/spotbugs*\");\n+\n+        Cpd cpd = new Cpd();\n+        cpd.setPattern(\"**/cpd*\");\n+\n+        Pmd pmd = new Pmd();\n+        pmd.setPattern(\"**/pmd*\");\n+\n+        recorder.setTools(checkStyle, spotBugs, cpd, pmd);\n+\n+        project.getPublishersList().add(recorder);\n+        project.getPublishersList().add(new AutoGrader(AUTOGRADER_RESULT));\n+\n+        Run<?, ?> baseline = buildSuccessfully(project);\n+\n+        List<AutoGradingBuildAction> actions = baseline.getActions(AutoGradingBuildAction.class);\n+        assertThat(actions).hasSize(1);\n+        AggregatedScore score = actions.get(0).getResult();\n+        List<AnalysisScore> analysisScore = score.getAnalysisScores();\n+        assertThat(score.getAchieved()).isEqualTo(22);\n+        assertThat(analysisScore).hasSize(5);\n+        assertThat(analysisScore.get(0).getTotalImpact()).isEqualTo(0);\n+        assertThat(analysisScore.get(1).getTotalImpact()).isEqualTo(-60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a842d618cd24446de3ccdcd70d005c0170ed5775"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4766, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}