{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzkwODgz", "number": 379, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyNzo0MVrODgPFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyOToyM1rODgPFYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI4MDY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyNzo0MVrOFqVX7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyNzo0MVrOFqVX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDcwMw==", "bodyText": "I think it would be more readable if you would inline the variables.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .hasSmallIconUrl(ICONS_URL + ICON_ID + SMALL_ICON_URL_SUFFIX)\n          \n          \n            \n                            .hasSmallIconUrl(\"/plugin/warnings-ng/icons/icon-id-24x24.png\")", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/379#discussion_r379934703", "createdAt": "2020-02-16T21:27:41Z", "author": {"login": "uhafner"}, "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.jenkins.plugins.analysis.core.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * Tests the class {@link IconLabelProvider}.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class IconLabelProviderTest {\n+    private static final String ICON_ID = \"icon-id\";\n+    private static final String TOOL_NAME = \"tool-name\";\n+    private static final String ICON_NAME = \"icon-name\";\n+\n+    /**\n+     * This field has to be the same as in IconLabelProvider. Create this\n+     * to avoid using reflection or adding getters in the origin class.\n+     */\n+    private static final String ICONS_URL = \"/plugin/warnings-ng/icons/\";\n+\n+    private static final String SMALL_ICON_URL_SUFFIX = \"-24x24.png\";\n+    private static final String LARGE_ICON_URL_SUFFIX = \"-48x48.png\";\n+\n+    /**\n+     * Verifies that the name of the icon in URL is obtained from the icon id, if\n+     * the {@code iconName} parameter is empty.\n+     */\n+    @Test\n+    void shouldUseIdIfParameterIconNameIsBlank() {\n+        IconLabelProvider iconLabelProvider = new IconLabelProvider(ICON_ID, TOOL_NAME);\n+\n+        assertThat(iconLabelProvider).hasId(ICON_ID).hasName(TOOL_NAME)\n+                .hasSmallIconUrl(ICONS_URL + ICON_ID + SMALL_ICON_URL_SUFFIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f17ce4a23f85900f830606e0467e312869e80d9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI4MTQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyODo1N1rOFqVYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyODo1N1rOFqVYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDgwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .hasLargeIconUrl(ICONS_URL + ICON_ID + LARGE_ICON_URL_SUFFIX);\n          \n          \n            \n                            .hasLargeIconUrl(\"/plugin/warnings-ng/icons/icon-id-48x48.png\");", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/379#discussion_r379934801", "createdAt": "2020-02-16T21:28:57Z", "author": {"login": "uhafner"}, "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.jenkins.plugins.analysis.core.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * Tests the class {@link IconLabelProvider}.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class IconLabelProviderTest {\n+    private static final String ICON_ID = \"icon-id\";\n+    private static final String TOOL_NAME = \"tool-name\";\n+    private static final String ICON_NAME = \"icon-name\";\n+\n+    /**\n+     * This field has to be the same as in IconLabelProvider. Create this\n+     * to avoid using reflection or adding getters in the origin class.\n+     */\n+    private static final String ICONS_URL = \"/plugin/warnings-ng/icons/\";\n+\n+    private static final String SMALL_ICON_URL_SUFFIX = \"-24x24.png\";\n+    private static final String LARGE_ICON_URL_SUFFIX = \"-48x48.png\";\n+\n+    /**\n+     * Verifies that the name of the icon in URL is obtained from the icon id, if\n+     * the {@code iconName} parameter is empty.\n+     */\n+    @Test\n+    void shouldUseIdIfParameterIconNameIsBlank() {\n+        IconLabelProvider iconLabelProvider = new IconLabelProvider(ICON_ID, TOOL_NAME);\n+\n+        assertThat(iconLabelProvider).hasId(ICON_ID).hasName(TOOL_NAME)\n+                .hasSmallIconUrl(ICONS_URL + ICON_ID + SMALL_ICON_URL_SUFFIX)\n+                .hasLargeIconUrl(ICONS_URL + ICON_ID + LARGE_ICON_URL_SUFFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f17ce4a23f85900f830606e0467e312869e80d9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI4MTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyOToyM1rOFqVYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyOToyM1rOFqVYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDgyMw==", "bodyText": "same as above. It is redundant but better readable...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/379#discussion_r379934823", "createdAt": "2020-02-16T21:29:23Z", "author": {"login": "uhafner"}, "path": "src/test/java/io/jenkins/plugins/analysis/core/model/IconLabelProviderTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.jenkins.plugins.analysis.core.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n+\n+/**\n+ * Tests the class {@link IconLabelProvider}.\n+ *\n+ * @author Kezhi Xiong\n+ */\n+class IconLabelProviderTest {\n+    private static final String ICON_ID = \"icon-id\";\n+    private static final String TOOL_NAME = \"tool-name\";\n+    private static final String ICON_NAME = \"icon-name\";\n+\n+    /**\n+     * This field has to be the same as in IconLabelProvider. Create this\n+     * to avoid using reflection or adding getters in the origin class.\n+     */\n+    private static final String ICONS_URL = \"/plugin/warnings-ng/icons/\";\n+\n+    private static final String SMALL_ICON_URL_SUFFIX = \"-24x24.png\";\n+    private static final String LARGE_ICON_URL_SUFFIX = \"-48x48.png\";\n+\n+    /**\n+     * Verifies that the name of the icon in URL is obtained from the icon id, if\n+     * the {@code iconName} parameter is empty.\n+     */\n+    @Test\n+    void shouldUseIdIfParameterIconNameIsBlank() {\n+        IconLabelProvider iconLabelProvider = new IconLabelProvider(ICON_ID, TOOL_NAME);\n+\n+        assertThat(iconLabelProvider).hasId(ICON_ID).hasName(TOOL_NAME)\n+                .hasSmallIconUrl(ICONS_URL + ICON_ID + SMALL_ICON_URL_SUFFIX)\n+                .hasLargeIconUrl(ICONS_URL + ICON_ID + LARGE_ICON_URL_SUFFIX);\n+    }\n+\n+    /**\n+     * Verifies the name of the icon in URL is obtained from parameter, if the\n+     * {@code iconName} parameter is provided.\n+     */\n+    @Test\n+    void shouldParameterNameIfNotBlank() {\n+        IconLabelProvider iconLabelProvider = new IconLabelProvider(ICON_ID, TOOL_NAME, ICON_NAME);\n+\n+        assertThat(iconLabelProvider).hasId(ICON_ID).hasName(TOOL_NAME)\n+                .hasSmallIconUrl(ICONS_URL + ICON_NAME + SMALL_ICON_URL_SUFFIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f17ce4a23f85900f830606e0467e312869e80d9"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4711, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}