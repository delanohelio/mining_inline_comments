{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTkwNDQ4", "number": 503, "title": "started work on ui-test GitBlamer", "bodyText": "Hallo @uhafner,\nwie besprochen habe ich angefangen den UI-Test zu schreiben. Bisher scheint alles zu laufen, laut Konsolenausgabe wird der \"SCM Blamer\" auch angesto\u00dfen, allerdings ist es mir nicht m\u00f6glich die enstprechenden Tabs aufzufinden ...\n\nHaben Sie einen Tipp?\nViele Gr\u00fc\u00dfe,\nMax\nP.S.: Der Build wird noch nicht funktionieren, da ich Anpassungen an der \"GitRepo\" Klasse aus acceptance-test-harness vornehmen musste.", "createdAt": "2020-05-29T16:02:35Z", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503", "merged": true, "mergeCommit": {"oid": "be31b7248e4e78d6e43d078af79b0937a80bae04"}, "closed": true, "closedAt": "2020-06-19T22:09:58Z", "author": {"login": "MxKilian"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmEqlIAH2gAyNDI1MTkwNDQ4OmI0MjMzYWNlZTY4ZTRlYTZiOGYzNmQ3MDdhOWJlYWZmNjM4NWYyMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcszrV7gH2gAyNDI1MTkwNDQ4OjA4ZTk1OTFhMGFjMmZiMDc4N2U1MTc5NTMxMDNiOGMxYTc0ZTc0MTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b4233acee68e4ea6b8f36d707a9beaff6385f238", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/b4233acee68e4ea6b8f36d707a9beaff6385f238", "committedDate": "2020-05-29T16:01:20Z", "message": "started work on ui-test GitBlamer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61042f1ce8290bb04be7992fda7e3b1196426755", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/61042f1ce8290bb04be7992fda7e3b1196426755", "committedDate": "2020-06-02T07:15:40Z", "message": "cloned GitRepo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc11578e932b6e3f59611631cc2c7811b91ff305", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/dc11578e932b6e3f59611631cc2c7811b91ff305", "committedDate": "2020-06-03T15:46:24Z", "message": "- saving working copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd6f7e03a7be5af21c5823f4893936993e8c519", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/4dd6f7e03a7be5af21c5823f4893936993e8c519", "committedDate": "2020-06-03T16:26:35Z", "message": "- saving working copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8155c503fbc10743a659ea4e28464b0b34546a40", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/8155c503fbc10743a659ea4e28464b0b34546a40", "committedDate": "2020-06-03T16:27:00Z", "message": "Merge branch 'master' into Selenium_UI_Tests_GitBlamer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31681cccfe4b1a626f82ae9389a768ee7b2f3363", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/31681cccfe4b1a626f82ae9389a768ee7b2f3363", "committedDate": "2020-06-05T10:09:28Z", "message": "- saving working copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/ab75419376ccea7c02ccc11fe2b4cae75bc60500", "committedDate": "2020-06-08T13:19:41Z", "message": "- started integrating WorflowJob"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI3Njcx", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#pullrequestreview-426227671", "createdAt": "2020-06-08T13:22:49Z", "commit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMjo0OVrOGgdy3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMjo0OVrOGgdy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTc3NA==", "bodyText": "@uhafner\nHier taucht dann letztendlich das Problem auf, das zu verlinkter Konsolenausgabe f\u00fchrt.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r436695774", "createdAt": "2020-06-08T13:22:49Z", "author": {"login": "MxKilian"}, "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -120,6 +208,38 @@ private Build generate(final GitRepo repo) {\n         return job.startBuild().waitUntilFinished();\n     }\n \n+    private Build generateWorkflowJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+\n+        // workflowJob.sandbox.check();\n+        /* workflowJob.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME); */\n+        workflowJob.setJenkinsFileRepository(repoUrl, USERNAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzM0MzY1", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#pullrequestreview-427334365", "createdAt": "2020-06-09T16:23:28Z", "commit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyMzoyOFrOGhSh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyMzoyOFrOGhSh0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1OTc2Mw==", "bodyText": "Das muss einkommentiert werden, damit das Jenkinsfile im Repo ist.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r437559763", "createdAt": "2020-06-09T16:23:28Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package core;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n+import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.DockerTest;\n+import org.jenkinsci.test.acceptance.junit.WithCredentials;\n+import org.jenkinsci.test.acceptance.junit.WithDocker;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.plugins.git.GitScm;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+import org.jenkinsci.test.acceptance.po.WorkflowJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary;\n+import io.jenkins.plugins.analysis.warnings.BlamesTable;\n+import io.jenkins.plugins.analysis.warnings.BlamesTableRow;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@WithDocker\n+@Category(DockerTest.class)\n+@WithPlugins({\"git\", \"git-forensics\"})\n+@WithCredentials(credentialType = WithCredentials.SSH_USERNAME_PRIVATE_KEY, values = {\"gitplugin\", \"/org/jenkinsci/test/acceptance/docker/fixtures/GitContainer/unsafe\"})\n+public class GitBlamerUITest extends AbstractJUnitTest {\n+\n+    @Inject\n+    DockerContainerHolder<GitContainer> gitServer;\n+\n+    private static final String USERNAME = \"gitplugin\";\n+    private Job job;\n+    private WorkflowJob workflowJob;\n+    private GitContainer container;\n+    private String repoUrl;\n+    private String host;\n+    private int port;\n+\n+    private static final String DETAILS = \"Details\";\n+    private static final String FILE = \"File\";\n+    private static final String AGE = \"Age\";\n+    private static final String AUTHOR = \"Author\";\n+    private static final String EMAIL = \"Email\";\n+    private static final String COMMIT = \"Commit\";\n+    private static final String ADDED = \"Added\";\n+\n+    @Before\n+    public void initGitRepository() {\n+        container = gitServer.get();\n+        repoUrl = container.getRepoUrl();\n+        host = container.host();\n+        port = container.port();\n+        // job = jenkins.jobs.create();    // creates freestyle job\n+        workflowJob = jenkins.jobs.create(WorkflowJob.class);\n+        // job.configure();\n+        workflowJob.configure();\n+    }\n+\n+    // TODO: reactivate the posix file settings before final commit\n+\n+    @Test\n+    public void shouldBlameOneIssueWithFreestyle() {\n+        GitRepo repo = setupInitialGitRepository();\n+        repo.commitFileWithMessage(\"commit\", \"Test.java\",\n+                \"public class Test {}\");\n+        String commitId = repo.getLastSha1();\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+        BlamesTableRow row = blamesTable.getRowAs(0, BlamesTableRow.class);\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(1);\n+        assertColumnHeader(blamesTable);\n+        assertColumnsOfTest(row, commitId);\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithPipeline() throws Exception {\n+        GitRepo repo = new GitRepo();\n+\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzM1Nzcz", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#pullrequestreview-427335773", "createdAt": "2020-06-09T16:25:11Z", "commit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNToxMVrOGhSmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNToxMVrOGhSmEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MDg1MQ==", "bodyText": "workflowJob.script.set das gibt es nur falls nicht das Repository verwendet wird. Am besten mal selbst im Jenkins UI anschauen.\nD.h. das Script wird nicht hier gesetzt sondern als Datei in Git abgelegt", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r437560851", "createdAt": "2020-06-09T16:25:11Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package core;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n+import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.DockerTest;\n+import org.jenkinsci.test.acceptance.junit.WithCredentials;\n+import org.jenkinsci.test.acceptance.junit.WithDocker;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.plugins.git.GitScm;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+import org.jenkinsci.test.acceptance.po.WorkflowJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary;\n+import io.jenkins.plugins.analysis.warnings.BlamesTable;\n+import io.jenkins.plugins.analysis.warnings.BlamesTableRow;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@WithDocker\n+@Category(DockerTest.class)\n+@WithPlugins({\"git\", \"git-forensics\"})\n+@WithCredentials(credentialType = WithCredentials.SSH_USERNAME_PRIVATE_KEY, values = {\"gitplugin\", \"/org/jenkinsci/test/acceptance/docker/fixtures/GitContainer/unsafe\"})\n+public class GitBlamerUITest extends AbstractJUnitTest {\n+\n+    @Inject\n+    DockerContainerHolder<GitContainer> gitServer;\n+\n+    private static final String USERNAME = \"gitplugin\";\n+    private Job job;\n+    private WorkflowJob workflowJob;\n+    private GitContainer container;\n+    private String repoUrl;\n+    private String host;\n+    private int port;\n+\n+    private static final String DETAILS = \"Details\";\n+    private static final String FILE = \"File\";\n+    private static final String AGE = \"Age\";\n+    private static final String AUTHOR = \"Author\";\n+    private static final String EMAIL = \"Email\";\n+    private static final String COMMIT = \"Commit\";\n+    private static final String ADDED = \"Added\";\n+\n+    @Before\n+    public void initGitRepository() {\n+        container = gitServer.get();\n+        repoUrl = container.getRepoUrl();\n+        host = container.host();\n+        port = container.port();\n+        // job = jenkins.jobs.create();    // creates freestyle job\n+        workflowJob = jenkins.jobs.create(WorkflowJob.class);\n+        // job.configure();\n+        workflowJob.configure();\n+    }\n+\n+    // TODO: reactivate the posix file settings before final commit\n+\n+    @Test\n+    public void shouldBlameOneIssueWithFreestyle() {\n+        GitRepo repo = setupInitialGitRepository();\n+        repo.commitFileWithMessage(\"commit\", \"Test.java\",\n+                \"public class Test {}\");\n+        String commitId = repo.getLastSha1();\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+        BlamesTableRow row = blamesTable.getRowAs(0, BlamesTableRow.class);\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(1);\n+        assertColumnHeader(blamesTable);\n+        assertColumnsOfTest(row, commitId);\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithPipeline() throws Exception {\n+        GitRepo repo = new GitRepo();\n+\n+        /*\n+        repo.commitFileWithMessage(\"commit\", \"Jenkinsfile\",\n+                \"node {\\n\"\n+                        + \"  stage ('Checkout') {\\n\"\n+                        + \"    checkout scm\\n\"\n+                        + \"  }\\n\"\n+                        + \"  stage ('Build and Analysis') {\"\n+                        + \"    echo '[javac] Test.java:1: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Test.java:2: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Test.java:3: warning: Test Warning for Jenkins'\\n\"\n+                        // + \"    echo '[javac] Test.java:4: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:1: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:2: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:3: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    recordIssues tools: [java()]\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\"\n+        );*/\n+\n+        Build build = generateWorkflowJob(repo);\n+        build.open();\n+\n+        System.out.println(\"Test\");\n+\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithFreestyle() throws Exception {\n+        GitRepo repo = new GitRepo();\n+        Map<String, String> commits = commitDifferentFilesToGitRepository(repo);\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] Test.java:2: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] Test.java:3: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:1: warning: Bobs Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:2: warning: Bobs Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:3: warning: Bobs Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(10);\n+        assertColumnHeader(blamesTable);\n+        assertElevenIssues(commits, blamesTable);\n+    }\n+\n+    private void assertElevenIssues(final Map<String, String> commits, final BlamesTable table) {\n+        assertColumnsOfRowBob(table.getRowAs(0, BlamesTableRow.class), commits.get(\"Bob\"));\n+        assertColumnsOfRowBob(table.getRowAs(1, BlamesTableRow.class), commits.get(\"Bob\"));\n+        assertColumnsOfRowBob(table.getRowAs(2, BlamesTableRow.class), commits.get(\"Bob\"));\n+\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(3, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(4, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(5, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(6, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+\n+        assertColumnsOfTest(table.getRowAs(0, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(1, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(2, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(3, BlamesTableRow.class), commits.get(\"Test\"));\n+    }\n+\n+    private void assertColumnsOfTest(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"Git SampleRepoRule\");\n+        assertThat(row.getEmail()).isEqualTo(\"gits@mplereporule\");\n+        assertThat(row.getFileName()).isEqualTo(\"Test.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnsOfRowBob(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"Alice Miller\");\n+        assertThat(row.getEmail()).isEqualTo(\"alice@miller\");\n+        assertThat(row.getFileName()).isEqualTo(\"Bob.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnsOfRowLoremIpsum(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"John Doe\");\n+        assertThat(row.getEmail()).isEqualTo(\"john@doe.de\");\n+        assertThat(row.getFileName()).isEqualTo(\"LoremIpsum.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnHeader(final BlamesTable table) {\n+        assertThat(table.getHeaders()).containsExactly(DETAILS, FILE, AGE, AUTHOR, EMAIL, COMMIT, ADDED);\n+    }\n+\n+    private Build generateFreeStyleJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+        job.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME);\n+\n+        addRecorder((FreeStyleJob) job);\n+        job.save();\n+\n+        return job.startBuild().waitUntilFinished();\n+    }\n+\n+    private Build generateWorkflowJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+\n+        // workflowJob.sandbox.check();\n+        /* workflowJob.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME); */\n+        workflowJob.setJenkinsFileRepository(repoUrl, USERNAME);\n+        workflowJob.script.set(\"node {\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500"}, "originalPosition": 219}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "626793dfbb25db3c10c949c51920a2c1dc0faed6", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/626793dfbb25db3c10c949c51920a2c1dc0faed6", "committedDate": "2020-06-10T09:50:38Z", "message": "- finished the implementation of the refactored ui tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f62e13bd3e7216628fa9b6a32be57755861740", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/56f62e13bd3e7216628fa9b6a32be57755861740", "committedDate": "2020-06-10T09:51:30Z", "message": "- fixed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDcyMDA5", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#pullrequestreview-428072009", "createdAt": "2020-06-10T13:49:12Z", "commit": {"oid": "56f62e13bd3e7216628fa9b6a32be57755861740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo0OToxMlrOGh1uZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo0OToxMlrOGh1uZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzNjQyMw==", "bodyText": "Das ist eine Maus auf der Tastatur herumgelaufen \ud83d\ude09", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r438136423", "createdAt": "2020-06-10T13:49:12Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/scm/GitBlamerITest.java", "diffHunk": "@@ -364,7 +364,7 @@ private void assertElevenIssues(final Map<String, String> commits, final TableMo\n \n         gitRepo.git(\"config\", \"user.name\", \"John Doe\");\n         gitRepo.git(\"config\", \"user.email\", \"john@doe\");\n-        createAndCommitFile(\"LoremIpsum.java\", \"public class LoremIpsum {\\n\"\n+        createAndCommitFile(\"2Lorem^1Ipsum.java\", \"public class wQ  a BVGTC^!$&/(LoremIpsum {\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f62e13bd3e7216628fa9b6a32be57755861740"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806b36600e3095699919d08cecccab53b0e87dba", "author": {"user": {"login": "ThoGro", "name": "Thomas Gro\u00dfbeck"}}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/806b36600e3095699919d08cecccab53b0e87dba", "committedDate": "2020-06-13T09:15:43Z", "message": "Add page objects for ForensicsTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349ea40c55e914e9e86e90936e106830036e3146", "author": {"user": {"login": "ThoGro", "name": "Thomas Gro\u00dfbeck"}}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/349ea40c55e914e9e86e90936e106830036e3146", "committedDate": "2020-06-13T09:18:42Z", "message": "Add GitForensicsUITest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDI5ODk4", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#pullrequestreview-431429898", "createdAt": "2020-06-16T11:59:19Z", "commit": {"oid": "349ea40c55e914e9e86e90936e106830036e3146"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11df0a13a5f1b9f9f45e521e13125a91f89bb01b", "author": {"user": null}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/11df0a13a5f1b9f9f45e521e13125a91f89bb01b", "committedDate": "2020-06-16T14:57:50Z", "message": "- Merged GitBlamer and GitForensics test into one\n- fixed javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e495c5e324cccbc26bf5f08fb4dea753184da1f", "author": {"user": {"login": "ThoGro", "name": "Thomas Gro\u00dfbeck"}}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/8e495c5e324cccbc26bf5f08fb4dea753184da1f", "committedDate": "2020-06-18T09:55:03Z", "message": "Add assertion for multiple authors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e9591a0ac2fb0787e517953103b8c1a74e7414", "author": {"user": {"login": "ThoGro", "name": "Thomas Gro\u00dfbeck"}}, "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/08e9591a0ac2fb0787e517953103b8c1a74e7414", "committedDate": "2020-06-19T14:11:15Z", "message": "Resolve merge conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 164, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}