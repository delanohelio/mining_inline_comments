{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjg2NzU1", "number": 461, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo0NzowMVrOD9RuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjowMTo1MVrOD-aB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTgwMDYzOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo0NzowMVrOGWrK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTo1Mzo0NlrOGYbi8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyOTE2NA==", "bodyText": "Da w\u00e4re noch die Idee gewesen, die Table zu pr\u00fcfen, analog zu meinem Kommentar  in #466 (comment)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r426429164", "createdAt": "2020-05-18T07:47:01Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +149,35 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n-    }\n-\n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n-    }\n+        assertThat(result.getIssues()).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b8ae2b1b26d771e23e8e43940b89b60361878e"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3MDMyMA==", "bodyText": "Entsprechenden Test auf Severity und Filename hinzugef\u00fcgt.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r428270320", "createdAt": "2020-05-20T19:53:46Z", "author": {"login": "DieAkuteSense"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +149,35 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n-    }\n-\n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n-    }\n+        assertThat(result.getIssues()).hasSize(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyOTE2NA=="}, "originalCommit": {"oid": "c0b8ae2b1b26d771e23e8e43940b89b60361878e"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzYzMDM3OnYy", "diffSide": "LEFT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTo1NTo1NlrOGYfOAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTo1NTo1NlrOGYfOAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMDQ5OQ==", "bodyText": "Die Tests machen ja trotzdem noch Sinn? Lediglich die Assertion m\u00fcsste umgewandelt werden (Pseudocode):\nIssuesRow row = getIssuesModel(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n\nassertThat(row.getFilename()).contains(\"<a href=\");\n\ndeleteAffectedFilesInBuildFolder(result);\n\nrow = getIssuesModel(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\nassertThat(row.getFilename()).isEqualTo(\"filename:line\");", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r428330499", "createdAt": "2020-05-20T21:55:56Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -5,124 +5,46 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Collections;\n-import java.util.List;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n \n import org.junit.Test;\n \n-import com.gargoylesoftware.htmlunit.html.HtmlPage;\n-\n import edu.hm.hafner.analysis.Issue;\n import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.analysis.Severity;\n \n import hudson.FilePath;\n import hudson.model.FreeStyleProject;\n import hudson.model.Result;\n import hudson.model.Run;\n \n import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n-import io.jenkins.plugins.analysis.core.model.FileNameRenderer;\n+import io.jenkins.plugins.analysis.core.model.IssuesDetail;\n+import io.jenkins.plugins.analysis.core.model.IssuesModel.IssuesRow;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n import io.jenkins.plugins.analysis.core.model.SourceDirectory;\n import io.jenkins.plugins.analysis.core.model.WarningsPluginConfiguration;\n import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n import io.jenkins.plugins.analysis.core.util.AffectedFilesResolver;\n import io.jenkins.plugins.analysis.warnings.Eclipse;\n import io.jenkins.plugins.analysis.warnings.Gcc4;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.DetailsTab;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.DetailsTab.TabType;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.SourceCodeView;\n-import io.jenkins.plugins.datatables.TablePageObject;\n-import io.jenkins.plugins.datatables.TableRowPageObject;\n \n-import static io.jenkins.plugins.analysis.warnings.recorder.MiscIssuesRecorderITest.*;\n import static org.assertj.core.api.Assertions.*;\n \n /**\n  * Integration tests for the class {@link AffectedFilesResolver}.\n  *\n  * @author Deniz Mardin\n  * @author Frank Christian Geyer\n+ * @author Andreas Riepl\n+ * @author Oliver Scholz\n  */\n @SuppressWarnings(\"PMD.ExcessiveImports\")\n public class AffectedFilesResolverITest extends IntegrationTestWithJenkinsPerSuite {\n     private static final String FOLDER = \"affected-files\";\n     private static final String SOURCE_AFFECTED_FILE = FOLDER + \"/Main.java\";\n     private static final String ECLIPSE_REPORT = FOLDER + \"/eclipseOneAffectedAndThreeNotExistingFiles.txt\";\n     private static final String ECLIPSE_REPORT_ONE_AFFECTED_AFFECTED_FILE = FOLDER + \"/eclipseOneAffectedFile.txt\";\n-    private static final int ROW_NUMBER_ACTUAL_AFFECTED_FILE = 1;\n-\n-    /**\n-     * Verifies that the affected source code is copied and shown in the source code view. If the file is deleted in the\n-     * build folder, then the link to open the file disappears.\n-     */\n-    @Test\n-    public void shouldShowNoLinkIfSourceCodeHasBeenDeleted() {\n-        FreeStyleProject project = createEclipseProject();\n-        AnalysisResult result = scheduleBuildAndAssertStatus(project, Result.SUCCESS);\n-\n-        TableRowPageObject row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        SourceCodeView sourceCodeView = new SourceCodeView(getSourceCodePage(result));\n-\n-        assertThat(row.hasLink(AFFECTED_FILE)).isTrue();\n-        assertThat(sourceCodeView.getSourceCode()).isEqualToIgnoringWhitespace(readSourceCode(project));\n-\n-        deleteAffectedFilesInBuildFolder(result);\n-\n-        row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        assertThat(row.hasLink(AFFECTED_FILE)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzYzMDg5OnYy", "diffSide": "LEFT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTo1NjowNlrOGYfOTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTo1NjowNlrOGYfOTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMDU3NA==", "bodyText": "s.o.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r428330574", "createdAt": "2020-05-20T21:56:06Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -5,124 +5,46 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Collections;\n-import java.util.List;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n \n import org.junit.Test;\n \n-import com.gargoylesoftware.htmlunit.html.HtmlPage;\n-\n import edu.hm.hafner.analysis.Issue;\n import edu.hm.hafner.analysis.Report;\n+import edu.hm.hafner.analysis.Severity;\n \n import hudson.FilePath;\n import hudson.model.FreeStyleProject;\n import hudson.model.Result;\n import hudson.model.Run;\n \n import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n-import io.jenkins.plugins.analysis.core.model.FileNameRenderer;\n+import io.jenkins.plugins.analysis.core.model.IssuesDetail;\n+import io.jenkins.plugins.analysis.core.model.IssuesModel.IssuesRow;\n+import io.jenkins.plugins.analysis.core.model.ResultAction;\n import io.jenkins.plugins.analysis.core.model.SourceDirectory;\n import io.jenkins.plugins.analysis.core.model.WarningsPluginConfiguration;\n import io.jenkins.plugins.analysis.core.steps.IssuesRecorder;\n import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;\n import io.jenkins.plugins.analysis.core.util.AffectedFilesResolver;\n import io.jenkins.plugins.analysis.warnings.Eclipse;\n import io.jenkins.plugins.analysis.warnings.Gcc4;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.DetailsTab;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.DetailsTab.TabType;\n-import io.jenkins.plugins.analysis.warnings.recorder.pageobj.SourceCodeView;\n-import io.jenkins.plugins.datatables.TablePageObject;\n-import io.jenkins.plugins.datatables.TableRowPageObject;\n \n-import static io.jenkins.plugins.analysis.warnings.recorder.MiscIssuesRecorderITest.*;\n import static org.assertj.core.api.Assertions.*;\n \n /**\n  * Integration tests for the class {@link AffectedFilesResolver}.\n  *\n  * @author Deniz Mardin\n  * @author Frank Christian Geyer\n+ * @author Andreas Riepl\n+ * @author Oliver Scholz\n  */\n @SuppressWarnings(\"PMD.ExcessiveImports\")\n public class AffectedFilesResolverITest extends IntegrationTestWithJenkinsPerSuite {\n     private static final String FOLDER = \"affected-files\";\n     private static final String SOURCE_AFFECTED_FILE = FOLDER + \"/Main.java\";\n     private static final String ECLIPSE_REPORT = FOLDER + \"/eclipseOneAffectedAndThreeNotExistingFiles.txt\";\n     private static final String ECLIPSE_REPORT_ONE_AFFECTED_AFFECTED_FILE = FOLDER + \"/eclipseOneAffectedFile.txt\";\n-    private static final int ROW_NUMBER_ACTUAL_AFFECTED_FILE = 1;\n-\n-    /**\n-     * Verifies that the affected source code is copied and shown in the source code view. If the file is deleted in the\n-     * build folder, then the link to open the file disappears.\n-     */\n-    @Test\n-    public void shouldShowNoLinkIfSourceCodeHasBeenDeleted() {\n-        FreeStyleProject project = createEclipseProject();\n-        AnalysisResult result = scheduleBuildAndAssertStatus(project, Result.SUCCESS);\n-\n-        TableRowPageObject row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        SourceCodeView sourceCodeView = new SourceCodeView(getSourceCodePage(result));\n-\n-        assertThat(row.hasLink(AFFECTED_FILE)).isTrue();\n-        assertThat(sourceCodeView.getSourceCode()).isEqualToIgnoringWhitespace(readSourceCode(project));\n-\n-        deleteAffectedFilesInBuildFolder(result);\n-\n-        row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        assertThat(row.hasLink(AFFECTED_FILE)).isFalse();\n-    }\n-\n-    /**\n-     * Verifies that the affected source code is copied and shown in the source code view. If the file is made\n-     * unreadable in the build folder, then the link to open the file disappears.\n-     */\n-    @Test\n-    public void shouldShowNoLinkIfSourceCodeHasBeenMadeUnreadable() {\n-        FreeStyleProject project = createEclipseProject();\n-        AnalysisResult result = scheduleBuildAndAssertStatus(project, Result.SUCCESS);\n-\n-        TableRowPageObject row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        assertThat(row.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        makeAffectedFilesInBuildFolderUnreadable(result);\n-\n-        row = getIssuesTableRow(result, ROW_NUMBER_ACTUAL_AFFECTED_FILE);\n-        assertThat(row.hasLink(AFFECTED_FILE)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzY0NTczOnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjowMTowMFrOGYfXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzowMjoyOVrOGZwGpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMjgwNg==", "bodyText": "Tell don't ask: issue.getBaseName()", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r428332806", "createdAt": "2020-05-20T22:01:00Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");\n+\n+        Issue issue = result.getIssues().get(0);\n+        String filename = issue.getFileName().substring(issue.getFileName().lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NTcxOQ==", "bodyText": "Die Methode haben wir wohl einfach \u00fcbersehen... ;-)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r429655719", "createdAt": "2020-05-24T17:02:29Z", "author": {"login": "DieAkuteSense"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");\n+\n+        Issue issue = result.getIssues().get(0);\n+        String filename = issue.getFileName().substring(issue.getFileName().lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMjgwNg=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzY0Nzc5OnYy", "diffSide": "RIGHT", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjowMTo1MVrOGYfYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMzoxMFrOGbUnWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ==", "bodyText": "Hier noch das <a> link pr\u00fcfen", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r428333145", "createdAt": "2020-05-20T22:01:51Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1OTEyNg==", "bodyText": "2 der 3 Tests, die die Methode aufrufen, um die Assertion durchzuf\u00fchren, haben an dieser Stelle keinen Link. Vermutlich wurde es vorher deshalb auch nicht gepr\u00fcft, kann das sein?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r429659126", "createdAt": "2020-05-24T17:43:52Z", "author": {"login": "DieAkuteSense"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczMDU4Nw==", "bodyText": "Das habe ich wohl \u00fcbersehen. Wenn das so ist, w\u00e4re vielleicht ein Boolean Parameter sinnvoll, der dann entscheidet, ob mit oder ohne <a>?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r430730587", "createdAt": "2020-05-26T21:57:27Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwOTA1Mg==", "bodyText": "Daf\u00fcr steck ich leider nicht tief genug drin, wie das Frontend des Jenkins zusammengebaut wird zur Laufzeit. Ich war schon erstaunt, dass in dem Java-Objekt ein HTML-String drin steckt....wirkt f\u00fcr mich so, als w\u00fcrde das Backend bereits Frontend-Code generieren?", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r431109052", "createdAt": "2020-05-27T13:08:36Z", "author": {"login": "DieAkuteSense"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NTI5NQ==", "bodyText": "Genau, einige statische Analyse Tools erzeugen auch HTML messages.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r431145295", "createdAt": "2020-05-27T13:48:37Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODQwNQ==", "bodyText": "Ich dachte einfach folgenden Check (siehe alter Kommentar).\nif (isFileNameClickable) {\n    assertThat(row.getFilename()).contains(\"<a href=\");\n} \nelse {\n assertThat(row.getFilename()).doesNotContain(\"<a href=\");\n}", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r431148405", "createdAt": "2020-05-27T13:52:25Z", "author": {"login": "uhafner"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMjQ5MA==", "bodyText": "Jetzt versteh ich glaub ich was Sie meinen. Den Boolean lediglich im Test halten; nicht als Teil des Objektes, das von Jenkins im \"Normalbetrieb\" verarbeitet wird. Das l\u00e4sst sich nat\u00fcrlich ohne gro\u00dfen Aufwand umsetzen.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/461#discussion_r431302490", "createdAt": "2020-05-27T17:03:10Z", "author": {"login": "DieAkuteSense"}, "path": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/recorder/AffectedFilesResolverITest.java", "diffHunk": "@@ -232,55 +152,46 @@ public void shouldShowFileOutsideWorkspaceIfConfigured() {\n         recorder.setSourceDirectory(buildsFolder);\n \n         // First build: copying the affected file is forbidden\n-        TableRowPageObject unresolvedRow = buildAndVerifyFilesResolving(job,\n-                \"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n+        buildAndVerifyFilesResolving(job,\"0 copied\", \"1 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n \n         AnalysisResult result = getAnalysisResult(job.getLastCompletedBuild());\n         assertThat(result.getErrorMessages()).contains(\n                 String.format(\"Additional source directory '%s' must be registered in Jenkins system configuration\",\n                         buildsFolder));\n \n-        assertThat(unresolvedRow.hasLink(AFFECTED_FILE)).isFalse();\n \n         WarningsPluginConfiguration.getInstance().setSourceDirectories(\n                 Collections.singletonList(new SourceDirectory(buildsFolder)));\n \n         // Second build: copying the affected file is permitted\n-        TableRowPageObject resolvedRow = buildAndVerifyFilesResolving(job,\n-                \"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n-\n-        assertThat(resolvedRow.hasLink(AFFECTED_FILE)).isTrue();\n-\n-        SourceCodeView sourceCodeView = openSourceCode(resolvedRow);\n-        assertThat(sourceCodeView.getSourceCode()).contains(\"<io.jenkins.plugins.analysis.core.steps.IssuesRecorder>\");\n-    }\n-\n-    private SourceCodeView openSourceCode(final TableRowPageObject resolvedRow) {\n-        return new SourceCodeView(resolvedRow.clickColumnLink(AFFECTED_FILE));\n+        buildAndVerifyFilesResolving(job,\"1 copied\", \"0 not in workspace\", \"0 not-found\", \"0 with I/O error\");\n     }\n \n-    private TableRowPageObject buildAndVerifyFilesResolving(final FreeStyleProject job, final String... resolveMessages) {\n+    private void buildAndVerifyFilesResolving(final FreeStyleProject job,\n+            final String... resolveMessages) {\n         AnalysisResult result = scheduleBuildAndAssertStatus(job, Result.SUCCESS);\n \n         assertThat(getConsoleLog(result)).contains(resolveMessages);\n \n-        TablePageObject issues = getIssuesTable(result);\n-        assertThat(issues.getColumnHeaders()).containsExactly(\n-                DETAILS, AFFECTED_FILE, SEVERITY, AGE);\n-        List<TableRowPageObject> rows = issues.getRows();\n-        assertThat(rows).hasSize(1);\n-        TableRowPageObject row = rows.get(0);\n-        assertThat(row.getValuesByColumnLabel()).contains(\n-                entry(DETAILS, \"foo defined but not used\"),\n-                entry(AFFECTED_FILE, \"config.xml:451\"),\n-                entry(SEVERITY, \"Normal\"));\n-        return row;\n+        assertThat(result.getIssues()).hasSize(1);\n+\n+        IssuesRow firstRow = getIssuesModel(result, 0);\n+        assertThat(firstRow.getSeverity()).contains(Severity.WARNING_NORMAL.getName());\n+        assertThat(firstRow.getFileName().getDisplay()).contains(\"config.xml:451\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzE0NQ=="}, "originalCommit": {"oid": "0ba6c427c555d00b59c4f2b192c90e15715068b6"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4828, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}