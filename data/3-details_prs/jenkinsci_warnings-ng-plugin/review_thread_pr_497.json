{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTE2OTE2", "number": 497, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTozOToyMFrOEBKySw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowNDowOFrOEBK38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYwNzQ3OnYy", "diffSide": "RIGHT", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTozOToyMVrOGc32uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTozOToyMVrOGc32uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODQ0MA==", "bodyText": "Hier w\u00e4re es noch nett, den Autor der Integrationstests mit aufzuf\u00fchren.", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432928440", "createdAt": "2020-05-31T09:39:21Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for the details tab part of issue overview page.\n+ *\n+ * @author Kevin Richter\n+ * @author Simon Sch\u00f6nwiese\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYxNzk5OnYy", "diffSide": "RIGHT", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTo1NzoxNVrOGc38Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTo1NzoxNVrOGc38Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyOTg3MQ==", "bodyText": "Custom assertions nutzen! Das macht den Source Code leichter lesbar (auch in den anderen Tests).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<Tab> tabs = resultPage.getAvailableTabs();\n          \n          \n            \n                    assertThat(tabs).containsExactlyInAnyOrder(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);\n          \n          \n            \n                    assertThat(resultPage).hasOnlyAvailableTabs(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432929871", "createdAt": "2020-05-31T09:57:15Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for the details tab part of issue overview page.\n+ *\n+ * @author Kevin Richter\n+ * @author Simon Sch\u00f6nwiese\n+ */\n+@WithPlugins(\"warnings-ng\")\n+public class DetailsTabUiTest extends AbstractJUnitTest {\n+\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/details_tab_test/\";\n+\n+    /**\n+     * When a single warning is being recognized only the issues-tab should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabSingleWarning() {\n+        FreeStyleJob job = createFreeStyleJob(\"java1Warning.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsOnlyOnce(Tab.ISSUES);\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.ISSUES);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTableRows()).hasSize(1);\n+    }\n+\n+    /**\n+     * When two warnings are being recognized in one file the tabs issues, files and folders should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabMultipleWarnings() {\n+        FreeStyleJob job = createFreeStyleJob(\"java2Warnings.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactly(Tab.FOLDERS, Tab.FILES, Tab.ISSUES);\n+\n+        FoldersDetailsTable foldersDetailsTable = resultPage.openFoldersTable();\n+        assertThat(foldersDetailsTable.getTotal()).isEqualTo(2);\n+\n+        FilesDetailsTable filesDetailsTable = resultPage.openFilesTable();\n+        assertThat(filesDetailsTable.getTotal()).isEqualTo(2);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTotal()).isEqualTo(2);\n+    }\n+\n+    /**\n+     * When switching details-tab and the page is being reloaded, the previously selected tab should be memorized and\n+     * still be active.\n+     */\n+    @Test\n+    public void shouldMemorizeSelectedTabAsActiveOnPageReload() {\n+        FreeStyleJob job = createFreeStyleJob(\"../checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"checkstyle\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactlyInAnyOrder(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYxODI3OnYy", "diffSide": "RIGHT", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTo1Nzo0M1rOGc38eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTo1Nzo0M1rOGc38eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyOTkxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.assertj.core.api.Assertions.assertThat;\n          \n          \n            \n            import static io.jenkins.plugins.analysis.warnings.Assertions.*;", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432929914", "createdAt": "2020-05-31T09:57:43Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+\n+import static org.assertj.core.api.Assertions.assertThat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYxOTY1OnYy", "diffSide": "RIGHT", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowMDoyMlrOGc39RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowMDoyMlrOGc39RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzMDExNg==", "bodyText": "Die Header k\u00f6nnte man noch in einen Enum packen (pro Table)", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432930116", "createdAt": "2020-05-31T10:00:22Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for the details tab part of issue overview page.\n+ *\n+ * @author Kevin Richter\n+ * @author Simon Sch\u00f6nwiese\n+ */\n+@WithPlugins(\"warnings-ng\")\n+public class DetailsTabUiTest extends AbstractJUnitTest {\n+\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/details_tab_test/\";\n+\n+    /**\n+     * When a single warning is being recognized only the issues-tab should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabSingleWarning() {\n+        FreeStyleJob job = createFreeStyleJob(\"java1Warning.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsOnlyOnce(Tab.ISSUES);\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.ISSUES);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTableRows()).hasSize(1);\n+    }\n+\n+    /**\n+     * When two warnings are being recognized in one file the tabs issues, files and folders should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabMultipleWarnings() {\n+        FreeStyleJob job = createFreeStyleJob(\"java2Warnings.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactly(Tab.FOLDERS, Tab.FILES, Tab.ISSUES);\n+\n+        FoldersDetailsTable foldersDetailsTable = resultPage.openFoldersTable();\n+        assertThat(foldersDetailsTable.getTotal()).isEqualTo(2);\n+\n+        FilesDetailsTable filesDetailsTable = resultPage.openFilesTable();\n+        assertThat(filesDetailsTable.getTotal()).isEqualTo(2);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTotal()).isEqualTo(2);\n+    }\n+\n+    /**\n+     * When switching details-tab and the page is being reloaded, the previously selected tab should be memorized and\n+     * still be active.\n+     */\n+    @Test\n+    public void shouldMemorizeSelectedTabAsActiveOnPageReload() {\n+        FreeStyleJob job = createFreeStyleJob(\"../checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"checkstyle\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactlyInAnyOrder(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);\n+\n+        assertThat(resultPage.getActiveTab()).isNotEqualTo(Tab.TYPES);\n+        resultPage.openTab(Tab.TYPES);\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.TYPES);\n+\n+        // reload page\n+        resultPage.open();\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.TYPES);\n+    }\n+\n+    /**\n+     * When having a larger checkstyle result, the table should display all Tabs, tables and pages correctly and should\n+     * be able to change the page.\n+     */\n+    @Test\n+    public void shouldWorkWithMultipleTabsAndPages() {\n+        FreeStyleJob job = createFreeStyleJob(\"../checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"checkstyle\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactlyInAnyOrder(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);\n+\n+        CategoriesDetailsTable categoriesDetailsTable = resultPage.openCategoriesTable();\n+        assertThat(categoriesDetailsTable.getHeaders()).containsExactlyInAnyOrder(\"Category\", \"Total\", \"Distribution\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYyMDQ2OnYy", "diffSide": "RIGHT", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/AbstractDetailsTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowMjowMFrOGc39uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowMjowMFrOGc39uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzMDIzMg==", "bodyText": "Bitte den JavaDoc gerade ziehen (am besten das Checkstyle Plugin installieren in IntelliJ).", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432930232", "createdAt": "2020-05-31T10:02:00Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/AbstractDetailsTable.java", "diffHunk": "@@ -10,42 +10,31 @@\n \n import org.jenkinsci.test.acceptance.po.PageObject;\n \n-/**\n- * Class representing an issues-table on the {@link AnalysisResult}.\n- *\n- * @author Stephan Pl\u00f6derl\n- */\n-public class IssuesTable {\n+public abstract class AbstractDetailsTable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjYyMTkyOnYy", "diffSide": "RIGHT", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowNDowOFrOGc3-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDowNDowOFrOGc3-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzMDQzMA==", "bodyText": "Vielleicht eine Methode reload im AnalysisResult definieren, die open aufruft, dann muss man nicht jedesmal den Kommentar mitschleppen...", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/497#discussion_r432930430", "createdAt": "2020-05-31T10:04:08Z", "author": {"login": "uhafner"}, "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DetailsTabUiTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for the details tab part of issue overview page.\n+ *\n+ * @author Kevin Richter\n+ * @author Simon Sch\u00f6nwiese\n+ */\n+@WithPlugins(\"warnings-ng\")\n+public class DetailsTabUiTest extends AbstractJUnitTest {\n+\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/details_tab_test/\";\n+\n+    /**\n+     * When a single warning is being recognized only the issues-tab should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabSingleWarning() {\n+        FreeStyleJob job = createFreeStyleJob(\"java1Warning.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsOnlyOnce(Tab.ISSUES);\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.ISSUES);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTableRows()).hasSize(1);\n+    }\n+\n+    /**\n+     * When two warnings are being recognized in one file the tabs issues, files and folders should be shown.\n+     */\n+    @Test\n+    public void shouldPopulateDetailsTabMultipleWarnings() {\n+        FreeStyleJob job = createFreeStyleJob(\"java2Warnings.txt\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setToolWithPattern(\"Java\", \"**/*.txt\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"java\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactly(Tab.FOLDERS, Tab.FILES, Tab.ISSUES);\n+\n+        FoldersDetailsTable foldersDetailsTable = resultPage.openFoldersTable();\n+        assertThat(foldersDetailsTable.getTotal()).isEqualTo(2);\n+\n+        FilesDetailsTable filesDetailsTable = resultPage.openFilesTable();\n+        assertThat(filesDetailsTable.getTotal()).isEqualTo(2);\n+\n+        IssuesDetailsTable issuesDetailsTable = resultPage.openIssuesTable();\n+        assertThat(issuesDetailsTable.getTotal()).isEqualTo(2);\n+    }\n+\n+    /**\n+     * When switching details-tab and the page is being reloaded, the previously selected tab should be memorized and\n+     * still be active.\n+     */\n+    @Test\n+    public void shouldMemorizeSelectedTabAsActiveOnPageReload() {\n+        FreeStyleJob job = createFreeStyleJob(\"../checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+\n+        AnalysisResult resultPage = new AnalysisResult(build, \"checkstyle\");\n+        resultPage.open();\n+\n+        Collection<Tab> tabs = resultPage.getAvailableTabs();\n+        assertThat(tabs).containsExactlyInAnyOrder(Tab.ISSUES, Tab.TYPES, Tab.CATEGORIES);\n+\n+        assertThat(resultPage.getActiveTab()).isNotEqualTo(Tab.TYPES);\n+        resultPage.openTab(Tab.TYPES);\n+        assertThat(resultPage.getActiveTab()).isEqualTo(Tab.TYPES);\n+\n+        // reload page\n+        resultPage.open();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f142ffde539bcd018cac926aabe35f9be898dd0"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4796, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}