{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTg2ODY4", "number": 2317, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozODo1N1rOEfAw5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1NTo1MlrOEfBJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUzODMwOnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/libsrc/org/netbeans/updater/ModuleUpdater.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozODo1N1rOHLBXkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo1NDoxOVrOHLpumA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg==", "bodyText": "What is the meaning of this path?\nFor me this would be more readable:\nFile uiConfig = new File(clusterRoot, \"config/Preferences/org/netbeans/modules/autoupdate/services.properties\");", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481318802", "createdAt": "2020-09-01T17:38:57Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/libsrc/org/netbeans/updater/ModuleUpdater.java", "diffHunk": "@@ -579,6 +579,34 @@ private boolean unpack200(File src, File dest) {\n         return result == 0;\n     }\n \n+    private File findUnpack200Executable(String unpack200) {\n+        File unpack200Executable = new File(new File(System.getProperty(\"java.home\"), \"bin\"), unpack200);\n+        if (!unpack200Executable.canExecute()) {\n+            for (File clusterRoot : UpdateTracking.clusters(true)) {\n+                File uiConfig = new File(new File(new File(new File(new File(new File(new File(\n+                        clusterRoot, \"config\"), \"Preferences\"), \"org\"), \"netbeans\"), \"modules\"), // NOI18N\n+                        \"autoupdate\"), \"services.properties\"); // NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzNzYxNw==", "bodyText": "Does that work on Windows and other systems? new File(new File(... is portable.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481637617", "createdAt": "2020-09-02T04:01:13Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/libsrc/org/netbeans/updater/ModuleUpdater.java", "diffHunk": "@@ -579,6 +579,34 @@ private boolean unpack200(File src, File dest) {\n         return result == 0;\n     }\n \n+    private File findUnpack200Executable(String unpack200) {\n+        File unpack200Executable = new File(new File(System.getProperty(\"java.home\"), \"bin\"), unpack200);\n+        if (!unpack200Executable.canExecute()) {\n+            for (File clusterRoot : UpdateTracking.clusters(true)) {\n+                File uiConfig = new File(new File(new File(new File(new File(new File(new File(\n+                        clusterRoot, \"config\"), \"Preferences\"), \"org\"), \"netbeans\"), \"modules\"), // NOI18N\n+                        \"autoupdate\"), \"services.properties\"); // NOI18N", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MDA1Ng==", "bodyText": "Yes, windows accepts \"/\" and \"\" as directory separator. For example calling:\ndir \"c:/Windows/System32/drivers/etc\"\n\nrum in a cmd window on windows will yield the directory contents of the denoted directory.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481980056", "createdAt": "2020-09-02T10:54:19Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/libsrc/org/netbeans/updater/ModuleUpdater.java", "diffHunk": "@@ -579,6 +579,34 @@ private boolean unpack200(File src, File dest) {\n         return result == 0;\n     }\n \n+    private File findUnpack200Executable(String unpack200) {\n+        File unpack200Executable = new File(new File(System.getProperty(\"java.home\"), \"bin\"), unpack200);\n+        if (!unpack200Executable.canExecute()) {\n+            for (File clusterRoot : UpdateTracking.clusters(true)) {\n+                File uiConfig = new File(new File(new File(new File(new File(new File(new File(\n+                        clusterRoot, \"config\"), \"Preferences\"), \"org\"), \"netbeans\"), \"modules\"), // NOI18N\n+                        \"autoupdate\"), \"services.properties\"); // NOI18N", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTU1MzQwOnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo0MzoxMlrOHLBhIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTowMjowOFrOHMhcFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA==", "bodyText": "Maybe at some point in the future (no I don't want to wait for that moment), we might be able to ship a pack200 implementation (if I read the discussion on apache-legal correctly pure GPLv2-CPE might ok, the problem was, that the JDK is a mix of GPLv2 and GPLv2-CPE). If we can ship an implementation, would it make sense to do the decompression in process? For tar, zip and maybe other compression formats I would not consider to call the CLI version.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481321250", "createdAt": "2020-09-01T17:43:12Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcwNTY1OA==", "bodyText": "FWIW the pack200 in JDK is not in Java, it is a C/C++ implementation. So seems likely it would be run as a command line tool if we included it.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481705658", "createdAt": "2020-09-02T05:10:43Z", "author": {"login": "jlahoda"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MjU4Nw==", "bodyText": "Whether it it is java or not - we can call it via CLI, and most probably that is the best idea, but it looks as if there is a java implementation:\nhttps://github.com/pack200/pack200/blob/master/src/main/java/io/pack200/UnpackerImpl.java#L114-L117\nhttps://github.com/pack200/pack200/blob/master/src/main/java/io/pack200/UnpackerImpl.java#L200\nIt was just a thought.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481982587", "createdAt": "2020-09-02T10:59:20Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAzMzIxMg==", "bodyText": "@matthiasblaesing yes, the mix of GPLv2 and GPLv2-CPE in the JDK is a problem (although it's possible OpenJ9 wouldn't be).  I don't think you can separate that fact from considerations of linking vs aggregation.  Relevance?  Linking in pack200 or nb-javac might be possible given current discussions on GPL+CPE.  Calling the CLI tool as @jlahoda suggests might not allow us to include it.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482033212", "createdAt": "2020-09-02T12:36:02Z", "author": {"login": "neilcsmith-net"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyODM2OQ==", "bodyText": "I suggest to take the licensing discussions elsewhere off this PR. It is not intention of this PR to bundle unpack200 executable. The goal of this PR is to:\n\nwarn the user\nallow the user to provide alternative implementation of the executable\n\nThe assumption is that most of the developers find/install older JDK and use its executable.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482128369", "createdAt": "2020-09-02T14:47:42Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg5MjgyMg==", "bodyText": "@JaroslavTulach in general agreed. Mentioned because this seems to lock the idea it's an external executable into the API? Whereas something that allowed specifying source and dest files might not - eg. alternative implementations for ModuleUpdate::unpack200 passed in to API?", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482892822", "createdAt": "2020-09-03T11:02:08Z", "author": {"login": "neilcsmith-net"}, "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTU4MDY2OnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1MDoyN1rOHLBxxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzowNzo0NlrOHO0_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA==", "bodyText": "This code path will not be hit when the download happens from a trusted source (See Plugin Configuration -> Settings -> Update Center Customizer -> \"Trust update center fully and allow automatic installations\").\nThe determination whether pack200 is required could be done seperatedly from the codesigner extraction. We are not on a hotpath, so scanning the ZIP/JAR/NBM twice should be ok IMHO.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481325508", "createdAt": "2020-09-01T17:50:27Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java", "diffHunk": "@@ -1121,7 +1121,22 @@ private int verifyNbm (UpdateElement el, File nbmFile, ProgressHandle progress,\n \n             if(res == null) {\n                 try {\n-                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile);\n+                    List<String> pack200Entries = new ArrayList<>();\n+                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile, pack200Entries);\n+                    if (!pack200Entries.isEmpty()) {\n+                        OperationContainer<InstallSupport> operationContainer = support.getContainer();\n+                        OperationContainerImpl ocImpl = Trampoline.API.impl(operationContainer);\n+                        File unpack200 = ocImpl.getUnpack200();\n+                        if (unpack200 == null || !unpack200.canExecute()) {\n+                            StringBuilder sb = new StringBuilder();\n+                            for (String entry : pack200Entries) {\n+                                sb.append(\"\\n\").append(entry);\n+                            }\n+                            throw new OperationException(OperationException.ERROR_TYPE.MISSING_UNPACK200,\n+                                NbBundle.getMessage(InstallSupportImpl.class, \"InstallSupportImpl_Validate_MissingUnpack200\", nbmFile, sb.toString()) // NOI18N\n+                            );\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0NjA3Mg==", "bodyText": "OK, I investigate further and see what can I do improve this.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481646072", "createdAt": "2020-09-02T04:10:18Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java", "diffHunk": "@@ -1121,7 +1121,22 @@ private int verifyNbm (UpdateElement el, File nbmFile, ProgressHandle progress,\n \n             if(res == null) {\n                 try {\n-                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile);\n+                    List<String> pack200Entries = new ArrayList<>();\n+                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile, pack200Entries);\n+                    if (!pack200Entries.isEmpty()) {\n+                        OperationContainer<InstallSupport> operationContainer = support.getContainer();\n+                        OperationContainerImpl ocImpl = Trampoline.API.impl(operationContainer);\n+                        File unpack200 = ocImpl.getUnpack200();\n+                        if (unpack200 == null || !unpack200.canExecute()) {\n+                            StringBuilder sb = new StringBuilder();\n+                            for (String entry : pack200Entries) {\n+                                sb.append(\"\\n\").append(entry);\n+                            }\n+                            throw new OperationException(OperationException.ERROR_TYPE.MISSING_UNPACK200,\n+                                NbBundle.getMessage(InstallSupportImpl.class, \"InstallSupportImpl_Validate_MissingUnpack200\", nbmFile, sb.toString()) // NOI18N\n+                            );\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDI2MA==", "bodyText": "Done in 80a6d71", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r485310260", "createdAt": "2020-09-09T03:07:46Z", "author": {"login": "jtulach"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java", "diffHunk": "@@ -1121,7 +1121,22 @@ private int verifyNbm (UpdateElement el, File nbmFile, ProgressHandle progress,\n \n             if(res == null) {\n                 try {\n-                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile);\n+                    List<String> pack200Entries = new ArrayList<>();\n+                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile, pack200Entries);\n+                    if (!pack200Entries.isEmpty()) {\n+                        OperationContainer<InstallSupport> operationContainer = support.getContainer();\n+                        OperationContainerImpl ocImpl = Trampoline.API.impl(operationContainer);\n+                        File unpack200 = ocImpl.getUnpack200();\n+                        if (unpack200 == null || !unpack200.canExecute()) {\n+                            StringBuilder sb = new StringBuilder();\n+                            for (String entry : pack200Entries) {\n+                                sb.append(\"\\n\").append(entry);\n+                            }\n+                            throw new OperationException(OperationException.ERROR_TYPE.MISSING_UNPACK200,\n+                                NbBundle.getMessage(InstallSupportImpl.class, \"InstallSupportImpl_Validate_MissingUnpack200\", nbmFile, sb.toString()) // NOI18N\n+                            );\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTU5Njc3OnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/OperationContainerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1NDo1M1rOHLB7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTowNjo0OVrOHLqGkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA==", "bodyText": "This looks strange to me. I have never seen a break without a loop (is this java style goto)? Can java.home even be unset? I admit I don't know what jlink and/or graal static image returns here.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481328030", "createdAt": "2020-09-01T17:54:53Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/OperationContainerImpl.java", "diffHunk": "@@ -530,4 +532,33 @@ public OperationType getType () {\n     }\n     private OperationType type;\n     private OperationContainer delegate;\n+\n+    /**\n+     * @return the unpack200 executable or {@code null}\n+     */\n+    public final File getUnpack200() {\n+        NO_PACK: if (unpack200 == null) {\n+            final String jreHome = System.getProperty(\"java.home\"); // NOI18N\n+            if (jreHome == null) {\n+                break NO_PACK;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzOTk2MQ==", "bodyText": "java.home maybe be missing on some obscure JVMs. Bck2Brwsr doesn't have it. Native image was missing it at the beginning. I am usually trying to check for null after reading it.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481639961", "createdAt": "2020-09-02T04:03:45Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/OperationContainerImpl.java", "diffHunk": "@@ -530,4 +532,33 @@ public OperationType getType () {\n     }\n     private OperationType type;\n     private OperationContainer delegate;\n+\n+    /**\n+     * @return the unpack200 executable or {@code null}\n+     */\n+    public final File getUnpack200() {\n+        NO_PACK: if (unpack200 == null) {\n+            final String jreHome = System.getProperty(\"java.home\"); // NOI18N\n+            if (jreHome == null) {\n+                break NO_PACK;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NjE5NQ==", "bodyText": "Ok I did not see the special runtimes - what remains is the break without a loop. I never saw that combination before, but I admit it is correct.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481986195", "createdAt": "2020-09-02T11:06:49Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/OperationContainerImpl.java", "diffHunk": "@@ -530,4 +532,33 @@ public OperationType getType () {\n     }\n     private OperationType type;\n     private OperationContainer delegate;\n+\n+    /**\n+     * @return the unpack200 executable or {@code null}\n+     */\n+    public final File getUnpack200() {\n+        NO_PACK: if (unpack200 == null) {\n+            final String jreHome = System.getProperty(\"java.home\"); // NOI18N\n+            if (jreHome == null) {\n+                break NO_PACK;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYwMDIyOnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1NTo1MlrOHLB91g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzowODoxMFrOHO0_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODU5OA==", "bodyText": "I wrote it above. I'm not sure whether this mix of return (return via return statement and return via method parameter) is worth the saved file scanning.", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481328598", "createdAt": "2020-09-01T17:55:52Z", "author": {"login": "matthiasblaesing"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java", "diffHunk": "@@ -289,13 +289,15 @@ private static int mapVerificationResultToInt(String input) {\n      * Get the certpaths that were used to sign the NBM content.\n      *\n      * @param nbmFile\n+     * @param pack200Entries list of strings to add any entries in the NBM file\n+     *   that end with {@code .pack.gz} extension and may require pack200 tool\n      * @return collection of CodeSigners, that were used to sign the non-signature\n      * entries of the NBM\n      * @throws IOException\n      * @throws SecurityException if JAR was tampered with or if the certificate\n      *         chains are not consistent\n      */\n-    public static Collection<CodeSigner> getNbmCertificates (File nbmFile) throws IOException, SecurityException {\n+    public static Collection<CodeSigner> getNbmCertificates (File nbmFile, List<String> pack200Entries) throws IOException, SecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDM2Mw==", "bodyText": "Reverted back to original signature in 80a6d71", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r485310363", "createdAt": "2020-09-09T03:08:10Z", "author": {"login": "jtulach"}, "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java", "diffHunk": "@@ -289,13 +289,15 @@ private static int mapVerificationResultToInt(String input) {\n      * Get the certpaths that were used to sign the NBM content.\n      *\n      * @param nbmFile\n+     * @param pack200Entries list of strings to add any entries in the NBM file\n+     *   that end with {@code .pack.gz} extension and may require pack200 tool\n      * @return collection of CodeSigners, that were used to sign the non-signature\n      * entries of the NBM\n      * @throws IOException\n      * @throws SecurityException if JAR was tampered with or if the certificate\n      *         chains are not consistent\n      */\n-    public static Collection<CodeSigner> getNbmCertificates (File nbmFile) throws IOException, SecurityException {\n+    public static Collection<CodeSigner> getNbmCertificates (File nbmFile, List<String> pack200Entries) throws IOException, SecurityException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODU5OA=="}, "originalCommit": {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 381, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}