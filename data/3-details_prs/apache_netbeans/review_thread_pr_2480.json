{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4OTU4MjMx", "number": 2480, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTozOVrOExOw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMTozMFrOExOz_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU3NTc4OnYy", "diffSide": "RIGHT", "path": "java/java.lsp.server/vscode/src/extension.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTozOVrOHnQV6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NTo0NlrOHnV76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDI2Ng==", "bodyText": "I would rather check on full property name: java.home and netbeans.jdkhome...", "url": "https://github.com/apache/netbeans/pull/2480#discussion_r510924266", "createdAt": "2020-10-23T14:29:39Z", "author": {"login": "Ondrej-Douda"}, "path": "java/java.lsp.server/vscode/src/extension.ts", "diffHunk": "@@ -65,33 +65,112 @@ function findClusters(myPath : string): string[] {\n     return clusters;\n }\n \n-export function activate(context: ExtensionContext) {\n-    //verify acceptable JDK is available/set:\n-    let specifiedJDK = workspace.getConfiguration('netbeans').get('jdkhome');\n-    const beVerbose : boolean = workspace.getConfiguration('netbeans').get('verbose', false);\n-    let info = {\n-        clusters : findClusters(context.extensionPath),\n-        extensionPath: context.extensionPath,\n-        storagePath : context.globalStoragePath,\n-        jdkHome : specifiedJDK,\n-        verbose: beVerbose\n-    };\n-    \n-    let log = vscode.window.createOutputChannel(\"Java Language Server\");\n+function findJDK(onChange: (path : string | null) => void): void {\n+    function find(): string | null {\n+        let nbJdk = workspace.getConfiguration('netbeans').get('jdkhome');\n+        if (nbJdk) {\n+            return nbJdk as string;\n+        }\n+        let javahome = workspace.getConfiguration('java').get('home');\n+        if (javahome) {\n+            return javahome as string;\n+        }\n \n-    vscode.extensions.all.forEach((e, index) => {\n+        let jdkHome: any = process.env.JDK_HOME;\n+        if (jdkHome) {\n+            return jdkHome as string;\n+        }\n+        let jHome: any = process.env.JAVA_HOME;\n+        if (jHome) {\n+            return jHome as string;\n+        }\n+        return null;\n+    }\n+\n+    let currentJdk = find();\n+    workspace.onDidChangeConfiguration(params => {\n+        if (!params.affectsConfiguration('java') && !params.affectsConfiguration('netbeans')) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a4906084a17d178a7658146d53ab76c00e721"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNTkxNQ==", "bodyText": "ConfigurationChangeEvent doesn't seem to have a way to check that.", "url": "https://github.com/apache/netbeans/pull/2480#discussion_r511015915", "createdAt": "2020-10-23T16:55:46Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/vscode/src/extension.ts", "diffHunk": "@@ -65,33 +65,112 @@ function findClusters(myPath : string): string[] {\n     return clusters;\n }\n \n-export function activate(context: ExtensionContext) {\n-    //verify acceptable JDK is available/set:\n-    let specifiedJDK = workspace.getConfiguration('netbeans').get('jdkhome');\n-    const beVerbose : boolean = workspace.getConfiguration('netbeans').get('verbose', false);\n-    let info = {\n-        clusters : findClusters(context.extensionPath),\n-        extensionPath: context.extensionPath,\n-        storagePath : context.globalStoragePath,\n-        jdkHome : specifiedJDK,\n-        verbose: beVerbose\n-    };\n-    \n-    let log = vscode.window.createOutputChannel(\"Java Language Server\");\n+function findJDK(onChange: (path : string | null) => void): void {\n+    function find(): string | null {\n+        let nbJdk = workspace.getConfiguration('netbeans').get('jdkhome');\n+        if (nbJdk) {\n+            return nbJdk as string;\n+        }\n+        let javahome = workspace.getConfiguration('java').get('home');\n+        if (javahome) {\n+            return javahome as string;\n+        }\n \n-    vscode.extensions.all.forEach((e, index) => {\n+        let jdkHome: any = process.env.JDK_HOME;\n+        if (jdkHome) {\n+            return jdkHome as string;\n+        }\n+        let jHome: any = process.env.JAVA_HOME;\n+        if (jHome) {\n+            return jHome as string;\n+        }\n+        return null;\n+    }\n+\n+    let currentJdk = find();\n+    workspace.onDidChangeConfiguration(params => {\n+        if (!params.affectsConfiguration('java') && !params.affectsConfiguration('netbeans')) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDI2Ng=="}, "originalCommit": {"oid": "a41a4906084a17d178a7658146d53ab76c00e721"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU4MzY3OnYy", "diffSide": "RIGHT", "path": "java/java.lsp.server/vscode/src/extension.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMTozMFrOHnQayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NDowMlrOHnV4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNTUxNA==", "bodyText": "This asks for vscode.extensions.getExtension('redhat.java') !== undefined...", "url": "https://github.com/apache/netbeans/pull/2480#discussion_r510925514", "createdAt": "2020-10-23T14:31:30Z", "author": {"login": "Ondrej-Douda"}, "path": "java/java.lsp.server/vscode/src/extension.ts", "diffHunk": "@@ -65,33 +65,112 @@ function findClusters(myPath : string): string[] {\n     return clusters;\n }\n \n-export function activate(context: ExtensionContext) {\n-    //verify acceptable JDK is available/set:\n-    let specifiedJDK = workspace.getConfiguration('netbeans').get('jdkhome');\n-    const beVerbose : boolean = workspace.getConfiguration('netbeans').get('verbose', false);\n-    let info = {\n-        clusters : findClusters(context.extensionPath),\n-        extensionPath: context.extensionPath,\n-        storagePath : context.globalStoragePath,\n-        jdkHome : specifiedJDK,\n-        verbose: beVerbose\n-    };\n-    \n-    let log = vscode.window.createOutputChannel(\"Java Language Server\");\n+function findJDK(onChange: (path : string | null) => void): void {\n+    function find(): string | null {\n+        let nbJdk = workspace.getConfiguration('netbeans').get('jdkhome');\n+        if (nbJdk) {\n+            return nbJdk as string;\n+        }\n+        let javahome = workspace.getConfiguration('java').get('home');\n+        if (javahome) {\n+            return javahome as string;\n+        }\n \n-    vscode.extensions.all.forEach((e, index) => {\n+        let jdkHome: any = process.env.JDK_HOME;\n+        if (jdkHome) {\n+            return jdkHome as string;\n+        }\n+        let jHome: any = process.env.JAVA_HOME;\n+        if (jHome) {\n+            return jHome as string;\n+        }\n+        return null;\n+    }\n+\n+    let currentJdk = find();\n+    workspace.onDidChangeConfiguration(params => {\n+        if (!params.affectsConfiguration('java') && !params.affectsConfiguration('netbeans')) {\n+            return;\n+        }\n+        let newJdk = find();\n+        if (newJdk !== currentJdk) {\n+            onChange(newJdk);\n+        }\n+    });\n+    onChange(currentJdk);\n+}\n+\n+export function activate(context: ExtensionContext) {\n+    vscode.extensions.all.forEach((e) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a4906084a17d178a7658146d53ab76c00e721"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNTAwMA==", "bodyText": "OK, thanks: Done in e38771f", "url": "https://github.com/apache/netbeans/pull/2480#discussion_r511015000", "createdAt": "2020-10-23T16:54:02Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/vscode/src/extension.ts", "diffHunk": "@@ -65,33 +65,112 @@ function findClusters(myPath : string): string[] {\n     return clusters;\n }\n \n-export function activate(context: ExtensionContext) {\n-    //verify acceptable JDK is available/set:\n-    let specifiedJDK = workspace.getConfiguration('netbeans').get('jdkhome');\n-    const beVerbose : boolean = workspace.getConfiguration('netbeans').get('verbose', false);\n-    let info = {\n-        clusters : findClusters(context.extensionPath),\n-        extensionPath: context.extensionPath,\n-        storagePath : context.globalStoragePath,\n-        jdkHome : specifiedJDK,\n-        verbose: beVerbose\n-    };\n-    \n-    let log = vscode.window.createOutputChannel(\"Java Language Server\");\n+function findJDK(onChange: (path : string | null) => void): void {\n+    function find(): string | null {\n+        let nbJdk = workspace.getConfiguration('netbeans').get('jdkhome');\n+        if (nbJdk) {\n+            return nbJdk as string;\n+        }\n+        let javahome = workspace.getConfiguration('java').get('home');\n+        if (javahome) {\n+            return javahome as string;\n+        }\n \n-    vscode.extensions.all.forEach((e, index) => {\n+        let jdkHome: any = process.env.JDK_HOME;\n+        if (jdkHome) {\n+            return jdkHome as string;\n+        }\n+        let jHome: any = process.env.JAVA_HOME;\n+        if (jHome) {\n+            return jHome as string;\n+        }\n+        return null;\n+    }\n+\n+    let currentJdk = find();\n+    workspace.onDidChangeConfiguration(params => {\n+        if (!params.affectsConfiguration('java') && !params.affectsConfiguration('netbeans')) {\n+            return;\n+        }\n+        let newJdk = find();\n+        if (newJdk !== currentJdk) {\n+            onChange(newJdk);\n+        }\n+    });\n+    onChange(currentJdk);\n+}\n+\n+export function activate(context: ExtensionContext) {\n+    vscode.extensions.all.forEach((e) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNTUxNA=="}, "originalCommit": {"oid": "a41a4906084a17d178a7658146d53ab76c00e721"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 336, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}