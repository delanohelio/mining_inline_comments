{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MTQ3ODYw", "number": 2282, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzowNDo0M1rOET37pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0Njo1OFrOEbofAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjc0Nzg4OnYy", "diffSide": "RIGHT", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzowNDo0M1rOG52u9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjowOTozMlrOG6YOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxODc3NQ==", "bodyText": "Although I'm not an expert of this area, maybe, if you would like to check whether text of a token is the same as given one, should use org.netbeans.api.lexer.TokenUtilities.textEquals() instead of toString().equals (e.g. !TokenUtilities.textEquals(tl.currentToken().text(), \"{\")), then should add // NOI18N to strings.\nPlease reformat your changes. (the changes below, too)", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r463318775", "createdAt": "2020-07-30T23:04:43Z", "author": {"login": "junichi11"}, "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -871,7 +871,18 @@ public Void visitClass(ClassTree tree, Void p) {\n             }\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n-\n+            try{\n+            while(!tl.currentToken().text().toString().equals(\"{\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77530e7aba8ea4654fce42cb32e6eb8a7d5acbc7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2NzQyOQ==", "bodyText": "It doesn't seem to be reformatted yet. Please add // NOI18N for strings that are not expected translation.", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r463867429", "createdAt": "2020-07-31T22:09:32Z", "author": {"login": "junichi11"}, "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -871,7 +871,18 @@ public Void visitClass(ClassTree tree, Void p) {\n             }\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n-\n+            try{\n+            while(!tl.currentToken().text().toString().equals(\"{\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxODc3NQ=="}, "originalCommit": {"oid": "77530e7aba8ea4654fce42cb32e6eb8a7d5acbc7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA0OTIxOnYy", "diffSide": "RIGHT", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozMzo0NVrOHFqr5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozMzo0NVrOHFqr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNDI5NQ==", "bodyText": "These new constants don't seem to be needed, right? The keywords should have attribute KEYWORD, I think, and that should be enough to make them highlighted as a keyword.", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475704295", "createdAt": "2020-08-24T15:33:45Z", "author": {"login": "lahodaj"}, "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java", "diffHunk": "@@ -30,7 +30,9 @@\n public enum ColoringAttributes {\n \n     UNUSED,\n-\n+    SEALED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA1NTQzOnYy", "diffSide": "RIGHT", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNToxMlrOHFqvqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNToxMlrOHFqvqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNTI1OQ==", "bodyText": "My suggestion here would be to:\n\nread the Permitted subclasses\nif non-null/non-empty, do simply firstIdentifierToken(\"permits\"), and add the token to contextKeywords\nrun scan(, null)\n(so that the classes inside the permits clause are highlighted).", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475705259", "createdAt": "2020-08-24T15:35:12Z", "author": {"login": "lahodaj"}, "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -871,7 +872,18 @@ public Void visitClass(ClassTree tree, Void p) {\n             }\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n-\n+            try {\n+                while (!TokenUtilities.textEquals(tl.currentToken().text(), \"{\")) {// NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA1ODE4OnYy", "diffSide": "RIGHT", "path": "java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNTo1MVrOHFqxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNTo1MVrOHFqxWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNTY5MQ==", "bodyText": "These new constants do not seem to be really used, right? I.e. the lexer will never produce a token with this kind?", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475705691", "createdAt": "2020-08-24T15:35:51Z", "author": {"login": "lahodaj"}, "path": "java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java", "diffHunk": "@@ -133,6 +133,9 @@\n     TRUE(\"true\", \"literal\"),\n     FALSE(\"false\", \"literal\"),\n     NULL(\"null\", \"literal\"),\n+    PERMITS(\"permits\", \"keyword\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA2NDU5OnYy", "diffSide": "RIGHT", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNzozOFrOHFq1hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozNzozOFrOHFq1hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNjc1Nw==", "bodyText": "I think it is sensible to use the same settings as for wrapping extends/implements. We may consider tweaking the UI to also mention permits (this applies to both wrapExtendsImplementsKeyword and wrapExtendsImplementsList).", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475706757", "createdAt": "2020-08-24T15:37:38Z", "author": {"login": "lahodaj"}, "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -954,6 +955,11 @@ public Boolean visitClass(ClassTree node, Void p) {\n                         wrapToken(cs.wrapExtendsImplementsKeyword(), 1, id == INTERFACE ? EXTENDS : IMPLEMENTS);\n                         wrapList(cs.wrapExtendsImplementsList(), cs.alignMultilineImplements(), true, COMMA, impls);\n                     }\n+                    List<? extends Tree> perms = TreeShims.getPermits(node);\n+                    if (perms != null && !perms.isEmpty()) {\n+                        wrapToken(cs.wrapExtendsImplementsKeyword(), 1, PERMITS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA5NDk2OnYy", "diffSide": "RIGHT", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NTowNlrOHFrIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NTowNlrOHFrIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTU4Mw==", "bodyText": "Here, I would suggest to create a new method \"visitModifiers\", and put this code into it. Also, it will possibly be a little bit more complex to handle, as \"sealed\" and \"non-sealed\" may be intermixed in other modifiers and annotations. I guess I would suggest to avoid doing toString() on the tree - what will happen if the modifiers contain something like:\n@SuppressWarnings(\"non-sealed\")\n?", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475711583", "createdAt": "2020-08-24T15:45:06Z", "author": {"login": "lahodaj"}, "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -953,6 +965,25 @@ public Void scan(Tree tree, Void p) {\n                 handlePossibleIdentifier(tp, true, info.getTrees().getElement(tp));\n                 tl.moveToOffset(sourcePositions.getEndPosition(getCurrentPath().getCompilationUnit(), TreeShims.getBindingPatternType(tree)));\n                 firstIdentifier(tp, TreeShims.getBinding(tree).toString());\n+            } else if (tree != null && tree.getKind().equals(Kind.MODIFIERS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDA5ODAzOnYy", "diffSide": "RIGHT", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NTo0N1rOHFrKLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NTo0N1rOHFrKLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjA0NA==", "bodyText": "What happens if \"non\" is not followed by \"-sealed\"?", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475712044", "createdAt": "2020-08-24T15:45:47Z", "author": {"login": "lahodaj"}, "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -3524,6 +3530,10 @@ private JavaTokenId accept(JavaTokenId first, JavaTokenId... rest) {\n                             contains = true;\n                             break;\n                         }\n+                        if (TokenUtilities.textEquals(tokens.token().text(), \"non\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"-\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"sealed\")) {// NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDEwMzA2OnYy", "diffSide": "RIGHT", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0Njo1OFrOHFrNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0Njo1OFrOHFrNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjgwMQ==", "bodyText": "I see the token ids are useful here - but I would suggest to add a way to do without them. Enhancing API just to simplify one place a little bit will hurt long-term maintenance.", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475712801", "createdAt": "2020-08-24T15:46:58Z", "author": {"login": "lahodaj"}, "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -1585,7 +1591,7 @@ public Boolean visitModifiers(ModifiersTree node, Void p) {\n                 int lblti = lastBlankLinesTokenIndex;\n                 Diff lbld = lastBlankLinesDiff;\n                 id = accept(PRIVATE, PROTECTED, PUBLIC, STATIC, DEFAULT, TRANSIENT, FINAL,\n-                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT);\n+                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT, SEALED, NONSEALED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 495, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}