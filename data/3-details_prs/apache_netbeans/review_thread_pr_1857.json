{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDM1NTQ4", "number": 1857, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo1OTowN1rODcK8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMzo1NVrODcLAsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY1OTk5OnYy", "diffSide": "RIGHT", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo1OTowN1rOFkE7zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo1OTowN1rOFkE7zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3MzkwMw==", "bodyText": "I wonder what is the point of \"//\"?\nAnyway, a better way may be JavaPlatformManager.getDefaultPlatform().findTool(\"java\").", "url": "https://github.com/apache/netbeans/pull/1857#discussion_r373373903", "createdAt": "2020-01-31T08:59:07Z", "author": {"login": "lahodaj"}, "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.api.common.singlesourcefile;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Utilities;\n+\n+/**\n+ *\n+ * @author Arunava Sinha\n+ */\n+class CompileProcess  {\n+\n+    private static final Logger LOG = Logger.getLogger(CompileProcess.class.getName());\n+    FileObject fileObject;\n+\n+    \n+    public CompileProcess(FileObject fileObject) {\n+        this.fileObject = fileObject;\n+    }\n+\n+    public Process setupProcess() {\n+        File javaBinPath = new File(new File(System.getProperty(\"java.home\")), \"bin\");  //NOI18N\n+        String javaPath = javaBinPath.getAbsolutePath() + \"//java\";  //NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54545c1315776313831efb7c11c4c580b0251d90"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY2NTEzOnYy", "diffSide": "RIGHT", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMTowOFrOFkE-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMTowOFrOFkE-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NDY5Mw==", "bodyText": "FWIW - I suspect this will not work very well for paths with spaces. Doing things like:\ncompileCommandList.add(javacPath);\ncompileCommandList.add(\"-g\");\n...\nmight work better in multiple ways.", "url": "https://github.com/apache/netbeans/pull/1857#discussion_r373374693", "createdAt": "2020-01-31T09:01:08Z", "author": {"login": "lahodaj"}, "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.api.common.singlesourcefile;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Utilities;\n+\n+/**\n+ *\n+ * @author Arunava Sinha\n+ */\n+class CompileProcess  {\n+\n+    private static final Logger LOG = Logger.getLogger(CompileProcess.class.getName());\n+    FileObject fileObject;\n+\n+    \n+    public CompileProcess(FileObject fileObject) {\n+        this.fileObject = fileObject;\n+    }\n+\n+    public Process setupProcess() {\n+        File javaBinPath = new File(new File(System.getProperty(\"java.home\")), \"bin\");  //NOI18N\n+        String javaPath = javaBinPath.getAbsolutePath() + \"//java\";  //NOI18N\n+\n+        String javacPath = javaBinPath.getAbsolutePath() + \"//javac\";  //NOI18N\n+        List<String> compileCommandList = new ArrayList<>();\n+        if (Utilities.isUnix()) {\n+            compileCommandList.add(\"bash\"); //NOI18N\n+            compileCommandList.add(\"-c\"); //NOI18N\n+        }\n+\n+        Object compilerVmOptionsObj = fileObject.getAttribute(SingleSourceFileUtil.FILE_VM_OPTIONS);\n+        String vmOptions = compilerVmOptionsObj != null ? (String) compilerVmOptionsObj : \"\";\n+\n+        compileCommandList.add(javacPath + \" -g\" + \" \" + vmOptions + \" \" + fileObject.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54545c1315776313831efb7c11c4c580b0251d90"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY2ODA1OnYy", "diffSide": "RIGHT", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMjozMVrOFkFAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMjozMVrOFkFAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NTE1OA==", "bodyText": "I wonder why use bash here - is that to split the whitespace-deliminated command line constructed below to parts? Better would be to avoid bash and have a single entry in the list per command/argument.", "url": "https://github.com/apache/netbeans/pull/1857#discussion_r373375158", "createdAt": "2020-01-31T09:02:31Z", "author": {"login": "lahodaj"}, "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/CompileProcess.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.api.common.singlesourcefile;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Utilities;\n+\n+/**\n+ *\n+ * @author Arunava Sinha\n+ */\n+class CompileProcess  {\n+\n+    private static final Logger LOG = Logger.getLogger(CompileProcess.class.getName());\n+    FileObject fileObject;\n+\n+    \n+    public CompileProcess(FileObject fileObject) {\n+        this.fileObject = fileObject;\n+    }\n+\n+    public Process setupProcess() {\n+        File javaBinPath = new File(new File(System.getProperty(\"java.home\")), \"bin\");  //NOI18N\n+        String javaPath = javaBinPath.getAbsolutePath() + \"//java\";  //NOI18N\n+\n+        String javacPath = javaBinPath.getAbsolutePath() + \"//javac\";  //NOI18N\n+        List<String> compileCommandList = new ArrayList<>();\n+        if (Utilities.isUnix()) {\n+            compileCommandList.add(\"bash\"); //NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54545c1315776313831efb7c11c4c580b0251d90"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY2OTAzOnYy", "diffSide": "RIGHT", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/DebugProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMzowM1rOFkFBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMzowM1rOFkFBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NTMzNQ==", "bodyText": "(Similar comments as above.)", "url": "https://github.com/apache/netbeans/pull/1857#discussion_r373375335", "createdAt": "2020-01-31T09:03:03Z", "author": {"login": "lahodaj"}, "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/DebugProcess.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.api.common.singlesourcefile;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Utilities;\n+\n+/**\n+ *\n+ * @author Arunava Sinha\n+ */\n+class DebugProcess {\n+\n+    private static final Logger LOG = Logger.getLogger(DebugProcess.class.getName());\n+    private final Pattern JVM_ARGS_PATTERN = Pattern.compile(\"(.*) (--source[ ]* [0-9]*)(.*)\");  //NOI18N\n+\n+    public Process setupProcess(FileObject fileObject, String port) {\n+        try {\n+\n+            List<String> commandsList = new ArrayList<>();\n+            if (Utilities.isUnix()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54545c1315776313831efb7c11c4c580b0251d90"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY3MTIzOnYy", "diffSide": "RIGHT", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/JPDAStart.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMzo1NVrOFkFCuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowMzo1NVrOFkFCuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NTY3NQ==", "bodyText": "This is unused, correct? Could be removed.", "url": "https://github.com/apache/netbeans/pull/1857#discussion_r373375675", "createdAt": "2020-01-31T09:03:55Z", "author": {"login": "lahodaj"}, "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/singlesourcefile/JPDAStart.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.api.common.singlesourcefile;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sun.jdi.Bootstrap;\n+import com.sun.jdi.connect.ListeningConnector;\n+import com.sun.jdi.connect.Transport;\n+import com.sun.jdi.connect.Connector;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Iterator;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.netbeans.api.debugger.jpda.DebuggerStartException;\n+\n+import org.openide.util.RequestProcessor;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.debugger.jpda.JPDADebugger;\n+import org.netbeans.spi.java.classpath.support.ClassPathSupport;\n+import org.openide.util.Exceptions;\n+import org.openide.windows.InputOutput;\n+\n+/**\n+ * Start the JPDA debugger.\n+ *\n+ * @author Arunava Sinha\n+ */\n+public class JPDAStart implements Runnable {\n+\n+    private static final RequestProcessor RP = new RequestProcessor(JPDAStart.class);\n+    private static final String TRANSPORT = \"dt_socket\"; //NOI18N\n+    private static final Logger LOG = Logger.getLogger(JPDAStart.class.getName());\n+\n+    private final Object[] lock = new Object[2];\n+    private final InputOutput io;\n+    private final FileObject fileObject;\n+\n+    JPDAStart(InputOutput inputOutput, FileObject fileObject) {\n+        io = inputOutput;\n+        this.fileObject = fileObject;\n+    }\n+\n+    /**\n+     * returns the port that the debugger listens to..\n+     */\n+    public String execute() throws Throwable {\n+        LOG.log(Level.INFO, \"JPDA Listening Start\"); //NOI18N\n+        synchronized (lock) {\n+            RP.post(this);\n+            lock.wait();\n+            if (lock[1] != null) {\n+                throw ((Throwable) lock[1]); //NOI18N\n+            }\n+        }\n+        return (String) lock[0];\n+    }\n+\n+    @Override\n+    public void run() {\n+        synchronized (lock) {\n+\n+            try {\n+\n+                ListeningConnector lc = null;\n+                Iterator i = Bootstrap.virtualMachineManager().\n+                        listeningConnectors().iterator();\n+                for (; i.hasNext();) {\n+                    lc = (ListeningConnector) i.next();\n+                    Transport t = lc.transport();\n+                    if (t != null && t.name().equals(getTransport())) {\n+                        break;\n+                    }\n+                }\n+                if (lc == null) {\n+                    throw new RuntimeException(\"No trasports named \" + getTransport() + \" found!\"); //NOI18N\n+                }\n+\n+                final Map args = lc.defaultArguments();\n+                String address = lc.startListening(args);\n+                try {\n+                    int port = Integer.parseInt(address.substring(address.indexOf(':') + 1));\n+                    Connector.IntegerArgument portArg = (Connector.IntegerArgument) args.get(\"port\"); //NOI18N\n+                    portArg.setValue(port);\n+                    lock[0] = Integer.toString(port);\n+                } catch (NumberFormatException e) {\n+                    lock[0] = address;\n+                }\n+                LOG.log(Level.INFO, \"Debug Port:{0}\", lock[0]);  //NOI18N\n+\n+                final Map properties = new HashMap();\n+\n+                ClassPath sourcePath = ClassPathSupport.createClassPath(fileObject.getParent());\n+                ClassPath jdkPath = ClassPathSupport.createClassPath(System.getProperty(\"java.class.path\"));\n+\n+                properties.put(\"sourcepath\", sourcePath); //NOI18N\n+                File baseDir = FileUtil.toFile(fileObject.getParent());\n+                properties.put(\"baseDir\", baseDir); //NOI18N\n+                properties.put(\"name\", fileObject.getName()); //NOI18N\n+\n+                final ListeningConnector flc = lc;\n+                RP.post(() -> {\n+                    try {\n+                        JPDADebugger.startListening(flc, args,\n+                                new Object[]{properties});\n+                    } catch (DebuggerStartException ex) {\n+                        io.getErr().println(\"Debugger Start Error.\"); //NOI18N\n+                        LOG.log(Level.SEVERE, \"Debugger Start Error.\", ex);\n+                    }\n+                });\n+            } catch (java.io.IOException ioex) {\n+                io.getErr().println(\"IO Error:\"); //NOI18N\n+//                org.openide.ErrorManager.getDefault().notify(ioex);\n+                lock[1] = ioex;\n+            } catch (com.sun.jdi.connect.IllegalConnectorArgumentsException icaex) {\n+                io.getErr().println(\"Illegal Connector\"); //NOI18N\n+                lock[1] = icaex;\n+            } finally {\n+                lock.notify();\n+            }\n+        }\n+\n+    }\n+\n+    public String getTransport() {\n+        return TRANSPORT;\n+    }\n+\n+    private static final class CopyReaderWriter implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54545c1315776313831efb7c11c4c580b0251d90"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 705, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}