{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzY2Njk1", "number": 2232, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNToyMDowMFrOELePKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTo0Mjo1NlrOENoJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDY1MTkyOnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/apichanges.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNToyMDowMFrOGtDCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxMDozMzo0MlrOG95-sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4ODkyNw==", "bodyText": "There is no chicken and egg problem, because this should be a JIRA ticket.  AFAIK this will currently get linked to https://issues.apache.org/jira/browse/NETBEANS-2232", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r449888927", "createdAt": "2020-07-05T15:20:00Z", "author": {"login": "neilcsmith-net"}, "path": "platform/openide.util.lookup/apichanges.xml", "diffHunk": "@@ -53,7 +53,7 @@\n             </p>\n         </description>\n         <class name=\"ProxyLookup\" package=\"org.openide.util.lookup\"/>\n-        <issue number=\"pending\"/>\n+        <issue number=\"NETBEANS-2232\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7fe91924944784f57f33748974115e7b1d10657"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2NjI1Nw==", "bodyText": "Fixed in 87a3727", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r467566257", "createdAt": "2020-08-09T10:33:42Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/apichanges.xml", "diffHunk": "@@ -53,7 +53,7 @@\n             </p>\n         </description>\n         <class name=\"ProxyLookup\" package=\"org.openide.util.lookup\"/>\n-        <issue number=\"pending\"/>\n+        <issue number=\"NETBEANS-2232\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4ODkyNw=="}, "originalCommit": {"oid": "e7fe91924944784f57f33748974115e7b1d10657"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0MDg5OnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/apichanges.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozNjoxNVrOGwWlRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozNjoxNVrOGwWlRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NDgyMA==", "bodyText": "Rather than describing usage of grep, I suggest to make the changes in the overall NetBeans sources, once we agree on the API.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453354820", "createdAt": "2020-07-12T19:36:15Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/apichanges.xml", "diffHunk": "@@ -25,6 +25,33 @@\n     <apidef name=\"lookup\">Lookup API</apidef>\n </apidefs>\n <changes>\n+    <change id=\"ProxyLookupController\">\n+        <api name=\"lookup\"/>\n+        <summary>Add ProxyLookup.Controller to set lookups dynamically without \n+            subclassing</summary>\n+        <version major=\"8\" minor=\"43\"/>\n+        <date year=\"2020\" month=\"7\" day=\"4\"/>\n+        <author login=\"tboudreau\"/>\n+        <compatibility addition=\"yes\" source=\"compatible\" semantic=\"compatible\" binary=\"compatible\"/>\n+        <description>\n+            <p>\n+                One of the most common uses of ProxyLookup is to dynamically \n+                change the set of lookups being delegated to.  The objection\n+                to exposing the <code>setLookups()</code> method is straightforward -\n+                it would be inviting <i>clients</i> of such a Lookup to call it.\n+            </p><p>\n+                A cursory grep of NetBeans' own sources finds <b>53 such subclasses</b>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0MTcwOnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozNzozMlrOGwWlqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozNzozMlrOGwWlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NDkyMw==", "bodyText": "The passed in Consumer is no longer called back. It can:\n\"be used later to change the set of lookups the ProxyLookup delegates to via Controller.setLookups method\"", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453354923", "createdAt": "2020-07-12T19:37:32Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -57,6 +58,26 @@\n     public ProxyLookup(Lookup... lookups) {\n         data = ImmutableInternalData.EMPTY.setLookupsNoFire(lookups, true);\n     }\n+    /**\n+     * Create a ProxyLookup whose contents can be set dynamically without\n+     * exposing the setter to consumers of the lookup; the passed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0Mjg2OnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozODoyMlrOGwWmKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozODoyMlrOGwWmKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTA1MQ==", "bodyText": "I really want this change to not rely on JDK8 APIs.\nI suggest to change this field to ProxyLookup.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355051", "createdAt": "2020-07-12T19:38:22Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0MzE2OnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozODo0OFrOGwWmTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozODo0OFrOGwWmTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTA4Nw==", "bodyText": "I don't see a value in this constructor. I suggest to remove it.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355087", "createdAt": "2020-07-12T19:38:48Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0MzY5OnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozOTozNlrOGwWmmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozOTozNlrOGwWmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTE2MA==", "bodyText": "if (this.consumer != null) {\n  throw ISE();\n}\nthis.consumer = lkp;\n\nis all you need, in my opinion.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355160", "createdAt": "2020-07-12T19:39:36Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {\n+            consumer = new InitialConsumer(lookups);\n+        }\n+\n+        /**\n+         * Create a controller with an initially empty set of lookups to\n+         * proxy to.\n+         */\n+        public Controller() {\n+            consumer = new InitialConsumer();\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly, but the executor\n+         * parameter will be ignored (nothing will be listening to it while it's\n+         * in its constructor anyway).\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public synchronized void setLookups(Executor exe, Lookup... lookups) {\n+            consumer.accept(exe, lookups);\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly.\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public void setLookups(Lookup... lookups) {\n+            setLookups(null, lookups);\n+        }\n+\n+        synchronized Lookup[] setProxyLookup(ProxyLookup lkp) {\n+            if (!(this.consumer instanceof InitialConsumer)) {\n+                throw new IllegalStateException(\"Attempting to use \"\n+                        + \"ProxyLookup.Controller for more than one \"\n+                        + \"ProxyLookup is illegal\");\n+            }\n+            Lookup[] result = ((InitialConsumer) consumer).lookups();\n+            this.consumer = lkp::setLookups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0NDAwOnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozOTo1MlrOGwWmvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTozOTo1MlrOGwWmvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTE5Nw==", "bodyText": "Remove this class.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355197", "createdAt": "2020-07-12T19:39:52Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {\n+            consumer = new InitialConsumer(lookups);\n+        }\n+\n+        /**\n+         * Create a controller with an initially empty set of lookups to\n+         * proxy to.\n+         */\n+        public Controller() {\n+            consumer = new InitialConsumer();\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly, but the executor\n+         * parameter will be ignored (nothing will be listening to it while it's\n+         * in its constructor anyway).\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public synchronized void setLookups(Executor exe, Lookup... lookups) {\n+            consumer.accept(exe, lookups);\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly.\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public void setLookups(Lookup... lookups) {\n+            setLookups(null, lookups);\n+        }\n+\n+        synchronized Lookup[] setProxyLookup(ProxyLookup lkp) {\n+            if (!(this.consumer instanceof InitialConsumer)) {\n+                throw new IllegalStateException(\"Attempting to use \"\n+                        + \"ProxyLookup.Controller for more than one \"\n+                        + \"ProxyLookup is illegal\");\n+            }\n+            Lookup[] result = ((InitialConsumer) consumer).lookups();\n+            this.consumer = lkp::setLookups;\n+            return result;\n+        }\n+\n+        private static class InitialConsumer implements BiConsumer<Executor, Lookup[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0NDc1OnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTo0MDozOFrOGwWnFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTowMzo1OVrOG58FdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTI4Nw==", "bodyText": "Throw NullPointerException if the consumer field isn't yet set and document that as expected behavior. That's what I'd suggest.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355287", "createdAt": "2020-07-12T19:40:38Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {\n+            consumer = new InitialConsumer(lookups);\n+        }\n+\n+        /**\n+         * Create a controller with an initially empty set of lookups to\n+         * proxy to.\n+         */\n+        public Controller() {\n+            consumer = new InitialConsumer();\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly, but the executor\n+         * parameter will be ignored (nothing will be listening to it while it's\n+         * in its constructor anyway).\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public synchronized void setLookups(Executor exe, Lookup... lookups) {\n+            consumer.accept(exe, lookups);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4NTc3OQ==", "bodyText": "Throw IllegalArgumentException, maybe.  It is a bad habit to abuse NullPointerException for argument checking - when you see a NullPointerException, that should mean the JVM threw it because it was asked to do something that is impossible with a null.  One case is a bad argument that was checked (bug in the caller), the other is a bug in the callee (at least, failure to check the input) - if you use NullPointerException for both cases, you lose the ability to assume IllegalArgumentException means my code is probably wrong, look at that first and NullPointerException means library code may have a problem, maybe look at that first - and that makes debugging things faster.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r462085779", "createdAt": "2020-07-29T07:11:12Z", "author": {"login": "timboudreau"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {\n+            consumer = new InitialConsumer(lookups);\n+        }\n+\n+        /**\n+         * Create a controller with an initially empty set of lookups to\n+         * proxy to.\n+         */\n+        public Controller() {\n+            consumer = new InitialConsumer();\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly, but the executor\n+         * parameter will be ignored (nothing will be listening to it while it's\n+         * in its constructor anyway).\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public synchronized void setLookups(Executor exe, Lookup... lookups) {\n+            consumer.accept(exe, lookups);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTI4Nw=="}, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNjQ1Mg==", "bodyText": "Throw whatever you prefer.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r463406452", "createdAt": "2020-07-31T05:03:59Z", "author": {"login": "jtulach"}, "path": "platform/openide.util.lookup/src/org/openide/util/lookup/ProxyLookup.java", "diffHunk": "@@ -89,7 +110,96 @@ public synchronized String toString() {\n         }\n         return map.keySet();\n     }\n-    \n+\n+    /**\n+     * A controller which allows the set of lookups being proxied to be\n+     * set dynamically.\n+     *\n+     * @since 8.43\n+     */\n+    public static final class Controller {\n+\n+        private BiConsumer<? super Executor, ? super Lookup[]> consumer;\n+\n+        /**\n+         * Create a controller with an initial set of lookups that will be\n+         * proxied by a {@link ProxyLookup} this controller is passed to the\n+         * constructor of.\n+         * @param lookups An array of lookups\n+         */\n+        public Controller(Lookup... lookups) {\n+            consumer = new InitialConsumer(lookups);\n+        }\n+\n+        /**\n+         * Create a controller with an initially empty set of lookups to\n+         * proxy to.\n+         */\n+        public Controller() {\n+            consumer = new InitialConsumer();\n+        }\n+\n+        /**\n+         * Set the lookups on the {@link ProxyLookup} this controller controls;\n+         * if called before that ProxyLookup has been created, the lookup\n+         * contents will be set during that ProxyLookup's constructor as if you\n+         * had passed them to the constructor directly, but the executor\n+         * parameter will be ignored (nothing will be listening to it while it's\n+         * in its constructor anyway).\n+         *\n+         * @param exe An executor to notify in\n+         * @param lookups An array of Lookups to be proxied\n+         */\n+        public synchronized void setLookups(Executor exe, Lookup... lookups) {\n+            consumer.accept(exe, lookups);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTI4Nw=="}, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI0NjUxOnYy", "diffSide": "RIGHT", "path": "platform/openide.util.lookup/test/unit/src/org/openide/util/lookup/ProxyLookupFactoryMethodsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxOTo0Mjo1NlrOGwWn-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMjozMzowMlrOG93lGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTUxMg==", "bodyText": "This would be replaced with:\nProxyLookup.Controller controller = new ProxyLookup.Controller();\nProxyLookup l = new ProxyLookup(controller);\nl.setLookups(lookups);\nreturn l;\nI suggest to remove BiConsumer altogether as the test should mimic the API usage - e.g. directly use the Controller.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r453355512", "createdAt": "2020-07-12T19:42:56Z", "author": {"login": "JaroslavTulach"}, "path": "platform/openide.util.lookup/test/unit/src/org/openide/util/lookup/ProxyLookupFactoryMethodsTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util.lookup;\n+\n+import java.util.Arrays;\n+import static java.util.Arrays.asList;\n+import java.util.HashSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n+import org.openide.util.lookup.ProxyLookupFactoryMethodsTest.TThreadFactory.TThread;\n+\n+/**\n+ *\n+ * @author Tim Boudreau\n+ */\n+public class ProxyLookupFactoryMethodsTest {\n+\n+    private Consumer<Lookup[]> lookupConsumer;\n+    private BiConsumer<Executor, Lookup[]> lookupBiConsumer;\n+\n+    private Lookup createWithSingleConsumer(Lookup... lookups) {\n+        ProxyLookup.Controller controller = new ProxyLookup.Controller(lookups);\n+        lookupConsumer = controller::setLookups;\n+        return new ProxyLookup(controller);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Nzc5Mw==", "bodyText": "Are you sure you would not me to make this code compatible with JDK 1.3 while we're at it?  Or perhaps 1.2?\nYou have something against functional interfaces?  (I am rather a fan of them)\nAs I sit here with Netbeans running on JDK 14, I wonder, why does Jarda want JDK 7 compatibility?", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r462087793", "createdAt": "2020-07-29T07:15:02Z", "author": {"login": "timboudreau"}, "path": "platform/openide.util.lookup/test/unit/src/org/openide/util/lookup/ProxyLookupFactoryMethodsTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util.lookup;\n+\n+import java.util.Arrays;\n+import static java.util.Arrays.asList;\n+import java.util.HashSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n+import org.openide.util.lookup.ProxyLookupFactoryMethodsTest.TThreadFactory.TThread;\n+\n+/**\n+ *\n+ * @author Tim Boudreau\n+ */\n+public class ProxyLookupFactoryMethodsTest {\n+\n+    private Consumer<Lookup[]> lookupConsumer;\n+    private BiConsumer<Executor, Lookup[]> lookupBiConsumer;\n+\n+    private Lookup createWithSingleConsumer(Lookup... lookups) {\n+        ProxyLookup.Controller controller = new ProxyLookup.Controller(lookups);\n+        lookupConsumer = controller::setLookups;\n+        return new ProxyLookup(controller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTUxMg=="}, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNjA2MA==", "bodyText": "I believe the test should show the expected usage of the API which is now without BiConsumer & co. Keeping such interface in the implementation or test is a relic of an API which disappeared.\nI am running Lookup & co. in restricted environments (see for example #2226). Increased usage of JDK8 APIs complicates that.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r463406060", "createdAt": "2020-07-31T05:02:04Z", "author": {"login": "jtulach"}, "path": "platform/openide.util.lookup/test/unit/src/org/openide/util/lookup/ProxyLookupFactoryMethodsTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util.lookup;\n+\n+import java.util.Arrays;\n+import static java.util.Arrays.asList;\n+import java.util.HashSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n+import org.openide.util.lookup.ProxyLookupFactoryMethodsTest.TThreadFactory.TThread;\n+\n+/**\n+ *\n+ * @author Tim Boudreau\n+ */\n+public class ProxyLookupFactoryMethodsTest {\n+\n+    private Consumer<Lookup[]> lookupConsumer;\n+    private BiConsumer<Executor, Lookup[]> lookupBiConsumer;\n+\n+    private Lookup createWithSingleConsumer(Lookup... lookups) {\n+        ProxyLookup.Controller controller = new ProxyLookup.Controller(lookups);\n+        lookupConsumer = controller::setLookups;\n+        return new ProxyLookup(controller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTUxMg=="}, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyNjkzNg==", "bodyText": "Ok, see if the latest update satisfies your requirements.", "url": "https://github.com/apache/netbeans/pull/2232#discussion_r467526936", "createdAt": "2020-08-09T02:33:02Z", "author": {"login": "timboudreau"}, "path": "platform/openide.util.lookup/test/unit/src/org/openide/util/lookup/ProxyLookupFactoryMethodsTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util.lookup;\n+\n+import java.util.Arrays;\n+import static java.util.Arrays.asList;\n+import java.util.HashSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n+import org.openide.util.lookup.ProxyLookupFactoryMethodsTest.TThreadFactory.TThread;\n+\n+/**\n+ *\n+ * @author Tim Boudreau\n+ */\n+public class ProxyLookupFactoryMethodsTest {\n+\n+    private Consumer<Lookup[]> lookupConsumer;\n+    private BiConsumer<Executor, Lookup[]> lookupBiConsumer;\n+\n+    private Lookup createWithSingleConsumer(Lookup... lookups) {\n+        ProxyLookup.Controller controller = new ProxyLookup.Controller(lookups);\n+        lookupConsumer = controller::setLookups;\n+        return new ProxyLookup(controller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NTUxMg=="}, "originalCommit": {"oid": "6924123f2e503403d7ac410f6f34fb87dea4dc4a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 457, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}