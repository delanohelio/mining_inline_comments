{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjgyNzQy", "number": 1964, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzozODozN1rODiOwgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzozODozN1rODiOwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjE5OTcwOnYy", "diffSide": "RIGHT", "path": "java/java.source.base/src/org/netbeans/modules/java/source/indexing/VanillaCompileWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzozODozN1rOFtXdcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzozODozN1rOFtXdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNDYwOA==", "bodyText": "This appears to be duplicate", "url": "https://github.com/apache/netbeans/pull/1964#discussion_r383114608", "createdAt": "2020-02-24T07:38:37Z", "author": {"login": "mklaehn"}, "path": "java/java.source.base/src/org/netbeans/modules/java/source/indexing/VanillaCompileWorker.java", "diffHunk": "@@ -595,19 +608,56 @@ private void clearAnnotations(SymbolMetadata metadata) {\n                 com.sun.tools.javac.util.List<Attribute.Compound> annotations = metadata.getDeclarationAttributes();\n                 com.sun.tools.javac.util.List<Attribute.Compound> prev = null;\n                 while (annotations.nonEmpty()) {\n-                    if (isErroneous(annotations.head.type)) {\n+                    if (isAnnotationErroneous(annotations.head)) {\n                         if (prev == null) {\n                             metadata.reset();\n                             metadata.setDeclarationAttributes(annotations.tail);\n                         } else {\n                             prev.tail = annotations.tail;\n                         }\n+                    } else {\n+                        prev = annotations;\n                     }\n-                    prev = annotations;\n                     annotations = annotations.tail;\n                 }\n             }\n \n+            private boolean isAnnotationErroneous(Attribute annotation) {\n+                if (isErroneous(annotation.type)) {\n+                    return true;\n+                } else if (annotation instanceof Attribute.Array) {\n+                    for (Attribute nested : ((Attribute.Array) annotation).values) {\n+                        if (isAnnotationErroneous(nested)) {\n+                            return true;\n+                        }\n+                    }\n+                    return false;\n+                } else if (annotation instanceof Attribute.Class) {\n+                    if (isErroneous(((Attribute.Class) annotation).classType)) {\n+                        return true;\n+                    }\n+                    return false;\n+                } else if (annotation instanceof Attribute.Compound) {\n+                    for (Pair<MethodSymbol, Attribute> p : ((Attribute.Compound) annotation).values) {\n+                        if (isAnnotationErroneous(p.snd)) {\n+                            return true;\n+                        }\n+                    }\n+                    return false;\n+                } else if (annotation instanceof Attribute.Constant) {\n+                    return false;\n+                } else if (annotation instanceof Attribute.Enum) {\n+                    return false;\n+                } else if (annotation instanceof Attribute.Enum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12baa70bfa30627a0ce70e26dfd1b7c1b967a5e"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 665, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}