{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDQ0NTc3", "number": 2504, "title": "Snapshot of APIs for 12.2", "bodyText": "As per mailing list thread, snapshot of APIs for 12.2 for review prior to release vote.  Built from beta 3, ideally would keep similar PR open through all betas.  To be updated if need be after beta4/vc and merged to master post release (and then cherry picked to release branch now merging not an option?).\nGenerated with following steps (adapted from https://issues.apache.org/jira/browse/NETBEANSINFRA-229 ) - please check that's sane too.\n# checkout branch (or release tag)\ngit checkout release122\nant clean\nant build\nant gen-sigtests-release\ngit add -A\ngit stash\ngit checkout master\ngit checkout -b SnapshotOfAPIs122\ngit stash pop\ngit commit -m \"Snapshot of APIs as of <TAG>\"\n# remove getPeer() calls\nfind . -name \"*.sig\" -exec sed -i '/java.awt.peer.ComponentPeer/{N;d;}' {} \\;\n# check git diff\ngit add -A\ngit commit --amend", "createdAt": "2020-10-30T14:25:58Z", "url": "https://github.com/apache/netbeans/pull/2504", "merged": true, "mergeCommit": {"oid": "b9a3bfb5f348190a19d2ee9d11f8e66776ee3838"}, "closed": true, "closedAt": "2020-11-26T20:57:19Z", "author": {"login": "neilcsmith-net"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXmIa6gH2gAyNTEzMDQ0NTc3OmM0YWYxN2E5MDRjMmU0Y2Y4YmQxNGYzZWRjMjBjMjA5MTQxZjYxYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfnXomAFqTUzNzM2MTYwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf", "author": {"user": {"login": "neilcsmith-net", "name": "Neil C Smith"}}, "url": "https://github.com/apache/netbeans/commit/c4af17a904c2e4cf8bd14f3edc20c209141f61bf", "committedDate": "2020-10-30T12:43:05Z", "message": "Snapshot of APIs as of 12.2-beta3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTEwMDg1", "url": "https://github.com/apache/netbeans/pull/2504#pullrequestreview-521110085", "createdAt": "2020-10-31T03:52:28Z", "commit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1MjoyOFrOHrkqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyNDo0OVrOHrkzfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg==", "bodyText": "Should this inner class really be visible in the API, Sv\u00e1\u0165o?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451492", "createdAt": "2020-10-31T03:52:28Z", "author": {"login": "JaroslavTulach"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTUyMw==", "bodyText": "Improvements done by @entlicher .", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451523", "createdAt": "2020-10-31T03:53:24Z", "author": {"login": "JaroslavTulach"}, "path": "ide/spi.debugger.ui/nbproject/org-netbeans-spi-debugger-ui.sig", "diffHunk": "@@ -342,6 +343,15 @@ meth public java.util.List<org.netbeans.spi.debugger.ui.DebuggingView$DVFilter>\n supr java.lang.Object\n hfds items\n \n+CLSS public abstract interface static org.netbeans.spi.debugger.ui.DebuggingView$DVFrame", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTY5MA==", "bodyText": "An implementation of URLStreamHandler is probably not something we want to expose in the API, right @entlicher?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451690", "createdAt": "2020-10-31T03:55:15Z", "author": {"login": "JaroslavTulach"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTc3NA==", "bodyText": "Implementation of URLMapper could probably also be hidden.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451774", "createdAt": "2020-10-31T03:56:31Z", "author": {"login": "JaroslavTulach"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler\n+ outer org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+meth protected java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+supr java.net.URLStreamHandler\n+\n+CLSS public abstract interface org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable\n+meth public abstract boolean hasTypeSource()\n+meth public abstract boolean hasValueSource()\n+meth public abstract boolean isInternal()\n+meth public abstract boolean isLeaf()\n+meth public abstract boolean isReadable()\n+meth public abstract boolean isWritable()\n+meth public abstract java.lang.Object getValue()\n+meth public abstract java.lang.Object[] getChildren()\n+meth public abstract java.lang.String getDisplayValue()\n+meth public abstract java.lang.String getName()\n+meth public abstract java.lang.String getType()\n+meth public abstract org.netbeans.api.debugger.jpda.ObjectVariable setValue(org.netbeans.api.debugger.jpda.JPDADebugger,java.lang.String)\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getTypeSource()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getValueSource()\n+meth public static org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable get(org.netbeans.api.debugger.jpda.Variable)\n+\n+CLSS public org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+fld public final static java.lang.String PROP_CONDITION = \"condition\"\n+fld public final static java.lang.String PROP_FILE = \"fileChanged\"\n+fld public final static java.lang.String PROP_LINE_NUMBER = \"lineNumber\"\n+fld public final static java.lang.String PROP_URL = \"url\"\n+meth protected void dispose()\n+meth public boolean isEnabled()\n+meth public final boolean isConditional()\n+meth public final java.lang.String getCondition()\n+meth public final void setCondition(java.lang.String)\n+meth public int getLineNumber()\n+meth public java.lang.String toString()\n+meth public java.net.URL getURL()\n+meth public org.netbeans.modules.javascript2.debug.EditorLineHandler getLineHandler()\n+meth public org.openide.filesystems.FileObject getFileObject()\n+meth public void disable()\n+meth public void enable()\n+meth public void setLine(int)\n+meth public void setLineHandler(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.api.debugger.Breakpoint\n+hfds condition,isEnabled,line,lineChangesWeak,lineChangeslistener,myListener,myWeakListener\n+hcls FileRemoveListener,LineChangesListener\n+\n+CLSS public abstract org.openide.filesystems.URLMapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjA0MQ==", "bodyText": "Yup, various Abstract* providers and IOContext and UIContext classes are exposed from java/java.lsp.server to java/java.lsp.server/nbcode suite which registers them as a service.\nI decided to follow this Abstract* implementation followed by registration style, because it lowers the amount of API java.lsp.server needs to expose. For example now we don't have to export anything from the lsp4j Eclipse API. Its usage remains hidden inside the Abstract* classes.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452041", "createdAt": "2020-10-31T04:00:04Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/nbproject/org-netbeans-modules-java-lsp-server.sig", "diffHunk": "@@ -0,0 +1,175 @@\n+#Signature file v4.1\n+#Version 1.6.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.java.lsp.server.ui.AbstractDialogDisplayer\n+cons public init()\n+meth public java.awt.Dialog createDialog(org.openide.DialogDescriptor)\n+meth public java.lang.Object notify(org.openide.NotifyDescriptor)\n+meth public void notifyLater(org.openide.NotifyDescriptor)\n+supr org.openide.DialogDisplayer\n+hfds context\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+cons protected init()\n+innr public final static LspIO\n+intf org.netbeans.spi.io.InputOutputProvider<org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,java.lang.Void>\n+meth public final boolean isIOClosed(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getErr(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getOut(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.Reader getIn(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getId()\n+meth public final java.lang.Void getCurrentPosition(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter)\n+meth public final java.lang.Void startFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,boolean)\n+meth public final org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO getIO(java.lang.String,boolean,org.openide.util.Lookup)\n+meth public final org.openide.util.Lookup getIOLookup(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void closeIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void endFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void print(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.String,org.netbeans.api.io.Hyperlink,org.netbeans.api.io.OutputColor,boolean)\n+meth public final void resetIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void scrollTo(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void setFoldExpanded(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,boolean)\n+meth public final void setIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.lang.String)\n+meth public final void showIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.util.Set<org.netbeans.api.io.ShowOperation>)\n+supr java.lang.Object\n+\n+CLSS public final static org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO\n+ outer org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+supr java.lang.Object\n+hfds ctx,err,in,lookup,name,out\n+hcls LspWriter\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspStatusDisplayer\n+cons protected init()\n+meth public final java.lang.String getStatusText()\n+meth public final org.openide.awt.StatusDisplayer$Message setStatusText(java.lang.String,int)\n+meth public final void addChangeListener(javax.swing.event.ChangeListener)\n+meth public final void removeChangeListener(javax.swing.event.ChangeListener)\n+meth public final void setStatusText(java.lang.String)\n+supr org.openide.awt.StatusDisplayer\n+hfds text\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjI3MQ==", "bodyText": "Result of 56f16fb - we probably don't want this CreateJavaClassFileFromClipboard extends PasteType class to be visible in the API. Can you move it to implementation package, @singh-akhilesh?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452271", "createdAt": "2020-10-31T04:03:25Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.project.ui/nbproject/org-netbeans-modules-java-project-ui.sig", "diffHunk": "@@ -268,6 +268,13 @@ CLSS public abstract interface static org.netbeans.spi.java.project.support.ui.B\n meth public abstract void platformPropertyUpdated(org.netbeans.api.java.platform.JavaPlatform)\n  anno 1 org.netbeans.api.annotations.common.NonNull()\n \n+CLSS public org.netbeans.spi.java.project.support.ui.CreateJavaClassFileFromClipboard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw==", "bodyText": "Looks like an incompatible API change. Technically it should be associated with increasing the version of the module to /2 to signal incompatibilities. E.g. modules that used to link to previous version of VariableBase.createDispatch are no longer going to link with the new version. Probably harmless. I don't expect many modules linking against php.editor being out there.\nCC @junichi11", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452777", "createdAt": "2020-10-31T04:10:09Z", "author": {"login": "JaroslavTulach"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjkwNw==", "bodyText": "Incompatible as well. If there was a module using T_ABSTRACT in previous version, it has value 143 copied (as primitive values are copied by javac), but newly compiled code will get value 145. CC @junichi11", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452907", "createdAt": "2020-10-31T04:12:08Z", "author": {"login": "JaroslavTulach"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1722,167 +1732,169 @@ hfds ZZ_ACTION,ZZ_ACTION_PACKED_0,ZZ_ATTRIBUTE,ZZ_ATTRIBUTE_PACKED_0,ZZ_BUFFERSI\n \n CLSS public abstract interface org.netbeans.modules.php.editor.parser.ASTPHP5Symbols\n fld public final static int EOF = 0\n-fld public final static int T_ABSTRACT = 143\n-fld public final static int T_AND_EQUAL = 95\n-fld public final static int T_ARRAY = 57\n-fld public final static int T_ARRAY_CAST = 131\n+fld public final static int T_ABSTRACT = 145", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzExNw==", "bodyText": "Added as part of #2317 and btw. the support works: this week I managed to install old NBPython support into NetBeans 12.2beta2 running on JDK14.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453117", "createdAt": "2020-10-31T04:14:58Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/nbproject/org-netbeans-modules-autoupdate-services.sig", "diffHunk": "@@ -157,6 +158,7 @@ CLSS public final static !enum org.netbeans.api.autoupdate.OperationException$ER\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE ENABLE\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE INSTALL\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE INSTALLER\n+fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE MISSING_UNPACK200", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzI4NQ==", "bodyText": "There is unlikely much we could do about these 3rd party API removals than to accept them as fact.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453285", "createdAt": "2020-10-31T04:17:31Z", "author": {"login": "JaroslavTulach"}, "path": "platform/libs.testng/nbproject/org-netbeans-libs-testng.sig", "diffHunk": "@@ -1262,55 +1309,29 @@ meth public abstract !hasdefault java.lang.String[] dependsOnMethods()\n meth public abstract !hasdefault java.lang.String[] groups()\n meth public abstract !hasdefault long timeOut()\n \n-CLSS public abstract interface !annotation org.testng.annotations.Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 875}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzM0Ng==", "bodyText": "CCing @sdedic", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453346", "createdAt": "2020-10-31T04:19:00Z", "author": {"login": "JaroslavTulach"}, "path": "webcommon/javascript2.editor/nbproject/org-netbeans-modules-javascript2-editor.sig", "diffHunk": "@@ -122,6 +122,11 @@ CLSS public abstract interface static !annotation org.netbeans.modules.javascrip\n intf java.lang.annotation.Annotation\n meth public abstract !hasdefault int priority()\n \n+CLSS public abstract interface org.netbeans.modules.javascript2.editor.spi.CompletionProviderEx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzQ5NQ==", "bodyText": "I guess ProjectConfiguration inner class shouldn't be part of API to begin with, @jlahoda?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453495", "createdAt": "2020-10-31T04:20:33Z", "author": {"login": "JaroslavTulach"}, "path": "cpplite/cpplite.editor/nbproject/org-netbeans-modules-cpplite-editor.sig", "diffHunk": "@@ -24,7 +24,9 @@ meth public abstract void removeChangeListener(javax.swing.event.ChangeListener)\n CLSS public static org.netbeans.modules.cpplite.editor.spi.CProjectConfigurationProvider$ProjectConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY0Mw==", "bodyText": "Up to @lkishalmi to be satisfied with the new API.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453643", "createdAt": "2020-10-31T04:22:09Z", "author": {"login": "JaroslavTulach"}, "path": "extide/gradle/nbproject/org-netbeans-modules-gradle.sig", "diffHunk": "@@ -442,6 +442,39 @@ meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$Sta\n meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace[] values()\n supr java.lang.Enum<org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace>\n \n+CLSS public final org.netbeans.modules.gradle.api.execute.GradleDistributionManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY3OA==", "bodyText": "Result of @sdedic changes, I assume.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453678", "createdAt": "2020-10-31T04:23:03Z", "author": {"login": "JaroslavTulach"}, "path": "ide/csl.api/nbproject/org-netbeans-modules-csl-api.sig", "diffHunk": "@@ -807,14 +807,17 @@ hfds ADDED,MAX_KEEP,REMOVED,delta,editedEnd,edits,originalEnd,previous,start,tok\n hcls Edit\n \n CLSS public org.netbeans.modules.csl.api.EditList\n+cons public init(javax.swing.text.Document)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg==", "bodyText": "Interesting. CCing @sdedic", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453822", "createdAt": "2020-10-31T04:24:49Z", "author": {"login": "JaroslavTulach"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTk3MjA5", "url": "https://github.com/apache/netbeans/pull/2504#pullrequestreview-521197209", "createdAt": "2020-11-01T06:46:48Z", "commit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0Njo0OFrOHrst4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0Njo0OFrOHrst4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzQ1OQ==", "bodyText": "This is deliberate - for unit tests to read HTML completion items.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583459", "createdAt": "2020-11-01T06:46:48Z", "author": {"login": "sdedic"}, "path": "ide/html.editor/nbproject/org-netbeans-modules-html-editor.sig", "diffHunk": "@@ -555,6 +556,7 @@ meth public java.lang.CharSequence getSortText()\n meth public java.lang.String getHelp()\n meth public java.lang.String getHelpId()\n meth public java.lang.String getItemText()\n+meth public java.lang.String toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTk3MjY3", "url": "https://github.com/apache/netbeans/pull/2504#pullrequestreview-521197267", "createdAt": "2020-11-01T06:48:13Z", "commit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0ODoxM1rOHrsuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0ODoxM1rOHrsuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzU0NA==", "bodyText": "OK, exported to JS/HTML.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583544", "createdAt": "2020-11-01T06:48:13Z", "author": {"login": "sdedic"}, "path": "ide/web.common/nbproject/org-netbeans-modules-web-common.sig", "diffHunk": "@@ -328,6 +328,7 @@ cons public init(java.util.Map<java.lang.String,?>)\n fld public final static java.lang.String MIMETYPE = \"mimeType\"\n meth public java.lang.Object value(java.lang.String)\n meth public java.util.Collection<java.lang.String> keys()\n+meth public static java.lang.String getContentMimeType(org.netbeans.modules.parsing.spi.Parser$Result,boolean)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTk3NjM1", "url": "https://github.com/apache/netbeans/pull/2504#pullrequestreview-521197635", "createdAt": "2020-11-01T06:54:57Z", "commit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo1NDo1OFrOHrswrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo1NDo1OFrOHrswrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NDE3NQ==", "bodyText": "OK, introduced by #2298", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515584175", "createdAt": "2020-11-01T06:54:58Z", "author": {"login": "sdedic"}, "path": "platform/spi.quicksearch/nbproject/org-netbeans-spi-quicksearch.sig", "diffHunk": "@@ -29,6 +29,7 @@ meth public boolean addResult(java.lang.Runnable,java.lang.String)\n  anno 0 org.netbeans.api.annotations.common.CheckReturnValue()\n meth public boolean addResult(java.lang.Runnable,java.lang.String,java.lang.String,java.util.List<? extends javax.swing.KeyStroke>)\n  anno 0 org.netbeans.api.annotations.common.CheckReturnValue()\n+meth public boolean isObsolete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae3f5469bc46ecb509bb9d92c7aaf46e11c6468e", "author": {"user": {"login": "lkishalmi", "name": "Laszlo Kishalmi"}}, "url": "https://github.com/apache/netbeans/commit/ae3f5469bc46ecb509bb9d92c7aaf46e11c6468e", "committedDate": "2020-11-22T16:24:25Z", "message": "API Signature Snapshot of NetBeans 12.2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzYxNjAz", "url": "https://github.com/apache/netbeans/pull/2504#pullrequestreview-537361603", "createdAt": "2020-11-24T10:41:00Z", "commit": {"oid": "ae3f5469bc46ecb509bb9d92c7aaf46e11c6468e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 525, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}