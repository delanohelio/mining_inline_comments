{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDc4MzIx", "number": 2143, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoxODoxNVrOD-EpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyMzo1NFrOD-S6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE0Mzk2OnYy", "diffSide": "RIGHT", "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/ActionProviderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoxODoxNVrOGX8uHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoxODoxNVrOGX8uHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NTI3Nw==", "bodyText": "Nitpick: maybe a small helper shouldUseLangtoolsBuild(String repoName, FileObject testFile) could help to unify this settings lookup + condition: 2 occurrences. Consider when chaning the conditions next time :)", "url": "https://github.com/apache/netbeans/pull/2143#discussion_r427765277", "createdAt": "2020-05-20T06:18:15Z", "author": {"login": "sdedic"}, "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/ActionProviderImpl.java", "diffHunk": "@@ -409,12 +409,15 @@ private static boolean newStyleXPatch(FileObject testFile) {\n     static String builtClassesDirsForBootClassPath(FileObject testFile) {\n         File buildDir = BuildUtils.getBuildTargetDir(testFile);\n         Project prj = FileOwnerQuery.getOwner(testFile);\n+        Settings settings = prj.getLookup().lookup(Settings.class);\n+        boolean useLangtoolsBuild = settings == null || settings.isUseAntBuild();\n         List<FileObject> roots = new ArrayList<>();\n \n         if (buildDir != null) {\n             FileObject repo = prj.getProjectDirectory().getParent().getParent();\n             if (repo.getNameExt().equals(\"langtools\") &&\n-                ShortcutUtils.getDefault().shouldUseCustomTest(repo.getNameExt(), FileUtil.getRelativePath(repo, testFile))) {\n+                ShortcutUtils.getDefault().shouldUseCustomTest(repo.getNameExt(), FileUtil.getRelativePath(repo, testFile)) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899080a2868991842215524fe1f6f11c0d4e1df6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE2OTQ1OnYy", "diffSide": "RIGHT", "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/project/ActionProviderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyODoyN1rOGX89rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyODoyN1rOGX89rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2OTI2Mg==", "bodyText": "The other ActionProviderImpl checks settings != null before dereferencing. But a direct dereference was already there in COMMAND_BUILD_GENERIC_FAST branch.", "url": "https://github.com/apache/netbeans/pull/2143#discussion_r427769262", "createdAt": "2020-05-20T06:28:27Z", "author": {"login": "sdedic"}, "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/project/ActionProviderImpl.java", "diffHunk": "@@ -171,8 +171,14 @@ public void invokeAction(String command, Lookup context) throws IllegalArgumentE\n             }\n         }\n         FileObject scriptFO = script;\n+        Settings settings = project.getLookup().lookup(Settings.class);\n+        Properties props = new Properties();\n+        if (settings.isUseAntBuild()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899080a2868991842215524fe1f6f11c0d4e1df6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjQ4MTIzOnYy", "diffSide": "RIGHT", "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/project/customizer/BuildCategory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyMzo1NFrOGYT0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyMzo1NFrOGYT0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0Mzg2NA==", "bodyText": "Should use setAntBuildLocation.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                settings.setJTregLocation(panel.antBuildLocation.getText());\n          \n          \n            \n                                settings.setAntBuildLocation(panel.antBuildLocation.getText());", "url": "https://github.com/apache/netbeans/pull/2143#discussion_r428143864", "createdAt": "2020-05-20T16:23:54Z", "author": {"login": "jlahoda"}, "path": "java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/project/customizer/BuildCategory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.openjdk.project.customizer;\n+\n+import javax.swing.JComponent;\n+import org.netbeans.modules.java.openjdk.project.JDKProject;\n+import org.netbeans.modules.java.openjdk.project.Settings;\n+import org.netbeans.spi.project.ui.support.ProjectCustomizer;\n+import org.openide.util.Lookup;\n+\n+/**\n+ *\n+ * @author lahvac\n+ */\n+public class BuildCategory extends javax.swing.JPanel {\n+\n+    /**\n+     * Creates new form BuildCategory\n+     */\n+    public BuildCategory(boolean useAntBuild, String antBuildLocation) {\n+        initComponents();\n+        this.useAntBuild.setSelected(useAntBuild);\n+        this.antBuildLocation.setText(antBuildLocation);\n+        updateEnableDisable();\n+    }\n+\n+    private void updateEnableDisable() {\n+        antBuildLocationLabel.setEnabled(useAntBuild.isSelected());\n+        antBuildLocation.setEnabled(useAntBuild.isSelected());\n+    }\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        useAntBuild = new javax.swing.JCheckBox();\n+        antBuildLocationLabel = new javax.swing.JLabel();\n+        antBuildLocation = new javax.swing.JTextField();\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(useAntBuild, org.openide.util.NbBundle.getMessage(BuildCategory.class, \"BuildCategory.useAntBuild.text\")); // NOI18N\n+        useAntBuild.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                useAntBuildActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(antBuildLocationLabel, org.openide.util.NbBundle.getMessage(BuildCategory.class, \"BuildCategory.antBuildLocationLabel.text\")); // NOI18N\n+\n+        antBuildLocation.setText(org.openide.util.NbBundle.getMessage(BuildCategory.class, \"BuildCategory.antBuildLocation.text\")); // NOI18N\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addContainerGap()\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addGroup(layout.createSequentialGroup()\n+                        .addGap(21, 21, 21)\n+                        .addComponent(antBuildLocationLabel)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(antBuildLocation))\n+                    .addComponent(useAntBuild, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))\n+                .addContainerGap())\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addContainerGap()\n+                .addComponent(useAntBuild)\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(antBuildLocationLabel)\n+                    .addComponent(antBuildLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addContainerGap(244, Short.MAX_VALUE))\n+        );\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void useAntBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAntBuildActionPerformed\n+        updateEnableDisable();\n+    }//GEN-LAST:event_useAntBuildActionPerformed\n+\n+\n+    // Variables declaration - do not modify//GEN-BEGIN:variables\n+    private javax.swing.JTextField antBuildLocation;\n+    private javax.swing.JLabel antBuildLocationLabel;\n+    private javax.swing.JCheckBox useAntBuild;\n+    // End of variables declaration//GEN-END:variables\n+\n+    @ProjectCustomizer.CompositeCategoryProvider.Registration(projectType=JDKProject.PROJECT_KEY, position=100)\n+    public static ProjectCustomizer.CompositeCategoryProvider createCategoryProvider() {\n+        return new ProjectCustomizer.CompositeCategoryProvider() {\n+            @Override\n+            public ProjectCustomizer.Category createCategory(Lookup context) {\n+                if (context.lookup(Settings.class) != null)\n+                    return ProjectCustomizer.Category.create(\"build\", \"Build\", null);\n+                return null;\n+            }\n+            @Override\n+            public JComponent createComponent(ProjectCustomizer.Category category, Lookup context) {\n+                Settings settings = context.lookup(Settings.class);\n+                BuildCategory panel = new BuildCategory(settings.isUseAntBuild(), settings.getAntBuildLocation());\n+                category.setOkButtonListener(evt -> {\n+                    settings.setUseAntBuild(panel.useAntBuild.isSelected());\n+                    settings.setJTregLocation(panel.antBuildLocation.getText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfec4b6c18dc7de9831c9963c20028ee65e885f2"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 541, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}