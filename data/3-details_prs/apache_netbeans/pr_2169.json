{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNDkzMzM4", "number": 2169, "title": "[NETBEANS-4415] Export dataview results to file", "bodyText": "Jira: https://issues.apache.org/jira/browse/NETBEANS-4415\nThis pull request adds the functionality to export database dataview results to a file.\nSupport for .csv, .tsv (tab separated), .xls and .xlsx is included.\nBelow are some relevant screenshots:\n\nThe menu item \"Export Table Data\" has been introduced. This will open a file chooser window.\n\nThe file chooser filters the files by the extension:\n\nThe changes have been made in a way that is relevantly straightforward to introduce a new file format.\nFor the creation of the csv and tsv files the Apache csv commons library was introduced. For the xls and xlsx files the Apache POI and relevant dependencies were introduced.\nTests have been introduced that compare the generated files to provided \"golden\" files. For the csv and tsv files a file comparison is made. For xls and xlsx only the contents of the workbook are compared because metadata such as the author will cause an exact file comparison to fail.\nIn case you consider that it is beneficial to include this feature let me know if you have any question regarding the implementation or if you have to propose any improvement. Thanks.", "createdAt": "2020-06-07T23:50:46Z", "url": "https://github.com/apache/netbeans/pull/2169", "merged": true, "mergeCommit": {"oid": "6bdf1c3e749762c5ee4c6b6d96121270b0e9b3b2"}, "closed": true, "closedAt": "2020-10-08T21:07:04Z", "author": {"login": "MasterEx"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0oOHhAH2gAyNDMwNDkzMzM4Ojc2YTdmMWYwODE3NzM0MDA4NGI2NDU4NTlhYjRmMjFlMDRjMjRiNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPXJ43gH2gAyNDMwNDkzMzM4OmZhZTE5YzYxMGVkNWE5Y2I2NDA5OTJlODhkZmI3YTFiMTgxODBmOTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/76a7f1f08177340084b645859ab4f21e04c24b5e", "committedDate": "2020-07-13T21:21:46Z", "message": "[NETBEANS-4415] Export dataview results to file\n\n * Support .csv, .tsv and .xlsx formats\n\nJira: https://issues.apache.org/jira/browse/NETBEANS-4415"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e6c5b2af820fe5e5566bb8c95582ebc6e76bf86", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/2e6c5b2af820fe5e5566bb8c95582ebc6e76bf86", "committedDate": "2020-06-07T22:56:28Z", "message": "[NETBEANS-4415] Export dataview results to file\n\n * Support .csv, .tsv, .xls and .xlsx formats\n\nJira: https://issues.apache.org/jira/browse/NETBEANS-4415"}, "afterCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/76a7f1f08177340084b645859ab4f21e04c24b5e", "committedDate": "2020-07-13T21:21:46Z", "message": "[NETBEANS-4415] Export dataview results to file\n\n * Support .csv, .tsv and .xlsx formats\n\nJira: https://issues.apache.org/jira/browse/NETBEANS-4415"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzc1Njg1", "url": "https://github.com/apache/netbeans/pull/2169#pullrequestreview-452775685", "createdAt": "2020-07-21T19:45:23Z", "commit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NToyM1rOG1HLfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNjo1M1rOG5Ij0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NTM0MQ==", "bodyText": "Please add \"Type\" with the value \"compile-time\" here to indicate, that the dependency is not used at runtime, but only at compile/test time.\nFor all dependencies, that are ALv2 licenses, please check if a NOTICE file exists. The ALv2 requires users to include the info of that file in the same file when redistributing. The NOTICE file from the library needs to be checked whether or not the information is relevant.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458345341", "createdAt": "2020-07-21T19:45:23Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/external/commons-collections4-4.4-license.txt", "diffHunk": "@@ -0,0 +1,208 @@\n+Name: Apache Commons Collections\n+Version: 4.4\n+License: Apache-2.0\n+Description: The Apache Commons Collections package contains types that extend and augment the Java Collections Framework.\n+Origin: Apache Software Foundation\n+URL: https://commons.apache.org/proper/commons-collections/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NzE5MA==", "bodyText": "I had a WTF moment as this is the text for the menuitem, but it follows the existing convention, so this is fine.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458347190", "createdAt": "2020-07-21T19:48:52Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/Bundle.properties", "diffHunk": "@@ -80,6 +80,8 @@ TOOLTIP_commit_all=Commit Record(s)\n \n TOOLTIP_print_data=Print Table Data\n \n+TOOLTIP_export_data=Export Table Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTM4Mg==", "bodyText": "This splits at the first dot, not the last. Would it make sense to use a FileObject#getExt?", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458349382", "createdAt": "2020-07-21T19:52:58Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataExportUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.sql.SQLException;\n+import javax.swing.JTable;\n+import org.netbeans.modules.db.dataview.util.FileBackedClob;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ * Data export utility methods.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public class DataExportUtils {\n+\n+    /**\n+     * Returns the filename file type extension in lower case. The extension is\n+     * the part after the last dot character (.). Example: for filename\n+     * \"foo.java\" it will return \"java\".\n+     *\n+     * @param filename\n+     * @return The filename extension (part after the last .) in lower case.\n+     */\n+    public static String getExtension(String filename) {\n+        String[] tokens = filename.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjIzMg==", "bodyText": "This operates on the JTable and thus must be called from the EDT. I feel uncomfortable with that, as the EDT should not be blocked for long times. Could you please check if a copy / read-only version of the data is available without touching Swing or only shortly?", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458352232", "createdAt": "2020-07-21T19:58:10Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataExportUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.sql.SQLException;\n+import javax.swing.JTable;\n+import org.netbeans.modules.db.dataview.util.FileBackedClob;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ * Data export utility methods.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public class DataExportUtils {\n+\n+    /**\n+     * Returns the filename file type extension in lower case. The extension is\n+     * the part after the last dot character (.). Example: for filename\n+     * \"foo.java\" it will return \"java\".\n+     *\n+     * @param filename\n+     * @return The filename extension (part after the last .) in lower case.\n+     */\n+    public static String getExtension(String filename) {\n+        String[] tokens = filename.split(\"\\\\.\");\n+        return tokens[tokens.length - 1].toLowerCase();\n+    }\n+\n+    /**\n+     * Returns the column names of a JTable as an array of strings.\n+     *\n+     * @param table A JTable.\n+     * @return String[] populated with the column names.\n+     */\n+    public static String[] getColumnNames(JTable table) {\n+        String[] header = new String[table.getColumnCount()];\n+        for (int i = 0; i < table.getColumnCount(); i++) {\n+            header[i] = table.getColumnName(i);\n+        }\n+        return header;\n+    }\n+\n+    /**\n+     * Returns the contents of a JTable as a two dimensional Object array.\n+     *\n+     * @param table A JTable.\n+     * @return Object[][] populated with the table contents.\n+     */\n+    public static Object[][] getTableContents(JTable table) {\n+        Object[][] contents = new Object[table.getRowCount()][table.getColumnCount()];\n+        for (int i = 0; i < table.getRowCount(); i++) {\n+            for (int j = 0; j < table.getColumnCount(); j++) {\n+                if (table.getValueAt(i, j) instanceof FileBackedClob) {\n+                    FileBackedClob lob = (FileBackedClob) table.getValueAt(i, j);\n+                    try {\n+                        contents[i][j] = lob.getSubString(1, (int) lob.length());\n+                    } catch (SQLException ex) {\n+                        Exceptions.printStackTrace(ex);\n+                    }\n+                } else {\n+                    contents[i][j] = table.getValueAt(i, j);\n+                }\n+            }\n+        }\n+        return contents;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjI1Ng==", "bodyText": "My gut feeling is, that this is one of the cases where an abstract base class is a better fit for this case. But this is discussable.  If we ever get an SPI where modules can supply their own serializers, we need to rethink this anyway.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r462562256", "createdAt": "2020-07-29T20:16:53Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/CSVCommonsDataExporter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ *\n+ * Exports the given data to the target file in the provided CSV format.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public interface CSVCommonsDataExporter {\n+\n+    default void exportData(String[] headers, Object[][] contents, File file, CSVFormat format) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c70b59cdcd1e7467da2b69501d32b99d0fa9752", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/3c70b59cdcd1e7467da2b69501d32b99d0fa9752", "committedDate": "2020-08-07T22:38:23Z", "message": "[NETBEANS-4415] Fixed license issues\n\n * Added notice.txt files where applicable\n * Added the optional Type header to the licenses of the compile time dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962ffd2083fef6a8cd69f3ada975f196ad5365eb", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/962ffd2083fef6a8cd69f3ada975f196ad5365eb", "committedDate": "2020-08-07T22:38:35Z", "message": "[NETBEANS-4415] Use of abstract classes for common functionality\n\n * DataExporter and CSVCommonDataExporter became abstract classes\n instead of interfaces. Common functionality that was implemented\n in the concrete classes was implemented there.\n * Concrete classes are not longer Singletons.\n * Some functionality that was in DataExportUitls was moved (and\n   modified) in the DataExporter abstract class."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTk1MDAw", "url": "https://github.com/apache/netbeans/pull/2169#pullrequestreview-472995000", "createdAt": "2020-08-23T09:20:09Z", "commit": {"oid": "962ffd2083fef6a8cd69f3ada975f196ad5365eb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwOToyMDoxMFrOHFLnPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMTowNDoxOVrOHFMO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE5NTE5Nw==", "bodyText": "Apache Policy allows to drop license comment for certain files under strict conditions. We have verbatim exclusions for test files, but that historic and at some point might be removed. Having the licenseinfo now makes it easier in the future to remove the exclusion.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r475195197", "createdAt": "2020-08-23T09:20:10Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/external/commons-collections4-4.4-license.txt", "diffHunk": "@@ -0,0 +1,208 @@\n+Name: Apache Commons Collections\n+Version: 4.4\n+License: Apache-2.0\n+Description: The Apache Commons Collections package contains types that extend and augment the Java Collections Framework.\n+Origin: Apache Software Foundation\n+URL: https://commons.apache.org/proper/commons-collections/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NTM0MQ=="}, "originalCommit": {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTM2NQ==", "bodyText": "At this point I would store the value of fc.getCurrentDirectory() into a static variable currentDirectory and initialize the file chooser in line 51 via fc.setCurrentDirectory to that value. The same is true for the selected file format. I would expect both value to be pretty constant when invoked multiple times.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r475205365", "createdAt": "2020-08-23T11:04:19Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataViewTableDataExportFileChooser.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JFileChooser;\n+import javax.swing.JOptionPane;\n+import javax.swing.JTable;\n+import javax.swing.filechooser.FileFilter;\n+import org.netbeans.api.progress.BaseProgressUtils;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+@NbBundle.Messages({\n+    \"LBL_FILE_CHOOSER=Export Table Data\",\n+    \"LBL_OVEWRITE_DIALOG=Confirm Data Export\",\n+    \"MSG_OVEWRITE_DIALOG=File already exists.\\nDo you want to overwrite it?\",\n+    \"MSG_EXPORT_DATA=Export Data...\"\n+})\n+public class DataViewTableDataExportFileChooser {\n+\n+    private static final List<DataExporter> EXPORTERS = Arrays.asList(\n+            new CSVDataExporter(),\n+            new TSVDataExporter(),\n+            new XLSXDataExporter()\n+    );\n+\n+    public static void extractAsFile(final JTable table) {\n+        final JFileChooser fc = new JFileChooser();\n+        fc.setAcceptAllFileFilterUsed(false);\n+        EXPORTERS.forEach(exporter -> fc.addChoosableFileFilter(exporter.getFileFilter()));\n+        int returnVal = fc.showDialog(null, Bundle.LBL_FILE_CHOOSER());\n+        switch (returnVal) {\n+            case JFileChooser.APPROVE_OPTION:\n+                FileFilter filter = fc.getFileFilter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962ffd2083fef6a8cd69f3ada975f196ad5365eb"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629b733c94d0fda27cf96714a19fb383c9156f21", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/629b733c94d0fda27cf96714a19fb383c9156f21", "committedDate": "2020-08-30T17:58:56Z", "message": "[NETBEANS-4415] Set default FileChooser directory and file filter\n\n Ensures similar behavior between consequent executions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b1287d9aa6b80331fd15fd411c471bfb394fe6", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/f2b1287d9aa6b80331fd15fd411c471bfb394fe6", "committedDate": "2020-08-30T19:33:54Z", "message": "[NETBEANS-4415] Added test files to licenseinfo.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjE2MjM4", "url": "https://github.com/apache/netbeans/pull/2169#pullrequestreview-492216238", "createdAt": "2020-09-20T19:13:59Z", "commit": {"oid": "f2b1287d9aa6b80331fd15fd411c471bfb394fe6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxMzo1OVrOHU8cMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxNzozM1rOHU8dkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMzgyNw==", "bodyText": "Regarding a previous comment about accessing the JTable and potentially blocking the EDT I am afraid that I don't have any better suggestion without making significant changes to the existing code or this pull request. Some alternatives I can think are:\n1. Store the query result somewhere else and access it from there. This requires modifying the existing code that performs the query.\n\n2. Change approach and instead of exporting to a file whatever the `JTable` displays, execute the query again and export the outcome of the query. I personally like the behavior as introduced by this pull request better so I am against this approach.\n\nWhat do you think?\n\nI had another look at db.dataview. I think your extraction code would be easier, if it would work directly on the DataViewTableUIModel. That class (or more precise its superclass) already has the necessary accessors: getData() and getColumnName. That prevents reinventing the wheel.\nExporting in this case means exporting the visible data - given that it is only logical to reuse the already queried data. We don't gain much from doing a requery. Storing the query result twice is IMHO a no-go as it will double the necessary heap and we are already suffering from OOMEs.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r491723827", "createdAt": "2020-09-20T19:13:59Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataViewTableDataExportFileChooser.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JFileChooser;\n+import javax.swing.JOptionPane;\n+import javax.swing.JTable;\n+import javax.swing.filechooser.FileFilter;\n+import org.netbeans.api.progress.BaseProgressUtils;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+@NbBundle.Messages({\n+    \"LBL_FILE_CHOOSER=Export Table Data\",\n+    \"LBL_OVEWRITE_DIALOG=Confirm Data Export\",\n+    \"MSG_OVEWRITE_DIALOG=File already exists.\\nDo you want to overwrite it?\",\n+    \"MSG_EXPORT_DATA=Export Data...\"\n+})\n+public class DataViewTableDataExportFileChooser {\n+\n+    private static final List<DataExporter> EXPORTERS = Arrays.asList(\n+            new CSVDataExporter(),\n+            new TSVDataExporter(),\n+            new XLSXDataExporter()\n+    );\n+\n+    public static void extractAsFile(final JTable table) {\n+        final JFileChooser fc = new JFileChooser();\n+        fc.setAcceptAllFileFilterUsed(false);\n+        EXPORTERS.forEach(exporter -> fc.addChoosableFileFilter(exporter.getFileFilter()));\n+        int returnVal = fc.showDialog(null, Bundle.LBL_FILE_CHOOSER());\n+        switch (returnVal) {\n+            case JFileChooser.APPROVE_OPTION:\n+                FileFilter filter = fc.getFileFilter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTM2NQ=="}, "originalCommit": {"oid": "962ffd2083fef6a8cd69f3ada975f196ad5365eb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDE3OQ==", "bodyText": "Also, I have implemented the suggestion about storing and using the current directory and also explicitly setting the default file filter. To be honest if I understand correctly the default behavior should also be constant between invocations and always return the user's \"default\" directory. I guess that this could change in theory while the application is still running but it seems a bit extreme scenario. Anyway, I have made the change and any other suggestion is mote than welcome.\n\nLines 98-100 are unnecessary:\nhttps://docs.oracle.com/javase/7/docs/api/javax/swing/JFileChooser.html#setCurrentDirectory(java.io.File)\nWhat I meant is, that you should modify extractAsFile and there the switch case for JFileChooser.APPROVE_OPTION. If the user uses that, query the the current directory and store that. The file chooser on the second call will start in the directory the user selected last.", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r491724179", "createdAt": "2020-09-20T19:17:33Z", "author": {"login": "matthiasblaesing"}, "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataViewTableDataExportFileChooser.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JFileChooser;\n+import javax.swing.JOptionPane;\n+import javax.swing.JTable;\n+import javax.swing.filechooser.FileFilter;\n+import org.netbeans.api.progress.BaseProgressUtils;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+@NbBundle.Messages({\n+    \"LBL_FILE_CHOOSER=Export Table Data\",\n+    \"LBL_OVEWRITE_DIALOG=Confirm Data Export\",\n+    \"MSG_OVEWRITE_DIALOG=File already exists.\\nDo you want to overwrite it?\",\n+    \"MSG_EXPORT_DATA=Export Data...\"\n+})\n+public class DataViewTableDataExportFileChooser {\n+\n+    private static final List<DataExporter> EXPORTERS = Arrays.asList(\n+            new CSVDataExporter(),\n+            new TSVDataExporter(),\n+            new XLSXDataExporter()\n+    );\n+    \n+    private static File defaultDirectory;\n+\n+    public static void extractAsFile(final JTable table) {\n+        final JFileChooser fc = initializeFileChooser();\n+        int returnVal = fc.showDialog(null, Bundle.LBL_FILE_CHOOSER());\n+        switch (returnVal) {\n+            case JFileChooser.APPROVE_OPTION:\n+                FileFilter filter = fc.getFileFilter();\n+                DataExporter selectedExporter = EXPORTERS.stream()\n+                        .filter(exporter -> exporter.getFileFilter() == filter)\n+                        .findAny().orElseThrow(() -> new AssertionError(\"No matching file exporter filter found.\"));\n+                final File file = checkFileExtension(fc.getSelectedFile(), selectedExporter);\n+                if (checkFile(file)) {\n+                    final String[] columnNames = DataExportUtils.getColumnNames(table);\n+                    final Object[][] content = DataExportUtils.getTableContents(table);\n+                    BaseProgressUtils.showProgressDialogAndRun(\n+                            () -> selectedExporter.exportData(\n+                                    columnNames,\n+                                    content,\n+                                    file),\n+                            Bundle.MSG_EXPORT_DATA());\n+                }\n+                break;\n+        }\n+    }\n+\n+    private static boolean checkFile(File file) {\n+        if (file.exists()) {\n+            int a = JOptionPane.showConfirmDialog(\n+                    null,\n+                    Bundle.LBL_OVEWRITE_DIALOG(),\n+                    Bundle.MSG_OVEWRITE_DIALOG(),\n+                    JOptionPane.YES_NO_OPTION);\n+            return a == JOptionPane.YES_OPTION;\n+        }\n+        return true;\n+    }\n+\n+    private static File checkFileExtension(File file, DataExporter exporter) {\n+        if (!exporter.handlesFileFormat(file)) {\n+            return new File(file.getAbsolutePath() + \".\" + exporter.getDefaultFileExtension());\n+        }\n+        return file;\n+    }\n+    \n+    private static JFileChooser initializeFileChooser() {\n+        final JFileChooser fc = new JFileChooser();\n+        fc.setAcceptAllFileFilterUsed(false);\n+        EXPORTERS.forEach(exporter -> fc.addChoosableFileFilter(exporter.getFileFilter()));\n+        if (defaultDirectory == null) {\n+            defaultDirectory = fc.getCurrentDirectory();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b1287d9aa6b80331fd15fd411c471bfb394fe6"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb13ea9068d0205a795abcc942ac6484dcb4d3e", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/ebb13ea9068d0205a795abcc942ac6484dcb4d3e", "committedDate": "2020-10-03T13:30:54Z", "message": "[NETBEANS-4415] FileChooser opens in previously used directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae19c610ed5a9cb640992e88dfb7a1b18180f91", "author": {"user": {"login": "MasterEx", "name": "Periklis Ntanasis"}}, "url": "https://github.com/apache/netbeans/commit/fae19c610ed5a9cb640992e88dfb7a1b18180f91", "committedDate": "2020-10-04T22:44:43Z", "message": "[NETBEANS-4415] Use of DataViewTableUIModel instead of JTable\n\n * Better handling of Clob and Blob textual representations.\n * In XLSX truncate Clob values bigger than the max cell length."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 11, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}