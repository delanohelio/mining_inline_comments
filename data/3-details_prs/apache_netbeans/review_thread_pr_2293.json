{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDAxMTAy", "number": 2293, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo0NDoxMFrOEU184g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjowMlrOEiZcTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjkwOTE0OnYy", "diffSide": "RIGHT", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo0NDoxMFrOG7Q5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo0NDoxMFrOG7Q5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5NTkyMQ==", "bodyText": "Jackpot:\nwarning: Redundant type arguments in new expression (use diamond operator instead).", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r464795921", "createdAt": "2020-08-04T04:44:10Z", "author": {"login": "jlahoda-jackpot"}, "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -1172,37 +1207,63 @@ public Boolean visitBreak(BreakTree node, ConstructorData p) {\n \n             Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n-            resumeAfter(target, variable2State);\n+            breakTo(target);\n \n-            variable2State = new HashMap< Element, State>();\n+            return null;\n+        }\n+\n+        public Boolean visitYield(Tree node, ConstructorData p) {\n+            scan(TreeShims.getYieldValue(node), p);\n+\n+            Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n+            breakTo(target);\n+\n             return null;\n         }\n \n+        private void breakTo(Tree target) {\n+            resumeAfter(target, variable2State);\n+\n+            variable2State = new HashMap< Element, State>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbc768528dcd822d55592ee0da1567280fe522a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzMyMzA3OnYy", "diffSide": "RIGHT", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToyODozNFrOG76vFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToyODozNFrOG76vFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MTQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        variable2State = new HashMap< Element, State>();\n          \n          \n            \n                        variable2State = new HashMap<>();", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r465481495", "createdAt": "2020-08-05T05:28:34Z", "author": {"login": "jlahoda"}, "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -1172,37 +1207,63 @@ public Boolean visitBreak(BreakTree node, ConstructorData p) {\n \n             Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n-            resumeAfter(target, variable2State);\n+            breakTo(target);\n \n-            variable2State = new HashMap< Element, State>();\n+            return null;\n+        }\n+\n+        public Boolean visitYield(Tree node, ConstructorData p) {\n+            scan(TreeShims.getYieldValue(node), p);\n+\n+            Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n+            breakTo(target);\n+\n             return null;\n         }\n \n+        private void breakTo(Tree target) {\n+            resumeAfter(target, variable2State);\n+\n+            variable2State = new HashMap< Element, State>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbc768528dcd822d55592ee0da1567280fe522a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAzODg3OnYy", "diffSide": "RIGHT", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjowMlrOHQP1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjowMlrOHQP1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODY0Nw==", "bodyText": "Wouldn't it be beneficial to build the visitSwitchExpression and visitYield into baseclasses ?", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r486798647", "createdAt": "2020-09-11T06:22:02Z", "author": {"login": "sdedic"}, "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -444,11 +445,45 @@ protected boolean isCanceled() {\n             return cancel.isCanceled();\n         }\n \n+        private TreePath currentPath;\n+\n+        public TreePath getCurrentPath() {\n+            return currentPath;\n+        }\n+\n+        public Boolean scan(TreePath path, ConstructorData p) {\n+            TreePath oldPath = currentPath;\n+            try {\n+                currentPath = path;\n+                return super.scan(path.getLeaf(), p);\n+            } finally {\n+                currentPath = oldPath;\n+            }\n+        }\n+\n         @Override\n         public Boolean scan(Tree tree, ConstructorData p) {\n             resume(tree, resumeBefore);\n             \n-            Boolean result = super.scan(tree, p);\n+            Boolean result;\n+\n+            if (tree != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd000c6b6f60a0243dd304e11859923bbaea814"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 501, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}