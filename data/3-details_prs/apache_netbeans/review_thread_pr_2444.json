{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTE4MDU4", "number": 2444, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1Mjo1NFrOEtyWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1NTo0NlrOEtyYvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDQ2MjYyOnYy", "diffSide": "RIGHT", "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1Mjo1NFrOHhxwUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1Mjo1NFrOHhxwUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MDI0Mw==", "bodyText": "CompilationInfo.getTokenHierarchy() is, as far as I know, based on an immutable copy of the Document's content. No need to Document.render.", "url": "https://github.com/apache/netbeans/pull/2444#discussion_r505180243", "createdAt": "2020-10-15T05:52:54Z", "author": {"login": "jlahoda"}, "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "diffHunk": "@@ -72,88 +73,125 @@ private JavaCodeTemplateFilter(JTextComponent component, int offset) {\n             final Source source = Source.create(component.getDocument());\n             if (source != null) {\n                 final AtomicBoolean cancel = new AtomicBoolean();\n-                ProgressUtils.runOffEventDispatchThread(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            ParserManager.parse(Collections.singleton(source), new UserTask() {\n-                                @Override\n-                                public void run(ResultIterator resultIterator) throws Exception {\n-                                    if (cancel.get()) {\n-                                        return;\n+                BaseProgressUtils.runOffEventDispatchThread(() -> {\n+                    try {\n+                        ParserManager.parse(Collections.singleton(source), new UserTask() {\n+                            @Override\n+                            public void run(ResultIterator resultIterator) throws Exception {\n+                                if (cancel.get()) {\n+                                    return;\n+                                }\n+                                Parser.Result result = resultIterator.getParserResult(startOffset);\n+                                CompilationController controller = result != null ? CompilationController.get(result) : null;\n+                                if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n+                                    TreeUtilities tu = controller.getTreeUtilities();\n+                                    int eo = endOffset;\n+                                    int so = startOffset;\n+                                    if (so >= 0) {\n+                                        so = result.getSnapshot().getEmbeddedOffset(startOffset);\n                                     }\n-                                    Parser.Result result = resultIterator.getParserResult(startOffset);\n-                                    CompilationController controller = result != null ? CompilationController.get(result) : null;\n-                                    if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n-                                        TreeUtilities tu = controller.getTreeUtilities();\n-                                        int eo = endOffset;\n-                                        int so = startOffset;\n-                                        if (so >= 0) {\n-                                            so = result.getSnapshot().getEmbeddedOffset(startOffset);\n-                                        }\n-                                        if (endOffset >= 0) {\n-                                            eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n-                                            TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n-                                            int delta = ts.move(so);\n+                                    if (endOffset >= 0) {\n+                                        eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n+                                        TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n+                                        int delta = ts.move(so);\n+                                        if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n+                                            delta = ts.move(eo);\n                                             if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                delta = ts.move(eo);\n-                                                if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                    String selectedText = controller.getText().substring(so, eo).trim();\n-                                                    SourcePositions[] sp = new SourcePositions[1];\n-                                                    ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n-                                                    if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n-                                                        stringCtx = EXPRESSION;\n-                                                    }\n+                                                String selectedText = controller.getText().substring(so, eo).trim();\n+                                                SourcePositions[] sp = new SourcePositions[1];\n+                                                ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n+                                                if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n+                                                    stringCtx = EXPRESSION;\n                                                 }\n                                             }\n                                         }\n-                                        Tree tree = tu.pathFor(so).getLeaf();\n-                                        if (eo >= 0 && so != eo) {\n-                                            if (tu.pathFor(eo).getLeaf() != tree) {\n-                                                return;\n-                                            }\n+                                    }\n+                                    Tree tree = tu.pathFor(so).getLeaf();\n+                                    if (eo >= 0 && so != eo) {\n+                                        if (tu.pathFor(eo).getLeaf() != tree) {\n+                                            return;\n                                         }\n-                                        treeKindCtx = tree.getKind();\n-                                        switch (treeKindCtx) {\n-                                            case CASE:\n-                                                if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n-                                                    treeKindCtx = null;\n-                                                }\n-                                                break;\n-                                            case CLASS:\n-                                                SourcePositions sp = controller.getTrees().getSourcePositions();\n-                                                int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n-                                                if (startPos <= 0) {\n-                                                    startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                }\n-                                                String headerText = controller.getText().substring(startPos, so);\n-                                                int idx = headerText.indexOf('{'); //NOI18N\n-                                                if (idx < 0) {\n-                                                    treeKindCtx = null;\n-                                                    stringCtx = CLASS_HEADER;\n-                                                }\n-                                                break;\n-                                            case FOR_LOOP:\n-                                            case ENHANCED_FOR_LOOP:\n-                                            case WHILE_LOOP:\n-                                                sp = controller.getTrees().getSourcePositions();\n+                                    }\n+                                    treeKindCtx = tree.getKind();\n+                                    switch (treeKindCtx) {\n+                                        case CASE:\n+                                            if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n+                                                treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case CLASS:\n+                                            SourcePositions sp = controller.getTrees().getSourcePositions();\n+                                            int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n+                                            if (startPos <= 0) {\n                                                 startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                String text = controller.getText().substring(startPos, so);\n-                                                if (!text.trim().endsWith(\")\")) {\n-                                                    treeKindCtx = null;\n+                                            }\n+                                            String headerText = controller.getText().substring(startPos, so);\n+                                            int idx = headerText.indexOf('{'); //NOI18N\n+                                            if (idx < 0) {\n+                                                treeKindCtx = null;\n+                                                stringCtx = CLASS_HEADER;\n+                                            }\n+                                            break;\n+                                        case FOR_LOOP:\n+                                        case ENHANCED_FOR_LOOP:\n+                                            if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                 treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case PARENTHESIZED:\n+                                            if (isPartOfWhileLoop(component, controller)) {\n+                                                if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                        treeKindCtx = null;\n                                                 }\n-                                        }\n+                                            }\n+                                            break;\n                                     }\n                                 }\n-                            });\n-                        } catch (ParseException ex) {\n-                            Exceptions.printStackTrace(ex);\n-                        }\n+                            }\n+                        });\n+                    } catch (ParseException ex) {\n+                        Exceptions.printStackTrace(ex);\n                     }\n                 }, NbBundle.getMessage(JavaCodeTemplateProcessor.class, \"JCT-init\"), cancel, false); //NOI18N\n             }\n         }\n     }\n+    \n+    private boolean isPartOfWhileLoop(JTextComponent component, CompilationController controller) {\n+        TreeUtilities treeUtilities = controller.getTreeUtilities();\n+        TreePath currentPath = treeUtilities.pathFor(component.getCaretPosition());\n+        TreePath parentPath = treeUtilities.getPathElementOfKind(Tree.Kind.WHILE_LOOP, currentPath);\n+        return parentPath != null;\n+    }\n+    \n+    private boolean isRightParenthesisOfLoopPresent(JTextComponent component, CompilationController controller) {\n+        AtomicBoolean result = new AtomicBoolean(true);\n+        Document document = component.getDocument();\n+        document.render(() -> {\n+            TokenHierarchy<?> tokenHierarchy = controller.getTokenHierarchy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae2bf61ad379ce28276b84e545f32dbae048f78"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDQ2OTExOnYy", "diffSide": "RIGHT", "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1NTo0NlrOHhx0Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTo1MDoxNFrOHi4NtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTI1NA==", "bodyText": "This code runs outside of the AWT event dispatch thread, so calling getCaretPosition() seems somewhat dangerous. There are various offsets available inside the task, is there some that could be used. For example \"so\" looks like a potential candidate?", "url": "https://github.com/apache/netbeans/pull/2444#discussion_r505181254", "createdAt": "2020-10-15T05:55:46Z", "author": {"login": "jlahoda"}, "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "diffHunk": "@@ -72,88 +73,125 @@ private JavaCodeTemplateFilter(JTextComponent component, int offset) {\n             final Source source = Source.create(component.getDocument());\n             if (source != null) {\n                 final AtomicBoolean cancel = new AtomicBoolean();\n-                ProgressUtils.runOffEventDispatchThread(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            ParserManager.parse(Collections.singleton(source), new UserTask() {\n-                                @Override\n-                                public void run(ResultIterator resultIterator) throws Exception {\n-                                    if (cancel.get()) {\n-                                        return;\n+                BaseProgressUtils.runOffEventDispatchThread(() -> {\n+                    try {\n+                        ParserManager.parse(Collections.singleton(source), new UserTask() {\n+                            @Override\n+                            public void run(ResultIterator resultIterator) throws Exception {\n+                                if (cancel.get()) {\n+                                    return;\n+                                }\n+                                Parser.Result result = resultIterator.getParserResult(startOffset);\n+                                CompilationController controller = result != null ? CompilationController.get(result) : null;\n+                                if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n+                                    TreeUtilities tu = controller.getTreeUtilities();\n+                                    int eo = endOffset;\n+                                    int so = startOffset;\n+                                    if (so >= 0) {\n+                                        so = result.getSnapshot().getEmbeddedOffset(startOffset);\n                                     }\n-                                    Parser.Result result = resultIterator.getParserResult(startOffset);\n-                                    CompilationController controller = result != null ? CompilationController.get(result) : null;\n-                                    if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n-                                        TreeUtilities tu = controller.getTreeUtilities();\n-                                        int eo = endOffset;\n-                                        int so = startOffset;\n-                                        if (so >= 0) {\n-                                            so = result.getSnapshot().getEmbeddedOffset(startOffset);\n-                                        }\n-                                        if (endOffset >= 0) {\n-                                            eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n-                                            TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n-                                            int delta = ts.move(so);\n+                                    if (endOffset >= 0) {\n+                                        eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n+                                        TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n+                                        int delta = ts.move(so);\n+                                        if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n+                                            delta = ts.move(eo);\n                                             if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                delta = ts.move(eo);\n-                                                if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                    String selectedText = controller.getText().substring(so, eo).trim();\n-                                                    SourcePositions[] sp = new SourcePositions[1];\n-                                                    ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n-                                                    if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n-                                                        stringCtx = EXPRESSION;\n-                                                    }\n+                                                String selectedText = controller.getText().substring(so, eo).trim();\n+                                                SourcePositions[] sp = new SourcePositions[1];\n+                                                ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n+                                                if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n+                                                    stringCtx = EXPRESSION;\n                                                 }\n                                             }\n                                         }\n-                                        Tree tree = tu.pathFor(so).getLeaf();\n-                                        if (eo >= 0 && so != eo) {\n-                                            if (tu.pathFor(eo).getLeaf() != tree) {\n-                                                return;\n-                                            }\n+                                    }\n+                                    Tree tree = tu.pathFor(so).getLeaf();\n+                                    if (eo >= 0 && so != eo) {\n+                                        if (tu.pathFor(eo).getLeaf() != tree) {\n+                                            return;\n                                         }\n-                                        treeKindCtx = tree.getKind();\n-                                        switch (treeKindCtx) {\n-                                            case CASE:\n-                                                if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n-                                                    treeKindCtx = null;\n-                                                }\n-                                                break;\n-                                            case CLASS:\n-                                                SourcePositions sp = controller.getTrees().getSourcePositions();\n-                                                int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n-                                                if (startPos <= 0) {\n-                                                    startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                }\n-                                                String headerText = controller.getText().substring(startPos, so);\n-                                                int idx = headerText.indexOf('{'); //NOI18N\n-                                                if (idx < 0) {\n-                                                    treeKindCtx = null;\n-                                                    stringCtx = CLASS_HEADER;\n-                                                }\n-                                                break;\n-                                            case FOR_LOOP:\n-                                            case ENHANCED_FOR_LOOP:\n-                                            case WHILE_LOOP:\n-                                                sp = controller.getTrees().getSourcePositions();\n+                                    }\n+                                    treeKindCtx = tree.getKind();\n+                                    switch (treeKindCtx) {\n+                                        case CASE:\n+                                            if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n+                                                treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case CLASS:\n+                                            SourcePositions sp = controller.getTrees().getSourcePositions();\n+                                            int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n+                                            if (startPos <= 0) {\n                                                 startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                String text = controller.getText().substring(startPos, so);\n-                                                if (!text.trim().endsWith(\")\")) {\n-                                                    treeKindCtx = null;\n+                                            }\n+                                            String headerText = controller.getText().substring(startPos, so);\n+                                            int idx = headerText.indexOf('{'); //NOI18N\n+                                            if (idx < 0) {\n+                                                treeKindCtx = null;\n+                                                stringCtx = CLASS_HEADER;\n+                                            }\n+                                            break;\n+                                        case FOR_LOOP:\n+                                        case ENHANCED_FOR_LOOP:\n+                                            if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                 treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case PARENTHESIZED:\n+                                            if (isPartOfWhileLoop(component, controller)) {\n+                                                if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                        treeKindCtx = null;\n                                                 }\n-                                        }\n+                                            }\n+                                            break;\n                                     }\n                                 }\n-                            });\n-                        } catch (ParseException ex) {\n-                            Exceptions.printStackTrace(ex);\n-                        }\n+                            }\n+                        });\n+                    } catch (ParseException ex) {\n+                        Exceptions.printStackTrace(ex);\n                     }\n                 }, NbBundle.getMessage(JavaCodeTemplateProcessor.class, \"JCT-init\"), cancel, false); //NOI18N\n             }\n         }\n     }\n+    \n+    private boolean isPartOfWhileLoop(JTextComponent component, CompilationController controller) {\n+        TreeUtilities treeUtilities = controller.getTreeUtilities();\n+        TreePath currentPath = treeUtilities.pathFor(component.getCaretPosition());\n+        TreePath parentPath = treeUtilities.getPathElementOfKind(Tree.Kind.WHILE_LOOP, currentPath);\n+        return parentPath != null;\n+    }\n+    \n+    private boolean isRightParenthesisOfLoopPresent(JTextComponent component, CompilationController controller) {\n+        AtomicBoolean result = new AtomicBoolean(true);\n+        Document document = component.getDocument();\n+        document.render(() -> {\n+            TokenHierarchy<?> tokenHierarchy = controller.getTokenHierarchy();\n+            TokenSequence<?> tokenSequence = tokenHierarchy.tokenSequence();\n+            tokenSequence.move(component.getCaretPosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae2bf61ad379ce28276b84e545f32dbae048f78"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwOTQ4Mw==", "bodyText": "As far as I can tell from the line String text = controller.getText().substring(startPos, so); the wrong value of the end index of the substring is used, namely the start offset of the abbreviation, although (the end offset of the abbreviation + the number of spaces before the closing bracket, if any + 1) should be used to check for the presence of the right parenthesis (the problem is that the end offset of the abbreviation is not calculated before, at least in the  JavaCodeTemplateFilter class). Because of this, the treeKindCtx variable is always set to null and the code template for the for loop is rejected.\nIn addition, the code for the WHILE_LOOP case is never executed, because when the caret position is in parentheses that are part of a while loop, the leaf node for the tree path on which the caret is located is ParenthesizedTree, not WhileLoopTree. Because of this, the template for a while loop works even when there is no right parenthesis.", "url": "https://github.com/apache/netbeans/pull/2444#discussion_r506209483", "createdAt": "2020-10-16T09:18:08Z", "author": {"login": "arsadykov"}, "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "diffHunk": "@@ -72,88 +73,125 @@ private JavaCodeTemplateFilter(JTextComponent component, int offset) {\n             final Source source = Source.create(component.getDocument());\n             if (source != null) {\n                 final AtomicBoolean cancel = new AtomicBoolean();\n-                ProgressUtils.runOffEventDispatchThread(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            ParserManager.parse(Collections.singleton(source), new UserTask() {\n-                                @Override\n-                                public void run(ResultIterator resultIterator) throws Exception {\n-                                    if (cancel.get()) {\n-                                        return;\n+                BaseProgressUtils.runOffEventDispatchThread(() -> {\n+                    try {\n+                        ParserManager.parse(Collections.singleton(source), new UserTask() {\n+                            @Override\n+                            public void run(ResultIterator resultIterator) throws Exception {\n+                                if (cancel.get()) {\n+                                    return;\n+                                }\n+                                Parser.Result result = resultIterator.getParserResult(startOffset);\n+                                CompilationController controller = result != null ? CompilationController.get(result) : null;\n+                                if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n+                                    TreeUtilities tu = controller.getTreeUtilities();\n+                                    int eo = endOffset;\n+                                    int so = startOffset;\n+                                    if (so >= 0) {\n+                                        so = result.getSnapshot().getEmbeddedOffset(startOffset);\n                                     }\n-                                    Parser.Result result = resultIterator.getParserResult(startOffset);\n-                                    CompilationController controller = result != null ? CompilationController.get(result) : null;\n-                                    if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n-                                        TreeUtilities tu = controller.getTreeUtilities();\n-                                        int eo = endOffset;\n-                                        int so = startOffset;\n-                                        if (so >= 0) {\n-                                            so = result.getSnapshot().getEmbeddedOffset(startOffset);\n-                                        }\n-                                        if (endOffset >= 0) {\n-                                            eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n-                                            TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n-                                            int delta = ts.move(so);\n+                                    if (endOffset >= 0) {\n+                                        eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n+                                        TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n+                                        int delta = ts.move(so);\n+                                        if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n+                                            delta = ts.move(eo);\n                                             if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                delta = ts.move(eo);\n-                                                if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                    String selectedText = controller.getText().substring(so, eo).trim();\n-                                                    SourcePositions[] sp = new SourcePositions[1];\n-                                                    ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n-                                                    if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n-                                                        stringCtx = EXPRESSION;\n-                                                    }\n+                                                String selectedText = controller.getText().substring(so, eo).trim();\n+                                                SourcePositions[] sp = new SourcePositions[1];\n+                                                ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n+                                                if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n+                                                    stringCtx = EXPRESSION;\n                                                 }\n                                             }\n                                         }\n-                                        Tree tree = tu.pathFor(so).getLeaf();\n-                                        if (eo >= 0 && so != eo) {\n-                                            if (tu.pathFor(eo).getLeaf() != tree) {\n-                                                return;\n-                                            }\n+                                    }\n+                                    Tree tree = tu.pathFor(so).getLeaf();\n+                                    if (eo >= 0 && so != eo) {\n+                                        if (tu.pathFor(eo).getLeaf() != tree) {\n+                                            return;\n                                         }\n-                                        treeKindCtx = tree.getKind();\n-                                        switch (treeKindCtx) {\n-                                            case CASE:\n-                                                if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n-                                                    treeKindCtx = null;\n-                                                }\n-                                                break;\n-                                            case CLASS:\n-                                                SourcePositions sp = controller.getTrees().getSourcePositions();\n-                                                int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n-                                                if (startPos <= 0) {\n-                                                    startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                }\n-                                                String headerText = controller.getText().substring(startPos, so);\n-                                                int idx = headerText.indexOf('{'); //NOI18N\n-                                                if (idx < 0) {\n-                                                    treeKindCtx = null;\n-                                                    stringCtx = CLASS_HEADER;\n-                                                }\n-                                                break;\n-                                            case FOR_LOOP:\n-                                            case ENHANCED_FOR_LOOP:\n-                                            case WHILE_LOOP:\n-                                                sp = controller.getTrees().getSourcePositions();\n+                                    }\n+                                    treeKindCtx = tree.getKind();\n+                                    switch (treeKindCtx) {\n+                                        case CASE:\n+                                            if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n+                                                treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case CLASS:\n+                                            SourcePositions sp = controller.getTrees().getSourcePositions();\n+                                            int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n+                                            if (startPos <= 0) {\n                                                 startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                String text = controller.getText().substring(startPos, so);\n-                                                if (!text.trim().endsWith(\")\")) {\n-                                                    treeKindCtx = null;\n+                                            }\n+                                            String headerText = controller.getText().substring(startPos, so);\n+                                            int idx = headerText.indexOf('{'); //NOI18N\n+                                            if (idx < 0) {\n+                                                treeKindCtx = null;\n+                                                stringCtx = CLASS_HEADER;\n+                                            }\n+                                            break;\n+                                        case FOR_LOOP:\n+                                        case ENHANCED_FOR_LOOP:\n+                                            if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                 treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case PARENTHESIZED:\n+                                            if (isPartOfWhileLoop(component, controller)) {\n+                                                if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                        treeKindCtx = null;\n                                                 }\n-                                        }\n+                                            }\n+                                            break;\n                                     }\n                                 }\n-                            });\n-                        } catch (ParseException ex) {\n-                            Exceptions.printStackTrace(ex);\n-                        }\n+                            }\n+                        });\n+                    } catch (ParseException ex) {\n+                        Exceptions.printStackTrace(ex);\n                     }\n                 }, NbBundle.getMessage(JavaCodeTemplateProcessor.class, \"JCT-init\"), cancel, false); //NOI18N\n             }\n         }\n     }\n+    \n+    private boolean isPartOfWhileLoop(JTextComponent component, CompilationController controller) {\n+        TreeUtilities treeUtilities = controller.getTreeUtilities();\n+        TreePath currentPath = treeUtilities.pathFor(component.getCaretPosition());\n+        TreePath parentPath = treeUtilities.getPathElementOfKind(Tree.Kind.WHILE_LOOP, currentPath);\n+        return parentPath != null;\n+    }\n+    \n+    private boolean isRightParenthesisOfLoopPresent(JTextComponent component, CompilationController controller) {\n+        AtomicBoolean result = new AtomicBoolean(true);\n+        Document document = component.getDocument();\n+        document.render(() -> {\n+            TokenHierarchy<?> tokenHierarchy = controller.getTokenHierarchy();\n+            TokenSequence<?> tokenSequence = tokenHierarchy.tokenSequence();\n+            tokenSequence.move(component.getCaretPosition());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTI1NA=="}, "originalCommit": {"oid": "3ae2bf61ad379ce28276b84e545f32dbae048f78"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNDY0NA==", "bodyText": "@jlahoda Done as suggested. Please review.", "url": "https://github.com/apache/netbeans/pull/2444#discussion_r506334644", "createdAt": "2020-10-16T11:50:14Z", "author": {"login": "arsadykov"}, "path": "java/java.editor/src/org/netbeans/modules/editor/java/JavaCodeTemplateFilter.java", "diffHunk": "@@ -72,88 +73,125 @@ private JavaCodeTemplateFilter(JTextComponent component, int offset) {\n             final Source source = Source.create(component.getDocument());\n             if (source != null) {\n                 final AtomicBoolean cancel = new AtomicBoolean();\n-                ProgressUtils.runOffEventDispatchThread(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            ParserManager.parse(Collections.singleton(source), new UserTask() {\n-                                @Override\n-                                public void run(ResultIterator resultIterator) throws Exception {\n-                                    if (cancel.get()) {\n-                                        return;\n+                BaseProgressUtils.runOffEventDispatchThread(() -> {\n+                    try {\n+                        ParserManager.parse(Collections.singleton(source), new UserTask() {\n+                            @Override\n+                            public void run(ResultIterator resultIterator) throws Exception {\n+                                if (cancel.get()) {\n+                                    return;\n+                                }\n+                                Parser.Result result = resultIterator.getParserResult(startOffset);\n+                                CompilationController controller = result != null ? CompilationController.get(result) : null;\n+                                if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n+                                    TreeUtilities tu = controller.getTreeUtilities();\n+                                    int eo = endOffset;\n+                                    int so = startOffset;\n+                                    if (so >= 0) {\n+                                        so = result.getSnapshot().getEmbeddedOffset(startOffset);\n                                     }\n-                                    Parser.Result result = resultIterator.getParserResult(startOffset);\n-                                    CompilationController controller = result != null ? CompilationController.get(result) : null;\n-                                    if (controller != null && Phase.PARSED.compareTo(controller.toPhase(Phase.PARSED)) <= 0) {\n-                                        TreeUtilities tu = controller.getTreeUtilities();\n-                                        int eo = endOffset;\n-                                        int so = startOffset;\n-                                        if (so >= 0) {\n-                                            so = result.getSnapshot().getEmbeddedOffset(startOffset);\n-                                        }\n-                                        if (endOffset >= 0) {\n-                                            eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n-                                            TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n-                                            int delta = ts.move(so);\n+                                    if (endOffset >= 0) {\n+                                        eo = result.getSnapshot().getEmbeddedOffset(endOffset);\n+                                        TokenSequence<JavaTokenId> ts = SourceUtils.getJavaTokenSequence(controller.getTokenHierarchy(), so);\n+                                        int delta = ts.move(so);\n+                                        if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n+                                            delta = ts.move(eo);\n                                             if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                delta = ts.move(eo);\n-                                                if (delta == 0 || ts.moveNext() && ts.token().id() == JavaTokenId.WHITESPACE) {\n-                                                    String selectedText = controller.getText().substring(so, eo).trim();\n-                                                    SourcePositions[] sp = new SourcePositions[1];\n-                                                    ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n-                                                    if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n-                                                        stringCtx = EXPRESSION;\n-                                                    }\n+                                                String selectedText = controller.getText().substring(so, eo).trim();\n+                                                SourcePositions[] sp = new SourcePositions[1];\n+                                                ExpressionTree expr = selectedText.length() > 0 ? tu.parseExpression(selectedText, sp) : null;\n+                                                if (expr != null && expr.getKind() != Tree.Kind.IDENTIFIER && !Utilities.containErrors(expr) && sp[0].getEndPosition(null, expr) >= selectedText.length()) {\n+                                                    stringCtx = EXPRESSION;\n                                                 }\n                                             }\n                                         }\n-                                        Tree tree = tu.pathFor(so).getLeaf();\n-                                        if (eo >= 0 && so != eo) {\n-                                            if (tu.pathFor(eo).getLeaf() != tree) {\n-                                                return;\n-                                            }\n+                                    }\n+                                    Tree tree = tu.pathFor(so).getLeaf();\n+                                    if (eo >= 0 && so != eo) {\n+                                        if (tu.pathFor(eo).getLeaf() != tree) {\n+                                            return;\n                                         }\n-                                        treeKindCtx = tree.getKind();\n-                                        switch (treeKindCtx) {\n-                                            case CASE:\n-                                                if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n-                                                    treeKindCtx = null;\n-                                                }\n-                                                break;\n-                                            case CLASS:\n-                                                SourcePositions sp = controller.getTrees().getSourcePositions();\n-                                                int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n-                                                if (startPos <= 0) {\n-                                                    startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                }\n-                                                String headerText = controller.getText().substring(startPos, so);\n-                                                int idx = headerText.indexOf('{'); //NOI18N\n-                                                if (idx < 0) {\n-                                                    treeKindCtx = null;\n-                                                    stringCtx = CLASS_HEADER;\n-                                                }\n-                                                break;\n-                                            case FOR_LOOP:\n-                                            case ENHANCED_FOR_LOOP:\n-                                            case WHILE_LOOP:\n-                                                sp = controller.getTrees().getSourcePositions();\n+                                    }\n+                                    treeKindCtx = tree.getKind();\n+                                    switch (treeKindCtx) {\n+                                        case CASE:\n+                                            if (so < controller.getTrees().getSourcePositions().getEndPosition(controller.getCompilationUnit(), ((CaseTree)tree).getExpression())) {\n+                                                treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case CLASS:\n+                                            SourcePositions sp = controller.getTrees().getSourcePositions();\n+                                            int startPos = (int)sp.getEndPosition(controller.getCompilationUnit(), ((ClassTree)tree).getModifiers());\n+                                            if (startPos <= 0) {\n                                                 startPos = (int)sp.getStartPosition(controller.getCompilationUnit(), tree);\n-                                                String text = controller.getText().substring(startPos, so);\n-                                                if (!text.trim().endsWith(\")\")) {\n-                                                    treeKindCtx = null;\n+                                            }\n+                                            String headerText = controller.getText().substring(startPos, so);\n+                                            int idx = headerText.indexOf('{'); //NOI18N\n+                                            if (idx < 0) {\n+                                                treeKindCtx = null;\n+                                                stringCtx = CLASS_HEADER;\n+                                            }\n+                                            break;\n+                                        case FOR_LOOP:\n+                                        case ENHANCED_FOR_LOOP:\n+                                            if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                 treeKindCtx = null;\n+                                            }\n+                                            break;\n+                                        case PARENTHESIZED:\n+                                            if (isPartOfWhileLoop(component, controller)) {\n+                                                if (!isRightParenthesisOfLoopPresent(component, controller)) {\n+                                                        treeKindCtx = null;\n                                                 }\n-                                        }\n+                                            }\n+                                            break;\n                                     }\n                                 }\n-                            });\n-                        } catch (ParseException ex) {\n-                            Exceptions.printStackTrace(ex);\n-                        }\n+                            }\n+                        });\n+                    } catch (ParseException ex) {\n+                        Exceptions.printStackTrace(ex);\n                     }\n                 }, NbBundle.getMessage(JavaCodeTemplateProcessor.class, \"JCT-init\"), cancel, false); //NOI18N\n             }\n         }\n     }\n+    \n+    private boolean isPartOfWhileLoop(JTextComponent component, CompilationController controller) {\n+        TreeUtilities treeUtilities = controller.getTreeUtilities();\n+        TreePath currentPath = treeUtilities.pathFor(component.getCaretPosition());\n+        TreePath parentPath = treeUtilities.getPathElementOfKind(Tree.Kind.WHILE_LOOP, currentPath);\n+        return parentPath != null;\n+    }\n+    \n+    private boolean isRightParenthesisOfLoopPresent(JTextComponent component, CompilationController controller) {\n+        AtomicBoolean result = new AtomicBoolean(true);\n+        Document document = component.getDocument();\n+        document.render(() -> {\n+            TokenHierarchy<?> tokenHierarchy = controller.getTokenHierarchy();\n+            TokenSequence<?> tokenSequence = tokenHierarchy.tokenSequence();\n+            tokenSequence.move(component.getCaretPosition());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTI1NA=="}, "originalCommit": {"oid": "3ae2bf61ad379ce28276b84e545f32dbae048f78"}, "originalPosition": 210}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 313, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}