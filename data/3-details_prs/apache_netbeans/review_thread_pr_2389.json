{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzA2NTgx", "number": 2389, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNToyNToyN1rOEn2NyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMzoxOFrOEr8aiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjE4MTg1OnYy", "diffSide": "RIGHT", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/text/TextDocumentServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNToyNToyN1rOHYoCuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNToyNToyN1rOHYoCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MzkyOA==", "bodyText": "I'm not familiar with the refactoring API, but my reading of the Javadoc is, that:\n\npreCheck\nprepare\ncheckParameters\nfastCheckParameters\n\ndo not raise exceptions, but return \"Problem\" instances. The way they are invoked here, the return value is ignored. Not sure whether this is intenential, but it looks wrong.\nMy reading of\nhttp://bits.netbeans.org/dev/javadoc/org-netbeans-modules-refactoring-api/org/netbeans/modules/refactoring/api/AbstractRefactoring.html#fastCheckParameters--\nis, that the call to checkParameters should do a superset of checks to fastCheckParameters. So if checkParameters is invoked, I would expect the call to fastCheckParameters to be superfluous.", "url": "https://github.com/apache/netbeans/pull/2389#discussion_r495583928", "createdAt": "2020-09-27T15:25:27Z", "author": {"login": "matthiasblaesing"}, "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/text/TextDocumentServiceImpl.java", "diffHunk": "@@ -591,16 +588,69 @@ public static String html2MD(String html) {\n                                                   createPosition(thisFileLineMap[0], end))));\n             }\n         }\n-        return CompletableFuture.completedFuture(result);\n+        return CompletableFuture.completedFuture(Either.forLeft(result));\n     }\n \n     @Override\n-    public CompletableFuture<List<? extends Location>> references(ReferenceParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends Location>> references(ReferenceParams params) {\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        Runnable[] cancelCallback = new Runnable[1];\n+        CompletableFuture<List<? extends Location>> result = new CompletableFuture<List<? extends Location>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                if (cancelCallback[0] != null) {\n+                    cancelCallback[0].run();\n+                }\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            JavaSource js = getSource(params.getTextDocument().getUri());\n+            try {\n+                WhereUsedQuery[] query = new WhereUsedQuery[1];\n+                js.runUserActionTask(cc -> {\n+                    cc.toPhase(JavaSource.Phase.RESOLVED);\n+                    if (cancel.get()) return ;\n+                    Document doc = cc.getSnapshot().getSource().getDocument(true);\n+                    TreePath path = cc.getTreeUtilities().pathFor(getOffset(doc, params.getPosition()));\n+                    query[0] = new WhereUsedQuery(Lookups.singleton(TreePathHandle.create(path, cc)));\n+                }, true);\n+                if (cancel.get()) return ;\n+                cancelCallback[0] = () -> query[0].cancelRequest();\n+                RefactoringSession refactoring = RefactoringSession.create(\"FindUsages\");\n+                query[0].fastCheckParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4737f2cd12789181fd2703abfdfc22e34cbcaead"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTE0MDU2OnYy", "diffSide": "RIGHT", "path": "ide/lsp.client/nbproject/project.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMzoxOFrOHe_SeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMzoxOFrOHe_SeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjI0OA==", "bodyText": "There are similar changes on my java LSP debugging branch. Feel free to integrate soon. I will resolve the merge conflicts next week then.", "url": "https://github.com/apache/netbeans/pull/2389#discussion_r502256248", "createdAt": "2020-10-09T08:03:18Z", "author": {"login": "JaroslavTulach"}, "path": "ide/lsp.client/nbproject/project.properties", "diffHunk": "@@ -18,10 +18,10 @@\n javac.source=1.8\n javac.compilerargs=-Xlint -Xlint:-serial\n javadoc.arch=${basedir}/arch.xml\n-release.external/org.eclipse.lsp4j-0.8.1-p1.jar=modules/ext/org.eclipse.lsp4j-0.8.1-p1.jar\n-release.external/org.eclipse.lsp4j.generator-0.8.1.jar=modules/ext/org.eclipse.lsp4j.generator-0.8.1.jar\n-release.external/org.eclipse.lsp4j.jsonrpc-0.8.1.jar=modules/ext/org.eclipse.lsp4j.jsonrpc-0.8.1.jar\n-release.external/org.eclipse.xtend.lib-2.18.0.jar=modules/ext/org.eclipse.xtend.lib-2.18.0.jar\n-release.external/org.eclipse.xtend.lib.macro-2.18.0.jar=modules/ext/org.eclipse.xtend.lib.macro-2.18.0.jar\n-release.external/org.eclipse.xtext.xbase.lib-2.18.0.jar=modules/ext/org.eclipse.xtext.xbase.lib-2.18.0.jar\n+release.external/org.eclipse.lsp4j-0.9.0.jar=modules/ext/org.eclipse.lsp4j-0.9.0.jar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "737d80b27e5596c57c00710884ea1340eee2c15f"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 431, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}