{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDg4MDkz", "number": 2493, "title": "Infrastructure to display simple confirmations/questions in LSP client.", "bodyText": "I've implemented a AbstractDialogDisplayer that, if registered will remote notify() and notifyLater through UIContext into the remote LSP client. I've tested locally on Gradle projects; but it has still some limitations, like Project Problems tend to display a customizer ... so I've commented out the final registration of the service.\nI'd like to pull in the infrastructure for collaboration.", "createdAt": "2020-10-26T14:54:12Z", "url": "https://github.com/apache/netbeans/pull/2493", "merged": true, "mergeCommit": {"oid": "cee80c2704dac3e35f71e5cefea67916a7ff7dc2"}, "closed": true, "closedAt": "2020-10-26T22:45:52Z", "author": {"login": "sdedic"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWVKCEAH2gAyNTEwMDg4MDkzOjBiYzdkODI0MGQzYmU3OGIyY2FmYmRiMzg3MDg5OGZhNzM1ZDkwOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWcWlpgFqTUxNzIyOTY1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0bc7d8240d3be78b2cafbdb3870898fa735d9098", "author": {"user": {"login": "sdedic", "name": "Svatopluk Dedic"}}, "url": "https://github.com/apache/netbeans/commit/0bc7d8240d3be78b2cafbdb3870898fa735d9098", "committedDate": "2020-10-26T14:22:32Z", "message": "Added A11Y properties to the panel."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5", "author": {"user": {"login": "sdedic", "name": "Svatopluk Dedic"}}, "url": "https://github.com/apache/netbeans/commit/1c030b19696eedbba77e2bd1bb15182e30e167d5", "committedDate": "2020-10-26T14:47:17Z", "message": "Infrastructure to display simple confirmations/questions in LSP client."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODY1OTE2", "url": "https://github.com/apache/netbeans/pull/2493#pullrequestreview-516865916", "createdAt": "2020-10-26T14:58:22Z", "commit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1ODoyMlrOHoTnxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1ODoyMlrOHoTnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyNjU2NQ==", "bodyText": "Note this change: some events are fired synchronously from Open Project. If the code asks for something like DialogDisplayer.notify (which some code really does), the initialization request processing would block - and the notify() round-trip would be never completed, freezing LSP client-server communication completely.", "url": "https://github.com/apache/netbeans/pull/2493#discussion_r512026565", "createdAt": "2020-10-26T14:58:22Z", "author": {"login": "sdedic"}, "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java", "diffHunk": "@@ -216,7 +242,42 @@ Lookup getSessionLookup() {\n             capabilities.setDocumentHighlightProvider(true);\n             capabilities.setReferencesProvider(true);\n             capabilities.setExecuteCommandProvider(new ExecuteCommandOptions(Arrays.asList(JAVA_BUILD_WORKSPACE, GRAALVM_PAUSE_SCRIPT)));\n-            return CompletableFuture.completedFuture(new InitializeResult(capabilities));\n+            return new InitializeResult(capabilities);\n+        }\n+        \n+        @Override\n+        public CompletableFuture<InitializeResult> initialize(InitializeParams init) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODk4NTQ1", "url": "https://github.com/apache/netbeans/pull/2493#pullrequestreview-516898545", "createdAt": "2020-10-26T15:29:40Z", "commit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyOTo0MFrOHoVJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTo0N1rOHoVuiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MTQ5MQ==", "bodyText": "Reasonable, given we after feature freeze. This functionality will certainly be needed in the future. For 12.2 we'd rather delay using it, unless necessary.", "url": "https://github.com/apache/netbeans/pull/2493#discussion_r512051491", "createdAt": "2020-10-26T15:29:40Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/LspDialogDisplayer.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.nbcode.integration;\n+\n+import org.netbeans.modules.java.lsp.server.ui.AbstractDialogDisplayer;\n+import org.openide.DialogDisplayer;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ *\n+ * @author sdedic\n+ */\n+//@ServiceProvider(service = DialogDisplayer.class, position = 1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NTg2Ng==", "bodyText": "Throughput 10!? Isn't opening of project sequential anyway?", "url": "https://github.com/apache/netbeans/pull/2493#discussion_r512055866", "createdAt": "2020-10-26T15:35:12Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java", "diffHunk": "@@ -86,39 +109,56 @@ public static void launchServer(InputStream in, OutputStream out) {\n         }\n     }\n     \n-    private static Launcher<NbCodeLanguageClient> createLauncher(LanguageServerImpl server, InputStream in, OutputStream out) {\n+    private static Launcher<NbCodeLanguageClient> createLauncher(LanguageServerImpl server, InputStream in, OutputStream out,\n+            Function<MessageConsumer, MessageConsumer> processor) {\n         return new LSPLauncher.Builder<NbCodeLanguageClient>()\n             .setLocalService(server)\n             .setRemoteInterface(NbCodeLanguageClient.class)\n             .setInput(in)\n             .setOutput(out)\n-            .wrapMessages(new ConsumeWithLookup(server.getSessionLookup())::attachLookup)\n+            .wrapMessages(processor)\n             .create();\n     }\n     \n+    static final ThreadLocal<NbCodeLanguageClient>   DISPATCHERS = new ThreadLocal<>();\n+    \n     /**\n      * Processes message while the default Lookup is set to \n      * {@link LanguageServerImpl#getSessionLookup()}.\n      */\n     private static class ConsumeWithLookup {\n         private final Lookup sessionLookup;\n-\n+        private NbCodeLanguageClient client;\n+        \n         public ConsumeWithLookup(Lookup sessionLookup) {\n             this.sessionLookup = sessionLookup;\n         }\n         \n+        synchronized void attachClient(NbCodeLanguageClient client) {\n+            this.client = client;\n+        }\n+        \n         public MessageConsumer attachLookup(MessageConsumer delegate) {\n             return new MessageConsumer() {\n                 @Override\n                 public void consume(Message msg) throws MessageIssueException, JsonRpcException {\n-                    Lookups.executeWith(sessionLookup, () -> {\n-                        delegate.consume(msg);\n-                    });\n+                    try {\n+                        DISPATCHERS.set(client);\n+                        Lookups.executeWith(sessionLookup, () -> {\n+                            delegate.consume(msg);\n+                        });\n+                    } finally {\n+                        DISPATCHERS.remove();\n+                    }\n                 }\n             };\n         }\n     }\n     \n+    private static final RequestProcessor SERVER_INIT_RP = new RequestProcessor(LanguageServerImpl.class.getName(), 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NzQzMw==", "bodyText": "Is the initializations field read anywhere? I can't find it (and that'd be good, as I don't think it is needed).", "url": "https://github.com/apache/netbeans/pull/2493#discussion_r512057433", "createdAt": "2020-10-26T15:37:14Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java", "diffHunk": "@@ -86,39 +109,56 @@ public static void launchServer(InputStream in, OutputStream out) {\n         }\n     }\n     \n-    private static Launcher<NbCodeLanguageClient> createLauncher(LanguageServerImpl server, InputStream in, OutputStream out) {\n+    private static Launcher<NbCodeLanguageClient> createLauncher(LanguageServerImpl server, InputStream in, OutputStream out,\n+            Function<MessageConsumer, MessageConsumer> processor) {\n         return new LSPLauncher.Builder<NbCodeLanguageClient>()\n             .setLocalService(server)\n             .setRemoteInterface(NbCodeLanguageClient.class)\n             .setInput(in)\n             .setOutput(out)\n-            .wrapMessages(new ConsumeWithLookup(server.getSessionLookup())::attachLookup)\n+            .wrapMessages(processor)\n             .create();\n     }\n     \n+    static final ThreadLocal<NbCodeLanguageClient>   DISPATCHERS = new ThreadLocal<>();\n+    \n     /**\n      * Processes message while the default Lookup is set to \n      * {@link LanguageServerImpl#getSessionLookup()}.\n      */\n     private static class ConsumeWithLookup {\n         private final Lookup sessionLookup;\n-\n+        private NbCodeLanguageClient client;\n+        \n         public ConsumeWithLookup(Lookup sessionLookup) {\n             this.sessionLookup = sessionLookup;\n         }\n         \n+        synchronized void attachClient(NbCodeLanguageClient client) {\n+            this.client = client;\n+        }\n+        \n         public MessageConsumer attachLookup(MessageConsumer delegate) {\n             return new MessageConsumer() {\n                 @Override\n                 public void consume(Message msg) throws MessageIssueException, JsonRpcException {\n-                    Lookups.executeWith(sessionLookup, () -> {\n-                        delegate.consume(msg);\n-                    });\n+                    try {\n+                        DISPATCHERS.set(client);\n+                        Lookups.executeWith(sessionLookup, () -> {\n+                            delegate.consume(msg);\n+                        });\n+                    } finally {\n+                        DISPATCHERS.remove();\n+                    }\n                 }\n             };\n         }\n     }\n     \n+    private static final RequestProcessor SERVER_INIT_RP = new RequestProcessor(LanguageServerImpl.class.getName(), 10);\n+    private static final Map<NbCodeClientWrapper, Future> initializations = new WeakHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTA2Nw==", "bodyText": "I believe the translation of the text away from HTML shall only happen if it starts with <html>.", "url": "https://github.com/apache/netbeans/pull/2493#discussion_r512061067", "createdAt": "2020-10-26T15:41:47Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/ui/NotifyDescriptorAdapter.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.lsp.server.ui;\n+\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleIcon;\n+import javax.accessibility.AccessibleText;\n+import javax.swing.Icon;\n+import javax.swing.JButton;\n+import org.eclipse.lsp4j.MessageActionItem;\n+import org.eclipse.lsp4j.MessageType;\n+import org.eclipse.lsp4j.ShowMessageRequestParams;\n+import org.openide.NotifyDescriptor;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ * Adapts a {@link NotifyDescriptor} to a {@link ShowMessageRequestParams} call.\n+ * @author sdedic\n+ */\n+class NotifyDescriptorAdapter {\n+    private static final Logger LOG = Logger.getLogger(NotifyDescriptorAdapter.class.getName());\n+    \n+    private final UIContext client;\n+    private final NotifyDescriptor  descriptor;\n+    private final Map<MessageActionItem, Object> item2Option = new LinkedHashMap<>();\n+    private final Map<String, Object> text2Option = new HashMap<>();\n+    private final Map<Object, List<ActionListener>> optionListeners = new HashMap<>();\n+    private final Map<Object, JButton> option2Button = new HashMap<>();\n+    \n+    private static final Set<String> warnedClasses = new HashSet<>();\n+    \n+    private ShowMessageRequestParams request;\n+\n+    private static final Object[] YES_NO_CANCEL = new Object[] {\n+        NotifyDescriptor.YES_OPTION,\n+        NotifyDescriptor.NO_OPTION,\n+        NotifyDescriptor.CANCEL_OPTION\n+    };\n+    \n+    private static final Object[] YES_NO = new Object[] {\n+        NotifyDescriptor.YES_OPTION,\n+        NotifyDescriptor.NO_OPTION,\n+    };\n+    \n+    private static final Object[] OK_CANCEL = new Object[] {\n+        NotifyDescriptor.OK_OPTION,\n+        NotifyDescriptor.CANCEL_OPTION\n+    };\n+    \n+    private static final Object[] JUST_OK = new Object[] {\n+        NotifyDescriptor.OK_OPTION\n+    };\n+    \n+    public NotifyDescriptorAdapter(NotifyDescriptor descriptor, UIContext client) {\n+        this.descriptor = descriptor;\n+        this.client = client;\n+    }\n+    \n+    private MessageType translateMessageType() {\n+        switch(descriptor.getMessageType()) {\n+            case NotifyDescriptor.ERROR_MESSAGE:\n+                return MessageType.Error;\n+            case NotifyDescriptor.WARNING_MESSAGE:\n+                return MessageType.Warning;\n+            \n+            case NotifyDescriptor.QUESTION_MESSAGE:\n+            case NotifyDescriptor.PLAIN_MESSAGE:\n+            case NotifyDescriptor.INFORMATION_MESSAGE:\n+                return MessageType.Info;\n+            default:\n+                return MessageType.Log;\n+        }\n+    }\n+    \n+    /**\n+     * Strip HTML from the message; VSCode standard showMessage does not support HTML.\n+     * @param original\n+     * @return \n+     */\n+    private String translateText(String original) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c030b19696eedbba77e2bd1bb15182e30e167d5"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4372b99790288c14269b6da85ceec1e2205a84c0", "author": {"user": {"login": "sdedic", "name": "Svatopluk Dedic"}}, "url": "https://github.com/apache/netbeans/commit/4372b99790288c14269b6da85ceec1e2205a84c0", "committedDate": "2020-10-26T16:45:23Z", "message": "Only translate html-starting content."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4a3eda77ac8ec6afc85df27b42a5c62e41149f", "author": {"user": {"login": "sdedic", "name": "Svatopluk Dedic"}}, "url": "https://github.com/apache/netbeans/commit/8b4a3eda77ac8ec6afc85df27b42a5c62e41149f", "committedDate": "2020-10-26T16:45:45Z", "message": "Leftover cleanup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjI5NjUw", "url": "https://github.com/apache/netbeans/pull/2493#pullrequestreview-517229650", "createdAt": "2020-10-26T22:45:35Z", "commit": {"oid": "8b4a3eda77ac8ec6afc85df27b42a5c62e41149f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}