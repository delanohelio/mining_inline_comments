{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDQ0NTc3", "number": 2504, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1MjoyOFrOE0Alyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo1NDo1N1rOE0Hbew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxMDgyOnYy", "diffSide": "RIGHT", "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1MjoyOFrOHrkqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODo1ODo1MVrOHr7U4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg==", "bodyText": "Should this inner class really be visible in the API, Sv\u00e1\u0165o?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451492", "createdAt": "2020-10-31T03:52:28Z", "author": {"login": "JaroslavTulach"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzUwOQ==", "bodyText": "Uh-oh, no. (wrote too fast Sunday morning, sorry)", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583509", "createdAt": "2020-11-01T06:47:23Z", "author": {"login": "sdedic"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NjM0OA==", "bodyText": "Actually - this class IS used, and is returned from the API. It's used a long time from html.refactoring, should I somehow narrow the API somehow (seems to be used just partially).", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515586348", "createdAt": "2020-11-01T07:20:11Z", "author": {"login": "sdedic"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2OTc0MQ==", "bodyText": "If it is used, then it is OK.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515769741", "createdAt": "2020-11-02T06:56:08Z", "author": {"login": "JaroslavTulach"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMjgxNw==", "bodyText": "I have a prepared PR to make the class final + constructor nonpublic, but I think it would be formally against Friend API rules: there's no time for potential contributors to depending modules to comment; the HtmlIndex class has moved and had this public exposure for several releases. I propose to incompatibly-change this Friend API in the master.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515822817", "createdAt": "2020-11-02T08:58:51Z", "author": {"login": "sdedic"}, "path": "ide/html.indexing/nbproject/org-netbeans-modules-html-indexing.sig", "diffHunk": "@@ -0,0 +1,42 @@\n+#Signature file v4.1\n+#Version 1.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.html.editor.api.index.HtmlIndex\n+fld public final static int VERSION = 2\n+fld public final static java.lang.String NAME = \"html\"\n+fld public final static java.lang.String REFERS_KEY = \"imports\"\n+innr public static AllDependenciesMaps\n+meth public java.util.Collection<org.openide.filesystems.FileObject> find(java.lang.String,java.lang.String)\n+meth public java.util.List<java.net.URL> getAllRemoteDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps getAllDependencies() throws java.io.IOException\n+meth public org.netbeans.modules.web.common.api.DependenciesGraph getDependencies(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project) throws java.io.IOException\n+meth public static org.netbeans.modules.html.editor.api.index.HtmlIndex get(org.netbeans.api.project.Project,boolean) throws java.io.IOException\n+meth public void addChangeListener(javax.swing.event.ChangeListener)\n+meth public void notifyChange()\n+meth public void removeChangeListener(javax.swing.event.ChangeListener)\n+supr java.lang.Object\n+hfds INDEXES,changeSupport,querySupport\n+\n+CLSS public static org.netbeans.modules.html.editor.api.index.HtmlIndex$AllDependenciesMaps", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQ5Mg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxMTA5OnYy", "diffSide": "RIGHT", "path": "ide/spi.debugger.ui/nbproject/org-netbeans-spi-debugger-ui.sig", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1MzoyNFrOHrkqgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1MzoyNFrOHrkqgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTUyMw==", "bodyText": "Improvements done by @entlicher .", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451523", "createdAt": "2020-10-31T03:53:24Z", "author": {"login": "JaroslavTulach"}, "path": "ide/spi.debugger.ui/nbproject/org-netbeans-spi-debugger-ui.sig", "diffHunk": "@@ -342,6 +343,15 @@ meth public java.util.List<org.netbeans.spi.debugger.ui.DebuggingView$DVFilter>\n supr java.lang.Object\n hfds items\n \n+CLSS public abstract interface static org.netbeans.spi.debugger.ui.DebuggingView$DVFrame", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxMjU5OnYy", "diffSide": "RIGHT", "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1NToxNVrOHrkrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDo0Njo1NFrOH6nEVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTY5MA==", "bodyText": "An implementation of URLStreamHandler is probably not something we want to expose in the API, right @entlicher?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451690", "createdAt": "2020-10-31T03:55:15Z", "author": {"login": "JaroslavTulach"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxOTU0Mw==", "bodyText": "This should have been friend packages. :-( And yes, this can be reduced.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r531219543", "createdAt": "2020-11-26T20:46:54Z", "author": {"login": "entlicher"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTY5MA=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxMzMwOnYy", "diffSide": "RIGHT", "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1NjozMVrOHrkrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDo0ODoxMlrOH6nFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTc3NA==", "bodyText": "Implementation of URLMapper could probably also be hidden.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515451774", "createdAt": "2020-10-31T03:56:31Z", "author": {"login": "JaroslavTulach"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler\n+ outer org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+meth protected java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+supr java.net.URLStreamHandler\n+\n+CLSS public abstract interface org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable\n+meth public abstract boolean hasTypeSource()\n+meth public abstract boolean hasValueSource()\n+meth public abstract boolean isInternal()\n+meth public abstract boolean isLeaf()\n+meth public abstract boolean isReadable()\n+meth public abstract boolean isWritable()\n+meth public abstract java.lang.Object getValue()\n+meth public abstract java.lang.Object[] getChildren()\n+meth public abstract java.lang.String getDisplayValue()\n+meth public abstract java.lang.String getName()\n+meth public abstract java.lang.String getType()\n+meth public abstract org.netbeans.api.debugger.jpda.ObjectVariable setValue(org.netbeans.api.debugger.jpda.JPDADebugger,java.lang.String)\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getTypeSource()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getValueSource()\n+meth public static org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable get(org.netbeans.api.debugger.jpda.Variable)\n+\n+CLSS public org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+fld public final static java.lang.String PROP_CONDITION = \"condition\"\n+fld public final static java.lang.String PROP_FILE = \"fileChanged\"\n+fld public final static java.lang.String PROP_LINE_NUMBER = \"lineNumber\"\n+fld public final static java.lang.String PROP_URL = \"url\"\n+meth protected void dispose()\n+meth public boolean isEnabled()\n+meth public final boolean isConditional()\n+meth public final java.lang.String getCondition()\n+meth public final void setCondition(java.lang.String)\n+meth public int getLineNumber()\n+meth public java.lang.String toString()\n+meth public java.net.URL getURL()\n+meth public org.netbeans.modules.javascript2.debug.EditorLineHandler getLineHandler()\n+meth public org.openide.filesystems.FileObject getFileObject()\n+meth public void disable()\n+meth public void enable()\n+meth public void setLine(int)\n+meth public void setLineHandler(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.api.debugger.Breakpoint\n+hfds condition,isEnabled,line,lineChangesWeak,lineChangeslistener,myListener,myWeakListener\n+hcls FileRemoveListener,LineChangesListener\n+\n+CLSS public abstract org.openide.filesystems.URLMapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxOTc5Mg==", "bodyText": "Yes, it can.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r531219792", "createdAt": "2020-11-26T20:48:12Z", "author": {"login": "entlicher"}, "path": "java/debugger.jpda.truffle/nbproject/org-netbeans-modules-debugger-jpda-truffle.sig", "diffHunk": "@@ -0,0 +1,209 @@\n+#Signature file v4.1\n+#Version 1.7\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public abstract java.net.URLStreamHandler\n+cons public init()\n+meth protected abstract java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+meth protected boolean equals(java.net.URL,java.net.URL)\n+meth protected boolean hostsEqual(java.net.URL,java.net.URL)\n+meth protected boolean sameFile(java.net.URL,java.net.URL)\n+meth protected int getDefaultPort()\n+meth protected int hashCode(java.net.URL)\n+meth protected java.lang.String toExternalForm(java.net.URL)\n+meth protected java.net.InetAddress getHostAddress(java.net.URL)\n+meth protected java.net.URLConnection openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException\n+meth protected void parseURL(java.net.URL,java.lang.String,int,int)\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)\n+ anno 0 java.lang.Deprecated()\n+meth protected void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n+supr java.lang.Object\n+\n+CLSS public abstract org.netbeans.api.debugger.Breakpoint\n+cons public init()\n+fld public final static java.lang.String PROP_DISPOSED = \"disposed\"\n+fld public final static java.lang.String PROP_ENABLED = \"enabled\"\n+fld public final static java.lang.String PROP_GROUP_NAME = \"groupName\"\n+fld public final static java.lang.String PROP_GROUP_PROPERTIES = \"groupProperties\"\n+fld public final static java.lang.String PROP_HIT_COUNT_FILTER = \"hitCountFilter\"\n+fld public final static java.lang.String PROP_VALIDITY = \"validity\"\n+innr public abstract static GroupProperties\n+innr public final static !enum HIT_COUNT_FILTERING_STYLE\n+innr public final static !enum VALIDITY\n+meth protected final void setValidity(org.netbeans.api.debugger.Breakpoint$VALIDITY,java.lang.String)\n+meth protected void dispose()\n+meth protected void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\n+meth public abstract boolean isEnabled()\n+meth public abstract void disable()\n+meth public abstract void enable()\n+meth public boolean canHaveDependentBreakpoints()\n+meth public final int getHitCountFilter()\n+meth public final java.lang.String getValidityMessage()\n+meth public final org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE getHitCountFilteringStyle()\n+meth public final org.netbeans.api.debugger.Breakpoint$VALIDITY getValidity()\n+meth public final void setHitCountFilter(int,org.netbeans.api.debugger.Breakpoint$HIT_COUNT_FILTERING_STYLE)\n+meth public java.lang.String getGroupName()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToDisable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public java.util.Set<org.netbeans.api.debugger.Breakpoint> getBreakpointsToEnable()\n+ anno 0 org.netbeans.api.annotations.common.NonNull()\n+meth public org.netbeans.api.debugger.Breakpoint$GroupProperties getGroupProperties()\n+meth public void addPropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.beans.PropertyChangeListener)\n+meth public void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\n+meth public void setBreakpointsToDisable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setBreakpointsToEnable(java.util.Set<org.netbeans.api.debugger.Breakpoint>)\n+ anno 1 org.netbeans.api.annotations.common.NonNull()\n+meth public void setGroupName(java.lang.String)\n+supr java.lang.Object\n+hfds breakpointsToDisable,breakpointsToEnable,groupName,hitCountFilter,hitCountFilteringStyle,pcs,validity,validityMessage\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.breakpoints.TruffleLineBreakpoint\n+cons public init(java.net.URL,int)\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+hcls FixedLineHandler\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,int,org.netbeans.api.debugger.jpda.ObjectVariable,java.lang.String,com.sun.jdi.StringReference,org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[],org.netbeans.api.debugger.jpda.ObjectVariable,boolean)\n+meth public boolean isInternal()\n+meth public final int getDepth()\n+meth public final org.netbeans.api.debugger.jpda.JPDADebugger getDebugger()\n+meth public final org.netbeans.api.debugger.jpda.JPDAThread getThread()\n+meth public java.lang.String getDisplayName()\n+meth public java.lang.String getMethodName()\n+meth public java.lang.String getSourceLocation()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getStackFrameInstance()\n+meth public org.netbeans.api.debugger.jpda.ObjectVariable getThis()\n+meth public org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getSourcePosition()\n+meth public org.netbeans.modules.debugger.jpda.truffle.vars.impl.TruffleScope[] getScopes()\n+meth public void popToHere()\n+supr java.lang.Object\n+hfds LOG,codeRef,debugger,depth,frameInstance,isInternal,language,methodName,scopes,sourceId,sourceLocation,sourceName,sourcePath,sourceSection,sourceURI,thisObject,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackInfo\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,org.netbeans.api.debugger.jpda.JPDAThread,org.netbeans.api.debugger.jpda.ObjectVariable)\n+meth public boolean hasInternalFrames()\n+meth public org.netbeans.modules.debugger.jpda.truffle.frames.TruffleStackFrame[] getStackFrames(boolean)\n+supr java.lang.Object\n+hfds METHOD_GET_FRAMES_INFO,METHOD_GET_FRAMES_INFO_SIG,areInternalFrames,debugger,includedInternalFrames,stackFrames,stackTrace,thread\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.Source\n+fld public final static java.lang.String URL_PROTOCOL = \"truffle-scripts\"\n+meth public java.lang.String getContent()\n+meth public java.lang.String getName()\n+meth public java.net.URI getURI()\n+meth public java.net.URL getUrl()\n+meth public long getHash()\n+meth public static java.net.URI getTruffleInternalURI(org.openide.filesystems.FileObject)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getExistingSource(org.netbeans.api.debugger.jpda.JPDADebugger,long)\n+meth public static org.netbeans.modules.debugger.jpda.truffle.source.Source getSource(org.netbeans.api.debugger.jpda.JPDADebugger,long,java.lang.String,java.lang.String,java.net.URI,com.sun.jdi.StringReference)\n+supr java.lang.Object\n+hfds ATTR_URI,KNOWN_SOURCES,codeRef,content,hash,name,uri,url\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceBinaryTranslator\n+cons public init()\n+meth public static java.net.URI binary2Source(java.net.URI)\n+meth public static java.net.URI source2Binary(org.openide.filesystems.FileObject)\n+supr java.lang.Object\n+hfds SOURCE_IDS\n+\n+CLSS public org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition\n+cons public init(org.netbeans.api.debugger.jpda.JPDADebugger,long,org.netbeans.modules.debugger.jpda.truffle.source.Source,java.lang.String)\n+meth public int getEndColumn()\n+meth public int getEndLine()\n+meth public int getStartColumn()\n+meth public int getStartLine()\n+meth public org.netbeans.modules.debugger.jpda.truffle.source.Source getSource()\n+supr java.lang.Object\n+hfds endColumn,endLine,id,src,startColumn,startLine\n+\n+CLSS public final org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+innr public final static SourceURLHandler\n+meth public java.net.URL getURL(org.openide.filesystems.FileObject,int)\n+meth public org.openide.filesystems.FileObject[] getFileObjects(java.net.URL)\n+meth public static java.lang.String percentDecode(java.lang.String)\n+meth public static java.lang.String percentEncode(java.lang.String)\n+supr org.openide.filesystems.URLMapper\n+hfds HOST,filesystems\n+\n+CLSS public final static org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper$SourceURLHandler\n+ outer org.netbeans.modules.debugger.jpda.truffle.source.SourceURLMapper\n+cons public init()\n+meth protected java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException\n+supr java.net.URLStreamHandler\n+\n+CLSS public abstract interface org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable\n+meth public abstract boolean hasTypeSource()\n+meth public abstract boolean hasValueSource()\n+meth public abstract boolean isInternal()\n+meth public abstract boolean isLeaf()\n+meth public abstract boolean isReadable()\n+meth public abstract boolean isWritable()\n+meth public abstract java.lang.Object getValue()\n+meth public abstract java.lang.Object[] getChildren()\n+meth public abstract java.lang.String getDisplayValue()\n+meth public abstract java.lang.String getName()\n+meth public abstract java.lang.String getType()\n+meth public abstract org.netbeans.api.debugger.jpda.ObjectVariable setValue(org.netbeans.api.debugger.jpda.JPDADebugger,java.lang.String)\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.LanguageName getLanguage()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getTypeSource()\n+meth public abstract org.netbeans.modules.debugger.jpda.truffle.source.SourcePosition getValueSource()\n+meth public static org.netbeans.modules.debugger.jpda.truffle.vars.TruffleVariable get(org.netbeans.api.debugger.jpda.Variable)\n+\n+CLSS public org.netbeans.modules.javascript2.debug.breakpoints.JSLineBreakpoint\n+cons public init(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+fld public final static java.lang.String PROP_CONDITION = \"condition\"\n+fld public final static java.lang.String PROP_FILE = \"fileChanged\"\n+fld public final static java.lang.String PROP_LINE_NUMBER = \"lineNumber\"\n+fld public final static java.lang.String PROP_URL = \"url\"\n+meth protected void dispose()\n+meth public boolean isEnabled()\n+meth public final boolean isConditional()\n+meth public final java.lang.String getCondition()\n+meth public final void setCondition(java.lang.String)\n+meth public int getLineNumber()\n+meth public java.lang.String toString()\n+meth public java.net.URL getURL()\n+meth public org.netbeans.modules.javascript2.debug.EditorLineHandler getLineHandler()\n+meth public org.openide.filesystems.FileObject getFileObject()\n+meth public void disable()\n+meth public void enable()\n+meth public void setLine(int)\n+meth public void setLineHandler(org.netbeans.modules.javascript2.debug.EditorLineHandler)\n+supr org.netbeans.api.debugger.Breakpoint\n+hfds condition,isEnabled,line,lineChangesWeak,lineChangeslistener,myListener,myWeakListener\n+hcls FileRemoveListener,LineChangesListener\n+\n+CLSS public abstract org.openide.filesystems.URLMapper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTc3NA=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxNTY0OnYy", "diffSide": "RIGHT", "path": "java/java.lsp.server/nbproject/org-netbeans-modules-java-lsp-server.sig", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDowMDowNFrOHrksiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzowNzoyNVrOHrwkzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjA0MQ==", "bodyText": "Yup, various Abstract* providers and IOContext and UIContext classes are exposed from java/java.lsp.server to java/java.lsp.server/nbcode suite which registers them as a service.\nI decided to follow this Abstract* implementation followed by registration style, because it lowers the amount of API java.lsp.server needs to expose. For example now we don't have to export anything from the lsp4j Eclipse API. Its usage remains hidden inside the Abstract* classes.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452041", "createdAt": "2020-10-31T04:00:04Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/nbproject/org-netbeans-modules-java-lsp-server.sig", "diffHunk": "@@ -0,0 +1,175 @@\n+#Signature file v4.1\n+#Version 1.6.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.java.lsp.server.ui.AbstractDialogDisplayer\n+cons public init()\n+meth public java.awt.Dialog createDialog(org.openide.DialogDescriptor)\n+meth public java.lang.Object notify(org.openide.NotifyDescriptor)\n+meth public void notifyLater(org.openide.NotifyDescriptor)\n+supr org.openide.DialogDisplayer\n+hfds context\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+cons protected init()\n+innr public final static LspIO\n+intf org.netbeans.spi.io.InputOutputProvider<org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,java.lang.Void>\n+meth public final boolean isIOClosed(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getErr(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getOut(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.Reader getIn(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getId()\n+meth public final java.lang.Void getCurrentPosition(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter)\n+meth public final java.lang.Void startFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,boolean)\n+meth public final org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO getIO(java.lang.String,boolean,org.openide.util.Lookup)\n+meth public final org.openide.util.Lookup getIOLookup(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void closeIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void endFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void print(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.String,org.netbeans.api.io.Hyperlink,org.netbeans.api.io.OutputColor,boolean)\n+meth public final void resetIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void scrollTo(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void setFoldExpanded(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,boolean)\n+meth public final void setIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.lang.String)\n+meth public final void showIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.util.Set<org.netbeans.api.io.ShowOperation>)\n+supr java.lang.Object\n+\n+CLSS public final static org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO\n+ outer org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+supr java.lang.Object\n+hfds ctx,err,in,lookup,name,out\n+hcls LspWriter\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspStatusDisplayer\n+cons protected init()\n+meth public final java.lang.String getStatusText()\n+meth public final org.openide.awt.StatusDisplayer$Message setStatusText(java.lang.String,int)\n+meth public final void addChangeListener(javax.swing.event.ChangeListener)\n+meth public final void removeChangeListener(javax.swing.event.ChangeListener)\n+meth public final void setStatusText(java.lang.String)\n+supr org.openide.awt.StatusDisplayer\n+hfds text\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjE3Mg==", "bodyText": "@JaroslavTulach shouldn't we make this API rather a Friend one ? It's rather immature you know.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515582172", "createdAt": "2020-11-01T06:31:07Z", "author": {"login": "sdedic"}, "path": "java/java.lsp.server/nbproject/org-netbeans-modules-java-lsp-server.sig", "diffHunk": "@@ -0,0 +1,175 @@\n+#Signature file v4.1\n+#Version 1.6.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.java.lsp.server.ui.AbstractDialogDisplayer\n+cons public init()\n+meth public java.awt.Dialog createDialog(org.openide.DialogDescriptor)\n+meth public java.lang.Object notify(org.openide.NotifyDescriptor)\n+meth public void notifyLater(org.openide.NotifyDescriptor)\n+supr org.openide.DialogDisplayer\n+hfds context\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+cons protected init()\n+innr public final static LspIO\n+intf org.netbeans.spi.io.InputOutputProvider<org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,java.lang.Void>\n+meth public final boolean isIOClosed(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getErr(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getOut(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.Reader getIn(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getId()\n+meth public final java.lang.Void getCurrentPosition(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter)\n+meth public final java.lang.Void startFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,boolean)\n+meth public final org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO getIO(java.lang.String,boolean,org.openide.util.Lookup)\n+meth public final org.openide.util.Lookup getIOLookup(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void closeIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void endFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void print(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.String,org.netbeans.api.io.Hyperlink,org.netbeans.api.io.OutputColor,boolean)\n+meth public final void resetIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void scrollTo(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void setFoldExpanded(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,boolean)\n+meth public final void setIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.lang.String)\n+meth public final void showIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.util.Set<org.netbeans.api.io.ShowOperation>)\n+supr java.lang.Object\n+\n+CLSS public final static org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO\n+ outer org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+supr java.lang.Object\n+hfds ctx,err,in,lookup,name,out\n+hcls LspWriter\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspStatusDisplayer\n+cons protected init()\n+meth public final java.lang.String getStatusText()\n+meth public final org.openide.awt.StatusDisplayer$Message setStatusText(java.lang.String,int)\n+meth public final void addChangeListener(javax.swing.event.ChangeListener)\n+meth public final void removeChangeListener(javax.swing.event.ChangeListener)\n+meth public final void setStatusText(java.lang.String)\n+supr org.openide.awt.StatusDisplayer\n+hfds text\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjA0MQ=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NjY2OA==", "bodyText": "Don't worry. We'll deprecated when necessary. I don't want to promote usage of friend API myself.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515646668", "createdAt": "2020-11-01T17:07:25Z", "author": {"login": "jtulach"}, "path": "java/java.lsp.server/nbproject/org-netbeans-modules-java-lsp-server.sig", "diffHunk": "@@ -0,0 +1,175 @@\n+#Signature file v4.1\n+#Version 1.6.0\n+\n+CLSS public java.lang.Object\n+cons public init()\n+meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException\n+meth protected void finalize() throws java.lang.Throwable\n+meth public boolean equals(java.lang.Object)\n+meth public final java.lang.Class<?> getClass()\n+meth public final void notify()\n+meth public final void notifyAll()\n+meth public final void wait() throws java.lang.InterruptedException\n+meth public final void wait(long) throws java.lang.InterruptedException\n+meth public final void wait(long,int) throws java.lang.InterruptedException\n+meth public int hashCode()\n+meth public java.lang.String toString()\n+\n+CLSS public org.netbeans.modules.java.lsp.server.ui.AbstractDialogDisplayer\n+cons public init()\n+meth public java.awt.Dialog createDialog(org.openide.DialogDescriptor)\n+meth public java.lang.Object notify(org.openide.NotifyDescriptor)\n+meth public void notifyLater(org.openide.NotifyDescriptor)\n+supr org.openide.DialogDisplayer\n+hfds context\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+cons protected init()\n+innr public final static LspIO\n+intf org.netbeans.spi.io.InputOutputProvider<org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,java.lang.Void>\n+meth public final boolean isIOClosed(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getErr(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.PrintWriter getOut(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.io.Reader getIn(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final java.lang.String getId()\n+meth public final java.lang.Void getCurrentPosition(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter)\n+meth public final java.lang.Void startFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,boolean)\n+meth public final org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO getIO(java.lang.String,boolean,org.openide.util.Lookup)\n+meth public final org.openide.util.Lookup getIOLookup(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void closeIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void endFold(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void print(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.String,org.netbeans.api.io.Hyperlink,org.netbeans.api.io.OutputColor,boolean)\n+meth public final void resetIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO)\n+meth public final void scrollTo(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void)\n+meth public final void setFoldExpanded(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.io.PrintWriter,java.lang.Void,boolean)\n+meth public final void setIODescription(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.lang.String)\n+meth public final void showIO(org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO,java.util.Set<org.netbeans.api.io.ShowOperation>)\n+supr java.lang.Object\n+\n+CLSS public final static org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider$LspIO\n+ outer org.netbeans.modules.java.lsp.server.ui.AbstractLspInputOutputProvider\n+supr java.lang.Object\n+hfds ctx,err,in,lookup,name,out\n+hcls LspWriter\n+\n+CLSS public abstract org.netbeans.modules.java.lsp.server.ui.AbstractLspStatusDisplayer\n+cons protected init()\n+meth public final java.lang.String getStatusText()\n+meth public final org.openide.awt.StatusDisplayer$Message setStatusText(java.lang.String,int)\n+meth public final void addChangeListener(javax.swing.event.ChangeListener)\n+meth public final void removeChangeListener(javax.swing.event.ChangeListener)\n+meth public final void setStatusText(java.lang.String)\n+supr org.openide.awt.StatusDisplayer\n+hfds text\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjA0MQ=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxNzYxOnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/nbproject/org-netbeans-modules-java-project-ui.sig", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDowMzoyNVrOHrktbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDowMzoyNVrOHrktbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjI3MQ==", "bodyText": "Result of 56f16fb - we probably don't want this CreateJavaClassFileFromClipboard extends PasteType class to be visible in the API. Can you move it to implementation package, @singh-akhilesh?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452271", "createdAt": "2020-10-31T04:03:25Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.project.ui/nbproject/org-netbeans-modules-java-project-ui.sig", "diffHunk": "@@ -268,6 +268,13 @@ CLSS public abstract interface static org.netbeans.spi.java.project.support.ui.B\n meth public abstract void platformPropertyUpdated(org.netbeans.api.java.platform.JavaPlatform)\n  anno 1 org.netbeans.api.annotations.common.NonNull()\n \n+CLSS public org.netbeans.spi.java.project.support.ui.CreateJavaClassFileFromClipboard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyMTk4OnYy", "diffSide": "LEFT", "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxMDowOVrOHrkvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo1MzowMlrOHr3CNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw==", "bodyText": "Looks like an incompatible API change. Technically it should be associated with increasing the version of the module to /2 to signal incompatibilities. E.g. modules that used to link to previous version of VariableBase.createDispatch are no longer going to link with the new version. Probably harmless. I don't expect many modules linking against php.editor being out there.\nCC @junichi11", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452777", "createdAt": "2020-10-31T04:10:09Z", "author": {"login": "JaroslavTulach"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NTY5Mg==", "bodyText": "Maybe, these methods don't have to be public... (I can be wrong because I am not the original author.)\nIs the following OK? (I haven't run the unit tests yet but these are not used other places, I suppose.)\n\npatch\ndiff --git a/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Parser.java b/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Parser.java\nindex b6fb4a7f2d..10b37ed610 100644\n--- a/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Parser.java\n+++ b/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Parser.java\n@@ -19,7 +19,7 @@\n \n //----------------------------------------------------\n // The following code was generated by CUP v0.11a beta 20060608\n-// Fri Sep 04 08:35:13 JST 2020\n+// Sat Oct 31 20:05:48 JST 2020\n //----------------------------------------------------\n \n package org.netbeans.modules.php.editor.parser;\n@@ -30,7 +30,7 @@ import org.netbeans.modules.php.editor.parser.astnodes.*;\n import org.openide.util.Pair;\n \n /** CUP v0.11a beta 20060608 generated parser.\n-  * @version Fri Sep 04 08:35:13 JST 2020\n+  * @version Sat Oct 31 20:05:48 JST 2020\n   */\n @org.netbeans.api.annotations.common.SuppressWarnings({\"EI_EXPOSE_REP\", \"MS_PKGPROTECT\", \"BC_BAD_CAST_TO_CONCRETE_COLLECTION\"})\n public class ASTPHP5Parser extends java_cup.runtime.lr_parser {\n@@ -2009,7 +2009,15 @@ new EncodedActionTable15().getTableData()\n         return anonymousClassCounter;\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, Pair<Expression, Access> pair, List dimensions) {\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, Pair<Expression, Boolean> pair, List dimensions) {\n+        Pair<Expression, Access> access = Pair.of(pair.first(), pair.second() ? Access.STATIC : Access.NON_STATIC);\n+        return createDispatch(dispatcher, dimensions, access);\n+    }\n+\n+    VariableBase createDispatch(VariableBase dispatcher, List dimensions, Pair<Expression, Access> pair) {\n         VariableBase dispatch = null;\n         Expression property = pair.first();\n         Access access = pair.second();\n@@ -2061,15 +2069,38 @@ new EncodedActionTable15().getTableData()\n         return dispatch;\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions, Access access) {\n-        return createDispatch(dispatcher, Pair.of(property, access), null);\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions) {\n+        return createDispatch(dispatcher, null, Pair.of(property, Access.NON_STATIC));\n+    }\n+\n+    VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions, Access access) {\n+        return createDispatch(dispatcher, null, Pair.of(property, access));\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property) {\n+        return createDispatch(dispatcher, property, null, Access.NON_STATIC);\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, Access access) {\n+    VariableBase createDispatch(VariableBase dispatcher, VariableBase property, Access access) {\n         return createDispatch(dispatcher, property, null, access);\n     }\n \n-    public VariableBase createDispatch(Access access, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(boolean isStatic, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+            List<Expression> paramsList, int paramsListright, List propertyList, List aa) {\n+        Access access = isStatic ? Access.STATIC : Access.NON_STATIC;\n+        return createDispatch(access, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);\n+    }\n+\n+    VariableBase createDispatch(Access access, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n             List<Expression> paramsList, int paramsListright, List propertyList, List aa) {\n         Expression firstVarProperty = null;\n         if (paramsList == null) {\n@@ -2090,14 +2121,24 @@ new EncodedActionTable15().getTableData()\n         Iterator listIt = list.iterator();\n         while (listIt.hasNext()) {\n             Pair<Expression, Access> property = (Pair<Expression, Access>) listIt.next();\n-            dispatch = createDispatch(dispatcher, property, arrayDimensiones);\n+            dispatch = createDispatch(dispatcher, arrayDimensiones, property);\n             dispatcher = dispatch;\n             arrayDimensiones = new LinkedList();\n         }\n         return dispatch;\n     }\n \n-    public Pair<Expression, Access> createDispatchProperty(Access access, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+    /**\n+     * @deprecated\n+     */\n+    public Pair<Expression, Boolean> createDispatchProperty(boolean isStatic, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+            List<Expression> paramsList, int paramsListright, List aa) {\n+        Access access = isStatic ? Access.STATIC : Access.NON_STATIC;\n+        Pair<Expression, Access> pair = createDispatchProperty(access, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);\n+        return Pair.of(pair.first(), isStatic);\n+    }\n+\n+    Pair<Expression, Access> createDispatchProperty(Access access, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n             List<Expression> paramsList, int paramsListright, List aa) {\n         Expression result = null;\n         if (paramsList == null) {\ndiff --git a/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Symbols.java b/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Symbols.java\nindex 8b0053039a..bb12526053 100644\n--- a/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Symbols.java\n+++ b/php/php.editor/src/org/netbeans/modules/php/editor/parser/ASTPHP5Symbols.java\n@@ -19,7 +19,7 @@\n \n //----------------------------------------------------\n // The following code was generated by CUP v0.11a beta 20060608\n-// Fri Sep 04 08:35:13 JST 2020\n+// Sat Oct 31 20:05:48 JST 2020\n //----------------------------------------------------\n \n package org.netbeans.modules.php.editor.parser;\ndiff --git a/php/php.editor/tools/ASTPHP5Parser.cup b/php/php.editor/tools/ASTPHP5Parser.cup\nindex eb77e0848c..cf14ed89b0 100644\n--- a/php/php.editor/tools/ASTPHP5Parser.cup\n+++ b/php/php.editor/tools/ASTPHP5Parser.cup\n@@ -67,7 +67,15 @@ parser code {:\n         return anonymousClassCounter;\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, Pair<Expression, Access> pair, List dimensions) {\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, Pair<Expression, Boolean> pair, List dimensions) {\n+        Pair<Expression, Access> access = Pair.of(pair.first(), pair.second() ? Access.STATIC : Access.NON_STATIC);\n+        return createDispatch(dispatcher, dimensions, access);\n+    }\n+\n+    VariableBase createDispatch(VariableBase dispatcher, List dimensions, Pair<Expression, Access> pair) {\n         VariableBase dispatch = null;\n         Expression property = pair.first();\n         Access access = pair.second();\n@@ -119,15 +127,38 @@ parser code {:\n         return dispatch;\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions, Access access) {\n-        return createDispatch(dispatcher, Pair.of(property, access), null);\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions) {\n+        return createDispatch(dispatcher, null, Pair.of(property, Access.NON_STATIC));\n+    }\n+\n+    VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions, Access access) {\n+        return createDispatch(dispatcher, null, Pair.of(property, access));\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property) {\n+        return createDispatch(dispatcher, property, null, Access.NON_STATIC);\n     }\n \n-    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, Access access) {\n+    VariableBase createDispatch(VariableBase dispatcher, VariableBase property, Access access) {\n         return createDispatch(dispatcher, property, null, access);\n     }\n \n-    public VariableBase createDispatch(Access access, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+    /**\n+     * @deprecated\n+     */\n+    public VariableBase createDispatch(boolean isStatic, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+            List<Expression> paramsList, int paramsListright, List propertyList, List aa) {\n+        Access access = isStatic ? Access.STATIC : Access.NON_STATIC;\n+        return createDispatch(access, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);\n+    }\n+\n+    VariableBase createDispatch(Access access, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n             List<Expression> paramsList, int paramsListright, List propertyList, List aa) {\n         Expression firstVarProperty = null;\n         if (paramsList == null) {\n@@ -148,14 +179,24 @@ parser code {:\n         Iterator listIt = list.iterator();\n         while (listIt.hasNext()) {\n             Pair<Expression, Access> property = (Pair<Expression, Access>) listIt.next();\n-            dispatch = createDispatch(dispatcher, property, arrayDimensiones);\n+            dispatch = createDispatch(dispatcher, arrayDimensiones, property);\n             dispatcher = dispatch;\n             arrayDimensiones = new LinkedList();\n         }\n         return dispatch;\n     }\n \n-    public Pair<Expression, Access> createDispatchProperty(Access access, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+    /**\n+     * @deprecated\n+     */\n+    public Pair<Expression, Boolean> createDispatchProperty(boolean isStatic, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n+            List<Expression> paramsList, int paramsListright, List aa) {\n+        Access access = isStatic ? Access.STATIC : Access.NON_STATIC;\n+        Pair<Expression, Access> pair = createDispatchProperty(access, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);\n+        return Pair.of(pair.first(), isStatic);\n+    }\n+\n+    Pair<Expression, Access> createDispatchProperty(Access access, Expression memberProperty, int memberPropertyleft, int memberPropertyright,\n             List<Expression> paramsList, int paramsListright, List aa) {\n         Expression result = null;\n         if (paramsList == null) {\n\ncc: @tmysik", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515485692", "createdAt": "2020-10-31T11:09:14Z", "author": {"login": "junichi11"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NzA5Nw==", "bodyText": "@junichi11\nAFAIR there is a PHP Editor API module. However, I think that also the PHP Editor module had to be a friend of some other PHP module(s) as it was not easily possible to \"transfer\" the needed functionality into the API module.\nHowever, because it is an API friend (if I am not wrong), increasing the major version (and updating the relevant PHP modules) should not be a problem, I guess.\ncc @jtulach", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515487097", "createdAt": "2020-10-31T11:25:02Z", "author": {"login": "tmysik"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5MjQ0OA==", "bodyText": "@tmysik Thank you for your help!\nI looked for \"ASTPHP5Parser\".\n$ cd netbeans\n$ find . -name '*.java' | xargs grep \"ASTPHP5Parser\"\n\nIt seems to be used in the php.editor module only.\ncreateDispatch* methods are used in the ASTPHP5Parser only.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515492448", "createdAt": "2020-10-31T12:29:52Z", "author": {"login": "junichi11"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNjYxNw==", "bodyText": "Well, it was in the API from some reason (repo history could help here) so I think that any change would mean increasing the major version.\ncc @jtulach", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515526617", "createdAt": "2020-10-31T18:44:27Z", "author": {"login": "tmysik"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3NDc4NQ==", "bodyText": "Probably harmless. I don't expect many modules linking against php.editor being out there.\n\nUp to you guys. As I said. An incompatible change in php cluster probably is not as dangerous as incompatible change in ide or java cluster.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515574785", "createdAt": "2020-11-01T04:44:12Z", "author": {"login": "JaroslavTulach"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1MjUwMg==", "bodyText": "OK, thank you guys :) I'll increase the major version.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515752502", "createdAt": "2020-11-02T05:53:02Z", "author": {"login": "junichi11"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1648,11 +1658,11 @@ meth public int start_state()\n meth public java.lang.String getFileName()\n meth public java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int) throws java.lang.Exception\n meth public org.netbeans.modules.php.editor.parser.ParserErrorHandler getErrorHandler()\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(boolean,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.netbeans.modules.php.editor.parser.astnodes.VariableBase,java.util.List)\n-meth public org.netbeans.modules.php.editor.parser.astnodes.VariableBase createDispatch(org.netbeans.modules.php.editor.parser.astnodes.VariableBase,org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean>,java.util.List)\n-meth public org.openide.util.Pair<org.netbeans.modules.php.editor.parser.astnodes.Expression,java.lang.Boolean> createDispatchProperty(boolean,org.netbeans.modules.php.editor.parser.astnodes.Expression,int,int,java.util.List<org.netbeans.modules.php.editor.parser.astnodes.Expression>,int,java.util.List)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1Mjc3Nw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyMzA2OnYy", "diffSide": "RIGHT", "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxMjowOFrOHrkv6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNjozNDowNVrOHrlZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjkwNw==", "bodyText": "Incompatible as well. If there was a module using T_ABSTRACT in previous version, it has value 143 copied (as primitive values are copied by javac), but newly compiled code will get value 145. CC @junichi11", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515452907", "createdAt": "2020-10-31T04:12:08Z", "author": {"login": "JaroslavTulach"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1722,167 +1732,169 @@ hfds ZZ_ACTION,ZZ_ACTION_PACKED_0,ZZ_ATTRIBUTE,ZZ_ATTRIBUTE_PACKED_0,ZZ_BUFFERSI\n \n CLSS public abstract interface org.netbeans.modules.php.editor.parser.ASTPHP5Symbols\n fld public final static int EOF = 0\n-fld public final static int T_ABSTRACT = 143\n-fld public final static int T_AND_EQUAL = 95\n-fld public final static int T_ARRAY = 57\n-fld public final static int T_ARRAY_CAST = 131\n+fld public final static int T_ABSTRACT = 145", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2MzQ1Nw==", "bodyText": "Maybe, we can keep the existing value if we add the new terminal tokens to the last always. I added the new tokens near the similar tokens. (I guess that the cause is that.)\nShould I change it?\n\n  \n    \n      netbeans/php/php.editor/tools/ASTPHP5Parser.cup\n    \n    \n        Lines 259 to 384\n      in\n      9d6b920\n    \n    \n    \n    \n\n        \n          \n           /* terminals */ \n        \n\n        \n          \n            \n        \n\n        \n          \n           terminal String T_EXIT; \n        \n\n        \n          \n           terminal String T_IF; \n        \n\n        \n          \n           terminal String T_LNUMBER; \n        \n\n        \n          \n           terminal String T_DNUMBER; \n        \n\n        \n          \n           terminal String T_STRING; \n        \n\n        \n          \n           terminal String T_STRING_VARNAME; \n        \n\n        \n          \n           terminal String T_VARIABLE; \n        \n\n        \n          \n           terminal String T_NUM_STRING; \n        \n\n        \n          \n           terminal T_INLINE_HTML; \n        \n\n        \n          \n           terminal String T_ENCAPSED_AND_WHITESPACE; \n        \n\n        \n          \n           terminal String T_CONSTANT_ENCAPSED_STRING; \n        \n\n        \n          \n           terminal String T_ECHO; \n        \n\n        \n          \n           terminal String T_DO; \n        \n\n        \n          \n           terminal String T_WHILE; \n        \n\n        \n          \n           terminal String T_ENDWHILE; \n        \n\n        \n          \n           terminal String T_FOR; \n        \n\n        \n          \n           terminal String T_ENDFOR; \n        \n\n        \n          \n           terminal String T_FOREACH; \n        \n\n        \n          \n           terminal String T_ENDFOREACH; \n        \n\n        \n          \n           terminal String T_DECLARE; \n        \n\n        \n          \n           terminal String T_ENDDECLARE; \n        \n\n        \n          \n           terminal String T_INSTANCEOF; \n        \n\n        \n          \n           terminal String T_CLONE; \n        \n\n        \n          \n           terminal String T_AS; \n        \n\n        \n          \n           terminal String T_SWITCH; \n        \n\n        \n          \n           terminal String T_ENDSWITCH; \n        \n\n        \n          \n           terminal String T_MATCH; \n        \n\n        \n          \n           terminal String T_CASE; \n        \n\n        \n          \n           terminal String T_DEFAULT; \n        \n\n        \n          \n           terminal String T_BREAK; \n        \n\n        \n          \n           terminal String T_CONTINUE; \n        \n\n        \n          \n           terminal String T_GOTO; \n        \n\n        \n          \n           terminal String T_FN; \n        \n\n        \n          \n           terminal String T_FUNCTION; \n        \n\n        \n          \n           terminal String T_CONST; \n        \n\n        \n          \n           terminal String T_RETURN; \n        \n\n        \n          \n           terminal String T_YIELD; \n        \n\n        \n          \n           terminal T_YIELD_FROM; \n        \n\n        \n          \n           terminal String T_TRY; \n        \n\n        \n          \n           terminal String T_CATCH; \n        \n\n        \n          \n           terminal String T_THROW; \n        \n\n        \n          \n           terminal String T_FINALLY; \n        \n\n        \n          \n           terminal String T_USE; \n        \n\n        \n          \n           terminal String T_GLOBAL; \n        \n\n        \n          \n           terminal String T_VAR; \n        \n\n        \n          \n           terminal String T_UNSET; \n        \n\n        \n          \n           terminal String T_ISSET; \n        \n\n        \n          \n           terminal String T_EMPTY; \n        \n\n        \n          \n           terminal T_HALT_COMPILER; \n        \n\n        \n          \n           terminal String T_CLASS; \n        \n\n        \n          \n           terminal String T_INTERFACE; \n        \n\n        \n          \n           terminal String T_EXTENDS; \n        \n\n        \n          \n           terminal String T_IMPLEMENTS; \n        \n\n        \n          \n           terminal T_OBJECT_OPERATOR; \n        \n\n        \n          \n           terminal T_NULLSAFE_OBJECT_OPERATOR; \n        \n\n        \n          \n           terminal T_DOUBLE_ARROW; \n        \n\n        \n          \n           terminal String T_LIST; \n        \n\n        \n          \n           terminal String T_ARRAY; \n        \n\n        \n          \n           terminal String T_CALLABLE; \n        \n\n        \n          \n           terminal String T_CLASS_C; \n        \n\n        \n          \n           terminal String T_TRAIT_C; \n        \n\n        \n          \n           terminal String T_METHOD_C; \n        \n\n        \n          \n           terminal String T_FUNC_C; \n        \n\n        \n          \n           terminal String T_LINE; \n        \n\n        \n          \n           terminal String T_FILE; \n        \n\n        \n          \n           terminal T_START_HEREDOC; \n        \n\n        \n          \n           terminal T_END_HEREDOC; \n        \n\n        \n          \n           terminal T_DOLLAR_OPEN_CURLY_BRACES; \n        \n\n        \n          \n           terminal T_CURLY_OPEN_WITH_DOLAR; \n        \n\n        \n          \n           terminal T_CURLY_OPEN; \n        \n\n        \n          \n           terminal T_CURLY_CLOSE; \n        \n\n        \n          \n           terminal T_PAAMAYIM_NEKUDOTAYIM; \n        \n\n        \n          \n           terminal String T_NAMESPACE; \n        \n\n        \n          \n           terminal String T_NS_C; \n        \n\n        \n          \n           terminal String T_DIR; \n        \n\n        \n          \n           terminal T_NS_SEPARATOR; \n        \n\n        \n          \n           terminal String T_VAR_COMMENT; \n        \n\n        \n          \n           terminal String T_DEFINE; \n        \n\n        \n          \n            \n        \n\n        \n          \n           terminal String T_INCLUDE,T_INCLUDE_ONCE,T_EVAL,T_REQUIRE,T_REQUIRE_ONCE; \n        \n\n        \n          \n           terminal T_COMMA; \n        \n\n        \n          \n           terminal String T_LOGICAL_OR,T_LOGICAL_XOR,T_LOGICAL_AND,T_PRINT; \n        \n\n        \n          \n           terminal T_EQUAL; \n        \n\n        \n          \n           terminal T_PLUS_EQUAL,T_MINUS_EQUAL,T_MUL_EQUAL,T_DIV_EQUAL,T_CONCAT_EQUAL,T_MOD_EQUAL,T_AND_EQUAL,T_OR_EQUAL,T_XOR_EQUAL,T_SL_EQUAL,T_SR_EQUAL; \n        \n\n        \n          \n           terminal T_QUESTION_MARK; \n        \n\n        \n          \n           terminal T_SEMICOLON; \n        \n\n        \n          \n           terminal T_BOOLEAN_OR, T_BOOLEAN_AND; \n        \n\n        \n          \n           terminal T_OR; \n        \n\n        \n          \n           terminal T_KOVA; \n        \n\n        \n          \n           terminal T_REFERENCE; \n        \n\n        \n          \n           terminal T_IS_EQUAL,T_IS_NOT_EQUAL,T_IS_IDENTICAL,T_IS_NOT_IDENTICAL; \n        \n\n        \n          \n           terminal T_IS_SMALLER_OR_EQUAL,T_IS_GREATER_OR_EQUAL; \n        \n\n        \n          \n           terminal T_SPACESHIP; \n        \n\n        \n          \n           terminal T_RGREATER; \n        \n\n        \n          \n           terminal T_LGREATER; \n        \n\n        \n          \n           terminal T_SL,T_SR; \n        \n\n        \n          \n           terminal T_PLUS; \n        \n\n        \n          \n           terminal T_MINUS; \n        \n\n        \n          \n           terminal T_TIMES; \n        \n\n        \n          \n           terminal T_DIV; \n        \n\n        \n          \n           terminal T_PRECENT; \n        \n\n        \n          \n           terminal T_NOT; \n        \n\n        \n          \n           terminal T_TILDA; \n        \n\n        \n          \n           terminal T_NEKUDA; \n        \n\n        \n          \n           terminal T_INC,T_DEC,T_INT_CAST,T_DOUBLE_CAST,T_STRING_CAST,T_ARRAY_CAST,T_OBJECT_CAST,T_BOOL_CAST,T_UNSET_CAST; \n        \n\n        \n          \n           terminal T_AT; \n        \n\n        \n          \n           terminal T_OPEN_RECT,T_CLOSE_RECT; \n        \n\n        \n          \n           terminal String T_NEW; \n        \n\n        \n          \n           terminal String T_ENDIF; \n        \n\n        \n          \n           terminal String T_ELSEIF; \n        \n\n        \n          \n           terminal String T_ELSE; \n        \n\n        \n          \n           terminal String T_STATIC, T_ABSTRACT, T_FINAL, T_PRIVATE, T_PROTECTED, T_PUBLIC; \n        \n\n        \n          \n           terminal T_OPEN_PARENTHESE,T_CLOSE_PARENTHESE; \n        \n\n        \n          \n           terminal T_NEKUDOTAIM; \n        \n\n        \n          \n           terminal T_DOLLAR; \n        \n\n        \n          \n           terminal T_QUATE,T_BACKQUATE; \n        \n\n        \n          \n           terminal T_START_NOWDOC, T_END_NOWDOC; \n        \n\n        \n          \n           terminal String T_TRAIT; \n        \n\n        \n          \n           terminal String T_INSTEADOF; \n        \n\n        \n          \n           terminal T_POW; \n        \n\n        \n          \n           terminal T_POW_EQUAL; \n        \n\n        \n          \n           terminal T_ELLIPSIS; \n        \n\n        \n          \n           terminal T_COALESCE; \n        \n\n        \n          \n           terminal T_COALESCE_EQUAL; \n        \n    \n  \n\n\ne.g.\n\n  \n    \n      netbeans/php/php.editor/tools/ASTPHP5Parser.cup\n    \n    \n        Lines 314 to 315\n      in\n      9d6b920\n    \n    \n    \n    \n\n        \n          \n           terminal T_OBJECT_OPERATOR; \n        \n\n        \n          \n           terminal T_NULLSAFE_OBJECT_OPERATOR;", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515463457", "createdAt": "2020-10-31T06:34:05Z", "author": {"login": "junichi11"}, "path": "php/php.editor/nbproject/org-netbeans-modules-php-editor.sig", "diffHunk": "@@ -1722,167 +1732,169 @@ hfds ZZ_ACTION,ZZ_ACTION_PACKED_0,ZZ_ATTRIBUTE,ZZ_ATTRIBUTE_PACKED_0,ZZ_BUFFERSI\n \n CLSS public abstract interface org.netbeans.modules.php.editor.parser.ASTPHP5Symbols\n fld public final static int EOF = 0\n-fld public final static int T_ABSTRACT = 143\n-fld public final static int T_AND_EQUAL = 95\n-fld public final static int T_ARRAY = 57\n-fld public final static int T_ARRAY_CAST = 131\n+fld public final static int T_ABSTRACT = 145", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjkwNw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyNDg3OnYy", "diffSide": "RIGHT", "path": "platform/autoupdate.services/nbproject/org-netbeans-modules-autoupdate-services.sig", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxNDo1OFrOHrkwvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxNDo1OFrOHrkwvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzExNw==", "bodyText": "Added as part of #2317 and btw. the support works: this week I managed to install old NBPython support into NetBeans 12.2beta2 running on JDK14.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453117", "createdAt": "2020-10-31T04:14:58Z", "author": {"login": "JaroslavTulach"}, "path": "platform/autoupdate.services/nbproject/org-netbeans-modules-autoupdate-services.sig", "diffHunk": "@@ -157,6 +158,7 @@ CLSS public final static !enum org.netbeans.api.autoupdate.OperationException$ER\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE ENABLE\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE INSTALL\n fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE INSTALLER\n+fld public final static org.netbeans.api.autoupdate.OperationException$ERROR_TYPE MISSING_UNPACK200", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyNjMxOnYy", "diffSide": "LEFT", "path": "platform/libs.testng/nbproject/org-netbeans-libs-testng.sig", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxNzozMVrOHrkxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxNzozMVrOHrkxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzI4NQ==", "bodyText": "There is unlikely much we could do about these 3rd party API removals than to accept them as fact.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453285", "createdAt": "2020-10-31T04:17:31Z", "author": {"login": "JaroslavTulach"}, "path": "platform/libs.testng/nbproject/org-netbeans-libs-testng.sig", "diffHunk": "@@ -1262,55 +1309,29 @@ meth public abstract !hasdefault java.lang.String[] dependsOnMethods()\n meth public abstract !hasdefault java.lang.String[] groups()\n meth public abstract !hasdefault long timeOut()\n \n-CLSS public abstract interface !annotation org.testng.annotations.Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 875}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyNjgyOnYy", "diffSide": "RIGHT", "path": "webcommon/javascript2.editor/nbproject/org-netbeans-modules-javascript2-editor.sig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoxOTowMFrOHrkxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzoyOFrOHrspew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzM0Ng==", "bodyText": "CCing @sdedic", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453346", "createdAt": "2020-10-31T04:19:00Z", "author": {"login": "JaroslavTulach"}, "path": "webcommon/javascript2.editor/nbproject/org-netbeans-modules-javascript2-editor.sig", "diffHunk": "@@ -122,6 +122,11 @@ CLSS public abstract interface static !annotation org.netbeans.modules.javascrip\n intf java.lang.annotation.Annotation\n meth public abstract !hasdefault int priority()\n \n+CLSS public abstract interface org.netbeans.modules.javascript2.editor.spi.CompletionProviderEx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjMzMQ==", "bodyText": "Should be OK, friend API exported to js2.html integration module.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515582331", "createdAt": "2020-11-01T06:33:28Z", "author": {"login": "sdedic"}, "path": "webcommon/javascript2.editor/nbproject/org-netbeans-modules-javascript2-editor.sig", "diffHunk": "@@ -122,6 +122,11 @@ CLSS public abstract interface static !annotation org.netbeans.modules.javascrip\n intf java.lang.annotation.Annotation\n meth public abstract !hasdefault int priority()\n \n+CLSS public abstract interface org.netbeans.modules.javascript2.editor.spi.CompletionProviderEx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzM0Ng=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyODE5OnYy", "diffSide": "RIGHT", "path": "cpplite/cpplite.editor/nbproject/org-netbeans-modules-cpplite-editor.sig", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyMDozM1rOHrkyNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyMDozM1rOHrkyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzQ5NQ==", "bodyText": "I guess ProjectConfiguration inner class shouldn't be part of API to begin with, @jlahoda?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453495", "createdAt": "2020-10-31T04:20:33Z", "author": {"login": "JaroslavTulach"}, "path": "cpplite/cpplite.editor/nbproject/org-netbeans-modules-cpplite-editor.sig", "diffHunk": "@@ -24,7 +24,9 @@ meth public abstract void removeChangeListener(javax.swing.event.ChangeListener)\n CLSS public static org.netbeans.modules.cpplite.editor.spi.CProjectConfigurationProvider$ProjectConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyOTUwOnYy", "diffSide": "RIGHT", "path": "extide/gradle/nbproject/org-netbeans-modules-gradle.sig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyMjowOVrOHrkyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDo0MDowOFrOHrk3-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY0Mw==", "bodyText": "Up to @lkishalmi to be satisfied with the new API.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453643", "createdAt": "2020-10-31T04:22:09Z", "author": {"login": "JaroslavTulach"}, "path": "extide/gradle/nbproject/org-netbeans-modules-gradle.sig", "diffHunk": "@@ -442,6 +442,39 @@ meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$Sta\n meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace[] values()\n supr java.lang.Enum<org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace>\n \n+CLSS public final org.netbeans.modules.gradle.api.execute.GradleDistributionManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NDk2OQ==", "bodyText": "Well, I am satisfied with that one.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515454969", "createdAt": "2020-10-31T04:40:08Z", "author": {"login": "lkishalmi"}, "path": "extide/gradle/nbproject/org-netbeans-modules-gradle.sig", "diffHunk": "@@ -442,6 +442,39 @@ meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$Sta\n meth public static org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace[] values()\n supr java.lang.Enum<org.netbeans.modules.gradle.api.execute.GradleCommandLine$StackTrace>\n \n+CLSS public final org.netbeans.modules.gradle.api.execute.GradleDistributionManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY0Mw=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcyOTc1OnYy", "diffSide": "RIGHT", "path": "ide/csl.api/nbproject/org-netbeans-modules-csl-api.sig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyMzowM1rOHrky7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozNzo1NFrOHrsrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY3OA==", "bodyText": "Result of @sdedic changes, I assume.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453678", "createdAt": "2020-10-31T04:23:03Z", "author": {"login": "JaroslavTulach"}, "path": "ide/csl.api/nbproject/org-netbeans-modules-csl-api.sig", "diffHunk": "@@ -807,14 +807,17 @@ hfds ADDED,MAX_KEEP,REMOVED,delta,editedEnd,edits,originalEnd,previous,start,tok\n hcls Edit\n \n CLSS public org.netbeans.modules.csl.api.EditList\n+cons public init(javax.swing.text.Document)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjcyOQ==", "bodyText": "OK, BaseDocument type deprecation in API.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515582729", "createdAt": "2020-11-01T06:37:54Z", "author": {"login": "sdedic"}, "path": "ide/csl.api/nbproject/org-netbeans-modules-csl-api.sig", "diffHunk": "@@ -807,14 +807,17 @@ hfds ADDED,MAX_KEEP,REMOVED,delta,editedEnd,edits,originalEnd,previous,start,tok\n hcls Edit\n \n CLSS public org.netbeans.modules.csl.api.EditList\n+cons public init(javax.swing.text.Document)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzY3OA=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTczMDk1OnYy", "diffSide": "RIGHT", "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDoyNDo0OVrOHrkzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzoyODoxMFrOHsOnnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg==", "bodyText": "Interesting. CCing @sdedic", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515453822", "createdAt": "2020-10-31T04:24:49Z", "author": {"login": "JaroslavTulach"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzE2Mw==", "bodyText": "@matthiasblaesing does the Flex acceptor need to be friend-public  ?", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583163", "createdAt": "2020-11-01T06:43:26Z", "author": {"login": "sdedic"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTczNQ==", "bodyText": "I don't know the whole history of the CSS Parser, but for two reasons I'm inclined to keep this as is:\na) the export is friend-only and all users are in-tree\nb) there is nothing special in TokenAcceptor$Flex that separates it from the other TokenAcceptors that are already exported. I see no benefit special casing this new instance.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515611735", "createdAt": "2020-11-01T11:47:43Z", "author": {"login": "matthiasblaesing"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgxNjI1Ng==", "bodyText": "ad (a): friend API only means that there's a chance to trace and update dependents when an API change is made, not a permission to extend API clutter (= add unnecessary stuff).\nad (b) there are at least 3 categories of TokenAcceptors; TokenImageAcceptor, NumberPostfixAcceptor, which serve as a base and +- could deserve to be public for possible extensions. Then there are Date, Integer, Number ... which might represent data types with possibly different handling in clients. And last, there are 'unit' acceptors, which do not interest anyone as they all represent a number. Your Flex additionl falls into the last category.\nThis API is awkward from its inception, because:\n\nACCEPTORS, ACCEPTORS_MAP can be modified externally, making each other and INSTANCES inconsistent. No such mutation is in place, but the API is open.\nno of the other 'terminal' unit classes are explicitly used anywhere else: there's no reason they should have ever been public/exported\n\nThat said, I do not see 'keeping consistency' as a value in this case. This new addition to the clutter was caught 'in time', before it is released, so the clutter increase could be simply avoided. Please make the class non public.\nFor the rest, I've filed NETBEANS-4977 - assigned to myself, so it does not take anyone's precious free time. I'd process the issue when more incompatible changes in web-friends accumulate.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515816256", "createdAt": "2020-11-02T08:46:37Z", "author": {"login": "sdedic"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzODkwOQ==", "bodyText": "I will not create a new PR right now. From my POV the only result is more potential for destabilisation and we are 5 days away. We are 5 days before release, I don't see benefit in rushing this in, given that the new issue will touch the whole structure anyway.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r516138909", "createdAt": "2020-11-02T17:28:10Z", "author": {"login": "matthiasblaesing"}, "path": "ide/css.lib/nbproject/org-netbeans-modules-css-lib.sig", "diffHunk": "@@ -1101,6 +1102,13 @@ meth protected java.util.List<java.lang.String> postfixes()\n supr org.netbeans.modules.css.lib.api.properties.TokenAcceptor$NumberPostfixAcceptor\n hfds POSTFIXES\n \n+CLSS public static org.netbeans.modules.css.lib.api.properties.TokenAcceptor$Flex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MzgyMg=="}, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgyNDk5OnYy", "diffSide": "RIGHT", "path": "ide/html.editor/nbproject/org-netbeans-modules-html-editor.sig", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0Njo0OFrOHrst4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0Njo0OFrOHrst4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzQ1OQ==", "bodyText": "This is deliberate - for unit tests to read HTML completion items.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583459", "createdAt": "2020-11-01T06:46:48Z", "author": {"login": "sdedic"}, "path": "ide/html.editor/nbproject/org-netbeans-modules-html-editor.sig", "diffHunk": "@@ -555,6 +556,7 @@ meth public java.lang.CharSequence getSortText()\n meth public java.lang.String getHelp()\n meth public java.lang.String getHelpId()\n meth public java.lang.String getItemText()\n+meth public java.lang.String toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgyNTY0OnYy", "diffSide": "RIGHT", "path": "ide/web.common/nbproject/org-netbeans-modules-web-common.sig", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0ODoxM1rOHrsuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0ODoxM1rOHrsuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzU0NA==", "bodyText": "OK, exported to JS/HTML.", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515583544", "createdAt": "2020-11-01T06:48:13Z", "author": {"login": "sdedic"}, "path": "ide/web.common/nbproject/org-netbeans-modules-web-common.sig", "diffHunk": "@@ -328,6 +328,7 @@ cons public init(java.util.Map<java.lang.String,?>)\n fld public final static java.lang.String MIMETYPE = \"mimeType\"\n meth public java.lang.Object value(java.lang.String)\n meth public java.util.Collection<java.lang.String> keys()\n+meth public static java.lang.String getContentMimeType(org.netbeans.modules.parsing.spi.Parser$Result,boolean)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgzMTMxOnYy", "diffSide": "RIGHT", "path": "platform/spi.quicksearch/nbproject/org-netbeans-spi-quicksearch.sig", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo1NDo1OFrOHrswrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo1NDo1OFrOHrswrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NDE3NQ==", "bodyText": "OK, introduced by #2298", "url": "https://github.com/apache/netbeans/pull/2504#discussion_r515584175", "createdAt": "2020-11-01T06:54:58Z", "author": {"login": "sdedic"}, "path": "platform/spi.quicksearch/nbproject/org-netbeans-spi-quicksearch.sig", "diffHunk": "@@ -29,6 +29,7 @@ meth public boolean addResult(java.lang.Runnable,java.lang.String)\n  anno 0 org.netbeans.api.annotations.common.CheckReturnValue()\n meth public boolean addResult(java.lang.Runnable,java.lang.String,java.lang.String,java.util.List<? extends javax.swing.KeyStroke>)\n  anno 0 org.netbeans.api.annotations.common.CheckReturnValue()\n+meth public boolean isObsolete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4af17a904c2e4cf8bd14f3edc20c209141f61bf"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 357, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}