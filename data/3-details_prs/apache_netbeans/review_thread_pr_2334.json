{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjQ5NDY2", "number": 2334, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMzo0MTozM1rOElfiiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxNjo0MFrOEqmIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzQ5NTEzOnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMzo0MTozM1rOHU_8Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDoxNFrOHVDezA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTE5MQ==", "bodyText": "plz avoid hardcoded path", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491781191", "createdAt": "2020-09-21T03:41:33Z", "author": {"login": "arusinha"}, "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "diffHunk": "@@ -721,6 +724,121 @@ public void testCopyPaste () throws Exception {\n         }\n     }\n \n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"import java.util.*;\"\n+                + \"class C{}\"\n+                + \"public class PC{}\"\n+                + \"interface I{}\"\n+                + \"enum En{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"class C{}\"\n+                    + \"public class PC{}\"\n+                    + \"interface I{}\"\n+                    + \"enum En{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_removeExistingPackageName() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-rm-package\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"package copy.paste     .\"\n+                + \"java\"\n+                + \";\"\n+                + \"import java.util.*;\"\n+                + \"public class PC{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"public class PC{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_CompilationErrorInCode() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-error\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTE4MA==", "bodyText": "addressed code review comments", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491839180", "createdAt": "2020-09-21T07:30:14Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "diffHunk": "@@ -721,6 +724,121 @@ public void testCopyPaste () throws Exception {\n         }\n     }\n \n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"import java.util.*;\"\n+                + \"class C{}\"\n+                + \"public class PC{}\"\n+                + \"interface I{}\"\n+                + \"enum En{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"class C{}\"\n+                    + \"public class PC{}\"\n+                    + \"interface I{}\"\n+                    + \"enum En{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_removeExistingPackageName() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-rm-package\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"package copy.paste     .\"\n+                + \"java\"\n+                + \";\"\n+                + \"import java.util.*;\"\n+                + \"public class PC{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"public class PC{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_CompilationErrorInCode() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-error\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTE5MQ=="}, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzQ5NTg3OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMzo0MjowNlrOHU_8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDoyMFrOHVDfEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTI5NA==", "bodyText": "plz avoid hardcoded path", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491781294", "createdAt": "2020-09-21T03:42:06Z", "author": {"login": "arusinha"}, "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "diffHunk": "@@ -721,6 +724,121 @@ public void testCopyPaste () throws Exception {\n         }\n     }\n \n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"import java.util.*;\"\n+                + \"class C{}\"\n+                + \"public class PC{}\"\n+                + \"interface I{}\"\n+                + \"enum En{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"class C{}\"\n+                    + \"public class PC{}\"\n+                    + \"interface I{}\"\n+                    + \"enum En{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_removeExistingPackageName() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-rm-package\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"package copy.paste     .\"\n+                + \"java\"\n+                + \";\"\n+                + \"import java.util.*;\"\n+                + \"public class PC{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"public class PC{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_CompilationErrorInCode() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-error\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +\n+                \"\\\"C:\\\\Program Files\\\\NB\\\\Community Edition 201.3803.71\\\\lib\\\\\");\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"Hello.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTI1MA==", "bodyText": "addressed code review comments", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491839250", "createdAt": "2020-09-21T07:30:20Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/test/unit/src/org/netbeans/spi/java/project/support/ui/PackageViewTest.java", "diffHunk": "@@ -721,6 +724,121 @@ public void testCopyPaste () throws Exception {\n         }\n     }\n \n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"import java.util.*;\"\n+                + \"class C{}\"\n+                + \"public class PC{}\"\n+                + \"interface I{}\"\n+                + \"enum En{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"class C{}\"\n+                    + \"public class PC{}\"\n+                    + \"interface I{}\"\n+                    + \"enum En{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_removeExistingPackageName() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-rm-package\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"package copy.paste     .\"\n+                + \"java\"\n+                + \";\"\n+                + \"import java.util.*;\"\n+                + \"public class PC{}\"\n+        );\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"PC.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"File contents\",\"import java.util.*;\"\n+                    + \"public class PC{}\",\n+                     files[0].asText());\n+        }\n+\n+         for (Node n : nodes[0].getChildren().getNodes(true)) {\n+            DataObject dobj = n.getLookup().lookup(DataObject.class);\n+            if (dobj != null) {\n+                dobj.delete();\n+            }\n+        }\n+\n+    }\n+\n+    @RandomlyFails\n+    public void testCopyPasteJavaFileFromClipboard_CompilationErrorInCode() throws Exception {\n+\n+        //Setup sourcegroups\n+        FileObject root1 = root.createFolder(\"paste-src-error\");\n+        SourceGroup group = new SimpleSourceGroup(root1);\n+        Node rn = PackageView.createPackageView(group);\n+        Node[] nodes = rn.getChildren().getNodes(true);\n+\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        StringSelection selection = new StringSelection(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +\n+                \"\\\"C:\\\\Program Files\\\\NB\\\\Community Edition 201.3803.71\\\\lib\\\\\");\n+        clipboard.setContents(selection, selection);\n+\n+        Transferable transferable = clipboard.getContents(selection);\n+        if (nodes.length > 0) {\n+            PasteType[] pts = nodes[0].getPasteTypes(transferable);\n+            pts[0].paste();\n+            FileObject[] files = nodes[0].getLookup().lookup(DataObject.class).getPrimaryFile().getChildren();\n+            assertEquals(\"File count\", 1, files.length);\n+            assertEquals(\"File name\", \"Hello.java\", files[0].getName() + \".\" + files[0].getExt());\n+            assertEquals(\"C:\\\\Program Files\\\\Java\\\\jdk-9.0.4\\\\bin\\\\ class Hello java.exe  \\\\\\\"-javaagent:\\\" +\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTI5NA=="}, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzQ5ODM3OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMzo0NDo0NVrOHU_-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDoyNVrOHVDfPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTY2OA==", "bodyText": "plz use //NOI18N for string literal. need to correct wherever used string literal", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491781668", "createdAt": "2020-09-21T03:44:45Z", "author": {"login": "arusinha"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\";\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\");\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\");\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\");\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\");\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) {\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) {\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {\n+        String packageRegex = oldPacageName.replace(\".\", \"\\\\s*.\\\\s*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTI5Mg==", "bodyText": "addressed code review comments", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r491839292", "createdAt": "2020-09-21T07:30:25Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\";\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\");\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\");\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\");\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\");\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) {\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) {\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {\n+        String packageRegex = oldPacageName.replace(\".\", \"\\\\s*.\\\\s*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4MTY2OA=="}, "originalCommit": {"oid": "13d34cb114e41043c061f06ac9b834d540af2397"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk2ODA3OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzowNDoyMFrOHc4jlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1OToyNVrOHd3tZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODc5MA==", "bodyText": "It would be better to use DialogDisplayer.notify(Later) instead of JOptionPane (on all places):\nhttps://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/DialogDisplayer.html#notifyLater-org.openide.NotifyDescriptor-\n(+something like @NbBundle.Messages(\"ERR_NotValidClass=Code is not a valid class\") and Bundle.ERR_NotValidClass().", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500048790", "createdAt": "2020-10-06T07:04:20Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MzQ5NA==", "bodyText": "Addressed code comment.\nUsed  @NbBundle.Messages({\n\"ERR_NotValidClass=Code is not a valid class\",\n\"ERR_ClassAlreadyPresent=Class {0} already present\",\n\"ERR_UnableToCreateFile=Unable to create file {0}\",}) for message bundling.\nand  DialogDisplayer.getDefault().notifyLater(notifyMsg); for displaying error dialog.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501083494", "createdAt": "2020-10-07T14:59:25Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODc5MA=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk3NDI0OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzowNjozMlrOHc4nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowMTowN1rOHd3yqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0OTgyMg==", "bodyText": "I think this class can be removed, see below. Please note that CompilationInfo is only valid while the task is running, and \"exporting\" it outside of the task is likely to lead to bad effects.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500049822", "createdAt": "2020-10-06T07:06:32Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4NDg0MQ==", "bodyText": "Addressed.\nRemoved this class DeadlockTask .", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501084841", "createdAt": "2020-10-07T15:01:07Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0OTgyMg=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk3NzczOnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzowNzo0OFrOHc4pyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowMzoxMlrOHd34rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MDM3Nw==", "bodyText": "Not sure if the file manager is needed here (passing null to getTask instead of a file manager should be fine). But if yes, please wrap it with try-with-resources, so that it is guaranteed to be closed.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500050377", "createdAt": "2020-10-06T07:07:48Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4NjM4MA==", "bodyText": "Addressed.\nYou are correct file manager is not needed in this case. So removed file manager passed null in compiler.getTask.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501086380", "createdAt": "2020-10-07T15:03:12Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MDM3Nw=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk4Mzg1OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMDowM1rOHc4t0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowMzo1MVrOHd36mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MTQxMA==", "bodyText": "Please check this work both with and without nb-javac (there are some special cases for nb-javac, so to be sure).", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500051410", "createdAt": "2020-10-06T07:10:03Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4Njg3NQ==", "bodyText": "Addressed.\nVerified with and without nb-javac, working as expected.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501086875", "createdAt": "2020-10-07T15:03:51Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MTQxMA=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk4NDY2OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMDoyMlrOHc4uUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNDo1MVrOHd39xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MTUzOA==", "bodyText": "What exceptions are expected here?", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500051538", "createdAt": "2020-10-06T07:10:22Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4NzY4Ng==", "bodyText": "Expecting IOExection here, changed this to IOException.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501087686", "createdAt": "2020-10-07T15:04:51Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MTUzOA=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk5MDU4OnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMjoxMlrOHc4x0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNzowOVrOHd4E-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MjQzMg==", "bodyText": "I think I would rather record the start and end offset of the package clause in ClassContent, and removed it based on the offsets. Especially given we have access to the AST above, should be easier than trying to setup a regexp.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500052432", "createdAt": "2020-10-06T07:12:12Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4OTUzMA==", "bodyText": "Comment Addressed.\nGetting start and end offset of package using below:\nJavaCompiler.CompilationTask task = compiler.getTask(null, null, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\nSourcePositions sourcePositions = Trees.instance(task).getSourcePositions();\nfor (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\npackageStartOffset = sourcePositions.getStartPosition(compilationUnitTree, compilationUnitTree.getPackage());\npackageEndOffset = sourcePositions.getEndPosition(compilationUnitTree, compilationUnitTree.getPackage());", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501089530", "createdAt": "2020-10-07T15:07:09Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MjQzMg=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTAwNDkwOnYy", "diffSide": "RIGHT", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxNjo0MFrOHc46tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxMTozNlrOHd4SKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1NDcwOA==", "bodyText": "Running a task seems unnecessarily complex and slow. If I read this correctly, the goal is to get the source ClassPath. There are multiple ways to achieve that:\n-ClassPath.getClassPath(ClassPath.SOURCE, data) //watch for null as a result, treat as ClassPath.EMPTY.\n-ClasspathInfo.create(data).getClassPath(...SOURCE)\n-js.getClasspathInfo()\nThe first is likely to be the fastest in this context.", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r500054708", "createdAt": "2020-10-06T07:16:40Z", "author": {"login": "lahodaj"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {\n+        String packageRegex = oldPacageName.replace(\".\", \"\\\\s*.\\\\s*\"); //NOI18N\n+        packageRegex = \"package\\\\s+\" + packageRegex + \"\\\\s*;\"; //NOI18N\n+        Pattern p = Pattern.compile(packageRegex);\n+\n+        Matcher m = p.matcher(copiedCode);\n+        StringBuffer sb = new StringBuffer();\n+        if (m.find()) {\n+            m.appendReplacement(sb, \"\"); //NOI18N\n+        }\n+\n+        m.appendTail(sb);\n+        return sb.toString();\n+    }\n+\n+    private String getPackageNameFromFile(File fileName) {\n+        String packageLocation = null;\n+        try {\n+            FileObject data = FileUtil.createData(fileName);\n+            JavaSource js = JavaSource.forFileObject(data);\n+\n+            final DeadlockTask bt = new DeadlockTask(JavaSource.Phase.RESOLVED);\n+            js.runUserActionTask(bt, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MjkwNA==", "bodyText": "Comment addressed!\nRemoved the previously written code for getting class path and use the suggested one : ** ClassPath.getClassPath(data, ClassPath.SOURCE);**", "url": "https://github.com/apache/netbeans/pull/2334#discussion_r501092904", "createdAt": "2020-10-07T15:11:36Z", "author": {"login": "singh-akhilesh"}, "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateJavaClassFileFromClipboard.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.swing.JOptionPane;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationController;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.Task;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.loaders.DataFolder;\n+import org.openide.util.Exceptions;\n+import org.openide.util.datatransfer.PasteType;\n+\n+/**\n+ *\n+ * @author aksinsin\n+ */\n+public class CreateJavaClassFileFromClipboard extends PasteType {\n+    \n+    private static final String PUBLIC_MODIFIER = \"public\"; //NOI18N\n+\n+    private final DataFolder context;\n+    private final Transferable t;\n+\n+    public CreateJavaClassFileFromClipboard(DataFolder context, Transferable t) {\n+        this.context = context;\n+        this.t = t;\n+    }\n+\n+    @Override\n+    public Transferable paste() throws IOException {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if (!c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+                return t;\n+            }\n+            String copiedData = (String) c.getData(DataFlavor.stringFlavor);\n+            CreateJavaClassFileFromClipboard.ClassContent classContent = extractPackageAndClassName(copiedData);\n+            if (classContent == null) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\"); //NOI18N\n+                return t;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return t;\n+            }\n+            String path = files.iterator().next().getPath();\n+            File fileName = new File(path + File.separator + classContent.getClassName() + \".java\"); //NOI18N\n+            if (fileName.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create class already present\"); //NOI18N\n+                return t;\n+            }\n+            if (!fileName.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Cannot create file\"); //NOI18N\n+                return t;\n+            }\n+\n+            if (classContent.getPackageName() != null) {\n+                copiedData = removePackage(copiedData, classContent.getPackageName());\n+            }\n+            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {\n+                String packageLocation = getPackageNameFromFile(fileName);\n+                if (packageLocation != null && !packageLocation.isEmpty()) {\n+                    copiedData = \"package \" + packageLocation + \";\\n\" + copiedData;// NOI18N\n+                }\n+                bw.write(copiedData);\n+            }\n+\n+        } catch (UnsupportedFlavorException ex) {\n+            Exceptions.printStackTrace(ex);\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+        return t;\n+    }\n+    \n+    \n+     private static class DeadlockTask implements Task<CompilationController> {\n+\n+        JavaSource.Phase phase;\n+        CompilationInfo info;\n+\n+        public DeadlockTask(JavaSource.Phase phase) {\n+            assert phase != null;\n+            this.phase = phase;\n+        }\n+\n+        public void run(CompilationController info) {\n+            try {\n+                info.toPhase(this.phase);\n+                this.info = info;\n+            } catch (IOException ioe) {\n+            }\n+        }\n+\n+    }\n+\n+    private ClassContent extractPackageAndClassName(String copiedData) {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n+\n+        String publicFirstClassName = null;\n+        String nonPublicFirstClassName = null;\n+        String packageName = null;\n+        int counter = 0;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(new MyFileObject(copiedData)));\n+        parse:\n+        try {\n+            for (CompilationUnitTree compilationUnitTree : ((JavacTask) task).parse()) {\n+                packageName = compilationUnitTree.getPackageName() != null\n+                        ? compilationUnitTree.getPackageName().toString() : null;\n+                for (Tree tree : compilationUnitTree.getTypeDecls()) {\n+                    if (tree instanceof ClassTree) {\n+                        final ClassTree classTree = (ClassTree) tree;\n+                        if (classTree.toString().trim().startsWith(PUBLIC_MODIFIER)) {\n+                            publicFirstClassName = classTree.getSimpleName().toString();\n+                            break parse;\n+                        }\n+                        if (counter == 0) {\n+                            nonPublicFirstClassName = classTree.getSimpleName().toString();\n+                            counter++;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Exceptions.printStackTrace(ex);\n+        } finally {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+\n+        if (publicFirstClassName != null && !publicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(publicFirstClassName, packageName);\n+        } else if (nonPublicFirstClassName != null && !nonPublicFirstClassName.equals(\"<error>\")) { //NOI18N\n+            return new ClassContent(nonPublicFirstClassName, packageName);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    private String removePackage(String copiedCode, String oldPacageName) {\n+        String packageRegex = oldPacageName.replace(\".\", \"\\\\s*.\\\\s*\"); //NOI18N\n+        packageRegex = \"package\\\\s+\" + packageRegex + \"\\\\s*;\"; //NOI18N\n+        Pattern p = Pattern.compile(packageRegex);\n+\n+        Matcher m = p.matcher(copiedCode);\n+        StringBuffer sb = new StringBuffer();\n+        if (m.find()) {\n+            m.appendReplacement(sb, \"\"); //NOI18N\n+        }\n+\n+        m.appendTail(sb);\n+        return sb.toString();\n+    }\n+\n+    private String getPackageNameFromFile(File fileName) {\n+        String packageLocation = null;\n+        try {\n+            FileObject data = FileUtil.createData(fileName);\n+            JavaSource js = JavaSource.forFileObject(data);\n+\n+            final DeadlockTask bt = new DeadlockTask(JavaSource.Phase.RESOLVED);\n+            js.runUserActionTask(bt, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1NDcwOA=="}, "originalCommit": {"oid": "962aca488a3965d2b1ad1e0b475be1033d28489e"}, "originalPosition": 211}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 395, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}