{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjE4OTM0", "number": 2601, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjoyNjo1NFrOFGSANg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjoyNjo1NFrOFGSANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTMwNzQyOnYy", "diffSide": "RIGHT", "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjoyNjo1NFrOIHN8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxODoyOVrOIHQWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzOTM0NA==", "bodyText": "Isn't this test too JDK specific? What if the wording of the Javadoc changes between the various JDKs? Then the test would fail.\nIt might be safer to create own class with Javadoc and test against it. That one would be stable.", "url": "https://github.com/apache/netbeans/pull/2601#discussion_r544439344", "createdAt": "2020-12-16T16:26:54Z", "author": {"login": "JaroslavTulach"}, "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java", "diffHunk": "@@ -888,6 +891,73 @@ public void logMessage(MessageParams arg0) {\n                          \"<none>:1:26-1:29\", \"<none>:2:12-2:15\", \"<none>:3:17-3:20\");\n     }\n \n+    public void testHover() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        String code = \"public class Test {\\n\" +\n+                      \"    public static void main(String[] args) {\\n\" +\n+                      \"        System.out.println(\\\"Hello World!\\\");\\n\" +\n+                      \"    }\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        FileUtil.refreshFor(getWorkDir());\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams arg0) {\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeResult result = server.initialize(new InitializeParams()).get();\n+        assertTrue(result.getCapabilities().getHoverProvider());\n+        Hover hover = server.getTextDocumentService().hover(new HoverParams(new TextDocumentIdentifier(toURI(src)), new Position(2, 10))).get();\n+        assertNotNull(hover);\n+        assertTrue(hover.getContents().isRight());\n+        MarkupContent content = hover.getContents().getRight();\n+        assertNotNull(content);\n+        assertEquals(content.getKind(), \"markdown\");\n+        assertEquals(content.getValue(), \"**[java.\u200blang](*0)**\\n\" +\n+                \"\\n\" +\n+                \"```\\n\" +\n+                \"public final class System\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7448a1a68f8d432cc8920f36935cadf9049cdbbf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3ODg1NA==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/apache/netbeans/pull/2601#discussion_r544478854", "createdAt": "2020-12-16T17:18:29Z", "author": {"login": "dbalek"}, "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java", "diffHunk": "@@ -888,6 +891,73 @@ public void logMessage(MessageParams arg0) {\n                          \"<none>:1:26-1:29\", \"<none>:2:12-2:15\", \"<none>:3:17-3:20\");\n     }\n \n+    public void testHover() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        String code = \"public class Test {\\n\" +\n+                      \"    public static void main(String[] args) {\\n\" +\n+                      \"        System.out.println(\\\"Hello World!\\\");\\n\" +\n+                      \"    }\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        FileUtil.refreshFor(getWorkDir());\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams arg0) {\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeResult result = server.initialize(new InitializeParams()).get();\n+        assertTrue(result.getCapabilities().getHoverProvider());\n+        Hover hover = server.getTextDocumentService().hover(new HoverParams(new TextDocumentIdentifier(toURI(src)), new Position(2, 10))).get();\n+        assertNotNull(hover);\n+        assertTrue(hover.getContents().isRight());\n+        MarkupContent content = hover.getContents().getRight();\n+        assertNotNull(content);\n+        assertEquals(content.getKind(), \"markdown\");\n+        assertEquals(content.getValue(), \"**[java.\u200blang](*0)**\\n\" +\n+                \"\\n\" +\n+                \"```\\n\" +\n+                \"public final class System\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzOTM0NA=="}, "originalCommit": {"oid": "7448a1a68f8d432cc8920f36935cadf9049cdbbf"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 287, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}