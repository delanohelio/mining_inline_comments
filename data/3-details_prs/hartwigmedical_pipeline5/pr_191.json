{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MTM1Njkw", "number": 191, "title": "DEV-1478 Run from persisted data given a starting point", "bodyText": "Adds the ability to specify a starting point to the pipeline. The starting point can be\neither alignment, calling or purple complete. Each starting point builds off the last,\nso purple complete is the union of all 3.\nFor each stage which can use persistent data, there is a PersistedXxx implementation.\nThese classes contain the knowledge of the location of the output files for outputs\ncreated with this same version of the pipeline.\nIt works by using the exists \"skipping\" mechanism, but enriching the skipped output\nwith the actual location in google storage.\nThe remaining \"OutputStorage\" classes which used to poll for metrics and germline data\nfrom the single sample pipelines are replaced with queues to avoid any duplication with\nthe persisted implementations.\nThe SomaticPipeline is also changed to take an AlignmentPair as input, rather than looking it up via the\nstorage. This allows us to pass either the \"live\" alignment or a stored one without any awareness\nin the pipeline.\nCram is also supported, but still need to test. Not sure if all tools can work directly with a cram\nwithout additional arguments.", "createdAt": "2020-09-02T20:04:05Z", "url": "https://github.com/hartwigmedical/pipeline5/pull/191", "merged": true, "mergeCommit": {"oid": "7b635ca535e27465818fd7e3c6e94177ffb310b3"}, "closed": true, "closedAt": "2020-09-08T17:33:58Z", "author": {"login": "pauldwolfe"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFBpqUAH2gAyNDc4MTM1NjkwOjNlZTEwMzg4NDJlN2U3YzAwYmNhOWNkODI2OWZlMTI0ZTY5ZjVkNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG7HW6gH2gAyNDc4MTM1NjkwOmI5NjczMmM0NThkY2EzYWU3YWI2NGM0Yzc0YTdlZTU0OGRjYmZhMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ee1038842e7e7c00bca9cd8269fe124e69f5d67", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/3ee1038842e7e7c00bca9cd8269fe124e69f5d67", "committedDate": "2020-09-02T20:02:16Z", "message": "DEV-1478 Run from persisted alignment data (WIP)\n\nFirst step in re-running from any stage is to re-run from alignment. This was kind of supported\nin the past with \"AlignmentOutputStorage\" but this approach prescribed a fix location in the\nruntime bucket for the bams and could not support crams.\n\nThe new way hopefully is a nice template for the rest, which introduces a new interface for the\naligner, with a new persistent implementation. The new PersistedAlignment will look for the\nexisting alignment in the output bucket and use these files in place as the input for subsequent\nstages.\n\nThis involved various refactoring to support. First, superficially needed to change the name of the\n\"VmAligner\" to BwaAligner to more accurately describe its specificity.\n\nThe SomaticPipeline is changed to take an AlignmentPair as input, rather than looking it up via the\nstorage. This allows us to pass either the \"live\" alignment or a stored one without any awareness\nin the pipeline.\n\nCram is also supported, but still need to test. Not sure if all tools can work directly with a cram\nwithout additional arguments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzc3ODA5", "url": "https://github.com/hartwigmedical/pipeline5/pull/191#pullrequestreview-481377809", "createdAt": "2020-09-02T23:20:56Z", "commit": {"oid": "3ee1038842e7e7c00bca9cd8269fe124e69f5d67"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMDo1NlrOHMPK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozNTowMVrOHMPkWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MzUyOQ==", "bodyText": "Feels to me like run is a bit overloaded already. Could we use another verb? Like begin or start or restart?", "url": "https://github.com/hartwigmedical/pipeline5/pull/191#discussion_r482593529", "createdAt": "2020-09-02T23:20:56Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/Arguments.java", "diffHunk": "@@ -11,6 +11,8 @@\n \n     String EMPTY = \"\";\n \n+    Optional<String> runFrom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1038842e7e7c00bca9cd8269fe124e69f5d67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMDAyNQ==", "bodyText": "Could we have found a case where a TODO annotation would actually be worthwhile?", "url": "https://github.com/hartwigmedical/pipeline5/pull/191#discussion_r482600025", "createdAt": "2020-09-02T23:35:01Z", "author": {"login": "nedleitch"}, "path": "cluster/src/test/java/com/hartwig/pipeline/SingleSamplePipelineTest.java", "diffHunk": "@@ -1,62 +1,18 @@\n package com.hartwig.pipeline;\n \n-import static com.hartwig.pipeline.testsupport.TestInputs.cramOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.flagstatOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.germlineCallerOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.referenceAlignmentOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.referenceMetricsOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.referenceRunMetadata;\n-import static com.hartwig.pipeline.testsupport.TestInputs.referenceSample;\n-import static com.hartwig.pipeline.testsupport.TestInputs.snpGenotypeOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.tumorAlignmentOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.tumorMetricsOutput;\n-import static com.hartwig.pipeline.testsupport.TestInputs.tumorRunMetadata;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.concurrent.Executors;\n-\n-import com.google.cloud.storage.Bucket;\n-import com.google.cloud.storage.Storage;\n-import com.hartwig.pipeline.alignment.AlignmentOutput;\n-import com.hartwig.pipeline.alignment.vm.VmAligner;\n-import com.hartwig.pipeline.calling.germline.GermlineCallerOutput;\n-import com.hartwig.pipeline.cram.CramOutput;\n-import com.hartwig.pipeline.execution.PipelineStatus;\n-import com.hartwig.pipeline.flagstat.FlagstatOutput;\n-import com.hartwig.pipeline.metadata.SingleSampleEventListener;\n-import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n-import com.hartwig.pipeline.metrics.BamMetricsOutput;\n-import com.hartwig.pipeline.report.PipelineResults;\n-import com.hartwig.pipeline.report.PipelineResultsProvider;\n-import com.hartwig.pipeline.report.ReportComponent;\n-import com.hartwig.pipeline.snpgenotype.SnpGenotypeOutput;\n-import com.hartwig.pipeline.stages.StageRunner;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n public class SingleSamplePipelineTest {\n \n-    private static final Arguments ARGUMENTS = Arguments.testDefaults();\n+/*    private static final Arguments ARGUMENTS = Arguments.testDefaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1038842e7e7c00bca9cd8269fe124e69f5d67"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b616cea925aa60e9f1b7bb1749a4b2bf48db0ace", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/b616cea925aa60e9f1b7bb1749a4b2bf48db0ace", "committedDate": "2020-09-04T17:42:21Z", "message": "DEV-1478 Run from various starting points\n\nAdds the ability to specify a starting point to the pipeline. The starting point can be\neither alignment, calling or purple complete. Each starting point builds off the last,\nso purple complete is the union of all 3.\n\nFor each stage which can use persistent data, there is a PersistedXxx implementation.\nThese classes contain the knowledge of the location of the output files for outputs\ncreated with this same version of the pipeline.\n\nIt works by using the exists \"skipping\" mechanism, but enriching the skipped output\nwith the actual location in google storage.\n\nThe remaining \"OutputStorage\" classes which used to poll for metrics and germline data\nfrom the single sample pipelines are replaced with queues to avoid any duplication with\nthe persisted implementations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6cb0c38c622d999a71646dae23b3d8921e4ef8c", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/f6cb0c38c622d999a71646dae23b3d8921e4ef8c", "committedDate": "2020-09-04T19:18:51Z", "message": "DEV-1478 Run from various starting points\n\nAdds the ability to specify a starting point to the pipeline. The starting point can be\neither alignment, calling or purple complete. Each starting point builds off the last,\nso purple complete is the union of all 3.\n\nFor each stage which can use persistent data, there is a PersistedXxx implementation.\nThese classes contain the knowledge of the location of the output files for outputs\ncreated with this same version of the pipeline.\n\nIt works by using the exists \"skipping\" mechanism, but enriching the skipped output\nwith the actual location in google storage.\n\nThe remaining \"OutputStorage\" classes which used to poll for metrics and germline data\nfrom the single sample pipelines are replaced with queues to avoid any duplication with\nthe persisted implementations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8fc2298587b842d7c539dad6a3b6bd8cd2ae1e4", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/a8fc2298587b842d7c539dad6a3b6bd8cd2ae1e4", "committedDate": "2020-09-07T19:49:06Z", "message": "DEV-1478 Added persisted output to the stage interface\n\nThis allows us to keep all the output definitions together, and remove\nthe decorators keeping everything a bit simpler. Still minimal changes\nto the stage runner and no changes to existing stages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTM2ODM2", "url": "https://github.com/hartwigmedical/pipeline5/pull/191#pullrequestreview-484136836", "createdAt": "2020-09-08T13:25:55Z", "commit": {"oid": "f6cb0c38c622d999a71646dae23b3d8921e4ef8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18d560108bb8ebee9048d5eb43edacb33e4f6ad8", "author": {"user": {"login": "pauldwolfe", "name": null}}, "url": "https://github.com/hartwigmedical/pipeline5/commit/18d560108bb8ebee9048d5eb43edacb33e4f6ad8", "committedDate": "2020-09-08T16:58:01Z", "message": "Merge pull request #193 from hartwigmedical/DEV-1478-nodecorator\n\nDEV-1478 Added persisted output to the stage interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba3238f0153c5e59ad04d3067ca040f5278e2119", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/ba3238f0153c5e59ad04d3067ca040f5278e2119", "committedDate": "2020-09-08T17:25:11Z", "message": "DEV-1478 Add tests for refactored stage interface\n\nAdd a new abstract test template to test for the persisted stages and remove\nthe old decorator tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b96732c458dca3ae7ab64c4c74a7ee548dcbfa12", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/b96732c458dca3ae7ab64c4c74a7ee548dcbfa12", "committedDate": "2020-09-08T17:33:13Z", "message": "DEV-1478 Merge with master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}