{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTI4MjQ4", "number": 130, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNTo1OFrODh2Z7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjo0Mzo0OVrODiF__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIwOTc0OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNTo1OFrOFs0IIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjoyMDoxNlrOFtQaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA==", "bodyText": "I think the Substage interface would work well for this", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382535714", "createdAt": "2020-02-21T11:35:58Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n+import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.JavaClassCommand;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.tools.Versions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramAndValidateCommands {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTE4MA==", "bodyText": "Still do :)", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925180", "createdAt": "2020-02-22T16:41:39Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n+import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.JavaClassCommand;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.tools.Versions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramAndValidateCommands {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTgwMQ==", "bodyText": "Sorry wasn't ignoring this suggestion, just forgot. But now that I look more closely at it, I'd have to do some gymnastics to use the substages from the batch side because it doesn't really care about samples (it deals generically with input files) and I'm not sure whether it's worth the effort. For the pipeline invocation it makes more sense but not sure whether that's compelling by itself.", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382965801", "createdAt": "2020-02-23T05:30:07Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n+import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.JavaClassCommand;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.tools.Versions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramAndValidateCommands {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5OTE3OQ==", "bodyText": "I don't think it would be too hard to remove the references to samples, but also fine to leave this for now and make that a part of another separate refactoring task.", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382999179", "createdAt": "2020-02-23T12:20:16Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n+import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.JavaClassCommand;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.tools.Versions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramAndValidateCommands {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIxMzcyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNzo0OFrOFs0KsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0NDo0MlrOFs3TGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA==", "bodyText": "I see we add the CRAM here to the final output I guess we want to remove the BAM from the aligner report components as well?", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536368", "createdAt": "2020-02-21T11:37:48Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjU4OA==", "bodyText": "Or maybe you were thinking we persist both to start?", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536588", "createdAt": "2020-02-21T11:38:22Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA=="}, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NzY3Mg==", "bodyText": "I was. But maybe that's overly cautious and not really beneficial.", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382587672", "createdAt": "2020-02-21T13:44:42Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA=="}, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIxNjk1OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozOToxM1rOFs0MuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozOToxM1rOFs0MuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjg4OA==", "bodyText": "I think we should have an option to enable/disable this feature", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536888", "createdAt": "2020-02-21T11:39:13Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(\n+                        new RunLogComponent(bucket, NAMESPACE, folder, resultsDirectory),\n+                        new StartupScriptComponent(bucket, NAMESPACE, folder),\n+                        new SingleFileComponent(bucket, NAMESPACE, folder, cram, cram, resultsDirectory),\n+                        new SingleFileComponent(bucket, NAMESPACE, folder, crai, crai, resultsDirectory))\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput skippedOutput(SingleSampleRunMetadata metadata) {\n+        throw new IllegalStateException(\"CRAM conversion cannot be skipped.\");\n+    }\n+\n+    @Override\n+    public boolean shouldRun(Arguments arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDc2MzA3OnYy", "diffSide": "RIGHT", "path": "batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjo0MDozNlrOFtL5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwNToyNzozOVrOFtOXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTA5MQ==", "bodyText": "Rename to SamtoolsBamToCram?", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925091", "createdAt": "2020-02-22T16:40:36Z", "author": {"login": "pauldwolfe"}, "path": "batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java", "diffHunk": "@@ -1,53 +1,41 @@\n package com.hartwig.batch.operations;\n \n-import java.io.File;\n-\n import com.hartwig.batch.BatchOperation;\n import com.hartwig.batch.input.InputBundle;\n import com.hartwig.batch.input.InputFileDescriptor;\n import com.hartwig.pipeline.ResultsDirectory;\n-import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n-import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.cram.CramAndValidateCommands;\n import com.hartwig.pipeline.execution.vm.BashStartupScript;\n import com.hartwig.pipeline.execution.vm.OutputUpload;\n import com.hartwig.pipeline.execution.vm.RuntimeFiles;\n import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n import com.hartwig.pipeline.execution.vm.VmDirectories;\n-import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.execution.vm.unix.MvCommand;\n import com.hartwig.pipeline.storage.GoogleStorageLocation;\n import com.hartwig.pipeline.storage.RuntimeBucket;\n-import com.hartwig.pipeline.tools.Versions;\n+\n+import java.io.File;\n+\n+import static java.lang.String.format;\n \n public class SamtoolsCramToBam implements BatchOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b162bd213afae3c6c5497a74ab65b5c8c1f758"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY5NQ==", "bodyText": "Good call. Not sure why this was named this way to start with.", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382965695", "createdAt": "2020-02-23T05:27:39Z", "author": {"login": "nedleitch"}, "path": "batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java", "diffHunk": "@@ -1,53 +1,41 @@\n package com.hartwig.batch.operations;\n \n-import java.io.File;\n-\n import com.hartwig.batch.BatchOperation;\n import com.hartwig.batch.input.InputBundle;\n import com.hartwig.batch.input.InputFileDescriptor;\n import com.hartwig.pipeline.ResultsDirectory;\n-import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n-import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.cram.CramAndValidateCommands;\n import com.hartwig.pipeline.execution.vm.BashStartupScript;\n import com.hartwig.pipeline.execution.vm.OutputUpload;\n import com.hartwig.pipeline.execution.vm.RuntimeFiles;\n import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n import com.hartwig.pipeline.execution.vm.VmDirectories;\n-import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.execution.vm.unix.MvCommand;\n import com.hartwig.pipeline.storage.GoogleStorageLocation;\n import com.hartwig.pipeline.storage.RuntimeBucket;\n-import com.hartwig.pipeline.tools.Versions;\n+\n+import java.io.File;\n+\n+import static java.lang.String.format;\n \n public class SamtoolsCramToBam implements BatchOperation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTA5MQ=="}, "originalCommit": {"oid": "75b162bd213afae3c6c5497a74ab65b5c8c1f758"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDc2NDc4OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjo0Mzo0OVrOFtL6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjo0Mzo0OVrOFtL6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTMxNA==", "bodyText": "0.1 implies its not ready for production, would suggest we use 1.0 once its validated (which I think it sort of is by Korneel)", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925314", "createdAt": "2020-02-22T16:43:49Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java", "diffHunk": "@@ -30,6 +30,7 @@\n     String CHORD = \"60.02_1.03\";\n     String SAMTOOLS = \"1.9\";\n     String BCL2FASTQ = \"2.20.0.422\";\n+    String BAMCOMP = \"0.1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b162bd213afae3c6c5497a74ab65b5c8c1f758"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1646, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}