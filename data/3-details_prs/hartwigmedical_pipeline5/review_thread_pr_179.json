{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjI1MDEx", "number": 179, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MDozNVrOET6X3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxMDo1NVrOEUF98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzE0NzgwOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MDozNVrOG56YHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MDozNVrOG56YHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODQ2MQ==", "bodyText": "I wonder in retrospect whether the three-argument version of withDelay might be more appropriate (provide a min and max delay and it will choose a random time between them). I think it's more readable too (and you could do without the constant - just use 5 and specify minutes instead of seconds).", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463378461", "createdAt": "2020-07-31T02:50:35Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -128,21 +131,23 @@ private Operation executeSynchronously(ComputeRequest<Operation> request, String\n                 Thread.currentThread().interrupt();\n             }\n         }\n-        return executeWithRetries(() -> compute.zoneOperations().get(projectName, zoneName, asyncOp.getName()).execute());\n+        return executeWithRetries(() -> compute.zoneOperations().get(projectName, zoneName, asyncOp.getName()).execute(),\n+                IOException.class);\n     }\n \n-    private Operation executeWithRetries(final CheckedSupplier<Operation> operationCheckedSupplier) {\n-        return Failsafe.with(new RetryPolicy<>().handle(IOException.class).withDelay(Duration.ofSeconds(pollInterval)).withMaxRetries(5))\n+    private <T> T executeWithRetries(final CheckedSupplier<T> operationCheckedSupplier, final Class<? extends Exception> exception) {\n+        return Failsafe.with(new RetryPolicy<>().handle(exception)\n+                .withBackoff(pollInterval, FIVE_MINUTES, ChronoUnit.SECONDS, new Random().nextInt(pollInterval)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd5b90c729d9a04bc3a50e9a676975697c4793"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzE0ODM3OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MDo1NFrOG56YcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo0NjozNVrOG6LPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODU0NA==", "bodyText": "This is 10 minutes :)", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463378544", "createdAt": "2020-07-31T02:50:54Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -28,6 +30,7 @@\n class InstanceLifecycleManager {\n     private static final String RUNNING_STATUS = \"RUNNING\";\n     private static final Logger LOGGER = LoggerFactory.getLogger(InstanceLifecycleManager.class);\n+    public static final int FIVE_MINUTES = 600;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd5b90c729d9a04bc3a50e9a676975697c4793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1NDgyNQ==", "bodyText": "toucher", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463654825", "createdAt": "2020-07-31T14:46:35Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -28,6 +30,7 @@\n class InstanceLifecycleManager {\n     private static final String RUNNING_STATUS = \"RUNNING\";\n     private static final Logger LOGGER = LoggerFactory.getLogger(InstanceLifecycleManager.class);\n+    public static final int FIVE_MINUTES = 600;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODU0NA=="}, "originalCommit": {"oid": "21cd5b90c729d9a04bc3a50e9a676975697c4793"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTA0NzUzOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxMDo1NVrOG6MGGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxMDo1NVrOG6MGGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODc2Mw==", "bodyText": "Repeated op name, maybe put in a constant?", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463668763", "createdAt": "2020-07-31T15:10:55Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -73,22 +75,22 @@ Operation deleteOldInstancesAndStart(Instance instance, String zone, String vmNa\n             }\n         });\n         try {\n-            return executeSynchronously(compute.instances().insert(project, zone, instance), project, zone);\n+            return executeSynchronously(compute.instances().insert(project, zone, instance), project, zone, \"insertVm\");\n         } catch (IOException ioe) {\n             throw new RuntimeException(\"Could not initialise insert operation!\", ioe);\n         }\n     }\n \n     void delete(String zone, String vm) {\n-        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone);\n+        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone, \"deleteVm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd5c8f6f1857526d69188bb263e97255ed22f84"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1677, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}