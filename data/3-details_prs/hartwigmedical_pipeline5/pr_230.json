{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODQ5OTA4", "number": 230, "title": "DEV-1677: Sage Germline Post Processing", "bodyText": "", "createdAt": "2020-11-24T23:29:31Z", "url": "https://github.com/hartwigmedical/pipeline5/pull/230", "merged": true, "mergeCommit": {"oid": "e3768a011b0de5d3f80065965ce7d45e92943f33"}, "closed": true, "closedAt": "2020-11-26T22:47:48Z", "author": {"login": "jonbaber"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfyWzhgH2gAyNTI2ODQ5OTA4OjNjNjk5ODNhNDNjYTI3NjY1M2YwZWI5MGRiZTA4MGE2NjU1ODFlZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdga1hMAH2gAyNTI2ODQ5OTA4OmY0MmYwM2JiYzUyZDExNzE4N2E4NjRjMjEwZDdiNGRkMTQzOGIzNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c69983a43ca276653f0eb90dbe080a665581ef4", "author": {"user": {"login": "jonbaber", "name": "Jonathan Baber"}}, "url": "https://github.com/hartwigmedical/pipeline5/commit/3c69983a43ca276653f0eb90dbe080a665581ef4", "committedDate": "2020-11-24T23:29:03Z", "message": "DEV-1677: Sage Germline Post Processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTAwNDk3", "url": "https://github.com/hartwigmedical/pipeline5/pull/230#pullrequestreview-538900497", "createdAt": "2020-11-25T23:19:03Z", "commit": {"oid": "3c69983a43ca276653f0eb90dbe080a665581ef4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxOTowM1rOH6Gueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoyNzo1MVrOH6G35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4OTY1OA==", "bodyText": "We already have the localDestination method on InputFileDescriptor that does this I think.", "url": "https://github.com/hartwigmedical/pipeline5/pull/230#discussion_r530689658", "createdAt": "2020-11-25T23:19:03Z", "author": {"login": "nedleitch"}, "path": "batch-operations/src/main/java/com/hartwig/batch/operations/SageGermline.java", "diffHunk": "@@ -31,73 +29,66 @@\n \n public class SageGermline implements BatchOperation {\n \n-    private static String localFilename(InputFileDescriptor remote) {\n-        return format(\"%s/%s\", VmDirectories.INPUT, new File(remote.inputValue()).getName());\n-    }\n-\n     @Override\n     public VirtualMachineJobDefinition execute(final InputBundle inputs, final RuntimeBucket runtimeBucket,\n-            final BashStartupScript startupScript, final RuntimeFiles executionFlags) {\n+            final BashStartupScript commands, final RuntimeFiles executionFlags) {\n \n-        final ResourceFiles resourceFiles = ResourceFilesFactory.buildResourceFiles(RefGenomeVersion.HG19);\n+        // Inputs\n+        final String set = inputs.get(\"set\").inputValue();\n+        final String tumorSampleName = inputs.get(\"tumor_sample\").inputValue();\n+        final String referenceSampleName = inputs.get(\"ref_sample\").inputValue();\n+        final InputFileDescriptor remoteTumorFile = inputs.get(\"tumor_cram\");\n+        final InputFileDescriptor remoteReferenceFile = inputs.get(\"ref_cram\");\n \n-        final InputFileDescriptor remoteReferenceFile = inputs.get(\"reference\");\n+        final InputFileDescriptor remoteTumorIndex = remoteTumorFile.index();\n         final InputFileDescriptor remoteReferenceIndex = remoteReferenceFile.index();\n+\n+        final String localTumorFile = localFilename(remoteTumorFile);\n         final String localReferenceFile = localFilename(remoteReferenceFile);\n-        final String localReferenceBam = localReferenceFile.replace(\"cram\", \"bam\");\n-        final String referenceSampleName = inputs.get(\"referenceSample\").inputValue();\n \n-        // Download latest jar file\n-        //        startupScript.addCommand(() -> format(\"gsutil -u hmf-crunch cp %s %s\",\n-        //                \"gs://batch-sage-validation/resources/sage.jar\",\n-        //                \"/opt/tools/sage/\" + Versions.SAGE + \"/sage.jar\"));\n+        // Prepare SnpEff\n+        final ResourceFiles resourceFiles = ResourceFilesFactory.buildResourceFiles(RefGenomeVersion.HG19);\n+        commands.addCommand(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, resourceFiles.snpEffDb()));\n+\n+        // Download experimental JAR\n+        commands.addCommand(downloadExperimentalVersion());\n \n-        // Download normal\n-        startupScript.addCommand(() -> remoteReferenceFile.toCommandForm(localReferenceFile));\n-        startupScript.addCommand(() -> remoteReferenceIndex.toCommandForm(localFilename(remoteReferenceIndex)));\n+        // Download tumor\n+        commands.addCommand(() -> remoteTumorFile.toCommandForm(localTumorFile));\n+        commands.addCommand(() -> remoteTumorIndex.toCommandForm(localFilename(remoteTumorIndex)));\n \n-        final SageCommandBuilder sageCommandBuilder =\n-                new SageCommandBuilder(resourceFiles).germlineMode(referenceSampleName, localReferenceBam);\n-        final SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n+        // Download normal\n+        commands.addCommand(() -> remoteReferenceFile.toCommandForm(localReferenceFile));\n+        commands.addCommand(() -> remoteReferenceIndex.toCommandForm(localFilename(remoteReferenceIndex)));\n \n-        // Convert to bam if necessary\n-        if (!localReferenceFile.equals(localReferenceBam)) {\n-            startupScript.addCommands(cramToBam(localReferenceFile));\n-        }\n+        final SageCommandBuilder sageCommandBuilder = new SageCommandBuilder(resourceFiles).germlineMode(referenceSampleName,\n+                localReferenceFile,\n+                tumorSampleName,\n+                localTumorFile);\n \n-        // Run post processing (NONE for germline)\n-        final SubStageInputOutput postProcessing = sageApplication.apply(SubStageInputOutput.empty(referenceSampleName));\n-        startupScript.addCommands(postProcessing.bash());\n+        SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n+        SagePostProcessGermline sagePostProcess = new SagePostProcessGermline(referenceSampleName, tumorSampleName, resourceFiles);\n+        SubStageInputOutput sageOutput = sageApplication.andThen(sagePostProcess).apply(SubStageInputOutput.empty(tumorSampleName));\n+        commands.addCommands(sageOutput.bash());\n \n         // Store output\n-        startupScript.addCommand(new OutputUpload(GoogleStorageLocation.of(runtimeBucket.name(), \"sage\"), executionFlags));\n-\n-        return VirtualMachineJobDefinition.sageCalling(startupScript, ResultsDirectory.defaultDirectory());\n-    }\n+        commands.addCommand(new OutputUpload(GoogleStorageLocation.of(runtimeBucket.name(), \"sage\"), executionFlags));\n \n-    private List<BashCommand> cramToBam(String cram) {\n-\n-        final String output = cram.replace(\"cram\", \"bam\");\n-        final BashCommand toBam = new VersionedToolCommand(\"samtools\",\n-                \"samtools\",\n-                Versions.SAMTOOLS,\n-                \"view\",\n-                \"-o\",\n-                output,\n-                \"-O\",\n-                \"bam\",\n-                \"-@\",\n-                Bash.allCpus(),\n-                cram);\n-\n-        final BashCommand index =\n-                new VersionedToolCommand(\"samtools\", \"samtools\", Versions.SAMTOOLS, \"index\", \"-@\", Bash.allCpus(), output);\n-\n-        return Lists.newArrayList(toBam, index);\n+        return VirtualMachineJobDefinition.sageCalling(commands, ResultsDirectory.defaultDirectory());\n     }\n \n     @Override\n     public OperationDescriptor descriptor() {\n-        return OperationDescriptor.of(\"SageGermline\", \"Generate germline output\", OperationDescriptor.InputType.JSON);\n+        return OperationDescriptor.of(\"SageGermline\", \"Generate sage output\", OperationDescriptor.InputType.JSON);\n+    }\n+\n+    private static String localFilename(InputFileDescriptor remote) {\n+        return format(\"%s/%s\", VmDirectories.INPUT, new File(remote.inputValue()).getName());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c69983a43ca276653f0eb90dbe080a665581ef4"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5MTI1Ng==", "bodyText": "My fondness for regular expressions has its detractors but in this case I think something like this makes for a tidier implementation:\nreturn String.format(\"'%s'\", expression.trim().replaceAll(\"^'\", \"\").replaceAll(\"'$\", \"\"));", "url": "https://github.com/hartwigmedical/pipeline5/pull/230#discussion_r530691256", "createdAt": "2020-11-25T23:24:56Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/calling/command/BcfToolsCommandListBuilder.java", "diffHunk": "@@ -92,4 +107,15 @@ private void addArguments(String... argumentArray) {\n             currentArguments = arguments;\n         }\n     }\n+\n+    private static String singleQuote(String expression) {\n+        String trimmed = expression.trim();\n+\n+        if (!trimmed.startsWith(\"'\")) {\n+            return \"'\" + expression + (trimmed.endsWith(\"'\") ? \"\" : \"'\");\n+        }\n+\n+        return expression + (trimmed.endsWith(\"'\") ? \"\" : \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c69983a43ca276653f0eb90dbe080a665581ef4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5MjA3MQ==", "bodyText": "Nit: String.format might make this easier to read.", "url": "https://github.com/hartwigmedical/pipeline5/pull/230#discussion_r530692071", "createdAt": "2020-11-25T23:27:51Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/calling/somatic/BlacklistFilter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.hartwig.pipeline.calling.somatic;\n+\n+import java.util.List;\n+\n+import com.hartwig.pipeline.calling.command.BcfToolsCommandListBuilder;\n+import com.hartwig.pipeline.datatypes.FileTypes;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.OutputFile;\n+import com.hartwig.pipeline.stages.SubStage;\n+\n+class BlacklistFilter extends SubStage {\n+\n+    public static final String BLACKLIST_FILTER = \"BLACKLIST\";\n+\n+    BlacklistFilter() {\n+        super(\"blacklist.filter\", FileTypes.GZIPPED_VCF);\n+    }\n+\n+    @Override\n+    public List<BashCommand> bash(final OutputFile input, final OutputFile output) {\n+        final String expression = BlacklistBedAnnotation.BLACKLIST_BED_FLAG + \"=1 || \" + BlacklistVcfAnnotation.BLACKLIST_VCF_FLAG + \"=1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c69983a43ca276653f0eb90dbe080a665581ef4"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f42f03bbc52d117187a864c210d7b4dd1438b365", "author": {"user": {"login": "jonbaber", "name": "Jonathan Baber"}}, "url": "https://github.com/hartwigmedical/pipeline5/commit/f42f03bbc52d117187a864c210d7b4dd1438b365", "committedDate": "2020-11-26T22:38:48Z", "message": "DEV-1677: Review feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3682, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}