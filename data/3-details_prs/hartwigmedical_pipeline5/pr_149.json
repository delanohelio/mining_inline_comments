{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTk3NTM3", "number": 149, "title": "DEV-1250 Register CRAMs with API", "bodyText": "Allow calling of arbitrary API endpoints after files have been created\nso that we can add additional metadata for certain files from the run.", "createdAt": "2020-05-01T16:23:26Z", "url": "https://github.com/hartwigmedical/pipeline5/pull/149", "merged": true, "mergeCommit": {"oid": "9d6a300a8906dc2741be74b8c6dbbbbf5858ac13"}, "closed": true, "closedAt": "2020-05-03T21:45:04Z", "author": {"login": "nedleitch"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdELf-AH2gAyNDEyMTk3NTM3OjE3MWMwMTk1YjMyYzBhOWExMTFlMGM3MjE5ZTFhY2JlNGZmMjdhNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdv6CagH2gAyNDEyMTk3NTM3OmMxNjQ2ODI1YmNiZDNkMmYyOGE1YjFkMjkzZmMzNTJjNTZjMzJmNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "committedDate": "2020-05-01T16:22:04Z", "message": "DEV-1250 Register CRAMs with API\n\nAllow calling of arbitrary API endpoints after files have been created\nso that we can add additional metadata for certain files from the run."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjU2Nzk4", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#pullrequestreview-404256798", "createdAt": "2020-05-01T16:28:40Z", "commit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyODo0MVrOGPOfwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMjo1MlrOGPOnCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTMyOA==", "bodyText": "singleton anti-pattern. makes the class impossible to unit test. let's invert the dependency and make AdditionalApiCalls a field.\nAlso I was thinking we'd use the \"ReportComponents\" for this rather than introducing a new class in which to register them.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418619328", "createdAt": "2020-05-01T16:28:41Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -66,10 +71,18 @@ public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobSta\n         String cram = new File(outputCram).getName();\n         String crai = CramOutput.craiFile(cram);\n         Folder folder = Folder.from(metadata);\n+\n+        String fullCram = format(\"%s%s/%s\", folder.name(), NAMESPACE, cram);\n+        String fullCrai = format(\"%s%s/%s\", folder.name(), NAMESPACE, crai);\n+\n+        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.sampleId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDA2OA==", "bodyText": "another side-effect of singleton. Why isn't register modelled as an Operation somehow?", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620068", "createdAt": "2020-05-01T16:30:13Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AdditionalApiCalls {\n+    private static final AdditionalApiCalls INSTANCE = new AdditionalApiCalls();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdditionalApiCalls.class);\n+    private Map<String, List<ApiFileOperation>> metadata;\n+\n+    private AdditionalApiCalls() {\n+        metadata = new HashMap<>();\n+        //String name = RunTag.apply(arguments, metadata.sampleId());\n+    }\n+\n+    public static AdditionalApiCalls instance() {\n+        return INSTANCE;\n+    }\n+\n+    public synchronized void register(String filePath, ApiFileOperation extraOperation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDYzOA==", "bodyText": "I like the thought behind this but feel like it introduces inconsistency to only have ApiFile operation and no similar abstractions for other operations.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620638", "createdAt": "2020-05-01T16:31:32Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public interface ApiFileOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDkyMQ==", "bodyText": "They also don't do much... maybe you can get away with just a BiFunction where you need the abstraction?", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620921", "createdAt": "2020-05-01T16:32:15Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public class LinkFileToSample implements ApiFileOperation {\n+    private final String sampleId;\n+\n+    public LinkFileToSample(String sampleId) {\n+        this.sampleId = sampleId;\n+    }\n+\n+    @Override\n+    public void apply(final SbpRestApi api, final FileResponse fileResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTE5Mw==", "bodyText": "empty constructor and non-final mutable field? looks like a job for immutables", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418621193", "createdAt": "2020-05-01T16:32:52Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.sbpapi;\n+\n+public class FileResponse {\n+    public int id;\n+\n+    public FileResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f97614656161d14a899136ba0c73fcf264164a", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/64f97614656161d14a899136ba0c73fcf264164a", "committedDate": "2020-05-01T22:15:48Z", "message": "DEV-1250 Correct API parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661a0d911e552368b484d88a797ececbfd7aa364", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/661a0d911e552368b484d88a797ececbfd7aa364", "committedDate": "2020-05-02T18:13:24Z", "message": "DEV-1250 Move additional file ops to StageOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1646825bcbd3d2f28a5b1d293fc352c56c32f65", "author": {"user": null}, "url": "https://github.com/hartwigmedical/pipeline5/commit/c1646825bcbd3d2f28a5b1d293fc352c56c32f65", "committedDate": "2020-05-03T19:18:49Z", "message": "DEV-1250 Move completion steps up to FullPipeline"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3712, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}