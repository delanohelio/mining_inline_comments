{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTk3NTM3", "number": 149, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyODo0MVrOD4af-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMjo1MlrOD4aksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgxMDE3OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyODo0MVrOGPOfwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzowODowOVrOGPPkCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTMyOA==", "bodyText": "singleton anti-pattern. makes the class impossible to unit test. let's invert the dependency and make AdditionalApiCalls a field.\nAlso I was thinking we'd use the \"ReportComponents\" for this rather than introducing a new class in which to register them.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418619328", "createdAt": "2020-05-01T16:28:41Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -66,10 +71,18 @@ public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobSta\n         String cram = new File(outputCram).getName();\n         String crai = CramOutput.craiFile(cram);\n         Folder folder = Folder.from(metadata);\n+\n+        String fullCram = format(\"%s%s/%s\", folder.name(), NAMESPACE, cram);\n+        String fullCrai = format(\"%s%s/%s\", folder.name(), NAMESPACE, crai);\n+\n+        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.sampleId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzNjgwOQ==", "bodyText": "Meant to mention - this is absolutely just a waypoint, it won't be staying that way, working on getting rid of it now.\nI was sitting on the fence with putting it in the ReportComponents, wasn't sure about overloading but am happy to make that change.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418636809", "createdAt": "2020-05-01T17:08:09Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -66,10 +71,18 @@ public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobSta\n         String cram = new File(outputCram).getName();\n         String crai = CramOutput.craiFile(cram);\n         Folder folder = Folder.from(metadata);\n+\n+        String fullCram = format(\"%s%s/%s\", folder.name(), NAMESPACE, cram);\n+        String fullCrai = format(\"%s%s/%s\", folder.name(), NAMESPACE, crai);\n+\n+        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.sampleId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTMyOA=="}, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgxNDczOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMDoxM1rOGPOipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMDoxM1rOGPOipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDA2OA==", "bodyText": "another side-effect of singleton. Why isn't register modelled as an Operation somehow?", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620068", "createdAt": "2020-05-01T16:30:13Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AdditionalApiCalls {\n+    private static final AdditionalApiCalls INSTANCE = new AdditionalApiCalls();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdditionalApiCalls.class);\n+    private Map<String, List<ApiFileOperation>> metadata;\n+\n+    private AdditionalApiCalls() {\n+        metadata = new HashMap<>();\n+        //String name = RunTag.apply(arguments, metadata.sampleId());\n+    }\n+\n+    public static AdditionalApiCalls instance() {\n+        return INSTANCE;\n+    }\n+\n+    public synchronized void register(String filePath, ApiFileOperation extraOperation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgxODM4OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMTozMlrOGPOk3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMTozMlrOGPOk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDYzOA==", "bodyText": "I like the thought behind this but feel like it introduces inconsistency to only have ApiFile operation and no similar abstractions for other operations.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620638", "createdAt": "2020-05-01T16:31:32Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public interface ApiFileOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgyMDM0OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMjoxNVrOGPOl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMjoxNVrOGPOl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDkyMQ==", "bodyText": "They also don't do much... maybe you can get away with just a BiFunction where you need the abstraction?", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620921", "createdAt": "2020-05-01T16:32:15Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public class LinkFileToSample implements ApiFileOperation {\n+    private final String sampleId;\n+\n+    public LinkFileToSample(String sampleId) {\n+        this.sampleId = sampleId;\n+    }\n+\n+    @Override\n+    public void apply(final SbpRestApi api, final FileResponse fileResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgyMjI2OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozMjo1MlrOGPOnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzowOToyMVrOGPPmLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTE5Mw==", "bodyText": "empty constructor and non-final mutable field? looks like a job for immutables", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418621193", "createdAt": "2020-05-01T16:32:52Z", "author": {"login": "pauldwolfe"}, "path": "cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.sbpapi;\n+\n+public class FileResponse {\n+    public int id;\n+\n+    public FileResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzNzM1OQ==", "bodyText": "Indeed. Was actually looking for a way to inline it but will switch to an Immutable.", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418637359", "createdAt": "2020-05-01T17:09:21Z", "author": {"login": "nedleitch"}, "path": "cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.sbpapi;\n+\n+public class FileResponse {\n+    public int id;\n+\n+    public FileResponse() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTE5Mw=="}, "originalCommit": {"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1659, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}