{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODY5NTcx", "number": 2963, "title": "[cpp] Add option to ignore sequences of literals", "bodyText": "Describe the PR\nSee PR #2945. This pull request implements the same functionality for C++ (in addition to the previously implemented C#).\nWhen implementing this for C#, I could use the getKind() method on the AntlrToken class. However, JavaCC-based languages like C++ did not have such a method available on the GenericToken interface. Since this functionality is common for all languages that are based on Antlr and JavaCC (so everything except for Scala), I think it makes sense to add this to the interface.\nRelated issues\n\nSimilar to #2945 (for C++ instead of C#)\nIncludes #2962\n\nReady?\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-12-10T11:32:24Z", "url": "https://github.com/pmd/pmd/pull/2963", "merged": true, "mergeCommit": {"oid": "76566b75bb0b935932357bc1e5f67f8fe5a4c7e5"}, "closed": true, "closedAt": "2021-01-21T10:44:57Z", "author": {"login": "maikelsteneker"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkxYptgH2gAyNTM1ODY5NTcxOjI2NzI4MzQ4ZjY5ZWM2ZWU1OGNjYmJlNDQ0M2FmNjhlM2YwY2Y4MGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyRo4IgH2gAyNTM1ODY5NTcxOjc2NTY2Yjc1YmIwYjkzNTkzMjM1N2JjMWU1ZjY3ZjhmZTVhNGM3ZTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26728348f69ec6ee58ccbbe4443af68e3f0cf80f", "author": {"user": {"login": "maikelsteneker", "name": "Maikel Steneker"}}, "url": "https://github.com/pmd/pmd/commit/26728348f69ec6ee58ccbbe4443af68e3f0cf80f", "committedDate": "2020-12-10T11:10:47Z", "message": "Add support for C++14 binary literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af31b3a7736fe328e5688247aaf4c05602701158", "author": {"user": {"login": "maikelsteneker", "name": "Maikel Steneker"}}, "url": "https://github.com/pmd/pmd/commit/af31b3a7736fe328e5688247aaf4c05602701158", "committedDate": "2020-12-10T11:10:47Z", "message": "Add GenericToken.getKind() to interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7fe9fb24aff7c84c195348257e584e04274f21", "author": {"user": {"login": "maikelsteneker", "name": "Maikel Steneker"}}, "url": "https://github.com/pmd/pmd/commit/3d7fe9fb24aff7c84c195348257e584e04274f21", "committedDate": "2020-12-10T11:10:47Z", "message": "C++ can now ignore sequences of literals\n\nThis enables the --ignore-literal-sequences option for the C++ language. This was previously only implemented for C#."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146", "author": {"user": {"login": "maikelsteneker", "name": "Maikel Steneker"}}, "url": "https://github.com/pmd/pmd/commit/55598d844a66bf11135fc72bde3c6d6d4ce7c146", "committedDate": "2020-12-10T11:14:12Z", "message": "Filter out 2D arrays as well"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMDQzMzc2", "url": "https://github.com/pmd/pmd/pull/2963#pullrequestreview-573043376", "createdAt": "2021-01-21T07:27:14Z", "commit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoyNzoxNFrOIXoiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMTowMVrOIXoozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1MjI2NA==", "bodyText": "let's add @see #OPTION_IGNORE_LITERAL_SEQUENCES here as well....", "url": "https://github.com/pmd/pmd/pull/2963#discussion_r561652264", "createdAt": "2021-01-21T07:27:14Z", "author": {"login": "adangel"}, "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/cpd/CPPTokenizer.java", "diffHunk": "@@ -23,12 +27,12 @@\n     private boolean skipBlocks = true;\n     private String skipBlocksStart;\n     private String skipBlocksEnd;\n+    private boolean ignoreLiteralSequences = false;\n \n     /**\n      * Sets the possible options for the C++ tokenizer.\n      *\n-     * @param properties\n-     *            the properties\n+     * @param properties the properties\n      * @see #OPTION_SKIP_BLOCKS\n      * @see #OPTION_SKIP_BLOCKS_PATTERN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1Mzk2Ng==", "bodyText": "I'd rather mark this as @Experimental for now. The reason is, that the different kinds are the constants e.g. from CppParserConstants. Whenever we change the grammar and add a new token, these \"constants\" might change, which will change the public API here. Maybe we need another abstraction here?\nNote: We have actually the same problem for AntlrToken as well....", "url": "https://github.com/pmd/pmd/pull/2963#discussion_r561653966", "createdAt": "2021-01-21T07:31:01Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/GenericToken.java", "diffHunk": "@@ -51,4 +51,11 @@\n      * @return a non-negative integer containing the begin column\n      */\n     int getEndColumn();\n+\n+    /**\n+     * Gets a unique integer representing the kind of token this is.\n+     *\n+     * The semantics of this kind depend on the language.\n+     */\n+    int getKind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76566b75bb0b935932357bc1e5f67f8fe5a4c7e5", "author": {"user": {"login": "maikelsteneker", "name": "Maikel Steneker"}}, "url": "https://github.com/pmd/pmd/commit/76566b75bb0b935932357bc1e5f67f8fe5a4c7e5", "committedDate": "2021-01-21T10:06:29Z", "message": "Minor changes resulting from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4604, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}