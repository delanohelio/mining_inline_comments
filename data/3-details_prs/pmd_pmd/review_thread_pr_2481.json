{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDE3MTYy", "number": 2481, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowODo1M1rOD8mA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowOTo0NVrOD8mB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYzOTc5OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJUnitRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowODo1M1rOGVoa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMDoyNDoyNlrOGWccnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTU0Nw==", "bodyText": "I'd not expose these methods.\nThese methods are called already when visiting CompilationUnit and the result is stored in fields, see lines 38-40 above.\nI'd make these fields protected, so that you can use it in the rule.", "url": "https://github.com/pmd/pmd/pull/2481#discussion_r425335547", "createdAt": "2020-05-14T18:08:53Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJUnitRule.java", "diffHunk": "@@ -89,7 +89,7 @@ private boolean isJUnit3Method(ASTMethodDeclaration method) {\n         return isJUnit3Class && method.isVoid() && method.getName().startsWith(\"test\");\n     }\n \n-    private boolean isJUnit3Class(ASTCompilationUnit node) {\n+    protected boolean isJUnit3Class(ASTCompilationUnit node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b5be784fd34a6af8c530af8eebdc671dcfd3977"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzkzMg==", "bodyText": "Indeed, fixed.", "url": "https://github.com/pmd/pmd/pull/2481#discussion_r426187932", "createdAt": "2020-05-16T20:24:26Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJUnitRule.java", "diffHunk": "@@ -89,7 +89,7 @@ private boolean isJUnit3Method(ASTMethodDeclaration method) {\n         return isJUnit3Class && method.isVoid() && method.getName().startsWith(\"test\");\n     }\n \n-    private boolean isJUnit3Class(ASTCompilationUnit node) {\n+    protected boolean isJUnit3Class(ASTCompilationUnit node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTU0Nw=="}, "originalCommit": {"oid": "8b5be784fd34a6af8c530af8eebdc671dcfd3977"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY0MjM1OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/JUnitSpellingRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowOTo0NVrOGVocqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMDoyNDozOVrOGWccqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTk3OQ==", "bodyText": "If using the protected fields from the base class, you don't need to search here again for the compilation unit and call again the methods - that was already done....", "url": "https://github.com/pmd/pmd/pull/2481#discussion_r425335979", "createdAt": "2020-05-14T18:09:45Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/JUnitSpellingRule.java", "diffHunk": "@@ -5,13 +5,19 @@\n \n package net.sourceforge.pmd.lang.java.rule.errorprone;\n \n+import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;\n import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;\n import net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule;\n \n public class JUnitSpellingRule extends AbstractJUnitRule {\n \n     @Override\n     public Object visit(ASTMethodDeclaration node, Object data) {\n+        ASTCompilationUnit acu = node.getFirstParentOfType(ASTCompilationUnit.class);\n+        if (isJUnit5Class(acu) || isJUnit4Class(acu)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b5be784fd34a6af8c530af8eebdc671dcfd3977"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4Nzk0Nw==", "bodyText": "You're right", "url": "https://github.com/pmd/pmd/pull/2481#discussion_r426187947", "createdAt": "2020-05-16T20:24:39Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/JUnitSpellingRule.java", "diffHunk": "@@ -5,13 +5,19 @@\n \n package net.sourceforge.pmd.lang.java.rule.errorprone;\n \n+import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;\n import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;\n import net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule;\n \n public class JUnitSpellingRule extends AbstractJUnitRule {\n \n     @Override\n     public Object visit(ASTMethodDeclaration node, Object data) {\n+        ASTCompilationUnit acu = node.getFirstParentOfType(ASTCompilationUnit.class);\n+        if (isJUnit5Class(acu) || isJUnit4Class(acu)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTk3OQ=="}, "originalCommit": {"oid": "8b5be784fd34a6af8c530af8eebdc671dcfd3977"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 400, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}