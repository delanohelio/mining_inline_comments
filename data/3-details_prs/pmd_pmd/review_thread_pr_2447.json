{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTUzNjUw", "number": 2447, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoxMzowNVrOD4qT4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTowNzo0OVrOD4qlnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQwMDY3OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoxMzowNVrOGPjg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoxMzowNVrOGPjg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MzY4Mw==", "bodyText": "Once we removed the generic \"getImage\" method in favor of more specific methods likes \"getName\" etc., this method also doesn't make sense and should be removed", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418963683", "createdAt": "2020-05-02T14:13:05Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -186,23 +57,13 @@ default String getImage() {\n     }\n \n \n-    /**\n-     * @deprecated This is internal API, the image should never be set by developers.\n-     */\n-    @InternalApi\n-    @Deprecated\n-    default void setImage(String image) {\n-        throw new UnsupportedOperationException(\"setImage\");\n-    }\n-\n-\n     /**\n      * Returns true if this node's image is equal to the given string.\n      *\n      * @param image The image to check\n      */\n     default boolean hasImageEqualTo(String image) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQwODgzOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoyMzoyMFrOGPjk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzozODowN1rOGPk4Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDcyMg==", "bodyText": "Do we need three different ways to add children? (addChild, insertChild, setChildren)\nCan we reduce this maybe?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418964722", "createdAt": "2020-05-02T14:23:20Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4NjA2Ng==", "bodyText": "setChildren in used only in tests AFAIK so could be pulled down to DummyNode.\nI think addChild is a bit unsafe/hard to use:\n\nnothing prevents you from writing addChild(child, 42), and leave 42 null slots in the array (which breaks the contract of the class)...\nadding children with this method needs to be done right to left, otherwise adding n children performs n array resizes\n\nOTOH I can't see another way to improve it right now apart from documentation", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418986066", "createdAt": "2020-05-02T17:38:07Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDcyMg=="}, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQxMTAwOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoyNTo0NVrOGPjmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzo0MzowMlrOGPk6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDk5Ng==", "bodyText": "Is this needed as a protected method? It looks error prone, if this is ever forgotten to be called. And it probably shouldn't needed to be called -> addChild etc. should automatically make sure, the tree is consistent.", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418964996", "createdAt": "2020-05-02T14:25:45Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {\n+        assert index >= 0 : \"Invalid index \" + index;\n+        assert index >= children.length || children[index] == null : \"There is already a child at index \" + index;\n+\n+        if (index >= children.length) {\n+            final Node[] newChildren = new Node[index + 1];\n+            System.arraycopy(children, 0, newChildren, 0, children.length);\n+            children = newChildren;\n+        }\n+\n+        children[index] = child;\n+        child.setChildIndex(index);\n+        child.setParent(asSelf(this));\n+    }\n+\n+    /**\n+     * Insert a child at the given index, shifting all the following\n+     * children to the right.\n+     *\n+     * @param child New child\n+     * @param index Index (must be 0 <= index <= getNumChildren()), ie\n+     *              you can insert a node beyond the end, because that\n+     *              would leave holes in the array\n+     */\n+    protected void insertChild(final B child, final int index) {\n+        assert index >= 0 && index <= children.length\n+            : \"Invalid index for insertion into array of length \" + children.length + \": \" + index;\n+\n+        Node[] newChildren = new Node[children.length + 1];\n+        if (index != 0) {\n+            System.arraycopy(children, 0, newChildren, 0, index);\n+        }\n+        if (index != children.length) {\n+            System.arraycopy(children, index, newChildren, index + 1, children.length - index);\n+        }\n+        newChildren[index] = child;\n+        child.setParent(asSelf(this));\n+\n+        for (int i = index; i < newChildren.length; i++) {\n+            asSelf(newChildren[i]).setChildIndex(i);\n+        }\n+        this.children = newChildren;\n+    }\n+\n+\n+    @SafeVarargs\n+    protected final void setChildren(B... newChildren) {\n+        this.children = new Node[newChildren.length];\n+        System.arraycopy(newChildren, 0, this.children, 0, newChildren.length);\n+        for (int i = 0; i < newChildren.length; i++) {\n+            newChildren[i].setParent(asSelf(this));\n+            newChildren[i].setChildIndex(i);\n+        }\n+    }\n+\n+\n+    protected void remove() {\n+        // Detach current node of its parent, if any\n+        if (parent != null) {\n+            parent.removeChildAtIndex(getIndexInParent());\n+            setParent(null);\n+        }\n+\n+        // TODO [autofix]: Notify action for handling text edition\n+    }\n+\n+    protected void removeChildAtIndex(final int childIndex) {\n+        if (0 <= childIndex && childIndex < getNumChildren()) {\n+            // Remove the child at the given index\n+            children = ArrayUtils.remove(children, childIndex);\n+            // Update the remaining & left-shifted children indexes\n+            for (int i = childIndex; i < getNumChildren(); i++) {\n+                asSelf(getChild(i)).setChildIndex(i);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sets the index of this node from the perspective of its parent. This\n+     * means: this.getParent().getChild(index) == this.\n+     *\n+     * @param index the child index\n+     */\n+    protected void setChildIndex(final int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4NjU5NA==", "bodyText": "Indeed, I'll look into whether we can remove it", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418986594", "createdAt": "2020-05-02T17:43:02Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {\n+        assert index >= 0 : \"Invalid index \" + index;\n+        assert index >= children.length || children[index] == null : \"There is already a child at index \" + index;\n+\n+        if (index >= children.length) {\n+            final Node[] newChildren = new Node[index + 1];\n+            System.arraycopy(children, 0, newChildren, 0, children.length);\n+            children = newChildren;\n+        }\n+\n+        children[index] = child;\n+        child.setChildIndex(index);\n+        child.setParent(asSelf(this));\n+    }\n+\n+    /**\n+     * Insert a child at the given index, shifting all the following\n+     * children to the right.\n+     *\n+     * @param child New child\n+     * @param index Index (must be 0 <= index <= getNumChildren()), ie\n+     *              you can insert a node beyond the end, because that\n+     *              would leave holes in the array\n+     */\n+    protected void insertChild(final B child, final int index) {\n+        assert index >= 0 && index <= children.length\n+            : \"Invalid index for insertion into array of length \" + children.length + \": \" + index;\n+\n+        Node[] newChildren = new Node[children.length + 1];\n+        if (index != 0) {\n+            System.arraycopy(children, 0, newChildren, 0, index);\n+        }\n+        if (index != children.length) {\n+            System.arraycopy(children, index, newChildren, index + 1, children.length - index);\n+        }\n+        newChildren[index] = child;\n+        child.setParent(asSelf(this));\n+\n+        for (int i = index; i < newChildren.length; i++) {\n+            asSelf(newChildren[i]).setChildIndex(i);\n+        }\n+        this.children = newChildren;\n+    }\n+\n+\n+    @SafeVarargs\n+    protected final void setChildren(B... newChildren) {\n+        this.children = new Node[newChildren.length];\n+        System.arraycopy(newChildren, 0, this.children, 0, newChildren.length);\n+        for (int i = 0; i < newChildren.length; i++) {\n+            newChildren[i].setParent(asSelf(this));\n+            newChildren[i].setChildIndex(i);\n+        }\n+    }\n+\n+\n+    protected void remove() {\n+        // Detach current node of its parent, if any\n+        if (parent != null) {\n+            parent.removeChildAtIndex(getIndexInParent());\n+            setParent(null);\n+        }\n+\n+        // TODO [autofix]: Notify action for handling text edition\n+    }\n+\n+    protected void removeChildAtIndex(final int childIndex) {\n+        if (0 <= childIndex && childIndex < getNumChildren()) {\n+            // Remove the child at the given index\n+            children = ArrayUtils.remove(children, childIndex);\n+            // Update the remaining & left-shifted children indexes\n+            for (int i = childIndex; i < getNumChildren(); i++) {\n+                asSelf(getChild(i)).setChildIndex(i);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sets the index of this node from the perspective of its parent. This\n+     * means: this.getParent().getChild(index) == this.\n+     *\n+     * @param index the child index\n+     */\n+    protected void setChildIndex(final int index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDk5Ng=="}, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQxNDEwOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/GenericNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoyOTo1MFrOGPjnkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoyOTo1MFrOGPjnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTM5Mg==", "bodyText": "I guess, we should demand that all language impls use this interface. Maybe that's just in the documentation then?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418965392", "createdAt": "2020-05-02T14:29:50Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/GenericNode.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream;\n+import net.sourceforge.pmd.lang.ast.internal.StreamImpl;\n+\n+/**\n+ * Interface that binds the return type of some node methods to a type\n+ * parameter. This enforces that eg all children of such a node are from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQxODM4OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/javacc/AbstractJjtreeNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDozNDoyMlrOGPjpUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDozNDoyMlrOGPjpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTg0MQ==", "bodyText": "Maybe we can name the \"id\" something like \"productionId\" or \"jjtNodeNameIndex\", to avoid the misinterpretation of \"unique id\"...", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418965841", "createdAt": "2020-05-02T14:34:22Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/javacc/AbstractJjtreeNode.java", "diffHunk": "@@ -20,57 +17,115 @@\n  * unforeseeable ways. Don't use it directly, use the node interfaces.\n  */\n @Experimental\n-public abstract class AbstractJjtreeNode<N extends Node> extends AbstractNode implements TextAvailableNode {\n+public abstract class AbstractJjtreeNode<B extends AbstractJjtreeNode<B, N>, N extends JjtreeNode<N>> extends AbstractNode<B, N> implements JjtreeNode<N> {\n \n+    protected final int id;\n+    private JavaccToken firstToken;\n+    private JavaccToken lastToken;\n \n-    public AbstractJjtreeNode(int id) {\n-        super(id);\n+    private String image;\n+\n+    /**\n+     * The id is an index in the constant names array generated by jjtree,\n+     * it must be set to some value that depends on the node type, not some\n+     * arbitrary \"1\" or \"2\", and not necessarily a unique value.\n+     */\n+    protected AbstractJjtreeNode(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQyNDUxOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/xpath/NoAttribute.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDo0MjoxM1rOGPjsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDo0MjoxM1rOGPjsWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NjYxOA==", "bodyText": "In theory, AbstractNode should be irrelevant in this context - AbstractNode should only help to implement the Node API, but should not add to the API... (so no additional methods).\nMaybe we don't need the NoAttrScope at all? If a intermediate (abstract) class adds a public method, it is public API... so why not expose it as XPath attribute?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418966618", "createdAt": "2020-05-02T14:42:13Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/xpath/NoAttribute.java", "diffHunk": "@@ -9,8 +9,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import net.sourceforge.pmd.lang.ast.AbstractNode;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.impl.AbstractNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQzNDAxOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/DummyJavaNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDo1Mzo1MFrOGPjw2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzoyODozNVrOGPk0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2Nzc2OQ==", "bodyText": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test....", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418967769", "createdAt": "2020-05-02T14:53:50Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/DummyJavaNode.java", "diffHunk": "@@ -20,6 +20,11 @@ public DummyJavaNode(int id) {\n         super(id);\n     }\n \n+    @Override\n+    public void setImage(String image) {\n+        super.setImage(image);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4NDk3MQ==", "bodyText": "Indeed, I recall it's still in main because some rules about imports create dummy nodes for ImportWrapper... Hopefully those rules may be rewritten with the newer symbol table and ImportWrapper can be nuked", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418984971", "createdAt": "2020-05-02T17:28:35Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/DummyJavaNode.java", "diffHunk": "@@ -20,6 +20,11 @@ public DummyJavaNode(int id) {\n         super(id);\n     }\n \n+    @Override\n+    public void setImage(String image) {\n+        super.setImage(image);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2Nzc2OQ=="}, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQ0NjA0OnYy", "diffSide": "RIGHT", "path": "pmd-plsql/src/main/java/net/sourceforge/pmd/lang/plsql/ast/PLSQLNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTowNzo0OVrOGPj2tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTowNzo0OVrOGPj2tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2OTI2OA==", "bodyText": "hm...yes, these methods are not ideal, too generic like \"getImage\". but this time on plsql...", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418969268", "createdAt": "2020-05-02T15:07:49Z", "author": {"login": "adangel"}, "path": "pmd-plsql/src/main/java/net/sourceforge/pmd/lang/plsql/ast/PLSQLNode.java", "diffHunk": "@@ -4,27 +4,43 @@\n \n package net.sourceforge.pmd.lang.plsql.ast;\n \n-import net.sourceforge.pmd.lang.ast.Node;\n-import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode;\n import net.sourceforge.pmd.lang.symboltable.Scope;\n import net.sourceforge.pmd.lang.symboltable.ScopedNode;\n \n-public interface PLSQLNode extends Node, ScopedNode {\n+public interface PLSQLNode extends ScopedNode, JjtreeNode<PLSQLNode> {\n \n     /** Accept the visitor. **/\n     Object jjtAccept(PLSQLParserVisitor visitor, Object data);\n \n     @Override\n     Scope getScope();\n \n-    void setScope(Scope scope);\n-\n-    @Override\n-    PLSQLNode getChild(int index);\n-\n-    @Override\n-    PLSQLNode getParent();\n-\n-    @Override\n-    NodeStream<? extends PLSQLNode> children();\n+    /**\n+     * Return node image converted to the normal Oracle form.\n+     *\n+     * <p>\n+     * Normally this is uppercase, unless the names is quoted (\"name\").\n+     * </p>\n+     */\n+    default String getCanonicalImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 382, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}