{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDYyMTY5", "number": 2635, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMTowNVrOEz22jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0NTo0OVrOFEGGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODExNTM1OnYy", "diffSide": "RIGHT", "path": "docs/pages/release_notes.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMTowNVrOHrVrxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMTowNVrOHrVrxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNjA4Nw==", "bodyText": "Maybe we should add, that these classes are Internal API... well actually all these classes, except PMD, the main entry point.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515206087", "createdAt": "2020-10-30T16:01:05Z", "author": {"login": "adangel"}, "path": "docs/pages/release_notes.md", "diffHunk": "@@ -18,6 +18,23 @@ This is a {{ site.pmd.release_type }} release.\n \n ### API Changes\n \n+#### Deprecated API\n+\n+##### Around RuleSet parsing\n+\n+* {% jdoc core::RuleSetFactory %} and {% jdoc core::RuleSetFactoryUtils %} have been deprecated in favor of {% jdoc core::RuleSetParser %}. This is easier to configure, and more maintainable than the multiple overloads of `RuleSetFactoryUtils`.\n+* Some static creation methods have been added to {% jdoc core::RuleSet %} for simple cases, eg {% jdoc core::RuleSet#forSingleRule(core::Rule) %}. These replace some counterparts in {% jdoc core::RuleSetFactory %}\n+* Since {% jdoc core::RuleSets %} is also deprecated, many APIs that require a RuleSets instance now are deprecated, and have a counterpart that expects a `List<RuleSet>`.\n+* {% jdoc core::RuleSetReferenceId %}, {% jdoc core::RuleSetReference %}, {% jdoc core::RuleSetFactoryCompatibility %} are deprecated. They are most likely not relevant outside of the implementation of pmd-core.\n+\n+##### Around the `PMD` class\n+\n+Many APIs around PMD's entry point ({% jdoc core::PMD %}) have been deprecated, including:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODEzMjU5OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMD.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowNToyNFrOHrV2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowMDoxNFrOHrajNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwODg1Nw==", "bodyText": "Should we mark this as experimental? Or would we just deprecate this as well, if we have a better PMD programmatic API?", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515208857", "createdAt": "2020-10-30T16:05:24Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMD.java", "diffHunk": "@@ -297,19 +319,58 @@ public static RuleContext newRuleContext(String sourceCodeFilename, File sourceC\n      *            RuleContext\n      * @param renderers\n      *            List of {@link Renderer}s\n+     *\n+     * @deprecated Use {@link #processFiles(PMDConfiguration, List, Collection, Report, List)}\n+     * so as not to depend on {@link RuleSetFactory}. Note that this sorts the list of data sources in-place,\n+     * which won't be fixed\n      */\n+    @Deprecated\n     public static void processFiles(final PMDConfiguration configuration, final RuleSetFactory ruleSetFactory,\n-            final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers) {\n+                                    final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers) {\n+        // Note that this duplicates the other routine, because the old behavior was\n+        // that we parsed rulesets (a second time) inside the processor execution.\n+        // To not mess up error handling, we keep this behavior.\n+\n         encourageToUseIncrementalAnalysis(configuration);\n         sortFiles(configuration, files);\n         // Make sure the cache is listening for analysis results\n         ctx.getReport().addListener(configuration.getAnalysisCache());\n \n-        final RuleSetFactory silentFactory = new RuleSetFactory(ruleSetFactory, false);\n+        final RuleSetFactory silentFactory = ruleSetFactory.toParser().warnDeprecated(false).toFactory();\n         newFileProcessor(configuration).processFiles(silentFactory, files, ctx, renderers);\n         configuration.getAnalysisCache().persist();\n     }\n \n+    /**\n+     * Run PMD using the given configuration. This replaces the other overload.\n+     *\n+     * @param configuration Configuration for the run. Note that the files,\n+     *                      and rulesets, are ignored, as they are supplied\n+     *                      as parameters\n+     * @param rulesets      Parsed rulesets\n+     * @param files         Files to process\n+     * @param report        Report in which violations are accumulated\n+     * @param renderers     Renderers that render the report\n+     *\n+     * @throws RuntimeException If processing fails\n+     */\n+    public static void processFiles(final PMDConfiguration configuration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4NTgxNA==", "bodyText": "It may be possible to preserve compatibility with this signature in PMD 7. But also I think we should ideally keep a published entry point, that remains non-deprecated in the 6.x release cycle", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515285814", "createdAt": "2020-10-30T18:00:14Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMD.java", "diffHunk": "@@ -297,19 +319,58 @@ public static RuleContext newRuleContext(String sourceCodeFilename, File sourceC\n      *            RuleContext\n      * @param renderers\n      *            List of {@link Renderer}s\n+     *\n+     * @deprecated Use {@link #processFiles(PMDConfiguration, List, Collection, Report, List)}\n+     * so as not to depend on {@link RuleSetFactory}. Note that this sorts the list of data sources in-place,\n+     * which won't be fixed\n      */\n+    @Deprecated\n     public static void processFiles(final PMDConfiguration configuration, final RuleSetFactory ruleSetFactory,\n-            final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers) {\n+                                    final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers) {\n+        // Note that this duplicates the other routine, because the old behavior was\n+        // that we parsed rulesets (a second time) inside the processor execution.\n+        // To not mess up error handling, we keep this behavior.\n+\n         encourageToUseIncrementalAnalysis(configuration);\n         sortFiles(configuration, files);\n         // Make sure the cache is listening for analysis results\n         ctx.getReport().addListener(configuration.getAnalysisCache());\n \n-        final RuleSetFactory silentFactory = new RuleSetFactory(ruleSetFactory, false);\n+        final RuleSetFactory silentFactory = ruleSetFactory.toParser().warnDeprecated(false).toFactory();\n         newFileProcessor(configuration).processFiles(silentFactory, files, ctx, renderers);\n         configuration.getAnalysisCache().persist();\n     }\n \n+    /**\n+     * Run PMD using the given configuration. This replaces the other overload.\n+     *\n+     * @param configuration Configuration for the run. Note that the files,\n+     *                      and rulesets, are ignored, as they are supplied\n+     *                      as parameters\n+     * @param rulesets      Parsed rulesets\n+     * @param files         Files to process\n+     * @param report        Report in which violations are accumulated\n+     * @param renderers     Renderers that render the report\n+     *\n+     * @throws RuntimeException If processing fails\n+     */\n+    public static void processFiles(final PMDConfiguration configuration,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwODg1Nw=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODE1NTk4OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMDException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxMToxMFrOHrWE_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1Nzo0OVrOHradTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMjU0Mw==", "bodyText": "I'm not sure we should deprecate this.\nI kinda like the idea, that we would provide all exceptions (if we throw any) with a common super type.\nOf course, the exception should be not a checked exception like this one, but rather a runtime exception.\nWe maybe need additionally an internal exception that we would convert into such a public API exception.\nBut that's out of scope of this PR - that's the question of exception handling.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515212543", "createdAt": "2020-10-30T16:11:10Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMDException.java", "diffHunk": "@@ -13,6 +13,7 @@\n  * @version $Revision$, $Date$\n  * @since August 30, 2002\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4NDMwMg==", "bodyText": "I think in this PR all APIs that throw PMDException are being deprecated (I did not check thoroughly), which is why I went ahead. I think we can do better with exceptions, but I'm not sure PMDException as it stands does anything useful.\nBut yes it would be nice to have a common supertype in pmd 7.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515284302", "createdAt": "2020-10-30T17:57:49Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/PMDException.java", "diffHunk": "@@ -13,6 +13,7 @@\n  * @version $Revision$, $Date$\n  * @since August 30, 2002\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMjU0Mw=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODE5MzQ0OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyMTozMlrOHrWc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowMTo1MlrOHramrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODY3Mw==", "bodyText": "Isn't that used by pmd-doc? And I think, it's used by eclipse-pmd-plugin as well. We probably need to think, whether we can really remove it or whether we need to provide an alternative.\nThe method sounds more like some utility/helper method, to get all rules of all languages on the classpath.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515218673", "createdAt": "2020-10-30T16:21:32Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetFactory.java", "diffHunk": "@@ -138,7 +144,10 @@ public RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated\n      * @return An Iterator of RuleSet objects.\n      *\n      * @throws RuleSetNotFoundException if the ruleset file could not be found\n+     *\n+     * @deprecated This is apparently only used in code deprecated for removal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4NjcwMg==", "bodyText": "No you're right, this is a mistake. I think this may be useful, but it should not be in RulesetFactory. Maybe we should have a static method in RulesetLoader?", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515286702", "createdAt": "2020-10-30T18:01:52Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetFactory.java", "diffHunk": "@@ -138,7 +144,10 @@ public RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated\n      * @return An Iterator of RuleSet objects.\n      *\n      * @throws RuleSetNotFoundException if the ruleset file could not be found\n+     *\n+     * @deprecated This is apparently only used in code deprecated for removal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODY3Mw=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODIwODEwOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyNToyNVrOHrWl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1Mjo0N1rOHraJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMDk4MQ==", "bodyText": "Should we collect ruleset related APIs in a subpackage net.sourceforge.pmd.ruleset?", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515220981", "createdAt": "2020-10-30T16:25:25Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTMzNQ==", "bodyText": "I wonder if nspmd.lang.rule is more appropriate. There wouldn't be much public api in a separate ruleset package, I think, basically RuleSet and RuleSetLoader. Maybe a Category enum too.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515279335", "createdAt": "2020-10-30T17:52:47Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMDk4MQ=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODIyMjczOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyOToxNVrOHrWvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyOToxNVrOHrWvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMzM0OA==", "bodyText": "private?", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515223348", "createdAt": "2020-10-30T16:29:15Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.util.ResourceLoader;\n+\n+/**\n+ * Configurable ruleset parser. Note that this replaces the API of {@link RulesetsFactoryUtils}\n+ * and {@link RuleSetFactory}. This can be configured using a fluent\n+ * API, see eg {@link #warnDeprecated(boolean)}. To create a list of\n+ * rulesets, use {@link #parseFromResource(String)}.\n+ */\n+public final class RuleSetParser {\n+\n+    ResourceLoader resourceLoader = new ResourceLoader(RuleSetParser.class.getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODIzODQyOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMzoxM1rOHrW4kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowNTozNFrOHrauDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNTc0NQ==", "bodyText": "Hm... part of this class is a builder not a parser....\nMaybe we can start with phrasing what this class does: Loads rulesets from files (or other resources). The way, the rulesets are loaded, can be configured - hence configurable.\nNot sure, if this is more a RuleSetBuilder, RuleSetLoader or RuleSetParser (well in PMD6 the impl of the parser is actually in RuleSetFactory, but that's only for now).\nSince I came across RuleSetWriter... maybe this is a RuleSetReader? (Although this would make one think as a java.io.Reader, which works a bit different)", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515225745", "createdAt": "2020-10-30T16:33:13Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.util.ResourceLoader;\n+\n+/**\n+ * Configurable ruleset parser. Note that this replaces the API of {@link RulesetsFactoryUtils}\n+ * and {@link RuleSetFactory}. This can be configured using a fluent\n+ * API, see eg {@link #warnDeprecated(boolean)}. To create a list of\n+ * rulesets, use {@link #parseFromResource(String)}.\n+ */\n+public final class RuleSetParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4ODU4OA==", "bodyText": "RulesetLoader sounds good! I would avoid RulesetReader, sounds like something that uses a ruleset, not something that creates it. I think we could rename RulesetFactory to RulesetParser eventually", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515288588", "createdAt": "2020-10-30T18:05:34Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.util.ResourceLoader;\n+\n+/**\n+ * Configurable ruleset parser. Note that this replaces the API of {@link RulesetsFactoryUtils}\n+ * and {@link RuleSetFactory}. This can be configured using a fluent\n+ * API, see eg {@link #warnDeprecated(boolean)}. To create a list of\n+ * rulesets, use {@link #parseFromResource(String)}.\n+ */\n+public final class RuleSetParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNTc0NQ=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODI0MDQ5OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMzo0NVrOHrW5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMzo0NVrOHrW5yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNjA1OA==", "bodyText": "maybe \"loadFromResource(...)\"?", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515226058", "createdAt": "2020-10-30T16:33:45Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetParser.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.util.ResourceLoader;\n+\n+/**\n+ * Configurable ruleset parser. Note that this replaces the API of {@link RulesetsFactoryUtils}\n+ * and {@link RuleSetFactory}. This can be configured using a fluent\n+ * API, see eg {@link #warnDeprecated(boolean)}. To create a list of\n+ * rulesets, use {@link #parseFromResource(String)}.\n+ */\n+public final class RuleSetParser {\n+\n+    ResourceLoader resourceLoader = new ResourceLoader(RuleSetParser.class.getClassLoader());\n+    RulePriority minimumPriority = RulePriority.LOW;\n+    boolean warnDeprecated = true;\n+    boolean enableCompatibility = true;\n+    boolean includeDeprecatedRuleReferences = false;\n+\n+    /**\n+     * Specify that the given classloader should be used to resolve\n+     * paths to external ruleset references. The default uses PMD's\n+     * own classpath.\n+     */\n+    public RuleSetParser loadResourcesWith(ClassLoader classLoader) {\n+        this.resourceLoader = new ResourceLoader(classLoader);\n+        return this;\n+    }\n+\n+    // internal\n+    RuleSetParser loadResourcesWith(ResourceLoader loader) {\n+        this.resourceLoader = loader;\n+        return this;\n+    }\n+\n+    /**\n+     * Filter loaded rules to only those that match or are above\n+     * the given priority. The default is {@link RulePriority#LOW},\n+     * ie, no filtering occurs.\n+     * @return This instance, modified\n+     */\n+    public RuleSetParser filterAbovePriority(RulePriority minimumPriority) {\n+        this.minimumPriority = minimumPriority;\n+        return this;\n+    }\n+\n+    /**\n+     * Log a warning when referencing a deprecated rule.\n+     * This is enabled by default.\n+     * @return This instance, modified\n+     */\n+    public RuleSetParser warnDeprecated(boolean warn) {\n+        this.warnDeprecated = warn;\n+        return this;\n+    }\n+\n+    /**\n+     * Enable translating old rule references to newer ones, if they have\n+     * been moved or renamed. This is enabled by default, if disabled,\n+     * unresolved references will not be translated and will produce an\n+     * error.\n+     * @return This instance, modified\n+     */\n+    public RuleSetParser enableCompatibility(boolean enable) {\n+        this.enableCompatibility = enable;\n+        return this;\n+    }\n+\n+    /**\n+     * Follow deprecated rule references. By default this is off,\n+     * and those references will be ignored (with a warning depending\n+     * on {@link #enableCompatibility(boolean)}).\n+     *\n+     * @return This instance, modified\n+     */\n+    public RuleSetParser includeDeprecatedRuleReferences(boolean enable) {\n+        this.includeDeprecatedRuleReferences = enable;\n+        return this;\n+    }\n+\n+    /**\n+     * Create a new rule set factory, if you have to (that class is deprecated).\n+     * That factory will use the configuration that was set using the setters of this.\n+     */\n+    @Deprecated\n+    public RuleSetFactory toFactory() {\n+        return new RuleSetFactory(this);\n+    }\n+\n+\n+    /**\n+     * Parses and returns a ruleset from its location. The location may\n+     * be a file system path, or a resource path (see {@link #loadResourcesWith(ClassLoader)}).\n+     *\n+     * <p>This replaces {@link RuleSetFactory#createRuleSet(String)},\n+     * but does not split commas.\n+     *\n+     * @param rulesetPath A reference to a single ruleset\n+     *\n+     * @throws RuleSetNotFoundException If the path does not correspond to a resource\n+     */\n+    public RuleSet parseFromResource(String rulesetPath) throws RuleSetNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODI4OTk3OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0NjozM1rOHrXYYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0NjozM1rOHrXYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzg5MA==", "bodyText": "I think, we don't need the try-finally here - the files are opened/closed in the other processFiles method", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515233890", "createdAt": "2020-10-30T16:46:33Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "diffHunk": "@@ -108,25 +115,44 @@ protected RuleSets createRuleSets(RuleSetFactory factory, Report report) {\n     @SuppressWarnings(\"PMD.CloseResource\")\n     // the data sources must only be closed after the threads are finished\n     // this is done manually without a try-with-resources\n+    @Deprecated\n     public void processFiles(RuleSetFactory ruleSetFactory, List<DataSource> files, RuleContext ctx,\n-            List<Renderer> renderers) {\n+                             List<Renderer> renderers) {\n         try {\n             final RuleSets rs = createRuleSets(ruleSetFactory, ctx.getReport());\n-            configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader());\n+            processFiles(rs, files, ctx, renderers);\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODMwMjEyOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0OToyNFrOHrXfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNjozOToyNlrOHrogyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNTc0NA==", "bodyText": "That's an interesting information. At some point, we should define that with a specific exception.\nBut: do we at this position actually know, what file we were analyzing? This is the outer catch, so ctx is maybe the last one. And in case of multi threading, the ctx here is not used at all.... or do I miss something here?\nRuntime Exception are already handled in PmdRunnable and added there as errors to the report... So, I'm not sure, which RuntimeExceptions we would get here...", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515235744", "createdAt": "2020-10-30T16:49:24Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "diffHunk": "@@ -108,25 +115,44 @@ protected RuleSets createRuleSets(RuleSetFactory factory, Report report) {\n     @SuppressWarnings(\"PMD.CloseResource\")\n     // the data sources must only be closed after the threads are finished\n     // this is done manually without a try-with-resources\n+    @Deprecated\n     public void processFiles(RuleSetFactory ruleSetFactory, List<DataSource> files, RuleContext ctx,\n-            List<Renderer> renderers) {\n+                             List<Renderer> renderers) {\n         try {\n             final RuleSets rs = createRuleSets(ruleSetFactory, ctx.getReport());\n-            configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader());\n+            processFiles(rs, files, ctx, renderers);\n+        } finally {\n+            // in case we analyzed files within Zip Files/Jars, we need to close them after\n+            // the analysis is finished\n+            for (DataSource dataSource : files) {\n+                IOUtils.closeQuietly(dataSource);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    // the data sources must only be closed after the threads are finished\n+    // this is done manually without a try-with-resources\n+    public void processFiles(RuleSets rulesets, List<DataSource> files, RuleContext ctx, List<Renderer> renderers) {\n+        try {\n+            reportBrokenRules(ctx.getReport(), rulesets);\n+            configuration.getAnalysisCache().checkValidity(rulesets, configuration.getClassLoader());\n             final SourceCodeProcessor processor = new SourceCodeProcessor(configuration);\n \n             for (final DataSource dataSource : files) {\n                 // this is the real, canonical and absolute filename (not shortened)\n                 String realFileName = dataSource.getNiceFileName(false, null);\n \n-                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rs, processor));\n+                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rulesets, processor));\n             }\n \n             // render base report first - general errors\n             renderReports(renderers, ctx.getReport());\n \n             // then add analysis results per file\n             collectReports(renderers);\n+        } catch (RuntimeException e) {\n+            throw new ContextedRuntimeException(e).addContextValue(\"filename\", String.valueOf(ctx.getSourceCodeFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4OTk1Mg==", "bodyText": "I introduced that as a workaround for PMDTask, because the new entry point hides its RuleContext. Before, PMDTask was querying the RuleContext when there was an exception. So, I don't know if this makes sense, but it should match the current behavior. We can do better in PMD7. I'd like to introduce FileAnalysisException, which is a supertype for eg TokenMgrError and ParseException, and has a file name.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515289952", "createdAt": "2020-10-30T18:08:15Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "diffHunk": "@@ -108,25 +115,44 @@ protected RuleSets createRuleSets(RuleSetFactory factory, Report report) {\n     @SuppressWarnings(\"PMD.CloseResource\")\n     // the data sources must only be closed after the threads are finished\n     // this is done manually without a try-with-resources\n+    @Deprecated\n     public void processFiles(RuleSetFactory ruleSetFactory, List<DataSource> files, RuleContext ctx,\n-            List<Renderer> renderers) {\n+                             List<Renderer> renderers) {\n         try {\n             final RuleSets rs = createRuleSets(ruleSetFactory, ctx.getReport());\n-            configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader());\n+            processFiles(rs, files, ctx, renderers);\n+        } finally {\n+            // in case we analyzed files within Zip Files/Jars, we need to close them after\n+            // the analysis is finished\n+            for (DataSource dataSource : files) {\n+                IOUtils.closeQuietly(dataSource);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    // the data sources must only be closed after the threads are finished\n+    // this is done manually without a try-with-resources\n+    public void processFiles(RuleSets rulesets, List<DataSource> files, RuleContext ctx, List<Renderer> renderers) {\n+        try {\n+            reportBrokenRules(ctx.getReport(), rulesets);\n+            configuration.getAnalysisCache().checkValidity(rulesets, configuration.getClassLoader());\n             final SourceCodeProcessor processor = new SourceCodeProcessor(configuration);\n \n             for (final DataSource dataSource : files) {\n                 // this is the real, canonical and absolute filename (not shortened)\n                 String realFileName = dataSource.getNiceFileName(false, null);\n \n-                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rs, processor));\n+                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rulesets, processor));\n             }\n \n             // render base report first - general errors\n             renderReports(renderers, ctx.getReport());\n \n             // then add analysis results per file\n             collectReports(renderers);\n+        } catch (RuntimeException e) {\n+            throw new ContextedRuntimeException(e).addContextValue(\"filename\", String.valueOf(ctx.getSourceCodeFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNTc0NA=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxNDU3MQ==", "bodyText": "Hm... Maybe PMDTask was/is already wrong?\nFileAnalysisException sounds good.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r515514571", "createdAt": "2020-10-31T16:39:26Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "diffHunk": "@@ -108,25 +115,44 @@ protected RuleSets createRuleSets(RuleSetFactory factory, Report report) {\n     @SuppressWarnings(\"PMD.CloseResource\")\n     // the data sources must only be closed after the threads are finished\n     // this is done manually without a try-with-resources\n+    @Deprecated\n     public void processFiles(RuleSetFactory ruleSetFactory, List<DataSource> files, RuleContext ctx,\n-            List<Renderer> renderers) {\n+                             List<Renderer> renderers) {\n         try {\n             final RuleSets rs = createRuleSets(ruleSetFactory, ctx.getReport());\n-            configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader());\n+            processFiles(rs, files, ctx, renderers);\n+        } finally {\n+            // in case we analyzed files within Zip Files/Jars, we need to close them after\n+            // the analysis is finished\n+            for (DataSource dataSource : files) {\n+                IOUtils.closeQuietly(dataSource);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    // the data sources must only be closed after the threads are finished\n+    // this is done manually without a try-with-resources\n+    public void processFiles(RuleSets rulesets, List<DataSource> files, RuleContext ctx, List<Renderer> renderers) {\n+        try {\n+            reportBrokenRules(ctx.getReport(), rulesets);\n+            configuration.getAnalysisCache().checkValidity(rulesets, configuration.getClassLoader());\n             final SourceCodeProcessor processor = new SourceCodeProcessor(configuration);\n \n             for (final DataSource dataSource : files) {\n                 // this is the real, canonical and absolute filename (not shortened)\n                 String realFileName = dataSource.getNiceFileName(false, null);\n \n-                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rs, processor));\n+                runAnalysis(new PmdRunnable(dataSource, realFileName, renderers, ctx, rulesets, processor));\n             }\n \n             // render base report first - general errors\n             renderReports(renderers, ctx.getReport());\n \n             // then add analysis results per file\n             collectReports(renderers);\n+        } catch (RuntimeException e) {\n+            throw new ContextedRuntimeException(e).addContextValue(\"filename\", String.valueOf(ctx.getSourceCodeFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNTc0NA=="}, "originalCommit": {"oid": "36e55bc2c1d4ea0a41d39fed0b9178d876b3447f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODMyMzM5OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RulesetLoadException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzozMDoxMFrOIECt1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzozMDoxMFrOIECt1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwOTcxOQ==", "bodyText": "That should be RuleSetLoadException (capital Set), to be consistent with all the other usages of RuleSet. I'll change that, when merging.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r541109719", "createdAt": "2020-12-11T17:30:10Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RulesetLoadException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd;\n+\n+import net.sourceforge.pmd.annotation.InternalApi;\n+\n+/**\n+ * An exception that is thrown when something wrong occurs while\n+ * {@linkplain RuleSetLoader loading rulesets}. This may be because the\n+ * XML is not well-formed, does not respect the ruleset schema, is\n+ * not a valid ruleset or is otherwise unparsable.\n+ *\n+ * <p>In the new {@link RuleSetLoader} API, this is thrown instead of\n+ * {@link RuleSetNotFoundException}.\n+ */\n+public final class RulesetLoadException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244ebf6e39a35ae9ede97feee0ad7acf7374109"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODM4NjE3OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0NTo0OVrOIEDSfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0NTo0OVrOIEDSfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExOTEwMA==", "bodyText": "I guess, this suppression and the following comments can be removed, as it is moved down to the new method. I'll test and remove it then.", "url": "https://github.com/pmd/pmd/pull/2635#discussion_r541119100", "createdAt": "2020-12-11T17:45:49Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/processor/AbstractPMDProcessor.java", "diffHunk": "@@ -108,25 +115,37 @@ protected RuleSets createRuleSets(RuleSetFactory factory, Report report) {\n     @SuppressWarnings(\"PMD.CloseResource\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244ebf6e39a35ae9ede97feee0ad7acf7374109"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 252, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}