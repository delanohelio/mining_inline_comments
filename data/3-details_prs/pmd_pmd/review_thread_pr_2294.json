{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTgxNTYx", "number": 2294, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMDowMlrODlhokw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0MToyNlrODpgvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjc0OTYzOnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/cpd/JSPTokenizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMDowMlrOFyeCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTo1NDozN1rOFzkIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTE5NA==", "bodyText": "Hm... seems we lost the feature to skip the BOM...\nThe simplest way would be probably:\nStringBuilder buffer = sourceCode.getCodeBuffer();\nReader reader;\n\nif (buffer.charAt(0) == '\\uFEFF') {\n    // skip BOM if present\n    reader = new CharSequenceReader(buffer.substring(1));\n} else {\n    reader = new CharSequenceReader(buffer);\n}\nreturn new JspTokenManager(reader);", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388465194", "createdAt": "2020-03-05T18:00:02Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/cpd/JSPTokenizer.java", "diffHunk": "@@ -4,38 +4,17 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n+import org.apache.commons.io.input.CharSequenceReader;\n \n-import net.sourceforge.pmd.lang.LanguageRegistry;\n-import net.sourceforge.pmd.lang.LanguageVersionHandler;\n+import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer;\n import net.sourceforge.pmd.lang.TokenManager;\n-import net.sourceforge.pmd.lang.jsp.JspLanguageModule;\n-import net.sourceforge.pmd.lang.jsp.ast.Token;\n-import net.sourceforge.pmd.util.IOUtil;\n+import net.sourceforge.pmd.lang.jsp.ast.JspTokenManager;\n \n-public class JSPTokenizer implements Tokenizer {\n+public class JSPTokenizer extends JavaCCTokenizer {\n \n     @Override\n-    public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder buffer = sourceCode.getCodeBuffer();\n-        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JspLanguageModule.NAME)\n-                .getDefaultVersion().getLanguageVersionHandler();\n-\n-        try (Reader reader = IOUtil.skipBOM(new StringReader(buffer.toString()))) {\n-            TokenManager tokenMgr = languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions())\n-                    .getTokenManager(sourceCode.getFileName(), reader);\n-            Token currentToken = (Token) tokenMgr.getNextToken();\n-\n-            while (currentToken.image.length() > 0) {\n-                tokenEntries.add(new TokenEntry(String.valueOf(currentToken.kind), sourceCode.getFileName(),\n-                        currentToken.beginLine, currentToken.beginColumn, currentToken.endColumn));\n-                currentToken = (Token) tokenMgr.getNextToken();\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        tokenEntries.add(TokenEntry.getEOF());\n+    protected TokenManager getLexerForSource(SourceCode sourceCode) {\n+        return new JspTokenManager(new CharSequenceReader(sourceCode.getCodeBuffer()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMzU3Mg==", "bodyText": "Can we just use IOUtil::skipBOM?", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r389613572", "createdAt": "2020-03-09T11:54:37Z", "author": {"login": "oowekyala"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/cpd/JSPTokenizer.java", "diffHunk": "@@ -4,38 +4,17 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n+import org.apache.commons.io.input.CharSequenceReader;\n \n-import net.sourceforge.pmd.lang.LanguageRegistry;\n-import net.sourceforge.pmd.lang.LanguageVersionHandler;\n+import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer;\n import net.sourceforge.pmd.lang.TokenManager;\n-import net.sourceforge.pmd.lang.jsp.JspLanguageModule;\n-import net.sourceforge.pmd.lang.jsp.ast.Token;\n-import net.sourceforge.pmd.util.IOUtil;\n+import net.sourceforge.pmd.lang.jsp.ast.JspTokenManager;\n \n-public class JSPTokenizer implements Tokenizer {\n+public class JSPTokenizer extends JavaCCTokenizer {\n \n     @Override\n-    public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder buffer = sourceCode.getCodeBuffer();\n-        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JspLanguageModule.NAME)\n-                .getDefaultVersion().getLanguageVersionHandler();\n-\n-        try (Reader reader = IOUtil.skipBOM(new StringReader(buffer.toString()))) {\n-            TokenManager tokenMgr = languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions())\n-                    .getTokenManager(sourceCode.getFileName(), reader);\n-            Token currentToken = (Token) tokenMgr.getNextToken();\n-\n-            while (currentToken.image.length() > 0) {\n-                tokenEntries.add(new TokenEntry(String.valueOf(currentToken.kind), sourceCode.getFileName(),\n-                        currentToken.beginLine, currentToken.beginColumn, currentToken.endColumn));\n-                currentToken = (Token) tokenMgr.getNextToken();\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        tokenEntries.add(TokenEntry.getEOF());\n+    protected TokenManager getLexerForSource(SourceCode sourceCode) {\n+        return new JspTokenManager(new CharSequenceReader(sourceCode.getCodeBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTE5NA=="}, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjc1NTMwOnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMTo0MlrOFyeFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMTo0MlrOFyeFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjA5MA==", "bodyText": "We need to deprecate/internalize first on master.\nWe should directly make the AST node final now\nThe setter setName() can be package-private.", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388466090", "createdAt": "2020-03-05T18:01:42Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTAttribute.java", "diffHunk": "@@ -9,14 +9,10 @@\n \n     private String name;\n \n-    public ASTAttribute(int id) {\n+    ASTAttribute(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5NzI4OnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDeclaration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjoxMlrOFyff6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjoxMlrOFyff6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTE5Mg==", "bodyText": "setName() can be package-private as well", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489192", "createdAt": "2020-03-05T18:46:12Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDeclaration.java", "diffHunk": "@@ -9,14 +9,10 @@\n \n     private String name;\n \n-    public ASTDeclaration(int id) {\n+    ASTDeclaration(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5OTMzOnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeDeclaration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0Njo1MFrOFyfhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0Njo1MFrOFyfhNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTUyNw==", "bodyText": "setName() can be package-private", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489527", "createdAt": "2020-03-05T18:46:50Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeDeclaration.java", "diffHunk": "@@ -12,14 +12,10 @@\n      */\n     private String name;\n \n-    public ASTDoctypeDeclaration(int id) {\n+    ASTDoctypeDeclaration(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkwMTU0OnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeExternalId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NzozMlrOFyfiig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NzozMlrOFyfiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTg2Ng==", "bodyText": "setUri() and setPublicId() can be package-private", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489866", "createdAt": "2020-03-05T18:47:32Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeExternalId.java", "diffHunk": "@@ -17,14 +17,10 @@\n      */\n     private String publicId;\n \n-    public ASTDoctypeExternalId(int id) {\n+    ASTDoctypeExternalId(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkxMzAyOnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDo1NVrOFyfpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDo1NVrOFyfpvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTcxMQ==", "bodyText": "The setters setEmpty, setName, setUnclosed can be package-private as well.", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388491711", "createdAt": "2020-03-05T18:50:55Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElement.java", "diffHunk": "@@ -23,14 +23,10 @@\n      */\n     private boolean unclosed;\n \n-    public ASTElement(int id) {\n+    ASTElement(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkxOTQzOnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirective.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1Mjo0NVrOFyftww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1Mjo0NVrOFyftww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjczOQ==", "bodyText": "The setter \"setName\" can be package-private as well", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388492739", "createdAt": "2020-03-05T18:52:45Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirective.java", "diffHunk": "@@ -12,14 +12,10 @@\n      */\n     private String name;\n \n-    public ASTJspDirective(int id) {\n+    ASTJspDirective(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkyMTU1OnYy", "diffSide": "RIGHT", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirectiveAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoyN1rOFyfvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoyN1rOFyfvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzA5OQ==", "bodyText": "The setters setName and setValue can be package-private as well.", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388493099", "createdAt": "2020-03-05T18:53:27Z", "author": {"login": "adangel"}, "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirectiveAttribute.java", "diffHunk": "@@ -10,14 +10,10 @@\n     private String name;\n     private String value;\n \n-    public ASTJspDirectiveAttribute(int id) {\n+    ASTJspDirectiveAttribute(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0NTMzOnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/cpd/VfTokenizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjozN1rOFyg7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjozN1rOFyg7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjUzOQ==", "bodyText": "We need to skip the BOM to preserve same behavior...", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388512539", "createdAt": "2020-03-05T19:26:37Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/cpd/VfTokenizer.java", "diffHunk": "@@ -4,42 +4,19 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n+import org.apache.commons.io.input.CharSequenceReader;\n \n-import net.sourceforge.pmd.lang.LanguageRegistry;\n-import net.sourceforge.pmd.lang.LanguageVersionHandler;\n+import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer;\n import net.sourceforge.pmd.lang.TokenManager;\n-import net.sourceforge.pmd.lang.vf.VfLanguageModule;\n-import net.sourceforge.pmd.lang.vf.ast.Token;\n-import net.sourceforge.pmd.util.IOUtil;\n+import net.sourceforge.pmd.lang.vf.ast.VfTokenManager;\n \n /**\n  * @author sergey.gorbaty\n- *\n  */\n-public class VfTokenizer implements Tokenizer {\n+public class VfTokenizer extends JavaCCTokenizer {\n \n     @Override\n-    public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder buffer = sourceCode.getCodeBuffer();\n-        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(VfLanguageModule.NAME)\n-                .getDefaultVersion().getLanguageVersionHandler();\n-\n-        try (Reader reader = IOUtil.skipBOM(new StringReader(buffer.toString()))) {\n-            TokenManager tokenMgr = languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions())\n-                    .getTokenManager(sourceCode.getFileName(), reader);\n-            Token currentToken = (Token) tokenMgr.getNextToken();\n-\n-            while (currentToken.image.length() > 0) {\n-                tokenEntries.add(new TokenEntry(String.valueOf(currentToken.kind), sourceCode.getFileName(),\n-                        currentToken.beginLine, currentToken.beginColumn, currentToken.endColumn));\n-                currentToken = (Token) tokenMgr.getNextToken();\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        tokenEntries.add(TokenEntry.getEOF());\n+    protected TokenManager getLexerForSource(SourceCode sourceCode) {\n+        return new VfTokenManager(new CharSequenceReader(sourceCode.getCodeBuffer()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA1MDUzOnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyODowOVrOFyg-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyODowOVrOFyg-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzM4OA==", "bodyText": "The setter \"setName\" can be package-private as well", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388513388", "createdAt": "2020-03-05T19:28:09Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTAttribute.java", "diffHunk": "@@ -5,18 +5,14 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTAttribute extends AbstractVFNode {\n+public class ASTAttribute extends AbstractVfNode {\n \n     private String name;\n \n-    public ASTAttribute(int id) {\n+    ASTAttribute(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA1NTI1OnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDeclaration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyOTozNlrOFyhBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyOTozNlrOFyhBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDE1OA==", "bodyText": "The setter \"setName\" can be package-private as well.", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388514158", "createdAt": "2020-03-05T19:29:36Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDeclaration.java", "diffHunk": "@@ -5,18 +5,14 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTDeclaration extends AbstractVFNode {\n+public class ASTDeclaration extends AbstractVfNode {\n \n     private String name;\n \n-    public ASTDeclaration(int id) {\n+    ASTDeclaration(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA1Nzg2OnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeDeclaration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMDoyNFrOFyhDDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMDoyNFrOFyhDDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDU3Mg==", "bodyText": "The setter \"setName\" can be package-private as well.", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388514572", "createdAt": "2020-03-05T19:30:24Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeDeclaration.java", "diffHunk": "@@ -5,21 +5,17 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTDoctypeDeclaration extends AbstractVFNode {\n+public class ASTDoctypeDeclaration extends AbstractVfNode {\n \n     /**\n      * Name of the document type. Cannot be null.\n      */\n     private String name;\n \n-    public ASTDoctypeDeclaration(int id) {\n+    ASTDoctypeDeclaration(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA2MTQ5OnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeExternalId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMTozMVrOFyhFXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMTozMVrOFyhFXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTE2Nw==", "bodyText": "The setters \"setPublicId\" and \"setUri\" can be package-private", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388515167", "createdAt": "2020-03-05T19:31:31Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeExternalId.java", "diffHunk": "@@ -17,14 +17,10 @@\n      */\n     private String publicId;\n \n-    public ASTDoctypeExternalId(int id) {\n+    ASTDoctypeExternalId(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA2NjUzOnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMzoxM1rOFyhIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMzoxM1rOFyhIjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTk4MA==", "bodyText": "The setters \"setEmpty\", \"setName\", \"setUnclosed\" can be package-private", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388515980", "createdAt": "2020-03-05T19:33:13Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTElement.java", "diffHunk": "@@ -23,14 +23,10 @@\n      */\n     private boolean unclosed;\n \n-    public ASTElement(int id) {\n+    ASTElement(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODE3MDg1OnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTArguments.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMTo1MjozMVrOF4rG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMTo1MjozMVrOF4rG3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MDg0Ng==", "bodyText": "We can remove now @Deprecated / @InternalApi", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r394970846", "createdAt": "2020-03-19T11:52:31Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTArguments.java", "diffHunk": "@@ -6,17 +6,12 @@\n \n import net.sourceforge.pmd.annotation.InternalApi;\n \n-public class ASTArguments extends AbstractVFNode {\n-    @Deprecated\n-    @InternalApi\n-    public ASTArguments(int id) {\n-        super(id);\n-    }\n+public final class ASTArguments extends AbstractVfNode {\n \n     @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f767903b0c9e0f45d48049d566fea12c148c24c7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU0NTU1OnYy", "diffSide": "RIGHT", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/VfTokenManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0MToyNlrOF4u3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozMjowNFrOF4xLag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjQ3Mg==", "bodyText": "Not sure, whether we decided yet: Are the *TokenManager classes internal api or not? The JavaTokenManager isn't...", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r395032472", "createdAt": "2020-03-19T13:41:26Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/VfTokenManager.java", "diffHunk": "@@ -23,10 +23,10 @@\n @Deprecated\n @InternalApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f767903b0c9e0f45d48049d566fea12c148c24c7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MDMxNA==", "bodyText": "I'll remove @Deprecated and keep @InternalApi for now...", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r395070314", "createdAt": "2020-03-19T14:32:04Z", "author": {"login": "adangel"}, "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/VfTokenManager.java", "diffHunk": "@@ -23,10 +23,10 @@\n @Deprecated\n @InternalApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjQ3Mg=="}, "originalCommit": {"oid": "f767903b0c9e0f45d48049d566fea12c148c24c7"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 505, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}