{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODg2NTU2", "number": 2641, "title": "[java] AvoidThrowingNullPointerException marks all NullPointerException\u2026", "bodyText": "\u2026 objects as wrong, whether or not thrown\nDescribe the PR\nSeparate java class has been added for the rule AvoidThrowingNullPointerException. In this implementation NPEs are marked as wrong only in case they are thrown. NPE allocations are tracked and rule violation is detected even if intermediate variable has been used.\nRelated issues\n\n\nFixes #2580\n\nReady?\n\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-07-14T13:37:51Z", "url": "https://github.com/pmd/pmd/pull/2641", "merged": true, "mergeCommit": {"oid": "892b16c8055b74791cd2cb74f8655cf32af981fd"}, "closed": true, "closedAt": "2020-07-21T18:12:56Z", "author": {"login": "Drofff"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc01jFXAH2gAyNDQ4ODg2NTU2OjA2MWM5NjU2Y2NkYjgyOTUyNmE2YWRiMWEwMWE3MWI4M2RlNDljZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3KDT3gFqTQ1MjY5NzQ1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "061c9656ccdb829526a6adb1a01a71b83de49cd6", "author": {"user": {"login": "Drofff", "name": "Mykhailo Palahuta"}}, "url": "https://github.com/pmd/pmd/commit/061c9656ccdb829526a6adb1a01a71b83de49cd6", "committedDate": "2020-07-14T12:53:26Z", "message": "[java]AvoidThrowingNullPointerException marks all NullPointerException objects as wrong, whether or not thrown (2580)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "author": {"user": {"login": "Drofff", "name": "Mykhailo Palahuta"}}, "url": "https://github.com/pmd/pmd/commit/65e37cadca36e93611578ac8a3fb3b9129fdfc89", "committedDate": "2020-07-16T09:37:01Z", "message": "AvoidThrowingNullPointerException: addViolation usage fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODUxNDc0", "url": "https://github.com/pmd/pmd/pull/2641#pullrequestreview-450851474", "createdAt": "2020-07-17T17:54:28Z", "commit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NDoyOFrOGzcDCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowNjozNFrOGzcb7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDA4OA==", "bodyText": "With returning here just data instead of super.visit(body, data), we don't visit inner classes.\nSince in this rule, we only visit one type, we can use rulechain: https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain\nCould you please add the call to addRuleChainVisit(ASTClassOrInterfaceBody.class) in the constructor of this rule?\nThat explains, why we don't report anymore e.g. this violation: https://github.com/spring-projects/spring-framework/blob/v5.0.6.RELEASE/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java#L1431\nsee https://chunk.io/pmd/032e1995017b4362ab14446dca0ee561/diff/spring-framework/index.html for the full differences - some missing violations are ok, but some are now false negatives...", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456590088", "createdAt": "2020-07-17T17:54:28Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDI2NA==", "bodyText": "We are finding here allocation in all methods. It could be a case, where one method creates a NPE and in another method some variable is thrown - it happens to have the same name (valid, because in a different method), but it might be a different exception, e.g.:\npublic void bar() {\n   NullPointerException e = new NullPointerException();\n   e.printStackTrace();\n}\n\npublic void foo() {\n   RuntimeException e = new RuntimeException();\n   throw e;\n}\nCould you please add this as an additional test case?\nMaybe it's better to visit ASTMethodDeclaration and ASTConstructorDeclaration instead of the whole class via ASTClassOrInterfaceBody. If we change that, we need to add both classes as rule chain visits.", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456594264", "createdAt": "2020-07-17T18:01:55Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NTQxOA==", "bodyText": "This can be done easier: return allocation.getType() - this uses type resolution and should work.", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456595418", "createdAt": "2020-07-17T18:04:17Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);\n+        List<String> npeInstances = new ArrayList<>();\n+        for (ASTAllocationExpression allocation : allocations) {\n+            if (allocatesNullPointerException(allocation)) {\n+                String assignedVarName = getNameOfAssignedVariable(allocation);\n+                npeInstances.add(assignedVarName);\n+            }\n+        }\n+        return npeInstances;\n+    }\n+\n+    private boolean allocatesNullPointerException(ASTAllocationExpression allocation) {\n+        Class<?> allocatedType = getAllocatedInstanceType(allocation);\n+        return allocatedType != null && NullPointerException.class.isAssignableFrom(allocatedType);\n+    }\n+\n+    private Class<?> getAllocatedInstanceType(ASTAllocationExpression allocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NjQ2MQ==", "bodyText": "Do we also detect, if someone does this? throw new java.lang.NullPointerException() - actually, would be a bit weird, if someone writes it that way, but still....", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456596461", "createdAt": "2020-07-17T18:06:34Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);\n+        List<String> npeInstances = new ArrayList<>();\n+        for (ASTAllocationExpression allocation : allocations) {\n+            if (allocatesNullPointerException(allocation)) {\n+                String assignedVarName = getNameOfAssignedVariable(allocation);\n+                npeInstances.add(assignedVarName);\n+            }\n+        }\n+        return npeInstances;\n+    }\n+\n+    private boolean allocatesNullPointerException(ASTAllocationExpression allocation) {\n+        Class<?> allocatedType = getAllocatedInstanceType(allocation);\n+        return allocatedType != null && NullPointerException.class.isAssignableFrom(allocatedType);\n+    }\n+\n+    private Class<?> getAllocatedInstanceType(ASTAllocationExpression allocation) {\n+        List<ASTClassOrInterfaceType> allocatedTypes = allocation\n+                .findDescendantsOfType(ASTClassOrInterfaceType.class);\n+        return allocatedTypes.isEmpty() ? null : allocatedTypes.get(0).getType();\n+    }\n+\n+    private String getNameOfAssignedVariable(ASTAllocationExpression allocation) {\n+        List<ASTVariableDeclarator> variableDeclarators = allocation.getParent()\n+                .findDescendantsOfType(ASTVariableDeclarator.class);\n+        return variableDeclarators.isEmpty() ? null : variableDeclarators.get(0).getName();\n+    }\n+\n+    private boolean throwsNullPointerException(ASTThrowStatement throwStatement, List<String> npeInstances) {\n+        String thrownImage = throwStatement.getFirstClassOrInterfaceTypeImage();\n+        return \"NullPointerException\".equals(thrownImage) || npeInstances.contains(thrownImage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68f90687afdf65e223386c6859193d9c229b6982", "author": {"user": {"login": "Drofff", "name": "Mykhailo Palahuta"}}, "url": "https://github.com/pmd/pmd/commit/68f90687afdf65e223386c6859193d9c229b6982", "committedDate": "2020-07-21T11:54:23Z", "message": "AvoidThrowingNullPointerException: NPE instances tracking fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892b16c8055b74791cd2cb74f8655cf32af981fd", "author": {"user": {"login": "Drofff", "name": "Mykhailo Palahuta"}}, "url": "https://github.com/pmd/pmd/commit/892b16c8055b74791cd2cb74f8655cf32af981fd", "committedDate": "2020-07-21T12:56:44Z", "message": "AvoidThrowingNullPointerException: isNullPointerException usage fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjk3NDUy", "url": "https://github.com/pmd/pmd/pull/2641#pullrequestreview-452697452", "createdAt": "2020-07-21T17:54:35Z", "commit": {"oid": "892b16c8055b74791cd2cb74f8655cf32af981fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}