{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjM5MzA3", "number": 2934, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNDo0NDo1NFrOE-Rcww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNDo0NDo1NFrOE-Rcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzMzMDU5OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/CompareObjectsWithEquals.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNDo0NDo1NFrOH7ZnUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozMjoxMVrOH_azRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA==", "bodyText": "In #2899 I considered this legal only in equals method:\nhttps://github.com/pmd/pmd/pull/2899/files#r532047509\nShould we do that on master too?", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r532047698", "createdAt": "2020-11-28T14:44:54Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/CompareObjectsWithEquals.xml", "diffHunk": "@@ -207,6 +236,79 @@ public class CompareWithEqualsTest {\n     {\n         return a == b;\n     }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 False negative - class with fields</description>\n+        <expected-problems>4</expected-problems>\n+        <expected-linenumbers>8,9,10,11</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return  a == b // violation\n+             && this.a == b // violation\n+             && a != this.b // violation\n+             && this.a == this.b // violation\n+             && a.equals(b) // ok\n+             && this.a.equals(this.b); // ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 comparison with null is valid and with primitive literals</description>\n+        <expected-problems>2</expected-problems>\n+        <expected-linenumbers>18,19</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return a == null // ok\n+             && this.a == null; // ok\n+    }\n+\n+    void test2(StringBuilder sb) {\n+        if (sb != null) { } // ok\n+    }\n+\n+    public void bar(Integer x, Integer y) {\n+        if (x == 1) { } // ok\n+        if (x == y) { } // not ok! only works -128<x<127 dependent on Integer caching\n+        if (x == \"String\") { } // not ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 this and class should be ignored</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    void test(Object o) {\n+        if (this == o) { } // should be allowed, since this is a often used pattern in Object::equals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02135513c9ed63338e7d06e83e4b01230fe4b54e"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzODc4MA==", "bodyText": "Hm... good question. I think, I considered \"this\" similar to \"null\", and didn't think longer about it (null kind of a keyword like this).\nMaybe we should really restrict that to the equals method... Like I've written in the comment :) Yes, let's do that.", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r536238780", "createdAt": "2020-12-04T16:53:22Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/CompareObjectsWithEquals.xml", "diffHunk": "@@ -207,6 +236,79 @@ public class CompareWithEqualsTest {\n     {\n         return a == b;\n     }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 False negative - class with fields</description>\n+        <expected-problems>4</expected-problems>\n+        <expected-linenumbers>8,9,10,11</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return  a == b // violation\n+             && this.a == b // violation\n+             && a != this.b // violation\n+             && this.a == this.b // violation\n+             && a.equals(b) // ok\n+             && this.a.equals(this.b); // ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 comparison with null is valid and with primitive literals</description>\n+        <expected-problems>2</expected-problems>\n+        <expected-linenumbers>18,19</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return a == null // ok\n+             && this.a == null; // ok\n+    }\n+\n+    void test2(StringBuilder sb) {\n+        if (sb != null) { } // ok\n+    }\n+\n+    public void bar(Integer x, Integer y) {\n+        if (x == 1) { } // ok\n+        if (x == y) { } // not ok! only works -128<x<127 dependent on Integer caching\n+        if (x == \"String\") { } // not ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 this and class should be ignored</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    void test(Object o) {\n+        if (this == o) { } // should be allowed, since this is a often used pattern in Object::equals.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA=="}, "originalCommit": {"oid": "02135513c9ed63338e7d06e83e4b01230fe4b54e"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MTQ0NQ==", "bodyText": "I've fixed that with 7f299c4 on master.", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r536261445", "createdAt": "2020-12-04T17:32:11Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/CompareObjectsWithEquals.xml", "diffHunk": "@@ -207,6 +236,79 @@ public class CompareWithEqualsTest {\n     {\n         return a == b;\n     }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 False negative - class with fields</description>\n+        <expected-problems>4</expected-problems>\n+        <expected-linenumbers>8,9,10,11</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return  a == b // violation\n+             && this.a == b // violation\n+             && a != this.b // violation\n+             && this.a == this.b // violation\n+             && a.equals(b) // ok\n+             && this.a.equals(this.b); // ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 comparison with null is valid and with primitive literals</description>\n+        <expected-problems>2</expected-problems>\n+        <expected-linenumbers>18,19</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return a == null // ok\n+             && this.a == null; // ok\n+    }\n+\n+    void test2(StringBuilder sb) {\n+        if (sb != null) { } // ok\n+    }\n+\n+    public void bar(Integer x, Integer y) {\n+        if (x == 1) { } // ok\n+        if (x == y) { } // not ok! only works -128<x<127 dependent on Integer caching\n+        if (x == \"String\") { } // not ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 this and class should be ignored</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    void test(Object o) {\n+        if (this == o) { } // should be allowed, since this is a often used pattern in Object::equals.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA=="}, "originalCommit": {"oid": "02135513c9ed63338e7d06e83e4b01230fe4b54e"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 215, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}