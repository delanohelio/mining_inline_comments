{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTE5NDYx", "number": 2396, "title": "[apex] New rule: field declarations should be at start", "bodyText": "Before submitting a PR, please check that:\n\n The PR is submitted against master. The PMD team will merge back to support branches as needed.\n ./mvnw clean verify passes. This will build and test PMD, execute PMD and checkstyle rules. Check this for more info\n\nPR Description:\nA rule discussed in #2322 was field declarations should be at the start of a class. This adds that rule.\nI first tried to implement this using an xpath rule, but unfortunately the apex parser seems to always put all the field definitions first in the AST, so I had to resort to using line number information and writing the rule in java.", "createdAt": "2020-04-01T10:56:36Z", "url": "https://github.com/pmd/pmd/pull/2396", "merged": true, "mergeCommit": {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229"}, "closed": true, "closedAt": "2020-04-04T16:31:15Z", "author": {"login": "gwilymatgearset"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTVFatAH2gAyMzk2OTE5NDYxOjhhY2I2Mzg3MGNjNjE0MzEzMDE5MmVlNzEwMjk1OWJkZTI2ZGE5NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUXVRSgFqTM4NzY5NzIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8acb63870cc6143130192ee7102959bde26da94b", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/8acb63870cc6143130192ee7102959bde26da94b", "committedDate": "2020-04-01T10:24:34Z", "message": "Add basic implmentation of FieldDeclarationsShouldBeAtStart for apex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d62a1f984094621c5450e727f671ec5d523c6ec", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/1d62a1f984094621c5450e727f671ec5d523c6ec", "committedDate": "2020-04-01T10:28:14Z", "message": "Add rule definition in codestyle.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f0dc27a4a77514ae73665823761cb9950f235fb", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/3f0dc27a4a77514ae73665823761cb9950f235fb", "committedDate": "2020-04-01T10:47:32Z", "message": "Add tests for apex field declarations should be at start"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/504cf440a32023d95e85488debcdde4a33f1df9d", "committedDate": "2020-04-01T10:55:50Z", "message": "Inculde field name in violation message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjU4NzY2", "url": "https://github.com/pmd/pmd/pull/2396#pullrequestreview-386658766", "createdAt": "2020-04-02T17:46:48Z", "commit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Njo0OFrOF_2pUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowMToyOVrOF_3MHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5OTkyMg==", "bodyText": "You could just use a Comparator<Node> here, defining it like so: Comparator.<Node>comparingInt(Node::getBeginLine).thenComparing(Node::getBeginColumn)", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402499922", "createdAt": "2020-04-02T17:46:48Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {\n+                addViolation(data, field, field.getName());\n+            }\n+        }\n+\n+        return data;\n+    }\n+\n+    private static class NodeAndLocation implements Comparable<NodeAndLocation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDQxNA==", "bodyText": "Then just do min(nodeComparator), with the comparator you defined, so firstMethod would be an Optional<ASTMethod>", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402500414", "createdAt": "2020-04-02T17:47:38Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMTU0MQ==", "bodyText": "Then here just do nodeComparator.compare(field, firstMethod.get()) > 0\nWith all of this you can get rid of NodeAndLocation", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402501541", "createdAt": "2020-04-02T17:49:23Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNDk5Nw==", "bodyText": "Looking for descendants is a bad idea here. It will pick up on fields of any nested class. I think a test case should be added for that too.", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402504997", "createdAt": "2020-04-02T17:55:17Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNjM5NA==", "bodyText": "Similarly, this will find all methods in the subtree, not just the methods of this class.\nFor both these problems, I think using findChildrenOfType would be enough.\nThere is also this problem: what if there are no methods, but a nested class? Fields should still be at the start right?", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402506394", "createdAt": "2020-04-02T17:57:26Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwODgzMA==", "bodyText": "This rule could use the rulechain, since you're only visiting one node type, and the rule is not stateful. See https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402508830", "createdAt": "2020-04-02T18:01:29Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTM3MjAz", "url": "https://github.com/pmd/pmd/pull/2396#pullrequestreview-387137203", "createdAt": "2020-04-03T10:28:09Z", "commit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODowOVrOGAPsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODowOVrOGAPsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMDIyMw==", "bodyText": "Should be \"6.23.0\" \ud83d\ude04", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402910223", "createdAt": "2020-04-03T10:28:09Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "diffHunk": "@@ -365,4 +365,27 @@ while (true) {  // preferred approach\n         </example>\n     </rule>\n \n+    <rule name=\"FieldDeclarationsShouldBeAtStart\"\n+          language=\"apex\"\n+          since=\"5.23.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c13702e3971eead42526d420f8e8489749ff4e7", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/9c13702e3971eead42526d420f8e8489749ff4e7", "committedDate": "2020-04-03T12:38:40Z", "message": "Massively simplify rule with custom comparator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb8e7eabd8a08d95bfe5ded004f7d3d7d73ff20b", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/eb8e7eabd8a08d95bfe5ded004f7d3d7d73ff20b", "committedDate": "2020-04-03T12:45:34Z", "message": "Fix field declaration location rule around nested classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1359c88e90314e7aad49f5bc5335275e7371e8ab", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/1359c88e90314e7aad49f5bc5335275e7371e8ab", "committedDate": "2020-04-03T12:48:31Z", "message": "Also produce errors in inner classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1ffa5a55e17cd8a03ce992d588a2653577a6ac", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/5d1ffa5a55e17cd8a03ce992d588a2653577a6ac", "committedDate": "2020-04-03T12:57:34Z", "message": "Correctly detect fields after inner classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeac5796614a83d2ebc170be33bb631ae4893ccf", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/eeac5796614a83d2ebc170be33bb631ae4893ccf", "committedDate": "2020-04-03T12:58:49Z", "message": "Correctly detect properties before fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "292bcbbf04eb395589ef1186ea1b2a1f6737bdf9", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/292bcbbf04eb395589ef1186ea1b2a1f6737bdf9", "committedDate": "2020-04-03T14:01:56Z", "message": "Correctly detect that fields should go before block statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e078366590b5efe2fc336c48fd863ded3e4b521", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/9e078366590b5efe2fc336c48fd863ded3e4b521", "committedDate": "2020-04-03T14:10:30Z", "message": "Correctly detect fields that appear after static initialization blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aae0e2ebf6dc4466b3b74a1d986fe61361779f4", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/4aae0e2ebf6dc4466b3b74a1d986fe61361779f4", "committedDate": "2020-04-03T14:16:52Z", "message": "Fix checkstyle violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1331eec2084d349b45ca4968603948131576af74", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/1331eec2084d349b45ca4968603948131576af74", "committedDate": "2020-04-03T14:17:01Z", "message": "Make comment clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58185fce2f70c8efa5efa93ef26beeca1dfec0bd", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/58185fce2f70c8efa5efa93ef26beeca1dfec0bd", "committedDate": "2020-04-03T14:17:29Z", "message": "Extract constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e94db8bf2254271114b1cb85b84fc9890e2a412c", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/e94db8bf2254271114b1cb85b84fc9890e2a412c", "committedDate": "2020-04-03T14:18:22Z", "message": "Make rule a RuleChain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229", "author": {"user": {"login": "gwilymatgearset", "name": null}}, "url": "https://github.com/pmd/pmd/commit/6a70bda5e6abff63e753457d5a4016792fd35229", "committedDate": "2020-04-03T14:19:12Z", "message": "Should be 6.23.0 for release"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Njk3MjE4", "url": "https://github.com/pmd/pmd/pull/2396#pullrequestreview-387697218", "createdAt": "2020-04-04T12:55:30Z", "commit": {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo1NTozMFrOGAxr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo1NTozMFrOGAxr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NzI1OA==", "bodyText": "I'll move that up when merging so that the rules are sorted alphabetically. This helps to keep the files organized.", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r403467258", "createdAt": "2020-04-04T12:55:30Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "diffHunk": "@@ -365,4 +365,27 @@ while (true) {  // preferred approach\n         </example>\n     </rule>\n \n+    <rule name=\"FieldDeclarationsShouldBeAtStart\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4752, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}