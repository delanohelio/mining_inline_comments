{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjQ2MTMz", "number": 2280, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozNzoyNVrODfl7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MzozNFrODfmF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUzODk1OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/test/java/net/sourceforge/pmd/cpd/token/internal/BaseTokenFilterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozNzoyNVrOFpYlbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozNzoyNVrOFpYlbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODczMw==", "bodyText": "To avoid the dependency to guava, we can also write\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<String> iterator = ImmutableList.of(\"a\", \"b\", \"c\").iterator();\n          \n          \n            \n                    Iterator<String> iterator = Collections.unmodifiableList(Arrays.asList(\"a\", \"b\", \"c\")).iterator();", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378938733", "createdAt": "2020-02-13T15:37:25Z", "author": {"login": "adangel"}, "path": "pmd-core/src/test/java/net/sourceforge/pmd/cpd/token/internal/BaseTokenFilterTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd.token.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.TokenManager;\n+import net.sourceforge.pmd.lang.ast.GenericToken;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public class BaseTokenFilterTest {\n+\n+    class StringToken implements GenericToken {\n+\n+        private final String text;\n+\n+        StringToken(final String text) {\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public GenericToken getNext() {\n+            return null;\n+        }\n+\n+        @Override\n+        public GenericToken getPreviousComment() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getImage() {\n+            return text;\n+        }\n+\n+        @Override\n+        public int getBeginLine() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getEndLine() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getBeginColumn() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getEndColumn() {\n+            return 0;\n+        }\n+    }\n+\n+    class StringTokenManager implements TokenManager {\n+\n+        Iterator<String> iterator = ImmutableList.of(\"a\", \"b\", \"c\").iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDU0NjMwOnYy", "diffSide": "RIGHT", "path": "pmd-apex-jorje/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozODo0OFrOFpYp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozOTozNlrOFvNQ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzOTg2NQ==", "bodyText": "why android?", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378939865", "createdAt": "2020-02-13T15:38:48Z", "author": {"login": "adangel"}, "path": "pmd-apex-jorje/pom.xml", "diffHunk": "@@ -81,7 +81,7 @@\n     <dependency>\n         <groupId>com.google.guava</groupId>\n         <artifactId>guava</artifactId>\n-        <version>26.0-jre</version>\n+        <version>26.0-android</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2OTY1MQ==", "bodyText": "For pmd-core, the JRE variant of Guava cannot be used because it requires Java 8. The Android variant, despite the name, only means that JRE7 can be targeted.\nIn order to avoid clashes between pmd-core and pmd-apex-jorje, I also adjusted the latter to use the Android variant. Once PMD targets JRE8, this can be reverted.\nI believe the JRE and Android variants should be mostly equivalent.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378969651", "createdAt": "2020-02-13T16:24:02Z", "author": {"login": "maikelsteneker"}, "path": "pmd-apex-jorje/pom.xml", "diffHunk": "@@ -81,7 +81,7 @@\n     <dependency>\n         <groupId>com.google.guava</groupId>\n         <artifactId>guava</artifactId>\n-        <version>26.0-jre</version>\n+        <version>26.0-android</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzOTg2NQ=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDcwNg==", "bodyText": "I've reverted this change. It shouldn't be necessary anymore, since pmd-core is no longer using Guava.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r385044706", "createdAt": "2020-02-27T10:39:36Z", "author": {"login": "maikelsteneker"}, "path": "pmd-apex-jorje/pom.xml", "diffHunk": "@@ -81,7 +81,7 @@\n     <dependency>\n         <groupId>com.google.guava</groupId>\n         <artifactId>guava</artifactId>\n-        <version>26.0-jre</version>\n+        <version>26.0-android</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzOTg2NQ=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDU1MTEzOnYy", "diffSide": "RIGHT", "path": "pmd-core/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MDowMVrOFpYszA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0MDoxOVrOFvNSUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYyMA==", "bodyText": "Do we really need this dependency? I think, you added it to use AbstractIterator. Would it be possible to write the RemainingTokensIterator without this?", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378940620", "createdAt": "2020-02-13T15:40:01Z", "author": {"login": "adangel"}, "path": "pmd-core/pom.xml", "diffHunk": "@@ -186,6 +186,12 @@\n             <artifactId>system-rules</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3MDQwMw==", "bodyText": "The reason was indeed to be able to use the AbstractIterator. In my opinion, this makes the code much more readable. However, if the Guava dependency is undesirable, it should be possible to rewrite the iterator without needing Guava.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378970403", "createdAt": "2020-02-13T16:25:13Z", "author": {"login": "maikelsteneker"}, "path": "pmd-core/pom.xml", "diffHunk": "@@ -186,6 +186,12 @@\n             <artifactId>system-rules</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYyMA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5NDg0Ng==", "bodyText": "Note that the PMD 7 branch has an AbstractIterator class already. I based it off the kotlin stdlib, but it looks like sensibly the same. We could just backport it, I don't think it needs Java 8\n\n  \n    \n      pmd/pmd-core/src/main/java/net/sourceforge/pmd/internal/util/IteratorUtil.java\n    \n    \n         Line 361\n      in\n      01c7b12\n    \n    \n    \n    \n\n        \n          \n           private abstract static class AbstractIterator<T> implements Iterator<T> {", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r379094846", "createdAt": "2020-02-13T20:15:31Z", "author": {"login": "oowekyala"}, "path": "pmd-core/pom.xml", "diffHunk": "@@ -186,6 +186,12 @@\n             <artifactId>system-rules</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYyMA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NTA3Mw==", "bodyText": "@oowekyala Good suggestion! I've backported this class and adjusted my implementation to use it.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r385045073", "createdAt": "2020-02-27T10:40:19Z", "author": {"login": "maikelsteneker"}, "path": "pmd-core/pom.xml", "diffHunk": "@@ -186,6 +186,12 @@\n             <artifactId>system-rules</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYyMA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDU2NTY5OnYy", "diffSide": "RIGHT", "path": "pmd-cs/src/main/antlr4/net/sourceforge/pmd/lang/cs/antlr4/CSharpLexer.g4", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MzozNVrOFpY2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoyNToyM1rOFu-o4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0Mjk5OA==", "bodyText": "Can we simply use this? According to the faq https://www.eclipse.org/legal/epl-2.0/faq.php#h.5ucozq4kvv7o we would need the permission from the owner in order to include it here as BSD...", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378942998", "createdAt": "2020-02-13T15:43:35Z", "author": {"login": "adangel"}, "path": "pmd-cs/src/main/antlr4/net/sourceforge/pmd/lang/cs/antlr4/CSharpLexer.g4", "diffHunk": "@@ -0,0 +1,1105 @@\n+// Eclipse Public License - v 1.0, http://www.eclipse.org/legal/epl-v10.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MDU1OQ==", "bodyText": "Regrettably, I didn't realize that this might not be allowed. I'll contact the original author to ask for permission.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378980559", "createdAt": "2020-02-13T16:40:41Z", "author": {"login": "maikelsteneker"}, "path": "pmd-cs/src/main/antlr4/net/sourceforge/pmd/lang/cs/antlr4/CSharpLexer.g4", "diffHunk": "@@ -0,0 +1,1105 @@\n+// Eclipse Public License - v 1.0, http://www.eclipse.org/legal/epl-v10.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0Mjk5OA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTI2MA==", "bodyText": "I am glad to hear that my grammar is useful in this context. You have my permission.", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r384769260", "createdAt": "2020-02-26T21:14:39Z", "author": {"login": "ChristianWulf"}, "path": "pmd-cs/src/main/antlr4/net/sourceforge/pmd/lang/cs/antlr4/CSharpLexer.g4", "diffHunk": "@@ -0,0 +1,1105 @@\n+// Eclipse Public License - v 1.0, http://www.eclipse.org/legal/epl-v10.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0Mjk5OA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTA5MA==", "bodyText": "That is great to hear, thank you very much!", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r384805090", "createdAt": "2020-02-26T22:25:23Z", "author": {"login": "maikelsteneker"}, "path": "pmd-cs/src/main/antlr4/net/sourceforge/pmd/lang/cs/antlr4/CSharpLexer.g4", "diffHunk": "@@ -0,0 +1,1105 @@\n+// Eclipse Public License - v 1.0, http://www.eclipse.org/legal/epl-v10.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0Mjk5OA=="}, "originalCommit": {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 486, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}