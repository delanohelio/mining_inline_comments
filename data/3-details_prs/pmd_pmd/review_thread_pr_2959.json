{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMzE4MTE5", "number": 2959, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzowNzoyN1rOFD2Jeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QxNzoxMDoyNVrOFPxe8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTc3MjEwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzowNzoyN1rOIDr0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0MDozNVrOIFvIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ==", "bodyText": "You could just loop over node.findChildrenOfType(ASTMethod.class). This removes the statefulness in the rule, and avoids exploring methods of nested classes (which would cause bugs). Stateless rules can use the rulechain, which makes them faster.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r540734501", "createdAt": "2020-12-11T07:07:27Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    private boolean containsEquals = false;\n+\n+    private boolean containsHashCode = false;\n+\n+    private ApexNode<?> nodeFound = null;\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMDgxMA==", "bodyText": "Also it may be better to report not on the class node but on the method that's alone.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r540830810", "createdAt": "2020-12-11T10:03:31Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    private boolean containsEquals = false;\n+\n+    private boolean containsHashCode = false;\n+\n+    private ApexNode<?> nodeFound = null;\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ=="}, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NjA3NQ==", "bodyText": "done! thanks for the suggestion.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r542886075", "createdAt": "2020-12-14T22:40:35Z", "author": {"login": "recdevs"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    private boolean containsEquals = false;\n+\n+    private boolean containsHashCode = false;\n+\n+    private ApexNode<?> nodeFound = null;\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ=="}, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzczNTM5OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxOTozNVrOID9Vfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxOTozNVrOID9Vfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTU2Nw==", "bodyText": "Please change that to 6.31.0", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r541021567", "createdAt": "2020-12-11T15:19:35Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "diffHunk": "@@ -291,6 +291,40 @@ public void bar(Integer a, Integer b) {\n     // empty!\n   }\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+        <rule name=\"OverrideBothEqualsAndHashcode\"\n+          language=\"apex\"\n+          since=\"6.3.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc0OTc4OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyMjozMFrOID9d8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0MTozNVrOIFvMkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzcyOA==", "bodyText": "We should adjust this description for apex. Apex is not java, it is only similar.\nPlease refer to https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_collections_maps_keys_userdefined.htm?search_text=hashCode\nThe equals method looks like this in apex:\npublic Boolean equals(Object other) { }\nHashCode method looks like this:\npublic Integer hashCode() { }\nNote: Boolean instead of boolean, Integer instead of int.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r541023728", "createdAt": "2020-12-11T15:22:30Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "diffHunk": "@@ -291,6 +291,40 @@ public void bar(Integer a, Integer b) {\n     // empty!\n   }\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+        <rule name=\"OverrideBothEqualsAndHashcode\"\n+          language=\"apex\"\n+          since=\"6.3.0\"\n+          message=\"Ensure you override both equals() and hashCode()\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.errorprone.OverrideBothEqualsAndHashcodeRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode\">\n+        <description>\n+Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNDg2MA==", "bodyText": "That means, you need to adjust the examples. The tests use \"Integer\" as the result type of hashCode. Does Apex differ between \"Boolean\" and \"boolean\"?\nEither way, I'd still use \"Boolean\" in the tests to be consistent with the reference documentation. There is the system class \"Boolean\", which wraps the primitive datatype \"Boolean\": https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_primitives.htm and https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_boolean.htm#apex_methods_system_boolean", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r541024860", "createdAt": "2020-12-11T15:24:12Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "diffHunk": "@@ -291,6 +291,40 @@ public void bar(Integer a, Integer b) {\n     // empty!\n   }\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+        <rule name=\"OverrideBothEqualsAndHashcode\"\n+          language=\"apex\"\n+          since=\"6.3.0\"\n+          message=\"Ensure you override both equals() and hashCode()\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.errorprone.OverrideBothEqualsAndHashcodeRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode\">\n+        <description>\n+Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzcyOA=="}, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NzM2NA==", "bodyText": "Ah, good catch! Thanks. will update", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r542677364", "createdAt": "2020-12-14T19:24:16Z", "author": {"login": "recdevs"}, "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "diffHunk": "@@ -291,6 +291,40 @@ public void bar(Integer a, Integer b) {\n     // empty!\n   }\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+        <rule name=\"OverrideBothEqualsAndHashcode\"\n+          language=\"apex\"\n+          since=\"6.3.0\"\n+          message=\"Ensure you override both equals() and hashCode()\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.errorprone.OverrideBothEqualsAndHashcodeRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode\">\n+        <description>\n+Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzcyOA=="}, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NzA1Ng==", "bodyText": "updated version number & primitive names", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r542887056", "createdAt": "2020-12-14T22:41:35Z", "author": {"login": "recdevs"}, "path": "pmd-apex/src/main/resources/category/apex/errorprone.xml", "diffHunk": "@@ -291,6 +291,40 @@ public void bar(Integer a, Integer b) {\n     // empty!\n   }\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+        <rule name=\"OverrideBothEqualsAndHashcode\"\n+          language=\"apex\"\n+          since=\"6.3.0\"\n+          message=\"Ensure you override both equals() and hashCode()\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.errorprone.OverrideBothEqualsAndHashcodeRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode\">\n+        <description>\n+Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzcyOA=="}, "originalCommit": {"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgxOTQxOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NTo1NFrOIF_zaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NTo1NFrOIF_zaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean isEquals(ASTMethod node) {\n          \n          \n            \n                private boolean isEquals(ASTMethod node) {\n          \n      \n    \n    \n  \n\nIn Java Boolean is rarely used over boolean. The former has its value boxed onto the heap.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543159145", "createdAt": "2020-12-15T08:55:54Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);\n+\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private Boolean isEquals(ASTMethod node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzA5MjQwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1NDoxNlrOIGCUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoyMzoyMVrOILVckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMDQyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean isHashCode(ASTMethod node) {\n          \n          \n            \n                private boolean isHashCode(ASTMethod node) {", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543200421", "createdAt": "2020-12-15T09:54:16Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);\n+\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private Boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);\n+    }\n+\n+    private Boolean isHashCode(ASTMethod node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjYyNg==", "bodyText": "sorry. force of habit from working in Apex :)", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r548756626", "createdAt": "2020-12-24T22:23:21Z", "author": {"login": "recdevs"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);\n+\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private Boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);\n+    }\n+\n+    private Boolean isHashCode(ASTMethod node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMDQyMQ=="}, "originalCommit": {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzEwMDI0OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1NTo1MlrOIGCZbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1NTo1MlrOIGCZbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMTY0Nw==", "bodyText": "In order to use the rulechain, you need to remove this call, and declare a constructor that calls addRuleChainVisit(ASTUserClass.class);", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543201647", "createdAt": "2020-12-15T09:55:52Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDUxMTkwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1Nzo0MVrOIS2YPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxODoyNTozNlrOIeew-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ==", "bodyText": "Arent apex identifiers case insensitive? Should this compare the image ignoring case?", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r556636221", "createdAt": "2021-01-13T15:57:41Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49bab051e8d970b8967e71f61fdab56523258b2b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwOTg5Ng==", "bodyText": "Yes, apex is case-insensitive. I'll adjust this when merging....", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r559209896", "createdAt": "2021-01-17T17:09:40Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ=="}, "originalCommit": {"oid": "49bab051e8d970b8967e71f61fdab56523258b2b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODgzMjI1MA==", "bodyText": "ah, good catch. thanks.", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r568832250", "createdAt": "2021-02-02T18:25:36Z", "author": {"login": "recdevs"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ=="}, "originalCommit": {"oid": "49bab051e8d970b8967e71f61fdab56523258b2b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMDgzNjk3OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QxNzoxMDoyNVrOIVTeAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QxNzoxMDoyNVrOIVTeAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwOTk4Nw==", "bodyText": "same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return numParams == 0 && node.hasImageEqualTo(\"hashCode\");\n          \n          \n            \n                    return numParams == 0 && \"hashCode\".equalsIgnoreCase(node.getImage());", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r559209987", "createdAt": "2021-01-17T17:10:25Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);\n+    }\n+\n+    private boolean isHashCode(ASTMethod node) {\n+        int numParams = 0;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+            }\n+        }\n+\n+        return numParams == 0 && node.hasImageEqualTo(\"hashCode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49bab051e8d970b8967e71f61fdab56523258b2b"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 223, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}