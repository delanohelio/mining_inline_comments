{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTg0Mzc3", "number": 2326, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0Mjo0OFrODlWkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMDo1MFrODlXZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDkzNzAzOnYy", "diffSide": "RIGHT", "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0Mjo0OFrOFyMkFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1MToyMFrOFyy7ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3ODk2Ng==", "bodyText": "Are you sure, that <AS> is optional? It doesn't look like that in the spec: https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/XMLFOREST.html#GUID-68E5C67E-CE97-4BF8-B7FF-2365E062C363", "url": "https://github.com/pmd/pmd/pull/2326#discussion_r388178966", "createdAt": "2020-03-05T09:42:48Z", "author": {"login": "adangel"}, "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "diffHunk": "@@ -1640,8 +1640,9 @@ ASTFunctionCall FunctionCall() :\n       | LOOKAHEAD({\"XMLCAST\".equalsIgnoreCase(token.getImage())}) \"(\" Expression() <AS> Datatype() \")\"\n       | LOOKAHEAD({\"XMLQUERY\".equalsIgnoreCase(token.getImage())}) \"(\" StringLiteral() [ LOOKAHEAD({isKeyword(\"PASSING\")}) XMLPassingClause() ] <RETURNING> KEYWORD(\"CONTENT\") [ <NULL> <ON> <EMPTY> ] \")\"\n       | LOOKAHEAD({\"CAST\".equalsIgnoreCase(token.getImage())}) \"(\" ( <MULTISET> \"(\" Subquery() \")\" | Expression() ) <AS> Datatype() \")\"\n-      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ID() ] ( \",\" SqlExpression() [ <AS> ID() ] )* \")\"\n+      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ] [ ID() ] ( \",\" SqlExpression() [ <AS> ]  [ ID() ] )* \")\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69025d75228d664e66747c0a1059746220c5d0f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5Njk0Mw==", "bodyText": "I'll undo that - all the tests still pass.\nPlease open a separate ticket/PR with a test case, if this should be parsed differently.", "url": "https://github.com/pmd/pmd/pull/2326#discussion_r388196943", "createdAt": "2020-03-05T10:14:56Z", "author": {"login": "adangel"}, "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "diffHunk": "@@ -1640,8 +1640,9 @@ ASTFunctionCall FunctionCall() :\n       | LOOKAHEAD({\"XMLCAST\".equalsIgnoreCase(token.getImage())}) \"(\" Expression() <AS> Datatype() \")\"\n       | LOOKAHEAD({\"XMLQUERY\".equalsIgnoreCase(token.getImage())}) \"(\" StringLiteral() [ LOOKAHEAD({isKeyword(\"PASSING\")}) XMLPassingClause() ] <RETURNING> KEYWORD(\"CONTENT\") [ <NULL> <ON> <EMPTY> ] \")\"\n       | LOOKAHEAD({\"CAST\".equalsIgnoreCase(token.getImage())}) \"(\" ( <MULTISET> \"(\" Subquery() \")\" | Expression() ) <AS> Datatype() \")\"\n-      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ID() ] ( \",\" SqlExpression() [ <AS> ID() ] )* \")\"\n+      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ] [ ID() ] ( \",\" SqlExpression() [ <AS> ]  [ ID() ] )* \")\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3ODk2Ng=="}, "originalCommit": {"oid": "69025d75228d664e66747c0a1059746220c5d0f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNzUyNA==", "bodyText": "Ok, thank you. I had an parsing exception that was resolved by that modification, but it looks like you're right and it shouldn't be optional. I will try to find piece of code that was causing exception and figure out different solution.", "url": "https://github.com/pmd/pmd/pull/2326#discussion_r388807524", "createdAt": "2020-03-06T09:51:20Z", "author": {"login": "szyman23"}, "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "diffHunk": "@@ -1640,8 +1640,9 @@ ASTFunctionCall FunctionCall() :\n       | LOOKAHEAD({\"XMLCAST\".equalsIgnoreCase(token.getImage())}) \"(\" Expression() <AS> Datatype() \")\"\n       | LOOKAHEAD({\"XMLQUERY\".equalsIgnoreCase(token.getImage())}) \"(\" StringLiteral() [ LOOKAHEAD({isKeyword(\"PASSING\")}) XMLPassingClause() ] <RETURNING> KEYWORD(\"CONTENT\") [ <NULL> <ON> <EMPTY> ] \")\"\n       | LOOKAHEAD({\"CAST\".equalsIgnoreCase(token.getImage())}) \"(\" ( <MULTISET> \"(\" Subquery() \")\" | Expression() ) <AS> Datatype() \")\"\n-      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ID() ] ( \",\" SqlExpression() [ <AS> ID() ] )* \")\"\n+      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ] [ ID() ] ( \",\" SqlExpression() [ <AS> ]  [ ID() ] )* \")\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3ODk2Ng=="}, "originalCommit": {"oid": "69025d75228d664e66747c0a1059746220c5d0f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTAxODY2OnYy", "diffSide": "RIGHT", "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowNToyMlrOFyNWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowNToyMlrOFyNWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MTgxMg==", "bodyText": "I think, the usage of the SchemaName production here is misleading - it is not a database schema, but a XML schema namespace...\nIt would be a string literal, e.g.\n'xmlns:a=\"http://XXX/AnimalMovement/Response\" xmlns:b=\"http://XXX/AnimalMovementExport\"'\n(example from https://community.oracle.com/thread/719673)\nThe second parameter here (\"Expression()\") is actually the XPath_string, which is also just a String Literal...\nI'll change both to StringLiterals and enhance the node ASTExtractExpression.", "url": "https://github.com/pmd/pmd/pull/2326#discussion_r388191812", "createdAt": "2020-03-05T10:05:22Z", "author": {"login": "adangel"}, "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "diffHunk": "@@ -3240,14 +3241,22 @@ ASTUnaryExpression UnaryExpression(boolean isUnarySign) #UnaryExpression(>1) :\n ASTExtractExpression ExtractExpression() :\n {}\n {\n+    LOOKAHEAD(4)\n     <EXTRACT> \"(\"\n         ( <MONTH> | <YEAR> | <DAY> |<HOUR> | <MINUTE> | <SECOND>\n         | <TIMEZONE_HOUR> | <TIMEZONE_MINUTE>\n         | <TIMEZONE_REGION> | <TIMEZONE_ABBR> )\n     <FROM>\n-        (LOOKAHEAD(2) FunctionCall()\n-        |LOOKAHEAD(2) DateTimeLiteral()\n-        |LOOKAHEAD(1) Name() ) \")\"\n+            (\n+            LOOKAHEAD(FunctionCall()) FunctionCall()\n+            |\n+            LOOKAHEAD(DateTimeLiteral()) DateTimeLiteral()\n+            |\n+            LOOKAHEAD(Name()) Name()\n+            ) \")\"\n+        { return jjtThis ; }\n+    |\n+    LOOKAHEAD(3)  <EXTRACT> \"(\" Argument() \",\" Expression() [\",\" SchemaName() ] \")\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69025d75228d664e66747c0a1059746220c5d0f4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA3MzEyOnYy", "diffSide": "RIGHT", "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMDo1MFrOFyN2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMDo1MFrOFyN2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMDE4Ng==", "bodyText": "The last [\"VALUE\"] needs to be inside the previous brackets starting with [ \",\" KEYWORD(STANDALONE) ]...\nI'll fix that.", "url": "https://github.com/pmd/pmd/pull/2326#discussion_r388200186", "createdAt": "2020-03-05T10:20:50Z", "author": {"login": "adangel"}, "path": "pmd-plsql/etc/grammar/PldocAST.jjt", "diffHunk": "@@ -1640,8 +1640,9 @@ ASTFunctionCall FunctionCall() :\n       | LOOKAHEAD({\"XMLCAST\".equalsIgnoreCase(token.getImage())}) \"(\" Expression() <AS> Datatype() \")\"\n       | LOOKAHEAD({\"XMLQUERY\".equalsIgnoreCase(token.getImage())}) \"(\" StringLiteral() [ LOOKAHEAD({isKeyword(\"PASSING\")}) XMLPassingClause() ] <RETURNING> KEYWORD(\"CONTENT\") [ <NULL> <ON> <EMPTY> ] \")\"\n       | LOOKAHEAD({\"CAST\".equalsIgnoreCase(token.getImage())}) \"(\" ( <MULTISET> \"(\" Subquery() \")\" | Expression() ) <AS> Datatype() \")\"\n-      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ID() ] ( \",\" SqlExpression() [ <AS> ID() ] )* \")\"\n+      | LOOKAHEAD({\"XMLFOREST\".equalsIgnoreCase(token.getImage())}) \"(\" SqlExpression() [ <AS> ] [ ID() ] ( \",\" SqlExpression() [ <AS> ]  [ ID() ] )* \")\"\n       | LOOKAHEAD({\"XMLELEMENT\".equalsIgnoreCase(token.getImage())}) XMLElement()\n+      | LOOKAHEAD({\"XMLROOT\".equalsIgnoreCase(token.getImage())}) \"(\" Expression() \",\" KEYWORD(\"VERSION\") (LOOKAHEAD(2) ( <NO> \"VALUE\") | Expression() )  [ \",\" KEYWORD(\"STANDALONE\")  ( <YES> | <NO> )] [ \"VALUE\" ]  \")\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69025d75228d664e66747c0a1059746220c5d0f4"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 523, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}