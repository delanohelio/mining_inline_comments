{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDAzMTI1", "number": 2633, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMjo0OToyMFrOELdgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MToyMFrOEQOQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDUzMjA2OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/XMLRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMjo0OToyMFrOGtCH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMjo0OToyMFrOGtCH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3Mzg4Ng==", "bodyText": "StringEscapeUtils escape basic chars like \"<\" and remove invalid chars like U+000C. But the DOM impl already escapes \"<\" by itself in attribute values, but doesn't remove invalid chars. In order to avoid double escaping, this escapes it once with StringEscapeUtils and unescapes it again - result is, that only invalid chars are removed (no escaping).", "url": "https://github.com/pmd/pmd/pull/2633#discussion_r449873886", "createdAt": "2020-07-05T12:49:20Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/XMLRenderer.java", "diffHunk": "@@ -119,7 +121,8 @@ private Element addFilesToDuplicationElement(Document doc, Element duplication,\n             mark = iterator.next();\n             final Element file = doc.createElement(\"file\");\n             file.setAttribute(\"line\", String.valueOf(mark.getBeginLine()));\n-            file.setAttribute(\"path\", mark.getFilename());\n+            String filenameXml10 = StringEscapeUtils.unescapeXml(StringEscapeUtils.escapeXml10(mark.getFilename()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f905b0ef01843dde9d43e6ee5cb80b5b6b6a3c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDUzNDIxOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/renderers/XMLRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMjo1MjoxOFrOGtCI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMjo1MjoxOFrOGtCI8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3NDE2Mg==", "bodyText": "this and a non unicode based encoding like ISO-8859-1 or cp1252 cannot encode codepoints > 255.\nHm... so, we should probably escape chars additionally as soon as c > 0xff, because then you need unicode...", "url": "https://github.com/pmd/pmd/pull/2633#discussion_r449874162", "createdAt": "2020-07-05T12:52:18Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/renderers/XMLRenderer.java", "diffHunk": "@@ -179,6 +182,41 @@ private void createTimestampAttr(StringBuilder buffer) {\n                 .append('\"');\n     }\n \n+    @Override\n+    public void setReportFile(String reportFilename) {\n+        String encoding = getProperty(ENCODING);\n+\n+        try {\n+            Charset charset = Charset.forName(encoding);\n+            this.writer = StringUtils.isBlank(reportFilename) ? new OutputStreamWriter(System.out, charset)\n+                    : Files.newBufferedWriter(new File(reportFilename).toPath(), charset);\n+        } catch (IOException | UnsupportedCharsetException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    /**\n+     * Escape unicode characters for non UTF-8 encodings.\n+     */\n+    private String escape(String text) {\n+        String result = StringEscapeUtils.escapeXml10(text);\n+        String encoding = getProperty(ENCODING);\n+        if (!\"UTF-8\".equalsIgnoreCase(encoding)) {\n+            StringBuilder sb = new StringBuilder(result);\n+            for (int i = 0; i < sb.length(); i++) {\n+                char c = sb.charAt(i);\n+                // surrogate characters are not allowed in XML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f905b0ef01843dde9d43e6ee5cb80b5b6b6a3c"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ2MjUxOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/renderers/Renderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MToyMFrOG0QjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MToyMFrOG0QjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDM4OQ==", "bodyText": "In a mature API, I think this should take a Path argument instead of a string. But then, everything should be updated to be consistent", "url": "https://github.com/pmd/pmd/pull/2633#discussion_r457450389", "createdAt": "2020-07-20T14:41:20Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/renderers/Renderer.java", "diffHunk": "@@ -163,4 +164,17 @@\n     void end() throws IOException;\n \n     void flush() throws IOException;\n+\n+    /**\n+     * Sets the filename where the report should be written to. If no filename is provided,\n+     * the renderer should write to stdout.\n+     *\n+     * <p>Implementations must initialize the writer of the renderer.\n+     *\n+     * <p>See {@link AbstractRenderer#setReportFile(String)} for the default impl.\n+     *\n+     * @param reportFilename the filename (optional).\n+     */\n+    @Experimental\n+    void setReportFile(String reportFilename);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6600ec8560d85df738d5622416563f8e3f2fe7d"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 250, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}