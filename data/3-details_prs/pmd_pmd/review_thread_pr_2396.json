{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTE5NDYx", "number": 2396, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Njo0OFrODuEDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo1NTozMFrODusD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI3NTY1OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Njo0OFrOF_2pUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Njo0OFrOF_2pUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5OTkyMg==", "bodyText": "You could just use a Comparator<Node> here, defining it like so: Comparator.<Node>comparingInt(Node::getBeginLine).thenComparing(Node::getBeginColumn)", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402499922", "createdAt": "2020-04-02T17:46:48Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {\n+                addViolation(data, field, field.getName());\n+            }\n+        }\n+\n+        return data;\n+    }\n+\n+    private static class NodeAndLocation implements Comparable<NodeAndLocation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI3ODcxOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0NzozOFrOF_2rPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0NzozOFrOF_2rPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDQxNA==", "bodyText": "Then just do min(nodeComparator), with the comparator you defined, so firstMethod would be an Optional<ASTMethod>", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402500414", "createdAt": "2020-04-02T17:47:38Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI4NTk0OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0OToyM1rOF_2vpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0OToyM1rOF_2vpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMTU0MQ==", "bodyText": "Then here just do nodeComparator.compare(field, firstMethod.get()) > 0\nWith all of this you can get rid of NodeAndLocation", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402501541", "createdAt": "2020-04-02T17:49:23Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjMwNjg5OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1NToxN1rOF_29JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1NToxN1rOF_29JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNDk5Nw==", "bodyText": "Looking for descendants is a bad idea here. It will pick up on fields of any nested class. I think a test case should be added for that too.", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402504997", "createdAt": "2020-04-02T17:55:17Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjMxNTc1OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1NzoyNlrOF_3Cmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1NzoyNlrOF_3Cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNjM5NA==", "bodyText": "Similarly, this will find all methods in the subtree, not just the methods of this class.\nFor both these problems, I think using findChildrenOfType would be enough.\nThere is also this problem: what if there are no methods, but a nested class? Fields should still be at the start right?", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402506394", "createdAt": "2020-04-02T17:57:26Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjMzMDMzOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowMToyOVrOF_3MHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowMToyOVrOF_3MHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwODgzMA==", "bodyText": "This rule could use the rulechain, since you're only visiting one node type, and the rule is not stateful. See https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402508830", "createdAt": "2020-04-02T18:01:29Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk1OTQwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODowOVrOGAPsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODowOVrOGAPsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMDIyMw==", "bodyText": "Should be \"6.23.0\" \ud83d\ude04", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402910223", "createdAt": "2020-04-03T10:28:09Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "diffHunk": "@@ -365,4 +365,27 @@ while (true) {  // preferred approach\n         </example>\n     </rule>\n \n+    <rule name=\"FieldDeclarationsShouldBeAtStart\"\n+          language=\"apex\"\n+          since=\"5.23.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjgyOTgyOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo1NTozMFrOGAxr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo1NTozMFrOGAxr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NzI1OA==", "bodyText": "I'll move that up when merging so that the rules are sorted alphabetically. This helps to keep the files organized.", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r403467258", "createdAt": "2020-04-04T12:55:30Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/codestyle.xml", "diffHunk": "@@ -365,4 +365,27 @@ while (true) {  // preferred approach\n         </example>\n     </rule>\n \n+    <rule name=\"FieldDeclarationsShouldBeAtStart\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 363, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}