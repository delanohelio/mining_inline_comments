{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDU5Mjc4", "number": 2318, "title": "[java] Add support for java 14", "bodyText": "Java 14 is the new default version for java\n There is a new java 14 preview version\n Switch Expressions are supported in java 14\n ASM is updated\n Text Block for java 14 preview\n Pattern matching for instance of\n Records\n Remove java 12 preview and break-with-return\n Release notes\n\nFixes #2159\nLimitations:\n\nVariables that are bound to a pattern, are not available in the symbol table\nThe symbol table knows nothing about the fields of a record type", "createdAt": "2020-02-27T20:32:43Z", "url": "https://github.com/pmd/pmd/pull/2318", "merged": true, "mergeCommit": {"oid": "fc0b437ad7174b5f8e199d500ef91b341af0877f"}, "closed": true, "closedAt": "2020-03-02T18:06:16Z", "author": {"login": "adangel"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCZBTjgH2gAyMzgxMDU5Mjc4OjZlNGRhYWRjNDM0OTc0Mjk0ZTcxZWI3Y2VjN2Y1NGM5MTkxNjhmZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJxpsCgFqTM2NzQwODU1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e4daadc434974294e71eb7cec7f54c919168fed", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/6e4daadc434974294e71eb7cec7f54c919168fed", "committedDate": "2020-02-08T19:22:59Z", "message": "Add java version 14"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad023e8fa63392d814a9c91148b37275dbde83d7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ad023e8fa63392d814a9c91148b37275dbde83d7", "committedDate": "2020-02-08T23:10:50Z", "message": "Support type test patterns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a6d332579a975d3d2e19078a3b31303fa75045b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/5a6d332579a975d3d2e19078a3b31303fa75045b", "committedDate": "2020-02-08T23:11:06Z", "message": "Make sure symbol table doesn't cry on duplicate name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a43945531457d933057706f4c3b5e00d5ebe71", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/97a43945531457d933057706f4c3b5e00d5ebe71", "committedDate": "2020-02-09T16:45:08Z", "message": "Mark new API as experimental"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a283559b43bb2cefa052354d878fc27243095ee", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/3a283559b43bb2cefa052354d878fc27243095ee", "committedDate": "2020-02-27T14:03:24Z", "message": "Merge remote-tracking branch 'oowekyala/jdk14-pattern-matching' into jdk14"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3da33944bc89cadf803ddc0dd5e88ac17471c21", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/f3da33944bc89cadf803ddc0dd5e88ac17471c21", "committedDate": "2020-02-27T14:15:50Z", "message": "[java] version 14 is now the new default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d5b7554f0b452fb6857316ce6aa99b2b73fe34c", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/9d5b7554f0b452fb6857316ce6aa99b2b73fe34c", "committedDate": "2020-02-27T17:30:39Z", "message": "[java] Make sure, SwitchExpressions with yield work with java14\n\nAdd additional tests for java14, so that we can later simply remove\nthe java13 preview tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "committedDate": "2020-02-27T20:11:02Z", "message": "[java] Add support for TextBlocks in Java14\n\n* New escape sequence \"\\s\" added\n* Added experimental ASTLiteral::getTextBlockContent to retrieve\n  the text block with stripped indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da01ed4fdec616c3914427c66db4f0b6a724cae2", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/da01ed4fdec616c3914427c66db4f0b6a724cae2", "committedDate": "2020-02-27T20:12:00Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81bb8090cf58fc46531a3ed3adfa2918742d0cc9", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/81bb8090cf58fc46531a3ed3adfa2918742d0cc9", "committedDate": "2020-02-27T20:14:29Z", "message": "[java] Don't throw IllegalArgument if Literal is not a text block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a80f1316427f16e4a61d3ae8831fc07f2aec2df", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/9a80f1316427f16e4a61d3ae8831fc07f2aec2df", "committedDate": "2020-02-27T20:23:33Z", "message": "[java] Fix new escape sequence \"\\s\" detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01db024df75baa0634c83ba26961672411d75fc5", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/01db024df75baa0634c83ba26961672411d75fc5", "committedDate": "2020-02-27T20:29:21Z", "message": "Update asm to 7.3.1\n\nThis add support for java 14 and java 15"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDAxMzAy", "url": "https://github.com/pmd/pmd/pull/2318#pullrequestreview-366001302", "createdAt": "2020-02-27T21:12:17Z", "commit": {"oid": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToxMjoxN1rOFvhWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyMToyNVrOFvhnnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MzgxMg==", "bodyText": "I think it would be nice to extract the rest of this routine into a static method. That way we can test on strings instead of having to parse a text block.", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385373812", "createdAt": "2020-02-27T21:12:17Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            throw new IllegalArgumentException(\"This is not a text block\");\n+        }\n+\n+        int start = determineContentStart(getImage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NTE3NA==", "bodyText": "Does this work with CRLF delimited strings? It looks like it's not going past the LF. Maybe you just need to call this method on the normalized string, and stop caring about CR.\nAlso maybe it would be clearer to just return start + 1; here instead of breaking on the next iteration.", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385375174", "createdAt": "2020-02-27T21:15:03Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            throw new IllegalArgumentException(\"This is not a text block\");\n+        }\n+\n+        int start = determineContentStart(getImage());\n+        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+        // normalize line endings to LF\n+        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+        String result = sb.toString();\n+\n+        // interpret escape sequences \"\\NL\" \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\"\n+        result = result\n+                    .replaceAll(\"\\\\\\\\\\n\", \"\")\n+                    .replaceAll(\"\\\\\\\\n\", \"\\n\")\n+                    .replaceAll(\"\\\\\\\\t\", \"\\t\")\n+                    .replaceAll(\"\\\\\\\\b\", \"\\b\")\n+                    .replaceAll(\"\\\\\\\\r\", \"\\r\")\n+                    .replaceAll(\"\\\\\\\\f\", \"\\f\")\n+                    .replaceAll(\"\\\\\\\\s\", \" \")\n+                    .replaceAll(\"\\\\\\\\\\\"\", \"\\\"\")\n+                    .replaceAll(\"\\\\\\\\'\", \"'\");\n+        return result;\n+    }\n+\n+    private static int determineContentStart(String s) {\n+        int start = TEXTBLOCK_DELIMITER.length(); // this is the opening delimiter\n+        boolean lineTerminator = false;\n+        // the content begins after at the first character after the line terminator\n+        // of the opening delimiter\n+        while (start < s.length() && Character.isWhitespace(s.charAt(start))) {\n+            if (s.charAt(start) == '\\r' || s.charAt(start) == '\\n') {\n+                lineTerminator = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3ODIwNA==", "bodyText": "I think this is missing \\\\ for a backslash", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385378204", "createdAt": "2020-02-27T21:21:25Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            return getImage();\n+        }\n+\n+        int start = determineContentStart(getImage());\n+        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+        // normalize line endings to LF\n+        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+        String result = sb.toString();\n+\n+        // interpret escape sequences \"\\NL\" \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01db024df75baa0634c83ba26961672411d75fc5"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "committedDate": "2020-02-28T08:43:54Z", "message": "[java] ASTLiteral - move the tests for text block content\n\nAlso fix determining the start of the content, when there are\nmultiple line terminators without indenting whitespace."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ff74ea7a27d8dc999ebacd5bc11d88b27e68cb", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/09ff74ea7a27d8dc999ebacd5bc11d88b27e68cb", "committedDate": "2020-02-28T09:38:44Z", "message": "[java] Don't consider VariableDeclaratorIds of Pattern Bindings for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1acb292572640e0336beb2a4a9046f0fb046ad4", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/b1acb292572640e0336beb2a4a9046f0fb046ad4", "committedDate": "2020-02-28T09:50:00Z", "message": "[java] VariableDeclarationId of pattern bindings is implicitly final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adfb2ab129b86698282971f6a147a6707da82509", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/adfb2ab129b86698282971f6a147a6707da82509", "committedDate": "2020-02-28T09:51:38Z", "message": "[java] Update grammar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524925f8cb160b8e839c11d3ba84d8568ff35122", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/524925f8cb160b8e839c11d3ba84d8568ff35122", "committedDate": "2020-02-28T10:29:09Z", "message": "[java] Rewrite escape sequence interpreting for text blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a224462fd333221ad83f02a5f44c87090f8ae6c", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/8a224462fd333221ad83f02a5f44c87090f8ae6c", "committedDate": "2020-02-28T13:58:52Z", "message": "[java] Add initial support for Java 14 Preview record types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d84d6741c65bd1e2f843c72e9e9775f355edb7", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/e2d84d6741c65bd1e2f843c72e9e9775f355edb7", "committedDate": "2020-02-28T15:50:57Z", "message": "[java] Add grammar jdoc for new Record types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9917e3f422a81cb033ad4dbb091d68f69c2665b6", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/9917e3f422a81cb033ad4dbb091d68f69c2665b6", "committedDate": "2020-02-28T15:56:43Z", "message": "[java] RecordComponents -> RecordComponentList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f43e198d560df26e5a526d9e3cde8a8087d1d81", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/5f43e198d560df26e5a526d9e3cde8a8087d1d81", "committedDate": "2020-02-28T16:01:57Z", "message": "[java] RecordConstructorDeclaration - do not use Name()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e017def280d7a853a7d27b25fa02dfef7d0d62b6", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/e017def280d7a853a7d27b25fa02dfef7d0d62b6", "committedDate": "2020-02-28T16:35:44Z", "message": "[java] Support vararg/array in RecordComponent and empty components"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ba8a967dd000847edf8f7a0e7e865e285558c4", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/68ba8a967dd000847edf8f7a0e7e865e285558c4", "committedDate": "2020-02-28T16:41:26Z", "message": "[java] Test nested record type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa28aa7e2328c88bb5a054d3bd0fdd48d57c9046", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/fa28aa7e2328c88bb5a054d3bd0fdd48d57c9046", "committedDate": "2020-02-28T16:59:39Z", "message": "[java] Test annotations with RecordComponents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ecd1da200ae59c03048fe6e99c19fd598a0dbe3", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/0ecd1da200ae59c03048fe6e99c19fd598a0dbe3", "committedDate": "2020-02-28T17:32:33Z", "message": "[java] Get rid of RecordBodyDeclaration node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3df99134379629b1848ad324840592b592477b", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/7d3df99134379629b1848ad324840592b592477b", "committedDate": "2020-02-28T17:41:22Z", "message": "[java] RecordBody - test with more annotation and use deep lookahead\n\nRecord constructors are not allowed to throw exceptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ace55f635a9ddd655d932737c11266b3858207c", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/2ace55f635a9ddd655d932737c11266b3858207c", "committedDate": "2020-02-28T17:59:16Z", "message": "[java] Support RecordConstructorDeclaration as AnyTypeBodyDeclaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee211d42b1e3368cb226a9a00ea159d63c1f5e0d", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/ee211d42b1e3368cb226a9a00ea159d63c1f5e0d", "committedDate": "2020-02-28T18:07:03Z", "message": "[java] Remove unneccessary annotation parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eae6e96db0b469e72e61e6e0cd1ee23465c7f30d", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/eae6e96db0b469e72e61e6e0cd1ee23465c7f30d", "committedDate": "2020-02-28T18:11:10Z", "message": "[java] Add type parameters for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1fe8ce5e1883f2fbeae3e93bdbabdf8eb7511e0", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/f1fe8ce5e1883f2fbeae3e93bdbabdf8eb7511e0", "committedDate": "2020-02-28T18:37:13Z", "message": "[java] Remove version java 12 preview\n\nKeep the tests and move them to java 14\nexcept for the break expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcfda5619ce75c701e4b201f1ff6253d4343dd8", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/0bcfda5619ce75c701e4b201f1ff6253d4343dd8", "committedDate": "2020-02-28T18:48:00Z", "message": "[doc] Update release notes: Java 14 Support\n\nFixes #2159"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzg4MzEw", "url": "https://github.com/pmd/pmd/pull/2318#pullrequestreview-366788310", "createdAt": "2020-02-29T09:32:02Z", "commit": {"oid": "0bcfda5619ce75c701e4b201f1ff6253d4343dd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwOTozMjowMlrOFwIhTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwOTozMjowMlrOFwIhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNTU2NA==", "bodyText": "Hm... I guess, these AST nodes should be final....", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r386015564", "createdAt": "2020-02-29T09:32:02Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+/**\n+ * Defines the body of a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 14 preview feature).\n+ * This can contain additional methods and or constructors.\n+ *\n+ * <pre class=\"grammar\">\n+ *\n+ * RecordBody ::= \"{\" (   {@linkplain ASTRecordConstructorDeclaration RecordConstructorDeclaration}\n+ *                      | {@linkplain ASTClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration} )* \"}\"\n+ *\n+ * </pre>\n+ *\n+ */\n+@Experimental\n+public class ASTRecordBody extends AbstractJavaNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcfda5619ce75c701e4b201f1ff6253d4343dd8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "548326d2e1754e335ecfa18049ce65449eea82e5", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/548326d2e1754e335ecfa18049ce65449eea82e5", "committedDate": "2020-02-29T16:58:45Z", "message": "[java] Make the new AST node classes final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/f49a6dbc3d0872e345ecea6c13926dd939bc119d", "committedDate": "2020-02-29T19:00:18Z", "message": "[java] Add test with record implementing a interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Mzk4NDc2", "url": "https://github.com/pmd/pmd/pull/2318#pullrequestreview-367398476", "createdAt": "2020-03-02T17:47:52Z", "commit": {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0Nzo1M1rOFwpAsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0Nzo1M1rOFwpAsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0Nzg4OA==", "bodyText": "Right, they all need to be interpreted in one pass", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r386547888", "createdAt": "2020-03-02T17:47:53Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,143 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     *\n+     * <p>Note: This is a Java 14 Preview Feature.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            return getImage();\n+        }\n+        return determineTextBlockContent(getImage());\n+    }\n+\n+    static String determineTextBlockContent(String image) {\n+        // normalize line endings to LF\n+        String content = image.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        int start = determineContentStart(content);\n+        content = content.substring(start, content.length() - TEXTBLOCK_DELIMITER.length());\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+\n+        interpretEscapeSequences(sb);\n+        return sb.toString();\n+    }\n+\n+    private static void interpretEscapeSequences(StringBuilder sb) {\n+        // interpret escape sequences \"\\<LF>\" (line continuation), \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\", \"\\\\\"\n+        for (int i = 0; i < sb.length(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc0b437ad7174b5f8e199d500ef91b341af0877f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/fc0b437ad7174b5f8e199d500ef91b341af0877f", "committedDate": "2020-03-02T18:00:59Z", "message": "Fix record ctor with throws"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDA4NTU4", "url": "https://github.com/pmd/pmd/pull/2318#pullrequestreview-367408558", "createdAt": "2020-03-02T18:02:16Z", "commit": {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxODowMjoxNlrOFwpflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxODowMjoxNlrOFwpflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU1NTc5OA==", "bodyText": "Actually a record ctor may have a throws list. I'll fix that shortly.", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r386555798", "createdAt": "2020-03-02T18:02:16Z", "author": {"login": "oowekyala"}, "path": "pmd-java/etc/grammar/Java.jjt", "diffHunk": "@@ -1073,6 +1107,67 @@ void EnumConstant():\n   t=<IDENTIFIER> {jjtThis.setImage(t.image);} [ Arguments() ] [ ClassOrInterfaceBody() ]\n }\n \n+void RecordDeclaration(int modifiers):\n+{\n+    Token t;\n+    jjtThis.setModifiers(modifiers);\n+    checkForRecordType();\n+}\n+{\n+  t = <IDENTIFIER> {\n+    if (!\"record\".equals(t.image)) {\n+      throw new ParseException(\"ERROR: expecting record\");\n+    }\n+  }\n+  t=<IDENTIFIER> {checkForBadTypeIdentifierUsage(t.image); jjtThis.setImage(t.image);}\n+  [ TypeParameters() ]\n+  RecordComponentList()\n+  [ ImplementsList() ]\n+  RecordBody()\n+}\n+\n+void RecordComponentList() :\n+{}\n+{\n+  \"(\" [ RecordComponent() (\",\" RecordComponent())* ] \")\"\n+}\n+\n+void RecordComponent():\n+{}\n+{\n+  (Annotation())*\n+  Type()\n+  [ \"...\" {jjtThis.setVarargs();} ]\n+  VariableDeclaratorId()\n+}\n+\n+void RecordBody():\n+{}\n+{\n+  \"{\"\n+    ( RecordBodyDeclaration() )*\n+  \"}\"\n+}\n+\n+void RecordBodyDeclaration() #void :\n+{}\n+{\n+  LOOKAHEAD(ClassOrInterfaceBodyDeclaration()) ClassOrInterfaceBodyDeclaration()\n+  |\n+  RecordConstructorDeclaration()\n+}\n+\n+void RecordConstructorDeclaration():\n+{\n+  int modifiers;\n+}\n+{\n+  modifiers = Modifiers() { jjtThis.setModifiers(modifiers); }\n+  [TypeParameters()]\n+  <IDENTIFIER> { jjtThis.setImage(token.image); }\n+  \"{\" ( BlockStatement() )* \"}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4909, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}