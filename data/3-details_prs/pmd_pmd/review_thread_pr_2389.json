{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MjQ0Mjkw", "number": 2389, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyNzoyNVrODvQKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNjoyMVrODxMB2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc0Mzg1OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AstDisambiguationPass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyNzoyNVrOGBkhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzowNzo0OVrOGCCpmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMDA4OQ==", "bodyText": "That's in the public package lang.java.ast, but this is a implementation, isn't it? Should it be rather in a internal package?", "url": "https://github.com/pmd/pmd/pull/2389#discussion_r404300089", "createdAt": "2020-04-06T18:27:25Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AstDisambiguationPass.java", "diffHunk": "@@ -0,0 +1,469 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import static net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger.CANNOT_RESOLVE_AMBIGUOUS_NAME;\n+import static net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger.CANNOT_RESOLVE_MEMBER;\n+\n+import java.util.Iterator;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken;\n+import net.sourceforge.pmd.lang.java.internal.JavaAstProcessor;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable;\n+import net.sourceforge.pmd.lang.java.symbols.table.ResolveResult;\n+import net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger;\n+\n+/**\n+ * This implements name disambiguation following <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.5.2\">JLS\u00a76.5.2</a>.\n+ * (see also <a href=\"https://docs.oracle.com/javase/specs/jls/se13/html/jls-6.html#jls-6.4.2\">JLS\u00a76.4.2 - Obscuring</a>)\n+ *\n+ * <p>Currently disambiguation of package vs type name is fully implemented,\n+ * with the following limitations: TODO\n+ * - field accesses are not checked to be legal (and their symbol is not\n+ * resolved).\n+ * - inherited members are not considered. Same thing happens in the current\n+ * symbol table. Since that is so, visibility/accessibility is not handled either.\n+ * See bottom of file for some test cases.\n+ *\n+ * This is because we don't have full access to types yet. This is the next\n+ * step.\n+ */\n+public final class AstDisambiguationPass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643555bb1d91b99554f84923e41f008bd164621a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5Mzc1Mw==", "bodyText": "Hmm that's right. Well it uses a lot of package-private API so probably the best way is to make it package-private and add a hook to it in InternalApiBridge", "url": "https://github.com/pmd/pmd/pull/2389#discussion_r404793753", "createdAt": "2020-04-07T13:07:49Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AstDisambiguationPass.java", "diffHunk": "@@ -0,0 +1,469 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import static net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger.CANNOT_RESOLVE_AMBIGUOUS_NAME;\n+import static net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger.CANNOT_RESOLVE_MEMBER;\n+\n+import java.util.Iterator;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken;\n+import net.sourceforge.pmd.lang.java.internal.JavaAstProcessor;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable;\n+import net.sourceforge.pmd.lang.java.symbols.table.ResolveResult;\n+import net.sourceforge.pmd.lang.java.symbols.table.internal.SemanticChecksLogger;\n+\n+/**\n+ * This implements name disambiguation following <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.5.2\">JLS\u00a76.5.2</a>.\n+ * (see also <a href=\"https://docs.oracle.com/javase/specs/jls/se13/html/jls-6.html#jls-6.4.2\">JLS\u00a76.4.2 - Obscuring</a>)\n+ *\n+ * <p>Currently disambiguation of package vs type name is fully implemented,\n+ * with the following limitations: TODO\n+ * - field accesses are not checked to be legal (and their symbol is not\n+ * resolved).\n+ * - inherited members are not considered. Same thing happens in the current\n+ * symbol table. Since that is so, visibility/accessibility is not handled either.\n+ * See bottom of file for some test cases.\n+ *\n+ * This is because we don't have full access to types yet. This is the next\n+ * step.\n+ */\n+public final class AstDisambiguationPass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMDA4OQ=="}, "originalCommit": {"oid": "643555bb1d91b99554f84923e41f008bd164621a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTAzMjE0OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/internal/JavaAstProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNDowM1rOGEhQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNDowM1rOGEhQ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MjQ2NQ==", "bodyText": "Maybe these two methods (bench(...)) can stay private again?\nUpdate: turns out, no: It is called via SymbolTableHelper::earlyDisambig -> InternalApiBridge::disambig -> AstDisambiguationPass::disambig\nMaybe something to improve later...", "url": "https://github.com/pmd/pmd/pull/2389#discussion_r407392465", "createdAt": "2020-04-13T09:14:03Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/internal/JavaAstProcessor.java", "diffHunk": "@@ -162,13 +165,13 @@ public static JavaAstProcessor create(ClassLoader classLoader,\n         );\n     }\n \n-    private static void bench(String label, Runnable runnable) {\n+    public static void bench(String label, Runnable runnable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4cdea126d9d8f3374c656c8cf44ec3f9bba38c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTAzODk3OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JClassSymbol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNjoyMVrOGEhUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNjoyMVrOGEhUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MzQyMw==", "bodyText": "Mabye name this getToplevel()? nest root somehow sounds a bit strange (probably because nesting is the directing down and root is the direction up the tree...)", "url": "https://github.com/pmd/pmd/pull/2389#discussion_r407393423", "createdAt": "2020-04-13T09:16:21Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JClassSymbol.java", "diffHunk": "@@ -221,6 +181,20 @@ default boolean isClass() {\n     }\n \n \n+    /**\n+     * Returns the toplevel class containing this class. If this is a\n+     * toplevel class, returns this.\n+     */\n+    @NonNull\n+    default JClassSymbol getNestRoot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4cdea126d9d8f3374c656c8cf44ec3f9bba38c"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 360, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}