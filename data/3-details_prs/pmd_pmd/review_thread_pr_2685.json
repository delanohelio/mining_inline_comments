{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMDE0ODg5", "number": 2685, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1MjowNVrOEXMiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1MjowNVrOEXMiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU4MDM0OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/internal/ImportWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1MjowNVrOG-2V7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjozNTo1N1rOHBSJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTI0NA==", "bodyText": "I'm not sure adding a processing error is appropriate here. I don't think we currently log missing classes to the report right? And for now, processing errors indicate errors in PMD code, the kind of errors people should report as bugs. Currently, a processing error may very well mean that the file was not processed by rules at all, and so, violations may be missing from the report. Whereas missing dependencies is more akin to a warning, ie, we can continue analysis (and we do), but results of some rules may be somewhat inaccurate. And users shouldn't think this is a bug on our side.\nI would say a log call would be more appropriate, as it's possible to disable it, and it makes it clearer that this is just a warning. In PMD 7 this will be handled by the semantic checker, which is also akin to a logger, and won't touch the report.", "url": "https://github.com/pmd/pmd/pull/2685#discussion_r468555244", "createdAt": "2020-08-11T12:52:05Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/internal/ImportWrapper.java", "diffHunk": "@@ -8,57 +8,78 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Objects;\n import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n+import net.sourceforge.pmd.Report.ProcessingError;\n+import net.sourceforge.pmd.RuleContext;\n import net.sourceforge.pmd.lang.ast.Node;\n import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;\n \n /**\n  * Helper class to analyze {@link ASTImportDeclaration}s.\n  */\n public class ImportWrapper {\n-    private ASTImportDeclaration node;\n-    private String name;\n-    private String fullname;\n-    private boolean isStaticDemand;\n-    private Set<String> allDemands = new HashSet<>();\n+    private static final Logger LOG = Logger.getLogger(ImportWrapper.class.getName());\n+\n+    private final ASTImportDeclaration node;\n+    private final String name;\n+    private final String fullname;\n+    private final boolean isStaticDemand;\n+    private final Set<String> allStaticDemands;\n \n     public ImportWrapper(String fullname, String name) {\n         this(fullname, name, null);\n     }\n \n     public ImportWrapper(String fullname, String name, ASTImportDeclaration node) {\n-        this(fullname, name, node, false);\n+        this(fullname, name, node, false, null);\n     }\n \n-    public ImportWrapper(String fullname, String name, ASTImportDeclaration node, boolean isStaticDemand) {\n+    public ImportWrapper(String fullname, String name, ASTImportDeclaration node, boolean isStaticDemand, RuleContext ctx) {\n         this.fullname = fullname;\n         this.name = name;\n         this.node = node;\n         this.isStaticDemand = isStaticDemand;\n+        this.allStaticDemands = collectStaticFieldsAndMethods(node, ctx);\n+\n+    }\n+\n+    /**\n+     * @param node\n+     */\n+    private Set<String> collectStaticFieldsAndMethods(ASTImportDeclaration node, RuleContext ctx) {\n+        if (!this.isStaticDemand || node == null || node.getType() == null) {\n+            return Collections.emptySet();\n+        }\n \n-        if (node != null && node.getType() != null) {\n+        try {\n+            Set<String> names = new HashSet<>();\n             Class<?> type = node.getType();\n-            for (Method m : type.getMethods()) {\n-                allDemands.add(m.getName());\n-            }\n-            for (Field f : type.getFields()) {\n-                allDemands.add(f.getName());\n-            }\n-            // also consider static fields, that are not public\n+            // consider static fields, public and non-public\n             for (Field f : type.getDeclaredFields()) {\n                 if (Modifier.isStatic(f.getModifiers())) {\n-                    allDemands.add(f.getName());\n+                    names.add(f.getName());\n                 }\n             }\n             // and methods, too\n             for (Method m : type.getDeclaredMethods()) {\n                 if (Modifier.isStatic(m.getModifiers())) {\n-                    allDemands.add(m.getName());\n+                    names.add(m.getName());\n                 }\n             }\n+            return names;\n+        } catch (LinkageError e) {\n+            if (ctx != null) {\n+                ctx.getReport().addError(new ProcessingError(e, String.valueOf(ctx.getSourceCodeFile())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c3ce92ce53c9fa80c334f4c40aa79b7dd7351f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwNzkxOQ==", "bodyText": "Yes, you're right. This logging is something different than a processing error (and in other places, we silently ignore linkagerrors).\nHowever, I still think, that such issues/warnings/problems should be part of the report, as it might indicate a incorrect/incomplete configuration when executing PMD. But that's for PMD 7 then.\nI'll change that to a LOG.debug call. I'm not sure, how much duplicates we would log otherwise as warnings, and that could be annoying as well. See also #1371.", "url": "https://github.com/pmd/pmd/pull/2685#discussion_r471107919", "createdAt": "2020-08-16T12:35:57Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/internal/ImportWrapper.java", "diffHunk": "@@ -8,57 +8,78 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Objects;\n import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n+import net.sourceforge.pmd.Report.ProcessingError;\n+import net.sourceforge.pmd.RuleContext;\n import net.sourceforge.pmd.lang.ast.Node;\n import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;\n \n /**\n  * Helper class to analyze {@link ASTImportDeclaration}s.\n  */\n public class ImportWrapper {\n-    private ASTImportDeclaration node;\n-    private String name;\n-    private String fullname;\n-    private boolean isStaticDemand;\n-    private Set<String> allDemands = new HashSet<>();\n+    private static final Logger LOG = Logger.getLogger(ImportWrapper.class.getName());\n+\n+    private final ASTImportDeclaration node;\n+    private final String name;\n+    private final String fullname;\n+    private final boolean isStaticDemand;\n+    private final Set<String> allStaticDemands;\n \n     public ImportWrapper(String fullname, String name) {\n         this(fullname, name, null);\n     }\n \n     public ImportWrapper(String fullname, String name, ASTImportDeclaration node) {\n-        this(fullname, name, node, false);\n+        this(fullname, name, node, false, null);\n     }\n \n-    public ImportWrapper(String fullname, String name, ASTImportDeclaration node, boolean isStaticDemand) {\n+    public ImportWrapper(String fullname, String name, ASTImportDeclaration node, boolean isStaticDemand, RuleContext ctx) {\n         this.fullname = fullname;\n         this.name = name;\n         this.node = node;\n         this.isStaticDemand = isStaticDemand;\n+        this.allStaticDemands = collectStaticFieldsAndMethods(node, ctx);\n+\n+    }\n+\n+    /**\n+     * @param node\n+     */\n+    private Set<String> collectStaticFieldsAndMethods(ASTImportDeclaration node, RuleContext ctx) {\n+        if (!this.isStaticDemand || node == null || node.getType() == null) {\n+            return Collections.emptySet();\n+        }\n \n-        if (node != null && node.getType() != null) {\n+        try {\n+            Set<String> names = new HashSet<>();\n             Class<?> type = node.getType();\n-            for (Method m : type.getMethods()) {\n-                allDemands.add(m.getName());\n-            }\n-            for (Field f : type.getFields()) {\n-                allDemands.add(f.getName());\n-            }\n-            // also consider static fields, that are not public\n+            // consider static fields, public and non-public\n             for (Field f : type.getDeclaredFields()) {\n                 if (Modifier.isStatic(f.getModifiers())) {\n-                    allDemands.add(f.getName());\n+                    names.add(f.getName());\n                 }\n             }\n             // and methods, too\n             for (Method m : type.getDeclaredMethods()) {\n                 if (Modifier.isStatic(m.getModifiers())) {\n-                    allDemands.add(m.getName());\n+                    names.add(m.getName());\n                 }\n             }\n+            return names;\n+        } catch (LinkageError e) {\n+            if (ctx != null) {\n+                ctx.getReport().addError(new ProcessingError(e, String.valueOf(ctx.getSourceCodeFile())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTI0NA=="}, "originalCommit": {"oid": "22c3ce92ce53c9fa80c334f4c40aa79b7dd7351f"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 289, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}