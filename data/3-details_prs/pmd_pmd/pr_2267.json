{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTM3NzIy", "number": 2267, "title": "[docs] Update docs about writing rules", "bodyText": "This is long overdue. The current page is all over the place and the examples don't even work anymore.\n\nReorganise \"Writing custom rules\" and \"Writing XPath rules\" into\n\nan \"intro\", with some introductory info and some info that is relevant to both Java & XPath rules\na page with details specific to Java rules. I feel like most of this should be moved to the javadocs, but we can improve that later\na page with details about the XPath implementation & supported features\n\nthis includes doc about XPath version & migration. XPath 1.0 is supposed to have been deprecated for a while, now we can officialise that (refs #1687)\nthis also includes documentation for XPath functions\n\n\n\n\nUpdate \"Defining Properties\" to link to PropertyFactory instead of deprecated property types (this is due since PMD 6.10). I removed part of the doc because the Javadocs of PropertyFactory are nice enough\n\nI updated the Gemlock but this could be reverted if you don't want it. It uses bundler 2 now\nWdyt?", "createdAt": "2020-02-06T14:45:13Z", "url": "https://github.com/pmd/pmd/pull/2267", "merged": true, "mergeCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "closed": true, "closedAt": "2020-02-16T11:20:49Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBbjjygH2gAyMzcxOTM3NzIyOmRkN2Y2MmQxYzI4OGIzN2Q0NGI3Yzc3Yzg2MzQ1YTBhMGUwMzgzZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcE2kmnAFqTM1OTM5Mjk5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd7f62d1c288b37d44b7c77c86345a0a0e0383d1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/dd7f62d1c288b37d44b7c77c86345a0a0e0383d1", "committedDate": "2020-02-05T19:46:17Z", "message": "Rewrite XPath rule guide to add info about the designer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45291fb6d8ef18a2639fe74b77f185f845735c23", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/45291fb6d8ef18a2639fe74b77f185f845735c23", "committedDate": "2020-02-05T19:46:17Z", "message": "Update screenshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787a6a4a4d35a6d0fb70df5fc1934b1c1e6f4383", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/787a6a4a4d35a6d0fb70df5fc1934b1c1e6f4383", "committedDate": "2020-02-05T19:46:17Z", "message": "Document XPath funs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f47134c3f8065f41bc9c40561a6213ed6b5031", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/79f47134c3f8065f41bc9c40561a6213ed6b5031", "committedDate": "2020-02-05T19:46:17Z", "message": "Finish xpath spec page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b7db9dab0490cd3b61fa64accc1f2a39abc643", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/77b7db9dab0490cd3b61fa64accc1f2a39abc643", "committedDate": "2020-02-05T19:46:17Z", "message": "Document XPath migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae73bf369280976202db8d27c4f2cd2c1da27b05", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ae73bf369280976202db8d27c4f2cd2c1da27b05", "committedDate": "2020-02-05T19:46:17Z", "message": "Review intro of defining rule properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af612751dafca866e83264ed3444feaf320d4c7b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/af612751dafca866e83264ed3444feaf320d4c7b", "committedDate": "2020-02-05T19:46:17Z", "message": "Add resource index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee4dab30ac55cf57d0fdb154bb6a71cccf8ddc3", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/cee4dab30ac55cf57d0fdb154bb6a71cccf8ddc3", "committedDate": "2020-02-05T19:46:17Z", "message": "Update the defining properties page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fcc57db81a76aff9541f603743787402b83599d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/6fcc57db81a76aff9541f603743787402b83599d", "committedDate": "2020-02-05T19:46:17Z", "message": "Delete a bunch of useless guidelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9adea8b166bdf2f98959ea62b896b89be3f5cf06", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9adea8b166bdf2f98959ea62b896b89be3f5cf06", "committedDate": "2020-02-05T19:46:17Z", "message": "Start working on java rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "465dca240cad8c19a70a1790d5b9b14764aace50", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/465dca240cad8c19a70a1790d5b9b14764aace50", "committedDate": "2020-02-05T19:46:17Z", "message": "Document rule lifecycle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43680dee4a841f901362cee306ff6af6f7a154e8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/43680dee4a841f901362cee306ff6af6f7a154e8", "committedDate": "2020-02-05T19:46:17Z", "message": "Remove useless stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f496ce8be7b2a7f3c419db94b3c31bc9ed884dd6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f496ce8be7b2a7f3c419db94b3c31bc9ed884dd6", "committedDate": "2020-02-05T19:46:17Z", "message": "Make xpath fun rows expandable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7573fd94d988151bb9f7e6406e3735b42eee6e47", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7573fd94d988151bb9f7e6406e3735b42eee6e47", "committedDate": "2020-02-05T19:46:17Z", "message": "Use expandable row for xpath funs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe26203d5f47e0deeb859e5e08d5c6dc9764251", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/abe26203d5f47e0deeb859e5e08d5c6dc9764251", "committedDate": "2020-02-05T19:46:17Z", "message": "Add examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f061b58aa58b9db29b7e53056378cd23764e6e", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b2f061b58aa58b9db29b7e53056378cd23764e6e", "committedDate": "2020-02-05T19:46:17Z", "message": "Render markdown in descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "000376f2d299e1fcd50c2f4c14c6f6b85cc4b530", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/000376f2d299e1fcd50c2f4c14c6f6b85cc4b530", "committedDate": "2020-02-05T19:46:17Z", "message": "Update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3318cc28081a151735c7f1c13790df48e273b827", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/3318cc28081a151735c7f1c13790df48e273b827", "committedDate": "2020-02-05T19:46:17Z", "message": "Remove old page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90849802031b6f42690f4b3dade771fee885c978", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/90849802031b6f42690f4b3dade771fee885c978", "committedDate": "2020-02-05T19:46:17Z", "message": "Update again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/54b8acea5bd028d56961d0dd9c1bdd7d50699d42", "committedDate": "2020-02-06T16:00:37Z", "message": "Fix dead links"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4589dfb87e46eaf2acabc6fc66bc093b8e335fa3", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/4589dfb87e46eaf2acabc6fc66bc093b8e335fa3", "committedDate": "2020-02-06T15:21:58Z", "message": "Fix dead links"}, "afterCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/54b8acea5bd028d56961d0dd9c1bdd7d50699d42", "committedDate": "2020-02-06T16:00:37Z", "message": "Fix dead links"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzkyOTk1", "url": "https://github.com/pmd/pmd/pull/2267#pullrequestreview-359392995", "createdAt": "2020-02-16T10:09:20Z", "commit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMDowOToyMFrOFqSt_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMDo0ODoxMlrOFqS2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTE5Ng==", "bodyText": "Honestly, I think, we need such docs - lots of examples actually. It's easier to learn from examples and a website is more accessible than javadocs - you would need to have a starting pointer anyway, so at least a minimalistic documentation is always needed IMHO...", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379891196", "createdAt": "2020-02-16T10:09:20Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_java_rules.md", "diffHunk": "@@ -0,0 +1,164 @@\n+---\n+title:  Writing a custom rule\n+tags: [extending, userdocs]\n+summary: \"Learn how to write a custom rule for PMD\"\n+last_updated: July 3, 2016\n+permalink: pmd_userdocs_extending_writing_java_rules.html\n+author: Tom Copeland <tomcopeland@users.sourceforge.net>\n+---\n+\n+{% jdoc_nspace :coremx core::lang.metrics %}\n+{% jdoc_nspace :coreast core::lang.ast %}\n+{% jdoc_nspace :jmx java::lang.java.metrics %}\n+{% jdoc_nspace :jast java::lang.java.ast %}\n+{% jdoc_nspace :jrule java::lang.java.rule %}\n+\n+{% include note.html content=\"TODO All that should be written in the Javadocs,\n+not sure we even need a doc page. Would be simpler to maintain too\" %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MjE1NQ==", "bodyText": "For this case, we actually use a custom pmd rule: https://github.com/pmd/build-tools/blob/8434ea814f17e3b0fe1c56405b6673eb689d9c7c/src/main/resources/net/sourceforge/pmd/pmd-dogfood-config.xml#L583\nMaybe it's worth that we ship this rule in the main distro (in an application specific ruleset), so that it can be used when developing rules for PMD...", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379892155", "createdAt": "2020-02-16T10:25:51Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_java_rules.md", "diffHunk": "@@ -0,0 +1,164 @@\n+---\n+title:  Writing a custom rule\n+tags: [extending, userdocs]\n+summary: \"Learn how to write a custom rule for PMD\"\n+last_updated: July 3, 2016\n+permalink: pmd_userdocs_extending_writing_java_rules.html\n+author: Tom Copeland <tomcopeland@users.sourceforge.net>\n+---\n+\n+{% jdoc_nspace :coremx core::lang.metrics %}\n+{% jdoc_nspace :coreast core::lang.ast %}\n+{% jdoc_nspace :jmx java::lang.java.metrics %}\n+{% jdoc_nspace :jast java::lang.java.ast %}\n+{% jdoc_nspace :jrule java::lang.java.rule %}\n+\n+{% include note.html content=\"TODO All that should be written in the Javadocs,\n+not sure we even need a doc page. Would be simpler to maintain too\" %}\n+{% include warning.html content=\"WIP lots of stuff missing\" %}\n+\n+This page covers the specifics of writing a rule in Java. The basic development\n+process is very similar to the process for XPath rules, which is described in\n+[Your First Rule](pmd_userdocs_extending_your_first_rule.html#rule-development-process).\n+\n+Basically, you open the designer, look at the structure of the AST, and refine\n+your rule as you add test cases.\n+\n+In this page we'll talk about rules for the Java language, but the process is\n+very similar for other languages.\n+\n+\n+## Basics\n+\n+To write a rule in Java you'll have to:\n+ 1. write a Java class that implements the interface {% jdoc core::Rule %}. Each\n+language implementation provides a base rule class to ease your pain,\n+e.g. {% jdoc jrule::AbstractJavaRule %}.\n+ 2. compile this class, linking it to PMD APIs (eg using PMD as a maven dependency)\n+ 3. bundle this into a JAR and add it to the execution classpath of PMD\n+ 4. declare the rule in your ruleset XML\n+\n+## Rule execution\n+\n+Most base rule classes use a [Visitor pattern](https://sourcemaking.com/design_patterns/visitor)\n+to explore the AST.\n+\n+### Tree traversal\n+\n+When a rule is applied to a file, it's handed the root of the AST and told\n+to traverse all the tree to look for violations. Each rule defines a specific\n+`visit` method for each type of node for of the language, which\n+by default just visits the children.\n+\n+So the following rule would traverse the whole tree and do nothing:\n+\n+```java\n+public class MyRule extends AbstractJavaRule {\n+    // all methods are default implementations!\n+}\n+```\n+\n+Generally, a rule wants to check for only some node types. In our XPath example\n+in [Your First Rule](pmd_userdocs_extending_your_first_rule.html),\n+we wanted to check for some `VariableDeclaratorId` nodes. That's the XPath name,\n+but in Java, you'll get access to the {% jdoc jast::ASTVariableDeclaratorId %}\n+full API.\n+\n+If you want to check for some specific node types, you can override the\n+corresponding `visit` method:\n+\n+```java\n+public class MyRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTVariableDeclaratorId node, Object data) {\n+        // This method is called on each node of type ASTVariableDeclaratorId\n+        // in the AST\n+\n+        if (node.getType() == short.class) {\n+            // reports a violation at the position of the node\n+            // the \"data\" parameter is a context object handed to by your rule\n+            // the message for the violation is the message defined in the rule declaration XML element\n+            addViolation(data, node);\n+        }\n+\n+        // this calls back to the default implementation, which recurses further down the subtree\n+        return super.visit(node, data);\n+    }\n+}\n+```\n+\n+The `super.visit(node, data)` call is super common in rule implementations,\n+because it makes the traversal continue by visiting all the descendants of the\n+current node.\n+\n+#### Stopping the traversal\n+\n+Sometimes you have checked all you needed and you're sure that the descendants\n+of a node may not contain violations. In that case, you can avoid calling the\n+`super` implementation and the traversal will not continue further down. This\n+means that your callbacks (`visit` implementations) won't be called on the rest\n+of the subtree. The siblings of the current node may be visited\n+recursively nevertheless.\n+\n+#### Economic traversal: the rulechain\n+\n+If you don't care about the order in which the nodes are traversed (e.g. your\n+rule doesn't maintain any state between visits), then you can monumentally\n+speed-up your rule by using the **rulechain**.\n+\n+That mechanism doesn't recurse on all the tree, instead, your rule will only be\n+passed the nodes it is interested in. To use the rulechain correctly:\n+* Your rule must register those node types by calling {% jdoc core::Rule#addRuleChainVisit(java.lang.Class) %}\n+in its constructor.\n+* Your visit methods **must not recurse!** In effect, you should call never", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MjI5Ng==", "bodyText": "I think, it's actually better to override the start(RuleContext) method, to do any initialization before a file is analyzed.\nI'll change that...", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379892296", "createdAt": "2020-02-16T10:28:10Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_java_rules.md", "diffHunk": "@@ -0,0 +1,164 @@\n+---\n+title:  Writing a custom rule\n+tags: [extending, userdocs]\n+summary: \"Learn how to write a custom rule for PMD\"\n+last_updated: July 3, 2016\n+permalink: pmd_userdocs_extending_writing_java_rules.html\n+author: Tom Copeland <tomcopeland@users.sourceforge.net>\n+---\n+\n+{% jdoc_nspace :coremx core::lang.metrics %}\n+{% jdoc_nspace :coreast core::lang.ast %}\n+{% jdoc_nspace :jmx java::lang.java.metrics %}\n+{% jdoc_nspace :jast java::lang.java.ast %}\n+{% jdoc_nspace :jrule java::lang.java.rule %}\n+\n+{% include note.html content=\"TODO All that should be written in the Javadocs,\n+not sure we even need a doc page. Would be simpler to maintain too\" %}\n+{% include warning.html content=\"WIP lots of stuff missing\" %}\n+\n+This page covers the specifics of writing a rule in Java. The basic development\n+process is very similar to the process for XPath rules, which is described in\n+[Your First Rule](pmd_userdocs_extending_your_first_rule.html#rule-development-process).\n+\n+Basically, you open the designer, look at the structure of the AST, and refine\n+your rule as you add test cases.\n+\n+In this page we'll talk about rules for the Java language, but the process is\n+very similar for other languages.\n+\n+\n+## Basics\n+\n+To write a rule in Java you'll have to:\n+ 1. write a Java class that implements the interface {% jdoc core::Rule %}. Each\n+language implementation provides a base rule class to ease your pain,\n+e.g. {% jdoc jrule::AbstractJavaRule %}.\n+ 2. compile this class, linking it to PMD APIs (eg using PMD as a maven dependency)\n+ 3. bundle this into a JAR and add it to the execution classpath of PMD\n+ 4. declare the rule in your ruleset XML\n+\n+## Rule execution\n+\n+Most base rule classes use a [Visitor pattern](https://sourcemaking.com/design_patterns/visitor)\n+to explore the AST.\n+\n+### Tree traversal\n+\n+When a rule is applied to a file, it's handed the root of the AST and told\n+to traverse all the tree to look for violations. Each rule defines a specific\n+`visit` method for each type of node for of the language, which\n+by default just visits the children.\n+\n+So the following rule would traverse the whole tree and do nothing:\n+\n+```java\n+public class MyRule extends AbstractJavaRule {\n+    // all methods are default implementations!\n+}\n+```\n+\n+Generally, a rule wants to check for only some node types. In our XPath example\n+in [Your First Rule](pmd_userdocs_extending_your_first_rule.html),\n+we wanted to check for some `VariableDeclaratorId` nodes. That's the XPath name,\n+but in Java, you'll get access to the {% jdoc jast::ASTVariableDeclaratorId %}\n+full API.\n+\n+If you want to check for some specific node types, you can override the\n+corresponding `visit` method:\n+\n+```java\n+public class MyRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTVariableDeclaratorId node, Object data) {\n+        // This method is called on each node of type ASTVariableDeclaratorId\n+        // in the AST\n+\n+        if (node.getType() == short.class) {\n+            // reports a violation at the position of the node\n+            // the \"data\" parameter is a context object handed to by your rule\n+            // the message for the violation is the message defined in the rule declaration XML element\n+            addViolation(data, node);\n+        }\n+\n+        // this calls back to the default implementation, which recurses further down the subtree\n+        return super.visit(node, data);\n+    }\n+}\n+```\n+\n+The `super.visit(node, data)` call is super common in rule implementations,\n+because it makes the traversal continue by visiting all the descendants of the\n+current node.\n+\n+#### Stopping the traversal\n+\n+Sometimes you have checked all you needed and you're sure that the descendants\n+of a node may not contain violations. In that case, you can avoid calling the\n+`super` implementation and the traversal will not continue further down. This\n+means that your callbacks (`visit` implementations) won't be called on the rest\n+of the subtree. The siblings of the current node may be visited\n+recursively nevertheless.\n+\n+#### Economic traversal: the rulechain\n+\n+If you don't care about the order in which the nodes are traversed (e.g. your\n+rule doesn't maintain any state between visits), then you can monumentally\n+speed-up your rule by using the **rulechain**.\n+\n+That mechanism doesn't recurse on all the tree, instead, your rule will only be\n+passed the nodes it is interested in. To use the rulechain correctly:\n+* Your rule must register those node types by calling {% jdoc core::Rule#addRuleChainVisit(java.lang.Class) %}\n+in its constructor.\n+* Your visit methods **must not recurse!** In effect, you should call never\n+call `super.visit` in the methods.\n+\n+### Execution across files, thread-safety and statefulness\n+\n+When starting execution, PMD will instantiate a new instance of your rule.\n+If PMD is executed in multiple threads, then each thread is using its own\n+instance of the rule. This means, that the rule implementation **does not need to care about\n+threading issues**, as PMD makes sure, that a single instance is not used concurrently\n+by multiple threads.\n+\n+However, for performance reasons, the rule instances are used for multiple files.\n+This means, that the constructor of the rule is only executed once (per thread)\n+and the rule instance is reused. If you rely on a proper initialization of instance\n+properties, you can do the initialization e.g. in the visit-method of the {% jdoc jast::ASTCompilationUnit %}\n+node - which is visited first and only once per file. However, this\n+solution would only work for rules written for the Java language. A language\n+independent way is to override the method `apply` of the rule (and call super).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MjU1MA==", "bodyText": "I'd keep this page, in case someone has a deep link to https://pmd.github.io/latest/pmd_userdocs_extending_writing_pmd_rules.html\nI'll readd this page and provide links to the new pages you wrote.", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379892550", "createdAt": "2020-02-16T10:32:19Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_pmd_rules.md", "diffHunk": "@@ -1,330 +0,0 @@\n----\n-title:  Writing a custom rule\n-tags: [extending, userdocs]\n-summary: \"Learn how to write a custom rule for PMD\"\n-last_updated: July 3, 2016\n-permalink: pmd_userdocs_extending_writing_pmd_rules.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MjgwOA==", "bodyText": "Nice styling \ud83d\udc4d", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379892808", "createdAt": "2020-02-16T10:36:52Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_rules_intro.md", "diffHunk": "@@ -0,0 +1,141 @@\n+---\n+title: Introduction to writing PMD rules\n+tags: [extending, userdocs, getting_started]\n+summary: \"Writing your own PMD rules TODO\"\n+last_updated: July 2018 (6.6.0)\n+permalink: pmd_userdocs_extending_writing_rules_intro.html\n+author: Cl\u00e9ment Fournier <clement.fournier76@gmail.com>\n+---\n+\n+PMD is a framework to perform code analysis. You can create your own rules to\n+check for patterns specific to your codebase, or the coding practices of your\n+team.\n+\n+## How rules work: the AST\n+\n+Before running rules, PMD parses the source file into a data structure called an\n+**abstract syntax tree (AST)**. This tree represents the syntactic structure of the\n+code, and encodes syntactic relations between source code elements. For instance,\n+in Java, method declarations belong to a class: in the AST, the nodes representing\n+method declarations will be descendants of a node representing the declaration of\n+their enclosing class. This representation is thus much richer than the original\n+source code (which, for a program, is just a chain of characters), or the token\n+chain produced by a lexer (which is e.g. what Checkstyle works on). For example:\n+\n+<table>\n+<colgroup>\n+<col width=\"40%\" />\n+<col width=\"70%\" />\n+</colgroup>\n+<thead>\n+<tr class=\"header\">\n+<th>Sample code (Java)</th>\n+<th>AST</th>\n+</tr>\n+</thead>\n+<tbody>\n+<tr>\n+<td markdown=\"block\">\n+\n+```java\n+class Foo extends Object {\n+\n+}\n+```\n+\n+</td>\n+<td markdown=\"block\">\n+\n+```java\n+\u2514\u2500 CompilationUnit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5Mjg1NA==", "bodyText": "I some point, we might create a doc page about this -> https://github.com/pmd/pmd-examples", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379892854", "createdAt": "2020-02-16T10:37:58Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_java_rules.md", "diffHunk": "@@ -0,0 +1,164 @@\n+---\n+title:  Writing a custom rule\n+tags: [extending, userdocs]\n+summary: \"Learn how to write a custom rule for PMD\"\n+last_updated: July 3, 2016\n+permalink: pmd_userdocs_extending_writing_java_rules.html\n+author: Tom Copeland <tomcopeland@users.sourceforge.net>\n+---\n+\n+{% jdoc_nspace :coremx core::lang.metrics %}\n+{% jdoc_nspace :coreast core::lang.ast %}\n+{% jdoc_nspace :jmx java::lang.java.metrics %}\n+{% jdoc_nspace :jast java::lang.java.ast %}\n+{% jdoc_nspace :jrule java::lang.java.rule %}\n+\n+{% include note.html content=\"TODO All that should be written in the Javadocs,\n+not sure we even need a doc page. Would be simpler to maintain too\" %}\n+{% include warning.html content=\"WIP lots of stuff missing\" %}\n+\n+This page covers the specifics of writing a rule in Java. The basic development\n+process is very similar to the process for XPath rules, which is described in\n+[Your First Rule](pmd_userdocs_extending_your_first_rule.html#rule-development-process).\n+\n+Basically, you open the designer, look at the structure of the AST, and refine\n+your rule as you add test cases.\n+\n+In this page we'll talk about rules for the Java language, but the process is\n+very similar for other languages.\n+\n+\n+## Basics\n+\n+To write a rule in Java you'll have to:\n+ 1. write a Java class that implements the interface {% jdoc core::Rule %}. Each\n+language implementation provides a base rule class to ease your pain,\n+e.g. {% jdoc jrule::AbstractJavaRule %}.\n+ 2. compile this class, linking it to PMD APIs (eg using PMD as a maven dependency)\n+ 3. bundle this into a JAR and add it to the execution classpath of PMD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MzA0MA==", "bodyText": "I'd simply use the latest timestamp, which is now February 2020 (6.22.0)", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379893040", "createdAt": "2020-02-16T10:41:33Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_xpath_rules.md", "diffHunk": "@@ -1,198 +1,141 @@\n ---\n title:  Writing XPath rules\n tags: [extending, userdocs]\n-summary: \"Writing XPath rules for PMD\"\n-last_updated: July 3, 2016\n+summary: \"This page describes XPath rule support in more details\"\n+last_updated: July 2018 (6.6.0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MzM3Mw==", "bodyText": "Looks great!", "url": "https://github.com/pmd/pmd/pull/2267#discussion_r379893373", "createdAt": "2020-02-16T10:48:12Z", "author": {"login": "adangel"}, "path": "docs/pages/pmd/userdocs/extending/writing_xpath_rules.md", "diffHunk": "@@ -1,198 +1,141 @@\n ---\n title:  Writing XPath rules\n tags: [extending, userdocs]\n-summary: \"Writing XPath rules for PMD\"\n-last_updated: July 3, 2016\n+summary: \"This page describes XPath rule support in more details\"\n+last_updated: July 2018 (6.6.0)\n permalink: pmd_userdocs_extending_writing_xpath_rules.html\n-author: Miguel Griffa <mikkey@users.sourceforge.net>\n+author: Miguel Griffa <mikkey@users.sourceforge.net>, Cl\u00e9ment Fournier <clement.fournier76@gmail.com>\n ---\n \n-# XPath Rule tutorial\n \n-{% include note.html content=\"For a translation to Georgian, see [webhostinggeeks.com/science/xpath-sourceforge-ka](http://webhostinggeeks.com/science/xpath-sourceforge-ka)\" %}\n+{% jdoc_nspace :coremx core::lang.metrics %}\n+{% jdoc_nspace :coreast core::lang.ast %}\n+{% jdoc_nspace :jmx java::lang.java.metrics %}\n+{% jdoc_nspace :jast java::lang.java.ast %}\n \n \n-Writing PMD rules with XPath can be a bit easier than writing rules with Java code. Here\u2019s an introduction on how to do that.\n+This page describes some points of XPath rule support in more details. See\n+also [the tutorial about how to write an XPath rule](pmd_userdocs_extending_your_first_rule.html).\n \n-## Introduction\n+<!-- Later we can document the specific subset of XPath features our wrappers support -->\n \n-PMD provides a very handy method for writing rules by writing an XPath query. When the XPath query finds a match, a violation is added to the report. This document focuses on XPath rules. You can go [here](pmd_userdocs_extending_writing_pmd_rules.html) for more information about writing a rule.\n+## XPath version\n \n-## What is the Abstract Syntax Tree (AST)?\n+PMD supports three XPath versions for now: 1.0, 2.0, and 1.0 compatibility mode.\n+The version can be specified with the `version` property in the rule definition, like so:\n \n-From [FOLDOC](http://foldoc.org/abstract+syntax+tree) an AST is\n-\n-> A data structure representing something which has been parsed, often used as a compiler or interpreter\u2019s internal representation of a program while it is being optimised and from which code generation is performed.\n-\n-In our context, this means that we basically have a tree representation of the Java source file. This tree can viewed as a structured document - just like XML. And since it\u2019s conceptually similar to XML, it can be queried with XPath to find a pattern.\n-\n-## Using Designer\n-\n-PMD comes with a handy tool that you will love if you want to write an XPath rule. Designer, runnable from a script in `bin/`, is a very simple and useful utility for writing rules.\n-\n-The basic steps involved in writing XPath rules are these:\n-\n-1.  Write a simple Java example source snippet in Designer\n-2.  See the AST for the class you wrote\n-3.  Write an XPath expression that matches the violation you are searching\n-4.  Modify the Java class and go back to previous step to refine the XPath expression\n-\n-See [Designer Reference](pmd_userdocs_extending_designer_reference.html) for a more detailed explanation on how to use the designer.\n-\n-## Simple XPath expressions\n-\n-This section provides hands-on examples of XPath queries over the AST. You will probably find this section more useful if you follow it with Designer and copy/paste the examples.\n+```xml\n+<property version=\"2.0\" /> <!-- or \"1.0\", or \"1.0 compatibility\" -->\n+```\n \n-Copy the following Java source code to Designer:\n+The default has always been version 1.0.\n \n-```java\n-public class a {\n-    int fOne;\n-    int fTwo;\n+**As of PMD version 6.22.0, XPath versions 1.0 and the 1.0 compatibility mode are\n+deprecated**. XPath 2.0 is superior in many ways, for example for its support for\n+type checking, sequence values, or quantified expressions. For a detailed\n+but approachable review of the features of XPath 2.0 and above, see [the Saxon documentation](https://www.saxonica.com/documentation/index.html#!expressions).\n \n-    private void run() {\n-        int one;\n-        int two;\n-    }\n-}\n-```\n+It is recommended that you migrate to 2.0 before 7.0.0, but we expect\n+to be able to provide an automatic migration tool when releasing 7.0.0.\n+See [the migration guide](#migrating-from-10-to-20) below.\n \n-Let\u2019s assume you want to match something on class variable names. You see in the ASTVviewer that VariableDeclaratorId contains the variable name - in XML terms, the name is in the `@Image` attribute. So you try an XPath expression as follows:\n \n-`//VariableDeclaratorId`\n+## DOM representation of ASTs\n \n-If you try this expression you\u2019ll see that variables declared in methods are also matched. A more precise expression for matching field declarations is, well, using the FieldDeclaration node. This expression matches only the two fields declared in the class:\n+XPath rules view the AST as an XML-like DOM, which is what the XPath language is\n+defined on. Concretely, this means:\n+* Every AST node is viewed as an XML element\n+  * The element has for local name the value of {% jdoc core::lang.ast.Node#getXPathNodeName() %}\n+  for the given node\n+* Some Java getters are exposed as XML attributes on those elements\n+  * This means, that documentation for attributes can be found in our Javadocs. For\n+  example, the attribute `@SimpleName` of the Java node `EnumDeclaration` is backed\n+  by the Java getter {% jdoc java::lang.java.ast.ASTAnyTypeDeclaration#getSimpleName() %}.\n \n-`//FieldDeclaration`\n+### Value conversion\n \n-In a similar way, you can match only local variables with this expression\n+To represent attributes, we must map Java values to [XPath Data Model (XDM)](https://www.w3.org/TR/xpath-datamodel/) values. The conversion\n+depends on the XPath version used.\n \n-`//LocalVariableDeclaration`\n+#### XPath 1.0\n \n-With local variables we need to be more careful. Consider the following class:\n+On XPath 1.0 we map every Java value to an `xs:string` value by using the `toString`\n+of the object. Since XPath 1.0 allows many implicit conversions this works, but it\n+causes some incompatibilities with XPath 2.0 (see the section about migration further\n+ down).\n \n-```java\n-public class a {\n-    private void run() {\n-        final int one;\n-        int two;\n+#### XPath 2.0\n \n-        {\n-            int a;\n-        }\n-    }\n-}\n-```\n+XPath 2.0 is a strongly typed language, and so we use more precise type annotations.\n+In the following table we refer to the type conversion function as `conv`, a\n+function from Java types to XDM types.\n \n-Local variable declarations will match \u2018a\u2019, since it is a perfectly legal Java local variable. Now, a more interesting expression is to match variables declared in a method, and not on an internal block, nor in the class. Maybe you\u2019ll start with an expression like this:\n+| Java type `T` | XSD type `conv(T)`\n+|-----------------|---------------------|\n+|`int`            | `xs:integer`\n+|`long`           | `xs:integer`\n+|`double`         | `xs:decimal`\n+|`float`          | `xs:decimal`\n+|`boolean`        | `xs:boolean`\n+|`String`         | `xs:string`\n+|`Character`      | `xs:string`\n+|`List<E>`        | `conv(E)*` (a sequence type)\n \n-`//MethodDeclaration//LocalVariableDeclaration`\n \n-You\u2019ll quickly see that all three local variables are matched. A possible solution for this is to request that the parent of the local variable declaration is the MethodDeclaration node:\n+The same `conv` function is used to translate rule property values to XDM values.\n \n-`//LocalVariableDeclaration[name(../../..) = 'MethodDeclaration']`\n \n-## Matching variables by name\n+## Migrating from 1.0 to 2.0\n \n-Let\u2019s consider that we are writing rules for logger. Let\u2019s assume we use the Java logging API and we want to find all classes that have more than one logger. The following expression returns all variable declarations whose type is \u2018Logger\u2019.\n+XPath 1.0 and 2.0 have some incompatibilities. The [XPath 2.0 specification](https://www.w3.org/TR/xpath20/#id-incompat-in-false-mode)\n+describes them precisely. Those are however mostly corner cases and XPath\n+rules usually don't feature any of them.\n \n-`//VariableDeclarator[../Type/ReferenceType/ClassOrInterfaceType[@Image='Logger']]`\n+The incompatibilities that are most relevant to migrating your rules are not\n+caused by the specification, but by the different engines we use to run\n+XPath 1.0 and 2.0 queries. Here's a list of known incompatibilities:\n \n-Finding a class with more than one logger is quite easy now. This expression matches the classes we are looking for.\n+* The namespace prefixes `fn:` and `string:` should not be mentioned explicitly.\n+In XPath 2.0 mode, the engine will complain about an undeclared namespace, but\n+the functions are in the default namespace. Removing the namespace prefixes fixes it.\n+   * <code><b style=\"color:red\">fn:</b>substring(\"Foo\", 1)</code> &rarr; `substring(\"Foo\", 1)`\n+* Conversely, calls to custom PMD functions like `typeIs` *must* be prefixed\n+with the namespace of the declaring module (`pmd-java`).\n+   * `typeIs(\"Foo\")` &rarr; <code><b style=\"color:green\">pmd-java:</b>typeIs(\"Foo\")</code>\n+* Boolean attribute values on our 1.0 engine are represented as the string values\n+`\"true\"` and `\"false\"`. In 2.0 mode though, boolean values are truly represented\n+as boolean values, which in XPath may only be obtained through the functions\n+`true()` and `false()`.\n+If your XPath 1.0 rule tests an attribute like `@Private=\"true\"`, then it just\n+needs to be changed to `@Private=true()` when migrating. A type error will warn\n+you that you must update the comparison. More is explained on [issue #1244](https://github.com/pmd/pmd/issues/1244).\n+   * `\"true\"`, `'true'` &rarr; `true()`\n+   * `\"false\"`, `'false'` &rarr; `false()`\n \n-```xpath\n-TypeDeclaration[count(//VariableDeclarator[../Type/ReferenceType/ClassOrInterfaceType[@Image='Logger']])>1\n-```\n+* In XPath 1.0, comparing a number to a string coerces the string to a number.\n+In XPath 2.0, a type error occurs. Like for boolean values, numeric values are\n+represented by our 1.0 implementation as strings, meaning that `@BeginLine > \"1\"`\n+worked ---that's not the case in 2.0 mode.\n+   * <code>@ArgumentCount > <b style=\"color:red\">'</b>1<b style=\"color:red\">'</b></code> &rarr; `@ArgumentCount > 1`\n \n-But let\u2019s refine this expression a little bit more. Consider the following class:\n-\n-```java\n-public class a {\n-    Logger log = null;\n-    Logger log = null;\n-    int b;\n-\n-    void myMethod() {\n-        Logger log = null;\n-        int a;\n-    }\n-    class c {\n-        Logger a;\n-        Logger a;\n-    }\n-}\n-```\n+## Rule properties\n \n-With this class we will only be matching one violation, when we probably would have wanted to produce two violations (one for each class). The following refined expression matches classes that contain more than one logger.\n+**See [Defining rule properties](pmd_userdocs_extending_defining_properties.html#for-xpath-rules)**\n \n-```xpath\n-//ClassOrInterfaceBodyDeclaration[count(//VariableDeclarator[../Type/ReferenceType/ClassOrInterfaceType[@Image='Logger']])>1]\n-```\n \n-Let\u2019s assume we have a Factory class, that could be always declared final. We\u2019ll search an xpath expression that matches all declarations of Factory and reports a violation if it is not declared final. Consider the following class:\n+## PMD extension functions\n \n-```java\n-public class a {\n-    Factory f1;\n+PMD provides some language-specific XPath functions to access semantic\n+information from the AST.\n \n-    void myMethod() {\n-        Factory f2;\n-        int a;\n-    }\n-}\n-```\n+On XPath 2.0, the namespace of custom PMD function must be explicitly mentioned.\n \n-The following expression does the magic we need:\n+{% render %}\n+{% include custom/xpath_fun_doc.html %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b8acea5bd028d56961d0dd9c1bdd7d50699d42"}, "originalPosition": 238}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}