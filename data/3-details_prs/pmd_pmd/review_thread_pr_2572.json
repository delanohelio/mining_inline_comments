{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzMxMjQ2", "number": 2572, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NTowMVrOEGwdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDoyOFrOEG1x4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTIwODEzOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/test/java/net/sourceforge/pmd/cpd/ApexTokenizerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NTowMVrOGlv__A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NTowMVrOGlv__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjkyNA==", "bodyText": "Note that the override is necessary because test classes are in the same package as the tested tokenizer (n.s.pmd.cpd), while test files are in this new package. For 7.0 it would be best to move all tokenizers into the language-specific package:\n#2457 (comment)\nAnd these resource prefixes could be removed", "url": "https://github.com/pmd/pmd/pull/2572#discussion_r442236924", "createdAt": "2020-06-18T13:45:01Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/test/java/net/sourceforge/pmd/cpd/ApexTokenizerTest.java", "diffHunk": "@@ -4,89 +4,57 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Properties;\n \n-import org.apache.commons.io.IOUtils;\n import org.junit.Test;\n \n-import net.sourceforge.pmd.PMD;\n-import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader;\n+import net.sourceforge.pmd.cpd.test.CpdTextComparisonTest;\n+\n+public class ApexTokenizerTest extends CpdTextComparisonTest {\n+\n+    public ApexTokenizerTest() {\n+        super(\".cls\");\n+    }\n+\n+    @Override\n+    protected String getResourcePrefix() {\n+        return \"../lang/apex/cpd/testdata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2592c56229a5030d380b37ecfc7afefa08cafc2c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTkzMTk1OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/TokenEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyOToyNlrOGl3IkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyOToyNlrOGl3IkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1MzgwOQ==", "bodyText": "\ud83d\ude04", "url": "https://github.com/pmd/pmd/pull/2572#discussion_r442353809", "createdAt": "2020-06-18T16:29:26Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/TokenEntry.java", "diffHunk": "@@ -48,7 +48,10 @@ private TokenEntry() {\n      * @param image\n      * @param tokenSrcID\n      * @param beginLine the linenumber, 1-based.\n+     *\n+     * @deprecated Use {@link #TokenEntry(String, String, int, int, int)}, don't be lazy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2592c56229a5030d380b37ecfc7afefa08cafc2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA1MjU2OnYy", "diffSide": "RIGHT", "path": "pmd-lang-test/src/main/kotlin/net/sourceforge/pmd/cpd/test/CpdTextComparisonTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjowMFrOGl4WHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjowMFrOGl4WHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MzY2MA==", "bodyText": "Does \\\\R work here? It maybe just doesn't match anything (and we don't have anything else than \\n anyway...).\nI'll change it to \\\\u000D\\\\u000A|[\\\\u000A\\\\u000B\\\\u000C\\\\u000D\\\\u0085\\\\u2028\\\\u2029] with the comment \"java8+ ...\"", "url": "https://github.com/pmd/pmd/pull/2572#discussion_r442373660", "createdAt": "2020-06-18T17:02:00Z", "author": {"login": "adangel"}, "path": "pmd-lang-test/src/main/kotlin/net/sourceforge/pmd/cpd/test/CpdTextComparisonTest.kt", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd.test\n+\n+import net.sourceforge.pmd.cpd.SourceCode\n+import net.sourceforge.pmd.cpd.TokenEntry\n+import net.sourceforge.pmd.cpd.Tokenizer\n+import net.sourceforge.pmd.cpd.Tokens\n+import net.sourceforge.pmd.test.BaseTextComparisonTest\n+import org.apache.commons.lang3.StringUtils\n+import java.util.*\n+\n+/**\n+ * CPD test comparing a dump of a file against a saved baseline.\n+ * Each token is printed on a separate line.\n+ *\n+ * @param extensionIncludingDot File extension for the language.\n+ *                              Baseline files are saved in txt files.\n+ */\n+abstract class CpdTextComparisonTest(\n+        override val extensionIncludingDot: String\n+) : BaseTextComparisonTest() {\n+\n+    abstract fun newTokenizer(properties: Properties): Tokenizer\n+\n+    override val resourceLoader: Class<*>\n+        get() = javaClass\n+\n+    override val resourcePrefix: String\n+        get() = \"testdata\"\n+\n+\n+    open fun defaultProperties() = Properties()\n+\n+    /**\n+     * A test comparing the output of the tokenizer.\n+     *\n+     * @param fileBaseName   Name of the source file (without extension or resource prefix)\n+     * @param expectedSuffix Suffix to append to the expected file. This allows reusing the same source file\n+     *                       with different configurations, provided the suffix is different\n+     * @param properties     Properties to configure [newTokenizer]\n+     */\n+    @JvmOverloads\n+    fun doTest(fileBaseName: String, expectedSuffix: String = \"\", properties: Properties = defaultProperties()) {\n+        super.doTest(fileBaseName, expectedSuffix) { sourceText ->\n+            val sourceCode = SourceCode(SourceCode.StringCodeLoader(sourceText, \"$fileBaseName$extensionIncludingDot\"))\n+            val tokens = Tokens().also {\n+                val tokenizer = newTokenizer(properties)\n+                tokenizer.tokenize(sourceCode, it)\n+            }\n+\n+            buildString { format(tokens) }\n+        }\n+    }\n+\n+\n+    private fun StringBuilder.format(tokens: Tokens) {\n+        appendHeader().appendln()\n+\n+        var curLine = -1\n+\n+        for (token in tokens.iterator()) {\n+\n+            if (token === TokenEntry.EOF) {\n+                append(\"EOF\").appendln()\n+                continue\n+            }\n+\n+            if (curLine != token.beginLine) {\n+                curLine = token.beginLine\n+                append('L').append(curLine).appendln()\n+            }\n+\n+            formatLine(token).appendln()\n+        }\n+    }\n+\n+\n+    private fun StringBuilder.appendHeader() =\n+            formatLine(\n+                    escapedImage = \"[Image] or [Truncated image[\",\n+                    bcol = \"Bcol\",\n+                    ecol = \"Ecol\"\n+            )\n+\n+\n+    private fun StringBuilder.formatLine(token: TokenEntry) =\n+            formatLine(\n+                    escapedImage = escapeImage(token.toString()),\n+                    bcol = token.beginColumn,\n+                    ecol = token.endColumn\n+            )\n+\n+\n+    private fun StringBuilder.formatLine(escapedImage: String, bcol: Any, ecol: Any): StringBuilder {\n+        var colStart = length\n+        colStart = append(Indent).append(escapedImage).padCol(colStart, Col0Width)\n+        colStart = append(Indent).append(bcol).padCol(colStart, Col1Width)\n+        return append(ecol)\n+    }\n+\n+    private fun StringBuilder.padCol(colStart: Int, colWidth: Int): Int {\n+        for (i in 1..(colStart + colWidth - this.length))\n+            append(' ')\n+\n+        return length\n+    }\n+\n+\n+    private fun escapeImage(str: String): String {\n+        val escaped = str\n+                .replace(\"\\\\\", \"\\\\\\\\\")                 // escape backslashes\n+                .replace(\"\\r\\n\", \"\\\\r\\\\n\")             // CRLF (treated specially because it has a different length)\n+                .replace(\"\\t\", \"\\\\t\")                  // TAB\n+                .replace(Regex(\"\\\\R\"), \"\\\\\\\\n\")       // escape other newlines (normalizing)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2592c56229a5030d380b37ecfc7afefa08cafc2c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA3NTAwOnYy", "diffSide": "RIGHT", "path": "pmd-scala-modules/pmd-scala-common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowOTowMVrOGl4lBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowOTowMVrOGl4lBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NzQ3OA==", "bodyText": "That should not be necessary, thanks to \n  \n    \n      pmd/pom.xml\n    \n    \n         Line 259\n      in\n      e435037\n    \n    \n    \n    \n\n        \n          \n           <mvn.project.src.test.resources>${project.build.testResources[0].directory}</mvn.project.src.test.resources> \n        \n    \n  \n\n\nI'll test, whether it works without this config...", "url": "https://github.com/pmd/pmd/pull/2572#discussion_r442377478", "createdAt": "2020-06-18T17:09:01Z", "author": {"login": "adangel"}, "path": "pmd-scala-modules/pmd-scala-common/pom.xml", "diffHunk": "@@ -74,6 +74,16 @@\n                     </executions>\n                 </plugin>\n \n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <configuration>\n+                        <systemPropertyVariables>\n+                            <mvn.project.src.test.resources>${project.basedir}/../pmd-scala-common/src/test/resources</mvn.project.src.test.resources>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2592c56229a5030d380b37ecfc7afefa08cafc2c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA4MDM0OnYy", "diffSide": "RIGHT", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDoyOFrOGl4oSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDoyOFrOGl4oSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODMxMg==", "bodyText": "really? wow...", "url": "https://github.com/pmd/pmd/pull/2572#discussion_r442378312", "createdAt": "2020-06-18T17:10:28Z", "author": {"login": "adangel"}, "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -74,12 +76,26 @@ public void tokenize(SourceCode sourceCode, Tokens tokenEntries) throws IOExcept\n \n             Token token;\n             while ((token = filter.getNextToken()) != null) {\n-                String tokenText = token.text() != null ? token.text() : token.name();\n-                Position tokenPosition = token.pos();\n-                TokenEntry cpdToken = new TokenEntry(tokenText, filename, tokenPosition.startLine(),\n-                        tokenPosition.startColumn(), tokenPosition.endColumn());\n+                if (StringUtils.isEmpty(token.text())) {\n+                    continue;\n+                }\n+                Position pos = token.pos();\n+                TokenEntry cpdToken = new TokenEntry(token.text(),\n+                                                     filename,\n+                                                     pos.startLine() + 1,\n+                                                     pos.startColumn() + 1,\n+                                                     pos.endColumn() + 1);\n                 tokenEntries.add(cpdToken);\n             }\n+        } catch (Exception e) {\n+            if (e instanceof TokenizeException) { // NOPMD\n+                // cannot catch it as it's a checked exception and Scala sneaky throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2592c56229a5030d380b37ecfc7afefa08cafc2c"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 428, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}