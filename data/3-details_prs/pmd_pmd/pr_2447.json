{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTUzNjUw", "number": 2447, "title": "[core] Cleanup Node and AbstractNode", "bodyText": "Describe the PR\nThis removes deprecated methods of Node and AbstractNode, and tears down the functionality that is in AbstractNode but not used by all subclasses. It also cleans up some tests that were either using deprecated functionality, or were just building invalid nodes.\nChanges in pmd-core:\n\nRemove most deprecated methods from AbstractNode and Node\nMove AbstractNode into the impl subpackage\nRemove some fields from AbstractNode\n\nthe image field, which is pushed down to abstract base classes that need it\nthe begin/end/line/column fields, pushed down to a new AbstractNodeWithTextCoordinates base class (which eg Jjtree nodes don't extend). This base class name is ugly but I think we can remove it later if we add an object to encapsulate this position information\nthe id field is pushed down to AbstractJjtreeNode\nthe fields about DataflowNode are removed, instead the data flow framework uses a key in the data map\n\n\nMake the remaining fields private\nMake the methods for tree construction protected\n\nThis includes eg jjtClose/jjtOpen, which are pulled down from Node to AbstractJjtreeNode\n\n\nPull up some methods that are currently on the java-grammar branch and only available to AbstractJavaNode to AbstractNode (eg insertChild, this is now used by the apex module too)\nEnsure Parser returns a RootNode\nNodeStream methods in Node now use upper bounded wildcards, eg Node::ancestors returns NodeStream<? extends Node>. This is to make it overridable by eg NodeStream<JavaNode>. Duplication of the overrides is removed by an interface \"GenericNode\", because I found it was hard to add a type parameter to Node directly (very contagious), and it also wouldn't be useful in language-independent code, only in language modules. Some type parameters are added to AbstractNode, but this keeps complexity to a minimum while improving the type safety and ease of use of the API. For example, it's impossible to add an arbitrary Node as a child to a JavaNode now, the child must be an AbstractJavaNode. This in turn enables us to say for sure, that the ancestor stream contains only JavaNodes. Of course this is Java, so unchecked conversions can still break the type safety, but since mutation methods are now protected, we can be reasonably sure of it.\n\nChanges in language modules:\n\nMake AbstractPLSQLNode package-private (this moves up some of its methods to the interface, removes the method dump, because now we have getText anyway)\nAbstractApexNodeBase is merged into AbstractApexNode and removed\nRemove all childrenAccept methods (in several modules)\nIn pmd-java, ClassScope doesn't build its custom method declaration itself anymore. It just asks InternalApiBridge, which lets us make all node constructors package-private\nIn pmd-java, Comment now extends AbstractJjtreeNode, it's technically a separate tree: the parent of a comment cannot be a JavaNode, the child of a JavaNode cannot be a Comment. Thankfully this is now enforced at compile time. This needs some more thought, I don't know if this should stay or go, or what relation this would have to a \"javadoc language module\".\n\nThe changes in test sources are mostly fixing the following problems:\n\nusing testingOnlySetBeginLine/Column without setting other coordinates (which makes these methods inconsistent)\nsetting invalid coordinates (eg not correctly ordered, argument is 0 but line and columns start at 1)\n\nRelated issues\n\nPart of #2239\nFollow up on #2172\n\nReady?\n\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-04-26T20:36:28Z", "url": "https://github.com/pmd/pmd/pull/2447", "merged": true, "mergeCommit": {"oid": "57177abba3202446b7ecb442a98e64ffd52fab48"}, "closed": true, "closedAt": "2020-05-02T15:24:59Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcagxhbAH2gAyNDA5MTUzNjUwOjljOWY5YzQ1OGIxOGM0Nzc1ZGM1ZmRlYmE1OTM4NzI0YjQxNzY1NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdX0WcgFqTQwNDUzMTU5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c9f9c458b18c4775dc5fdeba5938724b4176563", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9c9f9c458b18c4775dc5fdeba5938724b4176563", "committedDate": "2020-04-23T17:59:10Z", "message": "Merge branch 'deprecate-find-xx-of-any-type' into tmp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13cacee11f5a398d0da5abb0f9e6b367296eda90", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/13cacee11f5a398d0da5abb0f9e6b367296eda90", "committedDate": "2020-04-23T17:59:51Z", "message": "Cleanup AbstractNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cfa9cb6de12b9cbf429009b8122151e9593b782", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/3cfa9cb6de12b9cbf429009b8122151e9593b782", "committedDate": "2020-04-23T17:59:51Z", "message": "Merge AbstractApexNode[Base]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "715b28d53123a20b2694856bb4fe788a408bbce6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/715b28d53123a20b2694856bb4fe788a408bbce6", "committedDate": "2020-04-23T17:59:51Z", "message": "Bring back the remove[child] methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0735011c7cd73ec75e575699b85daf5c72b93fcd", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/0735011c7cd73ec75e575699b85daf5c72b93fcd", "committedDate": "2020-04-23T17:59:52Z", "message": "Move AbstractNode in .impl package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd866e8b62326d55306fed2a4de79017bc702e8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1fd866e8b62326d55306fed2a4de79017bc702e8", "committedDate": "2020-04-23T17:59:52Z", "message": "Fewer unchecked casts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11d7aeb10f491382f4a09e2a22d9bcd1f875d358", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/11d7aeb10f491382f4a09e2a22d9bcd1f875d358", "committedDate": "2020-04-23T17:59:52Z", "message": "Add GenericNode & JjtreeNode interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c26374057ccb92b8d62ad0b7e8b3c66fe7680f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/35c26374057ccb92b8d62ad0b7e8b3c66fe7680f", "committedDate": "2020-04-23T17:59:52Z", "message": "Remove childrenAccept"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83189fce7721e313bd2aedb222bd5d6119b2660d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/83189fce7721e313bd2aedb222bd5d6119b2660d", "committedDate": "2020-04-23T17:59:52Z", "message": "Stop ClassScope from building nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197f901fa6a06d693207cf80aa0418583b0391d4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/197f901fa6a06d693207cf80aa0418583b0391d4", "committedDate": "2020-04-23T17:59:52Z", "message": "Cleanup tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "434881edac80cd0763ec752fbca31ecfd2b30662", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/434881edac80cd0763ec752fbca31ecfd2b30662", "committedDate": "2020-04-23T17:59:52Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "036b2d5ecae1befec57b0cdc3a2591c77edf94bb", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/036b2d5ecae1befec57b0cdc3a2591c77edf94bb", "committedDate": "2020-04-23T18:00:17Z", "message": "Cleanup more things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41f4d84f8b2c2c121730b3b7b68b0b36d7b1892", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d41f4d84f8b2c2c121730b3b7b68b0b36d7b1892", "committedDate": "2020-04-23T19:15:50Z", "message": "Remove Dataflow methods from Node/AbstractNode\n\nReplaced with a DataKey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786a09bed039cc373bb477943e999d55058010ef", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/786a09bed039cc373bb477943e999d55058010ef", "committedDate": "2020-04-23T19:15:52Z", "message": "Doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c37434304d36c96e174d98933c855fbed8aa75", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/81c37434304d36c96e174d98933c855fbed8aa75", "committedDate": "2020-04-23T19:15:52Z", "message": "Hide setImage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a9bf5df635009ab1b0c5e64d546089d948539e", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/24a9bf5df635009ab1b0c5e64d546089d948539e", "committedDate": "2020-04-26T15:03:28Z", "message": "Merge branch '7.0.x' into cleanup-abstract-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74446a50cea6ff4fa58f6b2134eb1e3c65776be", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c74446a50cea6ff4fa58f6b2134eb1e3c65776be", "committedDate": "2020-04-26T15:10:31Z", "message": "Merge branch '7.0.x' into cleanup-abstract-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "443703f4f3a60cd54384b7cc749a4a33595a6605", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/443703f4f3a60cd54384b7cc749a4a33595a6605", "committedDate": "2020-04-26T15:23:31Z", "message": "Doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702815780832de3d2e100a863c6165aa915623df", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/702815780832de3d2e100a863c6165aa915623df", "committedDate": "2020-04-26T15:29:27Z", "message": "Ensure Parser returns a RootNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e892e1323851ce7b8a0850862760ee3b0086a25", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/3e892e1323851ce7b8a0850862760ee3b0086a25", "committedDate": "2020-04-26T16:07:50Z", "message": "Make children array private, fix comment nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e414c73d07148e7a0b9cbcbb09265769f2a4a7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/13e414c73d07148e7a0b9cbcbb09265769f2a4a7", "committedDate": "2020-04-26T16:28:47Z", "message": "Add insertChild"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a6d7b393c7ffec54e9dcba523c4cfc075e2c567", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1a6d7b393c7ffec54e9dcba523c4cfc075e2c567", "committedDate": "2020-04-26T17:04:31Z", "message": "Add a type parameter to AbstractNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaceca557442fa224f7eff8ed5b0509154a66aaa", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/aaceca557442fa224f7eff8ed5b0509154a66aaa", "committedDate": "2020-04-26T17:33:02Z", "message": "Fix compil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c4abd9f408bab1e3d0b3af222b82d7c93882bb", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/24c4abd9f408bab1e3d0b3af222b82d7c93882bb", "committedDate": "2020-04-26T18:24:43Z", "message": "Remove tparam of JjtreeBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b26eb206365d72534dcfa4022fb36fbc5d870feb", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b26eb206365d72534dcfa4022fb36fbc5d870feb", "committedDate": "2020-04-26T19:31:57Z", "message": "Fix dataflow code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a237ae4adc421c57b5486fe11306ac85205309f9", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/a237ae4adc421c57b5486fe11306ac85205309f9", "committedDate": "2020-04-26T19:32:14Z", "message": "Reinstate ClassScope building of enum valueOf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e108679738407f1afaf729ef0698d3168bbe12d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7e108679738407f1afaf729ef0698d3168bbe12d", "committedDate": "2020-04-26T19:38:38Z", "message": "Fix apex module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bb7e3d6e7ab8026445159da3317dc12c16b9ef8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1bb7e3d6e7ab8026445159da3317dc12c16b9ef8", "committedDate": "2020-04-26T19:44:36Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "541b4c368d5df84b353c3dc673e3ff41d8a9c9a1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/541b4c368d5df84b353c3dc673e3ff41d8a9c9a1", "committedDate": "2020-04-26T19:58:50Z", "message": "Bring back SimpleNodeTest\n\nNo real reason to remove it, but it should be\nmoved to pmd-core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020f2a9a0cbbcd580ac1d3b05785826167d1fbf6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/020f2a9a0cbbcd580ac1d3b05785826167d1fbf6", "committedDate": "2020-04-26T20:07:16Z", "message": "Make AbstractPLSQLNode package-private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd835c0bb5089e153691b61a665b1579de08c49f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/bd835c0bb5089e153691b61a665b1579de08c49f", "committedDate": "2020-04-29T07:19:00Z", "message": "Merge branch '7.0.x' into cleanup-abstract-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/efef060e9d7ab0f1ff772c828f2618e9bca34664", "committedDate": "2020-05-01T14:25:40Z", "message": "Merge branch '7.0.x' into cleanup-abstract-node"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTMxNTkw", "url": "https://github.com/pmd/pmd/pull/2447#pullrequestreview-404531590", "createdAt": "2020-05-02T14:13:05Z", "commit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDoxMzowNVrOGPjg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTowNzo0OVrOGPj2tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MzY4Mw==", "bodyText": "Once we removed the generic \"getImage\" method in favor of more specific methods likes \"getName\" etc., this method also doesn't make sense and should be removed", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418963683", "createdAt": "2020-05-02T14:13:05Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -186,23 +57,13 @@ default String getImage() {\n     }\n \n \n-    /**\n-     * @deprecated This is internal API, the image should never be set by developers.\n-     */\n-    @InternalApi\n-    @Deprecated\n-    default void setImage(String image) {\n-        throw new UnsupportedOperationException(\"setImage\");\n-    }\n-\n-\n     /**\n      * Returns true if this node's image is equal to the given string.\n      *\n      * @param image The image to check\n      */\n     default boolean hasImageEqualTo(String image) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDcyMg==", "bodyText": "Do we need three different ways to add children? (addChild, insertChild, setChildren)\nCan we reduce this maybe?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418964722", "createdAt": "2020-05-02T14:23:20Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDk5Ng==", "bodyText": "Is this needed as a protected method? It looks error prone, if this is ever forgotten to be called. And it probably shouldn't needed to be called -> addChild etc. should automatically make sure, the tree is consistent.", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418964996", "createdAt": "2020-05-02T14:25:45Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/AbstractNode.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.util.DataMap;\n+import net.sourceforge.pmd.util.DataMap.DataKey;\n+\n+/**\n+ * Base class for implementations of the Node interface whose children\n+ * are stored in an array. This class provides the basic utilities to\n+ * link children and parent. It's used by most most nodes, but currently\n+ * not the antlr nodes, so downcasting {@link Node} to this class may fail\n+ * and is very bad practice.\n+ *\n+ * @param <B> Self type (eg AbstractJavaNode in the java module), this\n+ *            must ultimately implement {@code <N>}, though the java type\n+ *            system does not allow us to express that\n+ * @param <N> Public interface for nodes of this language (eg JavaNode\n+ *            in the java module).\n+ */\n+public abstract class AbstractNode<B extends AbstractNode<B, N>, N extends GenericNode<N>> implements GenericNode<N> {\n+\n+    private static final Node[] EMPTY_ARRAY = new Node[0];\n+\n+    // lazy initialized, many nodes don't need it\n+    private @Nullable DataMap<DataKey<?, ?>> userData;\n+\n+    // never null, never contains null elements\n+    private Node[] children = EMPTY_ARRAY;\n+    private B parent;\n+    private int childIndex;\n+\n+    protected AbstractNode() {\n+        // only for subclassing\n+    }\n+\n+    @Override\n+    public N getParent() {\n+        return (N) parent;\n+    }\n+\n+    @Override\n+    public int getIndexInParent() {\n+        return childIndex;\n+    }\n+\n+    @Override\n+    public N getChild(final int index) {\n+        return (N) children[index];\n+    }\n+\n+    @Override\n+    public int getNumChildren() {\n+        return children.length;\n+    }\n+\n+    protected void setParent(final B parent) {\n+        this.parent = parent;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private B asSelf(Node n) {\n+        return (B) n;\n+    }\n+\n+    /**\n+     * Set the child at the given index to the given node. This resizes\n+     * the children array to be able to contain the given index. Implementations\n+     * must take care that this does not leave any \"holes\" in the array.\n+     * This method throws if there is already a child at the given index.\n+     *\n+     * <p>Note that it is more efficient to add children in reverse\n+     * (from right to left), because the array is resized only the\n+     * first time.\n+     *\n+     * <p>This method also calls {@link #setParent(AbstractNode)}.\n+     *\n+     * @param child The child to add\n+     * @param index The index to which the child will be added\n+     */\n+    protected void addChild(final B child, final int index) {\n+        assert index >= 0 : \"Invalid index \" + index;\n+        assert index >= children.length || children[index] == null : \"There is already a child at index \" + index;\n+\n+        if (index >= children.length) {\n+            final Node[] newChildren = new Node[index + 1];\n+            System.arraycopy(children, 0, newChildren, 0, children.length);\n+            children = newChildren;\n+        }\n+\n+        children[index] = child;\n+        child.setChildIndex(index);\n+        child.setParent(asSelf(this));\n+    }\n+\n+    /**\n+     * Insert a child at the given index, shifting all the following\n+     * children to the right.\n+     *\n+     * @param child New child\n+     * @param index Index (must be 0 <= index <= getNumChildren()), ie\n+     *              you can insert a node beyond the end, because that\n+     *              would leave holes in the array\n+     */\n+    protected void insertChild(final B child, final int index) {\n+        assert index >= 0 && index <= children.length\n+            : \"Invalid index for insertion into array of length \" + children.length + \": \" + index;\n+\n+        Node[] newChildren = new Node[children.length + 1];\n+        if (index != 0) {\n+            System.arraycopy(children, 0, newChildren, 0, index);\n+        }\n+        if (index != children.length) {\n+            System.arraycopy(children, index, newChildren, index + 1, children.length - index);\n+        }\n+        newChildren[index] = child;\n+        child.setParent(asSelf(this));\n+\n+        for (int i = index; i < newChildren.length; i++) {\n+            asSelf(newChildren[i]).setChildIndex(i);\n+        }\n+        this.children = newChildren;\n+    }\n+\n+\n+    @SafeVarargs\n+    protected final void setChildren(B... newChildren) {\n+        this.children = new Node[newChildren.length];\n+        System.arraycopy(newChildren, 0, this.children, 0, newChildren.length);\n+        for (int i = 0; i < newChildren.length; i++) {\n+            newChildren[i].setParent(asSelf(this));\n+            newChildren[i].setChildIndex(i);\n+        }\n+    }\n+\n+\n+    protected void remove() {\n+        // Detach current node of its parent, if any\n+        if (parent != null) {\n+            parent.removeChildAtIndex(getIndexInParent());\n+            setParent(null);\n+        }\n+\n+        // TODO [autofix]: Notify action for handling text edition\n+    }\n+\n+    protected void removeChildAtIndex(final int childIndex) {\n+        if (0 <= childIndex && childIndex < getNumChildren()) {\n+            // Remove the child at the given index\n+            children = ArrayUtils.remove(children, childIndex);\n+            // Update the remaining & left-shifted children indexes\n+            for (int i = childIndex; i < getNumChildren(); i++) {\n+                asSelf(getChild(i)).setChildIndex(i);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sets the index of this node from the perspective of its parent. This\n+     * means: this.getParent().getChild(index) == this.\n+     *\n+     * @param index the child index\n+     */\n+    protected void setChildIndex(final int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTM5Mg==", "bodyText": "I guess, we should demand that all language impls use this interface. Maybe that's just in the documentation then?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418965392", "createdAt": "2020-05-02T14:29:50Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/GenericNode.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl;\n+\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream;\n+import net.sourceforge.pmd.lang.ast.internal.StreamImpl;\n+\n+/**\n+ * Interface that binds the return type of some node methods to a type\n+ * parameter. This enforces that eg all children of such a node are from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTg0MQ==", "bodyText": "Maybe we can name the \"id\" something like \"productionId\" or \"jjtNodeNameIndex\", to avoid the misinterpretation of \"unique id\"...", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418965841", "createdAt": "2020-05-02T14:34:22Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/javacc/AbstractJjtreeNode.java", "diffHunk": "@@ -20,57 +17,115 @@\n  * unforeseeable ways. Don't use it directly, use the node interfaces.\n  */\n @Experimental\n-public abstract class AbstractJjtreeNode<N extends Node> extends AbstractNode implements TextAvailableNode {\n+public abstract class AbstractJjtreeNode<B extends AbstractJjtreeNode<B, N>, N extends JjtreeNode<N>> extends AbstractNode<B, N> implements JjtreeNode<N> {\n \n+    protected final int id;\n+    private JavaccToken firstToken;\n+    private JavaccToken lastToken;\n \n-    public AbstractJjtreeNode(int id) {\n-        super(id);\n+    private String image;\n+\n+    /**\n+     * The id is an index in the constant names array generated by jjtree,\n+     * it must be set to some value that depends on the node type, not some\n+     * arbitrary \"1\" or \"2\", and not necessarily a unique value.\n+     */\n+    protected AbstractJjtreeNode(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NjYxOA==", "bodyText": "In theory, AbstractNode should be irrelevant in this context - AbstractNode should only help to implement the Node API, but should not add to the API... (so no additional methods).\nMaybe we don't need the NoAttrScope at all? If a intermediate (abstract) class adds a public method, it is public API... so why not expose it as XPath attribute?", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418966618", "createdAt": "2020-05-02T14:42:13Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/xpath/NoAttribute.java", "diffHunk": "@@ -9,8 +9,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import net.sourceforge.pmd.lang.ast.AbstractNode;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.impl.AbstractNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2Nzc2OQ==", "bodyText": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test....", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418967769", "createdAt": "2020-05-02T14:53:50Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/DummyJavaNode.java", "diffHunk": "@@ -20,6 +20,11 @@ public DummyJavaNode(int id) {\n         super(id);\n     }\n \n+    @Override\n+    public void setImage(String image) {\n+        super.setImage(image);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2OTI2OA==", "bodyText": "hm...yes, these methods are not ideal, too generic like \"getImage\". but this time on plsql...", "url": "https://github.com/pmd/pmd/pull/2447#discussion_r418969268", "createdAt": "2020-05-02T15:07:49Z", "author": {"login": "adangel"}, "path": "pmd-plsql/src/main/java/net/sourceforge/pmd/lang/plsql/ast/PLSQLNode.java", "diffHunk": "@@ -4,27 +4,43 @@\n \n package net.sourceforge.pmd.lang.plsql.ast;\n \n-import net.sourceforge.pmd.lang.ast.Node;\n-import net.sourceforge.pmd.lang.ast.NodeStream;\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode;\n import net.sourceforge.pmd.lang.symboltable.Scope;\n import net.sourceforge.pmd.lang.symboltable.ScopedNode;\n \n-public interface PLSQLNode extends Node, ScopedNode {\n+public interface PLSQLNode extends ScopedNode, JjtreeNode<PLSQLNode> {\n \n     /** Accept the visitor. **/\n     Object jjtAccept(PLSQLParserVisitor visitor, Object data);\n \n     @Override\n     Scope getScope();\n \n-    void setScope(Scope scope);\n-\n-    @Override\n-    PLSQLNode getChild(int index);\n-\n-    @Override\n-    PLSQLNode getParent();\n-\n-    @Override\n-    NodeStream<? extends PLSQLNode> children();\n+    /**\n+     * Return node image converted to the normal Oracle form.\n+     *\n+     * <p>\n+     * Normally this is uppercase, unless the names is quoted (\"name\").\n+     * </p>\n+     */\n+    default String getCanonicalImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef060e9d7ab0f1ff772c828f2618e9bca34664"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4769, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}