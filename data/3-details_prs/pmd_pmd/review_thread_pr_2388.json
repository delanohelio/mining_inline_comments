{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTIzNTUw", "number": 2388, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMjo1Nzo0NFrODw8h5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMjo1Nzo0NFrODw8h5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQ5OTU2OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/treeexport/TextTreeRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMjo1Nzo0NFrOGENCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTozODo1MFrOGEPkdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2MTA2NQ==", "bodyText": "I think, now that this class is in pmd-core, we can remove it from pmd-designer, don't we?", "url": "https://github.com/pmd/pmd/pull/2388#discussion_r407061065", "createdAt": "2020-04-11T12:57:44Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/treeexport/TextTreeRenderer.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.util.treeexport;\n+\n+import java.io.IOException;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.properties.AbstractPropertySource;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+import net.sourceforge.pmd.properties.PropertySource;\n+\n+/**\n+ * A simple recursive printer. Output looks like so:\n+ *\n+ * <pre>\n+ *\n+ * +- LocalVariableDeclaration\n+ *    +- Type\n+ *    |  +- PrimitiveType\n+ *    +- VariableDeclarator\n+ *       +- VariableDeclaratorId\n+ *       +- VariableInitializer\n+ *          +- 1 child not shown\n+ *\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *\n+ * \u2514\u2500 LocalVariableDeclaration\n+ *    \u251c\u2500 Type\n+ *    \u2502  \u2514\u2500 PrimitiveType\n+ *    \u2514\u2500 VariableDeclarator\n+ *       \u251c\u2500 VariableDeclaratorId\n+ *       \u2514\u2500 VariableInitializer\n+ *          \u2514\u2500 1 child not shown\n+ *\n+ * </pre>\n+ *\n+ *\n+ * By default just prints the structure, like shown above. You can\n+ * configure it to render nodes differently by overriding {@link #appendNodeInfoLn(Appendable, Node)}.\n+ */\n+@Experimental\n+public class TextTreeRenderer implements TreeRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbfdfdd9904b688511585614a18f8b319ff9365"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMjU4MA==", "bodyText": "Yes, but we can only do this for the designer release that will depend on this pmd-core. Maybe we should already start a development branch of the designer that depends on the snapshot version, which will also be useful with #2363", "url": "https://github.com/pmd/pmd/pull/2388#discussion_r407102580", "createdAt": "2020-04-11T19:38:50Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/treeexport/TextTreeRenderer.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.util.treeexport;\n+\n+import java.io.IOException;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.properties.AbstractPropertySource;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+import net.sourceforge.pmd.properties.PropertySource;\n+\n+/**\n+ * A simple recursive printer. Output looks like so:\n+ *\n+ * <pre>\n+ *\n+ * +- LocalVariableDeclaration\n+ *    +- Type\n+ *    |  +- PrimitiveType\n+ *    +- VariableDeclarator\n+ *       +- VariableDeclaratorId\n+ *       +- VariableInitializer\n+ *          +- 1 child not shown\n+ *\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *\n+ * \u2514\u2500 LocalVariableDeclaration\n+ *    \u251c\u2500 Type\n+ *    \u2502  \u2514\u2500 PrimitiveType\n+ *    \u2514\u2500 VariableDeclarator\n+ *       \u251c\u2500 VariableDeclaratorId\n+ *       \u2514\u2500 VariableInitializer\n+ *          \u2514\u2500 1 child not shown\n+ *\n+ * </pre>\n+ *\n+ *\n+ * By default just prints the structure, like shown above. You can\n+ * configure it to render nodes differently by overriding {@link #appendNodeInfoLn(Appendable, Node)}.\n+ */\n+@Experimental\n+public class TextTreeRenderer implements TreeRenderer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2MTA2NQ=="}, "originalCommit": {"oid": "5cbfdfdd9904b688511585614a18f8b319ff9365"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 357, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}