{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzAzNzM1", "number": 2211, "title": "[core] Merge JavaCC build scripts", "bodyText": "It would be good for all JavaCC languages to share most of their implementation, so that changes like #2166, #1446 or #2195 are propagated to all modules. To be able to change things across all languages with minimal trouble, merging their Ant build files is essential.\nThis PR creates a new ant build file and makes pmd-java & pmd-modelica use it as a PoC. Other modules will be ported one by one.\nChanges that using the new build does to a module:\n\nUse the ParseException of pmd-core instead of duplicating a class. Error messages of that one are slightly better.\nNo JJT${langname}ParserState is generated. The one in pmd-core, named JjtreeBuilder, is used instead. This is an improved version that features the changes needed by java-grammar to support annotations, and the changes of #2195 about implicit tokens.\nThe constant interface for token ids is turned into a final utility class. Eg JavaParserConstants become JavaTokenKinds. Lexical state IDs are not made public.\nThe constant interface for node ids is made package-private. Ids have a single purpose (implementing getXpathNodeName) and this is better-off hidden.\nUse JavaccToken instead of generating a new Token class\nTokens are created by a TokenDocument. This is useful to avoid writing too much logic inline in lexical actions. Eg JavaTokenFactory is now JavaTokenDocument. Later a token document could support edition methods, to implement autofixes\nThe generated visitor interface has default methods (#1444).\nThe build file deletes the node files that were found in the main source tree. This avoids hardcoding their names as is currently done in pmd-modelica or pmd-plsql\n\nConventions that the build file relies on:\n\nThe grammar file name is the same as the language name. Eg Java.jjt, but PldocAST.jjt will be renamed PLSQL.jjt\nThe generated parser is named ${lang-name}ParserImpl. This is something that has bugged me for a while: many modules have several public parser classes with the same name, eg JavaParser or PLSQLParser. Finding the file in an IDE is a pain and we must use FQCNs. I think the only published API should be the implementation of our Parser interface. So JavaLanguageParser is renamed JavaParser, moved into the ast package, and the generated parser is named JavaParserImpl and is package-private.\n\nNodes don't use the constructors taking the parser anymore so I removed them. Since parsers change names, it would have made a big diff to update the constructors for no benefit. The parser was previously only used to fetch the current token in jjtClose. This is a \"bug\" of JJTree: it sets the last token after jjtClose. The new JjtreeBuilder sets it correctly before, so in jjtClose the node has all the information available.\nAll of this is only possible if we somewhat stop relying on the JavaCC generated helper classes (eg char streams), and so some are moved to the main source tree of pmd-core. We share the implementation, and can modify them and document them independently of JavaCC.\nThis will be a series of PRs so I'll open an issue to track them. We should also take care of describing these conventions on the wiki & website", "createdAt": "2020-01-11T07:15:15Z", "url": "https://github.com/pmd/pmd/pull/2211", "merged": true, "mergeCommit": {"oid": "d726990e09b573e6cfe6bf60f41e6956325a6129"}, "closed": true, "closedAt": "2020-01-28T12:52:38Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5F2m3gH2gAyMzYxNzAzNzM1OmVmYzNiZWNjMDEyY2U3Y2Q4OGI3M2FmYmE1Yzc4NGYyZTdmNGIxMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb91ZOlABqjI5NzkzNjk2OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efc3becc012ce7cd88b73afba5c784f2e7f4b138", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/efc3becc012ce7cd88b73afba5c784f2e7f4b138", "committedDate": "2020-01-10T21:57:47Z", "message": "Checkout wrapper script, pmd-core, pmd-modelica"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f715e6af729a90488eda3089e80ae557ed3b3837", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f715e6af729a90488eda3089e80ae557ed3b3837", "committedDate": "2020-01-10T22:27:07Z", "message": "Use maven properties from within the build.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7e9eb75d8bc261672012e4d35196bddbae1750", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ad7e9eb75d8bc261672012e4d35196bddbae1750", "committedDate": "2020-01-10T23:23:43Z", "message": "Make token document store first token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a128a3bea1484c0fd9e3a211859fc713ff4fe55", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8a128a3bea1484c0fd9e3a211859fc713ff4fe55", "committedDate": "2020-01-11T00:21:09Z", "message": "Replace token tracking function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d280d0fb09003bead119da04fc8dde3643e837a", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/2d280d0fb09003bead119da04fc8dde3643e837a", "committedDate": "2020-01-11T03:47:40Z", "message": "Make constants file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6f03553a98689813ba17f0bf682f3f60ea081d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/0d6f03553a98689813ba17f0bf682f3f60ea081d", "committedDate": "2020-01-11T07:13:31Z", "message": "Port java module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b67a75ea90bc771724c255dfe31ff1aa276be7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/a0b67a75ea90bc771724c255dfe31ff1aa276be7", "committedDate": "2020-01-11T08:08:53Z", "message": "Fix char stream line+col"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47fcfb6f3c5bbc95a069f66a0e9e03bc01410d89", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/47fcfb6f3c5bbc95a069f66a0e9e03bc01410d89", "committedDate": "2020-01-13T00:05:54Z", "message": "Make end column exclusive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e86c20c5c90ca1118148dd4e2d1fbdf28eb94f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/83e86c20c5c90ca1118148dd4e2d1fbdf28eb94f", "committedDate": "2020-01-13T00:15:04Z", "message": "Test modelica text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4552c04a74759e4ebdcff5d9e410559ba788a652", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/4552c04a74759e4ebdcff5d9e410559ba788a652", "committedDate": "2020-01-13T00:49:33Z", "message": "Simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2740361c3f501eb68309890255bb73172615550", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c2740361c3f501eb68309890255bb73172615550", "committedDate": "2020-01-13T22:04:51Z", "message": "Fix end column being exclusive in pmd-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc9740279b330e2a735b0709640d447cce6f6d2", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/0cc9740279b330e2a735b0709640d447cce6f6d2", "committedDate": "2020-01-14T23:07:06Z", "message": "Fix windows build\n\nLine separators in regex are replaced\nwith platform independent \\R. Good thing\nwe have that automatic windows build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7bf177616c56fde6c2eb9524e775a6740fdba87", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c7bf177616c56fde6c2eb9524e775a6740fdba87", "committedDate": "2020-01-15T03:53:31Z", "message": "Remove special casing of end offset\n\nFixed by 47fcfb6f3c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b09b58513b36dba080beba473c5b5d875b17e1d1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b09b58513b36dba080beba473c5b5d875b17e1d1", "committedDate": "2020-01-17T15:22:46Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8adc292d6d03c1329768d534c3fb648b63cb0cc7", "committedDate": "2020-01-17T15:45:29Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2b37ff03405cd4884031c53bedce580c4e1da4a", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/c2b37ff03405cd4884031c53bedce580c4e1da4a", "committedDate": "2020-01-17T19:01:54Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ0NTE2", "url": "https://github.com/pmd/pmd/pull/2211#pullrequestreview-344744516", "createdAt": "2020-01-17T17:55:30Z", "commit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo1NTozMVrOFfAtCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo1MzowMVrOFfCHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MTcwNQ==", "bodyText": "Why are getBeginColumn() and getBeginLine() deprecated?", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368061705", "createdAt": "2020-01-17T17:55:31Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/CharStream.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast;\n+\n+\n+import java.io.IOException;\n+\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JavaccTokenDocument;\n+\n+/**\n+ * PMD flavour of character streams used by JavaCC parsers.\n+ *\n+ * TODO for when all JavaCC languages are aligned:\n+ *   * rename methods to match decent naming conventions\n+ *   * move to impl.javacc package\n+ */\n+public interface CharStream {\n+\n+    /**\n+     * Returns the next character from the input. After a {@link #backup(int)},\n+     * some of the already read chars must be spit out again.\n+     *\n+     * @return The next character\n+     *\n+     * @throws IOException  If the underlying char stream throws\n+     */\n+    char readChar() throws IOException;\n+\n+\n+    /**\n+     * Calls {@link #readChar()} and returns its value, marking its position\n+     * as the beginning of the next token. All characters must remain in\n+     * the buffer between two successive calls to this method to implement\n+     * backup correctly.\n+     */\n+    char BeginToken() throws IOException; // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Returns a string made up of characters from the token mark up to\n+     * to the current buffer position.\n+     */\n+    String GetImage(); // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Returns an array of characters that make up the suffix of length 'len' for\n+     * the current token. This is used to build up the matched string\n+     * for use in actions in the case of MORE. A simple and inefficient\n+     * implementation of this is as follows :\n+     *\n+     * <pre>{@code\n+     * String t = tokenImage();\n+     * return t.substring(t.length() - len, t.length()).toCharArray();\n+     * }</pre>\n+     *\n+     * @param len Length of the returned array\n+     *\n+     * @return The suffix\n+     *\n+     * @throws IndexOutOfBoundsException If len is greater than the length of the\n+     *                                   current token\n+     */\n+    char[] GetSuffix(int len); // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Pushes a given number of already read chars into the buffer.\n+     * Subsequent calls to {@link #readChar()} will read those characters\n+     * before proceeding to read the underlying char stream.\n+     *\n+     * <p>A lexer calls this method if it has already read some characters,\n+     * but cannot use them to match a (longer) token. So, they will\n+     * be used again as the prefix of the next token.\n+     *\n+     * @throws AssertionError If the requested amount is greater than the\n+     *                        number of read chars\n+     */\n+    void backup(int amount);\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw==", "bodyText": "the current lexical state is right now not provided for makeMessage. However, it would be a int here, so not too helpful...", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368066123", "createdAt": "2020-01-17T18:06:41Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/TokenMgrError.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.annotation.InternalApi;\n+import net.sourceforge.pmd.util.StringUtil;\n+\n+/**\n+ * An error thrown during lexical analysis of a file.\n+ */\n+public final class TokenMgrError extends RuntimeException {\n+\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported\n+     */\n+    @Deprecated\n+    public static final int LEXICAL_ERROR = 0;\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported,\n+     *     see {@link #TokenMgrError(String, int)}\n+     */\n+    @Deprecated\n+    public static final int INVALID_LEXICAL_STATE = 1;\n+\n+    private final int line;\n+    private final int column;\n+    private final String filename;\n+\n+    public TokenMgrError(int line, int column, @Nullable String filename, String message, @Nullable Throwable cause) {\n+        super(message, cause);\n+        this.line = line;\n+        this.column = column;\n+        this.filename = filename;\n+    }\n+\n+    public TokenMgrError(int line, int column, String message, @Nullable Throwable cause) {\n+        this(line, column, null, message, cause);\n+    }\n+\n+    /**\n+     * @deprecated This is used by javacc but those usages are being replaced with an IllegalArgumentException\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(String message, int errorCode) {\n+        this(-1, -1, null, message, null);\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     */\n+    @InternalApi\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     *\n+     * @deprecated The error code is useless, ported modules use the other constructor\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int errorCode) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    public int getLine() {\n+        return line;\n+    }\n+\n+    public int getColumn() {\n+        return column;\n+    }\n+\n+    public @Nullable String getFilename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Returns a detailed message for the Error when it is thrown by the\n+     * token manager to indicate a lexical error.\n+     * Parameters :\n+     * eofseen     : indicates if EOF caused the lexical error\n+     * curLexState : lexical state in which this error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2OTAzMA==", "bodyText": "Do we need to internalize pmd-core:net.sourceforge.pmd.lang.ast.JavaCharStream on master?\nAnd btw, duplicated license header", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368069030", "createdAt": "2020-01-17T18:13:55Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/javacc/JavaCharStream.java", "diffHunk": "@@ -2,48 +2,41 @@\n  * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n  */\n \n-package net.sourceforge.pmd.lang.ast;\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl.javacc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NDczNQ==", "bodyText": "Maybe we could provide a constructor, that also takes the array of token kind names:\nJavaccTokenDocument document = new JavaccTokenDocument(source, CppParserConstants.tokenImage);", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368074735", "createdAt": "2020-01-17T18:28:14Z", "author": {"login": "adangel"}, "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/lang/cpp/CppCharStream.java", "diffHunk": "@@ -59,4 +65,17 @@ public String GetImage() {\n         String image = super.GetImage();\n         return CONTINUATION.matcher(image).replaceAll(\"\");\n     }\n+\n+    public static CppCharStream newCppCharStream(Reader dstream) {\n+        String source = CharStreamFactory.toString(dstream);\n+        JavaccTokenDocument document = new JavaccTokenDocument(source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTY3OQ==", "bodyText": "We probably should internalize our *CharStream impls on master, they should anyway not be used directly", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368075679", "createdAt": "2020-01-17T18:30:31Z", "author": {"login": "adangel"}, "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/lang/cpp/CppCharStream.java", "diffHunk": "@@ -23,10 +28,11 @@\n     private static final char NEWLINE = '\\n';\n     private static final char CARRIAGE_RETURN = '\\r';\n \n-    public CppCharStream(Reader dstream) {\n-        super(dstream);\n+    public CppCharStream(JavaccTokenDocument document) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjU0Mg==", "bodyText": "Just for me, to understand this: we don't need a real id here, because the created nodes end up only in the symbol table, but not in the AST. We would need the id, if we query the AST via XPath, to resolve the node names. Is this correct?", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368082542", "createdAt": "2020-01-17T18:47:40Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/ClassScope.java", "diffHunk": "@@ -295,15 +294,15 @@ private void matchMethodDeclaration(JavaNameOccurrence occurrence,\n      */\n     private MethodNameDeclaration createBuiltInMethodDeclaration(final String methodName,\n             final String... parameterTypes) {\n-        ASTMethodDeclaration methodDeclaration = new ASTMethodDeclaration(JavaParserTreeConstants.JJTMETHODDECLARATION);\n+        ASTMethodDeclaration methodDeclaration = new ASTMethodDeclaration(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MzQ1Mw==", "bodyText": "I found, that the names are generated in the token manager, e.g. JavaParserTokenManager#lexStateNames", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368083453", "createdAt": "2020-01-17T18:49:52Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/TokenMgrError.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.annotation.InternalApi;\n+import net.sourceforge.pmd.util.StringUtil;\n+\n+/**\n+ * An error thrown during lexical analysis of a file.\n+ */\n+public final class TokenMgrError extends RuntimeException {\n+\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported\n+     */\n+    @Deprecated\n+    public static final int LEXICAL_ERROR = 0;\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported,\n+     *     see {@link #TokenMgrError(String, int)}\n+     */\n+    @Deprecated\n+    public static final int INVALID_LEXICAL_STATE = 1;\n+\n+    private final int line;\n+    private final int column;\n+    private final String filename;\n+\n+    public TokenMgrError(int line, int column, @Nullable String filename, String message, @Nullable Throwable cause) {\n+        super(message, cause);\n+        this.line = line;\n+        this.column = column;\n+        this.filename = filename;\n+    }\n+\n+    public TokenMgrError(int line, int column, String message, @Nullable Throwable cause) {\n+        this(line, column, null, message, cause);\n+    }\n+\n+    /**\n+     * @deprecated This is used by javacc but those usages are being replaced with an IllegalArgumentException\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(String message, int errorCode) {\n+        this(-1, -1, null, message, null);\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     */\n+    @InternalApi\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     *\n+     * @deprecated The error code is useless, ported modules use the other constructor\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int errorCode) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    public int getLine() {\n+        return line;\n+    }\n+\n+    public int getColumn() {\n+        return column;\n+    }\n+\n+    public @Nullable String getFilename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Returns a detailed message for the Error when it is thrown by the\n+     * token manager to indicate a lexical error.\n+     * Parameters :\n+     * eofseen     : indicates if EOF caused the lexical error\n+     * curLexState : lexical state in which this error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw=="}, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4NDgxOQ==", "bodyText": "Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368084819", "createdAt": "2020-01-17T18:53:01Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/java/net/sourceforge/pmd/cpd/JavaTokensTokenizerTest.java", "diffHunk": "@@ -12,7 +12,7 @@\n import org.junit.Test;\n \n import net.sourceforge.pmd.PMD;\n-import net.sourceforge.pmd.lang.java.ast.JavaParserConstants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb65621fd19dfdcca31453ed0015542270b1667", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ebb65621fd19dfdcca31453ed0015542270b1667", "committedDate": "2020-01-17T23:53:28Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035217ab25fe9b1a87a057c7cbaac93c447817f1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/035217ab25fe9b1a87a057c7cbaac93c447817f1", "committedDate": "2020-01-18T19:43:06Z", "message": "Merge branch 'master-ant-script' of github.com:oowekyala/pmd into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404162afb6d9fcd67a09e8660675fa3bbff7990a", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/404162afb6d9fcd67a09e8660675fa3bbff7990a", "committedDate": "2020-01-18T19:46:13Z", "message": "Remove duplicated license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7d770121b582af5bf0f694972f9d9c8b2beca2", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/2a7d770121b582af5bf0f694972f9d9c8b2beca2", "committedDate": "2020-01-18T21:25:07Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44535a2fc242dd903c6d859f20053e0074e168d7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/44535a2fc242dd903c6d859f20053e0074e168d7", "committedDate": "2020-01-18T23:09:58Z", "message": "Fix wrong cast\n\nTODO revert when all languages are ported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9864977580b0d6bd41556c02495b87eaf3c77ba", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f9864977580b0d6bd41556c02495b87eaf3c77ba", "committedDate": "2020-01-18T23:19:55Z", "message": "Fix pmd-vm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96500f90fcbf6a9eb21b8621d046cc143f1ea603", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/96500f90fcbf6a9eb21b8621d046cc143f1ea603", "committedDate": "2020-01-19T03:55:35Z", "message": "Autofix tokens of JJTree definite nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23cb9f41fbe2d4b5904df04aff926cf0374620aa", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/23cb9f41fbe2d4b5904df04aff926cf0374620aa", "committedDate": "2020-01-19T04:54:16Z", "message": "Fix PLSQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3246d6fc3f89a328a70eebbfd25041f8a7f822c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f3246d6fc3f89a328a70eebbfd25041f8a7f822c", "committedDate": "2020-01-19T05:09:56Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925944289dcfce529f71da4e0a31c1b40d71f1c1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/925944289dcfce529f71da4e0a31c1b40d71f1c1", "committedDate": "2020-01-24T19:15:16Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35da3500072b8951311f1e69731c60a881af5785", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/35da3500072b8951311f1e69731c60a881af5785", "committedDate": "2020-01-24T22:48:35Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c076bd657cfa2a9a0fe035ed8e6a2cf644af232", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8c076bd657cfa2a9a0fe035ed8e6a2cf644af232", "committedDate": "2020-01-24T23:15:37Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152801bb391f6a2ab743f7dfc135c7bfa5439f26", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/152801bb391f6a2ab743f7dfc135c7bfa5439f26", "committedDate": "2020-01-25T13:28:37Z", "message": "Merge branch '7.0.x' into master-ant-script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d726990e09b573e6cfe6bf60f41e6956325a6129", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d726990e09b573e6cfe6bf60f41e6956325a6129", "committedDate": "2020-01-25T15:36:42Z", "message": "Make base parser adapter for jjtree"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86d5dc3669527b377c414c60ba3d2aad4dc5ccb7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/86d5dc3669527b377c414c60ba3d2aad4dc5ccb7", "committedDate": "2020-01-25T15:36:02Z", "message": "Make base parser adapter for jjtree"}, "afterCommit": {"oid": "d726990e09b573e6cfe6bf60f41e6956325a6129", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d726990e09b573e6cfe6bf60f41e6956325a6129", "committedDate": "2020-01-25T15:36:42Z", "message": "Make base parser adapter for jjtree"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4842, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}