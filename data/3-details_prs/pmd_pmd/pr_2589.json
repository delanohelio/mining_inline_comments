{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTIwOTA4", "number": 2589, "title": "[core] Add generic visitor interface in pmd-core", "bodyText": "Part of #880\nDescribe the PR\nRefine #1446 to be more useful\nIn the java module: remove SideEffectingVisitor, and adds a JavaVisitor interface with the following signature:\npublic interface JavaVisitor<P, R> extends ... {\n  R visit(JavaNode node, P param);\n}\nThis visitor subsumes the existing JavaParserVisitor, which now extends JavaVisitor<Object, Object>, and also SideEffectingVisitor<T>, which can be written JavaVisitor<T, Void> now.\nDoing this means we can use a single jjtAccept implementation per node, and it accepts both the new generic form, and the old JavaParserVisitor (which stays for compatibility).\nThis PR also deprecates JavaParserVisitor and JavaParserVisitorAdapter, because they're redundant and unsafe (mostly, it's unclear whether null, or the data parameter should be returned).\nThe same changes were done to the JSP module to check that the javacc wrapper is up to date & language-independent\nIn pmd-core, this adds\n\nan interface AstVisitor<P, R>, to be a supertype of language-specific visitor interfaces.\na method <P, R> R acceptVisitor(AstVisitor,P) to the Node interface, which is the \"language-independent jjtAccept\". jjtAccept methods are deprecated on language-specific interfaces, so that only that single method is depended on.\nan annotation @DeprecatedUntil700 to further distinguish among deprecated APIs on the 7.0.x branch\n\nRelated issues\n\n\n#1446\n#880\n\nReady?\nOther languages need to have their visitor generified in order to implement AstVisitor, which I guess we can do in one PR per module, later\n\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-06-14T09:52:24Z", "url": "https://github.com/pmd/pmd/pull/2589", "merged": true, "mergeCommit": {"oid": "a9996ab45c82c0afe8b2070958ca33ba9a011bbf"}, "closed": true, "closedAt": "2020-07-19T16:25:57Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrI2UmAH2gAyNDM0MTIwOTA4OmI4OGRkZjQxYzAzY2EwMDlkZWE4NzliZGFhZmQ2ZGRjYjYwODVmY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwmrb6gH2gAyNDM0MTIwOTA4OmE3ZDZlNTJjNTQwNzEwYzMwNjc0ZGU2NjhmMjZkOTU0MmM1OWIwNjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b88ddf41c03ca009dea879bdaafd6ddcb6085fcc", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b88ddf41c03ca009dea879bdaafd6ddcb6085fcc", "committedDate": "2020-06-14T09:43:24Z", "message": "Add generic visitor interface in pmd-core\n\nReplace SideEffectingVisitor with JavaVisitor\n\nThe new visitor is generic. We don't actually need the\nold Object->Object visitor, this could just be the new\ngeneric visitor but erased\n\nPort language level checker\n\nMove delegators\n\nRemove old accept methods\n\nRemove reduced adapter\n\nCleanup some visitor\n\nMake ant wrapper replace old visitor completely\n\nDoc\n\nAdd DeprecatedUntil700 annotation\n\nAdd top interface for visitors\n\nConvert JSP visitors\n\nCheckstyle\n\nFix java module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b1c375c1b354a6bee46022229963410aff24bd", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f7b1c375c1b354a6bee46022229963410aff24bd", "committedDate": "2020-06-14T11:02:30Z", "message": "Fix scala compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1afed8c55d92b3e11b754030b8a2d2a79bc8fd", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ee1afed8c55d92b3e11b754030b8a2d2a79bc8fd", "committedDate": "2020-06-15T15:10:28Z", "message": "Fix scala stackoverflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432711260966276e438195e29bfef639897827ad", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/432711260966276e438195e29bfef639897827ad", "committedDate": "2020-06-15T15:14:00Z", "message": "Merge branch '7.0.x' into generic-visitor2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b34feb22f2843ee83736881424f5e95c247c25", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/88b34feb22f2843ee83736881424f5e95c247c25", "committedDate": "2020-06-17T19:21:00Z", "message": "Use wildcards for acceptVisitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "847c4de68b4ce56cefee212a93066cd204ef6897", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/847c4de68b4ce56cefee212a93066cd204ef6897", "committedDate": "2020-06-25T12:30:46Z", "message": "Merge branch '7.0.x' into generic-visitor2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6457ab9fc6e564c534aa556d7755a31c04593eb", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c6457ab9fc6e564c534aa556d7755a31c04593eb", "committedDate": "2020-06-26T21:10:19Z", "message": "Merge branch '7.0.x' into generic-visitor2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623adce024b16d2426b6b52cb15ae5c95969ea54", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/623adce024b16d2426b6b52cb15ae5c95969ea54", "committedDate": "2020-06-27T11:24:09Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/4bb98df37b947f301ad3b7baaf375e3e2cd87ac8", "committedDate": "2020-06-27T12:22:42Z", "message": "Fix compil"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjQ4Nzkz", "url": "https://github.com/pmd/pmd/pull/2589#pullrequestreview-440248793", "createdAt": "2020-06-30T17:44:47Z", "commit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo0N1rOGrHuIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTo1NFrOGrI_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODQ1MA==", "bodyText": "do we need this property anymore? generic-sideeffect-visitor-interface-file", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447868450", "createdAt": "2020-06-30T17:44:47Z", "author": {"login": "adangel"}, "path": "javacc-wrapper.xml", "diffHunk": "@@ -60,9 +60,9 @@\n     <property name=\"base-visitor-interface-name\" value=\"${lang-name}ParserVisitor\" />\n     <property name=\"base-visitor-interface-file\" value=\"${target-package-dir}/${base-visitor-interface-name}.java\" />\n \n-    <property name=\"generic-sideeffect-visitor-interface-name\" value=\"SideEffectingVisitor\" />\n+    <property name=\"generic-visitor-interface-name\" value=\"${lang-name}Visitor\" />\n     <property name=\"generic-sideeffect-visitor-interface-file\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MDYyMg==", "bodyText": "Is jjtAccept here correct or should it be the new acceptVisitor?", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447870622", "createdAt": "2020-06-30T17:48:39Z", "author": {"login": "adangel"}, "path": "javacc-wrapper.xml", "diffHunk": "@@ -488,17 +488,16 @@ public interface\" />\n \n     </target>\n \n-    <target name=\"side-effecting-visitor\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n-        <!-- Side effecting visitor, no return type, one generic parameter -->\n-        <copy file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n+    <target name=\"generic-visitor-replacement\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n+        <move file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n         <replace file=\"${generic-sideeffect-visitor-interface-file}\">\n             <replacefilter token=\"${base-visitor-interface-name}\"\n-                           value=\"${generic-sideeffect-visitor-interface-name}&lt;T>\" />\n+                           value=\"${generic-visitor-interface-name}&lt;P, R> extends ${ast-api-package}.AstVisitor&lt;P, R>\" />\n \n-            <replacefilter token=\"Object\" value=\"T\" />\n-            <replacefilter token=\"T visit\" value=\"void visit\" />\n-            <replacefilter token=\"return data;\" value=\"\" />\n-            <replacefilter token=\"return \" value=\"\" />\n+            <replacefilter token=\"Object\" value=\"P\" />\n+            <replacefilter token=\"P visit\" value=\"R visit\" />\n+\n+            <replacefilter token=\"default R visit(${node-name} node, P data) { for (int i = 0, len = node.getNumChildren(); i &lt; len; i++) node.getChild(i).jjtAccept(this, data); return data; }\" value=\"default R visit(${node-name} node, P data) { return visitNode(node, data); }\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MTY0Mw==", "bodyText": "I'm not sure, I'm following you - the point of a major release is, that we can break compatibility, isn't it?\nIt would be nice, if we could backport the one or the other thing, but keeping deprecated stuff around in pmd7 for noone, that we should avoid IMHO.\nLet me think: so, the plan is, that if someone uses now PMD 6.x, when we release PMD 7.0.0, they can just switch to the new version and can compile, but with deprecation warnings, and with PMD 7.1.0, we'll remove the deprecated stuff? I don't see this happen....\nI could imagine, that we - after releasing 7.0.0 and getting feedback about compatibility problems - create a 7.0.1 and maybe also another 6.x release for easier migration (preparations/backports where possible).\nAlternatively, we could also document, what needs to be done, in the migration guide. I've seen now the place, where you used the new annotation. So we could use the new annotation as a marker/reminder for us, that this needs to be part of the migration guide.\nOne other possibility: If this works with the default impl in interfaces, then we could decide to release (after 7.0.0) a last PMD 6.x.x-for-7 version which updated requirements (e.g. minimum java8, allows us to backport some stuff). However, this doesn't avoid the fact, that - if users want to migrate to PMD 7, they need to touch their code...", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447871643", "createdAt": "2020-06-30T17:50:25Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.annotation;\n+\n+/**\n+ * Tags a deprecated member that should not be removed before PMD 7.0.0.\n+ * Such members were made deprecated on the PMD 7 development branch and\n+ * may be kept for backwards compatibility on the day of the PMD 7 release,\n+ * because the replacement API cannot be backported to PMD 6.\n+ */\n+public @interface DeprecatedUntil700 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NjYyOQ==", "bodyText": "Does this dispatch work as a default implementation? If not, we shouldn't provide a default impl, but just document, how the implementation in the specific node classes must look like", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447876629", "createdAt": "2020-06-30T17:58:36Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -289,6 +283,27 @@ default boolean hasDescendantMatchingXPath(String xpathString) {\n      */\n     int getIndexInParent();\n \n+\n+    /**\n+     * Calls back the visitor's visit method corresponding to the runtime\n+     * type of this Node. This should usually be preferred to calling\n+     * a {@code visit} method directly (usually the only calls to those\n+     * are in the implementations of this {@code acceptVisitor} method).\n+     *\n+     * @param <R>     Return type of the visitor\n+     * @param <P>     Parameter type of the visitor\n+     * @param visitor Visitor to dispatch\n+     * @param data    Parameter to the visit\n+     *\n+     * @return What the visitor returned\n+     */\n+    // TODO remove the default implementation, convert all visitors to be generic\n+    default <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        // override me\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4Mjk4Mw==", "bodyText": "Should we allow this or rather prevent this? trying to visit an AST with an incompatible visitor... I would argue to restrict the feature set at the beginning rather than allowing too much....", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447882983", "createdAt": "2020-06-30T18:09:36Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AbstractJavaNode.java", "diffHunk": "@@ -32,6 +33,18 @@ public Scope getScope() {\n         return scope;\n     }\n \n+    @Override\n+    public final <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        if (visitor instanceof JavaVisitor) {\n+            return this.acceptVisitor((JavaVisitor<? super P, ? extends R>) visitor, data);\n+        }\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTE4MQ==", "bodyText": "Is that IDEA specific?", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447889181", "createdAt": "2020-06-30T18:19:54Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.lang.ast.AstVisitorBase;\n+\n+/**\n+ * Base implementation of {@link JavaVisitor}. This adds delegation logic\n+ * which the interface doesn't have.\n+ *\n+ * <p>Contrary to the old visitor, which used Object as both parameter and\n+ * return type, this visitor uses separate type parameters for those. This\n+ * means you can't just return the parameter, unless your visitor has equal\n+ * parameter and return type. This type signature subsumes many possible\n+ * signatures. The old one is {@code <Object, Object>}, still implemented\n+ * by {@link JavaParserVisitor} for backwards compatibility. If you don't\n+ * want to return a value, or don't want a parameter, use {@link Void}.\n+ *\n+ * <p>Since 7.0.0 we use default methods on the interface, which removes\n+ * code duplication. However it's still recommended to extend a base class,\n+ * for forward compatibility.\n+ */\n+public class JavaVisitorBase<P, R> extends AstVisitorBase<P, R> implements JavaVisitor<P, R> {\n+\n+    // todo on java-grammar: uncomment\n+\n+\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Methods/constructors\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94595fe185e4a8a36ec616cc5f0f40d4a69b9ee1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/94595fe185e4a8a36ec616cc5f0f40d4a69b9ee1", "committedDate": "2020-07-01T08:09:26Z", "message": "Merge branch '7.0.x' into generic-visitor2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ea6a92e538c44c2e8a6231fe5b1277d0217df5", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/27ea6a92e538c44c2e8a6231fe5b1277d0217df5", "committedDate": "2020-07-01T09:06:48Z", "message": "Rename ant property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feeb1f0a878f39253d0c02e0043e235c310ce1a9", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/feeb1f0a878f39253d0c02e0043e235c310ce1a9", "committedDate": "2020-07-01T09:09:12Z", "message": "Fix swift module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25beb215fcf4b7af81ea4508e4d932796f1ae4ce", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/25beb215fcf4b7af81ea4508e4d932796f1ae4ce", "committedDate": "2020-07-01T09:16:03Z", "message": "Throw on incompatible visitor type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7d6e52c540710c30674de668f26d9542c59b061", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/a7d6e52c540710c30674de668f26d9542c59b061", "committedDate": "2020-07-01T09:18:17Z", "message": "Fix javadoc warning"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4820, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}