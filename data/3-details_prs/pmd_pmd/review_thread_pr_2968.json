{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3NjEyNjk0", "number": 2968, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMTowNTo0OFrOFM-MoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMToxMDozNVrOFM-OXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQ2MjcyOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMTowNTo0OFrOIQ7fIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozOTowM1rOIXq3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg==", "bodyText": "Is it the only case when classOrEnumBody can be null? Unfortunately I don't know.", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622752", "createdAt": "2021-01-10T21:05:48Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODc4Mw==", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808783", "createdAt": "2021-01-12T14:24:42Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTUwMQ==", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).\nIt could also be an ASTRecordBody", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809501", "createdAt": "2021-01-12T14:25:41Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDU1NA==", "bodyText": "I'll add a test case when merging", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690554", "createdAt": "2021-01-21T08:39:03Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQ2NDA0OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMTowNjo0M1rOIQ7fsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozOToxM1rOIXq4Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ==", "bodyText": "What's the reason to go one level up in the hierarchy?", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622899", "createdAt": "2021-01-10T21:06:43Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODgxMQ==", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808811", "createdAt": "2021-01-12T14:24:45Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTcyOQ==", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809729", "createdAt": "2021-01-12T14:26:00Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDY1OA==", "bodyText": "I'll fix that when merging", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690658", "createdAt": "2021-01-21T08:39:13Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQ2NjgwOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/bestpractices/xml/UseCollectionIsEmpty.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMToxMDowOVrOIQ7hGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMToxMDowOVrOIQ7hGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMzI1Ng==", "bodyText": "Only one field is enough, IMO. Less code in xml is better :)", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554623256", "createdAt": "2021-01-10T21:10:09Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/bestpractices/xml/UseCollectionIsEmpty.xml", "diffHunk": "@@ -348,4 +346,63 @@ public class Foo {\n }\n         ]]></code>\n     </test-code>\n+\n+    \n+\t<test-code>\n+        <description>#2833 NPE in UseCollectionIsEmptyRule with enums</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+public enum ComponentSize {\n+\n+    S(\"s\"),\n+    M(\"m\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQ2NzE5OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/bestpractices/xml/UseCollectionIsEmpty.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMToxMDozNVrOIQ7hQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMToxMDozNVrOIQ7hQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMzI5OQ==", "bodyText": "I suggest removing several fields here too.", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554623299", "createdAt": "2021-01-10T21:10:35Z", "author": {"login": "KroArtem"}, "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/bestpractices/xml/UseCollectionIsEmpty.xml", "diffHunk": "@@ -348,4 +346,63 @@ public class Foo {\n }\n         ]]></code>\n     </test-code>\n+\n+    \n+\t<test-code>\n+        <description>#2833 NPE in UseCollectionIsEmptyRule with enums</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+public enum ComponentSize {\n+\n+    S(\"s\"),\n+    M(\"m\"),\n+    L(\"l\"),\n+    XL(\"xl\");\n+\n+\n+    private String size;\n+\n+    ComponentSize(String size) {\n+        this.size = size;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return size;\n+    }\n+\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>##2833 NPE in UseCollectionIsEmptyRule with enums (sanity check)</description>\n+        <expected-problems>1</expected-problems>\n+        <expected-linenumbers>12</expected-linenumbers>\n+        <code><![CDATA[\n+public enum ComponentSize {\n+\n+    S(\"s\"),\n+    M(\"m\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}