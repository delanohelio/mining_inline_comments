{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzI5MTE4", "number": 2312, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNTo0OVrODjfrag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTo0NDo0N1rODnxUQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTQ1NzcwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNTo0OVrOFvVWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDoyMDozNFrOFwIrRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzEzNA==", "bodyText": "Would node.getNode().getQuery().endsWith(\"WITH SECURITY_ENFORCED\"); produce the same result?", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r385177134", "createdAt": "2020-02-27T15:15:49Z", "author": {"login": "J-Spillane"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -337,6 +337,15 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n         return false;\n     }\n \n+    private boolean isWithSecurityEnforced(final AbstractApexNode<?> node){\n+        if(node instanceof ASTSoqlExpression){\n+            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n+            String query = ((ASTSoqlExpression) node).getQuery();\n+            return query.matches(pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6efc10eb4cb4e05d4904fe39817ba261f8713e7b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzIxNQ==", "bodyText": "I guess, we could also write query.toUpperCase(Locale.ROOT).contains(\"WITH SECURITY_ENFORCED\").\nBtw. - are multiple spaces between \"WITH\" and \"SECURITY_ENFORCED\" allowed? If yes, then we probably need to use a regex. In that case, we should create a precompiled pattern constant.", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r386017215", "createdAt": "2020-02-29T10:03:20Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -337,6 +337,15 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n         return false;\n     }\n \n+    private boolean isWithSecurityEnforced(final AbstractApexNode<?> node){\n+        if(node instanceof ASTSoqlExpression){\n+            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n+            String query = ((ASTSoqlExpression) node).getQuery();\n+            return query.matches(pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzEzNA=="}, "originalCommit": {"oid": "6efc10eb4cb4e05d4904fe39817ba261f8713e7b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODExNw==", "bodyText": "I see, we need to make sure, this text is not used inside a quoted string... So we'll need a regex.\nPlease create a private final static field:\nprivate static final Pattern WITH_SECURITY_ENFORCED = Pattern.compile(\"(?i).*[^']\\\\s*WITH\\\\s+SECURITY_ENFORCED\\\\s*[^']*\");\nAnd use it here then like this:\nreturn WITH_SECURITY_ENFORCED.matcher(soqlExpression.getQuery()).matches();", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r386018117", "createdAt": "2020-02-29T10:20:34Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -337,6 +337,15 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n         return false;\n     }\n \n+    private boolean isWithSecurityEnforced(final AbstractApexNode<?> node){\n+        if(node instanceof ASTSoqlExpression){\n+            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n+            String query = ((ASTSoqlExpression) node).getQuery();\n+            return query.matches(pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzEzNA=="}, "originalCommit": {"oid": "6efc10eb4cb4e05d4904fe39817ba261f8713e7b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDkwOTk5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDoyMTozMlrOFwIrjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDoyMTozMlrOFwIrjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODE4OA==", "bodyText": "We should not need this dependency.... please remove it again.", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r386018188", "createdAt": "2020-02-29T10:21:32Z", "author": {"login": "adangel"}, "path": "pom.xml", "diffHunk": "@@ -1015,4 +1015,10 @@\n         <module>pmd-doc</module>\n         <module>pmd-lang-test</module>\n     </modules>\n+    <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57279e11dbc6a2e4b68e138bbe6dfc2fda95ba34"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjU0ODk5OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MTo1NVrOF1ZXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MTo1NVrOF1ZXrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDUwOQ==", "bodyText": "Please remove this commented code - this is failing the build:\n[INFO] --- maven-checkstyle-plugin:3.1.1:check (checkstyle-check) @ pmd-apex ---\n[INFO] There are 4 errors reported by Checkstyle 8.30 with /net/sourceforge/pmd/pmd-checkstyle-config.xml ruleset.\n[ERROR] src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java:[348] (indentation) CommentsIndentation: Comment has incorrect indentation level 0, expected is 10, indentation should be the same level as line 349.", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r391534509", "createdAt": "2020-03-12T10:41:55Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -337,6 +339,19 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n         return false;\n     }\n \n+    private boolean isWithSecurityEnforced(final AbstractApexNode<?> node) {\n+//        if (node instanceof ASTSoqlExpression) {\n+//            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n+//            String query = ((ASTSoqlExpression) node).getQuery();\n+//            return query.matches(pattern);\n+//        }\n+//        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b34f04be18969a54687b9c02ca209c65b6d0ebb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjU1Nzc3OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0NDoxNlrOF1Zc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0NDoxNlrOF1Zc9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTg2Mg==", "bodyText": "There seems to be some indentation problem which is failing the build. It seems, these lines are indented with two spaces too much...\n[ERROR] src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java:[349] (indentation) Indentation: 'if' has incorrect indentation level 10, expected level should be 8.\n[ERROR] src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java:[351] (indentation) Indentation: 'if rcurly' has incorrect indentation level 10, expected level should be 8.\n[ERROR] src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java:[352] (indentation) Indentation: 'method def' child has incorrect indentation level 10, expected level should be 8.", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r391535862", "createdAt": "2020-03-12T10:44:16Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -337,6 +339,19 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n         return false;\n     }\n \n+    private boolean isWithSecurityEnforced(final AbstractApexNode<?> node) {\n+//        if (node instanceof ASTSoqlExpression) {\n+//            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n+//            String query = ((ASTSoqlExpression) node).getQuery();\n+//            return query.matches(pattern);\n+//        }\n+//        return false;\n+          if (node instanceof ASTSoqlExpression) {\n+            return WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\n+          }\n+          return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b34f04be18969a54687b9c02ca209c65b6d0ebb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjU2NTcyOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0NjoyNlrOF1Zh7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0NjoyNlrOF1Zh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNzEzNQ==", "bodyText": "Please combine the 3 if statements to avoid nesting:\nif (!typeToDMLOperationMapping.containsKey(typeCheck)\n    && !isProperESAPICheckForDML(typeCheck, crudMethod)\n    && !isWithSecurityEnforced(node)) {\n...", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r391537135", "createdAt": "2020-03-12T10:46:26Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -506,7 +521,9 @@ private void validateCRUDCheckPresent(final AbstractApexNode<?> node, final Obje\n             final String typeCheck) {\n         if (!typeToDMLOperationMapping.containsKey(typeCheck)) {\n             if (!isProperESAPICheckForDML(typeCheck, crudMethod)) {\n-                addViolation(data, node);\n+                if (!isWithSecurityEnforced(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b34f04be18969a54687b9c02ca209c65b6d0ebb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDI5MDU4OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTo0NDo0N1rOF19T7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjo1ODoxMFrOF2akeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMzM3Mg==", "bodyText": "@jarquile\nThe build is still failing (see https://travis-ci.org/github/pmd/pmd/builds/661704547?utm_source=github_status&utm_medium=notification):\n[INFO] --- maven-pmd-plugin:3.13.0:check (default) @ pmd-apex ---\n\n[INFO] PMD version: 6.22.0\n\n[INFO] PMD Failure: net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule:345 Rule:UnnecessaryLocalBeforeReturn Priority:1 Consider simply returning the value vs storing it in local variable 'temp'.\n\nJust write return WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\nAnd remove the comment.", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r392123372", "createdAt": "2020-03-13T09:44:47Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -340,16 +340,11 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n     }\n \n     private boolean isWithSecurityEnforced(final AbstractApexNode<?> node) {\n-//        if (node instanceof ASTSoqlExpression) {\n-//            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n-//            String query = ((ASTSoqlExpression) node).getQuery();\n-//            return query.matches(pattern);\n-//        }\n-//        return false;\n-          if (node instanceof ASTSoqlExpression) {\n-            return WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\n-          }\n-          return false;\n+        if (node instanceof ASTSoqlExpression) {\n+            boolean temp = WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\n+            return temp;//WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be72ec153daa2b8c2e4c3184406812c20ecbaed2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMjc0Ng==", "bodyText": "I'll fix it myself....", "url": "https://github.com/pmd/pmd/pull/2312#discussion_r392602746", "createdAt": "2020-03-14T16:58:10Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java", "diffHunk": "@@ -340,16 +340,11 @@ private boolean isLastMethodName(final ASTMethodCallExpression methodNode, final\n     }\n \n     private boolean isWithSecurityEnforced(final AbstractApexNode<?> node) {\n-//        if (node instanceof ASTSoqlExpression) {\n-//            String pattern = \"(?i).*[^']\\\\s*WITH SECURITY_ENFORCED\\\\s*[^']*\";\n-//            String query = ((ASTSoqlExpression) node).getQuery();\n-//            return query.matches(pattern);\n-//        }\n-//        return false;\n-          if (node instanceof ASTSoqlExpression) {\n-            return WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\n-          }\n-          return false;\n+        if (node instanceof ASTSoqlExpression) {\n+            boolean temp = WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();\n+            return temp;//WITH_SECURITY_ENFORCED.matcher(((ASTSoqlExpression) node).getQuery()).matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMzM3Mg=="}, "originalCommit": {"oid": "be72ec153daa2b8c2e4c3184406812c20ecbaed2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}