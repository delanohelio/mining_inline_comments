{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODA4NzMy", "number": 2791, "title": "[apex] Analyze inner classes for sharing violations", "bodyText": "Describe the PR\nFixes #2774, false positives and false\nnegatives for ApexSharingViolations.\nSharing settings are not inherited by inner classes. Sharing settings\nneed to be declared on the class that contains the Database method, DML,\nSOQL, or SOSL.\nThe change inverts the direction from which nodes are found and\nanalyzed. The previous code visited the ASTUserClass and then searched\nfor descendant nodes that met a certain criteria. It did not visit inner\nASTUserClass nodes because it didn't use rule chains or call the super's\nvisit moethod for ASTUserClassi.\nThe new implementation visits all nodes that correspond to Database\nmethod, DML, SOQL, or SOSL nodes and then finds the nearest ASTUserClass\nparent node. This ASTUserClass is examined to determine if it has\ndeclared a sharing setting as required.\nRelated issues\n#2774\nReady?\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-09-17T17:01:30Z", "url": "https://github.com/pmd/pmd/pull/2791", "merged": true, "mergeCommit": {"oid": "5429cebf380233f7569a41feb968ba7fcd30108c"}, "closed": true, "closedAt": "2020-09-24T10:08:24Z", "author": {"login": "jbartolotta-sfdc"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJy19sgH2gAyNDg4ODA4NzMyOmM2YjdhNzIzYmU1MmE3N2I2ZTRlYmQ2ZmExNWYwNTExNzgyYjhiY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL-GTWAFqTQ5NTQwMzI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc", "author": {"user": {"login": "jbartolotta-sfdc", "name": "Jeff Bartolotta"}}, "url": "https://github.com/pmd/pmd/commit/c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc", "committedDate": "2020-09-17T15:36:45Z", "message": "Analyze inner classes for sharing violations\n\nFixes https://github.com/pmd/pmd/issues/2774, false positives and false\nnegatives for ApexSharingViolationsRule.\n\nSharing settings are not inherited by inner classes. Sharing settings\nneed to be declared on the class that contains the Database method, DML,\nSOQL, or SOSL.\n\nThe change inverts the direction from which nodes are found and\nanalyzed. The previous code visited the ASTUserClass and then searched\nfor descendant nodes that met a certain criteria. It did not visit inner\nASTUserClass nodes because it didn't use rule chains or call the super's\nvisit moethod for ASTUserClassi.\n\nThe new implementation visits all nodes that correspond to Database\nmethod, DML, SOQL, or SOSL nodes and then finds the nearest ASTUserClass\nparent node. This ASTUserClass is examined to determine if it has\ndeclared a sharing setting as required."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODIxNjky", "url": "https://github.com/pmd/pmd/pull/2791#pullrequestreview-490821692", "createdAt": "2020-09-17T17:17:44Z", "commit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoxNzo0NFrOHTtXgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoyMDowM1rOHTtcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyODI5MA==", "bodyText": "The previous implementation used the outer classes sharing declaration and never visited the inner ASTUserClass, because it didn't use RuleChains or call super.visit(node, data);,\nAdding rule chains or calling super.visit was not enough because the logic for finding the child nodes doesn't distinguish between statements in the Outer or Inner class.\nI tried an implementation that kept top down approach by filtering out child nodes based on the parent, but it was messy. Changing the logic to visit the Database/DML/SOQL/SOSL nodes, then look up the tree for the closest parent class makes the logic cleaner.", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490428290", "createdAt": "2020-09-17T17:17:44Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSharingViolationsRule.java", "diffHunk": "@@ -21,45 +30,103 @@\n  */\n public class ApexSharingViolationsRule extends AbstractApexRule {\n \n+    /**\n+     * Keep track of previously reported violations to avoid duplicates.\n+     */\n     private WeakHashMap<ApexNode<?>, Object> localCacheOfReportedNodes = new WeakHashMap<>();\n \n     public ApexSharingViolationsRule() {\n         setProperty(CODECLIMATE_CATEGORIES, \"Security\");\n         setProperty(CODECLIMATE_REMEDIATION_MULTIPLIER, 100);\n         setProperty(CODECLIMATE_BLOCK_HIGHLIGHTING, false);\n+        addRuleChainVisit(ASTDmlDeleteStatement.class);\n+        addRuleChainVisit(ASTDmlInsertStatement.class);\n+        addRuleChainVisit(ASTDmlMergeStatement.class);\n+        addRuleChainVisit(ASTDmlUndeleteStatement.class);\n+        addRuleChainVisit(ASTDmlUpdateStatement.class);\n+        addRuleChainVisit(ASTDmlUpsertStatement.class);\n+        addRuleChainVisit(ASTMethodCallExpression.class);\n+        addRuleChainVisit(ASTSoqlExpression.class);\n+        addRuleChainVisit(ASTSoslExpression.class);\n     }\n \n     @Override\n-    public Object visit(ASTUserClass node, Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyOTYxOQ==", "bodyText": "The number of permutations that can occur lends itself to a parameterized test instead hand crafting them in XML.", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490429619", "createdAt": "2020-09-17T17:20:03Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/test/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSharingViolationsNestedClassTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.security;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import net.sourceforge.pmd.Report;\n+import net.sourceforge.pmd.Rule;\n+import net.sourceforge.pmd.RuleViolation;\n+import net.sourceforge.pmd.lang.LanguageRegistry;\n+import net.sourceforge.pmd.lang.apex.ApexLanguageModule;\n+import net.sourceforge.pmd.testframework.RuleTst;\n+\n+/**\n+ * <p>Sharing settings are not inherited by inner classes. Sharing settings need to be declared on the class that\n+ * contains the Database method, DML, SOQL, or SOSL.</p>\n+ *\n+ * <p>This test runs against Apex code that has an Outer class and and Inner class. Different Apex code is generated\n+ * based on the boolean permutations. Any classes that includes data access cod, but doesn't declare a sharing setting\n+ * should trigger a violation.</p>\n+ */\n+@RunWith(Parameterized.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODUzOTgx", "url": "https://github.com/pmd/pmd/pull/2791#pullrequestreview-490853981", "createdAt": "2020-09-17T17:58:56Z", "commit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzo1ODo1NlrOHTu3Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzo1ODo1NlrOHTu3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1Mjc5OQ==", "bodyText": "Found while regression testing against public repos. This was found here https://github.com/SalesforceLabs/Schedul-o-matic-9000/blob/master/force-app/main/default/classes/Dao.cls#L14", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490452799", "createdAt": "2020-09-17T17:58:56Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/test/resources/net/sourceforge/pmd/lang/apex/rule/security/xml/ApexSharingViolations.xml", "diffHunk": "@@ -99,6 +99,63 @@ public inherited sharing class MyClass {\n    public List<Contact> getAllTheSecrets() {\n        return [SELECT Name FROM Contact];\n    }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>Apex test classes do not need a sharing declaration</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+@isTest public class MyClass {\n+   public List<Contact> getAllTheSecrets() {\n+       return [SELECT Name FROM Contact];\n+   }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <!-- @isTest can only be declared on the outer class, it is inherited by the inner class-->\n+    <test-code>\n+        <description>Apex inner test classes do not need a sharing declaration</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+@isTest public class Outer {\n+   public List<Contact> getAllTheOuterSecrets() {\n+       return [SELECT Name FROM Contact];\n+   }\n+   public class Inner {\n+       public List<Contact> getAllTheInnerSecrets() {\n+           return [SELECT Name FROM Contact];\n+       }\n+   }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <test-code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDYwODE2", "url": "https://github.com/pmd/pmd/pull/2791#pullrequestreview-491460816", "createdAt": "2020-09-18T13:24:36Z", "commit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyNDozNlrOHUNAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozODo0M1rOHUNioQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NjU4Ng==", "bodyText": "This makes sense. Using node.getFirstParent() is simpler.", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490946586", "createdAt": "2020-09-18T13:24:36Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSharingViolationsRule.java", "diffHunk": "@@ -21,45 +30,103 @@\n  */\n public class ApexSharingViolationsRule extends AbstractApexRule {\n \n+    /**\n+     * Keep track of previously reported violations to avoid duplicates.\n+     */\n     private WeakHashMap<ApexNode<?>, Object> localCacheOfReportedNodes = new WeakHashMap<>();\n \n     public ApexSharingViolationsRule() {\n         setProperty(CODECLIMATE_CATEGORIES, \"Security\");\n         setProperty(CODECLIMATE_REMEDIATION_MULTIPLIER, 100);\n         setProperty(CODECLIMATE_BLOCK_HIGHLIGHTING, false);\n+        addRuleChainVisit(ASTDmlDeleteStatement.class);\n+        addRuleChainVisit(ASTDmlInsertStatement.class);\n+        addRuleChainVisit(ASTDmlMergeStatement.class);\n+        addRuleChainVisit(ASTDmlUndeleteStatement.class);\n+        addRuleChainVisit(ASTDmlUpdateStatement.class);\n+        addRuleChainVisit(ASTDmlUpsertStatement.class);\n+        addRuleChainVisit(ASTMethodCallExpression.class);\n+        addRuleChainVisit(ASTSoqlExpression.class);\n+        addRuleChainVisit(ASTSoslExpression.class);\n     }\n \n     @Override\n-    public Object visit(ASTUserClass node, Object data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyODI5MA=="}, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0ODg5Mg==", "bodyText": "The downside is, that it's now not obvious anymore, what is being tested. You can't copy the sample code snippet into some other tool (like designer, or another parser/compiler, or easily create a separate source file).\nSince we still have the \"standard\" rule tests, I'm ok with adding this test class.", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490948892", "createdAt": "2020-09-18T13:28:15Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/test/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSharingViolationsNestedClassTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.security;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import net.sourceforge.pmd.Report;\n+import net.sourceforge.pmd.Rule;\n+import net.sourceforge.pmd.RuleViolation;\n+import net.sourceforge.pmd.lang.LanguageRegistry;\n+import net.sourceforge.pmd.lang.apex.ApexLanguageModule;\n+import net.sourceforge.pmd.testframework.RuleTst;\n+\n+/**\n+ * <p>Sharing settings are not inherited by inner classes. Sharing settings need to be declared on the class that\n+ * contains the Database method, DML, SOQL, or SOSL.</p>\n+ *\n+ * <p>This test runs against Apex code that has an Outer class and and Inner class. Different Apex code is generated\n+ * based on the boolean permutations. Any classes that includes data access cod, but doesn't declare a sharing setting\n+ * should trigger a violation.</p>\n+ */\n+@RunWith(Parameterized.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyOTYxOQ=="}, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NTQyNQ==", "bodyText": "I now, all the cases are in your permutation test class, but I'd still add the two examples from the original issue here as test cases. These rule tests are proof for me, that we fixed the original issue - and I don't see it yet....\nCould you please add these two cases? Thanks!", "url": "https://github.com/pmd/pmd/pull/2791#discussion_r490955425", "createdAt": "2020-09-18T13:38:43Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/test/resources/net/sourceforge/pmd/lang/apex/rule/security/xml/ApexSharingViolations.xml", "diffHunk": "@@ -99,6 +99,63 @@ public inherited sharing class MyClass {\n    public List<Contact> getAllTheSecrets() {\n        return [SELECT Name FROM Contact];\n    }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>Apex test classes do not need a sharing declaration</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+@isTest public class MyClass {\n+   public List<Contact> getAllTheSecrets() {\n+       return [SELECT Name FROM Contact];\n+   }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <!-- @isTest can only be declared on the outer class, it is inherited by the inner class-->\n+    <test-code>\n+        <description>Apex inner test classes do not need a sharing declaration</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+@isTest public class Outer {\n+   public List<Contact> getAllTheOuterSecrets() {\n+       return [SELECT Name FROM Contact];\n+   }\n+   public class Inner {\n+       public List<Contact> getAllTheInnerSecrets() {\n+           return [SELECT Name FROM Contact];\n+       }\n+   }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>Nested method calls are detected</description>\n+        <expected-problems>1</expected-problems>\n+        <code><![CDATA[\n+public class Dao {\n+  static Map<String, List<SObject>> recordsMap = new Map<String, List<SObject>>();\n+\n+  public List<SObject> getRecords(String query) {\n+    if (!recordsMap.containsKey(query)) {\n+      recordsMap.put(query, Database.query(query));\n+    }\n+    return recordsMap.get(query);\n+  }\n+}\n+     ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>Trigger does not require sharing</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+trigger MyTrigger on Account(after insert, after update) {\n+    [SELECT Id,(SELECT Id FROM Opportunities) FROM Account WHERE Id IN :Trigger.New];\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7a723be52a77b6e4ebd6fa15f0511782b8bcc"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5429cebf380233f7569a41feb968ba7fcd30108c", "author": {"user": {"login": "jbartolotta-sfdc", "name": "Jeff Bartolotta"}}, "url": "https://github.com/pmd/pmd/commit/5429cebf380233f7569a41feb968ba7fcd30108c", "committedDate": "2020-09-22T03:11:07Z", "message": "Add issue reproducers as standard rule tests\n\nAdded false negative and false positive test cases that were logged with\nthe original issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDAzMjQx", "url": "https://github.com/pmd/pmd/pull/2791#pullrequestreview-495403241", "createdAt": "2020-09-24T09:51:24Z", "commit": {"oid": "5429cebf380233f7569a41feb968ba7fcd30108c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4729, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}