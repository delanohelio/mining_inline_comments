{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODY5NTcx", "number": 2963, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoyNzoxNFrOFRSLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMTowMVrOFRSPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY3ODc2OnYy", "diffSide": "RIGHT", "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/cpd/CPPTokenizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoyNzoxNFrOIXoiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoyNzoxNFrOIXoiKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1MjI2NA==", "bodyText": "let's add @see #OPTION_IGNORE_LITERAL_SEQUENCES here as well....", "url": "https://github.com/pmd/pmd/pull/2963#discussion_r561652264", "createdAt": "2021-01-21T07:27:14Z", "author": {"login": "adangel"}, "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/cpd/CPPTokenizer.java", "diffHunk": "@@ -23,12 +27,12 @@\n     private boolean skipBlocks = true;\n     private String skipBlocksStart;\n     private String skipBlocksEnd;\n+    private boolean ignoreLiteralSequences = false;\n \n     /**\n      * Sets the possible options for the C++ tokenizer.\n      *\n-     * @param properties\n-     *            the properties\n+     * @param properties the properties\n      * @see #OPTION_SKIP_BLOCKS\n      * @see #OPTION_SKIP_BLOCKS_PATTERN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY5MDM3OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/GenericToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMTowMVrOIXoozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMTowMVrOIXoozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1Mzk2Ng==", "bodyText": "I'd rather mark this as @Experimental for now. The reason is, that the different kinds are the constants e.g. from CppParserConstants. Whenever we change the grammar and add a new token, these \"constants\" might change, which will change the public API here. Maybe we need another abstraction here?\nNote: We have actually the same problem for AntlrToken as well....", "url": "https://github.com/pmd/pmd/pull/2963#discussion_r561653966", "createdAt": "2021-01-21T07:31:01Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/GenericToken.java", "diffHunk": "@@ -51,4 +51,11 @@\n      * @return a non-negative integer containing the begin column\n      */\n     int getEndColumn();\n+\n+    /**\n+     * Gets a unique integer representing the kind of token this is.\n+     *\n+     * The semantics of this kind depend on the language.\n+     */\n+    int getKind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55598d844a66bf11135fc72bde3c6d6d4ce7c146"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 225, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}