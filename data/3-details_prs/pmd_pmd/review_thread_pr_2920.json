{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDM0MTgw", "number": 2920, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozNjowM1rOE8ImXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1NDo1N1rOE8JEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDkwOTEwOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozNjowM1rOH4FYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1MjozOVrOH4GAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MDM5Nw==", "bodyText": "I think, we should also catch here TypeNotPresentException, see also #2940", "url": "https://github.com/pmd/pmd/pull/2920#discussion_r528570397", "createdAt": "2020-11-23T09:36:03Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java", "diffHunk": "@@ -52,33 +51,22 @@ public static JavaTypeDefinition forClass(TypeDefinitionType type, JavaTypeDefin\n         }\n     }\n \n+    public static JavaTypeDefinition forClass(final Class<?> clazz) {\n+        return clazz == Object.class ? JavaTypeDefinitionSimple.OBJECT_DEFINITION\n+                                     : forClass(clazz, NO_GENERICS); // very common\n+\n+    }\n+\n     public static JavaTypeDefinition forClass(final Class<?> clazz, JavaTypeDefinition... boundGenerics) {\n         if (clazz == null) {\n             return null;\n         }\n \n-        // deal with generic types\n-        if (boundGenerics.length != 0) {\n-            // With generics there is no cache\n-            return new JavaTypeDefinitionSimple(clazz, boundGenerics);\n-        }\n-\n-        final JavaTypeDefinition typeDef = CLASS_EXACT_TYPE_DEF_CACHE.get(clazz);\n-\n-        if (typeDef != null) {\n-            return typeDef;\n-        }\n-\n-        final JavaTypeDefinition newDef;\n         try {\n-            newDef = new JavaTypeDefinitionSimple(clazz);\n-        } catch (final NoClassDefFoundError e) {\n+            return new JavaTypeDefinitionSimple(clazz, boundGenerics);\n+        } catch (final LinkageError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70462b79a5595c6921dc13a4c66517964ee52bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDY2Nw==", "bodyText": "Hm... maybe not - we don't seem to load anything here anymore. So I think, not even LinkageError would occur here... but somewhere else....", "url": "https://github.com/pmd/pmd/pull/2920#discussion_r528580667", "createdAt": "2020-11-23T09:52:39Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java", "diffHunk": "@@ -52,33 +51,22 @@ public static JavaTypeDefinition forClass(TypeDefinitionType type, JavaTypeDefin\n         }\n     }\n \n+    public static JavaTypeDefinition forClass(final Class<?> clazz) {\n+        return clazz == Object.class ? JavaTypeDefinitionSimple.OBJECT_DEFINITION\n+                                     : forClass(clazz, NO_GENERICS); // very common\n+\n+    }\n+\n     public static JavaTypeDefinition forClass(final Class<?> clazz, JavaTypeDefinition... boundGenerics) {\n         if (clazz == null) {\n             return null;\n         }\n \n-        // deal with generic types\n-        if (boundGenerics.length != 0) {\n-            // With generics there is no cache\n-            return new JavaTypeDefinitionSimple(clazz, boundGenerics);\n-        }\n-\n-        final JavaTypeDefinition typeDef = CLASS_EXACT_TYPE_DEF_CACHE.get(clazz);\n-\n-        if (typeDef != null) {\n-            return typeDef;\n-        }\n-\n-        final JavaTypeDefinition newDef;\n         try {\n-            newDef = new JavaTypeDefinitionSimple(clazz);\n-        } catch (final NoClassDefFoundError e) {\n+            return new JavaTypeDefinitionSimple(clazz, boundGenerics);\n+        } catch (final LinkageError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MDM5Nw=="}, "originalCommit": {"oid": "b70462b79a5595c6921dc13a4c66517964ee52bb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDk3ODkyOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinitionSimple.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1MzoxOVrOH4GByg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1MzoxOVrOH4GByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MTA2Ng==", "bodyText": "I think, this method might throw LinkageError when loading the interfaces or superclass.", "url": "https://github.com/pmd/pmd/pull/2920#discussion_r528581066", "createdAt": "2020-11-23T09:53:19Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinitionSimple.java", "diffHunk": "@@ -26,21 +26,38 @@\n \n \n /* default */ class JavaTypeDefinitionSimple extends JavaTypeDefinition {\n+\n+    static final JavaTypeDefinitionSimple OBJECT_DEFINITION = new JavaTypeDefinitionSimple(Object.class);\n     private final Class<?> clazz;\n-    private final JavaTypeDefinition[] genericArgs;\n+    private JavaTypeDefinition[] genericArgs;\n     // cached because calling clazz.getTypeParameters().length create a new array every time\n-    private final int typeParameterCount;\n-    private final boolean isGeneric;\n-    private final boolean isRawType;\n-    private final JavaTypeDefinition enclosingClass;\n+    private int typeParameterCount = -1;\n+    private final int typeArgumentCount;\n \n     private static final Logger LOG = Logger.getLogger(JavaTypeDefinitionSimple.class.getName());\n-    private static final JavaTypeDefinition[] NO_GENERICS = {};\n \n     protected JavaTypeDefinitionSimple(Class<?> clazz, JavaTypeDefinition... boundGenerics) {\n         super(EXACT);\n         this.clazz = clazz;\n \n+        typeArgumentCount = boundGenerics.length;\n+        if (boundGenerics.length > 0) {\n+            genericArgs = Arrays.copyOf(boundGenerics, boundGenerics.length);\n+        } // otherwise stays null\n+    }\n+\n+    private Class<?> loadEnclosing(Class<?> clazz) {\n+        try {\n+            return clazz.getEnclosingClass();\n+        } catch (LinkageError e) {\n+            if (LOG.isLoggable(Level.WARNING)) {\n+                LOG.log(Level.WARNING, \"Could not load enclosing class of \" + clazz.getName() + \", due to: \" + e);\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private TypeVariable<?>[] getTypeParameters(Class<?> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70462b79a5595c6921dc13a4c66517964ee52bb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDk4NjM0OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinitionSimple.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1NDo1N1rOH4GGEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzozNToyM1rOH4NscQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MjE2MQ==", "bodyText": "I think, we should add here a try-catch for LinkageError. In case, we couldn't determine the type parameters, can we then set typeParametersCount=0 ?", "url": "https://github.com/pmd/pmd/pull/2920#discussion_r528582161", "createdAt": "2020-11-23T09:54:57Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinitionSimple.java", "diffHunk": "@@ -83,12 +80,25 @@ protected JavaTypeDefinitionSimple(Class<?> clazz, JavaTypeDefinition... boundGe\n \n     @Override\n     public JavaTypeDefinition getEnclosingClass() {\n-        return enclosingClass;\n+        return JavaTypeDefinition.forClass(loadEnclosing(clazz));\n+    }\n+\n+    @Override\n+    public boolean isRawType() {\n+        return isGeneric() && typeArgumentCount == 0;\n     }\n \n     @Override\n     public boolean isGeneric() {\n-        return isGeneric;\n+        return getTypeParameterCount() != 0;\n+    }\n+\n+    @Override\n+    public int getTypeParameterCount() {\n+        if (typeParameterCount == -1) {\n+            typeParameterCount = getTypeParameters(clazz).length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70462b79a5595c6921dc13a4c66517964ee52bb"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNjY3Mw==", "bodyText": "I think you're right, will do", "url": "https://github.com/pmd/pmd/pull/2920#discussion_r528706673", "createdAt": "2020-11-23T13:35:23Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinitionSimple.java", "diffHunk": "@@ -83,12 +80,25 @@ protected JavaTypeDefinitionSimple(Class<?> clazz, JavaTypeDefinition... boundGe\n \n     @Override\n     public JavaTypeDefinition getEnclosingClass() {\n-        return enclosingClass;\n+        return JavaTypeDefinition.forClass(loadEnclosing(clazz));\n+    }\n+\n+    @Override\n+    public boolean isRawType() {\n+        return isGeneric() && typeArgumentCount == 0;\n     }\n \n     @Override\n     public boolean isGeneric() {\n-        return isGeneric;\n+        return getTypeParameterCount() != 0;\n+    }\n+\n+    @Override\n+    public int getTypeParameterCount() {\n+        if (typeParameterCount == -1) {\n+            typeParameterCount = getTypeParameters(clazz).length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MjE2MQ=="}, "originalCommit": {"oid": "b70462b79a5595c6921dc13a4c66517964ee52bb"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 207, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}