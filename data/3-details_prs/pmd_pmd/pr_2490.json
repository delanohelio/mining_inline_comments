{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTI0NDM0", "number": 2490, "title": "[core] Simplify the rulechain", "bodyText": "Describe the PR\nSimplify the way the rulechain is implemented, clarify the contract of Rule::apply, remove some needless API about the rulechain. In effect, this makes applying rules on a tree index the only way to apply rules. This subsumes the two previous ways to apply rules (rulechain, which uses an index, and Rule.apply, which doesn't).\nCurrent problems\n\nCurrently rules are artificially split between those that use the rulechain and those that don't. This split affects several classes: RuleSet, RuleSets, Rulechain, etc.\nRulechain rules, for some reason, use one custom \"RulechainVisitor\" per language. All of those are nearly perfect duplicates, and are completely unnecessary. We can traverse a tree without using the language-specific visitor interface.\nRulechainVisitors also circumvent the Rule::apply method for XPath rules (they call XPathRule::evaluate). This is inconsistent and unnecessary. It weakens the contract of Rule::apply.\nRule::apply, by taking a list of nodes as an argument, potentially hides  errors: if an error occurs, the remaining nodes are not processed.\n\nIn most usages we use a singleton list anyway, so passing a list is useless\n\n\nRule::apply is also implemented the same way everywhere: basically loop over all nodes and visit them. But implementations are inconsistent w.r.t. error handling:\n\nsome test the node explicitly for some node type and ignore the rest (even if the node is from the same language)\n\n\n\n\n  \n    \n      pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJavaRule.java\n    \n    \n        Lines 42 to 54\n      in\n      1c09a4f\n    \n    \n    \n    \n\n        \n          \n               protected void visitAll(List<? extends Node> nodes, RuleContext ctx) { \n        \n\n        \n          \n                   for (Object element : nodes) { \n        \n\n        \n          \n                       /* \n        \n\n        \n          \n                           It is important to note that we are assuming that all nodes here are of type Compilation Unit, \n        \n\n        \n          \n                           but our caller method may be called with any type of node, and that's why we need to check the kind \n        \n\n        \n          \n                           of instance of each element \n        \n\n        \n          \n                       */ \n        \n\n        \n          \n                       if (element instanceof ASTCompilationUnit) { \n        \n\n        \n          \n                           ASTCompilationUnit node = (ASTCompilationUnit) element; \n        \n\n        \n          \n                           visit(node, ctx); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n    \n  \n\n\n\nsome cast the node without checking if this is appropriate, which may fail at runtime\n\n\n  \n    \n      pmd/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/rule/AbstractJspRule.java\n    \n    \n        Lines 29 to 34\n      in\n      1c09a4f\n    \n    \n    \n    \n\n        \n          \n           protected void visitAll(List<? extends Node> nodes, RuleContext ctx) { \n        \n\n        \n          \n               for (Object element : nodes) { \n        \n\n        \n          \n                   JspNode node = (JspNode) element; \n        \n\n        \n          \n                   visit(node, ctx); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\nAnother problem with those implementations is that they define an auxilliary visitAll method. This multiplies the extension points (and hence the failure points) for no benefit at all.\n\nThis PR irons out this part of the API, by removing the divide between rulechain rules and other ones, and simplifying those extension points.\nChanges\nThe basic API change to Rule is the following:\n\nEvery rule exposes a RuleTargetSelector, a strategy that selects the nodes that a rule should visit. There are several strategies:\n\nSelect nodes by their XPath names: used to implement XPath rulechain rules\nSelect nodes by their class: used to implement Java rulechain rules\nJust select the root node: used to implement other rules (matches the current behavior of making a recursive top-down visit starting from the root)\n\n\nForeach tree, foreach rule, the Rule::apply method is systematically fed with the nodes of the tree that match the selector. This means Rule::apply is now the only entry point to apply a rule (not circumvented by XPath rules).\n\nThe selectors select nodes from an index of the tree, similar to the one previously built by RulechainVisitors. This is now used by all rules though. The same implementation is used by all languages.\nOther API changes include:\n\nRulechainVisitor and Rulechain are removed. Rule application is managed by a RuleApplicator object\n\nThe constructor of BaseLanguageModule is altered, since there's no need to provide a rulechain visitor class. Language::getRulechainVisitorClass is removed\n\n\nRuleSet::apply is deprecated. RuleSets with an 's' should be used for that\nRule::apply now takes a single node instead of a list\nAll the visitAll methods are removed. Since by contract apply is only called with nodes selected by the target selector, it's safe to rely on this and throw an exception if the node is not of the correct type. So implementations of apply always cast without checking now.\nRule::addRuleChainVisit is deprecated. Users should override AbstractRule::buildTargetSelector instead. It's still there temporarily, for compatibility\n\nIn the non-API changes, there is now a way to index and visit abstract types efficiently. This simplifies some rulechain rules (though eg for the java tree, many abstractions only exist in the java-grammar branch). This represents most of the code additions of this PR mind you.\nRelated issues\n\n\nFixes #1785\n\nReady?\n\n\n\n Port remaining usages of addRuleChainVisit\n\n\n Added unit tests for fixed bug/feature\n\n\n Passing all unit tests\n\n There's a problem caused by #1937 and AvoidGlobalModifier, I'll fix this when I have the time -> #2491\n\n\n\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n\n\n Added (in-code) documentation (if needed)\n\n\nDeprecations due on master\n\nRulesets. This is an implementation detail\nBenchmark API (internal)\n\nFuture work\nAs part of the broader API changes around eg RuleContext and SourceCodeProcessor, I think removing RuleSets::apply would be appropriate. Possibly removing RuleSets altogether would be beneficial.", "createdAt": "2020-05-18T14:04:08Z", "url": "https://github.com/pmd/pmd/pull/2490", "merged": true, "mergeCommit": {"oid": "00dbe082824ace741b66012fd2bc9d675b1349b6"}, "closed": true, "closedAt": "2020-06-26T09:13:23Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 86, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcifbxfAH2gAyNDE5NTI0NDM0OjkyM2VkYTkzMWYyMWMwZWJiOGIzMDg3ZDY0YjlhOGI1ZDgwZmJiYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu_RPdgFqTQzODA2Mzc0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "923eda931f21c0ebb8b3087d64b9a8b5d80fbbac", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/923eda931f21c0ebb8b3087d64b9a8b5d80fbbac", "committedDate": "2020-05-18T12:56:54Z", "message": "Generalized rchain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3348e634ca2cbfe519c8d1615facdff2a19c7af0", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/3348e634ca2cbfe519c8d1615facdff2a19c7af0", "committedDate": "2020-05-18T12:56:54Z", "message": "Optimise rulechain lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19212f94881902168fbd363c2a88aea7bf098732", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/19212f94881902168fbd363c2a88aea7bf098732", "committedDate": "2020-05-18T12:56:54Z", "message": "Define everything in terms of rulechain with a heap structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f03b3cc22e7f992fe30db63243413aed0709757", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7f03b3cc22e7f992fe30db63243413aed0709757", "committedDate": "2020-05-18T12:56:54Z", "message": "Remove monotonic set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a1455aa7103adb035fc8d0fb77b7c19aef3276", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c0a1455aa7103adb035fc8d0fb77b7c19aef3276", "committedDate": "2020-05-18T12:56:54Z", "message": "Make heap freezable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a4a89e9e98c3cd1493955c30880599ec17a3e8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/24a4a89e9e98c3cd1493955c30880599ec17a3e8", "committedDate": "2020-05-18T12:56:54Z", "message": "Extract monoid impls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7998622c4f6c20b47e9ed1a9d4373f3122353850", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7998622c4f6c20b47e9ed1a9d4373f3122353850", "committedDate": "2020-05-18T12:56:54Z", "message": "Encapsulate behaviour in strategies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a966f606dc830ab28fe7fc5ddaf92e40df786b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/35a966f606dc830ab28fe7fc5ddaf92e40df786b", "committedDate": "2020-05-18T12:56:54Z", "message": "Rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "200bafce3a982486428888fefb236e80257d94fc", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/200bafce3a982486428888fefb236e80257d94fc", "committedDate": "2020-05-18T12:56:54Z", "message": "Make monoid extend BinaryOperator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d498146ff05764eacb9e2dce8f9e5f265e6bb8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d1d498146ff05764eacb9e2dce8f9e5f265e6bb8", "committedDate": "2020-05-18T12:56:54Z", "message": "Test monoids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4da2c99c7e7ed9467de6e094d93656ace6dccf", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/bd4da2c99c7e7ed9467de6e094d93656ace6dccf", "committedDate": "2020-05-18T12:56:54Z", "message": "Fix diamond situation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f1f863da5f402a321990be547b37ea5c6e6dc5", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d4f1f863da5f402a321990be547b37ea5c6e6dc5", "committedDate": "2020-05-18T12:56:54Z", "message": "Test topo order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ff844921b6f41ea953f41b61d62f6ab316f4188", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9ff844921b6f41ea953f41b61d62f6ab316f4188", "committedDate": "2020-05-18T12:56:54Z", "message": "Implement real toposort"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c824412656774a46ade0e9b69c3d8c33165f5e0", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8c824412656774a46ade0e9b69c3d8c33165f5e0", "committedDate": "2020-05-18T12:56:54Z", "message": "Use persistent collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47fb790bd6e336582654f40b991b765e8d3d15ca", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/47fb790bd6e336582654f40b991b765e8d3d15ca", "committedDate": "2020-05-18T12:56:54Z", "message": "Use node stream lattice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b428629c7de9c9b91f0d6e971dd91c91f5435876", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b428629c7de9c9b91f0d6e971dd91c91f5435876", "committedDate": "2020-05-18T12:56:54Z", "message": "Allow preserving topology"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e3fa264b63ad6e4e19aaf4d8f1e8121af193cf", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/79e3fa264b63ad6e4e19aaf4d8f1e8121af193cf", "committedDate": "2020-05-18T12:56:54Z", "message": "Fix xpath rulechain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d276c2a00e765c4a7fb8c26d7824c4bbd0c1fe", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/60d276c2a00e765c4a7fb8c26d7824c4bbd0c1fe", "committedDate": "2020-05-18T12:57:53Z", "message": "Remove old rulechain impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ac470c5ea6fc7b6eda0f83b13b19a714f972ec", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e0ac470c5ea6fc7b6eda0f83b13b19a714f972ec", "committedDate": "2020-05-18T12:57:54Z", "message": "Improve performance of classloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9bb62630965d33c9f530e425850450f29691b0", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/dc9bb62630965d33c9f530e425850450f29691b0", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2670a9fdee867955e0c242143a5f7e325b38950e", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/2670a9fdee867955e0c242143a5f7e325b38950e", "committedDate": "2020-05-18T12:57:54Z", "message": "Port java rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce33f159a5b825e2f09f6f24b30c60c58d7e3c80", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ce33f159a5b825e2f09f6f24b30c60c58d7e3c80", "committedDate": "2020-05-18T12:57:54Z", "message": "Force parsers to return RootNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e69080d9e84009258a33d6f2d2b250fdc22d15df", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e69080d9e84009258a33d6f2d2b250fdc22d15df", "committedDate": "2020-05-18T12:57:54Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc23b61b0308167ed0ea16cbc3bc30d11659b298", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/cc23b61b0308167ed0ea16cbc3bc30d11659b298", "committedDate": "2020-05-18T12:57:54Z", "message": "Improve test XML schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af5268605a469498d6beee3767da9cc738278e3", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9af5268605a469498d6beee3767da9cc738278e3", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea2a4a1515a824023215d882001aaa4c2261708c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ea2a4a1515a824023215d882001aaa4c2261708c", "committedDate": "2020-05-18T12:57:54Z", "message": "Revert changes to test framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "697db53c4c5fc71b792005ef583daffa32d61cea", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/697db53c4c5fc71b792005ef583daffa32d61cea", "committedDate": "2020-05-18T12:57:54Z", "message": "Doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6965c62a0e4dca325fba88f2af51f6870929cc4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c6965c62a0e4dca325fba88f2af51f6870929cc4", "committedDate": "2020-05-18T12:57:54Z", "message": "Revert changes to typeres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f27d5fb5f65a0e7ee66ff1aab51bae87f9090859", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f27d5fb5f65a0e7ee66ff1aab51bae87f9090859", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup Rule methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f13dd82f03a33ee9b2651acb8f7b2ab6088036d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8f13dd82f03a33ee9b2651acb8f7b2ab6088036d", "committedDate": "2020-05-18T12:57:54Z", "message": "Replace Node#apply(List<Node>) with apply(Node)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca2e775512fd15977eb6eb42e358ca4be9c9f44", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/2ca2e775512fd15977eb6eb42e358ca4be9c9f44", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup lattice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1054dbc772fd05f70fcc7db1a938736c274e3ae6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1054dbc772fd05f70fcc7db1a938736c274e3ae6", "committedDate": "2020-05-18T12:57:54Z", "message": "Prune non-public types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b68a2683ffeab873ceb6ab1919fec90e9b5a68c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1b68a2683ffeab873ceb6ab1919fec90e9b5a68c", "committedDate": "2020-05-18T12:57:54Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bf4d918e022309e246b59479266872b2afd151", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/28bf4d918e022309e246b59479266872b2afd151", "committedDate": "2020-05-18T12:57:54Z", "message": "Remove diamond detection\n\nIf we just mandate that the monoid\nbe idempotent, which is the case for\nset monoids, then we can just avoid\nthis and reduce complexity of the\nimplementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83fb4ce663592873c5f153cf9610f8c8523d6e25", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/83fb4ce663592873c5f153cf9610f8c8523d6e25", "committedDate": "2020-05-18T12:57:54Z", "message": "Actually we don't need idempotence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd1c82a02a084d3419c31fa1af20991a8f66b441", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/dd1c82a02a084d3419c31fa1af20991a8f66b441", "committedDate": "2020-05-18T12:57:54Z", "message": "Nail monoid properties\n\nWe need commutativity, but can work\naround idempotence by being smarter\nthe impl of the reduction op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349cb1c7c1090fc01f83b881afc39d42ab2fa412", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/349cb1c7c1090fc01f83b881afc39d42ab2fa412", "committedDate": "2020-05-18T12:57:54Z", "message": "Fix order of graph output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89140c97603b6dd02dd3ea4532be6da5c54979c6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/89140c97603b6dd02dd3ea4532be6da5c54979c6", "committedDate": "2020-05-18T12:57:54Z", "message": "Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70c8861143a3254b3c9d3bc6ba3b5cbf8892174", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e70c8861143a3254b3c9d3bc6ba3b5cbf8892174", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473d96f02fc26dc103af98189e3fece2ccbe41d9", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/473d96f02fc26dc103af98189e3fece2ccbe41d9", "committedDate": "2020-05-18T12:57:54Z", "message": "Fix up2date check\n\nBecause of filtering, we're removing some\nnodes that may be readded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e53495e7623831383d1454b53f66b328d8507e85", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e53495e7623831383d1454b53f66b328d8507e85", "committedDate": "2020-05-18T12:57:54Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d48a1e111360051a5e61451cf5c24560d7ed104", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7d48a1e111360051a5e61451cf5c24560d7ed104", "committedDate": "2020-05-18T12:57:55Z", "message": "Only index what's important"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351e53866ccb82e3aa848c503983f3d8e76a0477", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/351e53866ccb82e3aa848c503983f3d8e76a0477", "committedDate": "2020-05-18T12:57:55Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70c93c45413744f9c80b2e193253d8894b88610", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/a70c93c45413744f9c80b2e193253d8894b88610", "committedDate": "2020-05-18T12:57:55Z", "message": "Mandate idempotence\n\nMakes it much easier to reason about"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "047e4651b652592695bda66c580e4523cc278292", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/047e4651b652592695bda66c580e4523cc278292", "committedDate": "2020-05-18T12:57:55Z", "message": "Avoid transitive closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb6963437077521acda37251ba72ede63d54e42e", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/eb6963437077521acda37251ba72ede63d54e42e", "committedDate": "2020-05-18T12:57:55Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45471bb3f31d739d56e648208bf6ff66bcb6de14", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/45471bb3f31d739d56e648208bf6ff66bcb6de14", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove need for path matrix\n\nSince graph is sparse, this is much better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2425a90e4ffbd90f073e728cc210f7c7d75c0ad", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d2425a90e4ffbd90f073e728cc210f7c7d75c0ad", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove 1 loop + 1 list creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c13951ee46a630af84f599b5209cf4f8b46e912b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c13951ee46a630af84f599b5209cf4f8b46e912b", "committedDate": "2020-05-18T12:57:55Z", "message": "Add set filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21aa2efbbff7993b0b451d7e74783247c273d16c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/21aa2efbbff7993b0b451d7e74783247c273d16c", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove monoid abstraction\n\nUnlikely to change because of tight contract, reduces complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50909dc8345973d472b0b2d2ded7921680274c27", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/50909dc8345973d472b0b2d2ded7921680274c27", "committedDate": "2020-05-18T12:57:55Z", "message": "More tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb52188a3b5f40421d2e9cb624b602eeb46598e3", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/fb52188a3b5f40421d2e9cb624b602eeb46598e3", "committedDate": "2020-05-18T12:57:55Z", "message": "Filter rule applicator by classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad1bf75ea87653385bf776d6af0bb7e06aee074", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/6ad1bf75ea87653385bf776d6af0bb7e06aee074", "committedDate": "2020-05-18T12:57:55Z", "message": "Filter nodes upon construction\n\nThis will remove the need for a freeze phase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1b7cccdbf3caa3309fba1d92115ea6c91130702", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b1b7cccdbf3caa3309fba1d92115ea6c91130702", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove freeze stuff\n\nEverything handled by construction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e1f81eff3ecda781abb0f4b434c4a1876139245", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8e1f81eff3ecda781abb0f4b434c4a1876139245", "committedDate": "2020-05-18T12:57:55Z", "message": "Detect cycles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e041334ffc53cec7e3b0eddd03ae97dc5c77f3", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/17e041334ffc53cec7e3b0eddd03ae97dc5c77f3", "committedDate": "2020-05-18T12:57:55Z", "message": "Preserve leaves"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e69e8bf8e86bc0f878019cf68fcba45ca3322465", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e69e8bf8e86bc0f878019cf68fcba45ca3322465", "committedDate": "2020-05-18T12:57:55Z", "message": "Go back to freeze/unfreeze cycle\n\nThis avoids recursing to invalidate successors all the time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7126fd6c94fc2e15aa957271c24ff22cdff46dac", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7126fd6c94fc2e15aa957271c24ff22cdff46dac", "committedDate": "2020-05-18T12:57:55Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44eb3572f81fe811098f5097f68c592aa35a469c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/44eb3572f81fe811098f5097f68c592aa35a469c", "committedDate": "2020-05-18T12:57:55Z", "message": "Take care of API\n\nRuleTargetSelector is published,\nhowever none of its members are,\nand subclassing it is impossible.\nRest of the types are internal."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54e43507c7e0a118c6ad225be95a2dc9ca7ba26", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e54e43507c7e0a118c6ad225be95a2dc9ca7ba26", "committedDate": "2020-05-18T12:57:55Z", "message": "Fix JS tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73caeff08167bae21b0743c47c4c92ee142d6ef9", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/73caeff08167bae21b0743c47c4c92ee142d6ef9", "committedDate": "2020-05-18T12:57:55Z", "message": "Extract dot graph dumper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862c2f17d86e7c353dcdd32983f88b7cfec1df14", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/862c2f17d86e7c353dcdd32983f88b7cfec1df14", "committedDate": "2020-05-18T12:57:55Z", "message": "Doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68dff545d9d3b9f271eba77d6b8cf99600f46531", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/68dff545d9d3b9f271eba77d6b8cf99600f46531", "committedDate": "2020-05-18T12:57:55Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f6fec88b58375646d222f5756199cd417ddee7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/43f6fec88b58375646d222f5756199cd417ddee7", "committedDate": "2020-05-18T12:57:55Z", "message": "doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "319e65a4a23ba18babff935b5cb4604db8fb5f98", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/319e65a4a23ba18babff935b5cb4604db8fb5f98", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove need for blackhole node\n\nThe lattice does a transitive closure implicitly\ntoo. And we don't need to care about diamond anymore\nThis is NICE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969f7148bf4af675b93329360c08c8370e6da41d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/969f7148bf4af675b93329360c08c8370e6da41d", "committedDate": "2020-05-18T12:57:55Z", "message": "Remove need for independent read/write states"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46bbfda2db312ced7364fb9953d1c676a3695cb4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/46bbfda2db312ced7364fb9953d1c676a3695cb4", "committedDate": "2020-05-18T12:57:55Z", "message": "Generalize output value with a collector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb866bb5cb35480b6315575bb88246522043323f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/bb866bb5cb35480b6315575bb88246522043323f", "committedDate": "2020-05-18T12:57:55Z", "message": "Factorise part of the impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d2c516ed9c689fc1c01eaaa5a5176d2e5faeae", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/62d2c516ed9c689fc1c01eaaa5a5176d2e5faeae", "committedDate": "2020-05-18T12:57:55Z", "message": "Use iterable in topoorder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad3a4db2dded19c00d0be582de1a9be9ad6a179", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7ad3a4db2dded19c00d0be582de1a9be9ad6a179", "committedDate": "2020-05-18T12:57:55Z", "message": "Use regular set instead of PSet internally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa48db748ac9e473f05f17f18944f6fc4198a4b4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/fa48db748ac9e473f05f17f18944f6fc4198a4b4", "committedDate": "2020-05-18T12:57:55Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "480417bde8e863b1b26f3b0de166eb0ed957413d", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/480417bde8e863b1b26f3b0de166eb0ed957413d", "committedDate": "2020-05-18T12:57:55Z", "message": "Document CollectionUtil, add some other useful things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b29e0d76f73ecf8bc7f100367e11210ffa27d8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f1b29e0d76f73ecf8bc7f100367e11210ffa27d8", "committedDate": "2020-05-18T12:57:55Z", "message": "Doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8c4b8a5ad47ee4d229e1c6bd612855e8ca8b6b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/de8c4b8a5ad47ee4d229e1c6bd612855e8ca8b6b", "committedDate": "2020-05-18T12:57:55Z", "message": "Fix rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df92f8ef89b7c94a07d6527c56f2326b7bd38fc", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9df92f8ef89b7c94a07d6527c56f2326b7bd38fc", "committedDate": "2020-05-18T12:57:55Z", "message": "Make PSet collector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f83dce2d3ab2f2d379e18318af00a0e2d40979", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e8f83dce2d3ab2f2d379e18318af00a0e2d40979", "committedDate": "2020-05-18T12:57:56Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "425e537918590a38ce9b0a52581c6d3a9f617e3c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/425e537918590a38ce9b0a52581c6d3a9f617e3c", "committedDate": "2020-05-18T12:57:56Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eccf354861e5e6f326883563430ae155731ff020", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/eccf354861e5e6f326883563430ae155731ff020", "committedDate": "2020-05-18T13:53:44Z", "message": "Replace usages of addRulechainVisit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cae73a8ac2c3a64057641a391b3e70cc26193397", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/cae73a8ac2c3a64057641a391b3e70cc26193397", "committedDate": "2020-05-21T08:51:23Z", "message": "Merge branch '7.0.x' into type-heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634a349678c66d6df7b450e3ae69f40a9146dcd2", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/634a349678c66d6df7b450e3ae69f40a9146dcd2", "committedDate": "2020-05-21T09:03:59Z", "message": "Simplify benchmark keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e4ab8393c9617813348cae6ff66fb38965afb6", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/25e4ab8393c9617813348cae6ff66fb38965afb6", "committedDate": "2020-05-21T12:22:00Z", "message": "Fix compil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47667a0e3533488c21c75ca9347705e00019a599", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/47667a0e3533488c21c75ca9347705e00019a599", "committedDate": "2020-06-14T19:42:38Z", "message": "Merge branch '7.0.x' into type-heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d1358af1d5df406e530ba80843469f1a15e1f7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/25d1358af1d5df406e530ba80843469f1a15e1f7", "committedDate": "2020-06-14T23:11:32Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde2df8925df02386f7c6c55a190a12c28f4c9f0", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/dde2df8925df02386f7c6c55a190a12c28f4c9f0", "committedDate": "2020-06-15T13:53:32Z", "message": "Fix ordering problem\n\nChange behavior of LoosePackageCoupling\n\nIt stores state between visits, should not\nuse the rulechain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/843d645d8735fb3b191f5845a37b1b235e6a33f9", "committedDate": "2020-06-15T15:06:33Z", "message": "Fix a bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDYzNzQ2", "url": "https://github.com/pmd/pmd/pull/2490#pullrequestreview-438063746", "createdAt": "2020-06-26T07:14:15Z", "commit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxNDoxNlrOGpWNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozMTozOFrOGpYbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwODU4NA==", "bodyText": "Just a question: This @NonNull here, is that a constraint, that the Rule API implementer must obey? Meaning - it should be part of the API and not part of impl? Otherwise, we can't rely on it and need a null check anyway....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446008584", "createdAt": "2020-06-26T07:14:16Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/bestpractices/AvoidLogicInTriggerRule.java", "diffHunk": "@@ -6,14 +6,18 @@\n \n import java.util.List;\n \n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n import net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement;\n import net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.rule.RuleTargetSelector;\n \n public class AvoidLogicInTriggerRule extends AbstractApexRule {\n \n-    public AvoidLogicInTriggerRule() {\n-        addRuleChainVisit(ASTUserTrigger.class);\n+    @Override\n+    protected @NonNull RuleTargetSelector buildTargetSelector() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDIzMQ==", "bodyText": "Do we need this? pcollections....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446010231", "createdAt": "2020-06-26T07:18:16Z", "author": {"login": "adangel"}, "path": "pmd-core/pom.xml", "diffHunk": "@@ -149,6 +149,11 @@\n             <artifactId>checker-qual</artifactId>\n             <version>2.5.2</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.pcollections</groupId>\n+            <artifactId>pcollections</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMjg4MQ==", "bodyText": "All this can't be deprecated on master, since there is no way to migrate before. I've added a point to #1139 for the migration documentation.\nWhen we have finished the changes on PMD 7, we can go back and look, whether we introduce e.g. RuleTargetSelector already in PMD 6.x and providing a compatibility API - that would allow us to deprecate this method in PMD 6.x. But - if we do that - only as a last step and maybe only as a small minor release for PMD 6.x after PMD 7 is out (for helping migration).", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446012881", "createdAt": "2020-06-26T07:24:31Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/Rule.java", "diffHunk": "@@ -287,56 +288,28 @@ default boolean dependsOn(AstProcessingStage<?> stage) {\n \n \n     /**\n-     * Gets whether this Rule uses the RuleChain.\n-     *\n-     * @return <code>true</code> if RuleChain is used.\n-     */\n-    boolean isRuleChain();\n-\n-    /**\n-     * Gets the collection of AST node names visited by the Rule on the\n-     * RuleChain.\n-     *\n-     * @return the list of AST node names\n+     * Returns the object that selects the nodes to which this rule applies.\n+     * The selected nodes will be handed to {@link #apply(Node, RuleContext)}.\n      */\n-    List<String> getRuleChainVisits();\n+    RuleTargetSelector getTargetSelector();\n \n-    /**\n-     * Adds an AST node by class to be visited by the Rule on the RuleChain.\n-     *\n-     * @param nodeClass\n-     *            the AST node to add to the RuleChain visit list\n-     */\n-    void addRuleChainVisit(Class<? extends Node> nodeClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNDIzNg==", "bodyText": "I'll @Deprecate and @InternalApi this on master... that's definitively internal and should not be used at all....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446014236", "createdAt": "2020-06-26T07:27:31Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleChain.java", "diffHunk": "@@ -1,85 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import net.sourceforge.pmd.lang.Language;\n-import net.sourceforge.pmd.lang.ast.Node;\n-import net.sourceforge.pmd.lang.rule.RuleChainVisitor;\n-\n-/**\n- * The RuleChain is a means by which Rules can participate in a uniform\n- * visitation of the AST, and not need perform their own independent visitation.\n- * The RuleChain exists as a means to improve the speed of PMD when there are\n- * many Rules.\n- */\n-public class RuleChain {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNjQwMQ==", "bodyText": "That's btw something we need to think about: The comment probably was the intention, but was never implemented this way - all the rules are put together into the same list regardless of their language....\nSo, how do we deal with a ruleset that contains rules of multiple languages, etc.... (in terms of internal processing and expected unsurprising behavior of PMD).", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446016401", "createdAt": "2020-06-26T07:32:24Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "diffHunk": "@@ -7,68 +7,57 @@\n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n-import net.sourceforge.pmd.lang.Language;\n+import net.sourceforge.pmd.benchmark.TimeTracker;\n+import net.sourceforge.pmd.benchmark.TimedOperation;\n+import net.sourceforge.pmd.benchmark.TimedOperationCategory;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.rule.internal.RuleApplicator;\n \n /**\n  * Grouping of Rules per Language in a RuleSet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMTAwMw==", "bodyText": "I assume, these classrulechainvisits are only there for compatibility, because not all rules are migrated yet?\nI'd expect the default implementation just to be return RuleTargetSelector.forRootOnly() eventually.", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446021003", "createdAt": "2020-06-26T07:42:33Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRule.java", "diffHunk": "@@ -227,36 +232,42 @@ public ParserOptions getParserOptions() {\n         return new ParserOptions();\n     }\n \n-    @Override\n-    public boolean isRuleChain() {\n-        return !getRuleChainVisits().isEmpty();\n-    }\n \n-    @Override\n-    public List<String> getRuleChainVisits() {\n-        return ruleChainVisits;\n+    private Set<Class<? extends Node>> getClassRuleChainVisits() {\n+        if (classRuleChainVisits.isEmpty() && ruleChainVisits.isEmpty()) {\n+            return Collections.singleton(RootNode.class);\n+        }\n+        return classRuleChainVisits;\n     }\n \n-    @Override\n-    public void addRuleChainVisit(Class<? extends Node> nodeClass) {\n-        // FIXME : These assume the implementation of getXPathNodeName() for all nodes\u2026\n-        final String simpleName = nodeClass.getSimpleName();\n \n-        if (simpleName.startsWith(\"AST\")) { // JavaCC node\n-            // Classes under the Comment hierarchy and stuff need to be refactored in the Java AST\n-            addRuleChainVisit(nodeClass.getSimpleName().substring(\"AST\".length()));\n-        } else if (nodeClass.getSimpleName().endsWith(\"Context\")) { // Antlr node\n-            addRuleChainVisit(nodeClass.getSimpleName().substring(0, simpleName.length() - \"Context\".length()));\n-        } else {\n-            throw new IllegalArgumentException(\"Node class does not start with 'AST' prefix nor ends with 'Context' suffix: \" + nodeClass);\n-        }\n+    /**\n+     * @deprecated Override {@link #buildTargetSelector()}, this is\n+     *     provided for legacy compatibility\n+     */\n+    @Deprecated\n+    protected void addRuleChainVisit(Class<? extends Node> nodeClass) {\n+        classRuleChainVisits.add(nodeClass);\n     }\n \n     @Override\n-    public void addRuleChainVisit(String astNodeName) {\n-        if (!ruleChainVisits.contains(astNodeName)) {\n-            ruleChainVisits.add(astNodeName);\n+    public final RuleTargetSelector getTargetSelector() {\n+        if (myStrategy == null) {\n+            myStrategy = buildTargetSelector();\n         }\n+        return myStrategy;\n+    }\n+\n+    /**\n+     * Create the targeting strategy for this rule. Please override\n+     * this instead of using {@link #addRuleChainVisit(Class)}.\n+     * Use the factory methods of {@link RuleTargetSelector}.\n+     */\n+    @NonNull\n+    protected RuleTargetSelector buildTargetSelector() {\n+        Set<Class<? extends Node>> crvs = getClassRuleChainVisits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjIxMw==", "bodyText": "for consistency, shouldn't we simply copy the reference to myStrategy like all the other fields?", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446022213", "createdAt": "2020-06-26T07:45:04Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRule.java", "diffHunk": "@@ -70,17 +78,14 @@ public void deepCopyValuesTo(AbstractRule otherRule) {\n         otherRule.priority = priority;\n         otherRule.propertyDescriptors = new ArrayList<>(getPropertyDescriptors());\n         otherRule.propertyValuesByDescriptor = copyPropertyValues();\n-        otherRule.ruleChainVisits = copyRuleChainVisits();\n+        otherRule.ruleChainVisits = new LinkedHashSet<>(ruleChainVisits);\n+        otherRule.classRuleChainVisits = new LinkedHashSet<>(classRuleChainVisits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNDA0OQ==", "bodyText": "I'll @Deprecate and @InternalApi it on master....\nNote: there are quite some usages in the PMD Eclipse plugin. This is due to the unclear API on how to call PMD programmatically, e.g. how to provide programmatically the rulesets to be used for analyzing....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446024049", "createdAt": "2020-06-26T07:49:02Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "diffHunk": "@@ -7,68 +7,57 @@\n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n-import net.sourceforge.pmd.lang.Language;\n+import net.sourceforge.pmd.benchmark.TimeTracker;\n+import net.sourceforge.pmd.benchmark.TimedOperation;\n+import net.sourceforge.pmd.benchmark.TimedOperationCategory;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.rule.internal.RuleApplicator;\n \n /**\n  * Grouping of Rules per Language in a RuleSet.\n  *\n  * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be\n  */\n public class RuleSets {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNjYzNA==", "bodyText": "This looks a bit weird... RuleTargetSelector is API, but the supertype is internal.... effectively, this makes the internal supertype API as well\nOk, the class is abstract and the constructor is hidden - so no one can implement their own RuleTargetSelector...\nRight now, RuleTargetSelector serves as a utility class, that provides defined (hidden) implementations of itself...\nNot sure yet, what to do here, but it still looks weird to me....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446026634", "createdAt": "2020-06-26T07:54:05Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/RuleTargetSelector.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.rule;\n+\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import net.sourceforge.pmd.Rule;\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.lang.rule.internal.TargetSelectorInternal;\n+import net.sourceforge.pmd.lang.rule.internal.TreeIndex;\n+import net.sourceforge.pmd.util.CollectionUtil;\n+\n+/**\n+ * A strategy for selecting nodes that will be targeted by a rule.\n+ *\n+ * @see Rule#getTargetSelector()\n+ */\n+public abstract class RuleTargetSelector extends TargetSelectorInternal {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQ0MA==", "bodyText": "Just a question: Do we really need to be that generic? We are dealing with AST Nodes, don't we?\nThat's btw one example for #2611 - it will be very difficult to understand this class without looking at many more classes in parallel to understand, what's going on....\nMaybe the question in a different way: Do we really implement it that abstract? We only need it for PMD purposes, not for general purpose....", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446032440", "createdAt": "2020-06-26T08:06:31Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/internal/LatticeRelation.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.rule.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static net.sourceforge.pmd.util.CollectionUtil.any;\n+import static net.sourceforge.pmd.util.CollectionUtil.finish;\n+import static net.sourceforge.pmd.util.CollectionUtil.map;\n+import static net.sourceforge.pmd.util.CollectionUtil.toMutableList;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collector;\n+\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.internal.util.AssertionUtil;\n+import net.sourceforge.pmd.lang.rule.internal.GraphUtils.DotColor;\n+\n+/**\n+ * Indexes data of type {@code <V>} with keys of type {@code <K>}, where", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjg2OA==", "bodyText": "Ok, as far as I understand, that is your solution for dealing with Abstract node types.... right?", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446032868", "createdAt": "2020-06-26T08:07:27Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/internal/LatticeRelation.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.rule.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static net.sourceforge.pmd.util.CollectionUtil.any;\n+import static net.sourceforge.pmd.util.CollectionUtil.finish;\n+import static net.sourceforge.pmd.util.CollectionUtil.map;\n+import static net.sourceforge.pmd.util.CollectionUtil.toMutableList;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collector;\n+\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.internal.util.AssertionUtil;\n+import net.sourceforge.pmd.lang.rule.internal.GraphUtils.DotColor;\n+\n+/**\n+ * Indexes data of type {@code <V>} with keys of type {@code <K>}, where", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQ0MA=="}, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNzU0Nw==", "bodyText": "Another example of overly used generics... What is T, U, A ,C?... Maybe I'm just not that into streams...", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446037547", "createdAt": "2020-06-26T08:17:05Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/CollectionUtil.java", "diffHunk": "@@ -532,6 +554,94 @@ public static boolean isNotEmpty(Object[] items) {\n         return Collections.unmodifiableList(res);\n     }\n \n+    /**\n+     * Map each element of the given iterable with the given function,\n+     * and accumulates it into the collector.\n+     */\n+    public static <T, U, A, C> C map(Collector<? super U, A, ? extends C> collector,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NDk5Mg==", "bodyText": "Maybe we can get rid of this class eventually?", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446044992", "createdAt": "2020-06-26T08:31:38Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJavaRulechainRule.java", "diffHunk": "@@ -18,32 +19,25 @@\n  */\n public abstract class AbstractJavaRulechainRule extends AbstractJavaRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4793, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}