{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzc3MjI2", "number": 2830, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyNzoyNFrOEuGVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQwNzozNDo0MFrOFyXAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzczNjk5OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyNzoyNFrOHiSb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoxOTozM1rOHn3Ycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNTY4OQ==", "bodyText": "The metadata of this rule needs to be updated (since, message, description, example)", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505715689", "createdAt": "2020-10-15T17:27:24Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -35,6 +35,32 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"5.5.0\"\n+          message=\"Deeply nested if..then statements are hard to read\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzg5MA==", "bodyText": "Done", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563890", "createdAt": "2020-10-25T08:19:33Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -35,6 +35,32 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"5.5.0\"\n+          message=\"Deeply nested if..then statements are hard to read\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNTY4OQ=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzczOTQ1OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyODoxNVrOHiSdog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyMDowMFrOHn3Ykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA==", "bodyText": "This descriptor is unused, right?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505716130", "createdAt": "2020-10-15T17:28:15Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MzkyMw==", "bodyText": "Yes it was so have removed", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563923", "createdAt": "2020-10-25T08:20:00Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc1MzY1OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzozMjoxOVrOHiSnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyMDoxM1rOHn3YrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw==", "bodyText": "There is a single RootNode per tree. You can just write node.getRoot()", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505718537", "createdAt": "2020-10-15T17:32:19Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk0OQ==", "bodyText": "Changed", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563949", "createdAt": "2020-10-25T08:20:13Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc2ODgxOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzozNjowMVrOHiSwrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyMDoyOVrOHn3YxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg==", "bodyText": "I think you should encapsulate that into a method like root.getGlobalIssues()", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505721006", "createdAt": "2020-10-15T17:36:01Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n+        if (!parents.isEmpty()) {\n+            // This first parent is outermost\n+            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            return root.getMultifileAnalysis().getFileIssues(root.getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk3Mw==", "bodyText": "Done", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563973", "createdAt": "2020-10-25T08:20:29Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n+        if (!parents.isEmpty()) {\n+            // This first parent is outermost\n+            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            return root.getMultifileAnalysis().getFileIssues(root.getFileName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc3NzkxOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzozODo0N1rOHiS20Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyMTo1MFrOHn3ZUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw==", "bodyText": "Please return an unmodifiable List here (or even an Iterable<Issue>). We rarely use arrays in the codebase. You can write Collections.unmodifiableList(Arrays.asList(...))", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722577", "createdAt": "2020-10-15T17:38:47Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDExNQ==", "bodyText": "Done (in ASTApexFile.getGlobalIssues() now)", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564115", "createdAt": "2020-10-25T08:21:50Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc3OTM3OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzozOToxMlrOHiS3xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyNzoyNVrOHn3beg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA==", "bodyText": "Is there a constant somewhere we could use instead of this hardcoded string?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722820", "createdAt": "2020-10-15T17:39:12Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY2Ng==", "bodyText": "This is a 'case object' in Scala, I have swapped to use 'UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category()' but it's not very readable, I will introduce a proper Java enum for this in next release.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564666", "createdAt": "2020-10-25T08:27:25Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc4NDY5OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0MDozNFrOHiS7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODoyNzozNlrOHn3bhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA==", "bodyText": "Please make this class @Experimental", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505723670", "createdAt": "2020-10-15T17:40:34Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY3Ng==", "bodyText": "Done", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564676", "createdAt": "2020-10-25T08:27:36Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTc3NjY4OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0Nzo1NlrOHi6xdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODozMTo1MVrOHn3dOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA==", "bodyText": "What were the specific problems you got?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506376564", "createdAt": "2020-10-16T12:47:56Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "diffHunk": "@@ -7,16 +7,22 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n import net.sourceforge.pmd.lang.ast.RootNode;\n import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n \n import apex.jorje.semantic.ast.AstNode;\n import apex.jorje.services.Version;\n \n+@SuppressWarnings(\"PMD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTExMw==", "bodyText": "I had a few issues getting IDE setup so I could understand why mvn build was failing, this was just left over from that. I have removed.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565113", "createdAt": "2020-10-25T08:31:51Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "diffHunk": "@@ -7,16 +7,22 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n import net.sourceforge.pmd.lang.ast.RootNode;\n import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n \n import apex.jorje.semantic.ast.AstNode;\n import apex.jorje.services.Version;\n \n+@SuppressWarnings(\"PMD\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTgzNTU0OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1ODoyMlrOHi7aAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODozMjoxMFrOHn3dWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng==", "bodyText": "We can use in PMD 7 java8 features, e.g.\ngetIssues(node).stream()\n    .filter(issue -> \"Unused\".equals(issue.diagnostic().category().value())\n    .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n    .filter(issue -> issue.diagnostic().location().endLine() <= node.getEndLine())\n    .forEach(issue -> addViolation(data, node));", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506386946", "createdAt": "2020-10-16T12:58:22Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTE0NA==", "bodyText": "Much nicer, have updated.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565144", "createdAt": "2020-10-25T08:32:10Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDkwMjkxOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwODoyMTo0NlrOHjZskg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwOToxOTozNlrOHjkUNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA==", "bodyText": "This option is language dependent, I agree with @oowekyala that this would be a fit for language properties.\nSo that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.\nFor me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?\nOk, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506883218", "createdAt": "2020-10-17T08:21:46Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "diffHunk": "@@ -75,6 +75,10 @@\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n+    @Parameter(names = \"-multifileanalysisdirectory\",\n+            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NzIwNg==", "bodyText": "Ok, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\n\nYes, it reads the directories from sfdx-project.json to work out what to include in the analysis. The handling of this used to be built into ApexLink but I recently split into a separate library. There is a bit more to the format than being multiple directories, it's really more like multiple modules with either implicit or explicit dependencies between them. Treating them as modules matters in a multi-file analysis because there are rules around visibility and duplicates etc that you can't handle if you think of them as just the sum of a set of directories. There is also .forceignore which is similar in nature to .gitignore, if present its in the same directory as sfdx-project.json.\nThe sfdx-project.json also contains a namespace for the project. It's critical this is available for multi-file work as it enables the analysis to understand package boundaries. For single file analysis I would imagine a few rules might find it also handy if it could be made available.\n\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).\n\nHaving \"-dir\" understand sfdx-project.json makes sense to me as a general approach but likely you want to delegate resolving \"-dir\" to a set of class files for analysis to a Salesforce specific handler that works alongside the existing handling.\nThe library I have for this might be a bit overweight for what PMD needs as ApexLink is interested in other project files and they can have some quite unusual handling behaviours. The part I have that is probably most valuable to PMD is the forceignore handling which should be straight forward to port to Java from its current Scala implementation if that made sense.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r507057206", "createdAt": "2020-10-18T09:19:36Z", "author": {"login": "nawforce"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "diffHunk": "@@ -75,6 +75,10 @@\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n+    @Parameter(names = \"-multifileanalysisdirectory\",\n+            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA=="}, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MjU2NDExOnYy", "diffSide": "RIGHT", "path": "pmd-apex/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowNDoyNFrOIoVtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowNDoyNFrOIoVtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE2OTU0Ng==", "bodyText": "Note: there is already 1.2.2 available: https://repo1.maven.org/maven2/com/github/nawforce/apexlink/", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579169546", "createdAt": "2021-02-19T13:04:24Z", "author": {"login": "adangel"}, "path": "pmd-apex/pom.xml", "diffHunk": "@@ -54,6 +54,13 @@\n             <type>pom</type>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.github.nawforce</groupId>\n+            <artifactId>apexlink</artifactId>\n+            <version>1.1.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MjU4MDUwOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowODoyOVrOIoV2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowODoyOVrOIoV2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE3MTk0Nw==", "bodyText": "If I understand this correctly, then not only private unused methods are found, but also public methods, that are not in use by any other class. That's maybe worth mentioning here in the documentation.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579171947", "createdAt": "2021-02-19T13:08:29Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -408,6 +408,37 @@ public class Person {\n     Date birthDate;\n     BodyMeasurements measurements;\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+            Avoid having unused methods since they make understanding and maintaining code harder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MjU4MzM0OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowOToxNFrOIoV4Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowOToxNFrOIoV4Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE3MjM3NA==", "bodyText": "Let's keep the alphabetical order of the rules in the file and move this rule declaration up.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579172374", "createdAt": "2021-02-19T13:09:14Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -408,6 +408,37 @@ public class Person {\n     Date birthDate;\n     BodyMeasurements measurements;\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgzNTQ0ODk2OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wM1QxODoxMjoxMVrOJClo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNFQyMjoxMToxNFrOJJMWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA==", "bodyText": "@nawforce Hi, as a last step before merging this, could you document as thoroughly as possible what the project structure needs to look like for this to work properly? From this thread I could gather, that\n\nThe project needs to use the SDFX format (would be nice to include this link)\nThe -dir option needs to point to a subset of the source tree listed in the sdfx-project.json, otherwise we would just be pointing to some unrelated sources, but we don't actually check this and treat this as an error (yet)\nGiven a source tree in the correct format and a sdfx-project.json, ApexLink will generate the missing metadata if need be, and everything should run smoothly in one step (no manual pre-generation or so).\n\nIs this correct?\nI think the goal this doc should achieve, is that even an unexperienced developer, who doesn't know ApexLink, can get a pretty good idea of how to configure the rule, and what ApexLink will do to their files. I don't feel like I know enough about your tool or Apex in general to write this up myself.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r606693618", "createdAt": "2021-04-03T18:12:11Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzMyOTk1MA==", "bodyText": "Sure, I will take a look at it tomorrow. Your description on this is pretty accurate for the common case but we may want to think about directing them to a page for more complex cases. A bit of feedback I have been getting is that when devs are using 2GP to modularise an application they have more complex needs than I am really allowing for currently so we need to be clear about this.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r607329950", "createdAt": "2021-04-05T20:58:28Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODE3MjYzNA==", "bodyText": "@oowekyala I was just taking a look at latest on the branch and looks like PMD_APEX_ROOTDIRECTORY is not getting picked up as a property. It runs through the code but the getProperty(MULTIFILE_DIRECTORY) defaults to \"\" which results in nothing being found. Don't think I understand enough about how that should have worked to be able to spot where it's failing.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r608172634", "createdAt": "2021-04-06T20:52:45Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzNDQxNQ==", "bodyText": "I think c314ba8 should fix the problem. I can add a test tomorrow", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r608234415", "createdAt": "2021-04-06T23:06:25Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA0MjM1Ng==", "bodyText": "That's fixed it for me, thanks very much.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610042356", "createdAt": "2021-04-08T19:42:26Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA5NjUxMg==", "bodyText": "I have extended the description with a couple of extra sections. The first just gives some background on what is needed in PMD_APEX_ROOTDIRECTORY for things to work, while the second describes how to workaround errors you might get if building over other packages.\nI added a reference in to turning on debug logging, not sure that is really what is needed here. What usually happens when the config is  wrong is that you get false positive errors reported against the source files but we are ignoring all but the Unused diagnostics at the moment. Maybe it would be better to direct any errors recorded against source files to the debug log automatically?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610096512", "createdAt": "2021-04-08T20:54:35Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDU5MTYxMA==", "bodyText": "I have extended the description with a couple of extra sections. The first just gives some background on what is needed in PMD_APEX_ROOTDIRECTORY for things to work, while the second describes how to workaround errors you might get if building over other packages.\n\nThanks, this looks great! I managed setting it up after stumbling on https://github.com/forcedotcom/sfdx-simple. The source format page linked doesn't show any examples of what the project file should look like unfortunately. (but, I'm an apex noob)\n\nI added a reference in to turning on debug logging, not sure that is really what is needed here. What usually happens when the config is wrong is that you get false positive errors reported against the source files but we are ignoring all but the Unused diagnostics at the moment. Maybe it would be better to direct any errors recorded against source files to the debug log automatically?\n\nWhat kind of false positive errors? Are they exceptions? In which case I think they should be logged as severe, so that the user knows what happens.\nNow from what I've seen while trying it out, the errors are duplicated, one for each file, and the SEVERE log channel would get flooded... I'll push a fix", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610591610", "createdAt": "2021-04-09T12:37:44Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTIzNzk1Nw==", "bodyText": "Typically the errors are for missing types due to not setting up sfdx-project.json to include everything needed. There are a couple of reasons this happens with Salesforce projects more than it should but I will save that for another day. Logically I am thinking in a multi-file analysis these types of errors are quite similar to the current handling of say a Java syntax error and some may even be syntax errors.\nIt looks like that would normally be handled by throwing a ParseException which is then caught by the SourceCodeProcessor. Throwing multiple errors this way sounds like a bad idea but I am wondering if we log the errors and then throw a summary exception indicating problems were found might that be the right choice?\nThe API I have at the moment is not very useful for this in that it produces a String or JSON output of all errors/warnings in the Org. Would be better for me to add one to just grab the first 'n' errors so if config is badly wrong we won't spam them too much.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r611237957", "createdAt": "2021-04-11T19:54:15Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTU4MTc4NQ==", "bodyText": "Ok I see\n\nThrowing multiple errors this way sounds like a bad idea but I am wondering if we log the errors and then throw a summary exception indicating problems were found might that be the right choice?\n\nThis sounds good. Actually pmd 7 will have a concept of \"semantic errors\", which are reported during Parser.parse, but may be recovered from. For now the code is only in pmd-java and has not yet made it into pmd core, but here's a draft of the API. So we can report these as errors and still continue semantic analysis on the file, to collect more errors if needed, and report them in bulk later. And currently my stance is that semantic errors would prevent rules from being run later.\nFor now I would keep it as is and add a fixme comment to change the apexlink logger implementation that's in ApexMultifileAnalysis to forward to a SemanticErrorReporter when that's moved to pmd core.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r611581785", "createdAt": "2021-04-12T12:25:33Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzUyODU1OA==", "bodyText": "Ok, I will sort the fixme and see if I can resolve the other couple of issues outstanding", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613528558", "createdAt": "2021-04-14T19:25:40Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxOTMyNA==", "bodyText": "Added FIXME to comment on this.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613619324", "createdAt": "2021-04-14T22:11:14Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA=="}, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg1NzgxNDk3OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOFQxODoyNjoyOVrOJFudiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNFQyMjoxMDo0MVrOJJMVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw==", "bodyText": "Should this be LOG.error?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r609983883", "createdAt": "2021-04-08T18:26:29Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA1NzQxMg==", "bodyText": "At the moment the error & info levels are unused, there is interesting debug though that can be used to help diagnose. Does not look like there is a LOG.error but perhaps LOG.severe would be appropriate?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610057412", "createdAt": "2021-04-08T20:03:17Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, "originalCommit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDU0ODY1NQ==", "bodyText": "Yes LOG.severe is used for recoverable errors", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610548655", "createdAt": "2021-04-09T11:22:39Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, "originalCommit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxOTA2OQ==", "bodyText": "I changed this.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613619069", "createdAt": "2021-04-14T22:10:41Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, "originalCommit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg2MjAzMTQ4OnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQxMjo1Mjo0NFrOJGUIgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNFQyMjoxMDowN1rOJJMUmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYwMTA4OA==", "bodyText": "Maybe the last thing I would change is to name this rule UnusedMethod. I'm not a fan of rule names which start with a verb... I think the passive is more neutral. Like \"hey, I found an unused method (but of course you already know that you should avoid them, so I'm not commanding you)\"\nBesides, the corresponding Java rules are also named without Avoid, and consistency across languages is desirable I think", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610601088", "createdAt": "2021-04-09T12:52:44Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,64 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU0ODQyNQ==", "bodyText": "@nawforce did you see this?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613548425", "createdAt": "2021-04-14T19:59:21Z", "author": {"login": "rsoesemann"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,64 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYwMTA4OA=="}, "originalCommit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxODg0Mg==", "bodyText": "Yep thx, just pushed an update that changes name.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613618842", "createdAt": "2021-04-14T22:10:07Z", "author": {"login": "nawforce"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,64 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYwMTA4OA=="}, "originalCommit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg4MzUwMTAxOnYy", "diffSide": "RIGHT", "path": "pmd-apex/src/main/resources/category/apex/design.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQwNzozNDo0MFrOJJY-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQxNzoyNjo0N1rOJJzgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzgyNjA4MQ==", "bodyText": "I think we should surround this code snippet with \"```json\" ... \"```\" to have it rendered nicely in the rule docs.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613826081", "createdAt": "2021-04-15T07:34:40Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,73 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"UnusedMethod\"\n+          language=\"apex\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.UnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#unusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+\n+For an accurate analysis it is important that the `PMD_APEX_ROOTDIRECTORY` contains a complete set of metadata that\n+may be referenced from the Apex source code, such as Custom Objects, Visualforce Pages, Flows and Labels. The\n+`PMD_APEX_ROOTDIRECTORY` directory must contain a 'sfdx-project.json', but metadata may be either in the\n+[SFDX Source format](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm)\n+or the older MDAPI format. The 'packageDirectories' entries in 'sfdx-project.json' are used to determine which\n+directories to search for metadata, if a .forceignore file is present it will be honoured.\n+\n+If the Apex code references external packages via namespace(s) you should declare these in your 'sfdx-project.json'\n+file using the 'plugins' syntax below to avoid errors:\n+<![CDATA[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDI2MDkxOA==", "bodyText": "I can fix this when I merge... probably tonight", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r614260918", "createdAt": "2021-04-15T17:26:47Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,73 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"UnusedMethod\"\n+          language=\"apex\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.UnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#unusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+\n+For an accurate analysis it is important that the `PMD_APEX_ROOTDIRECTORY` contains a complete set of metadata that\n+may be referenced from the Apex source code, such as Custom Objects, Visualforce Pages, Flows and Labels. The\n+`PMD_APEX_ROOTDIRECTORY` directory must contain a 'sfdx-project.json', but metadata may be either in the\n+[SFDX Source format](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm)\n+or the older MDAPI format. The 'packageDirectories' entries in 'sfdx-project.json' are used to determine which\n+directories to search for metadata, if a .forceignore file is present it will be honoured.\n+\n+If the Apex code references external packages via namespace(s) you should declare these in your 'sfdx-project.json'\n+file using the 'plugins' syntax below to avoid errors:\n+<![CDATA[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzgyNjA4MQ=="}, "originalCommit": {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 175, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}