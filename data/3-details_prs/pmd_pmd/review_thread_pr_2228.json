{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzkxNjM3", "number": 2228, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODo0MDoxOVrODZD51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODo0MDoxOVrODZD51g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjA0OTUwOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/table/internal/ImportOnDemandSymbolTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODo0MDoyMFrOFfQDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNToxMTozNlrOFf9h0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMzEzNg==", "bodyText": "Maybe throw a IllegalArgumentException like in SingleImportSymbolTable?", "url": "https://github.com/pmd/pmd/pull/2228#discussion_r368313136", "createdAt": "2020-01-19T18:40:20Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/table/internal/ImportOnDemandSymbolTable.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.symbols.table.internal;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JMethodSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable;\n+import net.sourceforge.pmd.lang.java.symbols.table.ResolveResult;\n+import net.sourceforge.pmd.lang.java.symbols.table.internal.ResolveResultImpl.ClassResolveResult;\n+\n+\n+/**\n+ * Scope for imports on demand. Imports-on-demand never shadow anything, so this scope, if it exists,\n+ * is the top-level non-empty scope. All scope stacks have {@link EmptySymbolTable} as bottom though, for\n+ * implementation simplicity.\n+ *\n+ * @since 7.0.0\n+ */\n+final class ImportOnDemandSymbolTable extends AbstractImportSymbolTable {\n+\n+    /** Stores the names of packages and types for which all their types are imported. */\n+    private final Map<String, ASTImportDeclaration> importedPackagesAndTypes = new HashMap<>();\n+\n+\n+    /**\n+     * @param importsOnDemand List of import-on-demand statements, mustn't be single imports!\n+     */\n+    ImportOnDemandSymbolTable(JSymbolTable parent, SymbolTableHelper helper, List<ASTImportDeclaration> importsOnDemand) {\n+        super(parent, helper);\n+\n+        for (ASTImportDeclaration anImport : importsOnDemand) {\n+            assert anImport.isImportOnDemand() : \"Expected import on demand: \" + anImport;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "842e871b0e24f2bc71bfedba17edde55e6bc4605"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1ODI1OA==", "bodyText": "Maybe the other one should be an assert instead... In fact maybe we need to rationalize some guidelines about this? I tend to use assert statements for simple sanity checks, that should fail during testing if ever. For example here, the dataflow leading to this constructor is simple, entirely known, and doesn't allow anything else to happen. OTOH I use IllegalArgumentException for visible API, where a method is expected by a caller to check its arguments (and we can't know the whole dataflow leading to it, because the method is somehow public). Meaning, an assert tests the sanity of the upstream data flow, whereas an IllegalArgumentException means it's expected that someday someone will throw something illegal at it. Not sure this makes complete sense..", "url": "https://github.com/pmd/pmd/pull/2228#discussion_r369058258", "createdAt": "2020-01-21T15:11:36Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/table/internal/ImportOnDemandSymbolTable.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.symbols.table.internal;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JMethodSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable;\n+import net.sourceforge.pmd.lang.java.symbols.table.ResolveResult;\n+import net.sourceforge.pmd.lang.java.symbols.table.internal.ResolveResultImpl.ClassResolveResult;\n+\n+\n+/**\n+ * Scope for imports on demand. Imports-on-demand never shadow anything, so this scope, if it exists,\n+ * is the top-level non-empty scope. All scope stacks have {@link EmptySymbolTable} as bottom though, for\n+ * implementation simplicity.\n+ *\n+ * @since 7.0.0\n+ */\n+final class ImportOnDemandSymbolTable extends AbstractImportSymbolTable {\n+\n+    /** Stores the names of packages and types for which all their types are imported. */\n+    private final Map<String, ASTImportDeclaration> importedPackagesAndTypes = new HashMap<>();\n+\n+\n+    /**\n+     * @param importsOnDemand List of import-on-demand statements, mustn't be single imports!\n+     */\n+    ImportOnDemandSymbolTable(JSymbolTable parent, SymbolTableHelper helper, List<ASTImportDeclaration> importsOnDemand) {\n+        super(parent, helper);\n+\n+        for (ASTImportDeclaration anImport : importsOnDemand) {\n+            assert anImport.isImportOnDemand() : \"Expected import on demand: \" + anImport;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMzEzNg=="}, "originalCommit": {"oid": "842e871b0e24f2bc71bfedba17edde55e6bc4605"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 458, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}