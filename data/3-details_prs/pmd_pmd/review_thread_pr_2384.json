{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODg5NjUw", "number": 2384, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNDowMVrODsLWvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNjozNlrODsLaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQ5OTgwOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/resources/category/java/design.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNDowMVrOF88wEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDowMjoxNVrOF9IV-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDIyNA==", "bodyText": "This actually fixes some false-negative when nested classes are in use...\nSee e.g. https://chunk.io/pmd/f0f07b25b93b453e993fa6b0d71b44e6/diff/checkstyle/index.html#A1", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399454224", "createdAt": "2020-03-27T18:14:01Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/resources/category/java/design.xml", "diffHunk": "@@ -28,7 +28,7 @@ protected constructor in order to prevent instantiation than make the class misl\n <![CDATA[\n //ClassOrInterfaceDeclaration\n     [@Abstract = 'true']\n-    [count(//MethodDeclaration) + count(//ConstructorDeclaration) = 0]\n+    [count(.//MethodDeclaration) + count(.//ConstructorDeclaration) = 0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NDE1Mg==", "bodyText": "This still counts methods of classes nested inside the class under scrutiny. I'll fix this and add those as test cases", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399644152", "createdAt": "2020-03-28T10:02:15Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/resources/category/java/design.xml", "diffHunk": "@@ -28,7 +28,7 @@ protected constructor in order to prevent instantiation than make the class misl\n <![CDATA[\n //ClassOrInterfaceDeclaration\n     [@Abstract = 'true']\n-    [count(//MethodDeclaration) + count(//ConstructorDeclaration) = 0]\n+    [count(.//MethodDeclaration) + count(.//ConstructorDeclaration) = 0]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDIyNA=="}, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjUwODMwOnYy", "diffSide": "LEFT", "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNjozNlrOF881cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTozNDozOFrOF9StOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTYwMQ==", "bodyText": "These changes now create a new false-negative, see https://chunk.io/pmd/f0f07b25b93b453e993fa6b0d71b44e6/diff/spring-framework/index.html#A1\n... not sure why...", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399455601", "createdAt": "2020-03-27T18:16:36Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "diffHunk": "@@ -1513,20 +1523,25 @@ by more specific methods, like assertSame, assertNotSame.\n                 <value>\n <![CDATA[\n //PrimaryExpression[\n-    PrimaryPrefix/Name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTI2NA==", "bodyText": "Might be because of typeresolution:\nBefore: ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeIs('junit.framework.TestCase')]]\nAfter: ancestor::ClassOrInterfaceDeclaration[pmd-java:typeIs('junit.framework.TestCase')]\nMaybe we should keep it like this?\nancestor::ClassOrInterfaceDeclaration[ExtendsList/ClassOrInterfaceType[pmd-java:typeIs('junit.framework.TestCase')]]\nIt would only affect if typeresolution doesn't have access to the whole auxclasspath.\nHm... that's not actually the issue here: Before, we found the @Test annotation on the main class in this file and assumed, also the other classes are tests. This is probably not correct, since ExposedInvocationTestBean or TestBean is not a test case....", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399459264", "createdAt": "2020-03-27T18:23:10Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "diffHunk": "@@ -1513,20 +1523,25 @@ by more specific methods, like assertSame, assertNotSame.\n                 <value>\n <![CDATA[\n //PrimaryExpression[\n-    PrimaryPrefix/Name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTYwMQ=="}, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NTY1Nw==", "bodyText": "The thing is this rule is not valid only in test classes. It applies to any usage of Assert.assertTrue. Type resolution doesn't give access to which method is invoked, so we try to see if we're in a test class by finding an @Test, to see if a call to a method named assertTrue is really a junit call, instead of a user defined function. This is just a heuristic. Maybe we should change it to check if there are imports for org.junit. (note that in 7.0 we will have an API to get the invoked method and won't need a shady workaround)", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399645657", "createdAt": "2020-03-28T10:19:42Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "diffHunk": "@@ -1513,20 +1523,25 @@ by more specific methods, like assertSame, assertNotSame.\n                 <value>\n <![CDATA[\n //PrimaryExpression[\n-    PrimaryPrefix/Name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTYwMQ=="}, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxMzk0Nw==", "bodyText": "Most rules in this area check, that they are analyzing a TestCase/@Test annotated method. But there is one exception: UseAssertTrueInsteadOfAssertEquals does not do this check like the others...\nMaybe it makes sense to don't restrict the rules (like UseAssertSameInsteadOfAssertTrue) to test classes only? That would definitively solve the performance problems with these rules ...", "url": "https://github.com/pmd/pmd/pull/2384#discussion_r399813947", "createdAt": "2020-03-29T15:34:38Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "diffHunk": "@@ -1513,20 +1523,25 @@ by more specific methods, like assertSame, assertNotSame.\n                 <value>\n <![CDATA[\n //PrimaryExpression[\n-    PrimaryPrefix/Name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTYwMQ=="}, "originalCommit": {"oid": "25ef59d5a72dbc6a0c42491131ad891472361e0e"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 349, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}