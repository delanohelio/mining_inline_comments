{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTUxNjky", "number": 2558, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxMzowMVrOEDPzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjozMTowM1rOEDP4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQwMjAzOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxMzowMVrOGgKbJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxMzowMVrOGgKbJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3ODQwNQ==", "bodyText": "Please don't use the toString() method for any logic. The toString() method is there for debugging purposes and in most cases the format is not an API and can change without any notice. Relying on the format of toString() makes java programs brittle. Also, in that case, if we decided to refactor the classes and rename/move ASTPrimaryPrefix, then we won't get here a compile time error but only a runtime error during execution - which is too late.\nWhat you want to achieve here is, to test, whether the parent (or grandparent or greatgrandparent) node is a instance of a specific type:\nif (node.getParent() instanceof ASTPrimaryPrefix\n    && node.getNthParent(2) instanceof ASTPrimaryExpression) {\n    return !(node.getNthParent(3) instanceof ASTExpression);\n}\nreturn false;", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436378405", "createdAt": "2020-06-07T16:13:01Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsRule.java", "diffHunk": "@@ -14,24 +14,77 @@\n import net.sourceforge.pmd.lang.java.ast.ASTWhileStatement;\n \n public class AvoidInstantiatingObjectsInLoopsRule extends AbstractOptimizationRule {\n-\n+    /**\n+     * This method is used to check whether user instantiates variables\n+     * which are not assigned in loops.\n+     * @param node This is the expression of part of java code to be checked.\n+     * @param data This is the data to return.\n+     * @return Object This returns the data passed in. If violation happens, violation is added to data.\n+     */\n     @Override\n     public Object visit(ASTAllocationExpression node, Object data) {\n+        //CS304 Issue link: https://github.com/pmd/pmd/issues/2207\n         if (insideLoop(node) && fourthParentNotThrow(node) && fourthParentNotReturn(node)) {\n-            addViolation(data, node);\n+            if (thirdParentNotASTExpression(node) && fourthParentNotASTStatementExpression(node)) {\n+                addViolation(data, node);\n+            }\n         }\n         return data;\n     }\n \n-    private boolean fourthParentNotThrow(ASTAllocationExpression node) {\n+    /**\n+     * This method is used to check whether the instantiated variable is assigned or not.\n+     * @param node This is the expression of part of java code to be checked.\n+     * @return boolean This returns Whether the third parent of node is an ASTExpression.\n+     */\n+    public boolean thirdParentNotASTExpression(ASTAllocationExpression node) {\n+        //CS304 Issue link: https://github.com/pmd/pmd/issues/2207\n+        if (node.getParent().getClass().toString().equals(\n+                \"class net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQwMjQ2OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxMzo1MFrOGgKbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxMzo1MFrOGgKbXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3ODQ2Mw==", "bodyText": "There is no class ASTStateExpression - so this equals always return \"true\"...\nDid you mean \"ASTStatementExpression\"?\nThat's by the way one example, why using toString is bad: It didn't show you this error during compile time...", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436378463", "createdAt": "2020-06-07T16:13:50Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsRule.java", "diffHunk": "@@ -14,24 +14,77 @@\n import net.sourceforge.pmd.lang.java.ast.ASTWhileStatement;\n \n public class AvoidInstantiatingObjectsInLoopsRule extends AbstractOptimizationRule {\n-\n+    /**\n+     * This method is used to check whether user instantiates variables\n+     * which are not assigned in loops.\n+     * @param node This is the expression of part of java code to be checked.\n+     * @param data This is the data to return.\n+     * @return Object This returns the data passed in. If violation happens, violation is added to data.\n+     */\n     @Override\n     public Object visit(ASTAllocationExpression node, Object data) {\n+        //CS304 Issue link: https://github.com/pmd/pmd/issues/2207\n         if (insideLoop(node) && fourthParentNotThrow(node) && fourthParentNotReturn(node)) {\n-            addViolation(data, node);\n+            if (thirdParentNotASTExpression(node) && fourthParentNotASTStatementExpression(node)) {\n+                addViolation(data, node);\n+            }\n         }\n         return data;\n     }\n \n-    private boolean fourthParentNotThrow(ASTAllocationExpression node) {\n+    /**\n+     * This method is used to check whether the instantiated variable is assigned or not.\n+     * @param node This is the expression of part of java code to be checked.\n+     * @return boolean This returns Whether the third parent of node is an ASTExpression.\n+     */\n+    public boolean thirdParentNotASTExpression(ASTAllocationExpression node) {\n+        //CS304 Issue link: https://github.com/pmd/pmd/issues/2207\n+        if (node.getParent().getClass().toString().equals(\n+                \"class net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix\")\n+                && node.getParent().getParent().getClass().toString().equals(\n+                    \"class net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression\")) {\n+            return !node.getParent().getParent().getParent().getClass().toString().equals(\n+                    \"class net.sourceforge.pmd.lang.java.ast.ASTExpression\");\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * This method is used to check whether the instantiated variable is assigned or not.\n+     * @param node This is the expression of part of java code to be checked.\n+     * @return boolean This returns Whether the fourth parent of node is an ASTStatementExpression.\n+     */\n+    public boolean fourthParentNotASTStatementExpression(ASTAllocationExpression node) {\n+        //CS304 Issue link: https://github.com/pmd/pmd/issues/2207\n+        return !node.getParent().getParent().getParent().getClass().toString().equals(\n+                \"class net.sourceforge.pmd.lang.java.ast.ASTStateExpression\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQwNDMzOnYy", "diffSide": "LEFT", "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxNjo1NFrOGgKcWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxNjo1NFrOGgKcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3ODcxMg==", "bodyText": "You have to keep the base class PmdRuleTsts - this provides all the magic to execute the rule test cases. Now you disabled a bunch of tests...\nMore background info: https://pmd.github.io/latest/pmd_userdocs_extending_testing.html", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436378712", "createdAt": "2020-06-07T16:16:54Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsTest.java", "diffHunk": "@@ -4,8 +4,98 @@\n \n package net.sourceforge.pmd.lang.java.rule.performance;\n \n-import net.sourceforge.pmd.testframework.PmdRuleTst;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n-public class AvoidInstantiatingObjectsInLoopsTest extends PmdRuleTst {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQwNTYwOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoxOToyMFrOGgKdDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNToxMFrOGikcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3ODg5NQ==", "bodyText": "I'd say, these tests are too fine granular. They do basically a white box testing - they verify that java works as it should, but don't verify, that the rule does what it should...\nPlease remove your test cases here and create a real test case: https://pmd.github.io/latest/pmd_userdocs_extending_testing.html\nThe test cases for AvoidInstantiatingObjectsInLoops can be found here:\nhttps://github.com/pmd/pmd/blob/master/pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/AvoidInstantiatingObjectsInLoops.xml", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436378895", "createdAt": "2020-06-07T16:19:20Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsTest.java", "diffHunk": "@@ -4,8 +4,98 @@\n \n package net.sourceforge.pmd.lang.java.rule.performance;\n \n-import net.sourceforge.pmd.testframework.PmdRuleTst;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n-public class AvoidInstantiatingObjectsInLoopsTest extends PmdRuleTst {\n-    // no additional unit tests\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+\n+public class AvoidInstantiatingObjectsInLoopsTest {\n+    AvoidInstantiatingObjectsInLoopsRule rule;\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/2207\n+    @Before\n+    public void init() {\n+        rule = new AvoidInstantiatingObjectsInLoopsRule();\n+    }\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/2207\n+    @Test\n+    public void visit() {\n+        assertEquals(\"yes\", rule.visit(new ASTAllocationExpression(1), \"yes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMTg0MA==", "bodyText": "Those tests also use a deprecated constructor and are not compatible with the 7.0 branch. Those constructors should never be called manually.", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r438901840", "createdAt": "2020-06-11T16:05:10Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/AvoidInstantiatingObjectsInLoopsTest.java", "diffHunk": "@@ -4,8 +4,98 @@\n \n package net.sourceforge.pmd.lang.java.rule.performance;\n \n-import net.sourceforge.pmd.testframework.PmdRuleTst;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n-public class AvoidInstantiatingObjectsInLoopsTest extends PmdRuleTst {\n-    // no additional unit tests\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+\n+public class AvoidInstantiatingObjectsInLoopsTest {\n+    AvoidInstantiatingObjectsInLoopsRule rule;\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/2207\n+    @Before\n+    public void init() {\n+        rule = new AvoidInstantiatingObjectsInLoopsRule();\n+    }\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/2207\n+    @Test\n+    public void visit() {\n+        assertEquals(\"yes\", rule.visit(new ASTAllocationExpression(1), \"yes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3ODg5NQ=="}, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQxMTk5OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/UseStringBufferForStringAppendsRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoyOTo0NlrOGgKgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjoyOTo0NlrOGgKgVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3OTczMw==", "bodyText": "Please extract astName.getNameDeclaration().getName() into a local variable. You use it 8 times. If I read the code correctly, that's actually the variable's name.", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436379733", "createdAt": "2020-06-07T16:29:46Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/UseStringBufferForStringAppendsRule.java", "diffHunk": "@@ -66,13 +77,29 @@ public Object visit(ASTVariableDeclaratorId node, Object data) {\n                         ASTAssignmentOperator assignmentOperator = statement\n                                 .getFirstDescendantOfType(ASTAssignmentOperator.class);\n                         if (assignmentOperator != null && assignmentOperator.isCompound()) {\n-                            addViolation(data, assignmentOperator);\n+                            //CS304 Issue link: https://github.com/pmd/pmd/issues/1736\n+                            // check whether is first time to break the rule\n+                            if (!map.containsKey(astName.getNameDeclaration().getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQxMzIyOnYy", "diffSide": "LEFT", "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/UseStringBufferForStringAppendsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjozMTowM1rOGgKg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNjozMTowM1rOGgKg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3OTg3NA==", "bodyText": "The same comment applies here as well: Please re-enable the rule tests and add additional test cases to https://github.com/pmd/pmd/blob/master/pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/UseStringBufferForStringAppends.xml", "url": "https://github.com/pmd/pmd/pull/2558#discussion_r436379874", "createdAt": "2020-06-07T16:31:03Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/rule/performance/UseStringBufferForStringAppendsTest.java", "diffHunk": "@@ -4,8 +4,33 @@\n \n package net.sourceforge.pmd.lang.java.rule.performance;\n \n-import net.sourceforge.pmd.testframework.PmdRuleTst;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+\n+public class UseStringBufferForStringAppendsTest {\n+    UseStringBufferForStringAppendsRule rule;\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/1736\n+    @Before\n+    public void init() {\n+        rule = new UseStringBufferForStringAppendsRule();\n+    }\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/1736\n+    @Test\n+    public void visit() {\n+        assertEquals(null, rule.visit(new ASTAllocationExpression(1), \"yes\"));\n+    }\n+\n+    //CS304 (manually written) Issue link: https://github.com/pmd/pmd/issues/1736\n+    @Test(expected = NullPointerException.class)\n+    public void visit2() {\n+        ASTAllocationExpression e = null;\n+        assertEquals(\"yes\", rule.visit(e, \"yes\"));\n+    }\n \n-public class UseStringBufferForStringAppendsTest extends PmdRuleTst {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69db5f72c9019e2ce2b186428ebfdb51d01bd0e7"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 421, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}