{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTU2OTg0", "number": 2354, "title": "[core] Add support for rule chain execution for XPath 2.0", "bodyText": "PR Description:\nThis uses now a custom visitor for Saxon expressions to analyze and modify the expression tree.\nThe existing rules still work as before.\nHaving this done would allow us, to migrate our own XPath 1.0 rules to XPath 2.0, without loosing any performance. Then we could issue a deprecation warning when XPath 1.0 is still used.\nNote: I didn't do any performance comparisons... so I don't know, whether rulechain is really necessary here.\nRefs #1687\nBefore submitting a PR, please check that:\n\n The PR is submitted against master. The PMD team will merge back to support branches as needed.\n ./mvnw clean verify passes. This will build and test PMD, execute PMD and checkstyle rules. Check this for more info", "createdAt": "2020-03-13T20:03:40Z", "url": "https://github.com/pmd/pmd/pull/2354", "merged": true, "mergeCommit": {"oid": "a899a2535065f42651dcb6d265a2ab4a29ff0aae"}, "closed": true, "closedAt": "2020-03-20T13:47:42Z", "author": {"login": "adangel"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNRMrgAH2gAyMzg3OTU2OTg0OjVmYjZkZjdkYWE1ZDBlYjM2ZTk2M2Q4ZjRlZWYxODUzNDQ0Yjc1OWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPQOdKgH2gAyMzg3OTU2OTg0OmE4OTlhMjUzNTA2NWY0MjY1MWRjYjZkMjY1YTJhYjRhMjlmZjBhYWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5fb6df7daa5d0eb36e963d8f4eef1853444b759f", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/5fb6df7daa5d0eb36e963d8f4eef1853444b759f", "committedDate": "2020-03-13T14:29:20Z", "message": "[core] Add support for rule chain execution for XPath 2.0\n\nVery similar approach to what has been implemented for Jaxen.\nThe existing rules still work as before.\n\nRefs #1687"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b88caacea0bbf2a966052153a9cd910b816bc4c", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/0b88caacea0bbf2a966052153a9cd910b816bc4c", "committedDate": "2020-03-13T19:48:35Z", "message": "[core] Add more cases for Saxon rule chain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2229b2d8444dfbcded87e89b58a38b693fc8a65", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/e2229b2d8444dfbcded87e89b58a38b693fc8a65", "committedDate": "2020-03-19T10:28:26Z", "message": "[core] Saxon XPath 2.0 and rule chain with visitors\n\nThis is an enhanced implementation of rule chain\nsupport for XPath 2.0 expressions. It uses a own\nvisitor to analyze and modify the original\nsaxon xpath expressions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d4fc5f56fcd108db4c50a91bf7088431cc074f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/45d4fc5f56fcd108db4c50a91bf7088431cc074f", "committedDate": "2020-03-19T18:08:19Z", "message": "Make documentSorter singleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a3c39b4d88b0e5716b9e72880ad91d810d6b04", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/20a3c39b4d88b0e5716b9e72880ad91d810d6b04", "committedDate": "2020-03-19T18:11:30Z", "message": "Make SplitUnions package private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTc1NzYy", "url": "https://github.com/pmd/pmd/pull/2354#pullrequestreview-377975762", "createdAt": "2020-03-19T18:12:48Z", "commit": {"oid": "e2229b2d8444dfbcded87e89b58a38b693fc8a65"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjo0OFrOF46raw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxNDo1MlrOF46wEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTk2Mw==", "bodyText": "This can be a singleton", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395225963", "createdAt": "2020-03-19T18:12:48Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.rule.xpath.internal;\n+\n+import java.util.Comparator;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Sorts nodes by document order.\n+ */\n+public class DocumentSorter implements Comparator<Node> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2229b2d8444dfbcded87e89b58a38b693fc8a65"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNzE1NA==", "bodyText": "I think this undermines the benefits of using the rulechain? We'd effectively traverse once for each rulechain visit, and once for the whole tree, so we'd only be doing more traversals, while the whole tree visit suffices", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395227154", "createdAt": "2020-03-19T18:14:52Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java", "diffHunk": "@@ -206,15 +251,55 @@ private void initializeXPathExpression() {\n                 }\n             }\n \n-            // TODO Come up with a way to make use of RuleChain. I had hacked up\n-            // an approach which used Jaxen's stuff, but that only works for\n-            // 1.0 compatibility mode. Rather do it right instead of kludging.\n             xpathExpression = xpathEvaluator.createExpression(super.xpath);\n+            analyzeXPathForRuleChain(xpathEvaluator);\n         } catch (final XPathException e) {\n             throw new RuntimeException(e);\n         }\n     }\n+    \n+    private void analyzeXPathForRuleChain(final XPathEvaluator xpathEvaluator) {\n+        final Expression expr = xpathExpression.getInternalExpression();\n+\n+        boolean useRuleChain = true;\n+\n+        // First step: Split the union venn expressions into single expressions\n+        List<Expression> subexpressions = new ArrayList<>();\n+        SplitUnions unions = new SplitUnions();\n+        unions.visit(expr);\n+        if (unions.getExpressions().isEmpty()) {\n+            subexpressions.add(expr);\n+        } else {\n+            subexpressions.addAll(unions.getExpressions());\n+        }\n \n+        // Second step: Analyze each expression separately\n+        for (Expression subexpression : subexpressions) {\n+            RuleChainAnalyzer rca = new RuleChainAnalyzer(xpathEvaluator.getConfiguration());\n+            Expression modified = rca.visit(subexpression);\n+\n+            if (rca.getRootElement() != null) {\n+                addExpressionForNode(rca.getRootElement(), modified);\n+            } else {\n+                // couldn't find a root element for the expression, that means, we can't use rule chain at all\n+                // even though, it would be possible for part of the expression.\n+                useRuleChain = false;\n+                break;\n+            }\n+        }\n+\n+        if (useRuleChain) {\n+            super.ruleChainVisits.addAll(nodeNameToXPaths.keySet());\n+        } else {\n+            nodeNameToXPaths.clear();\n+            if (LOG.isLoggable(Level.FINE)) {\n+                LOG.log(Level.FINE, \"Unable to use RuleChain for XPath: \" + xpath);\n+            }\n+        }\n+\n+        // always add fallback expression\n+        addExpressionForNode(AST_ROOT, xpathExpression.getInternalExpression());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2229b2d8444dfbcded87e89b58a38b693fc8a65"}, "originalPosition": 174}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "514a524e6f9071b074ee569bee6a656d3c868907", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/514a524e6f9071b074ee569bee6a656d3c868907", "committedDate": "2020-03-19T18:22:35Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a899a2535065f42651dcb6d265a2ab4a29ff0aae", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/a899a2535065f42651dcb6d265a2ab4a29ff0aae", "committedDate": "2020-03-19T18:29:13Z", "message": "Fix expr normalization when ids are negative"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4925, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}