{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTIwOTA4", "number": 2589, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo0N1rOEKNccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTo1NFrOEKOPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQxNDg4OnYy", "diffSide": "RIGHT", "path": "javacc-wrapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo0N1rOGrHuIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo0N1rOGrHuIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODQ1MA==", "bodyText": "do we need this property anymore? generic-sideeffect-visitor-interface-file", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447868450", "createdAt": "2020-06-30T17:44:47Z", "author": {"login": "adangel"}, "path": "javacc-wrapper.xml", "diffHunk": "@@ -60,9 +60,9 @@\n     <property name=\"base-visitor-interface-name\" value=\"${lang-name}ParserVisitor\" />\n     <property name=\"base-visitor-interface-file\" value=\"${target-package-dir}/${base-visitor-interface-name}.java\" />\n \n-    <property name=\"generic-sideeffect-visitor-interface-name\" value=\"SideEffectingVisitor\" />\n+    <property name=\"generic-visitor-interface-name\" value=\"${lang-name}Visitor\" />\n     <property name=\"generic-sideeffect-visitor-interface-file\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQyODAyOnYy", "diffSide": "RIGHT", "path": "javacc-wrapper.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0ODozOVrOGrH2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxMTo1NFrOGrbgzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MDYyMg==", "bodyText": "Is jjtAccept here correct or should it be the new acceptVisitor?", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447870622", "createdAt": "2020-06-30T17:48:39Z", "author": {"login": "adangel"}, "path": "javacc-wrapper.xml", "diffHunk": "@@ -488,17 +488,16 @@ public interface\" />\n \n     </target>\n \n-    <target name=\"side-effecting-visitor\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n-        <!-- Side effecting visitor, no return type, one generic parameter -->\n-        <copy file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n+    <target name=\"generic-visitor-replacement\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n+        <move file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n         <replace file=\"${generic-sideeffect-visitor-interface-file}\">\n             <replacefilter token=\"${base-visitor-interface-name}\"\n-                           value=\"${generic-sideeffect-visitor-interface-name}&lt;T>\" />\n+                           value=\"${generic-visitor-interface-name}&lt;P, R> extends ${ast-api-package}.AstVisitor&lt;P, R>\" />\n \n-            <replacefilter token=\"Object\" value=\"T\" />\n-            <replacefilter token=\"T visit\" value=\"void visit\" />\n-            <replacefilter token=\"return data;\" value=\"\" />\n-            <replacefilter token=\"return \" value=\"\" />\n+            <replacefilter token=\"Object\" value=\"P\" />\n+            <replacefilter token=\"P visit\" value=\"R visit\" />\n+\n+            <replacefilter token=\"default R visit(${node-name} node, P data) { for (int i = 0, len = node.getNumChildren(); i &lt; len; i++) node.getChild(i).jjtAccept(this, data); return data; }\" value=\"default R visit(${node-name} node, P data) { return visitNode(node, data); }\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjcxNw==", "bodyText": "It is correct, because the regular non-generic visitor still uses jjtAccept  (see a few lines above). This is to be compatible with other javacc modules until they're ported. When that's done it can be simplified", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448192717", "createdAt": "2020-07-01T08:11:54Z", "author": {"login": "oowekyala"}, "path": "javacc-wrapper.xml", "diffHunk": "@@ -488,17 +488,16 @@ public interface\" />\n \n     </target>\n \n-    <target name=\"side-effecting-visitor\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n-        <!-- Side effecting visitor, no return type, one generic parameter -->\n-        <copy file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n+    <target name=\"generic-visitor-replacement\" depends=\"default-visitor\" unless=\"jjtreeBuildNotRequired\">\n+        <move file=\"${base-visitor-interface-file}\" tofile=\"${generic-sideeffect-visitor-interface-file}\" />\n         <replace file=\"${generic-sideeffect-visitor-interface-file}\">\n             <replacefilter token=\"${base-visitor-interface-name}\"\n-                           value=\"${generic-sideeffect-visitor-interface-name}&lt;T>\" />\n+                           value=\"${generic-visitor-interface-name}&lt;P, R> extends ${ast-api-package}.AstVisitor&lt;P, R>\" />\n \n-            <replacefilter token=\"Object\" value=\"T\" />\n-            <replacefilter token=\"T visit\" value=\"void visit\" />\n-            <replacefilter token=\"return data;\" value=\"\" />\n-            <replacefilter token=\"return \" value=\"\" />\n+            <replacefilter token=\"Object\" value=\"P\" />\n+            <replacefilter token=\"P visit\" value=\"R visit\" />\n+\n+            <replacefilter token=\"default R visit(${node-name} node, P data) { for (int i = 0, len = node.getNumChildren(); i &lt; len; i++) node.getChild(i).jjtAccept(this, data); return data; }\" value=\"default R visit(${node-name} node, P data) { return visitNode(node, data); }\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MDYyMg=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQzNDY2OnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1MDoyNVrOGrH6mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMToyN1rOGzwksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MTY0Mw==", "bodyText": "I'm not sure, I'm following you - the point of a major release is, that we can break compatibility, isn't it?\nIt would be nice, if we could backport the one or the other thing, but keeping deprecated stuff around in pmd7 for noone, that we should avoid IMHO.\nLet me think: so, the plan is, that if someone uses now PMD 6.x, when we release PMD 7.0.0, they can just switch to the new version and can compile, but with deprecation warnings, and with PMD 7.1.0, we'll remove the deprecated stuff? I don't see this happen....\nI could imagine, that we - after releasing 7.0.0 and getting feedback about compatibility problems - create a 7.0.1 and maybe also another 6.x release for easier migration (preparations/backports where possible).\nAlternatively, we could also document, what needs to be done, in the migration guide. I've seen now the place, where you used the new annotation. So we could use the new annotation as a marker/reminder for us, that this needs to be part of the migration guide.\nOne other possibility: If this works with the default impl in interfaces, then we could decide to release (after 7.0.0) a last PMD 6.x.x-for-7 version which updated requirements (e.g. minimum java8, allows us to backport some stuff). However, this doesn't avoid the fact, that - if users want to migrate to PMD 7, they need to touch their code...", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447871643", "createdAt": "2020-06-30T17:50:25Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.annotation;\n+\n+/**\n+ * Tags a deprecated member that should not be removed before PMD 7.0.0.\n+ * Such members were made deprecated on the PMD 7 development branch and\n+ * may be kept for backwards compatibility on the day of the PMD 7 release,\n+ * because the replacement API cannot be backported to PMD 6.\n+ */\n+public @interface DeprecatedUntil700 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjI1NA==", "bodyText": "I was thinking, maybe we could ease the transition to PMD 7 by not removing everything right away. Eg maybe we could have a 7.0.0 \"pre-release\" with some deprecated API (and already a lot of removed/changed APIs), then the real release without those deprecated members. In my mind, keeping around a deprecated member is only appropriate when it's extremely easy (like not more than have a deprecated method that delegates to the new impl).\nSo we'd effectively need a distinction between\n\n\"deprecated since 6.0\": can be removed before releasing 7.0 without thinking twice about it\n\"deprecated since 7.0\": the replacement API doesn't exist in 6.x versions, and it's easy to keep around for compatibility\n\nThose visitors are not the best examples for the value-added of this distinction. Let's look for example, at the traversal methods on the Node interface. Since we have node streams, methods like Node::findChildrenOfType or Node::findDescendantsOfType should be removed I think. Node streams are better in that they're lazy and can be chained better.\nBut we can't deprecate those methods in a 6.x release, because there's no replacement API available yet. Most of them are very dependent on too. For the 7.0.0 release we have several options:\n\nRemove them before 7.0.0\nKeep them in 7.0.0 and deprecate them for removal in 8.0.0. This will make the transition simpler for users, but will give them a very long lifetime (which to us, translates to technical debt)\nKeep them in a 7.0.0 \"pre-release\" and remove them on 7.0.0. This makes the transition simpler for users, at minimal cost to us.\n\nKeeping them on the 7.0.x branch until the release comes at nearly zero cost, for now they're even necessary, since a lot of our codebase still uses them. So I don't really see why we shouldn't extend this \"grace period\" to other clients. Removing them in 7.0 without transition would make an upgrade to 7.0 harder than it needs to be, given that it's probably already going to be challenging.\nAm I making sense? What do you think of the idea of such a \"pre-release\"?\n\nAlternatively, we could also document, what needs to be done, in the migration guide. I've seen now the place, where you used the new annotation. So we could use the new annotation as a marker/reminder for us, that this needs to be part of the migration guide.\n\nIf we don't do a 7.0.0 \"pre-release\" like that, then yes, I think a migration guide, and using this annotation to help, would be a good compromise too. The point of the annotation to give us time, we don't have to commit to one outcome or another just yet.\n\nDeprecatedUntil700 hints at doing a pre-release. Regardless of whether we go that way or not, maybe DeprecatedSince700 would be a better name. It doesn't tell us to keep them until 7.0.0, just reminds us that they're deprecated, but that there's no transitional API on master. So it would remind us to\n\nif possible, add such a transitional API before wrapping up the 6.x release cycle, and remove them before 7.0.0\notherwise, mention it in a migration guide/ release notes of 7.0.x", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448216254", "createdAt": "2020-07-01T08:51:47Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.annotation;\n+\n+/**\n+ * Tags a deprecated member that should not be removed before PMD 7.0.0.\n+ * Such members were made deprecated on the PMD 7 development branch and\n+ * may be kept for backwards compatibility on the day of the PMD 7 release,\n+ * because the replacement API cannot be backported to PMD 6.\n+ */\n+public @interface DeprecatedUntil700 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MTY0Mw=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NDYzMw==", "bodyText": "Thanks for the explanations, I think, I understand now the background. For now, we can of course leave these annotations in and decide later, what we really do.\nI'm not sure yet, whether the pre-release will really help the users... e.g. I could imagine, they update to 7.0.0-pre and they see: \"ok, it works, lot's of deprecations, but still compiles\", then they try out 7.0.0 and see \"hm... compiler errors - I don't have time to look at them, let's stay at 7.0.0-pre, since this still works\"... ok, it would be the problem of the users, if they don't do the full migration. Or in other words: compile errors can't be ignored, deprecations can't.\nIn general, I would keep the deprecations only in the pre-release and try to avoid to extend the lifespan of these deprecations - so that we really delete the old stuff with the final version of 7.0.0.", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r453844633", "createdAt": "2020-07-13T18:24:42Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.annotation;\n+\n+/**\n+ * Tags a deprecated member that should not be removed before PMD 7.0.0.\n+ * Such members were made deprecated on the PMD 7 development branch and\n+ * may be kept for backwards compatibility on the day of the PMD 7 release,\n+ * because the replacement API cannot be backported to PMD 6.\n+ */\n+public @interface DeprecatedUntil700 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MTY0Mw=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNjM4Ng==", "bodyText": "As we discussed, we keep the new annotation @DeprecatedUntil700 and decide later, whether migration doc is enough or whether we can easily create a compatibility-helping pre-release. There are also other candidates, where this could be useful, e.g. in the Node / AST API (Node vs. NodeStream).", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r456926386", "createdAt": "2020-07-19T16:11:27Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/annotation/DeprecatedUntil700.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.annotation;\n+\n+/**\n+ * Tags a deprecated member that should not be removed before PMD 7.0.0.\n+ * Such members were made deprecated on the PMD 7 development branch and\n+ * may be kept for backwards compatibility on the day of the PMD 7 release,\n+ * because the replacement API cannot be backported to PMD 6.\n+ */\n+public @interface DeprecatedUntil700 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MTY0Mw=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQ2NTMxOnYy", "diffSide": "RIGHT", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1ODozNlrOGrIOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1Mzo1MVrOGrdBSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NjYyOQ==", "bodyText": "Does this dispatch work as a default implementation? If not, we shouldn't provide a default impl, but just document, how the implementation in the specific node classes must look like", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447876629", "createdAt": "2020-06-30T17:58:36Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -289,6 +283,27 @@ default boolean hasDescendantMatchingXPath(String xpathString) {\n      */\n     int getIndexInParent();\n \n+\n+    /**\n+     * Calls back the visitor's visit method corresponding to the runtime\n+     * type of this Node. This should usually be preferred to calling\n+     * a {@code visit} method directly (usually the only calls to those\n+     * are in the implementations of this {@code acceptVisitor} method).\n+     *\n+     * @param <R>     Return type of the visitor\n+     * @param <P>     Parameter type of the visitor\n+     * @param visitor Visitor to dispatch\n+     * @param data    Parameter to the visit\n+     *\n+     * @return What the visitor returned\n+     */\n+    // TODO remove the default implementation, convert all visitors to be generic\n+    default <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        // override me\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzQxNw==", "bodyText": "No, it should be abstract, but other modules need to be ported before. Documentation is already present on AstVisitor, but maybe it should be present here too", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448217417", "createdAt": "2020-07-01T08:53:51Z", "author": {"login": "oowekyala"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -289,6 +283,27 @@ default boolean hasDescendantMatchingXPath(String xpathString) {\n      */\n     int getIndexInParent();\n \n+\n+    /**\n+     * Calls back the visitor's visit method corresponding to the runtime\n+     * type of this Node. This should usually be preferred to calling\n+     * a {@code visit} method directly (usually the only calls to those\n+     * are in the implementations of this {@code acceptVisitor} method).\n+     *\n+     * @param <R>     Return type of the visitor\n+     * @param <P>     Parameter type of the visitor\n+     * @param visitor Visitor to dispatch\n+     * @param data    Parameter to the visit\n+     *\n+     * @return What the visitor returned\n+     */\n+    // TODO remove the default implementation, convert all visitors to be generic\n+    default <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        // override me\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NjYyOQ=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUwNTY1OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AbstractJavaNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTozNlrOGrIm5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NzoxNlrOGrdJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4Mjk4Mw==", "bodyText": "Should we allow this or rather prevent this? trying to visit an AST with an incompatible visitor... I would argue to restrict the feature set at the beginning rather than allowing too much....", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447882983", "createdAt": "2020-06-30T18:09:36Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AbstractJavaNode.java", "diffHunk": "@@ -32,6 +33,18 @@ public Scope getScope() {\n         return scope;\n     }\n \n+    @Override\n+    public final <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        if (visitor instanceof JavaVisitor) {\n+            return this.acceptVisitor((JavaVisitor<? super P, ? extends R>) visitor, data);\n+        }\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTQ2NA==", "bodyText": "I think yes, we can restrict it for the time being. Maybe in the future it will be clearer what to do in this case", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448219464", "createdAt": "2020-07-01T08:57:16Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/AbstractJavaNode.java", "diffHunk": "@@ -32,6 +33,18 @@ public Scope getScope() {\n         return scope;\n     }\n \n+    @Override\n+    public final <R, P> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {\n+        if (visitor instanceof JavaVisitor) {\n+            return this.acceptVisitor((JavaVisitor<? super P, ? extends R>) visitor, data);\n+        }\n+        return visitor.visitNode(this, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4Mjk4Mw=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU0NjA5OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTo1NFrOGrI_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMjo0NFrOGzwlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTE4MQ==", "bodyText": "Is that IDEA specific?", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r447889181", "createdAt": "2020-06-30T18:19:54Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.lang.ast.AstVisitorBase;\n+\n+/**\n+ * Base implementation of {@link JavaVisitor}. This adds delegation logic\n+ * which the interface doesn't have.\n+ *\n+ * <p>Contrary to the old visitor, which used Object as both parameter and\n+ * return type, this visitor uses separate type parameters for those. This\n+ * means you can't just return the parameter, unless your visitor has equal\n+ * parameter and return type. This type signature subsumes many possible\n+ * signatures. The old one is {@code <Object, Object>}, still implemented\n+ * by {@link JavaParserVisitor} for backwards compatibility. If you don't\n+ * want to return a value, or don't want a parameter, use {@link Void}.\n+ *\n+ * <p>Since 7.0.0 we use default methods on the interface, which removes\n+ * code duplication. However it's still recommended to extend a base class,\n+ * for forward compatibility.\n+ */\n+public class JavaVisitorBase<P, R> extends AstVisitorBase<P, R> implements JavaVisitor<P, R> {\n+\n+    // todo on java-grammar: uncomment\n+\n+\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Methods/constructors\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTUwMA==", "bodyText": "This works in Netbeans and IntelliJ", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448221500", "createdAt": "2020-07-01T09:00:45Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.lang.ast.AstVisitorBase;\n+\n+/**\n+ * Base implementation of {@link JavaVisitor}. This adds delegation logic\n+ * which the interface doesn't have.\n+ *\n+ * <p>Contrary to the old visitor, which used Object as both parameter and\n+ * return type, this visitor uses separate type parameters for those. This\n+ * means you can't just return the parameter, unless your visitor has equal\n+ * parameter and return type. This type signature subsumes many possible\n+ * signatures. The old one is {@code <Object, Object>}, still implemented\n+ * by {@link JavaParserVisitor} for backwards compatibility. If you don't\n+ * want to return a value, or don't want a parameter, use {@link Void}.\n+ *\n+ * <p>Since 7.0.0 we use default methods on the interface, which removes\n+ * code duplication. However it's still recommended to extend a base class,\n+ * for forward compatibility.\n+ */\n+public class JavaVisitorBase<P, R> extends AstVisitorBase<P, R> implements JavaVisitor<P, R> {\n+\n+    // todo on java-grammar: uncomment\n+\n+\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Methods/constructors\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTE4MQ=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc4NQ==", "bodyText": "Would you rather I remove it?", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r448221785", "createdAt": "2020-07-01T09:01:17Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.lang.ast.AstVisitorBase;\n+\n+/**\n+ * Base implementation of {@link JavaVisitor}. This adds delegation logic\n+ * which the interface doesn't have.\n+ *\n+ * <p>Contrary to the old visitor, which used Object as both parameter and\n+ * return type, this visitor uses separate type parameters for those. This\n+ * means you can't just return the parameter, unless your visitor has equal\n+ * parameter and return type. This type signature subsumes many possible\n+ * signatures. The old one is {@code <Object, Object>}, still implemented\n+ * by {@link JavaParserVisitor} for backwards compatibility. If you don't\n+ * want to return a value, or don't want a parameter, use {@link Void}.\n+ *\n+ * <p>Since 7.0.0 we use default methods on the interface, which removes\n+ * code duplication. However it's still recommended to extend a base class,\n+ * for forward compatibility.\n+ */\n+public class JavaVisitorBase<P, R> extends AstVisitorBase<P, R> implements JavaVisitor<P, R> {\n+\n+    // todo on java-grammar: uncomment\n+\n+\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Methods/constructors\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTE4MQ=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNjUxOQ==", "bodyText": "Needing to fold could be a sign of the file being too big and indicate that we maybe should split it. But that's just to keep in mind and we'll need to revisit this later.", "url": "https://github.com/pmd/pmd/pull/2589#discussion_r456926519", "createdAt": "2020-07-19T16:12:44Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaVisitorBase.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.lang.ast.AstVisitorBase;\n+\n+/**\n+ * Base implementation of {@link JavaVisitor}. This adds delegation logic\n+ * which the interface doesn't have.\n+ *\n+ * <p>Contrary to the old visitor, which used Object as both parameter and\n+ * return type, this visitor uses separate type parameters for those. This\n+ * means you can't just return the parameter, unless your visitor has equal\n+ * parameter and return type. This type signature subsumes many possible\n+ * signatures. The old one is {@code <Object, Object>}, still implemented\n+ * by {@link JavaParserVisitor} for backwards compatibility. If you don't\n+ * want to return a value, or don't want a parameter, use {@link Void}.\n+ *\n+ * <p>Since 7.0.0 we use default methods on the interface, which removes\n+ * code duplication. However it's still recommended to extend a base class,\n+ * for forward compatibility.\n+ */\n+public class JavaVisitorBase<P, R> extends AstVisitorBase<P, R> implements JavaVisitor<P, R> {\n+\n+    // todo on java-grammar: uncomment\n+\n+\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Methods/constructors\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTE4MQ=="}, "originalCommit": {"oid": "4bb98df37b947f301ad3b7baaf375e3e2cd87ac8"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 430, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}