{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTMyNjk1", "number": 2491, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjoyNjoyM1rOEHTiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjo1MToyN1rOEHTnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDk1NTg1OnYy", "diffSide": "LEFT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjoyNjoyM1rOGmnSUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjoyNjoyM1rOGmnSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MjczOA==", "bodyText": "This change effectively moves ApexParser from package lang.apex into lang.apex.ast.\nI guess, we should internalize this one on master, as we did with the JavaLanguageParser.\nDone in 23c08b5", "url": "https://github.com/pmd/pmd/pull/2491#discussion_r443142738", "createdAt": "2020-06-20T16:26:23Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParser.java", "diffHunk": "@@ -1,30 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex;\n-\n-import java.io.Reader;\n-\n-import net.sourceforge.pmd.lang.AbstractParser;\n-import net.sourceforge.pmd.lang.ParserOptions;\n-import net.sourceforge.pmd.lang.ast.ParseException;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-\n-/**\n- * Adapter for the Apex jorje parser\n- */\n-public class ApexParser extends AbstractParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d75fa0b91e30c59c6a947743a948ee09f5b051"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDk2ODQzOnYy", "diffSide": "LEFT", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/AbstractApexRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjo1MToyN1rOGmnYmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjo1MToyN1rOGmnYmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NDM0Ng==", "bodyText": "On master, in seems we have a bug: we don't visit top-level ASTUserEnum and ASTAnonymousClass...\nEnums in Apex can't have additional user defined methods, so they only define the constants. This means, only rules like Naming conventions would suffer from this bug.\nJust tested it: this rule uses rulechain, so we directly visit UserEnum - that works. The tests look like, they were written before introducing rule chain, since they don't have a top-level enum...\nASTAnonymousClass - hm... a anonymous class can't be top-level. So, this should be no issue at all... In fact, I have no clue, how to write an anonymous class in Apex....\nThis is addressed in #2610", "url": "https://github.com/pmd/pmd/pull/2491#discussion_r443144346", "createdAt": "2020-06-20T16:51:27Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/AbstractApexRule.java", "diffHunk": "@@ -131,13 +131,9 @@ public void apply(List<? extends Node> nodes, RuleContext ctx) {\n     }\n \n     protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {\n-        for (Object element : nodes) {\n-            if (element instanceof ASTUserClass) {\n-                visit((ASTUserClass) element, ctx);\n-            } else if (element instanceof ASTUserInterface) {\n-                visit((ASTUserInterface) element, ctx);\n-            } else if (element instanceof ASTUserTrigger) {\n-                visit((ASTUserTrigger) element, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d75fa0b91e30c59c6a947743a948ee09f5b051"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 410, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}