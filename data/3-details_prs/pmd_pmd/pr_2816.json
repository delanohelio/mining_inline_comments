{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Njc3NjEy", "number": 2816, "title": "[apex] Detect 'Database' method invocations inside loops", "bodyText": "Describe the PR\nThis PR adds a new rule AvoidDatabaseMethodCallsInLoopsRule. The rule detects invocations of Database method calls within a loop.\nThe original issue suggests adding this to the AvoidDmlStatementsInLoops rule. The Database class supports many types of database interactions which include DML and SOQL. It seemed best to create a separate rule instead of adding it to the existing AvoidDmlStatementsInLoopsRule or AvoidSoqlInLoopsRule.\nThis PR also refactors some common code for Apex rules that detect statements within loops. The refactored classes contained the same logic, but each class implemented it in a slightly different way. This change consolidates the similar logic into the AbstractAvoidNodeInLoopsRule class.\nRelated issues\n\nFixes #1713\n\nReady?\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-10-06T16:21:50Z", "url": "https://github.com/pmd/pmd/pull/2816", "merged": true, "mergeCommit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "closed": true, "closedAt": "2020-10-22T16:20:44Z", "author": {"login": "jbartolotta-sfdc"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPulL8gH2gAyNDk4Njc3NjEyOjhmYjY5YjI0ZGIyYWM5MzRjYzE3NWM5ODNiMzk1ZDYwMDAzNTNkYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVEHP9gFqTUxNDg4MzI5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5", "author": {"user": {"login": "jbartolotta-sfdc", "name": "Jeff Bartolotta"}}, "url": "https://github.com/pmd/pmd/commit/8fb69b24db2ac934cc175c983b395d6000353da5", "committedDate": "2020-10-06T02:02:21Z", "message": "Add Apex AvoidDatabaseMethodCallsInLoopsRule\n\nFixes https://github.com/pmd/pmd/issues/1713, Database statements aren't detected in for loops.\n\n- Added new AvoidDatabaseMethodCallsInLoopsRule that adds a violation if any methods from the System Database class are invoked from within a loop.\n\n- Refactored AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule to derive from AbstractAvoidNodeInLoopsRule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTQ4MDIz", "url": "https://github.com/pmd/pmd/pull/2816#pullrequestreview-503148023", "createdAt": "2020-10-06T16:26:33Z", "commit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyNjozM1rOHdQD7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMjozM1rOHdQTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzkwMQ==", "bodyText": "Should the common constructor code be moved here or left in the concrete classes? I know that sometimes people like that type of configuration in the concrete class.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500433901", "createdAt": "2020-10-06T16:26:33Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/performance/AbstractAvoidNodeInLoopsRule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.performance;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTDoLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForEachStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTReturnStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTWhileLoopStatement;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.AbstractNode;\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Base class for any rules that detect operations contained within a loop that could be more efficiently executed by\n+ * refactoring the code into a batched execution.\n+ */\n+abstract class AbstractAvoidNodeInLoopsRule extends AbstractApexRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNDg0Mw==", "bodyText": "I created entries in all xml files that contained the other \"Avoid..InLoops\" classes. I wasn't sure if this was correct given that they are marked deprecated, please let me know.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500434843", "createdAt": "2020-10-06T16:28:02Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/resources/rulesets/apex/performance.xml", "diffHunk": "@@ -8,6 +8,7 @@\n The Performance ruleset contains a collection of good practices which should be followed.\n   </description>\n \n+    <rule ref=\"category/apex/performance.xml/AvoidDatabaseMethodCallsInLoops\" deprecated=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYyNQ==", "bodyText": "I was not sure if I was supposed to create this file or not. Let me know if I should remove it from the PR.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500436625", "createdAt": "2020-10-06T16:30:45Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-core/src/main/resources/rulesets/releases/6290.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzc5Nw==", "bodyText": "How can I test this link?\nI followed the instructions at https://pmd.github.io/latest/pmd_devdocs_writing_documentation.html#building but the Jekyll site only contained the sidebar links, all of the rules returned a 404.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500437797", "createdAt": "2020-10-06T16:32:33Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/resources/category/apex/performance.xml", "diffHunk": "@@ -80,4 +80,26 @@ public class Something {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidDatabaseMethodCallsInLoops\"\n+          language=\"apex\"\n+          since=\"6.29.0\"\n+          message=\"Avoid database method calls inside loops\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDatabaseMethodCallsInLoopsRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_performance.html#avoiddatabasemethodcallsinloops\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg5ODEw", "url": "https://github.com/pmd/pmd/pull/2816#pullrequestreview-506089810", "createdAt": "2020-10-10T11:17:15Z", "commit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToxNzoxNVrOHffOUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTozNDoxM1rOHffTzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTQ3NQ==", "bodyText": "I'd move common code logic to the base class, but leave rule properties at the concrete classes. Right now, I only see rule properties, so keep it as is.\nNote: all these code-climate rule properties will be removed with PMD 7 anyway, so don't worry too much about them.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502779475", "createdAt": "2020-10-10T11:17:15Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/performance/AbstractAvoidNodeInLoopsRule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.performance;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTDoLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForEachStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTReturnStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTWhileLoopStatement;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.AbstractNode;\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Base class for any rules that detect operations contained within a loop that could be more efficiently executed by\n+ * refactoring the code into a batched execution.\n+ */\n+abstract class AbstractAvoidNodeInLoopsRule extends AbstractApexRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzkwMQ=="}, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTY4OQ==", "bodyText": "This rule only visits one node type. There we can take some performance advantage by using \"rule chain\" -> https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502779689", "createdAt": "2020-10-10T11:19:49Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/performance/AvoidDatabaseMethodCallsInLoopsRule.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.performance;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression;\n+import net.sourceforge.pmd.lang.apex.rule.internal.Helper;\n+\n+public class AvoidDatabaseMethodCallsInLoopsRule extends AbstractAvoidNodeInLoopsRule {\n+    public AvoidDatabaseMethodCallsInLoopsRule() {\n+        setProperty(CODECLIMATE_CATEGORIES, \"Performance\");\n+        // Note: Often more complicated as just moving a few lines.\n+        // Involves Maps...\n+        setProperty(CODECLIMATE_REMEDIATION_MULTIPLIER, 150);\n+        setProperty(CODECLIMATE_BLOCK_HIGHLIGHTING, false);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethodCallExpression node, Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDIyNQ==", "bodyText": "The rule documentation is generated by the module \"pmd-doc\". If you build this module, it will create the files under docs/pages/pmd/rules (these files are not committed).", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780225", "createdAt": "2020-10-10T11:25:49Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/performance.xml", "diffHunk": "@@ -80,4 +80,26 @@ public class Something {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidDatabaseMethodCallsInLoops\"\n+          language=\"apex\"\n+          since=\"6.29.0\"\n+          message=\"Avoid database method calls inside loops\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDatabaseMethodCallsInLoopsRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_performance.html#avoiddatabasemethodcallsinloops\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzc5Nw=="}, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDMxOA==", "bodyText": "We try to order the entries alphabetically by rule name. This rule needs to be added as the first rule in the file....", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780318", "createdAt": "2020-10-10T11:27:01Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/performance.xml", "diffHunk": "@@ -80,4 +80,26 @@ public class Something {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidDatabaseMethodCallsInLoops\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDQwMw==", "bodyText": "These are old rulesets, which we don't maintain anymore. They are just here for backwards compatibility and should not be used anymore. So, just revert the change here, thanks.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780403", "createdAt": "2020-10-10T11:28:16Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/rulesets/apex/performance.xml", "diffHunk": "@@ -8,6 +8,7 @@\n The Performance ruleset contains a collection of good practices which should be followed.\n   </description>\n \n+    <rule ref=\"category/apex/performance.xml/AvoidDatabaseMethodCallsInLoops\" deprecated=\"true\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNDg0Mw=="}, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDYxMA==", "bodyText": "Please also not modify this ruleset, it's deprecated in favor of quickstart.xml.... We probably should have added this info to the ruleset's description....", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780610", "createdAt": "2020-10-10T11:30:38Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/rulesets/apex/ruleset.xml", "diffHunk": "@@ -12,6 +12,7 @@\n    <rule ref=\"rulesets/apex/quickstart.xml/TooManyFields\" deprecated=\"true\" />\n    <rule ref=\"rulesets/apex/quickstart.xml/AvoidDeeplyNestedIfStmts\" deprecated=\"true\" />\n    <rule ref=\"rulesets/apex/quickstart.xml/CyclomaticComplexity\" deprecated=\"true\" />\n+   <rule ref=\"rulesets/apex/quickstart.xml/AvoidDatabaseMethodCallsInLoops\" deprecated=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDg3Nw==", "bodyText": "That's great, please leave it, thanks! We usually create this file when we merge the PR and update release notes.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780877", "createdAt": "2020-10-10T11:34:13Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/resources/rulesets/releases/6290.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYyNQ=="}, "originalCommit": {"oid": "8fb69b24db2ac934cc175c983b395d6000353da5"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1", "author": {"user": {"login": "jbartolotta-sfdc", "name": "Jeff Bartolotta"}}, "url": "https://github.com/pmd/pmd/commit/98d0f0f38f9134926f90708faff1c5a9963448e1", "committedDate": "2020-10-21T18:25:20Z", "message": "Changes based on initial PR feedback\n\n- Rename AvoidDatabaseMethodCallsInLoopsRule to OperationWithLimitsInLoop.\n- Add AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule checks into OperationWithLimitsInLoop.\n- Deprecate AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule in favor of OperationWithLimitsInLoop."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTM5MzY1", "url": "https://github.com/pmd/pmd/pull/2816#pullrequestreview-514139365", "createdAt": "2020-10-21T19:59:50Z", "commit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1OTo1MVrOHmBomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1OTo1MVrOHmBomw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNDcxNQ==", "bodyText": "Github is showing this diff in an odd way. It's the addition of the depecated attribute on line 129. And the addition of the new OperationWithLimitsInLoop XML.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509634715", "createdAt": "2020-10-21T19:59:51Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/resources/rulesets/apex/quickstart.xml", "diffHunk": "@@ -126,7 +126,16 @@\n          <property name=\"cc_block_highlighting\" value=\"false\" />\n       </properties>\n    </rule>\n-   <rule ref=\"category/apex/performance.xml/AvoidDmlStatementsInLoops\" message=\"Avoid DML Statements inside loops\">\n+   <rule ref=\"category/apex/performance.xml/AvoidDmlStatementsInLoops\" message=\"Avoid DML Statements inside loops\" deprecated=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTM5NzU2", "url": "https://github.com/pmd/pmd/pull/2816#pullrequestreview-514139756", "createdAt": "2020-10-21T20:00:23Z", "commit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowMDoyM1rOHmBsFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowMToxNVrOHmBwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNTYwNg==", "bodyText": "I'm not sure how useful this test is, but I adapted it to pass after deprecating the 3 rules.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509635606", "createdAt": "2020-10-21T20:00:23Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/test/java/net/sourceforge/pmd/lang/apex/DefaultRulesetTest.java", "diffHunk": "@@ -41,10 +44,11 @@ public void cleanup() {\n \n     @Test\n     public void loadQuickstartRuleset() throws Exception {\n+        List<String> logRecords = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNjc1MQ==", "bodyText": "This file now contains all test cases for the 4 cases that can trigger the rule. I copied them from the rules which are being deprecated.", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509636751", "createdAt": "2020-10-21T20:01:15Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/test/resources/net/sourceforge/pmd/lang/apex/rule/performance/xml/OperationWithLimitsInLoop.xml", "diffHunk": "@@ -0,0 +1,413 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODgzMjk0", "url": "https://github.com/pmd/pmd/pull/2816#pullrequestreview-514883294", "createdAt": "2020-10-22T15:57:11Z", "commit": {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4536, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}