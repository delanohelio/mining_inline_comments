{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NTUyODM5", "number": 2282, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTo1MDo1OFrODhdWJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDowNDo0MFrODhdpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDEwNDA1OnYy", "diffSide": "RIGHT", "path": "pmd-java/etc/grammar/Java.jjt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTo1MDo1OFrOFsMxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzozOTowMVrOFs3IrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MTAwNA==", "bodyText": "Interesting - this time without a setter. I've no strong opinion whether we should use jjtThis.setName(VoidName()) or jjtThis.name=VoidName()- whatever we do, we should do it the same in all other AST classes. Using a setter would provide us a bit more flexibility (although I don't know, whether we need/should use that - a setter should not contain too much logic...).", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381891004", "createdAt": "2020-02-20T09:50:58Z", "author": {"login": "adangel"}, "path": "pmd-java/etc/grammar/Java.jjt", "diffHunk": "@@ -2282,47 +2282,32 @@ void RSIGNEDSHIFT() #void:\n \n /* Annotation syntax follows. */\n \n-void Annotation() #void:\n+void Annotation():\n {}\n {\n- LOOKAHEAD( \"@\" VoidName() \"(\" ( <IDENTIFIER> \"=\" | \")\" ))\n- NormalAnnotation()\n-|\n- LOOKAHEAD( \"@\" VoidName() \"(\" )\n- SingleMemberAnnotation()\n-|\n- MarkerAnnotation()\n-}\n-\n-void AnnotationBase(Node n) #void:\n-{String name = null;}\n-{\n-   \"@\" name=VoidName() {n.setImage(name);}\n+    \"@\" jjtThis.name=VoidName() [ AnnotationMemberList() ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NTAwNQ==", "bodyText": "This is something I tried to make the grammar cleaner. But maybe, using a setter would be better, especially if the field is shared (this could be the image field)", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r382585005", "createdAt": "2020-02-21T13:39:01Z", "author": {"login": "oowekyala"}, "path": "pmd-java/etc/grammar/Java.jjt", "diffHunk": "@@ -2282,47 +2282,32 @@ void RSIGNEDSHIFT() #void:\n \n /* Annotation syntax follows. */\n \n-void Annotation() #void:\n+void Annotation():\n {}\n {\n- LOOKAHEAD( \"@\" VoidName() \"(\" ( <IDENTIFIER> \"=\" | \")\" ))\n- NormalAnnotation()\n-|\n- LOOKAHEAD( \"@\" VoidName() \"(\" )\n- SingleMemberAnnotation()\n-|\n- MarkerAnnotation()\n-}\n-\n-void AnnotationBase(Node n) #void:\n-{String name = null;}\n-{\n-   \"@\" name=VoidName() {n.setImage(name);}\n+    \"@\" jjtThis.name=VoidName() [ AnnotationMemberList() ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MTAwNA=="}, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDE1MjY1OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/ASTCastExpressionTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDowNDo0MFrOFsNPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0MTo0NFrOFs3NkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODY1NA==", "bodyText": "Does this work, if it is declared here in ASTCastExpressionTest? I could imagine, this test needs to run before the others... This should probably be moved to the DSL in TestExtensions.kt", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381898654", "createdAt": "2020-02-20T10:04:40Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/ASTCastExpressionTest.kt", "diffHunk": "@@ -140,3 +140,6 @@ class ASTCastExpressionTest : ParserTestSpec({\n \n \n })\n+\n+val Annotatable.declaredAnnotationsList: List<ASTAnnotation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NjI1Ng==", "bodyText": "Toplevel functions and properties in kotlin are translated to static members of a class:\nhttps://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#package-level-functions\nSo this doesn't need to run. But for clarity, since this is used in several tests, it should indeed be put into TestExtensions.kt", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r382586256", "createdAt": "2020-02-21T13:41:44Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/ASTCastExpressionTest.kt", "diffHunk": "@@ -140,3 +140,6 @@ class ASTCastExpressionTest : ParserTestSpec({\n \n \n })\n+\n+val Annotatable.declaredAnnotationsList: List<ASTAnnotation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODY1NA=="}, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}