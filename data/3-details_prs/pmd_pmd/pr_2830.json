{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzc3MjI2", "number": 2830, "title": "[apex] Apexlink POC", "bodyText": "Describe the PR\nThis is a POC for using apexlink to provide unused method analysis.\nTo control the global analysis I have added the flag -multifileanalysisdirectory which should be set to the root directory of the Salesforce metadata, where sfdx-project.json resides. The POC code will fail on non-SFDX projects currently but could be fixed to handle them.\nIf the flag is set then the apexlink analysis runs when the first class file is parsed. On large projects this analysis can take some time so this isn't a good place for it but was OK for a quick POC.\nI have added an AvoidUnusedMethodRule as an example, this peeks into the 'Issues' reported by the apexlink analysis and adds a violation if there is a match. The handling here could be made more efficient, it iterates all Issues for the class on each method, but again this was sufficient to prove the approach was viable.\nI have put a few extra comments in ApexMultifileAnalysis.java that will hopefully help with understanding what is happening.\nRelated issues\n\nFixes #2667", "createdAt": "2020-10-13T20:06:07Z", "url": "https://github.com/pmd/pmd/pull/2830", "merged": true, "mergeCommit": {"oid": "73f86cefb8316defc73d13687b08585a1b593b26"}, "closed": true, "closedAt": "2021-04-16T13:41:32Z", "author": {"login": "nawforce"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMdFuzAH2gAyNTAyNzc3MjI2OjdiZjdiMWEyYzVmOGE5ZDA3NDExN2ZiNzM5MDkyZjcyYjY3OTA0YzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeNR0EoAFqTYzNjM1ODc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "committedDate": "2020-09-25T21:57:50Z", "message": "Add apexlink dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c635d5389f597aad7bdae03c6d8f3f0869b3a516", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/c635d5389f597aad7bdae03c6d8f3f0869b3a516", "committedDate": "2020-09-26T19:56:10Z", "message": "Add a configuration for requesting multi-file analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48c8a71adf640bd43991e9bad6f362819a64a81", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/d48c8a71adf640bd43991e9bad6f362819a64a81", "committedDate": "2020-09-27T21:35:53Z", "message": "Hack in unused method rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/a5fe957b00e42076abd58cbe4faf28f60489ff26", "committedDate": "2020-10-13T19:47:21Z", "message": "Code tidy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjA5NDYy", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-509609462", "createdAt": "2020-10-15T17:27:24Z", "commit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyNzoyNFrOHiSb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0MDozNFrOHiS7Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNTY4OQ==", "bodyText": "The metadata of this rule needs to be updated (since, message, description, example)", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505715689", "createdAt": "2020-10-15T17:27:24Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -35,6 +35,32 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"5.5.0\"\n+          message=\"Deeply nested if..then statements are hard to read\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA==", "bodyText": "This descriptor is unused, right?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505716130", "createdAt": "2020-10-15T17:28:15Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw==", "bodyText": "There is a single RootNode per tree. You can just write node.getRoot()", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505718537", "createdAt": "2020-10-15T17:32:19Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg==", "bodyText": "I think you should encapsulate that into a method like root.getGlobalIssues()", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505721006", "createdAt": "2020-10-15T17:36:01Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n+        if (!parents.isEmpty()) {\n+            // This first parent is outermost\n+            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            return root.getMultifileAnalysis().getFileIssues(root.getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw==", "bodyText": "Please return an unmodifiable List here (or even an Iterable<Issue>). We rarely use arrays in the codebase. You can write Collections.unmodifiableList(Arrays.asList(...))", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722577", "createdAt": "2020-10-15T17:38:47Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA==", "bodyText": "Is there a constant somewhere we could use instead of this hardcoded string?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722820", "createdAt": "2020-10-15T17:39:12Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA==", "bodyText": "Please make this class @Experimental", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505723670", "createdAt": "2020-10-15T17:40:34Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDM1MTIy", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-510435122", "createdAt": "2020-10-16T12:47:56Z", "commit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0Nzo1NlrOHi6xdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwODoyMTo0NlrOHjZskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA==", "bodyText": "What were the specific problems you got?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506376564", "createdAt": "2020-10-16T12:47:56Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "diffHunk": "@@ -7,16 +7,22 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n import net.sourceforge.pmd.lang.ast.RootNode;\n import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n \n import apex.jorje.semantic.ast.AstNode;\n import apex.jorje.services.Version;\n \n+@SuppressWarnings(\"PMD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng==", "bodyText": "We can use in PMD 7 java8 features, e.g.\ngetIssues(node).stream()\n    .filter(issue -> \"Unused\".equals(issue.diagnostic().category().value())\n    .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n    .filter(issue -> issue.diagnostic().location().endLine() <= node.getEndLine())\n    .forEach(issue -> addViolation(data, node));", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506386946", "createdAt": "2020-10-16T12:58:22Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA==", "bodyText": "This option is language dependent, I agree with @oowekyala that this would be a fit for language properties.\nSo that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.\nFor me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?\nOk, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506883218", "createdAt": "2020-10-17T08:21:46Z", "author": {"login": "adangel"}, "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "diffHunk": "@@ -75,6 +75,10 @@\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n+    @Parameter(names = \"-multifileanalysisdirectory\",\n+            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "committedDate": "2020-10-22T20:40:44Z", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpmd-apex/pom.xml\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/lang/ParserOptions.java\n#\tpom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279c673341335b138d1f31637a6613a0276f9882", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/279c673341335b138d1f31637a6613a0276f9882", "committedDate": "2020-10-24T20:08:58Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98ec556c7281fd04765181ccc8a24a4f99548b0", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/d98ec556c7281fd04765181ccc8a24a4f99548b0", "committedDate": "2020-10-24T20:11:49Z", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862ee7b236a379d39d7ced5131b90be6bb5e3030", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/862ee7b236a379d39d7ced5131b90be6bb5e3030", "committedDate": "2020-10-26T20:23:07Z", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "committedDate": "2021-02-13T20:02:09Z", "message": "Merge branch '7.0.x' into pr/2830"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb359c290eabe8093ad21e317a4c7d9d71d20287", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/fb359c290eabe8093ad21e317a4c7d9d71d20287", "committedDate": "2021-02-13T20:14:43Z", "message": "Remove some things from pmd core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb4a082d845e94a590185c331ddb057079e9c51", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8fb4a082d845e94a590185c331ddb057079e9c51", "committedDate": "2021-02-13T20:18:47Z", "message": "Remove sentinel value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "committedDate": "2021-02-13T20:28:24Z", "message": "Simplify tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0MTY3NDMy", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-594167432", "createdAt": "2021-02-19T13:04:23Z", "commit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowNDoyNFrOIoVtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMzowOToxNFrOIoV4Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE2OTU0Ng==", "bodyText": "Note: there is already 1.2.2 available: https://repo1.maven.org/maven2/com/github/nawforce/apexlink/", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579169546", "createdAt": "2021-02-19T13:04:24Z", "author": {"login": "adangel"}, "path": "pmd-apex/pom.xml", "diffHunk": "@@ -54,6 +54,13 @@\n             <type>pom</type>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.github.nawforce</groupId>\n+            <artifactId>apexlink</artifactId>\n+            <version>1.1.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE3MTk0Nw==", "bodyText": "If I understand this correctly, then not only private unused methods are found, but also public methods, that are not in use by any other class. That's maybe worth mentioning here in the documentation.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579171947", "createdAt": "2021-02-19T13:08:29Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -408,6 +408,37 @@ public class Person {\n     Date birthDate;\n     BodyMeasurements measurements;\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+            Avoid having unused methods since they make understanding and maintaining code harder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE3MjM3NA==", "bodyText": "Let's keep the alphabetical order of the rules in the file and move this rule declaration up.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r579172374", "createdAt": "2021-02-19T13:09:14Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -408,6 +408,37 @@ public class Person {\n     Date birthDate;\n     BodyMeasurements measurements;\n }\n+]]>\n+        </example>\n+    </rule>\n+\n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "committedDate": "2021-02-23T18:24:00Z", "message": "Update ApexLink to 1.2.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "committedDate": "2021-02-23T18:25:29Z", "message": "Update ruledoc for AvoidUnusedMethod (apex)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516", "author": {"user": {"login": "adangel", "name": "Andreas Dangel"}}, "url": "https://github.com/pmd/pmd/commit/ee6e819ff77e8d2f607f3439d2af32738a389516", "committedDate": "2021-02-23T18:29:31Z", "message": "[doc] Update release notes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI3NDc2Mzc4", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-627476378", "createdAt": "2021-04-03T18:12:11Z", "commit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wM1QxODoxMjoxMVrOJClo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wM1QxODoxMjoxMVrOJClo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY5MzYxOA==", "bodyText": "@nawforce Hi, as a last step before merging this, could you document as thoroughly as possible what the project structure needs to look like for this to work properly? From this thread I could gather, that\n\nThe project needs to use the SDFX format (would be nice to include this link)\nThe -dir option needs to point to a subset of the source tree listed in the sdfx-project.json, otherwise we would just be pointing to some unrelated sources, but we don't actually check this and treat this as an error (yet)\nGiven a source tree in the correct format and a sdfx-project.json, ApexLink will generate the missing metadata if need be, and everything should run smoothly in one step (no manual pre-generation or so).\n\nIs this correct?\nI think the goal this doc should achieve, is that even an unexperienced developer, who doesn't know ApexLink, can get a pretty good idea of how to configure the rule, and what ApexLink will do to their files. I don't feel like I know enough about your tool or Apex in general to write this up myself.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r606693618", "createdAt": "2021-04-03T18:12:11Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,44 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.AvoidUnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#avoidunusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+        </description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae195a8179609240e408e942540b695266b9e615", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/ae195a8179609240e408e942540b695266b9e615", "committedDate": "2021-04-06T23:01:25Z", "message": "Merge branch '7.0.x' into apexlink"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c314ba84b27911d5d4c8144dcc423e064bf24bc8", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c314ba84b27911d5d4c8144dcc423e064bf24bc8", "committedDate": "2021-04-06T23:04:47Z", "message": "Fix APEX_ROOT_DIRECTORY not being set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77fbc0bb4465eac30f5f4612f179041990f43675", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/77fbc0bb4465eac30f5f4612f179041990f43675", "committedDate": "2021-04-06T23:19:47Z", "message": "Merge branch '7.0.x' into apexlink"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/862a320b7d5e2b3e8b4df8ce0eabead35810f730", "committedDate": "2021-04-06T23:20:19Z", "message": "Add language attribute"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMxNzExOTYz", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-631711963", "createdAt": "2021-04-08T18:26:28Z", "commit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOFQxODoyNjoyOVrOJFudiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOFQxODoyNjoyOVrOJFudiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw==", "bodyText": "Should this be LOG.error?", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r609983883", "createdAt": "2021-04-08T18:26:29Z", "author": {"login": "jbartolotta-sfdc"}, "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a421fed82f72f55066932c6731ab49d4230222", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/b2a421fed82f72f55066932c6731ab49d4230222", "committedDate": "2021-04-08T19:38:44Z", "message": "Upgrade apex-link version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c8c3b365de224e785ee46504944f1e286165da", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/97c8c3b365de224e785ee46504944f1e286165da", "committedDate": "2021-04-08T20:38:50Z", "message": "Extend description on AvoidUnusedMethod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/cf3ed1cd04901034458c9860df3c4b21bcccee0c", "committedDate": "2021-04-09T12:35:18Z", "message": "Only attempt loading once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1572484bf0d46c049660ecce6b41e9f6e7d7572b", "committedDate": "2021-04-09T12:38:21Z", "message": "Merge branch '7.0.x' into apexlink"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMyMzc4NDcy", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-632378472", "createdAt": "2021-04-09T12:52:43Z", "commit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQxMjo1Mjo0NFrOJGUIgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQxMjo1Mjo0NFrOJGUIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYwMTA4OA==", "bodyText": "Maybe the last thing I would change is to name this rule UnusedMethod. I'm not a fan of rule names which start with a verb... I think the passive is more neutral. Like \"hey, I found an unused method (but of course you already know that you should avoid them, so I'm not commanding you)\"\nBesides, the corresponding Java rules are also named without Avoid, and consistency across languages is desirable I think", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610601088", "createdAt": "2021-04-09T12:52:44Z", "author": {"login": "oowekyala"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,64 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidUnusedMethod\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1187b9e4e149582912c5dc649a3872e7d79a7e8c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1187b9e4e149582912c5dc649a3872e7d79a7e8c", "committedDate": "2021-04-09T14:19:57Z", "message": "Add tests for logging behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "author": {"user": {"login": "nawforce", "name": "Kevin Jones"}}, "url": "https://github.com/pmd/pmd/commit/8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "committedDate": "2021-04-14T21:29:05Z", "message": "Change rule name to UnusedMethod, correct logging and add FIXME"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MzU4NzQx", "url": "https://github.com/pmd/pmd/pull/2830#pullrequestreview-636358741", "createdAt": "2021-04-15T07:34:40Z", "commit": {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQwNzozNDo0MFrOJJY-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQwNzozNDo0MFrOJJY-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzgyNjA4MQ==", "bodyText": "I think we should surround this code snippet with \"```json\" ... \"```\" to have it rendered nicely in the rule docs.", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613826081", "createdAt": "2021-04-15T07:34:40Z", "author": {"login": "adangel"}, "path": "pmd-apex/src/main/resources/category/apex/design.xml", "diffHunk": "@@ -36,6 +36,73 @@ public class Foo {\n         </example>\n     </rule>\n \n+    <rule name=\"UnusedMethod\"\n+          language=\"apex\"\n+          since=\"7.0.0\"\n+          message=\"Unused methods make understanding code harder\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.design.UnusedMethodRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_design.html#unusedmethod\">\n+        <description>\n+Avoid having unused methods since they make understanding and maintaining code harder.\n+\n+This rule finds not only unused private methods, but public methods as well.\n+\n+[ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs\n+additional configuration. The environment variable `PMD_APEX_ROOTDIRECTORY` needs to be set prior to executing\n+PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is\n+specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not.\n+\n+For an accurate analysis it is important that the `PMD_APEX_ROOTDIRECTORY` contains a complete set of metadata that\n+may be referenced from the Apex source code, such as Custom Objects, Visualforce Pages, Flows and Labels. The\n+`PMD_APEX_ROOTDIRECTORY` directory must contain a 'sfdx-project.json', but metadata may be either in the\n+[SFDX Source format](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm)\n+or the older MDAPI format. The 'packageDirectories' entries in 'sfdx-project.json' are used to determine which\n+directories to search for metadata, if a .forceignore file is present it will be honoured.\n+\n+If the Apex code references external packages via namespace(s) you should declare these in your 'sfdx-project.json'\n+file using the 'plugins' syntax below to avoid errors:\n+<![CDATA[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}