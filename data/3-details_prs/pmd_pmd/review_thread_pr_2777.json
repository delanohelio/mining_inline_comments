{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1ODg5MDc3", "number": 2777, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozMDoyNVrOEkgxpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozMDoyNVrOEkgxpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzIxMTkxOnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/internal/AnnotationSuppressionUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozMDoyNVrOHTfuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozMDoyNVrOHTfuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNDc0OQ==", "bodyText": "(\"PMD.\" + rule.getName()).equals(stringVal) // NOPMD uselessparentheses false positive\n\nSeems to be #2739", "url": "https://github.com/pmd/pmd/pull/2777#discussion_r490204749", "createdAt": "2020-09-17T12:30:25Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/internal/AnnotationSuppressionUtil.java", "diffHunk": "@@ -108,15 +109,19 @@ private static boolean hasSuppressWarningsAnnotationFor(final Annotatable node,\n     // @formatter:on\n     private static boolean annotationSuppresses(ASTAnnotation annotation, Rule rule) {\n         if (TypeTestUtil.isA(SuppressWarnings.class, annotation)) {\n-            for (ASTStringLiteral element : annotation.findDescendantsOfType(ASTStringLiteral.class)) {\n-                if (element.hasImageEqualTo(\"\\\"PMD\\\"\") || element.hasImageEqualTo(\n-                    \"\\\"PMD.\" + rule.getName() + \"\\\"\")\n-                    // Check for standard annotations values\n-                    || element.hasImageEqualTo(\"\\\"all\\\"\")\n-                    || element.hasImageEqualTo(\"\\\"serial\\\"\") && SERIAL_RULES.contains(rule.getName())\n-                    || element.hasImageEqualTo(\"\\\"unused\\\"\") && UNUSED_RULES.contains(rule.getName())\n-                    || element.hasImageEqualTo(\"\\\"all\\\"\")) {\n-                    return true;\n+            for (ASTMemberValue value : annotation.getValuesForName(ASTMemberValuePair.VALUE_ATTR)) {\n+                Object constVal = value.getConstValue();\n+                if (constVal instanceof String) {\n+                    String stringVal = (String) constVal;\n+                    if (\"PMD\".equals(stringVal)\n+                        || (\"PMD.\" + rule.getName()).equals(stringVal) // NOPMD uselessparentheses false positive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5b18fb25dcfeb569786d0a4ef683fcf5a2596e"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 333, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}