{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzIwNTIw", "number": 2983, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0NTo1MVrOFMKVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0NTo1MVrOFMKVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mjk2NDc1OnYy", "diffSide": "RIGHT", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/LiteralsFirstInComparisonsRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0NTo1MVrOIPvI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0NTo1MVrOIPvI_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3MTkwMw==", "bodyText": "This can be written as\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    && \"class java.lang.String\".equals(declaration.getType().toString())\n          \n          \n            \n                                    && java.lang.String.class.equals(declaration.getType())", "url": "https://github.com/pmd/pmd/pull/2983#discussion_r553371903", "createdAt": "2021-01-07T14:45:51Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/LiteralsFirstInComparisonsRule.java", "diffHunk": "@@ -147,6 +159,25 @@ private boolean isStringLiteral(JavaNode node) {\n         return false;\n     }\n \n+    private boolean isConstantString(JavaNode node) {\n+        if (node instanceof ASTName) {\n+            ASTName name = (ASTName) node;\n+            ASTClassOrInterfaceBody classBody = name.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+            ASTClassOrInterfaceBodyDeclaration classOrInterfaceBodyDeclaration = classBody.getFirstChildOfType(ASTClassOrInterfaceBodyDeclaration.class);\n+            List<ASTFieldDeclaration> fieldDeclarations = classOrInterfaceBodyDeclaration.findChildrenOfType(ASTFieldDeclaration.class);\n+            for (ASTFieldDeclaration fieldDeclaration : fieldDeclarations) {\n+                ASTVariableDeclarator declaration = fieldDeclaration.getFirstChildOfType(ASTVariableDeclarator.class);\n+                if (declaration.getName().equals(name.getImage())\n+                        && \"class java.lang.String\".equals(declaration.getType().toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbb90cb133f6933122c885cea1d8d9d711565d"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 239, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}