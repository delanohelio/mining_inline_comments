{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzU3MTUw", "number": 2665, "title": "[java] Name disambiguation in annotations", "bodyText": "Describe the PR\nImplement name disambiguation for annotations. This is implemented by adding a ClassOrInterfaceType inside the annotation, so that the logic is reused. This means, ClassOrInterfaceType is used everywhere a type (or type name, not the same thing) is explicitly written (apart from import statements).\nThis also removes/deprecates some API we don't need anymore:\n\nAnnotation#getAnnotationName: annotations now have a symbol, which is much more useful and powerful than just this name\nClassOrInterfaceType#isAnonymousClass: this is just meaningless now\nClassOrInterfaceType#getImage: now always returns null. There is still getSimpleName, or better, the symbol.\nASTType#getTypeImage (deprecated for now): with type resolution there will be more useful ways to pretty print the type. The type image is used to implement rules right now, it would be much more robust to use symbols or subtyping checks instead, when type resolution is done.\nASTThrowStatement#getFirstClassOrInterfaceTypeImage: this is too specific and quite frankly, useless. The only usage was in ExceptionForFlowControl. This rule compares the name of a thrown exception with the name of a caught exception. It doesn't work unless the name is explicitly written (throw new E()). When we have full type resolution we can just use the static type of the expression. The rule is rewritten to compare symbols for now.\nClassOrInterfaceType#isReferenceToClassSameCompilationUnit (deprecated for now): this is used to implement a fallback when type resolution fails (because of an incomplete classpath). With the new type resolution we won't need it, as if the referenced symbol is declared in the same file, we use the AST in place of a Class transparently.\n\nThe validation of disambiguated types is stricter now (eg we report an error if you write List<A, B>)\nI made sure that ExceptionForFlowControl passes tests, but this will only be true when  #2664 is merged\nRelated issues\nReady?\n\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-07-26T14:26:31Z", "url": "https://github.com/pmd/pmd/pull/2665", "merged": true, "mergeCommit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "closed": true, "closedAt": "2020-07-30T18:50:52Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4Ly_3AH2gAyNDU2NzU3MTUwOjY0ZWUwNzNmY2FjYTYyZGExMjAyMzcyNmI1YTY2ODMyNTNjNmJmYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6BrsNgFqTQ1ODUzNDY5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "64ee073fcaca62da12023726b5a6683253c6bfa1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/64ee073fcaca62da12023726b5a6683253c6bfa1", "committedDate": "2020-07-24T22:30:30Z", "message": "Annotation disambiguation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d8f49010e62caf9b5a3954503665de89690a39", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/95d8f49010e62caf9b5a3954503665de89690a39", "committedDate": "2020-07-24T23:24:57Z", "message": "Tighter validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516a3866835ada3b51fdd080bb4f9b6a5a4656b1", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/516a3866835ada3b51fdd080bb4f9b6a5a4656b1", "committedDate": "2020-07-26T12:30:18Z", "message": "Remove image of ClassOrInterfaceType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1770cdc22777414ad2e10e716d079a80e8934223", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1770cdc22777414ad2e10e716d079a80e8934223", "committedDate": "2020-07-26T13:10:26Z", "message": "Remove some methods that depend on type image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a14d7363bf6a3dbbb8ed21bfb5ca0500ccfba91", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/2a14d7363bf6a3dbbb8ed21bfb5ca0500ccfba91", "committedDate": "2020-07-26T13:27:52Z", "message": "Complete designer bindings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "committedDate": "2020-07-26T14:24:45Z", "message": "Better errors for annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjI1NzY0", "url": "https://github.com/pmd/pmd/pull/2665#pullrequestreview-458225764", "createdAt": "2020-07-30T09:12:51Z", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToxMjo1MVrOG5a1Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToxMjo1MVrOG5a1Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MTYzNQ==", "bodyText": "Would it make sense to keep a deprecated getAnnotationName() method around (DeprecatedUntil700)?", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462861635", "createdAt": "2020-07-30T09:12:51Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTAnnotation.java", "diffHunk": "@@ -9,45 +9,47 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n import net.sourceforge.pmd.lang.ast.NodeStream;\n-import net.sourceforge.pmd.util.StringUtil;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n \n /**\n  * Represents an annotation.\n  *\n  * <pre class=\"grammar\">\n  *\n- * Annotation ::= \"@\" Name {@link ASTAnnotationMemberList AnnotationMemberList}?\n+ * Annotation ::= \"@\" {@link ASTClassOrInterfaceType ClassName} {@link ASTAnnotationMemberList AnnotationMemberList}?\n  *\n  * </pre>\n  */\n public final class ASTAnnotation extends AbstractJavaTypeNode implements TypeNode, ASTMemberValue, Iterable<ASTMemberValuePair> {\n \n-    String name;\n-\n     ASTAnnotation(int id) {\n         super(id);\n     }\n \n \n     /**\n-     * Returns the name of the annotation as it is used,\n-     * eg {@code java.lang.Override} or {@code Override}.\n+     * Returns the node that represents the name of the annotation.\n      */\n-    public String getAnnotationName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjMwMDMx", "url": "https://github.com/pmd/pmd/pull/2665#pullrequestreview-458230031", "createdAt": "2020-07-30T09:18:25Z", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToxODoyNVrOG5bBYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToxODoyNVrOG5bBYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDczNw==", "bodyText": "I guess, we should deprecate this method on master. It seems to be used only by one rule - ExceptionAsFlowControl", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462864737", "createdAt": "2020-07-30T09:18:25Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTThrowStatement.java", "diffHunk": "@@ -32,23 +32,4 @@ public ASTExpression getExpr() {\n         return (ASTExpression) getFirstChild();\n     }\n \n-    /**\n-     * Gets the image of the first ASTClassOrInterfaceType child or\n-     * <code>null</code> if none is found. Note that when the statement is\n-     * something like throw new Exception, this method returns 'Exception' and\n-     * if the throw statement is like throw e: this method returns 'e'. A\n-     * special case of returning <code>null</code> is when the throws is like\n-     * throw this.e or throw this.\n-     *\n-     * This is too specific\n-     *\n-     * <p>TODO - use symbol table (?)</p>\n-     *\n-     * @return the image of the first ASTClassOrInterfaceType node found or\n-     *     <code>null</code>\n-     */\n-    public String getFirstClassOrInterfaceTypeImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjMxNjA4", "url": "https://github.com/pmd/pmd/pull/2665#pullrequestreview-458231608", "createdAt": "2020-07-30T09:20:42Z", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToyMDo0MlrOG5bGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToyMDo0MlrOG5bGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NjAzMQ==", "bodyText": "We'll get a PositionLiteralFirstInComparison violation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (annotation.getSymbol().getBinaryName().equals(\"java.lang.SuppressWarnings\")) {\n          \n          \n            \n                    if (\"java.lang.SuppressWarnings\".equals(annotation.getSymbol().getBinaryName())) {", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462866031", "createdAt": "2020-07-30T09:20:42Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/internal/AnnotationSuppressionUtil.java", "diffHunk": "@@ -107,9 +106,8 @@ private static boolean hasSuppressWarningsAnnotationFor(final Annotatable node,\n \n     // @formatter:on\n     private static boolean annotationSuppresses(ASTAnnotation annotation, Rule rule) {\n-        // if (SuppressWarnings.class.equals(getType())) { // typeres is not always on\n-        if (TypeHelper.isA(annotation, SuppressWarnings.class)) {\n-            for (ASTLiteral element : annotation.findDescendantsOfType(ASTLiteral.class)) {\n+        if (annotation.getSymbol().getBinaryName().equals(\"java.lang.SuppressWarnings\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjM1MDc0", "url": "https://github.com/pmd/pmd/pull/2665#pullrequestreview-458235074", "createdAt": "2020-07-30T09:25:32Z", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTM0Njkw", "url": "https://github.com/pmd/pmd/pull/2665#pullrequestreview-458534690", "createdAt": "2020-07-30T15:51:18Z", "commit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTo1MToxOFrOG5pNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTo1MToxOFrOG5pNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5NzE4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        val err = logger.errors[SemanticChecksLogger.MALFORMED_GENERIC_TYPE]?.firstOrNull { it.first == t }\n          \n          \n            \n                        val err = logger.errors[SemanticChecksLogger.EXPECTED_ANNOTATION_TYPE]?.firstOrNull { it.first == t }", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r463097187", "createdAt": "2020-07-30T15:51:18Z", "author": {"login": "oowekyala"}, "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/TypeDisambiguationTest.kt", "diffHunk": "@@ -133,4 +137,101 @@ class TypeDisambiguationTest : ParserTestSpec({\n             refInScratch.referencedSym shouldBe aMem\n         }\n     }\n+\n+    parserTest(\"Malformed types\") {\n+        val logger = enableProcessing()\n+\n+        val acu = parser.parse(\"\"\"\n+           package p;\n+           class Scratch<X> {\n+               static class K {}\n+               static class Foo<Y, X> {}\n+               class Inner<Y> {} // non-static\n+\n+               Scratch.Foo<K, K>        m0; // ok\n+               Scratch.K<K>             m1; // error\n+               Scratch.K                m2; // ok\n+               Scratch.Foo<K>           m3; // error\n+               Scratch.Foo<K, K, K>     m4; // error\n+               Scratch.Foo              m5; // raw type, ok\n+\n+               Scratch<K>               s0; // ok\n+               Scratch<K, K>            s1; // error\n+               Scratch                  s2; // raw type, ok\n+\n+               // Scratch<K>.Foo        m6; // todo error: Foo is static\n+               // Scratch<K>.Foo<K, K>  m7; // todo error: Foo is static\n+\n+               // Scratch<K>.Inner<K, K>    m; // ok, fully parameterized\n+               // Scratch.Inner<K, K>       m; // todo error: Scratch must be parameterized \n+               // Scratch.Inner             m; // ok, raw type\n+           }\n+        \"\"\")\n+\n+        val (m0, m1, m2, m3, m4, m5, s0, s1, s2) =\n+                acu.descendants(ASTFieldDeclaration::class.java).map { it.typeNode as ASTClassOrInterfaceType }.toList()\n+\n+        fun assertErrored(t: ASTClassOrInterfaceType, expected: Int, actual: Int) {\n+            val errs = logger.errors[SemanticChecksLogger.MALFORMED_GENERIC_TYPE]?.filter { it.first == t } ?: emptyList()\n+            assertEquals(errs.size, 1, \"`${t.text}` should have produced a single error\")\n+            errs.single().second.toList() shouldBe listOf(expected, actual)\n+        }\n+\n+        fun assertNoError(t: ASTClassOrInterfaceType) {\n+            val err = logger.errors[SemanticChecksLogger.MALFORMED_GENERIC_TYPE]?.firstOrNull { it.first == t }\n+            assertNull(err, \"`${t.text}` should not have produced an error\")\n+        }\n+\n+        assertNoError(m0)\n+        assertErrored(m1, expected = 0, actual = 1)\n+        assertNoError(m2)\n+        assertErrored(m3, expected = 2, actual = 1)\n+        assertErrored(m4, expected = 2, actual = 3)\n+        assertNoError(m5)\n+\n+        assertNoError(s0)\n+        assertErrored(s1, expected = 1, actual = 2)\n+        assertNoError(s2)\n+    }\n+\n+    parserTest(\"Invalid annotations\") {\n+        val logger = enableProcessing()\n+\n+        val acu = parser.parse(\"\"\"\n+           package p;\n+           class C<T> {\n+                @interface A { }\n+                interface I { }\n+\n+\n+                @T\n+                @C\n+                @I\n+                @Unresolved\n+                @A\n+                int field;\n+           }\n+        \"\"\")\n+\n+        val (aT, aC, aI, aUnresolved, aOk) =\n+                acu.descendants(ASTAnnotation::class.java).map { it.typeNode }.toList()\n+\n+        fun assertErrored(t: ASTClassOrInterfaceType) {\n+            val errs = logger.errors[SemanticChecksLogger.EXPECTED_ANNOTATION_TYPE]?.filter { it.first == t } ?: emptyList()\n+            assertEquals(errs.size, 1, \"`${t.text}` should have produced a single error\")\n+            errs.single().second.toList() shouldBe emptyList()\n+        }\n+\n+        fun assertNoError(t: ASTClassOrInterfaceType) {\n+            val err = logger.errors[SemanticChecksLogger.MALFORMED_GENERIC_TYPE]?.firstOrNull { it.first == t }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4651, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}