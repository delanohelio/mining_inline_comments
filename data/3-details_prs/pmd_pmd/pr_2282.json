{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NTUyODM5", "number": 2282, "title": "[java] Use single node for annotations", "bodyText": "Grammar change is described below. This also makes Annotatable use node streams.\nAnnotations\n\nWhat: Annotations are consolidated into a single node. SingleMemberAnnotation, NormalAnnotation and MarkerAnnotation are removed in favour of Annotation. The Name node is removed.\nWhy: Those different node types implement a syntax-only distinction, that only makes semantically equivalent annotations have different possible representations. For example, @A and @A() are semantically equivalent, yet they were parsed as MarkerAnnotation resp. NormalAnnotation. Similarly, @A(\"\") and @A(value=\"\") were parsed as SingleMemberAnnotation resp. NormalAnnotation. This also makes parsing much simpler.\n\n\nCodeOld ASTNew AST\n\n@A\n\n+ Annotation\n  + MarkerAnnotation\n    + Name \"A\"\n\n+ Annotation \"A\"\n\n\n@A()\n\n\n+ Annotation\n  + NormalAnnotation\n    + Name \"A\"\n\n\n+ Annotation\n  + AnnotationMemberList\n\n\n\n@A(value=\"v\")\n\n\n+ Annotation\n  + NormalAnnotation\n    + Name \"A\"\n    + MemberValuePairs\n      + MemberValuePair \"value\"\n        + MemberValue\n          + PrimaryExpression\n            + PrimaryPrefix\n              + Literal '\"v\"'\n\n\n+ Annotation\n  + AnnotationMemberList\n    + MemberValuePair \"value\" [@Shorthand=false()]\n      + StringLiteral '\"v\"'\n\n\n\n@A(\"v\")\n\n\n+ Annotation\n  + SingleMemberAnnotation\n    + Name \"A\"\n    + MemberValue\n      + PrimaryExpression\n        + PrimaryPrefix\n          + Literal '\"v\"'\n\n\n+ Annotation\n  + AnnotationMemberList\n    + MemberValuePair \"value\" [@Shorthand=true()]\n      + StringLiteral '\"v\"'\n\n\n\n@A(value=\"v\", on=true)\n\n\n+ Annotation\n  + NormalAnnotation\n    + Name \"A\"\n    + MemberValuePairs\n      + MemberValuePair \"value\"\n        + MemberValue\n          + PrimaryExpression\n            + PrimaryPrefix\n              + Literal '\"v\"'\n      + MemberValuePair \"on\"\n        + MemberValue\n          + PrimaryExpression\n            + PrimaryPrefix\n              + Literal\n                + BooleanLiteral [@True=true()]\n\n\n+ Annotation\n  + AnnotationMemberList\n    + MemberValuePair \"value\" [@Shorthand=false()]\n      + StringLiteral '\"v\"'\n    + MemberValuePair \"on\"\n      + BooleanLiteral [@True=true()]", "createdAt": "2020-02-12T21:47:16Z", "url": "https://github.com/pmd/pmd/pull/2282", "merged": true, "mergeCommit": {"oid": "a67043edc5ae650abf9956fc3a9f98abe48bd06d"}, "closed": true, "closedAt": "2020-02-20T10:18:13Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDtKg4AH2gAyMzc0NTUyODM5Ojk3YjE4NzA0NzI2ZWYxZmE5YzgwNzg4NzUyNGRlMTE2OWY1ZDhkN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGIPgGAFqTM2MTc2MzQwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97b18704726ef1fa9c807887524de1169f5d8d7a", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/97b18704726ef1fa9c807887524de1169f5d8d7a", "committedDate": "2020-02-12T21:25:04Z", "message": "Unify repr of annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d4a540544d827384d44cf9b7912a84130facad5", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/1d4a540544d827384d44cf9b7912a84130facad5", "committedDate": "2020-02-12T21:25:04Z", "message": "Remove old classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc07fa3c32c4c87e71c63b397a0090f48dc3d809", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/cc07fa3c32c4c87e71c63b397a0090f48dc3d809", "committedDate": "2020-02-12T21:25:04Z", "message": "Fix odd refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/66e43ba07d563009e4b35f7961def47109206b2f", "committedDate": "2020-02-14T00:55:27Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzYzNDA3", "url": "https://github.com/pmd/pmd/pull/2282#pullrequestreview-361763407", "createdAt": "2020-02-20T09:50:58Z", "commit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTo1MDo1OFrOFsMxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDowNDo0MFrOFsNPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MTAwNA==", "bodyText": "Interesting - this time without a setter. I've no strong opinion whether we should use jjtThis.setName(VoidName()) or jjtThis.name=VoidName()- whatever we do, we should do it the same in all other AST classes. Using a setter would provide us a bit more flexibility (although I don't know, whether we need/should use that - a setter should not contain too much logic...).", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381891004", "createdAt": "2020-02-20T09:50:58Z", "author": {"login": "adangel"}, "path": "pmd-java/etc/grammar/Java.jjt", "diffHunk": "@@ -2282,47 +2282,32 @@ void RSIGNEDSHIFT() #void:\n \n /* Annotation syntax follows. */\n \n-void Annotation() #void:\n+void Annotation():\n {}\n {\n- LOOKAHEAD( \"@\" VoidName() \"(\" ( <IDENTIFIER> \"=\" | \")\" ))\n- NormalAnnotation()\n-|\n- LOOKAHEAD( \"@\" VoidName() \"(\" )\n- SingleMemberAnnotation()\n-|\n- MarkerAnnotation()\n-}\n-\n-void AnnotationBase(Node n) #void:\n-{String name = null;}\n-{\n-   \"@\" name=VoidName() {n.setImage(name);}\n+    \"@\" jjtThis.name=VoidName() [ AnnotationMemberList() ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODY1NA==", "bodyText": "Does this work, if it is declared here in ASTCastExpressionTest? I could imagine, this test needs to run before the others... This should probably be moved to the DSL in TestExtensions.kt", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381898654", "createdAt": "2020-02-20T10:04:40Z", "author": {"login": "adangel"}, "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/ASTCastExpressionTest.kt", "diffHunk": "@@ -140,3 +140,6 @@ class ASTCastExpressionTest : ParserTestSpec({\n \n \n })\n+\n+val Annotatable.declaredAnnotationsList: List<ASTAnnotation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e43ba07d563009e4b35f7961def47109206b2f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4882, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}