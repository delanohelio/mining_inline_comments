{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Mjc2OTEx", "number": 2897, "title": "[java] Update UnnecessaryFullyQualifiedName", "bodyText": "Describe the PR\nUpdate rule UnnecessaryFullyQualifiedName. The rule uses the new symbol table, so it's much simpler. Hopefully it's also more precise. For method calls we err on the side of false-negatives instead of false positives. Let's see the regression report (though, messages have changed)\nRelated issues\n\nAn item of #2701\n\nReady?\n\n Added unit tests for fixed bug/feature\n Passing all unit tests\n Complete build ./mvnw clean verify passes (checked automatically by travis)\n Added (in-code) documentation (if needed)", "createdAt": "2020-11-02T19:41:26Z", "url": "https://github.com/pmd/pmd/pull/2897", "merged": true, "mergeCommit": {"oid": "b661abe3bda85c75a2d8e5af60f3c15b1b629534"}, "closed": true, "closedAt": "2020-11-06T13:40:12Z", "author": {"login": "oowekyala"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYoJu1gH2gAyNTE0Mjc2OTExOmY1YzNjMTUyZWI2NmIzNGI2MmY3ZWQ1ZjQxZmY3MjY3YWIyNWVmY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ26p-gFqTUyNTEzNDMwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f5c3c152eb66b34b62f7ed5f41ff7267ab25efcc", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f5c3c152eb66b34b62f7ed5f41ff7267ab25efcc", "committedDate": "2020-11-02T17:38:15Z", "message": "Reimplement UnnecessaryFullyQualifiedName\n\nFix tests\n\nDoesn't work yet for static method calls:\nresolution of methods needs type resolution.\nAlso fails with same package if classloader\nis not set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19dba1377266387909f8c0f960ca32052631048", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/e19dba1377266387909f8c0f960ca32052631048", "committedDate": "2020-11-02T18:01:54Z", "message": "Simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6616795f5dc6ced1c8576e9507cebc84ea2171b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b6616795f5dc6ced1c8576e9507cebc84ea2171b", "committedDate": "2020-11-02T18:39:55Z", "message": "Support methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae64dbb540e0a3400603deaf4467ae434c2192f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/6ae64dbb540e0a3400603deaf4467ae434c2192f", "committedDate": "2020-11-02T18:42:54Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d1ca4db0bff140a91c3493c8aab6b74ed77188", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/c3d1ca4db0bff140a91c3493c8aab6b74ed77188", "committedDate": "2020-11-02T19:52:14Z", "message": "Fix PMD warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3353191f0018fdc6d6124c29f014f04f7cc415b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d3353191f0018fdc6d6124c29f014f04f7cc415b", "committedDate": "2020-11-02T21:07:40Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "720678eac9ea1225f05de7a6097fca0b47659194", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/720678eac9ea1225f05de7a6097fca0b47659194", "committedDate": "2020-11-02T21:11:11Z", "message": "Handle type obscuring\n\nFix #1790"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7acbcc869417439a879e2d2e0f4a980bfa14fde5", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7acbcc869417439a879e2d2e0f4a980bfa14fde5", "committedDate": "2020-11-02T21:12:58Z", "message": "Ensure #2299 is fixed\n\nfix #2299"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66516b2d3a540bce0fce1530e8ae47bf08b5848", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/d66516b2d3a540bce0fce1530e8ae47bf08b5848", "committedDate": "2020-11-02T21:20:20Z", "message": "Add more test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2fe42af4f0677e79d2320d315f82219bd6e18c", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/9a2fe42af4f0677e79d2320d315f82219bd6e18c", "committedDate": "2020-11-02T21:22:29Z", "message": "Fix fp with method type arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33bc87f8310bb3797d12de3ad506de9b96b69f40", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/33bc87f8310bb3797d12de3ad506de9b96b69f40", "committedDate": "2020-11-02T22:01:50Z", "message": "Add todo test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59881c9338721af99ae6b570030ceacf470a61fe", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/59881c9338721af99ae6b570030ceacf470a61fe", "committedDate": "2020-11-03T06:06:06Z", "message": "Add properties to control behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc9d3166bea57c8722c7fa686db12ab0c0d82b4", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/8fc9d3166bea57c8722c7fa686db12ab0c0d82b4", "committedDate": "2020-11-03T06:28:36Z", "message": "Fix problem with method imported through subtype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6e7b1522e39eb4daa5e35713664e81d65b2efc", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/7d6e7b1522e39eb4daa5e35713664e81d65b2efc", "committedDate": "2020-11-03T06:49:11Z", "message": "Support field access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e089c0e9bf61483f701b1910575fb48226d844b", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/3e089c0e9bf61483f701b1910575fb48226d844b", "committedDate": "2020-11-03T06:51:50Z", "message": "Update release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa5a168eb3f3d7c341aaa8b9135ebbeb1cd6af7", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/afa5a168eb3f3d7c341aaa8b9135ebbeb1cd6af7", "committedDate": "2020-11-03T06:55:44Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a3b2a1f60f1f8c876a0529b50e5f05b93d0a7f", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/f8a3b2a1f60f1f8c876a0529b50e5f05b93d0a7f", "committedDate": "2020-11-03T13:07:25Z", "message": "Fix concurrent modification exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b661abe3bda85c75a2d8e5af60f3c15b1b629534", "author": {"user": {"login": "oowekyala", "name": "Cl\u00e9ment Fournier"}}, "url": "https://github.com/pmd/pmd/commit/b661abe3bda85c75a2d8e5af60f3c15b1b629534", "committedDate": "2020-11-03T13:16:58Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MTM0MzAw", "url": "https://github.com/pmd/pmd/pull/2897#pullrequestreview-525134300", "createdAt": "2020-11-06T13:09:49Z", "commit": {"oid": "b661abe3bda85c75a2d8e5af60f3c15b1b629534"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowOTo0OVrOHutaJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowOTo0OVrOHutaJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0MDUxNg==", "bodyText": "\ud83d\ude04", "url": "https://github.com/pmd/pmd/pull/2897#discussion_r518740516", "createdAt": "2020-11-06T13:09:49Z", "author": {"login": "adangel"}, "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/codestyle/UnnecessaryFullyQualifiedNameRule.java", "diffHunk": "@@ -4,427 +4,252 @@\n \n package net.sourceforge.pmd.lang.java.rule.codestyle;\n \n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n+import static net.sourceforge.pmd.properties.PropertyFactory.booleanProperty;\n+\n import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n+import java.util.function.BiPredicate;\n+import java.util.function.Function;\n \n-import org.apache.commons.lang3.StringUtils;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n \n-import net.sourceforge.pmd.RuleContext;\n+import net.sourceforge.pmd.internal.util.AssertionUtil;\n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n-import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;\n-import net.sourceforge.pmd.lang.java.ast.ASTName;\n-import net.sourceforge.pmd.lang.java.ast.ASTNameList;\n-import net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration;\n-import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;\n-import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;\n-import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;\n+import net.sourceforge.pmd.lang.java.ast.ASTFieldAccess;\n+import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;\n+import net.sourceforge.pmd.lang.java.ast.ASTTypeExpression;\n import net.sourceforge.pmd.lang.java.ast.JavaNode;\n-import net.sourceforge.pmd.lang.java.ast.TypeNode;\n-import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n-import net.sourceforge.pmd.lang.java.symboltable.SourceFileScope;\n-import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;\n-import net.sourceforge.pmd.lang.symboltable.NameOccurrence;\n-import net.sourceforge.pmd.lang.symboltable.Scope;\n-\n-public class UnnecessaryFullyQualifiedNameRule extends AbstractJavaRule {\n-    private static final Logger LOG = Logger.getLogger(UnnecessaryFullyQualifiedNameRule.class.getName());\n-\n-    private List<ASTImportDeclaration> imports = new ArrayList<>();\n-    private String currentPackage;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;\n+import net.sourceforge.pmd.lang.java.symbols.JAccessibleElementSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JElementSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;\n+import net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable;\n+import net.sourceforge.pmd.lang.java.symbols.table.ScopeInfo;\n+import net.sourceforge.pmd.lang.java.symbols.table.coreimpl.ShadowChain;\n+import net.sourceforge.pmd.lang.java.symbols.table.coreimpl.ShadowChainIterator;\n+import net.sourceforge.pmd.lang.java.types.JMethodSig;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+\n+public class UnnecessaryFullyQualifiedNameRule extends AbstractJavaRulechainRule {\n+\n+    private static final PropertyDescriptor<Boolean> REPORT_METHODS =\n+        booleanProperty(\"reportStaticMethods\")\n+            .desc(\"Report unnecessary static method qualifiers like in `Collections.emptyList()`, if the method is imported or inherited.\")\n+            .defaultValue(true)\n+            .build();\n+\n+    private static final PropertyDescriptor<Boolean> REPORT_FIELDS =\n+        booleanProperty(\"reportStaticFields\")\n+            .desc(\"Report unnecessary static field qualifiers like in `Math.PI`, if the field is imported or inherited.\")\n+            .defaultValue(true)\n+            .build();\n \n     public UnnecessaryFullyQualifiedNameRule() {\n-        super.addRuleChainVisit(ASTPackageDeclaration.class);\n-        super.addRuleChainVisit(ASTImportDeclaration.class);\n-        super.addRuleChainVisit(ASTClassOrInterfaceType.class);\n-        super.addRuleChainVisit(ASTName.class);\n-    }\n-\n-    @Override\n-    public void start(final RuleContext ctx) {\n-        imports.clear();\n-        currentPackage = null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTPackageDeclaration node, Object data) {\n-        currentPackage = node.getPackageNameImage();\n-        return data;\n+        super(ASTClassOrInterfaceType.class);\n+        definePropertyDescriptor(REPORT_METHODS);\n+        definePropertyDescriptor(REPORT_FIELDS);\n     }\n \n     @Override\n-    public Object visit(ASTImportDeclaration node, Object data) {\n-        imports.add(node);\n-        return data;\n-    }\n-\n-    @Override\n-    public Object visit(ASTClassOrInterfaceType node, Object data) {\n-        // This name has no qualification, it can't be unnecessarily qualified\n-        if (node.getImage().indexOf('.') < 0) {\n+    public Object visit(final ASTClassOrInterfaceType deepest, Object data) {\n+        if (deepest.getQualifier() != null) {\n+            // the child will be visited instead\n             return data;\n         }\n-        checkImports(node, data);\n-        return data;\n-    }\n \n-    @Override\n-    public Object visit(ASTName node, Object data) {\n-        if (!(node.getParent() instanceof ASTImportDeclaration)\n-                && !(node.getParent() instanceof ASTPackageDeclaration)) {\n-            // This name has no qualification, it can't be unnecessarily qualified\n-            if (node.getImage().indexOf('.') < 0) {\n-                return data;\n-            }\n-            checkImports(node, data);\n+        ASTClassOrInterfaceType next = deepest;\n+        ScopeInfo bestReason = null;\n+        if (next.isFullyQualified()) {\n+            bestReason = typeMeansSame(next);\n         }\n-        return data;\n-    }\n \n-\n-    /**\n-     * Returns true if the name could be imported by this declaration.\n-     * The name must be fully qualified, the import is either on-demand\n-     * or static, that is its {@link ASTImportDeclaration#getImportedName()}\n-     * is the enclosing package or type name of the imported type or static member.\n-     */\n-    private boolean declarationMatches(ASTImportDeclaration decl, String name) {\n-        return name.startsWith(decl.getImportedName())\n-                && name.lastIndexOf('.') == decl.getImportedName().length();\n-    }\n-\n-    private boolean couldBeMethodCall(JavaNode node) {\n-        if (node.getNthParent(2) instanceof ASTPrimaryExpression && node.getNthParent(1) instanceof ASTPrimaryPrefix) {\n-            int nextSibling = node.getParent().getIndexInParent() + 1;\n-            if (node.getNthParent(2).getNumChildren() > nextSibling) {\n-                return node.getNthParent(2).getChild(nextSibling) instanceof ASTPrimarySuffix;\n+        // try to find the longest prefix that can be removed\n+        while (bestReason != null && segmentIsIrrelevant(next) && next.getParent() instanceof ASTClassOrInterfaceType) {\n+            ASTClassOrInterfaceType nextParent = (ASTClassOrInterfaceType) next.getParent();\n+            ScopeInfo newBestReason = typeMeansSame(nextParent);\n+            if (newBestReason == null) {\n+                break;\n+            } else {\n+                bestReason = newBestReason;\n+                next = nextParent;\n             }\n         }\n-        return false;\n-    }\n \n-    private void checkImports(TypeNode node, Object data) {\n-        final String name = node.getImage();\n+        // maybe a method call/field can still take precedence\n+        if (next.getParent() instanceof ASTTypeExpression) {\n \n-        // variable names shadow everything else\n-        // If the first segment is a variable, then all\n-        // the following are field accesses and it's not an FQCN\n-        if (isVariable(node.getScope(), name)) {\n-            return;\n-        }\n-\n-        List<ASTImportDeclaration> matches = new ArrayList<>();\n-\n-        // Find all \"matching\" import declarations\n-        for (ASTImportDeclaration importDeclaration : imports) {\n-            if (!importDeclaration.isImportOnDemand()) {\n-                // Exact match of imported class\n-                if (name.equals(importDeclaration.getImportedName())) {\n-                    matches.add(importDeclaration);\n-                    continue;\n+            JavaNode opa = next.getParent().getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b661abe3bda85c75a2d8e5af60f3c15b1b629534"}, "originalPosition": 184}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}