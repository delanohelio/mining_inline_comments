{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDY2NDg0", "number": 2107, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxOVrOEq4UHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxOVrOEq4UHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk4MzAxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MHQStaticDirectoryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxOVrOHdVt_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxOVrOHdVt_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjU4OQ==", "bodyText": "MekHQ is certainly multi-threaded compared to MM, I feel that these individual initialize methods should be synchronized.", "url": "https://github.com/MegaMek/mekhq/pull/2107#discussion_r500526589", "createdAt": "2020-10-06T18:56:19Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/MHQStaticDirectoryManager.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq;\n+\n+import megamek.MegaMek;\n+import megamek.client.ui.swing.tileset.MMStaticDirectoryManager;\n+import megamek.common.Crew;\n+import megamek.common.annotations.Nullable;\n+import megamek.common.util.fileUtils.DirectoryItems;\n+import mekhq.campaign.force.Force;\n+import mekhq.gui.enums.LayeredForceIcon;\n+import mekhq.gui.utilities.PortraitFileFactory;\n+\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.util.LinkedHashMap;\n+import java.util.Vector;\n+\n+public class MHQStaticDirectoryManager extends MMStaticDirectoryManager {\n+    //region Variable Declarations\n+    private static DirectoryItems forceIconDirectory;\n+    private static DirectoryItems awardIconDirectory;\n+\n+    // Re-parsing Prevention Variables: The are True at startup and when the specified directory\n+    // should be re-parsed, and are used to avoid re-parsing the directory repeatedly when there's an error.\n+    private static boolean parseForceIconDirectory = true;\n+    private static boolean parseAwardIconDirectory = true;\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n+    protected MHQStaticDirectoryManager() {\n+        // This class is not to be instantiated\n+    }\n+    //endregion Constructors\n+\n+\n+    //region Initialization\n+    /**\n+     * This initialized all of the directories under this manager\n+     */\n+    public static void initialize() {\n+        MMStaticDirectoryManager.initialize();\n+        initializeForceIcons();\n+        initializeAwardIcons();\n+    }\n+\n+    /**\n+     * Parses MekHQ's force icon folder when first called or when it was refreshed.\n+     *\n+     * @see #refreshForceIcons()\n+     */\n+    private static void initializeForceIcons() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1efe0018e796197cf5eb660627efb385f29bb"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2018, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}