{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjI1NDE3", "number": 1776, "reviewThreads": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjowNFrOEB7bRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNTozMlrOEB730w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU3NjY4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjowNFrOGeE0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjowNFrOGeE0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTM0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(col == COL_TYPE) {\n          \n          \n            \n                    if (col == COL_TYPE) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189343", "createdAt": "2020-06-02T21:36:04Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -88,6 +93,15 @@ public Object getValueAt(int row, int col) {\n         if(col == COL_NAME) {\n             return shoppingItem.getAcquisitionName();\n         }\n+        if(col == COL_TYPE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU3NzE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjoxNVrOGeE0bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjoxNVrOGeE0bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(shoppingItem instanceof UnitOrder) {\n          \n          \n            \n                            return \"Unit\";\n          \n          \n            \n                        } else if(shoppingItem instanceof Part) {\n          \n          \n            \n                        if (shoppingItem instanceof UnitOrder) {\n          \n          \n            \n                            return \"Unit\";\n          \n          \n            \n                        } else if (shoppingItem instanceof Part) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189422", "createdAt": "2020-06-02T21:36:15Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -88,6 +93,15 @@ public Object getValueAt(int row, int col) {\n         if(col == COL_NAME) {\n             return shoppingItem.getAcquisitionName();\n         }\n+        if(col == COL_TYPE) {\n+            if(shoppingItem instanceof UnitOrder) {\n+                return \"Unit\";\n+            } else if(shoppingItem instanceof Part) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU3ODA5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjozOFrOGeE1AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzo0MDo0NlrOGeHdTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            case COL_TOTAL_COST:\n          \n          \n            \n                                case COL_QUEUE:\n          \n          \n            \n                            case COL_TOTAL_COST:\n          \n          \n            \n                            case COL_QUEUE:", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189568", "createdAt": "2020-06-02T21:36:38Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -150,11 +164,13 @@ public int getColumnWidth(int c) {\n \n     public int getAlignment(int col) {\n         switch(col) {\n-        case COL_COST:\n-        case COL_TOTAL_COST:\n-            return SwingConstants.RIGHT;\n+            case COL_COST:\n+                case COL_TOTAL_COST:\n+                    case COL_QUEUE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMjY1Mg==", "bodyText": "yeah, intellij was having a real problem with proper indenting on switches", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434232652", "createdAt": "2020-06-02T23:40:46Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -150,11 +164,13 @@ public int getColumnWidth(int c) {\n \n     public int getAlignment(int col) {\n         switch(col) {\n-        case COL_COST:\n-        case COL_TOTAL_COST:\n-            return SwingConstants.RIGHT;\n+            case COL_COST:\n+                case COL_TOTAL_COST:\n+                    case COL_QUEUE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTU2OA=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU3ODQwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjo0N1rOGeE1Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNjo0N1rOGeE1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    case COL_NEXT:\n          \n          \n            \n                        case COL_TYPE:\n          \n          \n            \n                    case COL_NEXT:\n          \n          \n            \n                    case COL_TYPE:", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189618", "createdAt": "2020-06-02T21:36:47Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -150,11 +164,13 @@ public int getColumnWidth(int c) {\n \n     public int getAlignment(int col) {\n         switch(col) {\n-        case COL_COST:\n-        case COL_TOTAL_COST:\n-            return SwingConstants.RIGHT;\n+            case COL_COST:\n+                case COL_TOTAL_COST:\n+                    case COL_QUEUE:\n+                return SwingConstants.RIGHT;\n         case COL_TARGET:\n         case COL_NEXT:\n+            case COL_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU4MTc0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODowMVrOGeE3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODowMVrOGeE3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190157", "createdAt": "2020-06-02T21:38:01Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -133,6 +123,8 @@\n         super(gui, name);\n         MekHQ.registerHandler(this);\n         setUserPreferences();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU4MjgyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODoyNFrOGeE3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODoyNFrOGeE3-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DefaultCaret caret = (DefaultCaret)txtResult.getCaret();\n          \n          \n            \n                    DefaultCaret caret = (DefaultCaret) txtResult.getCaret();", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190331", "createdAt": "2020-06-02T21:38:24Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -377,6 +369,27 @@ public void propertyChange(PropertyChangeEvent evt) {\n         gridBagConstraints.weightx = 1.0;\n         panTasks.add(panDoTaskText, gridBagConstraints);\n \n+        txtResult = new JTextPane();\n+        txtResult.addHyperlinkListener(getCampaignGui().getReportHLL());\n+        txtResult.setContentType(\"text/html\"); // NOI18N\n+        txtResult.setEditable(false);\n+        DefaultCaret caret = (DefaultCaret)txtResult.getCaret();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU4MzM0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODozN1rOGeE4TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozODozN1rOGeE4TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txtResult.setBorder(new EmptyBorder(2,5,2,2));\n          \n          \n            \n                    txtResult.setBorder(new EmptyBorder(2, 5, 2, 2));", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190413", "createdAt": "2020-06-02T21:38:37Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -377,6 +369,27 @@ public void propertyChange(PropertyChangeEvent evt) {\n         gridBagConstraints.weightx = 1.0;\n         panTasks.add(panDoTaskText, gridBagConstraints);\n \n+        txtResult = new JTextPane();\n+        txtResult.addHyperlinkListener(getCampaignGui().getReportHLL());\n+        txtResult.setContentType(\"text/html\"); // NOI18N\n+        txtResult.setEditable(false);\n+        DefaultCaret caret = (DefaultCaret)txtResult.getCaret();\n+        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n+        txtResult.setBorder(new EmptyBorder(2,5,2,2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU4NDg2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozOToxM1rOGeE5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozOToxM1rOGeE5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDY2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        // Ignore\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (Exception ignored) {\n          \n          \n            \n            \n          \n          \n            \n                    }", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190660", "createdAt": "2020-06-02T21:39:13Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -644,7 +657,19 @@ private void doTask() {\n                 return;\n             }\n         }\n-        getCampaign().fixPart(part, selectedTech);\n+        String r = getCampaign().fixPart(part, selectedTech);\n+\n+        Reader stringReader = new StringReader(r);\n+        HTMLEditorKit htmlKit = new HTMLEditorKit();\n+        HTMLDocument blank = (HTMLDocument) htmlKit.createDefaultDocument();\n+        try {\n+            htmlKit.read(stringReader, blank, 0);\n+        } catch (Exception e) {\n+            // Ignore\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU4OTU5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MDo1M1rOGeE8Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MDo1M1rOGeE8Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MTQxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(tabMain.getSelectedIndex() == 0) {\n          \n          \n            \n                            if (tabMain.getSelectedIndex() == 0) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434191418", "createdAt": "2020-06-02T21:40:53Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -310,24 +267,31 @@ private void initComponents() {\n         addStandardTab(GuiTabType.INFIRMARY);\n         addStandardTab(GuiTabType.MEKLAB);\n         addStandardTab(GuiTabType.FINANCES);\n-        addStandardTab(GuiTabType.OVERVIEW);\n \n-        initMain();\n+        //check to see if we just selected the command center tab\n+        //and if so change its color to standard\n+        tabMain.addChangeListener(new ChangeListener() {\n+            public void stateChanged(ChangeEvent e) {\n+                if(tabMain.getSelectedIndex() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU5Mzk5OnYy", "diffSide": "LEFT", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Mjo0MFrOGeE_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNTozNFrOGeH3rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjE2OQ==", "bodyText": "The two KeyEvent removals need to be removed from the View Menu Mnemonic list comment above", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192169", "createdAt": "2020-06-02T21:42:40Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -967,18 +930,6 @@ private void initMenu() {\n         miHistoricalDailyReportDialog.addActionListener(evt -> showHistoricalDailyReportDialog());\n         menuView.add(miHistoricalDailyReportDialog);\n \n-        miAttachLog = new JMenuItem(resourceMap.getString(\"miAttachLog.text\")); // NOI18N\n-        miAttachLog.setMnemonic(KeyEvent.VK_A);\n-        miAttachLog.addActionListener(evt -> hideDailyReportDialog());\n-        miAttachLog.setVisible(logDialog.isVisible());\n-        menuView.add(miAttachLog);\n-\n-        miDetachLog = new JMenuItem(resourceMap.getString(\"miDetachLog.text\")); // NOI18N\n-        miDetachLog.setMnemonic(KeyEvent.VK_D);\n-        miDetachLog.addActionListener(evt -> showDailyReportDialog());\n-        miDetachLog.setVisible(!logDialog.isVisible());\n-        menuView.add(miDetachLog);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTQwNQ==", "bodyText": "Fixed in 4c301fa", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239405", "createdAt": "2020-06-03T00:05:34Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -967,18 +930,6 @@ private void initMenu() {\n         miHistoricalDailyReportDialog.addActionListener(evt -> showHistoricalDailyReportDialog());\n         menuView.add(miHistoricalDailyReportDialog);\n \n-        miAttachLog = new JMenuItem(resourceMap.getString(\"miAttachLog.text\")); // NOI18N\n-        miAttachLog.setMnemonic(KeyEvent.VK_A);\n-        miAttachLog.addActionListener(evt -> hideDailyReportDialog());\n-        miAttachLog.setVisible(logDialog.isVisible());\n-        menuView.add(miAttachLog);\n-\n-        miDetachLog = new JMenuItem(resourceMap.getString(\"miDetachLog.text\")); // NOI18N\n-        miDetachLog.setMnemonic(KeyEvent.VK_D);\n-        miDetachLog.addActionListener(evt -> showDailyReportDialog());\n-        miDetachLog.setVisible(!logDialog.isVisible());\n-        menuView.add(miDetachLog);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjE2OQ=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU5NDkxOnYy", "diffSide": "LEFT", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MzowMFrOGeE_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNTo0OVrOGeH37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjMxNw==", "bodyText": "Same as above", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192317", "createdAt": "2020-06-02T21:43:00Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -990,12 +941,6 @@ private void initMenu() {\n         miRetirementDefectionDialog.addActionListener(evt -> showRetirementDefectionDialog());\n         menuView.add(miRetirementDefectionDialog);\n \n-        miShowOverview = new JCheckBoxMenuItem(resourceMap.getString(\"miShowOverview.text\"));\n-        miShowOverview.setMnemonic(KeyEvent.VK_O);\n-        miShowOverview.setSelected(hasTab(GuiTabType.OVERVIEW));\n-        miShowOverview.addActionListener(evt -> toggleOverviewTab());\n-        menuView.add(miShowOverview);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTQ2OA==", "bodyText": "fixed in 4c301fa", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239468", "createdAt": "2020-06-03T00:05:49Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -990,12 +941,6 @@ private void initMenu() {\n         miRetirementDefectionDialog.addActionListener(evt -> showRetirementDefectionDialog());\n         menuView.add(miRetirementDefectionDialog);\n \n-        miShowOverview = new JCheckBoxMenuItem(resourceMap.getString(\"miShowOverview.text\"));\n-        miShowOverview.setMnemonic(KeyEvent.VK_O);\n-        miShowOverview.setSelected(hasTab(GuiTabType.OVERVIEW));\n-        miShowOverview.addActionListener(evt -> toggleOverviewTab());\n-        menuView.add(miShowOverview);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjMxNw=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU5NjE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MzoyOVrOGeFAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MzoyOVrOGeFAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!logNagActive) {\n          \n          \n            \n                    if (!logNagActive) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192513", "createdAt": "2020-06-02T21:43:29Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -2576,6 +2489,20 @@ private void savePartsFile() {\n         }\n     }\n \n+    /**\n+     * Check to see if the command center tab is currently active and if not, color the tab. Should be\n+     * called when items are added to daily report log panel and user is not on the command center tab\n+     * in order to draw attention to it\n+     */\n+    public void checkDailyLogNag() {\n+        if(!logNagActive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwMTAyOnYy", "diffSide": "LEFT", "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NToyMFrOGeFDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNjoxMlrOGeH4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzMzNA==", "bodyText": "This removal needs to be recorded in the list at {@link CampaignGUI#initMenu()}", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193334", "createdAt": "2020-06-02T21:45:20Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTU2OA==", "bodyText": "I just changed the command center tab to VK_O to avoid problems in commit 4c301fa", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239568", "createdAt": "2020-06-03T00:06:12Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzMzNA=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwMTQ2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NTozMFrOGeFEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNjoyMFrOGeH4bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzQwOQ==", "bodyText": "This will cause issues as the VK_C is currently used for the Manage Campaign Dropdown. The dropdown should be changed, and there is a list of open letters in {@link CampaignGUI#initMenu()}", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193409", "createdAt": "2020-06-02T21:45:30Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),\n+    COMMAND(0,  \"panCommand.TabConstraints.tabTitle\", KeyEvent.VK_C),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTU5OA==", "bodyText": "Fixed this in 4c301fa. See above", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239598", "createdAt": "2020-06-03T00:06:20Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),\n+    COMMAND(0,  \"panCommand.TabConstraints.tabTitle\", KeyEvent.VK_C),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzQwOQ=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwMzY1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NjoxOVrOGeFFYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NjoxOVrOGeFFYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193761", "createdAt": "2020-06-02T21:46:19Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwNTAzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Njo1MFrOGeFGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Njo1M1rOGeFGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193978", "createdAt": "2020-06-02T21:46:50Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk5Ng==", "bodyText": "Accessibility issue... double space should never be used in text", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193996", "createdAt": "2020-06-02T21:46:53Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk3OA=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwNzA2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NzozN1rOGeFHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzo1ODo0OFrOGeHwkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDI4Ng==", "bodyText": "Is this intended to never include column 0?", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434194286", "createdAt": "2020-06-02T21:47:37Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui.dialog;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.parts.PartInUse;\n+import mekhq.campaign.work.IAcquisitionWork;\n+import mekhq.gui.CampaignGUI;\n+import mekhq.gui.model.PartsInUseTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TwoNumbersSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableColumnModel;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.util.Collections;\n+\n+/**\n+ * A dialog to show parts in use, ordered, in transit with actionable buttons for buying or adding more\n+ * taken from the Overview tab originally but now a dialog.\n+ */\n+public class PartsReportDialog extends JDialog {\n+\n+    private JPanel overviewPartsPanel;\n+    private JTable overviewPartsInUseTable;\n+    private PartsInUseTableModel overviewPartsModel;\n+\n+    private Campaign campaign;\n+    private CampaignGUI gui;\n+\n+    public PartsReportDialog(CampaignGUI gui, boolean modal) {\n+        super(gui.getFrame(), modal);\n+        this.gui = gui;\n+        this.campaign = gui.getCampaign();\n+        initComponents();\n+        refreshOverviewPartsInUse();\n+        pack();\n+        setLocationRelativeTo(gui.getFrame());\n+    }\n+\n+    private void initComponents() {\n+        overviewPartsPanel = new JPanel(new BorderLayout());\n+\n+        overviewPartsModel = new PartsInUseTableModel();\n+        overviewPartsInUseTable = new JTable(overviewPartsModel);\n+        overviewPartsInUseTable.setRowSelectionAllowed(false);\n+        overviewPartsInUseTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);\n+        TableColumn column;\n+        for (int i = 0; i < overviewPartsModel.getColumnCount(); ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzU4Nw==", "bodyText": "I don't know. I copied over existing code to put it in a dialog. But the existing table has seen heavy use and I don't think any problems.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434237587", "createdAt": "2020-06-02T23:58:48Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui.dialog;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.parts.PartInUse;\n+import mekhq.campaign.work.IAcquisitionWork;\n+import mekhq.gui.CampaignGUI;\n+import mekhq.gui.model.PartsInUseTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TwoNumbersSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableColumnModel;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.util.Collections;\n+\n+/**\n+ * A dialog to show parts in use, ordered, in transit with actionable buttons for buying or adding more\n+ * taken from the Overview tab originally but now a dialog.\n+ */\n+public class PartsReportDialog extends JDialog {\n+\n+    private JPanel overviewPartsPanel;\n+    private JTable overviewPartsInUseTable;\n+    private PartsInUseTableModel overviewPartsModel;\n+\n+    private Campaign campaign;\n+    private CampaignGUI gui;\n+\n+    public PartsReportDialog(CampaignGUI gui, boolean modal) {\n+        super(gui.getFrame(), modal);\n+        this.gui = gui;\n+        this.campaign = gui.getCampaign();\n+        initComponents();\n+        refreshOverviewPartsInUse();\n+        pack();\n+        setLocationRelativeTo(gui.getFrame());\n+    }\n+\n+    private void initComponents() {\n+        overviewPartsPanel = new JPanel(new BorderLayout());\n+\n+        overviewPartsModel = new PartsInUseTableModel();\n+        overviewPartsInUseTable = new JTable(overviewPartsModel);\n+        overviewPartsInUseTable.setRowSelectionAllowed(false);\n+        overviewPartsInUseTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);\n+        TableColumn column;\n+        for (int i = 0; i < overviewPartsModel.getColumnCount(); ++i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDI4Ng=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYxOTUyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Mjo0OFrOGeFPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowMzo0OFrOGeIxtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg==", "bodyText": "Could we please swap this to instead by a unique object? I've been running into and finding issues with both Portraits and camo because we use multiple strings instead of tracking through an object.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196352", "createdAt": "2020-06-02T21:52:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -239,6 +238,12 @@\n     private String camoFileName = null;\n     private int colorIndex = 0;\n \n+    //unit icon\n+    public static final String ROOT_ICON = \"-- General --\";\n+    public static final String ICON_NONE = \"None\";\n+    private String iconCategory = ROOT_ICON;\n+    private String iconFileName = ICON_NONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNTk5MQ==", "bodyText": "Not sure what you had in mind. Is there an example in the code?", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434235991", "createdAt": "2020-06-02T23:53:18Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -239,6 +238,12 @@\n     private String camoFileName = null;\n     private int colorIndex = 0;\n \n+    //unit icon\n+    public static final String ROOT_ICON = \"-- General --\";\n+    public static final String ICON_NONE = \"None\";\n+    private String iconCategory = ROOT_ICON;\n+    private String iconFileName = ICON_NONE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTc5Ng==", "bodyText": "There currently is not, but I've got some code I was forced to abandon due to a git issue that I'll fix up and share in a bit.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434245796", "createdAt": "2020-06-03T00:30:13Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -239,6 +238,12 @@\n     private String camoFileName = null;\n     private int colorIndex = 0;\n \n+    //unit icon\n+    public static final String ROOT_ICON = \"-- General --\";\n+    public static final String ICON_NONE = \"None\";\n+    private String iconCategory = ROOT_ICON;\n+    private String iconFileName = ICON_NONE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI2Mg==", "bodyText": "Actually, ignore this... I started to look at it again and realised an abstract approach would be better, so that's future work.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434254262", "createdAt": "2020-06-03T01:03:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -239,6 +238,12 @@\n     private String camoFileName = null;\n     private int colorIndex = 0;\n \n+    //unit icon\n+    public static final String ROOT_ICON = \"-- General --\";\n+    public static final String ICON_NONE = \"None\";\n+    private String iconCategory = ROOT_ICON;\n+    private String iconFileName = ICON_NONE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyMjQ0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDowNFrOGeFRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDowNFrOGeFRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196838", "createdAt": "2020-06-02T21:54:04Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyMjcwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDoxMlrOGeFRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDoxMlrOGeFRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Njg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196885", "createdAt": "2020-06-02T21:54:12Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyNTIwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDo1OFrOGeFTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NDo1OFrOGeFTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzI1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Person p : campaign.getPersonnel()) {\n          \n          \n            \n                        // Add them to the total count\n          \n          \n            \n                        if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                    for (Person p : campaign.getActivePersonnel()) {\n          \n          \n            \n                        // Add them to the total count\n          \n          \n            \n                        if (!p.getPrisonerStatus().isFree()) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197251", "createdAt": "2020-06-02T21:54:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyNTYzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NTowOVrOGeFTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NTowOVrOGeFTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(p.getHits() > 0) {\n          \n          \n            \n                        if (p.getHits() > 0) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197311", "createdAt": "2020-06-02T21:55:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyNTg5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NToxNVrOGeFTYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NToxNVrOGeFTYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzM0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if(p.hasPrimarySupportRole(false)) {\n          \n          \n            \n                        } else if (p.hasPrimarySupportRole(false)) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197345", "createdAt": "2020-06-02T21:55:15Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyNjI5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NToyNVrOGeFTpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NToyNVrOGeFTpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n          \n          \n            \n                    countDamageStatus = new int[Entity.DMG_CRIPPLED + 1];", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197412", "createdAt": "2020-06-02T21:55:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyNzA1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NTo0MVrOGeFUGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NTo0MVrOGeFUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Unit u : campaign.getUnits()) {\n          \n          \n            \n                        Entity e = u.getEntity();\n          \n          \n            \n                        if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n          \n          \n            \n                    for (Unit u : campaign.getUnits()) {\n          \n          \n            \n                        Entity e = u.getEntity();\n          \n          \n            \n                        if (u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || (null == e)) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197528", "createdAt": "2020-06-02T21:55:41Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyODA0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjowOVrOGeFUvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjowOVrOGeFUvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    infantryCount += (int)Math.ceil(squadCount/4.0);\n          \n          \n            \n                    infantryCount += (int) Math.ceil(squadCount / 4.0);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197695", "createdAt": "2020-06-02T21:56:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyODM3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjoxOVrOGeFU8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjoxOVrOGeFU8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n          \n          \n            \n                    totalUnitCount = mechCount + veeCount + infantryCount + aeroCount;", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197747", "createdAt": "2020-06-02T21:56:19Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyODYxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjoyNlrOGeFVGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjoyNlrOGeFVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Mission m : campaign.getMissions()) {\n          \n          \n            \n                    for (Mission m : campaign.getMissions()) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197785", "createdAt": "2020-06-02T21:56:26Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyODg1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjozNFrOGeFVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NjozNFrOGeFVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzgzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n          \n          \n            \n                    completedMissions = countMissionByStatus[Mission.S_SUCCESS] +", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197836", "createdAt": "2020-06-02T21:56:34Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyOTEwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Njo0MVrOGeFVcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Njo0MVrOGeFVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            countMissionByStatus[Mission.S_FAILED]+\n          \n          \n            \n                            countMissionByStatus[Mission.S_FAILED] +", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197873", "createdAt": "2020-06-02T21:56:41Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzMDQxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NzoxNVrOGeFWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzo1NjowMVrOGeHtow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODExMw==", "bodyText": "The formatting here looks off", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198113", "createdAt": "2020-06-02T21:57:15Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjgzNQ==", "bodyText": "I just copied this over from the respective report. Intellij will not let me remove that tab on 158.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434236835", "createdAt": "2020-06-02T23:56:01Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODExMw=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzMTIxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1NzozM1rOGeFW2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzo1NjowOFrOGeHtyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODIzNQ==", "bodyText": "The formatting here looks off", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198235", "createdAt": "2020-06-02T21:57:33Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjg3Mg==", "bodyText": "same as one above", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434236872", "createdAt": "2020-06-02T23:56:08Z", "author": {"login": "AaronGullickson"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODIzNQ=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzMTg3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Nzo1MVrOGeFXOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Nzo1MVrOGeFXOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n          \n          \n            \n                    unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_AERO) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK, true) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_INFANTRY) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198330", "createdAt": "2020-06-02T21:57:51Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzMjUwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODowN1rOGeFXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODowN1rOGeFXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODQzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n          \n          \n            \n                    unitsOver = noMech + noASF + nolv + nohv + noinf + noBA + noProto;", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198437", "createdAt": "2020-06-02T21:58:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzMzc4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODo0MFrOGeFYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODo0MFrOGeFYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODY0NQ==", "bodyText": "The boxing for Integer.toString is probably not required.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198645", "createdAt": "2020-06-02T21:58:40Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzNDAwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODo0OVrOGeFYnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1ODo0OVrOGeFYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198687", "createdAt": "2020-06-02T21:58:49Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzNTI0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OToxN1rOGeFZbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OTozNFrOGeFZ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODg5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(mechCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(veeCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(infantryCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(aeroCount > 0) {\n          \n          \n            \n                    if (mechCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * mechCount / (double) totalUnitCount)) + \"% mech\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (veeCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (infantryCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (aeroCount > 0) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198893", "createdAt": "2020-06-02T21:59:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTAwNA==", "bodyText": "Also, the boxing is probably not required", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199004", "createdAt": "2020-06-02T21:59:34Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODg5Mw=="}, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzNjMxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OTo0OFrOGeFaHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OTo0OFrOGeFaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTA3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n          \n          \n            \n                    int successRate = (int) Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199071", "createdAt": "2020-06-02T21:59:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzNjczOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OTo1OVrOGeFaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1OTo1OVrOGeFaaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n          \n          \n            \n                            Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n          \n          \n            \n                    return Integer.toString((int) Math.round(cargoTons)) + \" tons (\" +\n          \n          \n            \n                            Integer.toString((int) Math.round(cargoCapacity)) + \" tons capacity)\";", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199145", "createdAt": "2020-06-02T21:59:59Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzNzUzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDoxNFrOGeFa2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDoxNFrOGeFa2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if((unitsOver+unitsTransported)>0) {\n          \n          \n            \n                    if ((unitsOver + unitsTransported) > 0) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199256", "createdAt": "2020-06-02T22:00:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzODI0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDozMFrOGeFbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDozMFrOGeFbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));\n          \n          \n            \n                        percentTransported = 100 - (int) Math.round(100 * unitsOver / (double) (unitsOver + unitsTransported));", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199388", "createdAt": "2020-06-02T22:00:30Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {\n+            percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzODgxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDo0MlrOGeFbtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMDo0MlrOGeFbtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTQ3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(nDS > 0) {\n          \n          \n            \n                    if (nDS > 0) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199477", "createdAt": "2020-06-02T22:00:42Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {\n+            percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));\n+        }\n+        String dropshipAppend = \"\";\n+        int dockingCollars = campaign.getTotalDockingCollars();\n+        if(nDS > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzOTYzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMTowMlrOGeFcQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMTowMlrOGeFcQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199619", "createdAt": "2020-06-02T22:01:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYzOTkxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMTowOFrOGeFcbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMTowOFrOGeFcbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTY2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199663", "createdAt": "2020-06-02T22:01:08Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0MzIxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjozMVrOGeFelg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjozMVrOGeFelg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDIxNA==", "bodyText": "Missing access modifiers", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200214", "createdAt": "2020-06-02T22:02:31Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0MzkxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjo0NlrOGeFe-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjo0NlrOGeFe-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDMxMw==", "bodyText": "Missing access modifiers, and does this use multiple bundles?", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200313", "createdAt": "2020-06-02T22:02:46Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0NDI2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjo1OFrOGeFfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMjo1OFrOGeFfPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CommandCenterTab(CampaignGUI gui, String name) {\n          \n          \n            \n                public CommandCenterTab(CampaignGUI gui, String name) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200381", "createdAt": "2020-06-02T22:02:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0NTE5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMzoxOFrOGeFf2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMzoxOFrOGeFf2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200538", "createdAt": "2020-06-02T22:03:18Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0NjYyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMzo1OVrOGeFg1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowMzo1OVrOGeFg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200789", "createdAt": "2020-06-02T22:03:59Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0Nzg4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNDozNVrOGeFhrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNDozNVrOGeFhrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         *\n          \n          \n            \n                         */", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201005", "createdAt": "2020-06-02T22:04:35Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0ODIxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNDo0NVrOGeFh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNDo0NVrOGeFh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         *\n          \n          \n            \n                         */", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201068", "createdAt": "2020-06-02T22:04:45Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0ODkwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNTowMlrOGeFiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNTowMlrOGeFiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201183", "createdAt": "2020-06-02T22:05:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 387}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0OTI0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNToxMVrOGeFijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNToxMVrOGeFijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201229", "createdAt": "2020-06-02T22:05:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panProcurement.add(panProcurementButtons, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY0OTc5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNTozMlrOGeFjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNTozMlrOGeFjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTM0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(null == icons) {\n          \n          \n            \n                    if (null == icons) {", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201345", "createdAt": "2020-06-02T22:05:32Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panProcurement.add(panProcurementButtons, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panProcurement.add(scrollProcurement, gridBagConstraints);\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying available reports\n+     */\n+    private void initReportsPanel() {\n+        panReports = new JPanel(new GridLayout(5, 1));\n+        JButton btnTransportReport = new JButton(resourceMap.getString(\"btnTransportReport.text\"));\n+        btnTransportReport.addActionListener(ev -> {\n+            getCampaignGui().showReport(new TransportReport(getCampaign()));\n+        });\n+        panReports.add(btnTransportReport);\n+        JButton btnHangarOverview = new JButton(resourceMap.getString(\"btnHangarOverview.text\"));\n+        btnHangarOverview.addActionListener(evt -> {\n+            getCampaignGui().showReport(new HangarReport(getCampaign()));\n+        });\n+        panReports.add(btnHangarOverview);\n+        JButton btnPersonnelOverview = new JButton(resourceMap.getString(\"btnPersonnelOverview.text\"));\n+        btnPersonnelOverview.addActionListener(evt -> {\n+            getCampaignGui().showReport(new PersonnelReport(getCampaign()));\n+        });\n+        panReports.add(btnPersonnelOverview);\n+        JButton btnCargoCapacity = new JButton(resourceMap.getString(\"btnCargoCapacity.text\"));\n+        btnCargoCapacity.addActionListener(evt -> {\n+            getCampaignGui().showReport(new CargoReport(getCampaign()));\n+        });\n+        panReports.add(btnCargoCapacity);\n+        JButton btnUnitRating = new JButton(resourceMap.getString(\"btnUnitRating.text\"));\n+        btnUnitRating.addActionListener(evt -> {\n+            getCampaignGui().showReport(new RatingReport(getCampaign()));\n+        });\n+        panReports.add(btnUnitRating);\n+        panReports.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panReports.title\")));\n+    }\n+\n+    /**\n+     * set the icon for the unit if it exits in the icon panel\n+     */\n+    public void setIcon() {\n+\n+        if(null == icons) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b"}, "originalPosition": 439}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2335, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}