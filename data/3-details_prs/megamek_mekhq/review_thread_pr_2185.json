{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTcxODM2", "number": 2185, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTozOVrOE2KWvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzo1MVrOE2ND_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjI4MjIxOnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo0MFrOHu1vjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo0MFrOHu1vjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzA2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave everything the same.\n          \n          \n            \n                    // ... should leave everything the same.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877069", "createdAt": "2020-11-06T16:51:40Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjI4MzA4OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo0OFrOHu1v_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo0OFrOHu1v_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and removing the first...\n          \n          \n            \n                    // ... and removing the first...", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877181", "createdAt": "2020-11-06T16:51:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjI4MzU5OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo1M1rOHu1wPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo1M1rOHu1wPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzI0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us with just that one other unit.\n          \n          \n            \n                    // ... should leave us with just that one other unit.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877247", "createdAt": "2020-11-06T16:51:53Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjI4NDkwOnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MjoxNFrOHu1xEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MjoxNFrOHu1xEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and clearing out our transport bays...\n          \n          \n            \n                    // ... and clearing out our transport bays...", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877459", "createdAt": "2020-11-06T16:52:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjI4NTE4OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MjoyMFrOHu1xRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MjoyMFrOHu1xRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzUwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us empty again.\n          \n          \n            \n                    // ... should leave us empty again.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877509", "createdAt": "2020-11-06T16:52:20Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...\n+        transport.clearTransportedUnits();\n+\n+        // ...should leave us empty again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjcyNDU3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzoyNlrOHu6Bpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzoyNlrOHu6Bpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzIzOA==", "bodyText": "What about the case whereby a unit is assigned to this transport according to the unit but not according to the transport ship?", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947238", "createdAt": "2020-11-06T19:03:26Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjcyNTc0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzo1MVrOHu6CYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzo1MVrOHu6CYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzQyNg==", "bodyText": "Trinary candidate.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947426", "createdAt": "2020-11-06T19:03:51Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {\n+            double unitWeight;\n+            if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n+                unitWeight = calcInfantryBayWeight(u.getEntity());\n+            } else {\n+                unitWeight = u.getEntity().getWeight();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 215}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2149, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}