{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODE3OTU1", "number": 2227, "title": "Add basic AmmoStorage tests", "bodyText": "Adds basic AmmoStorage tests and protects against some basic problems found during testing.\nTODO:\n\n Test changeAmountAvailable\n Test BombType", "createdAt": "2020-11-13T19:56:59Z", "url": "https://github.com/MegaMek/mekhq/pull/2227", "merged": true, "mergeCommit": {"oid": "f985d768832c1ff51b992b5491edddd5f6a4b48f"}, "closed": true, "closedAt": "2020-11-15T22:17:58Z", "author": {"login": "sixlettervariables"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcMAT_gH2gAyNTIwODE3OTU1OmE2YzAwNDVhZDQxYjAyYjNlNDJiYjRjNGE4ZmVhNzgxMDc0MzYwNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdc3H1XgH2gAyNTIwODE3OTU1OmI2MDliYzdkOTg1YjRkMGU3YjQyODlhOGYwNDVkYWE1ZTdiNGNkNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6c0045ad41b02b3e42bb4c4a8fea78107436060", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/a6c0045ad41b02b3e42bb4c4a8fea78107436060", "committedDate": "2020-11-13T19:06:19Z", "message": "Avoid NRE in AmmoStorage::isSamePartType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9ab46727da3a368dd55646f5fd09947bb9899b", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/1c9ab46727da3a368dd55646f5fd09947bb9899b", "committedDate": "2020-11-13T19:54:48Z", "message": "Add basic AmmoStorage tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103dd774175a0338fc88cd817bcb182a7103cb46", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/103dd774175a0338fc88cd817bcb182a7103cb46", "committedDate": "2020-11-13T20:34:12Z", "message": "Add basic AmmoStorage::changeAmountAvailable tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d5b0b35d51bc1db44d9920cbef2872c785e98f", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/33d5b0b35d51bc1db44d9920cbef2872c785e98f", "committedDate": "2020-11-14T18:44:01Z", "message": "Fix bug found testing BombType ammo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/2f396dd4acf25118142a3e902e50ffb575fdc7a5", "committedDate": "2020-11-14T18:55:13Z", "message": "Add tests confirming bomb types are respected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNjA1OTQ1", "url": "https://github.com/MegaMek/mekhq/pull/2227#pullrequestreview-530605945", "createdAt": "2020-11-14T21:30:09Z", "commit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDowOVrOHzNzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0ODozNFrOHzN54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NTQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     return ((double)shots / getType().getShots());\n          \n          \n            \n                     return ((double) shots / getType().getShots());", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523465476", "createdAt": "2020-11-14T21:30:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "diffHunk": "@@ -77,10 +72,10 @@ public AmmoType getType() {\n \n     @Override\n     public double getTonnage() {\n-    \tif (getType().getKgPerShot() > 0) {\n-    \t\treturn getType().getKgPerShot() * shots/1000.0;\n-    \t}\n-     \treturn ((double)shots / getType().getShots());\n+        if (getType().getKgPerShot() > 0) {\n+            return getType().getKgPerShot() * shots/1000.0;\n+        }\n+         return ((double)shots / getType().getShots());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NTQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return getType().getKgPerShot() * shots/1000.0;\n          \n          \n            \n                        return getType().getKgPerShot() * (shots / 1000.0);", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523465485", "createdAt": "2020-11-14T21:30:24Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "diffHunk": "@@ -77,10 +72,10 @@ public AmmoType getType() {\n \n     @Override\n     public double getTonnage() {\n-    \tif (getType().getKgPerShot() > 0) {\n-    \t\treturn getType().getKgPerShot() * shots/1000.0;\n-    \t}\n-     \treturn ((double)shots / getType().getShots());\n+        if (getType().getKgPerShot() > 0) {\n+            return getType().getKgPerShot() * shots/1000.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466474", "createdAt": "2020-11-14T21:40:06Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466484", "createdAt": "2020-11-14T21:40:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466503", "createdAt": "2020-11-14T21:40:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjUxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466516", "createdAt": "2020-11-14T21:40:28Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466558", "createdAt": "2020-11-14T21:41:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjU2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466566", "createdAt": "2020-11-14T21:41:15Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NzIzNQ==", "bodyText": "Can you please fix the rest of these? The missing space isn't great w.r.t. accessibility.", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523467235", "createdAt": "2020-11-14T21:48:34Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+\n+        // Check getAcquisitionPart()\n+        Part acquisitionPart = acquisitionWork.getAcquisitionPart();\n+        assertNotNull(acquisitionPart);\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        newAmmoStorage = (AmmoStorage) acquisitionPart;\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b54c342044c18c7f38a56a58ff32a4f3532b21", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/62b54c342044c18c7f38a56a58ff32a4f3532b21", "committedDate": "2020-11-15T21:09:50Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b609bc7d985b4d0e7b4289a8f045daa5e7b4cd57", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/b609bc7d985b4d0e7b4289a8f045daa5e7b4cd57", "committedDate": "2020-11-15T21:20:27Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4136, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}