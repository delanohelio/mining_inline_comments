{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDI5NTU4", "number": 2294, "title": "Add contract market tests", "bodyText": "This adds some basic contract market tests to avoid situations like #2283 in the future.\nIn order to accomplish this I needed to do four things first:\n\nAdd Systems::setInstance to let me mock static usages of Systems.getInstance()\nAdd RandomFactionGenerator::setInstance to let me mock static usages of RandomFactionGenerator::getInstance()\nMove static methods from Faction into Factions and make them instance methods\nAdd Factions::getInstance(), and Factions::setInstance to let me mock the previously static methods\n\nThat commit is acb530c\nThe subsequent commits all make use of that work to add basic tests for the ContractMarket.", "createdAt": "2020-12-16T20:46:48Z", "url": "https://github.com/MegaMek/mekhq/pull/2294", "merged": true, "mergeCommit": {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2"}, "closed": true, "closedAt": "2020-12-30T16:28:07Z", "author": {"login": "sixlettervariables"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm27QIgH2gAyNTQxNDI5NTU4OjAyYjcwMjNlMDNmOTIxZWMwNjQzMGQzYTNiZmJmM2ZkNGQwNmYxMmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrQp2JAH2gAyNTQxNDI5NTU4OjMwYWVhZjE2MTZkOTVmYjFkZTA0Y2JlOTE4YmU5YWRjMDczNjlkMTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16T22:45:57Z", "message": "Add the ability to swap out instances of static classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645b761176bb9f80677080c4b924ab7f2781d563", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/645b761176bb9f80677080c4b924ab7f2781d563", "committedDate": "2020-12-16T22:45:57Z", "message": "Add basic contract market test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e226c0ff116643c4ecf008227926a65d22d60aa", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/0e226c0ff116643c4ecf008227926a65d22d60aa", "committedDate": "2020-12-16T22:45:57Z", "message": "Add additional ContractMarket tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c75a1c83e2665933da205d7eee102a9c8ef16c", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/37c75a1c83e2665933da205d7eee102a9c8ef16c", "committedDate": "2020-12-16T22:45:57Z", "message": "Add campaign dates to tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada390fb046e23982ee3d4633efecf6f35da1e7b", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/ada390fb046e23982ee3d4633efecf6f35da1e7b", "committedDate": "2020-12-16T22:45:57Z", "message": "Vary tests based on game year and rating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f737ffe11c3846a6821eb33372bb3d7cc91dd737", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/f737ffe11c3846a6821eb33372bb3d7cc91dd737", "committedDate": "2020-12-16T22:45:57Z", "message": "Add additional tests for non-merc factions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebd0d6faabf9138455db73ad28ee8a3eb73b9eba", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/ebd0d6faabf9138455db73ad28ee8a3eb73b9eba", "committedDate": "2020-12-16T22:45:57Z", "message": "Move Systems initialization out of getInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f4cb6bc88d29e242cc747cf8055e660cb53ea2", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/c6f4cb6bc88d29e242cc747cf8055e660cb53ea2", "committedDate": "2020-12-16T22:45:57Z", "message": "Handle retries due to jump path calc failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a927036eecbc6dbefdfc5ed6d753508216c093b1", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/a927036eecbc6dbefdfc5ed6d753508216c093b1", "committedDate": "2020-12-16T22:45:57Z", "message": "Rename the ContractMarket tests to better describe intent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d8dff2d8d2676730096140830f37d7e4e4db2c1", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/1d8dff2d8d2676730096140830f37d7e4e4db2c1", "committedDate": "2020-12-16T22:28:35Z", "message": "Rename the ContractMarket tests to better describe intent"}, "afterCommit": {"oid": "a927036eecbc6dbefdfc5ed6d753508216c093b1", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/a927036eecbc6dbefdfc5ed6d753508216c093b1", "committedDate": "2020-12-16T22:45:57Z", "message": "Rename the ContractMarket tests to better describe intent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95bff6df2512948b3d08c9f29b75ca850a3a517b", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/95bff6df2512948b3d08c9f29b75ca850a3a517b", "committedDate": "2020-12-17T15:54:27Z", "message": "Move Systems creation to loadDefault and load\n\n- Likewise rename Factions::generate to loadDefault and load"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a092a32bffe549524e953a9a1610194512eb870c", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/a092a32bffe549524e953a9a1610194512eb870c", "committedDate": "2020-12-17T16:00:00Z", "message": "Add integration test for Systems::loadDefault"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc9c3642648f6c9bfcc8ec5b992e48753f7d52e", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/bfc9c3642648f6c9bfcc8ec5b992e48753f7d52e", "committedDate": "2020-12-17T16:01:59Z", "message": "Add missing copyright header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4847898b2ad850d2a0d15b57c0bb30640a97f5ed", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/4847898b2ad850d2a0d15b57c0bb30640a97f5ed", "committedDate": "2020-12-17T16:12:37Z", "message": "Add integration test for Factions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0648f385d46b0f84785665c45257809dc82ee0", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/9f0648f385d46b0f84785665c45257809dc82ee0", "committedDate": "2020-12-17T22:02:23Z", "message": "Add integration tests for the ContractMarket itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af7948905571ace67d29c20549c505f0db25914a", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/af7948905571ace67d29c20549c505f0db25914a", "committedDate": "2020-12-18T21:00:23Z", "message": "Use new MMRandom mocking ability to make subcontracts deterministic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mjk1Njc0", "url": "https://github.com/MegaMek/mekhq/pull/2294#pullrequestreview-559295674", "createdAt": "2020-12-28T20:42:10Z", "commit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDo0MjoxMFrOIMBpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyNTozN1rOIMFk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4MDc0Mw==", "bodyText": "These should be pulled from elsewhere, not inline. I'm leaning towards making these paths customizable under MekHQ Options.", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549480743", "createdAt": "2020-12-28T20:42:10Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/universe/Systems.java", "diffHunk": "@@ -258,27 +253,61 @@ public void recalcHPGNetwork() {\n         return result;\n     }\n \n-// Data loading methods\n+    // Data loading methods\n \n-    private void initialize() {\n-        try {\n-            generateSystems();\n-        } catch (ParseException e) {\n-            MekHQ.getLogger().error(getClass(), \"initialize()\", e); //$NON-NLS-1$\n-        }\n-    }\n+    /**\n+     * Loads the default Systems data.\n+     * \n+     * @throws DOMException\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     * @throws ParseException\n+     */\n+    public static Systems loadDefault()\n+            throws DOMException, FileNotFoundException, IOException, ParseException {\n+        MekHQ.getLogger().info(\"Starting load of system data from XML...\");\n+        long currentTime = System.currentTimeMillis();\n+\n+        Systems systems = load(\"data/universe/planetary_systems\", \"data/universe/systems.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4MjM3NQ==", "bodyText": "Ternary candidate", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549482375", "createdAt": "2020-12-28T20:47:46Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/universe/Factions.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.universe;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import megamek.client.ratgenerator.FactionRecord;\n+import megamek.client.ratgenerator.RATGenerator;\n+import megamek.common.annotations.Nullable;\n+import mekhq.MekHQ;\n+import mekhq.MekHqXmlUtil;\n+\n+public class Factions {\n+    private static Factions instance;\n+\n+    private Map<String, Faction> factions = new HashMap<>();\n+    private Map<Integer, Faction> factionIdMap = new HashMap<>();\n+    private List<String> choosableFactionCodes = Collections.singletonList(\"MERC\");\n+\n+    private RATGenerator ratGenerator;\n+\n+    public Factions() {\n+        this(RATGenerator.getInstance());\n+    }\n+\n+    public Factions(RATGenerator ratGenerator) {\n+        this.ratGenerator = Objects.requireNonNull(ratGenerator);\n+    }\n+\n+    public static Factions getInstance() {\n+        if (instance == null) {\n+            instance = new Factions();\n+        }\n+\n+        return instance;\n+    }\n+\n+    public static void setInstance(@Nullable Factions instance) {\n+        Factions.instance = instance;\n+    }\n+\n+    public RATGenerator getRATGenerator() {\n+        return ratGenerator;\n+    }\n+\n+    public void setRATGenerator(RATGenerator ratGenerator) {\n+        this.ratGenerator = Objects.requireNonNull(ratGenerator);\n+    }\n+\n+    public List<String> getChoosableFactionCodes() {\n+        return choosableFactionCodes;\n+    }\n+\n+    public void setChoosableFactionCodes(String... choosableFactionCodes) {\n+        if (choosableFactionCodes.length > 0) {\n+            this.choosableFactionCodes = Arrays.asList(choosableFactionCodes);\n+        }\n+    }\n+\n+    public Collection<Faction> getFactions() {\n+        return factions.values();\n+    }\n+\n+    public Collection<String> getFactionList() {\n+        return new ArrayList<>(factions.keySet());\n+    }\n+\n+    public Faction getFaction(String sname) {\n+        Faction defaultFaction = new Faction();\n+        if (factions == null) {\n+            return defaultFaction;\n+        } else {\n+            return factions.getOrDefault(sname, defaultFaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0MDA2NQ==", "bodyText": "Not the biggest fan of this instead of breaking, but three attempts isn't too long... just thinking as future proof", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549540065", "createdAt": "2020-12-29T01:52:26Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/market/ContractMarketIntegrationTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.market;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.UUID;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.w3c.dom.DOMException;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Bay;\n+import megamek.common.Compute;\n+import megamek.common.Crew;\n+import megamek.common.CrewType;\n+import megamek.common.EquipmentType;\n+import megamek.common.MMRandom;\n+import megamek.common.MMRoll;\n+import megamek.common.Mech;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.force.Force;\n+import mekhq.campaign.mission.AtBContract;\n+import mekhq.campaign.mission.Contract;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.personnel.enums.PersonnelStatus;\n+import mekhq.campaign.personnel.ranks.Ranks;\n+import mekhq.campaign.rating.UnitRatingMethod;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.universe.Factions;\n+import mekhq.campaign.universe.RandomFactionGenerator;\n+import mekhq.campaign.universe.Systems;\n+\n+public class ContractMarketIntegrationTest {\n+    private static final int REASONABLE_GENERATION_ATTEMPTS = 3;\n+\n+    private Campaign campaign;\n+\n+    @BeforeClass\n+    public static void setupStatics()\n+            throws DOMException, SAXException, IOException, ParserConfigurationException, ParseException {\n+        EquipmentType.initializeTypes();\n+        Factions.setInstance(Factions.loadDefault());\n+        Systems.setInstance(Systems.loadDefault());\n+        Ranks.initializeRankSystems();\n+    }\n+    \n+    @AfterClass\n+    public static void cleanupStatics() {\n+        Systems.setInstance(null);\n+        RandomFactionGenerator.setInstance(null);\n+        Factions.setInstance(null);\n+    }\n+\n+    @Before\n+    public void setupCampaign() {\n+        CampaignOptions options = new CampaignOptions();\n+        options.setUnitRatingMethod(UnitRatingMethod.NONE);\n+\n+        campaign = new Campaign();\n+        campaign.setCampaignOptions(options);\n+\n+        RandomFactionGenerator.getInstance().startup(campaign);\n+\n+        fillHangar(campaign);\n+    }\n+\n+    @Test\n+    public void addAtBContractMercsTest() {\n+        ContractMarket market = new ContractMarket();\n+\n+        // Simulate clicking GM Add on the contract market three times\n+        for (int ii = 0; ii < REASONABLE_GENERATION_ATTEMPTS; ++ii) {\n+            market.addAtBContract(campaign);\n+        }\n+\n+        assertFalse(market.getContracts().isEmpty());\n+    }\n+\n+    @Test\n+    public void generateContractOffersMercsTest() {\n+        ContractMarket market = new ContractMarket();\n+\n+        // Simulate three months of contract generation ...\n+        boolean foundContract = false;\n+        for (int ii = 0; ii < REASONABLE_GENERATION_ATTEMPTS; ++ii) {\n+            market.generateContractOffers(campaign, true);\n+\n+            // ... and one of these three should get us a contract!\n+            foundContract |= market.getContracts().size() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDY1Mw==", "bodyText": "Why ++rating instead of rating++?", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549544653", "createdAt": "2020-12-29T02:21:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/market/ContractMarketAtBGenerationTests.java", "diffHunk": "@@ -0,0 +1,1741 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.market;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.CurrentLocation;\n+import mekhq.campaign.Hangar;\n+import mekhq.campaign.JumpPath;\n+import mekhq.campaign.finances.Accountant;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.force.Force;\n+import mekhq.campaign.mission.AtBContract;\n+import mekhq.campaign.rating.IUnitRating;\n+import mekhq.campaign.rating.UnitRatingMethod;\n+import mekhq.campaign.universe.Faction;\n+import mekhq.campaign.universe.FactionHints;\n+import mekhq.campaign.universe.Factions;\n+import mekhq.campaign.universe.RandomFactionGenerator;\n+import mekhq.campaign.universe.PlanetarySystem;\n+import mekhq.campaign.universe.Systems;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.Vector;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(Parameterized.class)\n+public class ContractMarketAtBGenerationTests {\n+\n+    private final int gameYear;\n+    private final int unitRating;\n+    private final boolean isClanEnemy;\n+\n+    public ContractMarketAtBGenerationTests(int gameYear, int unitRating, boolean isClanEnemy) {\n+        this.gameYear = gameYear;\n+        this.unitRating = unitRating;\n+        this.isClanEnemy = isClanEnemy;\n+    }\n+\n+    @Parameters(name = \"Run {index}: gameYear={0}, unitRating={1}, isClanEnemy={2}\")\n+    public static Iterable<Object[]> data() throws Throwable {\n+        List<Integer> gameYears = Arrays.asList(new Integer[] { 2750, 3025, 3055, 3067, 3120 });\n+        \n+        List<Object[]> parameters = new ArrayList<>();\n+        for (int gameYear : gameYears) {\n+            for (int rating = IUnitRating.DRAGOON_F; rating <= IUnitRating.DRAGOON_ASTAR; ++rating) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDk4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when(campaign.getLocalDate()).thenReturn(LocalDate.of(gameYear, 1, 1));\n          \n          \n            \n                    when(campaign.getLocalDate()).thenReturn(LocalDate.ofYearDay(gameYear, 1));", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549544989", "createdAt": "2020-12-29T02:24:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/market/ContractMarketAtBGenerationTests.java", "diffHunk": "@@ -0,0 +1,1741 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.market;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.CurrentLocation;\n+import mekhq.campaign.Hangar;\n+import mekhq.campaign.JumpPath;\n+import mekhq.campaign.finances.Accountant;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.force.Force;\n+import mekhq.campaign.mission.AtBContract;\n+import mekhq.campaign.rating.IUnitRating;\n+import mekhq.campaign.rating.UnitRatingMethod;\n+import mekhq.campaign.universe.Faction;\n+import mekhq.campaign.universe.FactionHints;\n+import mekhq.campaign.universe.Factions;\n+import mekhq.campaign.universe.RandomFactionGenerator;\n+import mekhq.campaign.universe.PlanetarySystem;\n+import mekhq.campaign.universe.Systems;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.Vector;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(Parameterized.class)\n+public class ContractMarketAtBGenerationTests {\n+\n+    private final int gameYear;\n+    private final int unitRating;\n+    private final boolean isClanEnemy;\n+\n+    public ContractMarketAtBGenerationTests(int gameYear, int unitRating, boolean isClanEnemy) {\n+        this.gameYear = gameYear;\n+        this.unitRating = unitRating;\n+        this.isClanEnemy = isClanEnemy;\n+    }\n+\n+    @Parameters(name = \"Run {index}: gameYear={0}, unitRating={1}, isClanEnemy={2}\")\n+    public static Iterable<Object[]> data() throws Throwable {\n+        List<Integer> gameYears = Arrays.asList(new Integer[] { 2750, 3025, 3055, 3067, 3120 });\n+        \n+        List<Object[]> parameters = new ArrayList<>();\n+        for (int gameYear : gameYears) {\n+            for (int rating = IUnitRating.DRAGOON_F; rating <= IUnitRating.DRAGOON_ASTAR; ++rating) {\n+                parameters.add(new Object[] { gameYear, rating, false });\n+                parameters.add(new Object[] { gameYear, rating, true });\n+            }\n+        }\n+        return parameters;\n+    }\n+\n+    @Test\n+    public void addMercWithoutRetainerAtBContractSucceeds() {\n+        Campaign campaign = mock(Campaign.class);\n+        when(campaign.getFactionCode()).thenReturn(\"MERC\");\n+        when(campaign.getRetainerEmployerCode()).thenReturn(null);\n+        when(campaign.getUnitRatingMod()).thenReturn(unitRating);\n+        when(campaign.getLocalDate()).thenReturn(LocalDate.of(gameYear, 1, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when(campaign.getLocalDate()).thenReturn(LocalDate.of(gameYear, 1, 1));\n          \n          \n            \n                    when(campaign.getLocalDate()).thenReturn(LocalDate.ofYearDay(gameYear, 1));", "url": "https://github.com/MegaMek/mekhq/pull/2294#discussion_r549545194", "createdAt": "2020-12-29T02:25:37Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/market/ContractMarketAtBGenerationTests.java", "diffHunk": "@@ -0,0 +1,1741 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.market;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.CurrentLocation;\n+import mekhq.campaign.Hangar;\n+import mekhq.campaign.JumpPath;\n+import mekhq.campaign.finances.Accountant;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.force.Force;\n+import mekhq.campaign.mission.AtBContract;\n+import mekhq.campaign.rating.IUnitRating;\n+import mekhq.campaign.rating.UnitRatingMethod;\n+import mekhq.campaign.universe.Faction;\n+import mekhq.campaign.universe.FactionHints;\n+import mekhq.campaign.universe.Factions;\n+import mekhq.campaign.universe.RandomFactionGenerator;\n+import mekhq.campaign.universe.PlanetarySystem;\n+import mekhq.campaign.universe.Systems;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.Vector;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(Parameterized.class)\n+public class ContractMarketAtBGenerationTests {\n+\n+    private final int gameYear;\n+    private final int unitRating;\n+    private final boolean isClanEnemy;\n+\n+    public ContractMarketAtBGenerationTests(int gameYear, int unitRating, boolean isClanEnemy) {\n+        this.gameYear = gameYear;\n+        this.unitRating = unitRating;\n+        this.isClanEnemy = isClanEnemy;\n+    }\n+\n+    @Parameters(name = \"Run {index}: gameYear={0}, unitRating={1}, isClanEnemy={2}\")\n+    public static Iterable<Object[]> data() throws Throwable {\n+        List<Integer> gameYears = Arrays.asList(new Integer[] { 2750, 3025, 3055, 3067, 3120 });\n+        \n+        List<Object[]> parameters = new ArrayList<>();\n+        for (int gameYear : gameYears) {\n+            for (int rating = IUnitRating.DRAGOON_F; rating <= IUnitRating.DRAGOON_ASTAR; ++rating) {\n+                parameters.add(new Object[] { gameYear, rating, false });\n+                parameters.add(new Object[] { gameYear, rating, true });\n+            }\n+        }\n+        return parameters;\n+    }\n+\n+    @Test\n+    public void addMercWithoutRetainerAtBContractSucceeds() {\n+        Campaign campaign = mock(Campaign.class);\n+        when(campaign.getFactionCode()).thenReturn(\"MERC\");\n+        when(campaign.getRetainerEmployerCode()).thenReturn(null);\n+        when(campaign.getUnitRatingMod()).thenReturn(unitRating);\n+        when(campaign.getLocalDate()).thenReturn(LocalDate.of(gameYear, 1, 1));\n+        when(campaign.getGameYear()).thenReturn(gameYear);\n+\n+        CampaignOptions campaignOptions = mock(CampaignOptions.class);\n+        when(campaignOptions.getVariableContractLength()).thenReturn(false);\n+        when(campaignOptions.getUnitRatingMethod()).thenReturn(UnitRatingMethod.FLD_MAN_MERCS_REV);\n+        when(campaignOptions.usePeacetimeCost()).thenReturn(false);\n+        when(campaign.getCampaignOptions()).thenReturn(campaignOptions);\n+\n+        Accountant accountant = mock(Accountant.class);\n+        when(accountant.getContractBase()).thenReturn(Money.of(1));\n+        when(accountant.getOverheadExpenses()).thenReturn(Money.of(1));\n+        when(campaign.getAccountant()).thenReturn(accountant);\n+\n+        Hangar hangar = mock(Hangar.class);\n+        doReturn(Money.of(1)).when(hangar).getUnitCosts(any(), any());\n+        when(campaign.getHangar()).thenReturn(hangar);\n+\n+        Force forces = mock(Force.class);\n+        doReturn(new Vector<UUID>()).when(forces).getAllUnits(anyBoolean());\n+        when(campaign.getForces()).thenReturn(forces);\n+\n+        Factions factions = mock(Factions.class);\n+        Factions.setInstance(factions);\n+\n+        String employer = \"EMPLOYER\";\n+        String employerFullName = \"Contract Employer\";\n+        Faction employerFaction = mock(Faction.class);\n+        when(employerFaction.getShortName()).thenReturn(employer);\n+        doReturn(employerFullName).when(employerFaction).getFullName(anyInt());\n+        doReturn(employerFaction).when(factions).getFaction(eq(employer));\n+\n+        String enemy = \"ENEMY\";\n+        String enemyFullName = \"Contract Enemy\";\n+        Faction enemyFaction = mock(Faction.class);\n+        when(enemyFaction.getShortName()).thenReturn(enemy);\n+        when(enemyFaction.isClan()).thenReturn(isClanEnemy);\n+        doReturn(enemyFullName).when(employerFaction).getFullName(anyInt());\n+        doReturn(enemyFaction).when(factions).getFaction(eq(enemy));\n+\n+        Faction pirates = mock(Faction.class);\n+        doReturn(pirates).when(factions).getFaction(eq(\"PIR\"));\n+\n+        Faction rebels = mock(Faction.class);\n+        doReturn(rebels).when(factions).getFaction(eq(\"REB\"));\n+\n+        Systems systems = mock(Systems.class);\n+        Systems.setInstance(systems);\n+\n+        String current = \"CURRENT\";\n+        PlanetarySystem currentSystem = mock(PlanetarySystem.class);\n+        when(currentSystem.getId()).thenReturn(current);\n+        when(campaign.getCurrentSystem()).thenReturn(currentSystem);\n+        doReturn(currentSystem).when(systems).getSystemById(eq(current));\n+        doReturn(currentSystem).when(campaign).getSystemByName(eq(current));\n+\n+        CurrentLocation currentLocation = mock(CurrentLocation.class);\n+        when(campaign.getLocation()).thenReturn(currentLocation);\n+\n+        String missionTarget = \"TARGET\";\n+        PlanetarySystem targetSystem = mock(PlanetarySystem.class);\n+        when(targetSystem.getId()).thenReturn(missionTarget);\n+        doReturn(targetSystem).when(systems).getSystemById(eq(missionTarget));\n+        doReturn(targetSystem).when(campaign).getSystemByName(eq(missionTarget));\n+\n+        RandomFactionGenerator rfg = mock(RandomFactionGenerator.class);\n+        RandomFactionGenerator.setInstance(rfg);\n+        when(rfg.getEmployer()).thenReturn(employer);\n+        doReturn(enemy).when(rfg).getEnemy(eq(employer), anyBoolean());\n+        doReturn(missionTarget).when(rfg).getMissionTarget(anyString(), anyString());\n+\n+        FactionHints hints = mock(FactionHints.class);\n+        doReturn(true).when(hints).isISMajorPower(eq(employerFaction));\n+        doReturn(true).when(hints).isISMajorPower(eq(enemyFaction));\n+        doReturn(false).when(hints).isNeutral(eq(employerFaction));\n+        doReturn(false).when(hints).isNeutral(eq(enemyFaction));\n+        when(rfg.getFactionHints()).thenReturn(hints);\n+\n+        JumpPath jumpPath = mock(JumpPath.class);\n+        when(jumpPath.getJumps()).thenReturn(1);\n+        doReturn(10.0).when(jumpPath).getTotalTime(any(), anyDouble());\n+        doReturn(jumpPath).when(campaign).calculateJumpPath(eq(currentSystem), eq(targetSystem));\n+        doReturn(Money.of(1)).when(campaign).calculateCostPerJump(anyBoolean(), anyBoolean());\n+\n+        ContractMarket market = new ContractMarket();\n+\n+        AtBContract contract = market.addAtBContract(campaign);\n+        assertNotNull(contract);\n+    }\n+\n+    @Test\n+    public void addMercWithoutRetainerMinorPowerAtBContractSucceeds() {\n+        Campaign campaign = mock(Campaign.class);\n+        when(campaign.getFactionCode()).thenReturn(\"MERC\");\n+        when(campaign.getRetainerEmployerCode()).thenReturn(null);\n+        when(campaign.getUnitRatingMod()).thenReturn(unitRating);\n+        when(campaign.getLocalDate()).thenReturn(LocalDate.of(gameYear, 1, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7948905571ace67d29c20549c505f0db25914a"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30aeaf1616d95fb1de04cbe918be9adc07369d15", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/30aeaf1616d95fb1de04cbe918be9adc07369d15", "committedDate": "2020-12-30T15:00:10Z", "message": "Resolve PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3957, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}