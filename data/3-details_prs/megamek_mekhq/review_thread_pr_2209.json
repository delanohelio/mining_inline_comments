{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MTYwNTA2", "number": 2209, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNzoyMTowMlrOE2XsTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNzoyMTowMlrOE2XsTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDQ2NzM1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/generator/RandomPortraitGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNzoyMTowMlrOHvJWww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNzo1OToxMVrOHvJkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5ODQwMw==", "bodyText": "Existing Portraits should be a Set to avoid bad runtimes on large campaigns.", "url": "https://github.com/MegaMek/mekhq/pull/2209#discussion_r519198403", "createdAt": "2020-11-07T17:21:02Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/generator/RandomPortraitGenerator.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign.personnel.generator;\n+\n+import megamek.common.Compute;\n+import megamek.common.icons.AbstractIcon;\n+import megamek.common.icons.Portrait;\n+import mekhq.MHQStaticDirectoryManager;\n+import mekhq.MekHQ;\n+import mekhq.campaign.personnel.Person;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class RandomPortraitGenerator {\n+    private RandomPortraitGenerator() {\n+\n+    }\n+\n+    /**\n+     * This generates a unique Portrait based on the supplied {@link Person}\n+     *\n+     * @param personnel a list of all personnel, from which existing portraits are determined\n+     * @param p the {@link Person} to generate a unique portrait for\n+     * @return the generated portrait\n+     */\n+    public static AbstractIcon generate(Collection<Person> personnel, Person p) {\n+        // first create a list of existing portrait strings, so we can check for\n+        // duplicates\n+        List<String> existingPortraits = new ArrayList<>();\n+        for (Person existingPerson : personnel) {\n+            existingPortraits.add(existingPerson.getPortraitCategory() + \":\"\n+                    + existingPerson.getPortraitFileName());\n+        }\n+\n+        List<String> possiblePortraits;\n+\n+        // Will search for portraits in the /gender/primaryrole folder first,\n+        // and if none are found then /gender/rolegroup, then /gender/combat or\n+        // /gender/support, then in /gender.\n+        File genderFile = new File(p.getGender().isFemale() ? \"Female\" : \"Male\");\n+        File searchFile = new File(genderFile, Person.getRoleDesc(p.getPrimaryRole(), p.isClanner()));\n+\n+        possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+\n+        if (possiblePortraits.isEmpty()) {\n+            String searchCat_RoleGroup = \"\";\n+            if (p.isAdminPrimary()) {\n+                searchCat_RoleGroup = \"Admin\";\n+            } else if (p.getPrimaryRole() == Person.T_SPACE_CREW\n+                    || p.getPrimaryRole() == Person.T_SPACE_GUNNER\n+                    || p.getPrimaryRole() == Person.T_SPACE_PILOT\n+                    || p.getPrimaryRole() == Person.T_NAVIGATOR) {\n+                searchCat_RoleGroup = \"Vessel Crew\";\n+            } else if (p.isTechPrimary()) {\n+                searchCat_RoleGroup = \"Tech\";\n+            } else if (p.getPrimaryRole() == Person.T_MEDIC\n+                    || p.getPrimaryRole() == Person.T_DOCTOR) {\n+                searchCat_RoleGroup = \"Medical\";\n+            }\n+\n+            // TODO : Java 11 : Swap to isBlank\n+            if (!searchCat_RoleGroup.trim().isEmpty()) {\n+                searchFile = new File(genderFile, searchCat_RoleGroup);\n+                possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+            }\n+        }\n+\n+        if (possiblePortraits.isEmpty()) {\n+            searchFile = new File(genderFile, p.hasPrimaryCombatRole() ? \"Combat\" : \"Support\");\n+            possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+        }\n+\n+        if (possiblePortraits.isEmpty()) {\n+            possiblePortraits = getPossibleRandomPortraits(existingPortraits, genderFile);\n+        }\n+\n+        if (!possiblePortraits.isEmpty()) {\n+            String chosenPortrait = possiblePortraits.get(Compute.randomInt(possiblePortraits.size()));\n+            String[] temp = chosenPortrait.split(\":\");\n+            if (temp.length == 2) {\n+                return new Portrait(temp[0], temp[1]);\n+            } else {\n+                MekHQ.getLogger().error(\"Failed to generate portrait for \" + p.getFullTitle() + \". \"\n+                        + chosenPortrait + \" does not split into an array of length 2.\");\n+            }\n+        } else {\n+            MekHQ.getLogger().warning(\"Failed to generate portrait for \" + p.getFullTitle()\n+                    + \". No possible portraits found.\");\n+        }\n+\n+        return new Portrait();\n+    }\n+\n+    /**\n+     * This is a helper method that determines what possible unassigned portraits can be generated\n+     * based on the supplied subdirectory\n+     *\n+     * @param existingPortraits the list of existing portraits that have already been assigned\n+     * @param subDir the subdirectory to search\n+     * @return a list of all possible unassigned random portraits\n+     */\n+    private static List<String> getPossibleRandomPortraits(List<String> existingPortraits, File subDir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c5148c01c2c7c9bc958abf852c64622e85ead1b"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMTgyNw==", "bodyText": "Pre-existing and I've never heard any issues with its performance before even on the largest campaigns. However, given it is for contains it does make sense to swap over, so I've done so.", "url": "https://github.com/MegaMek/mekhq/pull/2209#discussion_r519201827", "createdAt": "2020-11-07T17:59:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/generator/RandomPortraitGenerator.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign.personnel.generator;\n+\n+import megamek.common.Compute;\n+import megamek.common.icons.AbstractIcon;\n+import megamek.common.icons.Portrait;\n+import mekhq.MHQStaticDirectoryManager;\n+import mekhq.MekHQ;\n+import mekhq.campaign.personnel.Person;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class RandomPortraitGenerator {\n+    private RandomPortraitGenerator() {\n+\n+    }\n+\n+    /**\n+     * This generates a unique Portrait based on the supplied {@link Person}\n+     *\n+     * @param personnel a list of all personnel, from which existing portraits are determined\n+     * @param p the {@link Person} to generate a unique portrait for\n+     * @return the generated portrait\n+     */\n+    public static AbstractIcon generate(Collection<Person> personnel, Person p) {\n+        // first create a list of existing portrait strings, so we can check for\n+        // duplicates\n+        List<String> existingPortraits = new ArrayList<>();\n+        for (Person existingPerson : personnel) {\n+            existingPortraits.add(existingPerson.getPortraitCategory() + \":\"\n+                    + existingPerson.getPortraitFileName());\n+        }\n+\n+        List<String> possiblePortraits;\n+\n+        // Will search for portraits in the /gender/primaryrole folder first,\n+        // and if none are found then /gender/rolegroup, then /gender/combat or\n+        // /gender/support, then in /gender.\n+        File genderFile = new File(p.getGender().isFemale() ? \"Female\" : \"Male\");\n+        File searchFile = new File(genderFile, Person.getRoleDesc(p.getPrimaryRole(), p.isClanner()));\n+\n+        possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+\n+        if (possiblePortraits.isEmpty()) {\n+            String searchCat_RoleGroup = \"\";\n+            if (p.isAdminPrimary()) {\n+                searchCat_RoleGroup = \"Admin\";\n+            } else if (p.getPrimaryRole() == Person.T_SPACE_CREW\n+                    || p.getPrimaryRole() == Person.T_SPACE_GUNNER\n+                    || p.getPrimaryRole() == Person.T_SPACE_PILOT\n+                    || p.getPrimaryRole() == Person.T_NAVIGATOR) {\n+                searchCat_RoleGroup = \"Vessel Crew\";\n+            } else if (p.isTechPrimary()) {\n+                searchCat_RoleGroup = \"Tech\";\n+            } else if (p.getPrimaryRole() == Person.T_MEDIC\n+                    || p.getPrimaryRole() == Person.T_DOCTOR) {\n+                searchCat_RoleGroup = \"Medical\";\n+            }\n+\n+            // TODO : Java 11 : Swap to isBlank\n+            if (!searchCat_RoleGroup.trim().isEmpty()) {\n+                searchFile = new File(genderFile, searchCat_RoleGroup);\n+                possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+            }\n+        }\n+\n+        if (possiblePortraits.isEmpty()) {\n+            searchFile = new File(genderFile, p.hasPrimaryCombatRole() ? \"Combat\" : \"Support\");\n+            possiblePortraits = getPossibleRandomPortraits(existingPortraits, searchFile);\n+        }\n+\n+        if (possiblePortraits.isEmpty()) {\n+            possiblePortraits = getPossibleRandomPortraits(existingPortraits, genderFile);\n+        }\n+\n+        if (!possiblePortraits.isEmpty()) {\n+            String chosenPortrait = possiblePortraits.get(Compute.randomInt(possiblePortraits.size()));\n+            String[] temp = chosenPortrait.split(\":\");\n+            if (temp.length == 2) {\n+                return new Portrait(temp[0], temp[1]);\n+            } else {\n+                MekHQ.getLogger().error(\"Failed to generate portrait for \" + p.getFullTitle() + \". \"\n+                        + chosenPortrait + \" does not split into an array of length 2.\");\n+            }\n+        } else {\n+            MekHQ.getLogger().warning(\"Failed to generate portrait for \" + p.getFullTitle()\n+                    + \". No possible portraits found.\");\n+        }\n+\n+        return new Portrait();\n+    }\n+\n+    /**\n+     * This is a helper method that determines what possible unassigned portraits can be generated\n+     * based on the supplied subdirectory\n+     *\n+     * @param existingPortraits the list of existing portraits that have already been assigned\n+     * @param subDir the subdirectory to search\n+     * @return a list of all possible unassigned random portraits\n+     */\n+    private static List<String> getPossibleRandomPortraits(List<String> existingPortraits, File subDir) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5ODQwMw=="}, "originalCommit": {"oid": "5c5148c01c2c7c9bc958abf852c64622e85ead1b"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2161, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}