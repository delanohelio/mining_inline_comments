{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDI3OTgz", "number": 1765, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNTo0Nzo0OVrOD_NPWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxNzoxNFrOEBFBJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjAzODAwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/familyTree/Genealogy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNTo0Nzo0OVrOGZvu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxODoxN1rOGcwGgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0OTY0MA==", "bodyText": "I think this is ripe for unit tests, along with removing relations to make sure the tree is pruned.", "url": "https://github.com/MegaMek/mekhq/pull/1765#discussion_r429649640", "createdAt": "2020-05-24T15:47:49Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/familyTree/Genealogy.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign.personnel.familyTree;\n+\n+import megamek.common.Crew;\n+import megamek.common.annotations.Nullable;\n+import mekhq.MekHQ;\n+import mekhq.MekHqXmlSerializable;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.personnel.FormerSpouse;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.personnel.enums.FamilialRelationshipType;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.util.*;\n+\n+public class Genealogy implements Serializable, MekHqXmlSerializable {\n+    //region Variables\n+    private static final long serialVersionUID = -6350146649504329173L;\n+    private UUID spouse;\n+    private List<FormerSpouse> formerSpouses;\n+    private Map<FamilialRelationshipType, List<UUID>> family;\n+    //endregion Variables\n+\n+    //region Constructors\n+    public Genealogy() {\n+        this.spouse = null;\n+        this.formerSpouses = new ArrayList<>();\n+        this.family = new HashMap<>();\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    /**\n+     * @param campaign the campaign the person is in\n+     * @return the person's spouse, or null if they don't have a spouse\n+     */\n+    @Nullable\n+    public Person getSpouse(Campaign campaign) {\n+        return campaign.getPerson(getSpouseId());\n+    }\n+\n+    /**\n+     * @return the current person's spouse's id\n+     */\n+    @Nullable\n+    public UUID getSpouseId() {\n+        return spouse;\n+    }\n+\n+    /**\n+     * @param spouse the new spouse id for the current person\n+     */\n+    public void setSpouse(@Nullable UUID spouse) {\n+        this.spouse = spouse;\n+    }\n+\n+    /**\n+     * @return a list of FormerSpouse objects for all the former spouses of the current person\n+     */\n+    public List<FormerSpouse> getFormerSpouses() {\n+        return formerSpouses;\n+    }\n+\n+    /**\n+     * @param formerSpouse a former spouse to add the the current person's list\n+     */\n+    public void addFormerSpouse(FormerSpouse formerSpouse) {\n+        getFormerSpouses().add(formerSpouse);\n+    }\n+\n+    /**\n+     * This is implemented for future use, as it will be required for the family tree implementation\n+     * @param formerSpouse the former spouse to remove from the current person's list\n+     */\n+    public void removeFormerSpouse(FormerSpouse formerSpouse) {\n+        getFormerSpouses().remove(formerSpouse);\n+    }\n+\n+    /**\n+     * @return the family map for this person\n+     */\n+    public Map<FamilialRelationshipType, List<UUID>> getFamily() {\n+        return family;\n+    }\n+\n+    /**\n+     * This is used to add a new family member\n+     * @param relationshipType the relationship type between the two people\n+     * @param id the id of the person to add\n+     */\n+    public void addFamilyMember(FamilialRelationshipType relationshipType, UUID id) {\n+        if (id != null) {\n+            getFamily().putIfAbsent(relationshipType, new ArrayList<>());\n+            getFamily().get(relationshipType).add(id);\n+        }\n+    }\n+\n+    /**\n+     * This is implemented for future use, as it will be required for the family tree implementation\n+     * @param relationshipType the FamilialRelationshipType of the person to remove\n+     * @param id the id of the person to remove\n+     */\n+    public void removeFamilyMember(FamilialRelationshipType relationshipType, UUID id) {\n+        if (getFamily().get(relationshipType) == null) {\n+            MekHQ.getLogger().error(getClass(), \"removeFamilyMember\",\n+                    \"Could not remove unknown family member of relationship \"\n+                            + relationshipType.name() + \" and UUID \" + id.toString() + \".\");\n+            return;\n+        }\n+\n+        List<UUID> familyTypeMembers = getFamily().get(relationshipType);\n+        familyTypeMembers.remove(id);\n+        if (familyTypeMembers.isEmpty()) {\n+            getFamily().remove(relationshipType);\n+        }\n+    }\n+    //endregion Getters/Setters\n+\n+    //region Boolean Checks\n+    /**\n+     * @return true if the person has either a spouse, any children, or specified parents.\n+     *          These are required for any extended family to exist.\n+     */\n+    public boolean hasAnyFamily() {\n+        return hasChildren() || hasSpouse() || hasParents();\n+    }\n+\n+    /**\n+     * @return true if the person has a spouse, false otherwise\n+     */\n+    public boolean hasSpouse() {\n+        return (getSpouseId() != null);\n+    }\n+\n+    /**\n+     * @return true if the person has a former spouse, false otherwise\n+     */\n+    public boolean hasFormerSpouse() {\n+        return !getFormerSpouses().isEmpty();\n+    }\n+\n+    /**\n+     * @return true if the person has at least one kid, false otherwise\n+     */\n+    public boolean hasChildren() {\n+        return (getFamily().get(FamilialRelationshipType.CHILD) != null);\n+    }\n+\n+    /**\n+     * @return true if the Person has any parents, otherwise false\n+     */\n+    public boolean hasParents() {\n+        return (getFamily().get(FamilialRelationshipType.PARENT) != null);\n+    }\n+\n+    // Recursive Search Format to determine mutual ancestry\n+    public boolean checkMutualAncestors(Person person, Campaign campaign) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28fcf5c907d002a24654564ef93189e1839ad59c"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTQxMA==", "bodyText": "And while you're at it, let's put some comments on these public methods, as I don't really have any idea what they do just looking at the name.", "url": "https://github.com/MegaMek/mekhq/pull/1765#discussion_r432801410", "createdAt": "2020-05-30T02:18:17Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/personnel/familyTree/Genealogy.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign.personnel.familyTree;\n+\n+import megamek.common.Crew;\n+import megamek.common.annotations.Nullable;\n+import mekhq.MekHQ;\n+import mekhq.MekHqXmlSerializable;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.personnel.FormerSpouse;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.personnel.enums.FamilialRelationshipType;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.util.*;\n+\n+public class Genealogy implements Serializable, MekHqXmlSerializable {\n+    //region Variables\n+    private static final long serialVersionUID = -6350146649504329173L;\n+    private UUID spouse;\n+    private List<FormerSpouse> formerSpouses;\n+    private Map<FamilialRelationshipType, List<UUID>> family;\n+    //endregion Variables\n+\n+    //region Constructors\n+    public Genealogy() {\n+        this.spouse = null;\n+        this.formerSpouses = new ArrayList<>();\n+        this.family = new HashMap<>();\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    /**\n+     * @param campaign the campaign the person is in\n+     * @return the person's spouse, or null if they don't have a spouse\n+     */\n+    @Nullable\n+    public Person getSpouse(Campaign campaign) {\n+        return campaign.getPerson(getSpouseId());\n+    }\n+\n+    /**\n+     * @return the current person's spouse's id\n+     */\n+    @Nullable\n+    public UUID getSpouseId() {\n+        return spouse;\n+    }\n+\n+    /**\n+     * @param spouse the new spouse id for the current person\n+     */\n+    public void setSpouse(@Nullable UUID spouse) {\n+        this.spouse = spouse;\n+    }\n+\n+    /**\n+     * @return a list of FormerSpouse objects for all the former spouses of the current person\n+     */\n+    public List<FormerSpouse> getFormerSpouses() {\n+        return formerSpouses;\n+    }\n+\n+    /**\n+     * @param formerSpouse a former spouse to add the the current person's list\n+     */\n+    public void addFormerSpouse(FormerSpouse formerSpouse) {\n+        getFormerSpouses().add(formerSpouse);\n+    }\n+\n+    /**\n+     * This is implemented for future use, as it will be required for the family tree implementation\n+     * @param formerSpouse the former spouse to remove from the current person's list\n+     */\n+    public void removeFormerSpouse(FormerSpouse formerSpouse) {\n+        getFormerSpouses().remove(formerSpouse);\n+    }\n+\n+    /**\n+     * @return the family map for this person\n+     */\n+    public Map<FamilialRelationshipType, List<UUID>> getFamily() {\n+        return family;\n+    }\n+\n+    /**\n+     * This is used to add a new family member\n+     * @param relationshipType the relationship type between the two people\n+     * @param id the id of the person to add\n+     */\n+    public void addFamilyMember(FamilialRelationshipType relationshipType, UUID id) {\n+        if (id != null) {\n+            getFamily().putIfAbsent(relationshipType, new ArrayList<>());\n+            getFamily().get(relationshipType).add(id);\n+        }\n+    }\n+\n+    /**\n+     * This is implemented for future use, as it will be required for the family tree implementation\n+     * @param relationshipType the FamilialRelationshipType of the person to remove\n+     * @param id the id of the person to remove\n+     */\n+    public void removeFamilyMember(FamilialRelationshipType relationshipType, UUID id) {\n+        if (getFamily().get(relationshipType) == null) {\n+            MekHQ.getLogger().error(getClass(), \"removeFamilyMember\",\n+                    \"Could not remove unknown family member of relationship \"\n+                            + relationshipType.name() + \" and UUID \" + id.toString() + \".\");\n+            return;\n+        }\n+\n+        List<UUID> familyTypeMembers = getFamily().get(relationshipType);\n+        familyTypeMembers.remove(id);\n+        if (familyTypeMembers.isEmpty()) {\n+            getFamily().remove(relationshipType);\n+        }\n+    }\n+    //endregion Getters/Setters\n+\n+    //region Boolean Checks\n+    /**\n+     * @return true if the person has either a spouse, any children, or specified parents.\n+     *          These are required for any extended family to exist.\n+     */\n+    public boolean hasAnyFamily() {\n+        return hasChildren() || hasSpouse() || hasParents();\n+    }\n+\n+    /**\n+     * @return true if the person has a spouse, false otherwise\n+     */\n+    public boolean hasSpouse() {\n+        return (getSpouseId() != null);\n+    }\n+\n+    /**\n+     * @return true if the person has a former spouse, false otherwise\n+     */\n+    public boolean hasFormerSpouse() {\n+        return !getFormerSpouses().isEmpty();\n+    }\n+\n+    /**\n+     * @return true if the person has at least one kid, false otherwise\n+     */\n+    public boolean hasChildren() {\n+        return (getFamily().get(FamilialRelationshipType.CHILD) != null);\n+    }\n+\n+    /**\n+     * @return true if the Person has any parents, otherwise false\n+     */\n+    public boolean hasParents() {\n+        return (getFamily().get(FamilialRelationshipType.PARENT) != null);\n+    }\n+\n+    // Recursive Search Format to determine mutual ancestry\n+    public boolean checkMutualAncestors(Person person, Campaign campaign) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0OTY0MA=="}, "originalCommit": {"oid": "28fcf5c907d002a24654564ef93189e1839ad59c"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY2MDUxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxMzowMlrOGcwFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxMzowMlrOGcwFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTA1MA==", "bodyText": "Let's put a comment on this public method.", "url": "https://github.com/MegaMek/mekhq/pull/1765#discussion_r432801050", "createdAt": "2020-05-30T02:13:02Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1901,4 +1861,72 @@ private static void updatePlanetaryEventsFromXML(Node wn) {\n             }\n         }\n     }\n+\n+\n+    //region Migration Methods\n+    //region Ancestry Migration\n+    private static Map<UUID, List<Person>> ancestryMigrationMap = new HashMap<>();\n+\n+    public static void addToAncestryMigrationMap(UUID ancestorsId, Person person) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28fcf5c907d002a24654564ef93189e1839ad59c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY2MjQ2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/enums/FamilialRelationshipType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxNzoxNFrOGcwGNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoxNzoxNFrOGcwGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTMzMw==", "bodyText": "Seems like some comments would be helpful for this enum in general.", "url": "https://github.com/MegaMek/mekhq/pull/1765#discussion_r432801333", "createdAt": "2020-05-30T02:17:14Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/personnel/enums/FamilialRelationshipType.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign.personnel.enums;\n+\n+import megamek.common.Crew;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.personnel.Person;\n+\n+import java.util.ResourceBundle;\n+\n+public enum FamilialRelationshipType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28fcf5c907d002a24654564ef93189e1839ad59c"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2315, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}