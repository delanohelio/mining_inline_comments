{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTcxODM2", "number": 2185, "title": "Remove use of unit IDs for transports", "bodyText": "This removes the use of unit IDs for \"transports\" and cleans up how we tracked where units were being transported. Previously we used a Map data structure, except it could only have one entry. This has been instead switched out for a more formal class, TransportShipAssignment. Tests have been added for the basic transport logic as well.", "createdAt": "2020-11-03T20:22:40Z", "url": "https://github.com/MegaMek/mekhq/pull/2185", "merged": true, "mergeCommit": {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed"}, "closed": true, "closedAt": "2020-11-07T00:38:47Z", "author": {"login": "sixlettervariables"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY_CyggH2gAyNTE0OTcxODM2OmQ2NjM4MDRjNGNjMTgyMmI4ZTU5ZTc0MTk3YTE4NDJiMjllZWU1ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ9NJvgFqTUyNTQ4MTMzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d663804c4cc1822b8e59e74197a1842b29eee5f3", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/d663804c4cc1822b8e59e74197a1842b29eee5f3", "committedDate": "2020-11-03T20:18:29Z", "message": "Use units not IDs for transport ships and transported units"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380b9f6a5e6a69d9738a83f6643ca1da68bdfa43", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/380b9f6a5e6a69d9738a83f6643ca1da68bdfa43", "committedDate": "2020-11-03T20:18:29Z", "message": "Dynamically calculate Unit::isCarryingXXX"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/490d130ced53c847bc6c13c31c46a15fd1ec60af", "committedDate": "2020-11-03T20:18:29Z", "message": "Add basic tests for transporting units"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzI2Mzg3", "url": "https://github.com/MegaMek/mekhq/pull/2185#pullrequestreview-525326387", "createdAt": "2020-11-06T16:51:39Z", "commit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1MTo0MFrOHu1vjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMzo1MVrOHu6CYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave everything the same.\n          \n          \n            \n                    // ... should leave everything the same.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877069", "createdAt": "2020-11-06T16:51:40Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzE4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and removing the first...\n          \n          \n            \n                    // ... and removing the first...", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877181", "createdAt": "2020-11-06T16:51:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzI0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us with just that one other unit.\n          \n          \n            \n                    // ... should leave us with just that one other unit.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877247", "createdAt": "2020-11-06T16:51:53Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzQ1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and clearing out our transport bays...\n          \n          \n            \n                    // ... and clearing out our transport bays...", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877459", "createdAt": "2020-11-06T16:52:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us empty again.\n          \n          \n            \n                    // ... should leave us empty again.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877509", "createdAt": "2020-11-06T16:52:20Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...\n+        transport.clearTransportedUnits();\n+\n+        // ...should leave us empty again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzIzOA==", "bodyText": "What about the case whereby a unit is assigned to this transport according to the unit but not according to the transport ship?", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947238", "createdAt": "2020-11-06T19:03:26Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzQyNg==", "bodyText": "Trinary candidate.", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947426", "createdAt": "2020-11-06T19:03:51Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {\n+            double unitWeight;\n+            if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n+                unitWeight = calcInfantryBayWeight(u.getEntity());\n+            } else {\n+                unitWeight = u.getEntity().getWeight();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af"}, "originalPosition": 215}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb0bda7a8497b5a1d1be62cf0efcff185a1a332", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/cfb0bda7a8497b5a1d1be62cf0efcff185a1a332", "committedDate": "2020-11-06T19:09:39Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7adb6e21c09e751146a877f4e3c98e78eb044ef", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/b7adb6e21c09e751146a877f4e3c98e78eb044ef", "committedDate": "2020-11-06T19:12:29Z", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids-for-transports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06T19:57:11Z", "message": "Address PR feedback and fix #1801"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06T19:58:38Z", "message": "Fix extraneous whitespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDY0Njg5", "url": "https://github.com/MegaMek/mekhq/pull/2185#pullrequestreview-525464689", "createdAt": "2020-11-06T20:13:48Z", "commit": {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8b8c2cf2c31b0b306f3b44d7562aab438099f7", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/0b8b8c2cf2c31b0b306f3b44d7562aab438099f7", "committedDate": "2020-11-06T20:40:18Z", "message": "Fix LGTM find"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f290da507ec49b5975faddb1c39b928caa24e920", "author": {"user": {"login": "sixlettervariables", "name": "Christopher Watford"}}, "url": "https://github.com/MegaMek/mekhq/commit/f290da507ec49b5975faddb1c39b928caa24e920", "committedDate": "2020-11-06T20:40:31Z", "message": "Update tests based on review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDgxMzMz", "url": "https://github.com/MegaMek/mekhq/pull/2185#pullrequestreview-525481333", "createdAt": "2020-11-06T20:43:55Z", "commit": {"oid": "f290da507ec49b5975faddb1c39b928caa24e920"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}