{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTMwNDk1", "number": 1606, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMTozMlrODtREnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNjo0NlrODtR3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkyMjIwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMTozMlrOF-mBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1ODoxMVrOF_EtMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODk3MA==", "bodyText": "Why was this swapped from .equals? That makes no sense for a string comparison. Also a few other weird formatting changes in this file.", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401178970", "createdAt": "2020-03-31T20:01:32Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -395,7 +409,7 @@ private void configureBot(BotClient botClient, BotForce botForce) {\n                 botClient.getLocalPlayer().setTeam(botForce.getTeam());\n                 botClient.getLocalPlayer().setStartingPos(botForce.getStart());\n \n-                if (botForce.getCamoCategory().equals(Player.NO_CAMO)) {\n+                if (botForce.getCamoCategory() == Player.NO_CAMO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MTcxMg==", "bodyText": "Couldn't say. I suspect it was introduced from a merge of the latest Master.", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401681712", "createdAt": "2020-04-01T14:58:11Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -395,7 +409,7 @@ private void configureBot(BotClient botClient, BotForce botForce) {\n                 botClient.getLocalPlayer().setTeam(botForce.getTeam());\n                 botClient.getLocalPlayer().setStartingPos(botForce.getStart());\n \n-                if (botForce.getCamoCategory().equals(Player.NO_CAMO)) {\n+                if (botForce.getCamoCategory() == Player.NO_CAMO) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODk3MA=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk1NTIwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMDozM1rOF-mVgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowOTo1MlrOF_FQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if(wounded) {\n          \n          \n            \n                                        if (wounded) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401184131", "createdAt": "2020-03-31T20:10:33Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }\n+        \n+        //Now, did the passengers take any hits? \n+        //We'll assume that if units in transport bays were hit, their crews and techs might also have been\n+        Set<PersonStatus> allPassengersStatus = new HashSet<>(); //Use this to keep track of ejected passengers for the next step\n+        List<Entity> cargo = bayLoadedEntities.get(UUID.fromString(en.getExternalIdAsString()));\n+        if (cargo != null) {\n+            for (Entity e : cargo) {\n+                //Match the still-loaded cargo entity with its unit so we can get the crew\n+                Unit u = campaign.getUnit(UUID.fromString(e.getExternalIdAsString()));\n+                if (u != null) {\n+                    List<Person> cargoCrew = u.getActiveCrew();\n+                    cargoCrew.add(u.getTech());\n+                    cargoCrew = shuffleCrew(cargoCrew);\n+                    for (Person p : cargoCrew) {\n+                        PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                                p.getHits(), p.getId());\n+                        boolean wounded = false;\n+                        //The lore says bay crews have pressurized sleeping alcoves in the corners of each bay\n+                        //Let's assume people are injured on an 8+ if the unit is destroyed, same as a critical hit chance\n+                        if (e.isDestroyed() && Compute.d6(2) >= 8) {\n+                            //As with crewmembers, on a 7+ they're only wounded\n+                            if(Compute.d6(2) >= 7) {\n+                                wounded = true;\n+                            } else {\n+                                status.setHits(6);\n+                                status.setDead(true);\n+                            }\n+                            if(wounded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 502}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDgyOA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401690828", "createdAt": "2020-04-01T15:09:52Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }\n+        \n+        //Now, did the passengers take any hits? \n+        //We'll assume that if units in transport bays were hit, their crews and techs might also have been\n+        Set<PersonStatus> allPassengersStatus = new HashSet<>(); //Use this to keep track of ejected passengers for the next step\n+        List<Entity> cargo = bayLoadedEntities.get(UUID.fromString(en.getExternalIdAsString()));\n+        if (cargo != null) {\n+            for (Entity e : cargo) {\n+                //Match the still-loaded cargo entity with its unit so we can get the crew\n+                Unit u = campaign.getUnit(UUID.fromString(e.getExternalIdAsString()));\n+                if (u != null) {\n+                    List<Person> cargoCrew = u.getActiveCrew();\n+                    cargoCrew.add(u.getTech());\n+                    cargoCrew = shuffleCrew(cargoCrew);\n+                    for (Person p : cargoCrew) {\n+                        PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                                p.getHits(), p.getId());\n+                        boolean wounded = false;\n+                        //The lore says bay crews have pressurized sleeping alcoves in the corners of each bay\n+                        //Let's assume people are injured on an 8+ if the unit is destroyed, same as a critical hit chance\n+                        if (e.isDestroyed() && Compute.d6(2) >= 8) {\n+                            //As with crewmembers, on a 7+ they're only wounded\n+                            if(Compute.d6(2) >= 7) {\n+                                wounded = true;\n+                            } else {\n+                                status.setHits(6);\n+                                status.setDead(true);\n+                            }\n+                            if(wounded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDEzMQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk1NTU3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMDo0MVrOF-mVvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowOTo0M1rOF_FQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDE5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if(Compute.d6(2) >= 7) {\n          \n          \n            \n                                        if (Compute.d6(2) >= 7) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401184190", "createdAt": "2020-03-31T20:10:41Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }\n+        \n+        //Now, did the passengers take any hits? \n+        //We'll assume that if units in transport bays were hit, their crews and techs might also have been\n+        Set<PersonStatus> allPassengersStatus = new HashSet<>(); //Use this to keep track of ejected passengers for the next step\n+        List<Entity> cargo = bayLoadedEntities.get(UUID.fromString(en.getExternalIdAsString()));\n+        if (cargo != null) {\n+            for (Entity e : cargo) {\n+                //Match the still-loaded cargo entity with its unit so we can get the crew\n+                Unit u = campaign.getUnit(UUID.fromString(e.getExternalIdAsString()));\n+                if (u != null) {\n+                    List<Person> cargoCrew = u.getActiveCrew();\n+                    cargoCrew.add(u.getTech());\n+                    cargoCrew = shuffleCrew(cargoCrew);\n+                    for (Person p : cargoCrew) {\n+                        PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                                p.getHits(), p.getId());\n+                        boolean wounded = false;\n+                        //The lore says bay crews have pressurized sleeping alcoves in the corners of each bay\n+                        //Let's assume people are injured on an 8+ if the unit is destroyed, same as a critical hit chance\n+                        if (e.isDestroyed() && Compute.d6(2) >= 8) {\n+                            //As with crewmembers, on a 7+ they're only wounded\n+                            if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 496}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDcwNQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401690705", "createdAt": "2020-04-01T15:09:43Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }\n+        \n+        //Now, did the passengers take any hits? \n+        //We'll assume that if units in transport bays were hit, their crews and techs might also have been\n+        Set<PersonStatus> allPassengersStatus = new HashSet<>(); //Use this to keep track of ejected passengers for the next step\n+        List<Entity> cargo = bayLoadedEntities.get(UUID.fromString(en.getExternalIdAsString()));\n+        if (cargo != null) {\n+            for (Entity e : cargo) {\n+                //Match the still-loaded cargo entity with its unit so we can get the crew\n+                Unit u = campaign.getUnit(UUID.fromString(e.getExternalIdAsString()));\n+                if (u != null) {\n+                    List<Person> cargoCrew = u.getActiveCrew();\n+                    cargoCrew.add(u.getTech());\n+                    cargoCrew = shuffleCrew(cargoCrew);\n+                    for (Person p : cargoCrew) {\n+                        PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                                p.getHits(), p.getId());\n+                        boolean wounded = false;\n+                        //The lore says bay crews have pressurized sleeping alcoves in the corners of each bay\n+                        //Let's assume people are injured on an 8+ if the unit is destroyed, same as a critical hit chance\n+                        if (e.isDestroyed() && Compute.d6(2) >= 8) {\n+                            //As with crewmembers, on a 7+ they're only wounded\n+                            if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDE5MA=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 496}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk1ODU1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMTozNlrOF-mXlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxMDo0M1rOF_FTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401184661", "createdAt": "2020-03-31T20:11:36Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -117,14 +117,17 @@\n     // Convenience data used by GameThread\n     private boolean carryingAero = false;\n     private boolean carryingGround = false;\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MTQ3NA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401691474", "createdAt": "2020-04-01T15:10:43Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -117,14 +117,17 @@\n     // Convenience data used by GameThread\n     private boolean carryingAero = false;\n     private boolean carryingGround = false;\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDY2MQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2MTQxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMjoyNVrOF-mZUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1MjoxNFrOF_EbUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \n          \n          \n            \n             *", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401185105", "createdAt": "2020-03-31T20:12:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n /**\n  * @author Neoancient\n- *\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzEzNg==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401677136", "createdAt": "2020-04-01T14:52:14Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n /**\n  * @author Neoancient\n- *\n+ * ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTEwNQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2MjI5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMjozOFrOF-mZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1Mjo0NlrOF_Ec3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if((scenario instanceof AtBScenario) &&\n          \n          \n            \n                            if ((scenario instanceof AtBScenario) &&", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401185229", "createdAt": "2020-03-31T20:12:38Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -128,7 +128,7 @@ public void run() {\n                 MapSettings mapSettings = MapSettings.getInstance();\n \n                 // if the scenario is taking place in space, do space settings instead\n-                if ((scenario instanceof AtBScenario) &&\n+                if((scenario instanceof AtBScenario) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzUzMw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401677533", "createdAt": "2020-04-01T14:52:46Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -128,7 +128,7 @@ public void run() {\n                 MapSettings mapSettings = MapSettings.getInstance();\n \n                 // if the scenario is taking place in space, do space settings instead\n-                if ((scenario instanceof AtBScenario) &&\n+                if((scenario instanceof AtBScenario) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTIyOQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2Mjg2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMjo0N1rOF-maIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1MzowNVrOF_Edzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            PlanetaryConditions planetaryConditions = new PlanetaryConditions(); \n          \n          \n            \n                            PlanetaryConditions planetaryConditions = new PlanetaryConditions();", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401185312", "createdAt": "2020-03-31T20:12:47Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -153,7 +153,7 @@ public void run() {\n                 client.sendMapSettings(mapSettings);\n                 Thread.sleep(campaign.getCampaignOptions().getStartGameDelay());\n \n-                PlanetaryConditions planetaryConditions = new PlanetaryConditions();\n+                PlanetaryConditions planetaryConditions = new PlanetaryConditions(); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3Nzc3NQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401677775", "createdAt": "2020-04-01T14:53:05Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -153,7 +153,7 @@ public void run() {\n                 client.sendMapSettings(mapSettings);\n                 Thread.sleep(campaign.getCampaignOptions().getStartGameDelay());\n \n-                PlanetaryConditions planetaryConditions = new PlanetaryConditions();\n+                PlanetaryConditions planetaryConditions = new PlanetaryConditions(); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTMxMg=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2MzcxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMjo1N1rOF-mamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1NDoxNlrOF_Ehgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Wait a few secs to not overuse bandwith\n          \n          \n            \n                                // Wait a few secs to not overuse bandwidth", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401185432", "createdAt": "2020-03-31T20:12:57Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -223,7 +229,7 @@ public void run() {\n                     entity.setDeployRound(deploymentRound);\n                     // Add Mek to game\n                     client.sendAddEntity(entity);\n-                    // Wait a few secs to not overuse bandwidth\n+                    // Wait a few secs to not overuse bandwith", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3ODcyMw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401678723", "createdAt": "2020-04-01T14:54:16Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -223,7 +229,7 @@ public void run() {\n                     entity.setDeployRound(deploymentRound);\n                     // Add Mek to game\n                     client.sendAddEntity(entity);\n-                    // Wait a few secs to not overuse bandwidth\n+                    // Wait a few secs to not overuse bandwith", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTQzMg=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2NDY0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMzoxM1rOF-mbLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1Mzo0NFrOF_Ef3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (entity.isLargeCraft() || entity.getUnitType() == UnitType.SMALL_CRAFT) {\n          \n          \n            \n                                if (entity.isLargeCraft() || (entity.getUnitType() == UnitType.SMALL_CRAFT)) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401185583", "createdAt": "2020-03-31T20:13:13Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -199,6 +199,12 @@ public void run() {\n                         //Store this unit as a potential transport to load\n                         scenario.getPlayerTransportLinkages().put(unit.getId(), new ArrayList<>());\n                     }\n+                    // If this unit is a spacecraft, set the crew size and marine size values\n+                    if (entity.isLargeCraft() || entity.getUnitType() == UnitType.SMALL_CRAFT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3ODMwMg==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401678302", "createdAt": "2020-04-01T14:53:44Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -199,6 +199,12 @@ public void run() {\n                         //Store this unit as a potential transport to load\n                         scenario.getPlayerTransportLinkages().put(unit.getId(), new ArrayList<>());\n                     }\n+                    // If this unit is a spacecraft, set the crew size and marine size values\n+                    if (entity.isLargeCraft() || entity.getUnitType() == UnitType.SMALL_CRAFT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTU4Mw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk3MDM3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNDozN1rOF-mekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1ODoyOVrOF_EuMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjQ0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }    \t\n          \n          \n            \n                    }", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401186449", "createdAt": "2020-03-31T20:14:37Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -408,6 +422,6 @@ private void configureBot(BotClient botClient, BotForce botForce) {\n             }\n         } catch (Exception e) {\n             MekHQ.getLogger().error(getClass(), \"configureBot\", e); //$NON-NLS-1$\n-        }\n+        }    \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MTk3MA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401681970", "createdAt": "2020-04-01T14:58:29Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -408,6 +422,6 @@ private void configureBot(BotClient botClient, BotForce botForce) {\n             }\n         } catch (Exception e) {\n             MekHQ.getLogger().error(getClass(), \"configureBot\", e); //$NON-NLS-1$\n-        }\n+        }    \t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjQ0OQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk3MjgwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNTowOVrOF-mf9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNTowOVrOF-mf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (botForce.getCamoCategory() == Player.NO_CAMO) {\n          \n          \n            \n                            if (botForce.getCamoCategory().equals(Player.NO_CAMO)) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401186807", "createdAt": "2020-03-31T20:15:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -395,7 +409,7 @@ private void configureBot(BotClient botClient, BotForce botForce) {\n                 botClient.getLocalPlayer().setTeam(botForce.getTeam());\n                 botClient.getLocalPlayer().setStartingPos(botForce.getStart());\n \n-                if (botForce.getCamoCategory().equals(Player.NO_CAMO)) {\n+                if (botForce.getCamoCategory() == Player.NO_CAMO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk3MzM0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNToxOVrOF-mgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1NjowNFrOF_Em7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Njg5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * \n          \n          \n            \n                 *", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401186893", "createdAt": "2020-03-31T20:15:19Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -367,7 +381,7 @@ public void run() {\n     /**\n      * wait for the server to add the bot client, then send starting position,\n      * camo, and entities\n-     *\n+     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MDEwOQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401680109", "createdAt": "2020-04-01T14:56:04Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -367,7 +381,7 @@ public void run() {\n     /**\n      * wait for the server to add the bot client, then send starting position,\n      * camo, and entities\n-     *\n+     * ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Njg5Mw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk4MjY5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/AtBGameThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxODowNVrOF-mmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1NTozNlrOF_ElrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODQyMQ==", "bodyText": "I'm assuming this is to ensure the UUIDs are all unique?", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401188421", "createdAt": "2020-03-31T20:18:05Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -317,33 +323,41 @@ public void run() {\n                     if(scenario instanceof AtBScenario) {\n                         AtBDynamicScenarioFactory.loadTransports((AtBScenario) scenario, botClient);\n                     }\n-\n-                    // Prompt the player to auto-load units into transports\n-                    if (!scenario.getPlayerTransportLinkages().isEmpty()) {\n+                }\n+                \n+                // All player and bot units have been added to the lobby\n+                // Prompt the player to auto-load units into transports\n+                if (!scenario.getPlayerTransportLinkages().isEmpty()) {\n+                    for (UUID id : scenario.getPlayerTransportLinkages().keySet()) {\n                         boolean loadFighters = false;\n                         boolean loadGround = false;\n-                        for (UUID id : scenario.getPlayerTransportLinkages().keySet()) {\n-                            Unit transport = campaign.getUnit(id);\n-                            Set<Integer> toLoad = new HashSet<>();\n-                            // Let the player choose to load fighters and/or ground units on each transport\n-                            if (transport.isCarryingAero()) {\n-                                loadFighters = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n-                                                    String.format(AtBGameThread.LOAD_FTR_DIALOG_TEXT, transport.getName()),\n-                                                    AtBGameThread.LOAD_FTR_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n-                            }\n-                            if (transport.isCarryingGround()) {\n-                                loadGround = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n-                                        String.format(AtBGameThread.LOAD_GND_DIALOG_TEXT, transport.getName()),\n-                                        AtBGameThread.LOAD_GND_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n-                            }\n-                            // Now, send the load commands\n-                            if (loadFighters || loadGround) {\n-                                for (UUID cargoId : scenario.getPlayerTransportLinkages().get(id)) {\n-                                    //Convert the list of Unit UUIDs to MM EntityIds\n-                                    toLoad.add(campaign.getUnit(cargoId).getEntity().getId());\n-                                }\n-                                Utilities.loadPlayerTransports(transport.getEntity().getId(), toLoad, client, loadFighters, loadGround);\n+                        Unit transport = campaign.getUnit(id);\n+                        Set<Integer> toLoad = new HashSet<>();\n+                        // Let the player choose to load fighters and/or ground units on each transport\n+                        if (transport.isCarryingAero()) {\n+                            loadFighters = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n+                                                String.format(AtBGameThread.LOAD_FTR_DIALOG_TEXT, transport.getName()),\n+                                                AtBGameThread.LOAD_FTR_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n+                        }\n+                        if (transport.isCarryingGround()) {\n+                            loadGround = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n+                                    String.format(AtBGameThread.LOAD_GND_DIALOG_TEXT, transport.getName()),\n+                                    AtBGameThread.LOAD_GND_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n+                        }\n+                        // Now, send the load commands\n+                        if (loadFighters || loadGround) {\n+                            // List of technicians assigned to transported units. Several units can share a tech.\n+                            Set<UUID> cargoTechs = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3OTc4OA==", "bodyText": "Correct.  You can have the same tech assigned to multiple units, and I only want one person to be added aboard the transport in such cases.", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401679788", "createdAt": "2020-04-01T14:55:36Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/AtBGameThread.java", "diffHunk": "@@ -317,33 +323,41 @@ public void run() {\n                     if(scenario instanceof AtBScenario) {\n                         AtBDynamicScenarioFactory.loadTransports((AtBScenario) scenario, botClient);\n                     }\n-\n-                    // Prompt the player to auto-load units into transports\n-                    if (!scenario.getPlayerTransportLinkages().isEmpty()) {\n+                }\n+                \n+                // All player and bot units have been added to the lobby\n+                // Prompt the player to auto-load units into transports\n+                if (!scenario.getPlayerTransportLinkages().isEmpty()) {\n+                    for (UUID id : scenario.getPlayerTransportLinkages().keySet()) {\n                         boolean loadFighters = false;\n                         boolean loadGround = false;\n-                        for (UUID id : scenario.getPlayerTransportLinkages().keySet()) {\n-                            Unit transport = campaign.getUnit(id);\n-                            Set<Integer> toLoad = new HashSet<>();\n-                            // Let the player choose to load fighters and/or ground units on each transport\n-                            if (transport.isCarryingAero()) {\n-                                loadFighters = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n-                                                    String.format(AtBGameThread.LOAD_FTR_DIALOG_TEXT, transport.getName()),\n-                                                    AtBGameThread.LOAD_FTR_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n-                            }\n-                            if (transport.isCarryingGround()) {\n-                                loadGround = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n-                                        String.format(AtBGameThread.LOAD_GND_DIALOG_TEXT, transport.getName()),\n-                                        AtBGameThread.LOAD_GND_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n-                            }\n-                            // Now, send the load commands\n-                            if (loadFighters || loadGround) {\n-                                for (UUID cargoId : scenario.getPlayerTransportLinkages().get(id)) {\n-                                    //Convert the list of Unit UUIDs to MM EntityIds\n-                                    toLoad.add(campaign.getUnit(cargoId).getEntity().getId());\n-                                }\n-                                Utilities.loadPlayerTransports(transport.getEntity().getId(), toLoad, client, loadFighters, loadGround);\n+                        Unit transport = campaign.getUnit(id);\n+                        Set<Integer> toLoad = new HashSet<>();\n+                        // Let the player choose to load fighters and/or ground units on each transport\n+                        if (transport.isCarryingAero()) {\n+                            loadFighters = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n+                                                String.format(AtBGameThread.LOAD_FTR_DIALOG_TEXT, transport.getName()),\n+                                                AtBGameThread.LOAD_FTR_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n+                        }\n+                        if (transport.isCarryingGround()) {\n+                            loadGround = (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,\n+                                    String.format(AtBGameThread.LOAD_GND_DIALOG_TEXT, transport.getName()),\n+                                    AtBGameThread.LOAD_GND_DIALOG_TITLE, JOptionPane.YES_NO_OPTION));\n+                        }\n+                        // Now, send the load commands\n+                        if (loadFighters || loadGround) {\n+                            // List of technicians assigned to transported units. Several units can share a tech.\n+                            Set<UUID> cargoTechs = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODQyMQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk5OTAyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyMjoxMFrOF-mv5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNjowMFrOF_FFGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDg4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401190884", "createdAt": "2020-03-31T20:22:10Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -375,7 +412,7 @@ private UnitStatus processAlliedUnit(Entity e) {\n         UnitStatus us = new UnitStatus(nu);\n         unitsStatus.put(nu.getId(), us);\n         alliedUnits.add(nu);\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NzgzMw==", "bodyText": "Fixed. My IDE puts this space in when I add a new line. I think I fixed that in preferences from here forward.", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401687833", "createdAt": "2020-04-01T15:06:00Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -375,7 +412,7 @@ private UnitStatus processAlliedUnit(Entity e) {\n         UnitStatus us = new UnitStatus(nu);\n         unitsStatus.put(nu.getId(), us);\n         alliedUnits.add(nu);\n-\n+        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDg4NA=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODAxODY2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyNzozM1rOF-m74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNjozN1rOF_FG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Mzk1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (transport != null && transport.isLargeCraft()) {\n          \n          \n            \n                                    if ((transport != null) && transport.isLargeCraft()) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401193955", "createdAt": "2020-03-31T20:27:33Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4ODMxNw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401688317", "createdAt": "2020-04-01T15:06:37Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Mzk1NQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODAzNTE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozMjowOVrOF-nGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNzowMFrOF_FILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NjU5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for(Person p : crew) {\n          \n          \n            \n                            for (Person p : crew) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401196593", "createdAt": "2020-03-31T20:32:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4ODYyMw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401688623", "createdAt": "2020-04-01T15:07:00Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NjU5Mw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0MjM0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozMzo1OFrOF-nKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNzoyMlrOF_FJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            if(Compute.d6(2) >= 7) {\n          \n          \n            \n                                            if (Compute.d6(2) >= 7) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401197671", "createdAt": "2020-03-31T20:33:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4ODg5MQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401688891", "createdAt": "2020-04-01T15:07:22Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzY3MQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0MzE4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNDowOVrOF-nK5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNzozNFrOF_FJ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Nzc5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            if(Compute.d6(2) >= 7) {\n          \n          \n            \n                                            if (Compute.d6(2) >= 7) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401197797", "createdAt": "2020-03-31T20:34:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTA3OQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689079", "createdAt": "2020-04-01T15:07:34Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Nzc5Nw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 315}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0Mzg1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNDoyNVrOF-nLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNzo0NFrOF_FKhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzkyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            if(Compute.d6(2) >= 7) {\n          \n          \n            \n                                            if (Compute.d6(2) >= 7) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401197921", "createdAt": "2020-03-31T20:34:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTIyMw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689223", "createdAt": "2020-04-01T15:07:44Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzkyMQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0NDU0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNDozNlrOF-nLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowNzo1NVrOF_FLHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if(casualtiesAssigned < casualties) {\n          \n          \n            \n                                    if (casualtiesAssigned < casualties) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198023", "createdAt": "2020-03-31T20:34:36Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n                             }\n-                        } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n-                            //This flag is set after the first commander hit critical.\n+                        }\n+                        if(casualtiesAssigned < casualties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTM3Mw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689373", "createdAt": "2020-04-01T15:07:55Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n                             }\n-                        } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n-                            //This flag is set after the first commander hit critical.\n+                        }\n+                        if(casualtiesAssigned < casualties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODAyMw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0NDkxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNDo0NVrOF-nMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODowN1rOF_FLuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if(wounded) {\n          \n          \n            \n                                    if (wounded) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198107", "createdAt": "2020-03-31T20:34:45Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n                             }\n-                        } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n-                            //This flag is set after the first commander hit critical.\n+                        }\n+                        if(casualtiesAssigned < casualties) {\n+                            casualtiesAssigned++;\n                             if(Compute.d6(2) >= 7) {\n                                 wounded = true;\n                             } else {\n                                 status.setHits(6);\n                                 status.setDead(true);\n                             }\n                         }\n-                    }\n-                    if(casualtiesAssigned < casualties) {\n-                        casualtiesAssigned++;\n-                        if(Compute.d6(2) >= 7) {\n-                            wounded = true;\n-                        } else {\n-                            status.setHits(6);\n-                            status.setDead(true);\n-                        }\n-                    }\n-                    if(wounded) {\n-                        int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n-                        if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n-                            int range = 6 - hits;\n-                            hits = hits + Compute.randomInt(range);\n+                        if(wounded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTUyOA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689528", "createdAt": "2020-04-01T15:08:07Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -473,158 +510,160 @@ public void checkStatusOfPersonnel() {\n             if (null == en) {\n                 continue;\n             }\n-            // check for an ejected entity and if we find one then assign it instead to switch vees\n-            // over to infantry checks for casualties\n-            Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-            // determine total casualties for infantry and large craft\n-            int casualties = 0;\n-            int casualtiesAssigned = 0;\n-            Infantry infantry = null;\n-            if (en instanceof Infantry) {\n-                infantry = (Infantry) en;\n-            } else if (ejected != null) {\n-                infantry = (Infantry) ejected;\n-            }\n-            if (infantry != null) {\n-                infantry.applyDamage();\n-                // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n-                int strength = Math.min(infantry.getShootingStrength(), crew.size());\n-                casualties = crew.size() - strength;\n-                if (unitStatus.isTotalLoss()) {\n-                    casualties = crew.size();\n-                }\n-                // If a tank has already taken hits to the commander or driver, do not assign them again.\n-                if (en instanceof Tank) {\n-                    if (((Tank) en).isDriverHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                    if (((Tank) en).isCommanderHit()) {\n-                        casualtiesAssigned++;\n-                    }\n-                }\n-            }\n+            //Handle spacecraft a bit differently\n             if ((en instanceof SmallCraft) || (en instanceof Jumpship)) {\n-                //need to check for existing hits because you can fly aeros with less than full\n-                //crew\n-                int existingHits = 0;\n-                int currentHits = 0;\n-                if (null != u.getEntity().getCrew()) {\n-                    existingHits = u.getEntity().getCrew().getHits();\n+                processLargeCraft(u, en, crew, unitStatus);\n+            } else {\n+                if (en.getTransportId() != Entity.NONE) {\n+                    // Check to see if the unit is in a large craft bay, if so, its crew will be processed with the ship,\n+                    // so ignore it here.\n+                    UUID trnId = idMap.get(en.getTransportId());\n+                    if (trnId != null) {\n+                        Entity transport = unitsStatus.get(trnId).getEntity();\n+                        if (transport != null && transport.isLargeCraft()) {\n+                            continue;\n+                        }\n+                    }\n                 }\n-                if (null != en.getCrew()) {\n-                    currentHits = en.getCrew().getHits();\n+                // check for an ejected entity and if we find one then assign it instead to switch vees\n+                // over to infantry checks for casualties\n+                Entity ejected = ejections.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                // determine total casualties for infantry and large craft\n+                int casualties = 0;\n+                int casualtiesAssigned = 0;\n+                Infantry infantry = null;\n+                if (en instanceof Infantry) {\n+                    infantry = (Infantry) en;\n+                } else if (ejected != null) {\n+                    infantry = (Infantry) ejected;\n                 }\n-                int newHits = Math.max(0, currentHits - existingHits);\n-                casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n-            }\n-            //try to find the crew in our pilot and mia vectors\n-            Crew pilot = pilots.get(u.getCommander().getId());\n-            boolean missingCrew = false;\n-            //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n-            if (null == pilot) {\n-                for (Person p : u.getCrew()) {\n-                    if (pilots.containsKey(p.getId())) {\n-                        pilot = pilots.get(p.getId());\n-                        break;\n+                if (infantry != null) {\n+                    infantry.applyDamage();\n+                    // If reading from a MUL, the shooting strength is set to Integer.MAX_VALUE if there is no damage.\n+                    int strength = Math.min(infantry.getShootingStrength(), crew.size());\n+                    casualties = crew.size() - strength;\n+                    if (unitStatus.isTotalLoss()) {\n+                        casualties = crew.size();\n+                    }\n+                    // If a tank has already taken hits to the commander or driver, do not assign them again.\n+                    if (en instanceof Tank) {\n+                        if (((Tank) en).isDriverHit()) {\n+                            casualtiesAssigned++;\n+                        }\n+                        if (((Tank) en).isCommanderHit()) {\n+                            casualtiesAssigned++;\n+                        }\n                     }\n                 }\n-            }\n-            if (null == pilot) {\n-                pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n-                missingCrew = true;\n-            }\n-            for(Person p : crew) {\n-                PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n-                        p.getHits(), p.getId());\n-                status.setMissing(missingCrew);\n-                // if the pilot was not found in either the pilot or mia vector\n-                // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                //try to find the crew in our pilot and mia vectors\n+                Crew pilot = pilots.get(u.getCommander().getId());\n+                boolean missingCrew = false;\n+                //For multi-crew cockpits, the crew id is the first slot, which is not necessarily the commander\n                 if (null == pilot) {\n-                    status.setHits(6);\n-                    status.setDead(true);\n-                }\n-                // multi-crewed cockpit; set each crew member separately\n-                else if (pilot.getSlotCount() > 1) {\n-                    for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n-                        if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n-                            status.setHits(pilot.getHits(slot));\n+                    for (Person p : u.getCrew()) {\n+                        if (pilots.containsKey(p.getId())) {\n+                            pilot = pilots.get(p.getId());\n                             break;\n                         }\n                     }\n-                // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n-                } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n-                    status.setHits(pilot.getHits());\n-                } else {\n-                    // we have a multi-crewed Vehicle/Aero/Infantry\n-                    boolean wounded = false;\n-                    // tanks need to be handled specially because of the special crits and because\n-                    // tank destruction should \"kill\" the crew\n-                    if (en instanceof Tank) {\n-                        boolean destroyed = false;\n-                        for (int loc = 0; loc < en.locations(); loc++) {\n-                            if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n-                                continue;\n-                            }\n-                            if (en.getInternal(loc) <= 0) {\n-                                destroyed = true;\n+                }\n+                if (null == pilot) {\n+                    pilot = mia.get(UUID.fromString(en.getCrew().getExternalIdAsString()));\n+                    missingCrew = true;\n+                }\n+                for(Person p : crew) {\n+                    PersonStatus status = new PersonStatus(p.getFullName(), u.getEntity().getDisplayName(),\n+                            p.getHits(), p.getId());\n+                    status.setMissing(missingCrew);\n+                    // if the pilot was not found in either the pilot or mia vector\n+                    // then the unit was devastated and no one ejected, so they should be dead, really dead\n+                    if (null == pilot) {\n+                        status.setHits(6);\n+                        status.setDead(true);\n+                    }\n+                    // multi-crewed cockpit; set each crew member separately\n+                    else if (pilot.getSlotCount() > 1) {\n+                        for (int slot = 0; slot < pilot.getSlotCount(); slot++) {\n+                            if (p.getId().toString().equals(pilot.getExternalIdAsString(slot))) {\n+                                status.setHits(pilot.getHits(slot));\n                                 break;\n                             }\n                         }\n-                        if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n-                            if (Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n-                            }\n-                        } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                    // else if: can't do the following by u.usesSoloPilot because entity may be different if ejected\n+                    } else if (en instanceof Mech || en instanceof Protomech || en.isFighter()) {\n+                        status.setHits(pilot.getHits());\n+                    } else {\n+                        // we have a multi-crewed Vehicle/Aero/Infantry\n+                        boolean wounded = false;\n+                        // tanks need to be handled specially because of the special crits and because\n+                        // tank destruction should \"kill\" the crew\n+                        if (en instanceof Tank) {\n+                            boolean destroyed = false;\n+                            for (int loc = 0; loc < en.locations(); loc++) {\n+                                if (loc == Tank.LOC_TURRET || loc == Tank.LOC_TURRET_2 || loc == Tank.LOC_BODY) {\n+                                    continue;\n+                                }\n+                                if (en.getInternal(loc) <= 0) {\n+                                    destroyed = true;\n+                                    break;\n+                                }\n                             }\n-                        } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n-                                || u.isTechOfficer(p))) {\n-                            //If there is a command console, the commander hit flag is set on the second such critical,\n-                            //which means both commanders have been hit.\n-                            if(Compute.d6(2) >= 7) {\n-                                wounded = true;\n-                            } else {\n-                                status.setHits(6);\n-                                status.setDead(true);\n+                            if (destroyed || null == en.getCrew() || en.getCrew().isDead()) {\n+                                if (Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isDriverHit() && u.isDriver(p)) {\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isCommanderHit() && (u.isCommander(p)\n+                                    || u.isTechOfficer(p))) {\n+                                //If there is a command console, the commander hit flag is set on the second such critical,\n+                                //which means both commanders have been hit.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n+                            } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n+                                //This flag is set after the first commander hit critical.\n+                                if(Compute.d6(2) >= 7) {\n+                                    wounded = true;\n+                                } else {\n+                                    status.setHits(6);\n+                                    status.setDead(true);\n+                                }\n                             }\n-                        } else if (((Tank)en).isUsingConsoleCommander() && u.isCommander(p)) {\n-                            //This flag is set after the first commander hit critical.\n+                        }\n+                        if(casualtiesAssigned < casualties) {\n+                            casualtiesAssigned++;\n                             if(Compute.d6(2) >= 7) {\n                                 wounded = true;\n                             } else {\n                                 status.setHits(6);\n                                 status.setDead(true);\n                             }\n                         }\n-                    }\n-                    if(casualtiesAssigned < casualties) {\n-                        casualtiesAssigned++;\n-                        if(Compute.d6(2) >= 7) {\n-                            wounded = true;\n-                        } else {\n-                            status.setHits(6);\n-                            status.setDead(true);\n-                        }\n-                    }\n-                    if(wounded) {\n-                        int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n-                        if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n-                            int range = 6 - hits;\n-                            hits = hits + Compute.randomInt(range);\n+                        if(wounded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODEwNw=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0NzgzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNTo0MVrOF-nN8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODozOVrOF_FNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(casualtiesAssigned < casualties) {\n          \n          \n            \n                        if (casualtiesAssigned < casualties) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198578", "createdAt": "2020-03-31T20:35:41Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTkyMw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689923", "createdAt": "2020-04-01T15:08:39Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODU3OA=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0ODMyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNTo1MFrOF-nOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODoyOFrOF_FMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Person p : personnel) {\n          \n          \n            \n                    for (Person p : personnel) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198666", "createdAt": "2020-03-31T20:35:50Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTc5Mg==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401689792", "createdAt": "2020-04-01T15:08:28Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODY2Ng=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 450}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0ODg2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNTo1OVrOF-nOow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODo0OFrOF_FNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODc1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(Compute.d6(2) >= 7) {\n          \n          \n            \n                            if (Compute.d6(2) >= 7) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198755", "createdAt": "2020-03-31T20:35:59Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 456}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDA1Mw==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401690053", "createdAt": "2020-04-01T15:08:48Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODc1NQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 456}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA0OTQxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNjowN1rOF-nO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODo1OVrOF_FOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODg0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(wounded) {\n          \n          \n            \n                        if (wounded) {", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401198842", "createdAt": "2020-03-31T20:36:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 463}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDIwMQ==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401690201", "createdAt": "2020-04-01T15:08:59Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5ODg0Mg=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 463}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA1MTU2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozNjo0NlrOF-nQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowOToyNFrOF_FPlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5OTE5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                    status.setXP(campaign.getCampaignOptions().getScenarioXP());\n          \n          \n            \n                    status.setDeployed(!en.wasNeverDeployed());\n          \n          \n            \n                    peopleStatus.put(p.getId(), status);\n          \n          \n            \n                    }\n          \n          \n            \n                        }\n          \n          \n            \n                        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n          \n          \n            \n                        status.setDeployed(!en.wasNeverDeployed());\n          \n          \n            \n                        peopleStatus.put(p.getId(), status);\n          \n          \n            \n                    }", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401199195", "createdAt": "2020-03-31T20:36:46Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 474}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDUxOA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1606#discussion_r401690518", "createdAt": "2020-04-01T15:09:24Z", "author": {"login": "mkerensky"}, "path": "MekHQ/src/mekhq/campaign/ResolveScenarioTracker.java", "diffHunk": "@@ -634,6 +673,180 @@ else if (pilot.getSlotCount() > 1) {\n             processPrisonerCapture(devastatedEnemyUnits);\n         }\n     }\n+    \n+    /**\n+     * Helper function that handles crew and passengers ejected from a large spacecraft,\n+     * which may be scattered about on numerous other entities\n+     * @param ship The large craft unit we're currently processing\n+     * @param en The entity associated with the unit Ship\n+     * @param crew The list of persons assigned to the ship as crew and marines\n+     * @param unitStatus The post-battle status of en\n+     */\n+    private void processLargeCraft(Unit ship, Entity en, List<Person> personnel, UnitStatus unitStatus) {\n+        final String METHOD_NAME = \"processLargeCraft(Unit,Entity,List<Person>,UnitStatus)\"; //$NON-NLS-1$\n+        //The entity must be an Aero for us to get here\n+        Aero aero = (Aero) en;\n+        //Find out if this large craft ejected or was in the process of ejecting, \n+        // and if so what entities are carrying the personnel\n+        int rescuedCrew = 0;\n+        int rescuedPassengers = 0;\n+        if (en.getCrew().isEjected() || aero.isEjecting()) {\n+            for (String id : aero.getEscapeCraft()) {\n+                Entity e = entities.get(UUID.fromString(id));\n+                // Invalid entity?\n+                if (e == null) {\n+                    MekHQ.getLogger().log(getClass(), METHOD_NAME, LogLevel.ERROR,\n+                            \"Null entity reference in:\" + aero.getDisplayName() + \"getEscapeCraft()\");\n+                }\n+                //If the escape craft was destroyed in combat, skip it\n+                if (e.isDestroyed() || e.isDoomed()) {\n+                    continue;\n+                }\n+                //Now let's see how many passengers and crew we picked up\n+                if (e instanceof SmallCraft) {\n+                    SmallCraft craft = (SmallCraft) e;\n+                    if (craft.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += craft.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (craft.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += craft.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                } else if (e instanceof EjectedCrew) {\n+                    EjectedCrew crew = (EjectedCrew) e;\n+                    if (crew.getPassengers().get(en.getExternalIdAsString()) != null) {\n+                        rescuedPassengers += crew.getPassengers().get(en.getExternalIdAsString());\n+                    }\n+                    if (crew.getNOtherCrew().get(en.getExternalIdAsString()) != null) {\n+                        rescuedCrew += crew.getNOtherCrew().get(en.getExternalIdAsString());\n+                    }\n+                }\n+            }\n+        }\n+        //Check crewed aeros for existing hits since they could be flying without full crews\n+        int casualties = 0;\n+        int casualtiesAssigned = 0;\n+        int existingHits = 0;\n+        int currentHits = 0;\n+        if (null != ship.getEntity().getCrew()) {\n+            existingHits = ship.getEntity().getCrew().getHits();\n+        }\n+        if (null != en.getCrew()) {\n+            currentHits = en.getCrew().getHits();\n+        }\n+        if (en.isDestroyed()) {\n+            currentHits = 6;\n+        }\n+        int newHits = Math.max(0, currentHits - existingHits);\n+        casualties = (int) Math.ceil(Compute.getFullCrewSize(en) * (newHits / 6.0));\n+        //Now reduce the casualties if some \"hits\" were caused by ejection\n+        casualties = Math.max(0, casualties - rescuedCrew);\n+        \n+        //And assign the casualties and experience amongst the crew and marines\n+        for(Person p : personnel) {\n+            PersonStatus status = new PersonStatus(p.getFullName(), ship.getEntity().getDisplayName(),\n+                    p.getHits(), p.getId());\n+            boolean wounded = false;\n+            if(casualtiesAssigned < casualties) {\n+                casualtiesAssigned++;\n+                if(Compute.d6(2) >= 7) {\n+                    wounded = true;\n+                } else {\n+                    status.setHits(6);\n+                    status.setDead(true);\n+                }\n+            }\n+            if(wounded) {\n+                int hits = campaign.getCampaignOptions().getMinimumHitsForVees();\n+                if (campaign.getCampaignOptions().useAdvancedMedical() || campaign.getCampaignOptions().useRandomHitsForVees()) {\n+                    int range = 6 - hits;\n+                    hits = hits + Compute.randomInt(range);\n+                }\n+                status.setHits(hits);\n+            }\n+        status.setXP(campaign.getCampaignOptions().getScenarioXP());\n+        status.setDeployed(!en.wasNeverDeployed());\n+        peopleStatus.put(p.getId(), status);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5OTE5NQ=="}, "originalCommit": {"oid": "6f435eead4a970afab02f06a31f3b1c9879b7ece"}, "originalPosition": 474}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2388, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}