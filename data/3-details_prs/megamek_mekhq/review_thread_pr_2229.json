{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDYzOTU2", "number": 2229, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoyNjo0NVrOFEkUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNjozMDoxMVrOFEmMDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMzNzQ5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoyNjo0NlrOIEuZvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoyNjo0NlrOIEuZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNTQ2OA==", "bodyText": "This is never used?", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541825468", "createdAt": "2020-12-13T02:26:46Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "diffHunk": "@@ -100,6 +112,289 @@ public void addPart(Part part, int transitDays) {\n         getWarehouse().addPart(part, true);\n     }\n \n+    /**\n+     * Adds ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, int shots) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shots >= 0) {\n+            addPart(new AmmoStorage(0, ammoType, shots, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Adds infantry ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param infantryWeapon The type of infantry weapon using the ammo.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, InfantryWeapon infantryWeapon, int shots) {\n+        Objects.requireNonNull(ammoType);\n+        Objects.requireNonNull(infantryWeapon);\n+\n+        if (shots >= 0) {\n+            addPart(new InfantryAmmoStorage(0, ammoType, shots, infantryWeapon, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Removes ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        AmmoStorage ammoStorage = findSpareAmmo(ammoType);\n+\n+        int shotsRemoved = removeAmmo(ammoStorage, shotsNeeded);\n+        shotsNeeded -= shotsRemoved;\n+\n+        // See if we've still need some more ammo ...\n+        if (shotsNeeded > 0) {\n+            // ... then check if we can use compatible ammo ...\n+            if (getCampaignOptions().useAmmoByType()) {\n+                // ... and if so, remove some more from the campaign (if available).\n+                shotsRemoved += removeCompatibleAmmo(ammoType, shotsNeeded);\n+            }\n+        }\n+\n+        // Inform the caller how many shots we actually removed for them.\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Remove ammo directly from an AmmoStorage part.\n+     * @param shotsNeeded The number of shots needed.\n+     * @return The number of shots removed.\n+     */\n+    private int removeAmmo(@Nullable AmmoStorage ammoStorage, int shotsNeeded) {\n+        if ((ammoStorage == null) || (ammoStorage.getShots() == 0)) {\n+            return 0;\n+        }\n+\n+        // We've got at least one round of ammo,\n+        // so calculate how many shots we can take\n+        // from this AmmoStorage.\n+        int shotsRemoved = Math.min(ammoStorage.getShots(), shotsNeeded);\n+\n+        // Update the number of rounds available ...\n+        ammoStorage.changeShots(-shotsRemoved);\n+        if (ammoStorage.getShots() == 0) {\n+            // ... and remove the part if we've run out.\n+            getWarehouse().removePart(ammoStorage);\n+        } else {\n+            MekHQ.triggerEvent(new PartChangedEvent(ammoStorage));\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Removes compatible ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeCompatibleAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        int shotsRemoved = 0;\n+\n+        List<AmmoStorage> compatibleAmmo = findCompatibleSpareAmmo(ammoType);\n+        for (AmmoStorage compatible : compatibleAmmo) {\n+            if (shotsNeeded <= 0) {\n+                break;\n+            }\n+\n+            // Check to see if it has at least one shot we can use in our target ammo type ...\n+            int shotsAvailable = convertShots(compatible.getType(), compatible.getShots(), ammoType);\n+            if (shotsAvailable <= 0) {\n+                // ... and if not, skip this ammo storage.\n+                continue;\n+            }\n+\n+            // Calculate the shots needed in the compatible ammo type ...\n+            int compatibleShotsNeeded = convertShots(ammoType, shotsNeeded, compatible.getType());\n+\n+            // Try removing that ammo from the compatible ammo storage.\n+            int compatibleShotsRemoved = removeAmmo(compatible, compatibleShotsNeeded);\n+            if (compatibleShotsRemoved > 0) {\n+                // If we did remove some ammo, adjust the number of shots we removed and needed\n+                int shotsFound = convertShots(compatible.getType(), compatibleShotsRemoved, ammoType);\n+                shotsRemoved += shotsFound;\n+                shotsNeeded -= shotsFound;\n+            }\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Finds spare ammo of a given type, if any.\n+     * @param ammoType The AmmoType to search for.\n+     * @return The matching spare {@code AmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable AmmoStorage findSpareAmmo(AmmoType ammoType) {\n+        return (AmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((AmmoStorage) part).isSameAmmoType(ammoType);\n+        });\n+    }\n+\n+    /**\n+     * Find compatible ammo in the warehouse.\n+     * @param ammoType The AmmoType to search for compatible types.\n+     * @return A list of spare {@code AmmoStorage} parts in the warehouse.\n+     */\n+    private List<AmmoStorage> findCompatibleSpareAmmo(AmmoType ammoType) {\n+        List<AmmoStorage> compatibleAmmo = new ArrayList<>();\n+        getWarehouse().forEachSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return;\n+            }\n+\n+            AmmoStorage spare = (AmmoStorage) part;\n+            if (spare.isSameAmmoType(ammoType)) {\n+                // We are looking for compatible ammo, not identical ammo.\n+                return;\n+            }\n+\n+            // If we found a spare ammo bin with at least one shot available ...\n+            if (spare.isCompatibleAmmo(ammoType) && (spare.getShots() > 0)) {\n+                // ... add it to our list of compatible ammo.\n+                compatibleAmmo.add(spare);\n+            }\n+        });\n+\n+        return compatibleAmmo;\n+    }\n+\n+    /**\n+     * Converts shots from one ammo type to another.\n+     * NB: it is up to the caller to ensure the ammo types are compatible.\n+     * @param from The AmmoType for which {@code shots} represents.\n+     * @param shots The number of shots of {@code from}.\n+     * @param to The AmmoType which {@code shots} should be converted to.\n+     * @return The value of {@code shots} when converted to a specific AmmoType.\n+     */\n+    private static int convertShots(AmmoType from, int shots, AmmoType to) {\n+        int rounds = shots * Math.max(from.getRackSize(), 1);\n+\n+        // Use integer division to 'round down'\n+        return rounds / Math.max(to.getRackSize(), 1);\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (!getCampaignOptions().useAmmoByType()) {\n+            // PERF: if we're not using ammo by type, we can use\n+            //       a MUCH faster lookup for spare ammo.\n+            AmmoStorage spare = findSpareAmmo(ammoType);\n+            return (spare != null) ? spare.getShots() : 0;\n+        } else {\n+            // If we're using ammo by type, stream through all of\n+            // the ammo that matches strictly or is compatible.\n+            return getWarehouse()\n+                    .streamSpareParts()\n+                    .filter(Quartermaster::isAvailableAsSpareAmmo)\n+                    .mapToInt(part -> {\n+                        AmmoStorage spare = (AmmoStorage) part;\n+                        if (spare.isSameAmmoType(ammoType)) {\n+                            return spare.getShots();\n+                        } else if (spare.isCompatibleAmmo(ammoType)) {\n+                            return convertShots(spare.getType(), spare.getShots(), ammoType);\n+                        }\n+                        return 0;\n+                    })\n+                    .sum();\n+        }\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not a given {@code Part}\n+     * is available for use as spare ammo.\n+     * @param part The part to check if it can be used as spare ammo.\n+     */\n+    private static boolean isAvailableAsSpareAmmo(@Nullable Part part) {\n+        return (part instanceof AmmoStorage)\n+                && part.isPresent()\n+                && !part.isReservedForRefit();\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType, InfantryWeapon weaponType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        InfantryAmmoStorage spare = findSpareAmmo(ammoType, weaponType);\n+        return (spare != null) ? spare.getShots() : 0;\n+    }\n+\n+    /**\n+     * Finds spare infantry ammo of a given type, if any.\n+     * @param ammoType The {@code AmmoType} to search for.\n+     * @param weaponType The {@code InfantryWeapon} which carries the ammo.\n+     * @return The matching spare {@code InfantryAmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable InfantryAmmoStorage findSpareAmmo(AmmoType ammoType, InfantryWeapon weaponType) {\n+        return (InfantryAmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!(part instanceof InfantryAmmoStorage) || !isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((InfantryAmmoStorage) part).isSameAmmoType(ammoType, weaponType);\n+        });\n+    }\n+\n+    /**\n+     * Removes infantry ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param infantryWeapon The infantry weapon using the ammo.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeAmmo(AmmoType ammoType, InfantryWeapon infantryWeapon, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        InfantryAmmoStorage ammoStorage = findSpareAmmo(ammoType, infantryWeapon);\n+\n+        int shotsRemoved = removeAmmo(ammoStorage, shotsNeeded);\n+        shotsNeeded -= shotsRemoved;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMzOTUzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoyODoyMlrOIEualA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoyODoyMlrOIEualA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNTY4NA==", "bodyText": "This could be refactored into a single return statement easily.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541825684", "createdAt": "2020-12-13T02:28:22Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "diffHunk": "@@ -100,6 +112,289 @@ public void addPart(Part part, int transitDays) {\n         getWarehouse().addPart(part, true);\n     }\n \n+    /**\n+     * Adds ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, int shots) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shots >= 0) {\n+            addPart(new AmmoStorage(0, ammoType, shots, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Adds infantry ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param infantryWeapon The type of infantry weapon using the ammo.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, InfantryWeapon infantryWeapon, int shots) {\n+        Objects.requireNonNull(ammoType);\n+        Objects.requireNonNull(infantryWeapon);\n+\n+        if (shots >= 0) {\n+            addPart(new InfantryAmmoStorage(0, ammoType, shots, infantryWeapon, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Removes ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        AmmoStorage ammoStorage = findSpareAmmo(ammoType);\n+\n+        int shotsRemoved = removeAmmo(ammoStorage, shotsNeeded);\n+        shotsNeeded -= shotsRemoved;\n+\n+        // See if we've still need some more ammo ...\n+        if (shotsNeeded > 0) {\n+            // ... then check if we can use compatible ammo ...\n+            if (getCampaignOptions().useAmmoByType()) {\n+                // ... and if so, remove some more from the campaign (if available).\n+                shotsRemoved += removeCompatibleAmmo(ammoType, shotsNeeded);\n+            }\n+        }\n+\n+        // Inform the caller how many shots we actually removed for them.\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Remove ammo directly from an AmmoStorage part.\n+     * @param shotsNeeded The number of shots needed.\n+     * @return The number of shots removed.\n+     */\n+    private int removeAmmo(@Nullable AmmoStorage ammoStorage, int shotsNeeded) {\n+        if ((ammoStorage == null) || (ammoStorage.getShots() == 0)) {\n+            return 0;\n+        }\n+\n+        // We've got at least one round of ammo,\n+        // so calculate how many shots we can take\n+        // from this AmmoStorage.\n+        int shotsRemoved = Math.min(ammoStorage.getShots(), shotsNeeded);\n+\n+        // Update the number of rounds available ...\n+        ammoStorage.changeShots(-shotsRemoved);\n+        if (ammoStorage.getShots() == 0) {\n+            // ... and remove the part if we've run out.\n+            getWarehouse().removePart(ammoStorage);\n+        } else {\n+            MekHQ.triggerEvent(new PartChangedEvent(ammoStorage));\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Removes compatible ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeCompatibleAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        int shotsRemoved = 0;\n+\n+        List<AmmoStorage> compatibleAmmo = findCompatibleSpareAmmo(ammoType);\n+        for (AmmoStorage compatible : compatibleAmmo) {\n+            if (shotsNeeded <= 0) {\n+                break;\n+            }\n+\n+            // Check to see if it has at least one shot we can use in our target ammo type ...\n+            int shotsAvailable = convertShots(compatible.getType(), compatible.getShots(), ammoType);\n+            if (shotsAvailable <= 0) {\n+                // ... and if not, skip this ammo storage.\n+                continue;\n+            }\n+\n+            // Calculate the shots needed in the compatible ammo type ...\n+            int compatibleShotsNeeded = convertShots(ammoType, shotsNeeded, compatible.getType());\n+\n+            // Try removing that ammo from the compatible ammo storage.\n+            int compatibleShotsRemoved = removeAmmo(compatible, compatibleShotsNeeded);\n+            if (compatibleShotsRemoved > 0) {\n+                // If we did remove some ammo, adjust the number of shots we removed and needed\n+                int shotsFound = convertShots(compatible.getType(), compatibleShotsRemoved, ammoType);\n+                shotsRemoved += shotsFound;\n+                shotsNeeded -= shotsFound;\n+            }\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Finds spare ammo of a given type, if any.\n+     * @param ammoType The AmmoType to search for.\n+     * @return The matching spare {@code AmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable AmmoStorage findSpareAmmo(AmmoType ammoType) {\n+        return (AmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((AmmoStorage) part).isSameAmmoType(ammoType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM0NDk2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjozMjo1OFrOIEuc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNzo1MTozMVrOIExHug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNjI2Mw==", "bodyText": "This one could arguably be a multiline return statement.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541826263", "createdAt": "2020-12-13T02:32:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "diffHunk": "@@ -100,6 +112,289 @@ public void addPart(Part part, int transitDays) {\n         getWarehouse().addPart(part, true);\n     }\n \n+    /**\n+     * Adds ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, int shots) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shots >= 0) {\n+            addPart(new AmmoStorage(0, ammoType, shots, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Adds infantry ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param infantryWeapon The type of infantry weapon using the ammo.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, InfantryWeapon infantryWeapon, int shots) {\n+        Objects.requireNonNull(ammoType);\n+        Objects.requireNonNull(infantryWeapon);\n+\n+        if (shots >= 0) {\n+            addPart(new InfantryAmmoStorage(0, ammoType, shots, infantryWeapon, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Removes ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        AmmoStorage ammoStorage = findSpareAmmo(ammoType);\n+\n+        int shotsRemoved = removeAmmo(ammoStorage, shotsNeeded);\n+        shotsNeeded -= shotsRemoved;\n+\n+        // See if we've still need some more ammo ...\n+        if (shotsNeeded > 0) {\n+            // ... then check if we can use compatible ammo ...\n+            if (getCampaignOptions().useAmmoByType()) {\n+                // ... and if so, remove some more from the campaign (if available).\n+                shotsRemoved += removeCompatibleAmmo(ammoType, shotsNeeded);\n+            }\n+        }\n+\n+        // Inform the caller how many shots we actually removed for them.\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Remove ammo directly from an AmmoStorage part.\n+     * @param shotsNeeded The number of shots needed.\n+     * @return The number of shots removed.\n+     */\n+    private int removeAmmo(@Nullable AmmoStorage ammoStorage, int shotsNeeded) {\n+        if ((ammoStorage == null) || (ammoStorage.getShots() == 0)) {\n+            return 0;\n+        }\n+\n+        // We've got at least one round of ammo,\n+        // so calculate how many shots we can take\n+        // from this AmmoStorage.\n+        int shotsRemoved = Math.min(ammoStorage.getShots(), shotsNeeded);\n+\n+        // Update the number of rounds available ...\n+        ammoStorage.changeShots(-shotsRemoved);\n+        if (ammoStorage.getShots() == 0) {\n+            // ... and remove the part if we've run out.\n+            getWarehouse().removePart(ammoStorage);\n+        } else {\n+            MekHQ.triggerEvent(new PartChangedEvent(ammoStorage));\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Removes compatible ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeCompatibleAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        int shotsRemoved = 0;\n+\n+        List<AmmoStorage> compatibleAmmo = findCompatibleSpareAmmo(ammoType);\n+        for (AmmoStorage compatible : compatibleAmmo) {\n+            if (shotsNeeded <= 0) {\n+                break;\n+            }\n+\n+            // Check to see if it has at least one shot we can use in our target ammo type ...\n+            int shotsAvailable = convertShots(compatible.getType(), compatible.getShots(), ammoType);\n+            if (shotsAvailable <= 0) {\n+                // ... and if not, skip this ammo storage.\n+                continue;\n+            }\n+\n+            // Calculate the shots needed in the compatible ammo type ...\n+            int compatibleShotsNeeded = convertShots(ammoType, shotsNeeded, compatible.getType());\n+\n+            // Try removing that ammo from the compatible ammo storage.\n+            int compatibleShotsRemoved = removeAmmo(compatible, compatibleShotsNeeded);\n+            if (compatibleShotsRemoved > 0) {\n+                // If we did remove some ammo, adjust the number of shots we removed and needed\n+                int shotsFound = convertShots(compatible.getType(), compatibleShotsRemoved, ammoType);\n+                shotsRemoved += shotsFound;\n+                shotsNeeded -= shotsFound;\n+            }\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Finds spare ammo of a given type, if any.\n+     * @param ammoType The AmmoType to search for.\n+     * @return The matching spare {@code AmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable AmmoStorage findSpareAmmo(AmmoType ammoType) {\n+        return (AmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((AmmoStorage) part).isSameAmmoType(ammoType);\n+        });\n+    }\n+\n+    /**\n+     * Find compatible ammo in the warehouse.\n+     * @param ammoType The AmmoType to search for compatible types.\n+     * @return A list of spare {@code AmmoStorage} parts in the warehouse.\n+     */\n+    private List<AmmoStorage> findCompatibleSpareAmmo(AmmoType ammoType) {\n+        List<AmmoStorage> compatibleAmmo = new ArrayList<>();\n+        getWarehouse().forEachSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return;\n+            }\n+\n+            AmmoStorage spare = (AmmoStorage) part;\n+            if (spare.isSameAmmoType(ammoType)) {\n+                // We are looking for compatible ammo, not identical ammo.\n+                return;\n+            }\n+\n+            // If we found a spare ammo bin with at least one shot available ...\n+            if (spare.isCompatibleAmmo(ammoType) && (spare.getShots() > 0)) {\n+                // ... add it to our list of compatible ammo.\n+                compatibleAmmo.add(spare);\n+            }\n+        });\n+\n+        return compatibleAmmo;\n+    }\n+\n+    /**\n+     * Converts shots from one ammo type to another.\n+     * NB: it is up to the caller to ensure the ammo types are compatible.\n+     * @param from The AmmoType for which {@code shots} represents.\n+     * @param shots The number of shots of {@code from}.\n+     * @param to The AmmoType which {@code shots} should be converted to.\n+     * @return The value of {@code shots} when converted to a specific AmmoType.\n+     */\n+    private static int convertShots(AmmoType from, int shots, AmmoType to) {\n+        int rounds = shots * Math.max(from.getRackSize(), 1);\n+\n+        // Use integer division to 'round down'\n+        return rounds / Math.max(to.getRackSize(), 1);\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (!getCampaignOptions().useAmmoByType()) {\n+            // PERF: if we're not using ammo by type, we can use\n+            //       a MUCH faster lookup for spare ammo.\n+            AmmoStorage spare = findSpareAmmo(ammoType);\n+            return (spare != null) ? spare.getShots() : 0;\n+        } else {\n+            // If we're using ammo by type, stream through all of\n+            // the ammo that matches strictly or is compatible.\n+            return getWarehouse()\n+                    .streamSpareParts()\n+                    .filter(Quartermaster::isAvailableAsSpareAmmo)\n+                    .mapToInt(part -> {\n+                        AmmoStorage spare = (AmmoStorage) part;\n+                        if (spare.isSameAmmoType(ammoType)) {\n+                            return spare.getShots();\n+                        } else if (spare.isCompatibleAmmo(ammoType)) {\n+                            return convertShots(spare.getType(), spare.getShots(), ammoType);\n+                        }\n+                        return 0;\n+                    })\n+                    .sum();\n+        }\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not a given {@code Part}\n+     * is available for use as spare ammo.\n+     * @param part The part to check if it can be used as spare ammo.\n+     */\n+    private static boolean isAvailableAsSpareAmmo(@Nullable Part part) {\n+        return (part instanceof AmmoStorage)\n+                && part.isPresent()\n+                && !part.isReservedForRefit();\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType, InfantryWeapon weaponType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        InfantryAmmoStorage spare = findSpareAmmo(ammoType, weaponType);\n+        return (spare != null) ? spare.getShots() : 0;\n+    }\n+\n+    /**\n+     * Finds spare infantry ammo of a given type, if any.\n+     * @param ammoType The {@code AmmoType} to search for.\n+     * @param weaponType The {@code InfantryWeapon} which carries the ammo.\n+     * @return The matching spare {@code InfantryAmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable InfantryAmmoStorage findSpareAmmo(AmmoType ammoType, InfantryWeapon weaponType) {\n+        return (InfantryAmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!(part instanceof InfantryAmmoStorage) || !isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((InfantryAmmoStorage) part).isSameAmmoType(ammoType, weaponType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg3MDAxMA==", "bodyText": "I find it easier to read split apart.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541870010", "createdAt": "2020-12-13T07:51:31Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Quartermaster.java", "diffHunk": "@@ -100,6 +112,289 @@ public void addPart(Part part, int transitDays) {\n         getWarehouse().addPart(part, true);\n     }\n \n+    /**\n+     * Adds ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, int shots) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shots >= 0) {\n+            addPart(new AmmoStorage(0, ammoType, shots, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Adds infantry ammo to the campaign.\n+     * @param ammoType The type of ammo to add.\n+     * @param infantryWeapon The type of infantry weapon using the ammo.\n+     * @param shots The number of rounds of ammo to add.\n+     */\n+    public void addAmmo(AmmoType ammoType, InfantryWeapon infantryWeapon, int shots) {\n+        Objects.requireNonNull(ammoType);\n+        Objects.requireNonNull(infantryWeapon);\n+\n+        if (shots >= 0) {\n+            addPart(new InfantryAmmoStorage(0, ammoType, shots, infantryWeapon, getCampaign()), 0);\n+        }\n+    }\n+\n+    /**\n+     * Removes ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        AmmoStorage ammoStorage = findSpareAmmo(ammoType);\n+\n+        int shotsRemoved = removeAmmo(ammoStorage, shotsNeeded);\n+        shotsNeeded -= shotsRemoved;\n+\n+        // See if we've still need some more ammo ...\n+        if (shotsNeeded > 0) {\n+            // ... then check if we can use compatible ammo ...\n+            if (getCampaignOptions().useAmmoByType()) {\n+                // ... and if so, remove some more from the campaign (if available).\n+                shotsRemoved += removeCompatibleAmmo(ammoType, shotsNeeded);\n+            }\n+        }\n+\n+        // Inform the caller how many shots we actually removed for them.\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Remove ammo directly from an AmmoStorage part.\n+     * @param shotsNeeded The number of shots needed.\n+     * @return The number of shots removed.\n+     */\n+    private int removeAmmo(@Nullable AmmoStorage ammoStorage, int shotsNeeded) {\n+        if ((ammoStorage == null) || (ammoStorage.getShots() == 0)) {\n+            return 0;\n+        }\n+\n+        // We've got at least one round of ammo,\n+        // so calculate how many shots we can take\n+        // from this AmmoStorage.\n+        int shotsRemoved = Math.min(ammoStorage.getShots(), shotsNeeded);\n+\n+        // Update the number of rounds available ...\n+        ammoStorage.changeShots(-shotsRemoved);\n+        if (ammoStorage.getShots() == 0) {\n+            // ... and remove the part if we've run out.\n+            getWarehouse().removePart(ammoStorage);\n+        } else {\n+            MekHQ.triggerEvent(new PartChangedEvent(ammoStorage));\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Removes compatible ammo from the campaign, if available.\n+     * @param ammoType The type of ammo to remove.\n+     * @param shotsNeeded The number of rounds of ammo needed.\n+     * @return The number of rounds of ammo removed from the campaign.\n+     *         This value may be less than or equal to {@code shotsNeeded}.\n+     */\n+    public int removeCompatibleAmmo(AmmoType ammoType, int shotsNeeded) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (shotsNeeded <= 0) {\n+            return 0;\n+        }\n+\n+        int shotsRemoved = 0;\n+\n+        List<AmmoStorage> compatibleAmmo = findCompatibleSpareAmmo(ammoType);\n+        for (AmmoStorage compatible : compatibleAmmo) {\n+            if (shotsNeeded <= 0) {\n+                break;\n+            }\n+\n+            // Check to see if it has at least one shot we can use in our target ammo type ...\n+            int shotsAvailable = convertShots(compatible.getType(), compatible.getShots(), ammoType);\n+            if (shotsAvailable <= 0) {\n+                // ... and if not, skip this ammo storage.\n+                continue;\n+            }\n+\n+            // Calculate the shots needed in the compatible ammo type ...\n+            int compatibleShotsNeeded = convertShots(ammoType, shotsNeeded, compatible.getType());\n+\n+            // Try removing that ammo from the compatible ammo storage.\n+            int compatibleShotsRemoved = removeAmmo(compatible, compatibleShotsNeeded);\n+            if (compatibleShotsRemoved > 0) {\n+                // If we did remove some ammo, adjust the number of shots we removed and needed\n+                int shotsFound = convertShots(compatible.getType(), compatibleShotsRemoved, ammoType);\n+                shotsRemoved += shotsFound;\n+                shotsNeeded -= shotsFound;\n+            }\n+        }\n+\n+        return shotsRemoved;\n+    }\n+\n+    /**\n+     * Finds spare ammo of a given type, if any.\n+     * @param ammoType The AmmoType to search for.\n+     * @return The matching spare {@code AmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable AmmoStorage findSpareAmmo(AmmoType ammoType) {\n+        return (AmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((AmmoStorage) part).isSameAmmoType(ammoType);\n+        });\n+    }\n+\n+    /**\n+     * Find compatible ammo in the warehouse.\n+     * @param ammoType The AmmoType to search for compatible types.\n+     * @return A list of spare {@code AmmoStorage} parts in the warehouse.\n+     */\n+    private List<AmmoStorage> findCompatibleSpareAmmo(AmmoType ammoType) {\n+        List<AmmoStorage> compatibleAmmo = new ArrayList<>();\n+        getWarehouse().forEachSparePart(part -> {\n+            if (!isAvailableAsSpareAmmo(part)) {\n+                return;\n+            }\n+\n+            AmmoStorage spare = (AmmoStorage) part;\n+            if (spare.isSameAmmoType(ammoType)) {\n+                // We are looking for compatible ammo, not identical ammo.\n+                return;\n+            }\n+\n+            // If we found a spare ammo bin with at least one shot available ...\n+            if (spare.isCompatibleAmmo(ammoType) && (spare.getShots() > 0)) {\n+                // ... add it to our list of compatible ammo.\n+                compatibleAmmo.add(spare);\n+            }\n+        });\n+\n+        return compatibleAmmo;\n+    }\n+\n+    /**\n+     * Converts shots from one ammo type to another.\n+     * NB: it is up to the caller to ensure the ammo types are compatible.\n+     * @param from The AmmoType for which {@code shots} represents.\n+     * @param shots The number of shots of {@code from}.\n+     * @param to The AmmoType which {@code shots} should be converted to.\n+     * @return The value of {@code shots} when converted to a specific AmmoType.\n+     */\n+    private static int convertShots(AmmoType from, int shots, AmmoType to) {\n+        int rounds = shots * Math.max(from.getRackSize(), 1);\n+\n+        // Use integer division to 'round down'\n+        return rounds / Math.max(to.getRackSize(), 1);\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        if (!getCampaignOptions().useAmmoByType()) {\n+            // PERF: if we're not using ammo by type, we can use\n+            //       a MUCH faster lookup for spare ammo.\n+            AmmoStorage spare = findSpareAmmo(ammoType);\n+            return (spare != null) ? spare.getShots() : 0;\n+        } else {\n+            // If we're using ammo by type, stream through all of\n+            // the ammo that matches strictly or is compatible.\n+            return getWarehouse()\n+                    .streamSpareParts()\n+                    .filter(Quartermaster::isAvailableAsSpareAmmo)\n+                    .mapToInt(part -> {\n+                        AmmoStorage spare = (AmmoStorage) part;\n+                        if (spare.isSameAmmoType(ammoType)) {\n+                            return spare.getShots();\n+                        } else if (spare.isCompatibleAmmo(ammoType)) {\n+                            return convertShots(spare.getType(), spare.getShots(), ammoType);\n+                        }\n+                        return 0;\n+                    })\n+                    .sum();\n+        }\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not a given {@code Part}\n+     * is available for use as spare ammo.\n+     * @param part The part to check if it can be used as spare ammo.\n+     */\n+    private static boolean isAvailableAsSpareAmmo(@Nullable Part part) {\n+        return (part instanceof AmmoStorage)\n+                && part.isPresent()\n+                && !part.isReservedForRefit();\n+    }\n+\n+    /**\n+     * Gets the amount of ammo available of a given type.\n+     * @param ammoType The type of ammo.\n+     * @return The number of shots available of the given ammo type.\n+     */\n+    public int getAmmoAvailable(AmmoType ammoType, InfantryWeapon weaponType) {\n+        Objects.requireNonNull(ammoType);\n+\n+        InfantryAmmoStorage spare = findSpareAmmo(ammoType, weaponType);\n+        return (spare != null) ? spare.getShots() : 0;\n+    }\n+\n+    /**\n+     * Finds spare infantry ammo of a given type, if any.\n+     * @param ammoType The {@code AmmoType} to search for.\n+     * @param weaponType The {@code InfantryWeapon} which carries the ammo.\n+     * @return The matching spare {@code InfantryAmmoStorage} part, otherwise {@code null}.\n+     */\n+    private @Nullable InfantryAmmoStorage findSpareAmmo(AmmoType ammoType, InfantryWeapon weaponType) {\n+        return (InfantryAmmoStorage) getWarehouse().findSparePart(part -> {\n+            if (!(part instanceof InfantryAmmoStorage) || !isAvailableAsSpareAmmo(part)) {\n+                return false;\n+            }\n+            return ((InfantryAmmoStorage) part).isSameAmmoType(ammoType, weaponType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNjI2Mw=="}, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM2MDE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/parts/Refit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjo0NToyNVrOIEujKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjo0NToyNVrOIEujKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNzg4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AmmoType type = ((AmmoBin)oPart).getType();\n          \n          \n            \n                            AmmoType type = ((AmmoBin) oPart).getType();", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541827883", "createdAt": "2020-12-13T02:45:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/Refit.java", "diffHunk": "@@ -805,7 +785,7 @@ public void calculate() {\n             }\n             if (oPart instanceof AmmoBin) {\n                 int remainingShots = ((AmmoBin)oPart).getFullShots() - ((AmmoBin)oPart).getShotsNeeded();\n-                AmmoType type = (AmmoType)((AmmoBin)oPart).getType();\n+                AmmoType type = ((AmmoBin)oPart).getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM2NjczOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/parts/equipment/BattleArmorAmmoBin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjo1MDo0OVrOIEul5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjo1MDo0OVrOIEul5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyODU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        mounted.setShotsLeft(getFullShots() - shotsNeeded/getNumTroopers());\n          \n          \n            \n                        mounted.setShotsLeft(getFullShots() - (shotsNeeded / getNumTroopers()));", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541828581", "createdAt": "2020-12-13T02:50:49Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/equipment/BattleArmorAmmoBin.java", "diffHunk": "@@ -134,59 +119,52 @@ public int getDifficulty() {\n \n     @Override\n     public void updateConditionFromPart() {\n-        if(null != unit) {\n-            Mounted mounted = unit.getEntity().getEquipment(equipmentNum);\n-            if(null != mounted) {\n-                mounted.setHit(false);\n-                mounted.setDestroyed(false);\n-                mounted.setRepairable(true);\n-                unit.repairSystem(CriticalSlot.TYPE_EQUIPMENT, equipmentNum);\n-                mounted.setShotsLeft(getFullShots() - shotsNeeded/getNumTroopers());\n-            }\n+        Mounted mounted = getMounted();\n+        if (mounted != null) {\n+            mounted.setHit(false);\n+            mounted.setDestroyed(false);\n+            mounted.setRepairable(true);\n+            getUnit().repairSystem(CriticalSlot.TYPE_EQUIPMENT, equipmentNum);\n+            mounted.setShotsLeft(getFullShots() - shotsNeeded/getNumTroopers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM4NjU2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowNzowMlrOIEuuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowNzowMlrOIEuuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMDcwMA==", "bodyText": "Ternary candidate", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541830700", "createdAt": "2020-12-13T03:07:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM4ODEyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowODowN1rOIEuu0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNzo1NDo0MVrOIExJjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMDg2Nw==", "bodyText": "This is duplicated and can be pulled out of the if statement.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541830867", "createdAt": "2020-12-13T03:08:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg3MDQ3Nw==", "bodyText": "The code is pretty ugly when I do that, because the setBay call is not a shared call.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541870477", "createdAt": "2020-12-13T07:54:41Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMDg2Nw=="}, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM4OTMxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOToxOVrOIEuvUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOToxOVrOIEuvUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMDk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n          \n          \n            \n                        if ((prt instanceof HeatSink) && !prt.getName().contains(\"Heat Sink\")) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541830995", "createdAt": "2020-12-13T03:09:19Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MDk3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMDoyOFrOIEuwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMDoyOFrOIEuwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (null == m || m.getLocation() == Entity.LOC_NONE) {\n          \n          \n            \n                                if ((null == m) || (m.getLocation() == Entity.LOC_NONE)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831169", "createdAt": "2020-12-13T03:10:28Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MTQ3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMDo0OVrOIEuwNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMDo0OVrOIEuwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (prt instanceof EquipmentPart\n          \n          \n            \n                                    && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n          \n          \n            \n                            if ((prt instanceof EquipmentPart)\n          \n          \n            \n                                    && (((EquipmentPart) prt).getType() instanceof BayWeapon)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831222", "createdAt": "2020-12-13T03:10:49Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MTkyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMToxNFrOIEuwZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMToxNFrOIEuwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (prt instanceof MissingEquipmentPart\n          \n          \n            \n                                    && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n          \n          \n            \n                            if ((prt instanceof MissingEquipmentPart)\n          \n          \n            \n                                    && (((MissingEquipmentPart) prt).getType() instanceof BayWeapon)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831270", "createdAt": "2020-12-13T03:11:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MzEzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjowMlrOIEuw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjowMlrOIEuw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof MekLocation\n          \n          \n            \n                                && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n          \n          \n            \n                        if ((prt instanceof MekLocation)\n          \n          \n            \n                                && (((MekLocation) prt).getLoc() != Mech.LOC_HEAD)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831399", "createdAt": "2020-12-13T03:12:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MzQyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjoxNlrOIEuxBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjoxNlrOIEuxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (version.getMinorVersion() < 3 && !prt.needsFixing()\n          \n          \n            \n                        if ((version.getMinorVersion() < 3) && !prt.needsFixing()", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831430", "createdAt": "2020-12-13T03:12:16Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n+                ((MekLocation) prt).setSensors(false);\n+                ((MekLocation) prt).setLifeSupport(false);\n+            }\n+\n+            if (version.getMinorVersion() < 3 && !prt.needsFixing()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 361}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5NDIwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjozOFrOIEuxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMjozOFrOIEuxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof EnginePart && prt.getName().contains(\"Vehicle\")) {\n          \n          \n            \n                        if ((prt instanceof EnginePart) && prt.getName().contains(\"Vehicle\")) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831508", "createdAt": "2020-12-13T03:12:38Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n+                ((MekLocation) prt).setSensors(false);\n+                ((MekLocation) prt).setLifeSupport(false);\n+            }\n+\n+            if (version.getMinorVersion() < 3 && !prt.needsFixing()\n+                    && !prt.isSalvaging()) {\n+                // repaired parts were not getting experience properly reset\n+                prt.setSkillMin(SkillType.EXP_GREEN);\n+            }\n+\n+            if (prt instanceof MissingPart) {\n+                // Missing Parts should only exist on units, but there have\n+                // been cases where they continue to float around outside of units\n+                // so this should clean that up\n+                if (null == u) {\n+                    removeParts.add(prt);\n+                } else {\n+                    // run this to make sure that slots for missing parts are set as\n+                    // unrepairable\n+                    // because they will not be in missing locations\n+                    prt.updateConditionFromPart();\n+                }\n+            }\n+\n+            // old versions didnt distinguish tank engines\n+            if (prt instanceof EnginePart && prt.getName().contains(\"Vehicle\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 382}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5NDc2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMzowOFrOIEuxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMzowOFrOIEuxkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof EnginePart && prt.getName().contains(\"(Clan\")\n          \n          \n            \n                                && prt.getTechBase() != Part.T_CLAN) {\n          \n          \n            \n                        if ((prt instanceof EnginePart) && prt.getName().contains(\"(Clan\")\n          \n          \n            \n                                && (prt.getTechBase() != Part.T_CLAN)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831568", "createdAt": "2020-12-13T03:13:08Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n+                ((MekLocation) prt).setSensors(false);\n+                ((MekLocation) prt).setLifeSupport(false);\n+            }\n+\n+            if (version.getMinorVersion() < 3 && !prt.needsFixing()\n+                    && !prt.isSalvaging()) {\n+                // repaired parts were not getting experience properly reset\n+                prt.setSkillMin(SkillType.EXP_GREEN);\n+            }\n+\n+            if (prt instanceof MissingPart) {\n+                // Missing Parts should only exist on units, but there have\n+                // been cases where they continue to float around outside of units\n+                // so this should clean that up\n+                if (null == u) {\n+                    removeParts.add(prt);\n+                } else {\n+                    // run this to make sure that slots for missing parts are set as\n+                    // unrepairable\n+                    // because they will not be in missing locations\n+                    prt.updateConditionFromPart();\n+                }\n+            }\n+\n+            // old versions didnt distinguish tank engines\n+            if (prt instanceof EnginePart && prt.getName().contains(\"Vehicle\")) {\n+                boolean isHover = null != u\n+                        && u.getEntity().getMovementMode() == EntityMovementMode.HOVER && u.getEntity() instanceof Tank;\n+                ((EnginePart) prt).fixTankFlag(isHover);\n+            }\n+\n+            // clan flag might not have been properly set in early versions\n+            if (prt instanceof EnginePart && prt.getName().contains(\"(Clan\")\n+                    && prt.getTechBase() != Part.T_CLAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 390}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5NTMxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMzozMFrOIEuxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxMzozMFrOIEuxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTYyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof MissingEnginePart && null != u\n          \n          \n            \n                                && u.getEntity() instanceof Tank) {\n          \n          \n            \n                        if ((prt instanceof MissingEnginePart) && (null != u)\n          \n          \n            \n                                && (u.getEntity() instanceof Tank)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831627", "createdAt": "2020-12-13T03:13:30Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n+                ((MekLocation) prt).setSensors(false);\n+                ((MekLocation) prt).setLifeSupport(false);\n+            }\n+\n+            if (version.getMinorVersion() < 3 && !prt.needsFixing()\n+                    && !prt.isSalvaging()) {\n+                // repaired parts were not getting experience properly reset\n+                prt.setSkillMin(SkillType.EXP_GREEN);\n+            }\n+\n+            if (prt instanceof MissingPart) {\n+                // Missing Parts should only exist on units, but there have\n+                // been cases where they continue to float around outside of units\n+                // so this should clean that up\n+                if (null == u) {\n+                    removeParts.add(prt);\n+                } else {\n+                    // run this to make sure that slots for missing parts are set as\n+                    // unrepairable\n+                    // because they will not be in missing locations\n+                    prt.updateConditionFromPart();\n+                }\n+            }\n+\n+            // old versions didnt distinguish tank engines\n+            if (prt instanceof EnginePart && prt.getName().contains(\"Vehicle\")) {\n+                boolean isHover = null != u\n+                        && u.getEntity().getMovementMode() == EntityMovementMode.HOVER && u.getEntity() instanceof Tank;\n+                ((EnginePart) prt).fixTankFlag(isHover);\n+            }\n+\n+            // clan flag might not have been properly set in early versions\n+            if (prt instanceof EnginePart && prt.getName().contains(\"(Clan\")\n+                    && prt.getTechBase() != Part.T_CLAN) {\n+                ((EnginePart) prt).fixClanFlag();\n+            }\n+            if (prt instanceof MissingEnginePart && null != u\n+                    && u.getEntity() instanceof Tank) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5NTk4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxNDoxN1rOIEuyFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxNDoxN1rOIEuyFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (prt instanceof MissingEnginePart\n          \n          \n            \n                                && prt.getName().contains(\"(Clan\") && prt.getTechBase() != Part.T_CLAN) {\n          \n          \n            \n                        if ((prt instanceof MissingEnginePart)\n          \n          \n            \n                                && prt.getName().contains(\"(Clan\") && (prt.getTechBase() != Part.T_CLAN)) {", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541831700", "createdAt": "2020-12-13T03:14:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/io/CampaignXmlParser.java", "diffHunk": "@@ -1402,89 +1286,241 @@ private static void processPartNodes(Campaign retVal, Node wn, Version version)\n \n             Part p = Part.generateInstanceFromXML(wn2, version);\n \n-            // deal with the Weapon as Heat Sink problem from earlier versions\n-            if (p instanceof HeatSink && !p.getName().contains(\"Heat Sink\")) {\n-                continue;\n+            if (p != null) {\n+                parts.add(p);\n             }\n+        }\n+\n+        retVal.importParts(parts);\n+\n+        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+    }\n+\n+    private static void postProcessParts(Campaign retVal, Version version) {\n+        Map<Integer, Part> replaceParts = new HashMap<>();\n+        List<Part> removeParts = new ArrayList<>();\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            prt.fixReferences(retVal);\n \n-            if (((p instanceof EquipmentPart) && ((EquipmentPart) p).getType() == null)\n-                    || ((p instanceof MissingEquipmentPart) && ((MissingEquipmentPart) p).getType() == null)) {\n-                MekHQ.getLogger().warning(CampaignXmlParser.class, \"Could not find matching EquipmentType for part \" + p.getName());\n+            // Remove fundamentally broken equipment parts\n+            if (((prt instanceof EquipmentPart) && ((EquipmentPart) prt).getType() == null)\n+                    || ((prt instanceof MissingEquipmentPart) && ((MissingEquipmentPart) prt).getType() == null)) {\n+                MekHQ.getLogger().warning(\"Could not find matching EquipmentType for part \" + prt.getName());\n+                removeParts.add(prt);\n                 continue;\n             }\n \n             // deal with equipmentparts that are now subtyped\n-            int pid = p.getId();\n-            if (isLegacyMASC(p)) {\n-                p = new MASC(p.getUnitTonnage(), ((EquipmentPart) p).getType(),\n-                        ((EquipmentPart) p).getEquipmentNum(), retVal, 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            if (isLegacyMissingMASC(p)) {\n-                p = new MissingMASC(p.getUnitTonnage(),\n-                        ((MissingEquipmentPart) p).getType(), ((MissingEquipmentPart) p).getEquipmentNum(), retVal,\n-                        p.getTonnage(), 0, p.isOmniPodded());\n-                p.setId(pid);\n-            }\n-            // deal with true values for sensor and life support on non-Mech\n-            // heads\n-            if (p instanceof MekLocation\n-                    && ((MekLocation) p).getLoc() != Mech.LOC_HEAD) {\n-                ((MekLocation) p).setSensors(false);\n-                ((MekLocation) p).setLifeSupport(false);\n-            }\n-\n-            if (version.getMinorVersion() < 3 && !p.needsFixing()\n-                    && !p.isSalvaging()) {\n-                // repaired parts were not getting experience properly reset\n-                p.setSkillMin(SkillType.EXP_GREEN);\n+            if (isLegacyMASC(prt)) {\n+                Part replacement = new MASC(prt.getUnitTonnage(), ((EquipmentPart) prt).getType(),\n+                        ((EquipmentPart) prt).getEquipmentNum(), retVal, 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            //if for some reason we couldn't find a type for equipment part, then remove it\n-            if ((p instanceof EquipmentPart && null == ((EquipmentPart)p).getType())\n-                    || (p instanceof MissingEquipmentPart && null == ((MissingEquipmentPart) p).getType())) {\n-                p = null;\n+            if (isLegacyMissingMASC(prt)) {\n+                Part replacement = new MissingMASC(prt.getUnitTonnage(),\n+                        ((MissingEquipmentPart) prt).getType(), ((MissingEquipmentPart) prt).getEquipmentNum(), retVal,\n+                        prt.getTonnage(), 0, prt.isOmniPodded());\n+                replacement.setId(prt.getId());\n+                replacement.setUnit(prt.getUnit());\n+                replaceParts.put(prt.getId(), replacement);\n             }\n \n-            if ((null != p) && (p.getUnit() != null)\n+            // Fixup LargeCraftAmmoBins from old versions\n+            if ((prt.getUnit() != null) && (prt.getUnit().getEntity() != null)\n                     && ((version.getMinorVersion() < 43)\n                             || ((version.getMinorVersion() == 43) && (version.getSnapshot() < 5)))\n-                    && ((p instanceof AmmoBin) || (p instanceof MissingAmmoBin))) {\n-                Unit u = p.getUnit();\n-                if (u.getEntity().usesWeaponBays()) {\n+                    && ((prt instanceof AmmoBin) || (prt instanceof MissingAmmoBin))) {\n+                if (prt.getUnit().getEntity().usesWeaponBays()) {\n                     Mounted ammo;\n-                    if (p instanceof EquipmentPart) {\n-                        ammo = u.getEntity().getEquipment(((EquipmentPart) p).getEquipmentNum());\n+                    if (prt instanceof EquipmentPart) {\n+                        ammo = prt.getUnit().getEntity().getEquipment(((EquipmentPart) prt).getEquipmentNum());\n                     } else {\n-                        ammo = u.getEntity().getEquipment(((MissingEquipmentPart) p).getEquipmentNum());\n+                        ammo = prt.getUnit().getEntity().getEquipment(((MissingEquipmentPart) prt).getEquipmentNum());\n                     }\n                     if (null != ammo) {\n-                        if (p instanceof AmmoBin) {\n-                            p = new LargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((AmmoBin) p).getType(),\n-                                    ((AmmoBin) p).getEquipmentNum(),\n-                                    ((AmmoBin) p).getShotsNeeded(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((LargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                        if (prt instanceof AmmoBin) {\n+                            LargeCraftAmmoBin replacement = new LargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((AmmoBin) prt).getType(),\n+                                    ((AmmoBin) prt).getEquipmentNum(),\n+                                    ((AmmoBin) prt).getShotsNeeded(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         } else {\n-                            p = new MissingLargeCraftAmmoBin(p.getUnitTonnage(),\n-                                    ((MissingAmmoBin) p).getType(),\n-                                    ((MissingAmmoBin) p).getEquipmentNum(),\n-                                    ammo.getAmmoCapacity(), retVal);\n-                            ((MissingLargeCraftAmmoBin) p).setBay(u.getEntity().getBayByAmmo(ammo));\n+                            MissingLargeCraftAmmoBin replacement = new MissingLargeCraftAmmoBin(prt.getUnitTonnage(),\n+                                    ((MissingAmmoBin) prt).getType(),\n+                                    ((MissingAmmoBin) prt).getEquipmentNum(),\n+                                    ammo.getSize(), retVal);\n+                            replacement.setId(prt.getId());\n+                            replacement.setUnit(prt.getUnit());\n+                            replacement.setBay(prt.getUnit().getEntity().getBayByAmmo(ammo));\n+                            replaceParts.put(prt.getId(), replacement);\n                         }\n                     }\n                 }\n             }\n+        }\n \n-            if (p != null) {\n-                parts.add(p);\n+        // Replace parts that need to be replaced\n+        for (Map.Entry<Integer, Part> entry : replaceParts.entrySet()) {\n+            int partId = entry.getKey();\n+            Part oldPart = retVal.getWarehouse().getPart(partId);\n+            if (oldPart != null) {\n+                retVal.getWarehouse().removePart(oldPart);\n             }\n+\n+            retVal.getWarehouse().addPart(entry.getValue());\n         }\n \n-        retVal.importParts(parts);\n+        // After replacing parts, go back through and remove more broken parts\n+        for (Part prt : retVal.getWarehouse().getParts()) {\n+            // deal with the Weapon as Heat Sink problem from earlier versions\n+            if (prt instanceof HeatSink && !prt.getName().contains(\"Heat Sink\")) {\n+                removeParts.add(prt);\n+                continue;\n+            }\n \n-        MekHQ.getLogger().info(\"Load Part Nodes Complete!\");\n+            Unit u = prt.getUnit();\n+            if (null != u) {\n+                // get rid of any equipmentparts without locations or mounteds\n+                if (prt instanceof EquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((EquipmentPart) prt).getEquipmentNum());\n+                    if ((m == null) || (m.getLocation() == Entity.LOC_NONE)) {\n+                        // ... don't remove ammo bins as they may not have a location\n+                        if (!(prt instanceof AmmoBin)) {\n+                            removeParts.add(prt);\n+                            continue;\n+                        }\n+                    }\n+                    // Remove existing duplicate parts.\n+                    Part duplicatePart = u.getPartForEquipmentNum(((EquipmentPart) prt).getEquipmentNum(), prt.getLocation());\n+                    if ((duplicatePart instanceof EquipmentPart)\n+                            && ((EquipmentPart) prt).getType().equals(((EquipmentPart) duplicatePart).getType())) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+                if (prt instanceof MissingEquipmentPart) {\n+                    Mounted m = u.getEntity().getEquipment(\n+                            ((MissingEquipmentPart) prt).getEquipmentNum());\n+                    if (null == m || m.getLocation() == Entity.LOC_NONE) {\n+                        removeParts.add(prt);\n+                        continue;\n+                    }\n+                }\n+\n+                //if the type is a BayWeapon, remove\n+                if (prt instanceof EquipmentPart\n+                        && ((EquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                if (prt instanceof MissingEquipmentPart\n+                        && ((MissingEquipmentPart) prt).getType() instanceof BayWeapon) {\n+                    removeParts.add(prt);\n+                    continue;\n+                }\n+\n+                // if actuators on units have no location (on version 1.23 and\n+                // earlier) then remove them and let initializeParts (called\n+                // later) create new ones\n+                if ((prt instanceof MekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if ((prt instanceof MissingMekActuator) && (prt.getLocation() == Entity.LOC_NONE)) {\n+                    removeParts.add(prt);\n+                } else if (((u.getEntity() instanceof SmallCraft) || (u.getEntity() instanceof Jumpship))\n+                        && ((prt instanceof EnginePart) || (prt instanceof MissingEnginePart))) {\n+                    //units from earlier versions might have the wrong kind of engine\n+                    removeParts.add(prt);\n+                } else {\n+                    u.addPart(prt);\n+                }\n+            }\n+\n+            // deal with true values for sensor and life support on non-Mech\n+            // heads\n+            if (prt instanceof MekLocation\n+                    && ((MekLocation) prt).getLoc() != Mech.LOC_HEAD) {\n+                ((MekLocation) prt).setSensors(false);\n+                ((MekLocation) prt).setLifeSupport(false);\n+            }\n+\n+            if (version.getMinorVersion() < 3 && !prt.needsFixing()\n+                    && !prt.isSalvaging()) {\n+                // repaired parts were not getting experience properly reset\n+                prt.setSkillMin(SkillType.EXP_GREEN);\n+            }\n+\n+            if (prt instanceof MissingPart) {\n+                // Missing Parts should only exist on units, but there have\n+                // been cases where they continue to float around outside of units\n+                // so this should clean that up\n+                if (null == u) {\n+                    removeParts.add(prt);\n+                } else {\n+                    // run this to make sure that slots for missing parts are set as\n+                    // unrepairable\n+                    // because they will not be in missing locations\n+                    prt.updateConditionFromPart();\n+                }\n+            }\n+\n+            // old versions didnt distinguish tank engines\n+            if (prt instanceof EnginePart && prt.getName().contains(\"Vehicle\")) {\n+                boolean isHover = null != u\n+                        && u.getEntity().getMovementMode() == EntityMovementMode.HOVER && u.getEntity() instanceof Tank;\n+                ((EnginePart) prt).fixTankFlag(isHover);\n+            }\n+\n+            // clan flag might not have been properly set in early versions\n+            if (prt instanceof EnginePart && prt.getName().contains(\"(Clan\")\n+                    && prt.getTechBase() != Part.T_CLAN) {\n+                ((EnginePart) prt).fixClanFlag();\n+            }\n+            if (prt instanceof MissingEnginePart && null != u\n+                    && u.getEntity() instanceof Tank) {\n+                boolean isHover = u.getEntity().getMovementMode() == EntityMovementMode.HOVER;\n+                ((MissingEnginePart) prt).fixTankFlag(isHover);\n+            }\n+            if (prt instanceof MissingEnginePart\n+                    && prt.getName().contains(\"(Clan\") && prt.getTechBase() != Part.T_CLAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzQwNzE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/parts/equipment/MissingAmmoBin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoyMjoxNlrOIEu2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoyMjoxNlrOIEu2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjg5Mg==", "bodyText": "Ternary candidate", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541832892", "createdAt": "2020-12-13T03:22:16Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/equipment/MissingAmmoBin.java", "diffHunk": "@@ -89,99 +88,90 @@ public int getDifficulty() {\n     }\n \n     @Override\n-    public void fix() {\n-        Part replacement = findReplacement(false);\n-        if(null != replacement) {\n-            Part actualReplacement = getActualReplacement((AmmoBin) replacement);\n-            unit.addPart(actualReplacement);\n-            campaign.getQuartermaster().addPart(actualReplacement, 0);\n-            replacement.decrementQuantity();\n-            ((EquipmentPart)actualReplacement).setEquipmentNum(equipmentNum);\n-            remove(false);\n-            //assign the replacement part to the unit\n-            actualReplacement.updateConditionFromPart();\n-        }\n+    public boolean hasReplacementPart() {\n+        return true;\n     }\n \n-    protected Part getActualReplacement(AmmoBin found) {\n-        //Check to see if munition types are different\n-        if (getType() == found.getType()) {\n-            return found.clone();\n-        } else {\n-            return new AmmoBin(getUnitTonnage(), getType(), getEquipmentNum(),\n-                    getFullShots(), isOneShot(), isOmniPodded(), campaign);\n-        }\n+    @Override\n+    public Part getReplacementPart() {\n+        return getNewPart();\n+    }\n+\n+    @Override\n+    public void reservePart() {\n+        // No need to reserve a part for a missing AmmoBin, they're free.\n+    }\n+\n+    @Override\n+    public void cancelReservation() {\n+        // We do not need to return a replacement part, they're free/fake\n+        setReplacementPart(null); // CAW: clears out anything from a prior version\n+    }\n+\n+    @Override\n+    public void fix() {\n+        AmmoBin replacement = getNewPart();\n+        unit.addPart(replacement);\n+        campaign.getQuartermaster().addPart(replacement, 0);\n+\n+        remove(false);\n+\n+        // Add the replacement part to the unit\n+        replacement.setEquipmentNum(getEquipmentNum());\n+        replacement.updateConditionFromPart();\n     }\n \n     @Override\n     public boolean isAcceptableReplacement(Part part, boolean refit) {\n-        if ((part instanceof AmmoBin)\n-                && !(part instanceof LargeCraftAmmoBin)) {\n-            EquipmentPart eqpart = (EquipmentPart)part;\n-            EquipmentType et = eqpart.getType();\n-            return getType().equals(et) && (((AmmoBin) part).getFullShots() == getFullShots());\n-        }\n-        return false;\n+        return (part instanceof AmmoBin)\n+                // Do not try to replace a MissingAmmoBin with anything other\n+                // than an AmmoBin. Subclasses should use a similar check, which\n+                // breaks Composability to a degree but in this case we've used\n+                // subclasses where they're not truly composable.\n+                && (part.getClass() == AmmoBin.class)\n+                && getType().equals(((AmmoBin) part).getType())\n+                && (isOneShot() == ((AmmoBin) part).isOneShot());\n     }\n \n     public boolean isOneShot() {\n         return oneShot;\n     }\n \n     protected int getFullShots() {\n-        int fullShots = getType().getShots();\n-        if(oneShot) {\n-            fullShots = 1;\n+        if (oneShot) {\n+            return 1;\n         }\n-        return fullShots;\n+\n+        return getType().getShots();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzYzNDQ3OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/equipment/AmmoBinTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNjoyMzo1OVrOIEwViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNzo1NjoyM1rOIExKkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg1NzE2Mw==", "bodyText": "?", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541857163", "createdAt": "2020-12-13T06:23:59Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/equipment/AmmoBinTest.java", "diffHunk": "@@ -20,13 +20,1433 @@\n package mekhq.campaign.parts.equipment;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+import static mekhq.campaign.parts.AmmoUtilities.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.Mounted;\n+import megamek.common.Protomech;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoBinTest {\n     @Test\n     public void deserializationCtorTest() {\n         AmmoBin ammoBin = new AmmoBin();\n         assertNotNull(ammoBin);\n     }\n+\n+    @Test\n+    public void ammoBinCtorTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        int shotsNeeded = ammoType.getShots();\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        assertEquals(ammoType, ammoBin.getType());\n+        assertEquals(equipmentNum, ammoBin.getEquipmentNum());\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+        assertEquals(ammoType.getShots(), ammoBin.getFullShots());\n+        assertEquals(mockCampaign, ammoBin.getCampaign());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        int shotsNeeded = ammoType.getShots() - 1;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        // Ensure the clone has all the same stuff\n+        AmmoBin clone = ammoBin.clone();\n+        assertEquals(ammoBin.getType(), clone.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), clone.getEquipmentNum());\n+        assertEquals(ammoBin.getShotsNeeded(), clone.getShotsNeeded());\n+        assertEquals(ammoBin.getFullShots(), clone.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), clone.getCampaign());\n+        assertEquals(ammoBin.getName(), clone.getName());\n+    }\n+\n+    @Test\n+    public void needsMaintenanceTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        // AmmoBins do not need maintenance, even when empty.\n+        assertFalse(ammoBin.needsMaintenance());\n+    }\n+\n+    @Test\n+    public void isPriceAdjustedForAmountTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertTrue(ammoBin.isPriceAdjustedForAmount());\n+    }\n+\n+    @Test\n+    public void massRepairOptionTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertEquals(Part.REPAIR_PART_TYPE.AMMO, ammoBin.getMassRepairOptionType());\n+    }\n+\n+    @Test\n+    public void isOmniPoddableTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertTrue(ammoBin.isOmniPoddable());\n+    }\n+\n+    @Test\n+    public void getTechAdvancementTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertEquals(ammoType.getTechAdvancement(), ammoBin.getTechAdvancement());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // Ensure the new part has all the same stuff\n+        AmmoStorage ammoStorage = ammoBin.getNewPart();\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // Ensure the new part has all the same stuff\n+        AmmoStorage ammoStorage = ammoBin.getNewEquipment();\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        boolean isOneShot = false;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // Grab the missing part via IAcquisitionWork\n+        IAcquisitionWork acquisitionPart = ammoBin.getAcquisitionWork();\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        AmmoStorage ammoStorage = (AmmoStorage) acquisitionPart;\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+\n+        isOneShot = true;\n+        ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // Check that we buy a ton, even if the bin is one shot\n+        acquisitionPart = ammoBin.getAcquisitionWork();\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        ammoStorage = (AmmoStorage) acquisitionPart;\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        boolean isOneShot = false;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, isOneShot, false, mockCampaign);\n+\n+        // Ensure the missing part has all the same stuff\n+        MissingAmmoBin missingBin = ammoBin.getMissingPart();\n+        assertEquals(ammoBin.getType(), missingBin.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), missingBin.getEquipmentNum());\n+        assertEquals(ammoBin.getFullShots(), missingBin.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), missingBin.getCampaign());\n+        assertEquals(ammoBin.getName(), missingBin.getName());\n+        assertEquals(ammoBin.isOneShot(), missingBin.isOneShot());\n+\n+        isOneShot = true;\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, isOneShot, false, mockCampaign);\n+\n+        // Ensure the missing part has all the same stuff\n+        missingBin = ammoBin.getMissingPart();\n+        assertEquals(ammoBin.getType(), missingBin.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), missingBin.getEquipmentNum());\n+        assertEquals(ammoBin.getFullShots(), missingBin.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), missingBin.getCampaign());\n+        assertEquals(ammoBin.getName(), missingBin.getName());\n+        assertEquals(ammoBin.isOneShot(), missingBin.isOneShot());\n+    }\n+\n+    @Test\n+    public void setShotsNeeded() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an Ammo Bin with some ammo ...\n+        int shotsNeeded = 1;\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        when(mockMounted.getBaseShotsLeft()).thenReturn(0);\n+        doAnswer(invocation -> {\n+            // Update the ammo type returned by mounted\n+            AmmoType newAmmoType = invocation.getArgument(0);\n+            when(mockMounted.getType()).thenReturn(newAmmoType);\n+            return null;\n+        }).when(mockMounted).changeAmmoType(any());\n+        doAnswer(invocation -> {\n+            // Update the shots left when we're updated\n+            int shotsLeft = invocation.getArgument(0);\n+            when(mockMounted.getBaseShotsLeft()).thenReturn(shotsLeft);\n+            return null;\n+        }).when(mockMounted).setShotsLeft(anyInt());\n+\n+        // Ensure the ammo bin starts with the shots we asked for.\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // Set the number of shots needed ...\n+        ammoBin.setShotsNeeded(ammoType.getShots());\n+\n+        // ... and ensure we get the correct count back.\n+        assertEquals(ammoType.getShots(), ammoBin.getShotsNeeded());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // Ensure we never need negative shots.\n+        ammoBin.setShotsNeeded(-1);\n+        assertEquals(0, ammoBin.getShotsNeeded());\n+        assertFalse(ammoBin.needsFixing());\n+    }\n+\n+    @Test\n+    public void getFullShotsUsesAmmoTypeShotsIfNoEntityOrMounted() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an ammo bin without a unit (?) or entity or valid mount ...\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // ... and ensure it reports the shots from the ammo type\n+        assertEquals(ammoType.getShots(), ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsOneShotAmmoReturnsOneShot() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create a One Shot ammo bin ...\n+        boolean isOneShot = true;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // ... and ensure it only reports a single shot\n+        assertEquals(1, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsUsesOriginalShotsFromMounted() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an ammo bin with a given ammo type ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        int originalShots = 32;\n+        when(mockMounted.getOriginalShots()).thenReturn(originalShots);\n+\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        ammoBin.setUnit(mockUnit);\n+\n+        // ... and ensure it reports the shots from the mounted and not the ammo type\n+        assertEquals(originalShots, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsForProtomechsReducedInHalfForNonStandardMunitions() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // Create an ammobin with a non-standard munition type ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a Protomech unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Protomech mockEntity = mock(Protomech.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        int originalShots = 32;\n+        when(mockMounted.getOriginalShots()).thenReturn(originalShots);\n+\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        ammoBin.setUnit(mockUnit);\n+\n+        // ... and ensure it reports the shots from the ammo type\n+        assertEquals(originalShots / 2, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getBaseTimeSalvagingTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // Not an omnipodded ammo bin ...\n+        boolean isOmniPodded = false;\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, isOmniPodded, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        when(unit.isSalvage()).thenReturn(true);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of a normal ammo bin is 120 minutes\n+        assertEquals(120, ammoBin.getBaseTime());\n+\n+        // An omnipodded ammo bin ...\n+        isOmniPodded = true;\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, isOmniPodded, mockCampaign);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of an omni ammo bin is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void getBaseTimeRepairTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // An ammo bin whose ammo type matches the mount ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a normal ammo bin is 15 minutes if the ammo types match\n+        assertEquals(15, ammoBin.getBaseTime());\n+\n+        AmmoType otherAmmoType = getAmmoType(\"ISSRM6 Ammo\");\n+\n+        // An ammo bin whose ammo type does NOT match the mount ...\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+        when(mounted.getType()).thenReturn(otherAmmoType);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a bin with different ammo types is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void ammoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, isSRM2InfernoAmmo.getShots() - 1, false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void oneShotAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, 0, true, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.isOneShot(), deserialized.isOneShot());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void fullAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, 0, false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void emptyAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, isSRM2InfernoAmmo.getShots(), false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void changeMunitionTest() {\n+        AmmoType isSRM2Ammo = getAmmoType(\"ISSRM2 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        int equipmentNum = 19;\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2Ammo, equipmentNum, 0, false, false, mockCampaign);\n+\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(isSRM2Ammo);\n+        when(mockMounted.getBaseShotsLeft()).thenReturn(isSRM2Ammo.getShots());\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        doAnswer(invocation -> {\n+            // Update the ammo type returned by mounted\n+            AmmoType newAmmoType = invocation.getArgument(0);\n+            when(mockMounted.getType()).thenReturn(newAmmoType);\n+            return null;\n+        }).when(mockMounted).changeAmmoType(any());\n+        doAnswer(invocation -> {\n+            // Update the shots left when we're updated\n+            int shotsLeft = invocation.getArgument(0);\n+            when(mockMounted.getBaseShotsLeft()).thenReturn(shotsLeft);\n+            return null;\n+        }).when(mockMounted).setShotsLeft(anyInt());\n+        ammoBin.setUnit(mockUnit);\n+\n+        // Before we do anything there should be nothing to fix on a full bin.\n+        assertFalse(ammoBin.needsFixing());\n+\n+        // Pick a different munition type\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        ammoBin.changeMunition(isSRM2InfernoAmmo);\n+\n+        assertEquals(isSRM2InfernoAmmo, ammoBin.getType());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // TODO: determine if this should be uncommented\n+        // assertEquals(isSRM2InfernoAmmo.getShots(), ammoBin.getShotsNeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 604}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg3MDczNw==", "bodyText": "The expected behavior was a bit up in the air when I wrote that.", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541870737", "createdAt": "2020-12-13T07:56:23Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/unittests/mekhq/campaign/parts/equipment/AmmoBinTest.java", "diffHunk": "@@ -20,13 +20,1433 @@\n package mekhq.campaign.parts.equipment;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+import static mekhq.campaign.parts.AmmoUtilities.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.Mounted;\n+import megamek.common.Protomech;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoBinTest {\n     @Test\n     public void deserializationCtorTest() {\n         AmmoBin ammoBin = new AmmoBin();\n         assertNotNull(ammoBin);\n     }\n+\n+    @Test\n+    public void ammoBinCtorTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        int shotsNeeded = ammoType.getShots();\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        assertEquals(ammoType, ammoBin.getType());\n+        assertEquals(equipmentNum, ammoBin.getEquipmentNum());\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+        assertEquals(ammoType.getShots(), ammoBin.getFullShots());\n+        assertEquals(mockCampaign, ammoBin.getCampaign());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        int shotsNeeded = ammoType.getShots() - 1;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        // Ensure the clone has all the same stuff\n+        AmmoBin clone = ammoBin.clone();\n+        assertEquals(ammoBin.getType(), clone.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), clone.getEquipmentNum());\n+        assertEquals(ammoBin.getShotsNeeded(), clone.getShotsNeeded());\n+        assertEquals(ammoBin.getFullShots(), clone.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), clone.getCampaign());\n+        assertEquals(ammoBin.getName(), clone.getName());\n+    }\n+\n+    @Test\n+    public void needsMaintenanceTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        // AmmoBins do not need maintenance, even when empty.\n+        assertFalse(ammoBin.needsMaintenance());\n+    }\n+\n+    @Test\n+    public void isPriceAdjustedForAmountTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertTrue(ammoBin.isPriceAdjustedForAmount());\n+    }\n+\n+    @Test\n+    public void massRepairOptionTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertEquals(Part.REPAIR_PART_TYPE.AMMO, ammoBin.getMassRepairOptionType());\n+    }\n+\n+    @Test\n+    public void isOmniPoddableTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertTrue(ammoBin.isOmniPoddable());\n+    }\n+\n+    @Test\n+    public void getTechAdvancementTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, ammoType.getShots(), false, false, mockCampaign);\n+\n+        assertEquals(ammoType.getTechAdvancement(), ammoBin.getTechAdvancement());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // Ensure the new part has all the same stuff\n+        AmmoStorage ammoStorage = ammoBin.getNewPart();\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // Ensure the new part has all the same stuff\n+        AmmoStorage ammoStorage = ammoBin.getNewEquipment();\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        boolean isOneShot = false;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // Grab the missing part via IAcquisitionWork\n+        IAcquisitionWork acquisitionPart = ammoBin.getAcquisitionWork();\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        AmmoStorage ammoStorage = (AmmoStorage) acquisitionPart;\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+\n+        isOneShot = true;\n+        ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // Check that we buy a ton, even if the bin is one shot\n+        acquisitionPart = ammoBin.getAcquisitionWork();\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        ammoStorage = (AmmoStorage) acquisitionPart;\n+        assertEquals(ammoBin.getType(), ammoStorage.getType());\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(ammoBin.getCampaign(), ammoStorage.getCampaign());\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        int equipmentNum = 18;\n+        boolean isOneShot = false;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, isOneShot, false, mockCampaign);\n+\n+        // Ensure the missing part has all the same stuff\n+        MissingAmmoBin missingBin = ammoBin.getMissingPart();\n+        assertEquals(ammoBin.getType(), missingBin.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), missingBin.getEquipmentNum());\n+        assertEquals(ammoBin.getFullShots(), missingBin.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), missingBin.getCampaign());\n+        assertEquals(ammoBin.getName(), missingBin.getName());\n+        assertEquals(ammoBin.isOneShot(), missingBin.isOneShot());\n+\n+        isOneShot = true;\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, isOneShot, false, mockCampaign);\n+\n+        // Ensure the missing part has all the same stuff\n+        missingBin = ammoBin.getMissingPart();\n+        assertEquals(ammoBin.getType(), missingBin.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), missingBin.getEquipmentNum());\n+        assertEquals(ammoBin.getFullShots(), missingBin.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), missingBin.getCampaign());\n+        assertEquals(ammoBin.getName(), missingBin.getName());\n+        assertEquals(ammoBin.isOneShot(), missingBin.isOneShot());\n+    }\n+\n+    @Test\n+    public void setShotsNeeded() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an Ammo Bin with some ammo ...\n+        int shotsNeeded = 1;\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, shotsNeeded, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        when(mockMounted.getBaseShotsLeft()).thenReturn(0);\n+        doAnswer(invocation -> {\n+            // Update the ammo type returned by mounted\n+            AmmoType newAmmoType = invocation.getArgument(0);\n+            when(mockMounted.getType()).thenReturn(newAmmoType);\n+            return null;\n+        }).when(mockMounted).changeAmmoType(any());\n+        doAnswer(invocation -> {\n+            // Update the shots left when we're updated\n+            int shotsLeft = invocation.getArgument(0);\n+            when(mockMounted.getBaseShotsLeft()).thenReturn(shotsLeft);\n+            return null;\n+        }).when(mockMounted).setShotsLeft(anyInt());\n+\n+        // Ensure the ammo bin starts with the shots we asked for.\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // Set the number of shots needed ...\n+        ammoBin.setShotsNeeded(ammoType.getShots());\n+\n+        // ... and ensure we get the correct count back.\n+        assertEquals(ammoType.getShots(), ammoBin.getShotsNeeded());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // Ensure we never need negative shots.\n+        ammoBin.setShotsNeeded(-1);\n+        assertEquals(0, ammoBin.getShotsNeeded());\n+        assertFalse(ammoBin.needsFixing());\n+    }\n+\n+    @Test\n+    public void getFullShotsUsesAmmoTypeShotsIfNoEntityOrMounted() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an ammo bin without a unit (?) or entity or valid mount ...\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, false, false, mockCampaign);\n+\n+        // ... and ensure it reports the shots from the ammo type\n+        assertEquals(ammoType.getShots(), ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsOneShotAmmoReturnsOneShot() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create a One Shot ammo bin ...\n+        boolean isOneShot = true;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, -1, 0, isOneShot, false, mockCampaign);\n+\n+        // ... and ensure it only reports a single shot\n+        assertEquals(1, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsUsesOriginalShotsFromMounted() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISAC10 Ammo\");\n+\n+        // Create an ammo bin with a given ammo type ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        int originalShots = 32;\n+        when(mockMounted.getOriginalShots()).thenReturn(originalShots);\n+\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        ammoBin.setUnit(mockUnit);\n+\n+        // ... and ensure it reports the shots from the mounted and not the ammo type\n+        assertEquals(originalShots, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getFullShotsForProtomechsReducedInHalfForNonStandardMunitions() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // Create an ammobin with a non-standard munition type ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+\n+        // ... place the ammo bin on a Protomech unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Protomech mockEntity = mock(Protomech.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        int originalShots = 32;\n+        when(mockMounted.getOriginalShots()).thenReturn(originalShots);\n+\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        ammoBin.setUnit(mockUnit);\n+\n+        // ... and ensure it reports the shots from the ammo type\n+        assertEquals(originalShots / 2, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getBaseTimeSalvagingTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // Not an omnipodded ammo bin ...\n+        boolean isOmniPodded = false;\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, isOmniPodded, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        when(unit.isSalvage()).thenReturn(true);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of a normal ammo bin is 120 minutes\n+        assertEquals(120, ammoBin.getBaseTime());\n+\n+        // An omnipodded ammo bin ...\n+        isOmniPodded = true;\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, isOmniPodded, mockCampaign);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of an omni ammo bin is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void getBaseTimeRepairTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+\n+        // An ammo bin whose ammo type matches the mount ...\n+        int equipmentNum = 42;\n+        AmmoBin ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a normal ammo bin is 15 minutes if the ammo types match\n+        assertEquals(15, ammoBin.getBaseTime());\n+\n+        AmmoType otherAmmoType = getAmmoType(\"ISSRM6 Ammo\");\n+\n+        // An ammo bin whose ammo type does NOT match the mount ...\n+        ammoBin = new AmmoBin(0, ammoType, equipmentNum, 0, false, false, mockCampaign);\n+        when(mounted.getType()).thenReturn(otherAmmoType);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a bin with different ammo types is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void ammoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, isSRM2InfernoAmmo.getShots() - 1, false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void oneShotAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, 0, true, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.isOneShot(), deserialized.isOneShot());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void fullAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, 0, false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void emptyAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2InfernoAmmo, 42, isSRM2InfernoAmmo.getShots(), false, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the AmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the AmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the AmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof AmmoBin);\n+\n+        AmmoBin deserialized = (AmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void changeMunitionTest() {\n+        AmmoType isSRM2Ammo = getAmmoType(\"ISSRM2 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        int equipmentNum = 19;\n+        AmmoBin ammoBin = new AmmoBin(0, isSRM2Ammo, equipmentNum, 0, false, false, mockCampaign);\n+\n+        Unit mockUnit = mock(Unit.class);\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockMounted.getType()).thenReturn(isSRM2Ammo);\n+        when(mockMounted.getBaseShotsLeft()).thenReturn(isSRM2Ammo.getShots());\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        doAnswer(invocation -> {\n+            // Update the ammo type returned by mounted\n+            AmmoType newAmmoType = invocation.getArgument(0);\n+            when(mockMounted.getType()).thenReturn(newAmmoType);\n+            return null;\n+        }).when(mockMounted).changeAmmoType(any());\n+        doAnswer(invocation -> {\n+            // Update the shots left when we're updated\n+            int shotsLeft = invocation.getArgument(0);\n+            when(mockMounted.getBaseShotsLeft()).thenReturn(shotsLeft);\n+            return null;\n+        }).when(mockMounted).setShotsLeft(anyInt());\n+        ammoBin.setUnit(mockUnit);\n+\n+        // Before we do anything there should be nothing to fix on a full bin.\n+        assertFalse(ammoBin.needsFixing());\n+\n+        // Pick a different munition type\n+        AmmoType isSRM2InfernoAmmo = getAmmoType(\"ISSRM2 Inferno Ammo\");\n+        ammoBin.changeMunition(isSRM2InfernoAmmo);\n+\n+        assertEquals(isSRM2InfernoAmmo, ammoBin.getType());\n+        assertTrue(ammoBin.needsFixing());\n+\n+        // TODO: determine if this should be uncommented\n+        // assertEquals(isSRM2InfernoAmmo.getShots(), ammoBin.getShotsNeeded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg1NzE2Mw=="}, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 604}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzY0MzAwOnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/equipment/InfantryAmmoBinTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNjozMDoxMVrOIEwZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNjozMDoxMVrOIEwZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg1ODEwMw==", "bodyText": "?", "url": "https://github.com/MegaMek/mekhq/pull/2229#discussion_r541858103", "createdAt": "2020-12-13T06:30:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/equipment/InfantryAmmoBinTest.java", "diffHunk": "@@ -20,13 +20,1450 @@\n package mekhq.campaign.parts.equipment;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static mekhq.campaign.parts.AmmoUtilities.*;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentTypeLookup;\n+import megamek.common.Infantry;\n+import megamek.common.Mounted;\n+import megamek.common.SupportTank;\n+import megamek.common.weapons.infantry.InfantryWeapon;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.parts.InfantryAmmoStorage;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.unit.Unit;\n \n public class InfantryAmmoBinTest {\n     @Test\n     public void deserializationCtorTest() {\n         InfantryAmmoBin ammoBin = new InfantryAmmoBin();\n         assertNotNull(ammoBin);\n     }\n+\n+    @Test\n+    public void ammoBinCtorTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        int equipmentNum = 18;\n+        int clips = 5;\n+        int shotsNeeded = weaponType.getShots() * clips;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, shotsNeeded, weaponType, clips, false, mockCampaign);\n+\n+        assertEquals(ammoType, ammoBin.getType());\n+        assertEquals(weaponType, ammoBin.getWeaponType());\n+        assertEquals(equipmentNum, ammoBin.getEquipmentNum());\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+        assertEquals(weaponType.getShots() * clips, ammoBin.getFullShots());\n+        assertEquals(mockCampaign, ammoBin.getCampaign());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        int equipmentNum = 18;\n+        int clips = 5;\n+        int shotsNeeded = weaponType.getShots() * (clips - 1);\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, shotsNeeded, weaponType, clips, false, mockCampaign);\n+\n+        // Ensure the clone has all the same stuff\n+        InfantryAmmoBin clone = ammoBin.clone();\n+        assertEquals(ammoBin.getType(), clone.getType());\n+        assertEquals(ammoBin.getEquipmentNum(), clone.getEquipmentNum());\n+        assertEquals(ammoBin.getShotsNeeded(), clone.getShotsNeeded());\n+        assertEquals(ammoBin.getFullShots(), clone.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), clone.getCampaign());\n+        assertEquals(ammoBin.getName(), clone.getName());\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        int equipmentNum = 18;\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, 0, weaponType, clips, false, mockCampaign);\n+\n+        // Ensure the clone has all the same stuff\n+        MissingInfantryAmmoBin missingBin = ammoBin.getMissingPart();\n+        assertEquals(ammoBin.getType(), missingBin.getType());\n+        assertEquals(ammoBin.getWeaponType(), missingBin.getWeaponType());\n+        assertEquals(ammoBin.getClips(), missingBin.getClips());\n+        assertEquals(ammoBin.getEquipmentNum(), missingBin.getEquipmentNum());\n+        assertEquals(ammoBin.getFullShots(), missingBin.getFullShots());\n+        assertEquals(ammoBin.getCampaign(), missingBin.getCampaign());\n+        assertEquals(ammoBin.getName(), missingBin.getName());\n+    }\n+\n+    @Test\n+    public void setShotsNeeded() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        // Create an Ammo Bin with some ammo ...\n+        int clips = 5;\n+        int shotsNeeded = 1;\n+        int equipmentNum = 42;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, shotsNeeded, weaponType, clips, false, mockCampaign);\n+\n+        // ... place the ammo bin on a unit ...\n+        Unit mockUnit = mock(Unit.class);\n+        Infantry mockEntity = mock(Infantry.class);\n+        when(mockUnit.getEntity()).thenReturn(mockEntity);\n+        Mounted mockMounted = mock(Mounted.class);\n+        when(mockEntity.getEquipment(eq(equipmentNum))).thenReturn(mockMounted);\n+        when(mockMounted.getType()).thenReturn(ammoType);\n+        when(mockMounted.getBaseShotsLeft()).thenReturn(0);\n+        doAnswer(invocation -> {\n+            // Update the ammo type returned by mounted\n+            AmmoType newAmmoType = invocation.getArgument(0);\n+            when(mockMounted.getType()).thenReturn(newAmmoType);\n+            return null;\n+        }).when(mockMounted).changeAmmoType(any());\n+        doAnswer(invocation -> {\n+            // Update the shots left when we're updated\n+            int shotsLeft = invocation.getArgument(0);\n+            when(mockMounted.getBaseShotsLeft()).thenReturn(shotsLeft);\n+            return null;\n+        }).when(mockMounted).setShotsLeft(anyInt());\n+        ammoBin.setUnit(mockUnit);\n+\n+        // Ensure the ammo bin starts with the shots we asked for.\n+        assertEquals(shotsNeeded, ammoBin.getShotsNeeded());\n+\n+        // Set the number of shots needed ...\n+        ammoBin.setShotsNeeded(weaponType.getShots() * clips);\n+\n+        // ... and ensure we get the correct count back.\n+        assertEquals(weaponType.getShots() * clips, ammoBin.getShotsNeeded());\n+\n+        // Ensure we allow negative shots (used by changeCapacity).\n+        ammoBin.setShotsNeeded(-1);\n+        assertEquals(-1, ammoBin.getShotsNeeded());\n+    }\n+\n+    @Test\n+    public void getFullShotsUsesWeaponTypeShots() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        // Create an ammo bin without a unit (?) or entity or valid mount ...\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, -1, 0, weaponType, clips, false, mockCampaign);\n+\n+        // ... and ensure it reports the shots from the ammo type\n+        assertEquals(weaponType.getShots() * clips, ammoBin.getFullShots());\n+    }\n+\n+    @Test\n+    public void getBaseTimeSalvagingTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        // Not an omnipodded ammo bin ...\n+        boolean isOmniPodded = false;\n+        int equipmentNum = 42;\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, 0, weaponType, clips,  isOmniPodded, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        when(unit.isSalvage()).thenReturn(true);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of a normal ammo bin is 120 minutes\n+        assertEquals(120, ammoBin.getBaseTime());\n+\n+        // An omnipodded ammo bin ...\n+        isOmniPodded = true;\n+        ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, 0, weaponType, clips, isOmniPodded, mockCampaign);\n+        when(mounted.isOmniPodMounted()).thenReturn(isOmniPodded);\n+        ammoBin.setUnit(unit);\n+\n+        // Salvage of an omni ammo bin is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void getBaseTimeRepairTest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+\n+        // An ammo bin whose ammo type matches the mount ...\n+        int equipmentNum = 42;\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, 0, weaponType, clips, false, mockCampaign);\n+        Unit unit = mock(Unit.class);\n+        Entity entity = mock(Entity.class);\n+        when(unit.getEntity()).thenReturn(entity);\n+        Mounted mounted = mock(Mounted.class);\n+        when(mounted.getType()).thenReturn(ammoType);\n+        when(entity.getEquipment(eq(equipmentNum))).thenReturn(mounted);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a normal ammo bin is 15 minutes if the ammo types match\n+        assertEquals(15, ammoBin.getBaseTime());\n+\n+        AmmoType otherAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+\n+        // An ammo bin whose ammo type does NOT match the mount ...\n+        ammoBin = new InfantryAmmoBin(0, ammoType, equipmentNum, 0, weaponType, clips, false, mockCampaign);\n+        when(mounted.getType()).thenReturn(otherAmmoType);\n+        ammoBin.setUnit(unit);\n+\n+        // Repair of a bin with different ammo types is 30 minutes\n+        assertEquals(30, ammoBin.getBaseTime());\n+    }\n+\n+    @Test\n+    public void ammoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType infernoAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+        Campaign mockCampaign = mock(Campaign.class);\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, infernoAmmoType, 42, weaponType.getShots() - (clips - 1), weaponType, clips, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the InfantryAmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the InfantryAmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the InfantryAmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof InfantryAmmoBin);\n+\n+        InfantryAmmoBin deserialized = (InfantryAmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void oneShotAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType infernoAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+        Campaign mockCampaign = mock(Campaign.class);\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, infernoAmmoType, 42, 0, weaponType, clips, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the InfantryAmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the InfantryAmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the InfantryAmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof InfantryAmmoBin);\n+\n+        InfantryAmmoBin deserialized = (InfantryAmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.isOneShot(), deserialized.isOneShot());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void fullAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType infernoAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+        Campaign mockCampaign = mock(Campaign.class);\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, infernoAmmoType, 42, 0, weaponType, clips, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the InfantryAmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the InfantryAmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the InfantryAmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof InfantryAmmoBin);\n+\n+        InfantryAmmoBin deserialized = (InfantryAmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void emptyAmmoBinWriteToXmlTest() throws ParserConfigurationException, SAXException, IOException {\n+        AmmoType infernoAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+        Campaign mockCampaign = mock(Campaign.class);\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, infernoAmmoType, 42, infernoAmmoType.getShots(), weaponType, clips, false, mockCampaign);\n+        ammoBin.setId(25);\n+\n+        // Write the InfantryAmmoBin XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        ammoBin.writeToXml(pw, 0);\n+\n+        // Get the InfantryAmmoBin XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element partElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"part\", partElt.getNodeName());\n+\n+        // Deserialize the InfantryAmmoBin\n+        Part deserializedPart = Part.generateInstanceFromXML(partElt, new Version(\"1.0.0\"));\n+        assertNotNull(deserializedPart);\n+        assertTrue(deserializedPart instanceof InfantryAmmoBin);\n+\n+        InfantryAmmoBin deserialized = (InfantryAmmoBin) deserializedPart;\n+\n+        // Check that we deserialized the part correctly.\n+        assertEquals(ammoBin.getId(), deserialized.getId());\n+        assertEquals(ammoBin.getEquipmentNum(), deserialized.getEquipmentNum());\n+        assertEquals(ammoBin.getType(), deserialized.getType());\n+        assertEquals(ammoBin.getShotsNeeded(), deserialized.getShotsNeeded());\n+        assertEquals(ammoBin.getName(), deserialized.getName());\n+    }\n+\n+    @Test\n+    public void changeMunitionTest() {\n+        AmmoType ammoType = getAmmoType(EquipmentTypeLookup.INFANTRY_AMMO);\n+        InfantryWeapon weaponType = getInfantryWeapon(EquipmentTypeLookup.INFANTRY_ASSAULT_RIFLE);\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        int clips = 5;\n+        InfantryAmmoBin ammoBin = new InfantryAmmoBin(0, ammoType, -1, 0, weaponType, clips, false, mockCampaign);\n+\n+        // Pick a different munition type\n+        AmmoType infernoAmmoType = getAmmoType(EquipmentTypeLookup.INFANTRY_INFERNO_AMMO);\n+        ammoBin.changeMunition(infernoAmmoType);\n+\n+        assertEquals(infernoAmmoType, ammoBin.getType());\n+\n+        // TODO: determine if this should be uncommented\n+        // assertEquals(infernoAmmoType.getShots(), ammoBin.getShotsNeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7effa841ecdcfe26655ec6e3a7e696434895cc"}, "originalPosition": 424}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2183, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}