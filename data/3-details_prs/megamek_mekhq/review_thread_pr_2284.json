{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MDQwMzgx", "number": 2284, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDowN1rOFjykZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowNDozMlrOFjyskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDcyOTk4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDowN1rOIzjGDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjoxOTowMlrOIzj4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyMzI3OA==", "bodyText": "Random commented out code", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590923278", "createdAt": "2021-03-10T02:00:07Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkzNjEwNQ==", "bodyText": "This is purposefully left there so that one can easily tell the RGB colour code of the default value.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590936105", "createdAt": "2021-03-10T02:19:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyMzI3OA=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDczMTM5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDoyN1rOIzjGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDoyN1rOIzjGyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyMzQ2Nw==", "bodyText": "Random commented out code", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590923467", "createdAt": "2021-03-10T02:00:27Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_BACKGROUND, 0xFF9999FF));\n+    }\n+\n+    public void setMothballingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedBackground() {\n+        // new Color(204, 204, 255)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDczMjQ2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDozN1rOIzjHXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDozN1rOIzjHXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyMzYxMw==", "bodyText": "cleanup", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590923613", "createdAt": "2021-03-10T02:00:37Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_BACKGROUND, 0xFF9999FF));\n+    }\n+\n+    public void setMothballingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedBackground() {\n+        // new Color(204, 204, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_BACKGROUND, 0xFFCCCCFF));\n+    }\n+\n+    public void setMothballedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNotRepairableForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableBackground() {\n+        // new Color(190, 150, 55)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDczNDAwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDo1MlrOIzjIHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMDo1MlrOIzjIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyMzgwNw==", "bodyText": "cleanup", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590923807", "createdAt": "2021-03-10T02:00:52Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_BACKGROUND, 0xFF9999FF));\n+    }\n+\n+    public void setMothballingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedBackground() {\n+        // new Color(204, 204, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_BACKGROUND, 0xFFCCCCFF));\n+    }\n+\n+    public void setMothballedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNotRepairableForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableBackground() {\n+        // new Color(190, 150, 55)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NOT_REPAIRABLE_BACKGROUND, 0xFFBE9637));\n+    }\n+\n+    public void setNotRepairableBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NOT_REPAIRABLE_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNonFunctionalForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NON_FUNCTIONAL_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNonFunctionalForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NON_FUNCTIONAL_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNonFunctionalBackground() {\n+        // new Color(205, 92, 92)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDczNTk4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMToxOFrOIzjJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowMToxOFrOIzjJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNDA2NQ==", "bodyText": "cleanup", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590924065", "createdAt": "2021-03-10T02:01:18Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setDeployedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getDeployedBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.DEPLOYED_BACKGROUND, Color.LIGHT_GRAY.getRGB()));\n+    }\n+\n+    public void setDeployedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.DEPLOYED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, Color.RED.getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getBelowContractMinimumBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, UIManager.getColor(\"Table.background\").getRGB()));\n+    }\n+\n+    public void setBelowContractMinimumBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.BELOW_CONTRACT_MINIMUM_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setInTransitForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getInTransitBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.IN_TRANSIT_BACKGROUND, Color.MAGENTA.getRGB()));\n+    }\n+\n+    public void setInTransitBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.IN_TRANSIT_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setRefittingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getRefittingBackground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.REFITTING_BACKGROUND, Color.CYAN.getRGB()));\n+    }\n+\n+    public void setRefittingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.REFITTING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballingForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballingBackground() {\n+        // new Color(153, 153, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLING_BACKGROUND, 0xFF9999FF));\n+    }\n+\n+    public void setMothballingBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLING_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setMothballedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getMothballedBackground() {\n+        // new Color(204, 204, 255)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.MOTHBALLED_BACKGROUND, 0xFFCCCCFF));\n+    }\n+\n+    public void setMothballedBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.MOTHBALLED_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNotRepairableForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NOT_REPAIRABLE_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNotRepairableBackground() {\n+        // new Color(190, 150, 55)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NOT_REPAIRABLE_BACKGROUND, 0xFFBE9637));\n+    }\n+\n+    public void setNotRepairableBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NOT_REPAIRABLE_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNonFunctionalForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NON_FUNCTIONAL_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNonFunctionalForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NON_FUNCTIONAL_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNonFunctionalBackground() {\n+        // new Color(205, 92, 92)\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NON_FUNCTIONAL_BACKGROUND, 0xFFCD5C5C));\n+    }\n+\n+    public void setNonFunctionalBackground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NON_FUNCTIONAL_BACKGROUND, value.getRGB());\n+    }\n+\n+    public Color getNeedsPartsFixedForeground() {\n+        return new Color(userPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(MekHqConstants.NEEDS_PARTS_FIXED_FOREGROUND, Color.BLACK.getRGB()));\n+    }\n+\n+    public void setNeedsPartsFixedForeground(Color value) {\n+        userPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(MekHqConstants.NEEDS_PARTS_FIXED_FOREGROUND, value.getRGB());\n+    }\n+\n+    public Color getNeedsPartsFixedBackground() {\n+        // new Color(238, 238, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMDc1MDkwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/MekHQOptions.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMjowNDozMlrOIzjRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwNDoyMTo1MFrOIzozhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ==", "bodyText": "This seems like it could be done with a lot less code using a \"getColor(enum areaBeingColored, boolean Foreground/Background)\" call to reduce it from fifty thousand methods to two, and have the underlying mechanism be a hashMap.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590926149", "createdAt": "2021-03-10T02:04:32Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk0MzUyMw==", "bodyText": "First, there are 60 methods, not 50k... extremely hyperbole.\nSecond, it would be extremely inefficient to convert from a String saved HashMap each time they are accessed. I could do an extremely large switch statement that would get larger as I start fixing further colour accessibility issues in MekHQ, but... I'd rather read a bunch of simple getters/setters.\nThe benefits of this implementation are in its persistence. However, the backend stores String, boolean, double, float, int, and long. Thus, it may require more methods and code in MekHQ Options, but the user benefit is worth one a longer file.\nIf we were using a regular write to file XML implementation instead of the Preferences implementation, that would be exactly how this would have been implemented. However, that is not how this system works nor the benefits of it.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590943523", "createdAt": "2021-03-10T02:29:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk1MzMzNw==", "bodyText": "Looking into it further, I'll buy the argument that changes to the \"back end\" aren't necessary, since it appears to already be organized that way more or less. But it seems to me that you can still reduce the 60 methods to 2 by passing the constant (WHATEVER_COLOR_BACKGROUND/FOREGROUND) in as an argument. In terms of human readability, there's not much difference between getCrippledUnitBackgroundColor and getColor(CRIPPLED_UNIT_BACKGROUND), but the latter lets you avoid having to copy+paste new color settings as you add them.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590953337", "createdAt": "2021-03-10T02:44:16Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk2MzU4Ng==", "bodyText": "Each one has a unique foreground and background default and store value. These require unique keys and individually specified default return values. The only way I can see this can be done in your suggested way would be an extremely long switch statement. I could simplify the setters, but... honestly I'd find it more confusing going forwards.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590963586", "createdAt": "2021-03-10T02:58:36Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk3MjI3Mg==", "bodyText": "public void setColor(string colorTypeConstant, Color value) {\nuserPreferences.node(MekHqConstants.DISPLAY_NODE).putInt(colorTypeConstant, value.getRGB());\n}\npublic void getColor(string colorTypeConstant) {\nuserPreferences.node(MekHqConstants.DISPLAY_NODE).getInt(colorTypeConstant, defaultColors.get(colorTypeConstant));\n}\nprivate Map<String, Color> defaultColors = new HashMap<>();\n[for each thing where we need a default color]\ndefaultColors.put(colorTypeConstant, defaultColor)", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590972272", "createdAt": "2021-03-10T03:11:41Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk3MzA0Nw==", "bodyText": "Either that or put the actual defaults into the default config file.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590973047", "createdAt": "2021-03-10T03:12:58Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk4Njc4MA==", "bodyText": "First, that is not how the base system works or is designed to work. Please take a look at how the rest of the setup works.\nSecond, I'm not going to change how the base system is designed to decrease the number of getters/setters or move off this setup. This file was designed to prevent errors by using simple getters/setters to access the base store instead of anything more complicated, as otherwise you can end up with duplicated default values (which was a bug in the initial implementation).\nFinally, a default config file is exactly what this system is designed to prevent. All default config is inline, but easily user settable... and once set holds between implementations. That is a far better and more modern approach than having easily a half dozen separate default config files.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r590986780", "createdAt": "2021-03-10T03:34:36Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTAxNjgzOA==", "bodyText": "Further, that is also an illegal HshMap. Preferences and thus the defaults only handle primitives values. Colours store as integers.", "url": "https://github.com/MegaMek/mekhq/pull/2284#discussion_r591016838", "createdAt": "2021-03-10T04:21:50Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/MekHQOptions.java", "diffHunk": "@@ -100,6 +105,255 @@ public void setPersonnelFilterOnPrimaryRole(boolean value) {\n         userPreferences.node(MekHqConstants.DISPLAY_NODE).putBoolean(MekHqConstants.PERSONNEL_FILTER_ON_PRIMARY_ROLE, value);\n     }\n     //endregion Personnel Tab Display Options\n+    //endregion Expanded MekHQ Display Options\n+\n+    //region Colours\n+    public Color getDeployedForeground() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDkyNjE0OQ=="}, "originalCommit": {"oid": "c43f42d3c6292650c4078916e514232bb5688cc3"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}