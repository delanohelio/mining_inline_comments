{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTU1OTU4", "number": 1544, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzowNzozN1rODmEPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMDo0NVrODmaXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQyMDEyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzowNzozN1rOFzS2sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToxMjo0M1rOF2W7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA==", "bodyText": "How is this \"elite first\"?", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389330610", "createdAt": "2020-03-08T03:07:37Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTMzMQ==", "bodyText": "It works in practice, but I can't for the life of me understand why either. I originally used the opposite sort, but it did not display properly.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331331", "createdAt": "2020-03-08T03:22:44Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MjAxMw==", "bodyText": "This doesn't sort elites first. The code which does is on line 1934:\n                // Return, swapping the value if we're looking to have Elites ordered first\n                return eliteFirst ? -retVal : retVal;\n\nI think the logic should be revised for this block, as it stands it doesn't make much sense (even if it produces the desired results).", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389872013", "createdAt": "2020-03-09T18:12:57Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxOTI4MA==", "bodyText": "I've added comments which should make it easier to understand.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389919280", "createdAt": "2020-03-09T19:42:49Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNTg5NQ==", "bodyText": "I guess I don't follow. If you don't want elites first, why wouldn't you still want the person with the most time left?", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r392535895", "createdAt": "2020-03-14T00:20:39Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MzAyMw==", "bodyText": "Yes, this is used for Mothballing, which you always want a person with the most time left sorted to the top while the best personnel are the worst skilled. Annoying logic, but it works and looks good in practice.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r392543023", "createdAt": "2020-03-14T01:12:43Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1887,14 +1898,22 @@ public Person findBestInRole(int role, String skill) {\n         }\n         // also need to loop through and collect engineers on self-crewed vessels\n         for (Unit u : getUnits()) {\n-            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && null != u.getEngineer()) {\n+            if (u.isSelfCrewed() && !(u.getEntity() instanceof Infantry) && (null != u.getEngineer())) {\n                 techs.add(u.getEngineer());\n             }\n         }\n \n         // Return the tech collection sorted worst to best\n         // Reverse the sort if we've been asked for best to worst\n         if (sorted) {\n+            // First order by the amount of time the person has remaining, with the highest amount\n+            // of time being at the top of the list\n+            if (eliteFirst) {\n+                techs.sort(Comparator.comparingInt(Person::getMinutesLeft));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMDYxMA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQyMzQ0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/utilities/StaticChecks.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzoxNToxOFrOFzS4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzozMjoxNFrOFzS7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTAwNQ==", "bodyText": "Why add these imports?", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331005", "createdAt": "2020-03-08T03:15:18Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/gui/utilities/StaticChecks.java", "diffHunk": "@@ -4,7 +4,9 @@\n import java.util.UUID;\n import java.util.Vector;\n \n+import megamek.common.BattleArmor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTQxNQ==", "bodyText": "Weird, the changes looked like they had been reverted when i first opened this PR. They were part of one stage of this branch, but I ended up reverting them", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331415", "createdAt": "2020-03-08T03:24:43Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/utilities/StaticChecks.java", "diffHunk": "@@ -4,7 +4,9 @@\n import java.util.UUID;\n import java.util.Vector;\n \n+import megamek.common.BattleArmor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTAwNQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTc1MA==", "bodyText": "Reverted", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331750", "createdAt": "2020-03-08T03:32:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/utilities/StaticChecks.java", "diffHunk": "@@ -4,7 +4,9 @@\n import java.util.UUID;\n import java.util.Vector;\n \n+import megamek.common.BattleArmor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTAwNQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQyNDUwOnYy", "diffSide": "LEFT", "path": "MekHQ/src/mekhq/gui/dialog/MassMothballDialog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzoxODowNlrOFzS4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMzo1MDoyMlrOFzS-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTEyOA==", "bodyText": "While you're in this file, there's a bug in this dialog that shows activation time cost to be the same as mothball time cost, where it should be 1/2 the time. Do you think you can track it down?", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331128", "createdAt": "2020-03-08T03:18:06Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/gui/dialog/MassMothballDialog.java", "diffHunk": "@@ -106,14 +102,16 @@ public MassMothballDialog(Frame parent, Unit[] units, Campaign campaign, boolean\n         gbc.weightx = 3;\n         JLabel instructionLabel = new JLabel();\n         instructionLabel.setBorder(new LineBorder(Color.BLUE));\n-        instructionLabel.setText(\"<html>Choose the techs to carry out mothball/reactivation operations on the displayed units. <br/>A * indicates that the tech is currently maintaining units.</html>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTk0OQ==", "bodyText": "I'll take a look, and I've actually got an idea of where it is.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389331949", "createdAt": "2020-03-08T03:35:56Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/MassMothballDialog.java", "diffHunk": "@@ -106,14 +102,16 @@ public MassMothballDialog(Frame parent, Unit[] units, Campaign campaign, boolean\n         gbc.weightx = 3;\n         JLabel instructionLabel = new JLabel();\n         instructionLabel.setBorder(new LineBorder(Color.BLUE));\n-        instructionLabel.setText(\"<html>Choose the techs to carry out mothball/reactivation operations on the displayed units. <br/>A * indicates that the tech is currently maintaining units.</html>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTEyOA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMjU3MA==", "bodyText": "Fixed, and found another bug that is somewhat related that I fixed at the same time.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389332570", "createdAt": "2020-03-08T03:50:22Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/MassMothballDialog.java", "diffHunk": "@@ -106,14 +102,16 @@ public MassMothballDialog(Frame parent, Unit[] units, Campaign campaign, boolean\n         gbc.weightx = 3;\n         JLabel instructionLabel = new JLabel();\n         instructionLabel.setBorder(new LineBorder(Color.BLUE));\n-        instructionLabel.setText(\"<html>Choose the techs to carry out mothball/reactivation operations on the displayed units. <br/>A * indicates that the tech is currently maintaining units.</html>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMTEyOA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAyMTYzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNDoyM1rOFzz8lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozMjo0OVrOFz2eVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mjc5MQ==", "bodyText": "A comment explaining the unnamed arguments would be nice. Hard to say what this does outside of an IDE (and even within you have to hover).", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389872791", "createdAt": "2020-03-09T18:14:23Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -856,7 +857,7 @@ public void refreshTaskList() {\n \n     public void refreshTechsList() {\n         int selected = techTable.getSelectedRow();\n-        ArrayList<Person> techs = getCampaign().getTechs(true, null, false, false);\n+        List<Person> techs = getCampaign().getTechs(true, null, true, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMzIwMg==", "bodyText": "Ah, within Idea it shows all the variable names inline if you use values like true, null, \"\", or false.\nI'll add a comment.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389913202", "createdAt": "2020-03-09T19:30:55Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -856,7 +857,7 @@ public void refreshTaskList() {\n \n     public void refreshTechsList() {\n         int selected = techTable.getSelectedRow();\n-        ArrayList<Person> techs = getCampaign().getTechs(true, null, false, false);\n+        List<Person> techs = getCampaign().getTechs(true, null, true, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mjc5MQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNDE5Nw==", "bodyText": "To show,", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389914197", "createdAt": "2020-03-09T19:32:49Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -856,7 +857,7 @@ public void refreshTaskList() {\n \n     public void refreshTechsList() {\n         int selected = techTable.getSelectedRow();\n-        ArrayList<Person> techs = getCampaign().getTechs(true, null, false, false);\n+        List<Person> techs = getCampaign().getTechs(true, null, true, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mjc5MQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAyNDg1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/WarehouseTab.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNToxMlrOFzz-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNToyNFrOFz2jlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MzI4NQ==", "bodyText": "A comment here as well would be nice. Also, if getTechs(true, null, true, false) is the new default, how about a descriptively named method on Campaign?", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389873285", "createdAt": "2020-03-09T18:15:12Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/WarehouseTab.java", "diffHunk": "@@ -670,8 +668,7 @@ protected void updateTechTarget() {\n     }\n \n     public void refreshTechsList() {\n-        ArrayList<Person> techs = getCampaign().getTechs(true, null, false, false);\n-        techsModel.setData(techs);\n+        techsModel.setData(getCampaign().getTechs(true, null, true, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTU0MQ==", "bodyText": "It isn't the default, just used in these two places. Added the comment though", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389915541", "createdAt": "2020-03-09T19:35:24Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/WarehouseTab.java", "diffHunk": "@@ -670,8 +668,7 @@ protected void updateTechTarget() {\n     }\n \n     public void refreshTechsList() {\n-        ArrayList<Person> techs = getCampaign().getTechs(true, null, false, false);\n-        techsModel.setData(techs);\n+        techsModel.setData(getCampaign().getTechs(true, null, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MzI4NQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAzMTM3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNjo1NlrOFz0CXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyMjoyOFrOFz2KHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NDI3MA==", "bodyText": "Could this be moved into a method? This massive if...elseif block is unruly as it stands.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389874270", "createdAt": "2020-03-09T18:16:56Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "diffHunk": "@@ -244,60 +311,43 @@ public void actionPerformed(ActionEvent action) {\n                 customsDir.mkdir();\n             }\n             for (Unit unit : units) {\n-                String fileName = unit.getEntity().getChassis() + \" \"\n-                        + unit.getEntity().getModel();\n-                try {\n-                    if (unit.getEntity() instanceof Mech) {\n-                        // if this file already exists then don't overwrite\n-                        // it or we will end up with a bunch of copies\n-                        String fileOutName = sCustomsDir + File.separator\n-                                + fileName + \".mtf\";\n-                        String fileNameCampaign = sCustomsDirCampaign\n-                                + File.separator + fileName + \".mtf\";\n-                        if ((new File(fileOutName)).exists()\n-                                || (new File(fileNameCampaign)).exists()) {\n-                            JOptionPane\n-                                    .showMessageDialog(\n-                                            null,\n-                                            \"A file already exists for this unit, cannot tag as custom. (Unit name and model)\",\n-                                            \"File Already Exists\",\n-                                            JOptionPane.ERROR_MESSAGE);\n-                            return;\n-                        }\n-                        FileOutputStream out = new FileOutputStream(\n-                                fileNameCampaign);\n-                        PrintStream p = new PrintStream(out);\n+                String fileName = unit.getEntity().getChassis() + \" \" + unit.getEntity().getModel();\n+                if (unit.getEntity() instanceof Mech) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 312}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwOTAyMQ==", "bodyText": "Done", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389909021", "createdAt": "2020-03-09T19:22:28Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "diffHunk": "@@ -244,60 +311,43 @@ public void actionPerformed(ActionEvent action) {\n                 customsDir.mkdir();\n             }\n             for (Unit unit : units) {\n-                String fileName = unit.getEntity().getChassis() + \" \"\n-                        + unit.getEntity().getModel();\n-                try {\n-                    if (unit.getEntity() instanceof Mech) {\n-                        // if this file already exists then don't overwrite\n-                        // it or we will end up with a bunch of copies\n-                        String fileOutName = sCustomsDir + File.separator\n-                                + fileName + \".mtf\";\n-                        String fileNameCampaign = sCustomsDirCampaign\n-                                + File.separator + fileName + \".mtf\";\n-                        if ((new File(fileOutName)).exists()\n-                                || (new File(fileNameCampaign)).exists()) {\n-                            JOptionPane\n-                                    .showMessageDialog(\n-                                            null,\n-                                            \"A file already exists for this unit, cannot tag as custom. (Unit name and model)\",\n-                                            \"File Already Exists\",\n-                                            JOptionPane.ERROR_MESSAGE);\n-                            return;\n-                        }\n-                        FileOutputStream out = new FileOutputStream(\n-                                fileNameCampaign);\n-                        PrintStream p = new PrintStream(out);\n+                String fileName = unit.getEntity().getChassis() + \" \" + unit.getEntity().getModel();\n+                if (unit.getEntity() instanceof Mech) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NDI3MA=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjA0MzY4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMDo0NVrOFz0KWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNToxN1rOFz18Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NjMxNQ==", "bodyText": "Should this be protected by oneSelected? It currently checks if the unit is deployed.", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389876315", "createdAt": "2020-03-09T18:20:45Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "diffHunk": "@@ -605,454 +629,508 @@ public void mouseReleased(MouseEvent e) {\n     }\n \n     private void maybeShowPopup(MouseEvent e) {\n-        JPopupMenu popup = new JPopupMenu();\n         if (e.isPopupTrigger()) {\n+            // Immediately return if there are no units selected\n             if (unitTable.getSelectedRowCount() == 0) {\n                 return;\n             }\n+\n+            //region Variable Declarations and Instantiations\n+            JPopupMenu popup = new JPopupMenu();\n+            JMenuItem menuItem;\n+            JMenu menu;\n+            JCheckBoxMenuItem cbMenuItem;\n+\n+            boolean isGM = gui.getCampaign().isGM();\n+\n             int[] rows = unitTable.getSelectedRows();\n-            int row = unitTable.getSelectedRow();\n             boolean oneSelected = unitTable.getSelectedRowCount() == 1;\n-            Unit unit = unitModel.getUnit(unitTable\n-                    .convertRowIndexToModel(row));\n             Unit[] units = new Unit[rows.length];\n             for (int i = 0; i < rows.length; i++) {\n-                units[i] = unitModel.getUnit(unitTable\n-                        .convertRowIndexToModel(rows[i]));\n+                units[i] = unitModel.getUnit(unitTable.convertRowIndexToModel(rows[i]));\n             }\n-            JMenuItem menuItem = null;\n-            JMenu menu = null;\n-            JCheckBoxMenuItem cbMenuItem = null;\n-            // **lets fill the pop up menu**//\n-            if (oneSelected && !unit.isPresent()) {\n+            Unit unit = units[0];\n+\n+            boolean nonePresent = true; // different menu if there is at least one present unit\n+            for (Unit u : units) {\n+                if (u.isPresent()) {\n+                    nonePresent = false;\n+                    break;\n+                }\n+            }\n+            //endregion Variable Declarations and Instantiations\n+\n+            if (nonePresent) {\n                 menuItem = new JMenuItem(\"Cancel This Delivery\");\n-                menuItem.setActionCommand(\"CANCEL_ORDER\");\n+                menuItem.setActionCommand(COMMAND_CANCEL_ORDER);\n                 menuItem.addActionListener(this);\n                 popup.add(menuItem);\n-                // GM mode\n-                menu = new JMenu(\"GM Mode\");\n-                menuItem = new JMenuItem(\"Deliver Part Now\");\n-                menuItem.setActionCommand(\"ARRIVE\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(gui.getCampaign().isGM());\n-                menu.add(menuItem);\n-                popup.addSeparator();\n-                popup.add(menu);\n-                popup.show(e.getComponent(), e.getX(), e.getY());\n-                return;\n-            }\n-            // change the location\n-            menu = new JMenu(\"Change site\");\n-            int i;\n-            for (i = 0; i < Unit.SITE_N; i++) {\n-                cbMenuItem = new JCheckBoxMenuItem(Unit.getSiteName(i));\n-                if (StaticChecks.areAllSameSite(units) && unit.getSite() == i) {\n-                    cbMenuItem.setSelected(true);\n-                } else {\n-                    cbMenuItem.setActionCommand(\"CHANGE_SITE:\" + i);\n-                    cbMenuItem.addActionListener(this);\n-                }\n-                menu.add(cbMenuItem);\n-            }\n-            menu.setEnabled(unit.isAvailable());\n-            popup.add(menu);\n-\n-            // swap ammo\n-            if (oneSelected) {\n-                if (unit.getEntity().usesWeaponBays()) {\n-                    menuItem = new JMenuItem(\"Swap ammo...\");\n-                    menuItem.setActionCommand(\"LC_SWAP_AMMO\");\n+                if (isGM) {\n+                    menu = new JMenu(\"GM Mode\");\n+                    menuItem = new JMenuItem(\"Unit Arrives Immediately\");\n+                    menuItem.setActionCommand(COMMAND_ARRIVE);\n                     menuItem.addActionListener(this);\n-                    popup.add(menuItem);\n-                } else {\n-                    menu = new JMenu(\"Swap ammo\");\n-                    JMenu ammoMenu = null;\n-                    for (AmmoBin ammo : unit.getWorkingAmmoBins()) {\n-                        ammoMenu = new JMenu(ammo.getType().getDesc());\n-                        AmmoType curType = (AmmoType) ammo.getType();\n-                        for (AmmoType atype : Utilities.getMunitionsFor(unit\n-                                .getEntity(), curType, gui.getCampaign()\n-                                .getCampaignOptions().getTechLevel())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(atype.getDesc());\n-                            if (atype == curType) {\n-                                cbMenuItem.setSelected(true);\n-                            } else {\n-                                cbMenuItem.setActionCommand(\"SWAP_AMMO:\"\n-                                        + ammo.getId() + \":\"\n-                                        + atype.getInternalName());\n-                                cbMenuItem.addActionListener(this);\n-                            }\n-                            ammoMenu.add(cbMenuItem);\n+                    menu.add(menuItem);\n+                    popup.addSeparator();\n+                    popup.add(menu);\n+                }\n+            } else {\n+                //region Determine if to Display\n+                // this is used to determine whether or not to show parts of the GUI, especially for\n+                // bulk selections\n+                boolean oneMothballed = false;\n+                boolean oneMothballing = false;\n+                boolean oneActive = false;\n+                boolean oneDeployed = false;\n+                boolean oneAvailableUnitBelowMaxCrew = false;\n+                boolean oneNotPresent = false;\n+                boolean oneHasIndividualCamo = false;\n+                boolean oneHasCrew = false;\n+                boolean allUnitsAreRepairable = true;\n+                boolean areAllConventionalInfantry = true;\n+                boolean noConventionalInfantry = true;\n+                boolean areAllRepairFlagged = true;\n+                boolean areAllSalvageFlagged = true;\n+                boolean allRequireSameTechType = true;\n+                String skill = units[0].determineUnitTechSkillType();\n+                int maintenanceTime = 0;\n+                for (Unit u : units) {\n+                    if (u.isMothballed()) {\n+                        oneMothballed = true;\n+                    } else if (u.isMothballing()) {\n+                        oneMothballing = true;\n+                    } else {\n+                        oneActive = true;\n+                    }\n+\n+                    if ((u.getCrew().size() < u.getFullCrewSize()) && u.isAvailable()) {\n+                        oneAvailableUnitBelowMaxCrew = true;\n+                    }\n+\n+                    if (u.isDeployed()) {\n+                        oneDeployed = true;\n+                    }\n+\n+                    if (!u.isPresent()) {\n+                        oneNotPresent = true;\n+                    }\n+\n+                    if (u.isEntityCamo()) {\n+                        oneHasIndividualCamo = true;\n+                    }\n+\n+                    if (u.getCrew().size() > 0) {\n+                        oneHasCrew = true;\n+                    }\n+\n+                    if (!u.isRepairable()) {\n+                        allUnitsAreRepairable = false;\n+                    }\n+\n+                    if (u.isSalvage()) {\n+                        areAllRepairFlagged = false;\n+                    } else {\n+                        areAllSalvageFlagged = false;\n+                    }\n+\n+                    if (u.getEntity().isConventionalInfantry()) {\n+                        noConventionalInfantry = false;\n+                    } else {\n+                        areAllConventionalInfantry = false;\n+                    }\n+\n+                    if (!StringUtil.isNullOrEmpty(skill)) {\n+                        if (!skill.equals(u.determineUnitTechSkillType())) {\n+                            allRequireSameTechType = false;\n+                            skill = \"\"; //little performance saving hack\n+                            continue;\n                         }\n-                        if (ammoMenu.getItemCount() > 20) {\n-                            MenuScroller.setScrollerFor(ammoMenu, 20);\n+                        maintenanceTime += u.getMaintenanceTime();\n+                        if (maintenanceTime > Person.PRIMARY_ROLE_SUPPORT_TIME) {\n+                            skill = \"\"; //little performance saving hack\n                         }\n-                        menu.add(ammoMenu);\n                     }\n-                    menu.setEnabled(unit.isAvailable());\n-                    if (menu.getItemCount() > 20) {\n-                        MenuScroller.setScrollerFor(menu, 20);\n+                }\n+                //endregion Determine if to Display\n+\n+                // change the location\n+                menu = new JMenu(\"Change site\");\n+                boolean allSameSite = StaticChecks.areAllSameSite(units);\n+                for (int i = 0; i < Unit.SITE_N; i++) {\n+                    cbMenuItem = new JCheckBoxMenuItem(Unit.getSiteName(i));\n+                    if (allSameSite && unit.getSite() == i) {\n+                        cbMenuItem.setSelected(true);\n+                    } else {\n+                        cbMenuItem.setActionCommand(COMMAND_CHANGE_SITE + \":\" + i);\n+                        cbMenuItem.addActionListener(this);\n                     }\n-                    popup.add(menu);\n+                    menu.add(cbMenuItem);\n                 }\n-            }\n-            // Select bombs.\n-            if (oneSelected && (unit.getEntity().isBomber())) {\n-                menuItem = new JMenuItem(\"Select Bombs\");\n-                menuItem.setActionCommand(\"BOMBS\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            // Salvage / Repair\n-            if (oneSelected\n-                    && !(unit.getEntity() instanceof Infantry && !(unit\n-                            .getEntity() instanceof BattleArmor))) {\n-                menu = new JMenu(\"Repair Status\");\n                 menu.setEnabled(unit.isAvailable());\n-                cbMenuItem = new JCheckBoxMenuItem(\"Repair\");\n-                if (!unit.isSalvage()) {\n-                    cbMenuItem.setSelected(true);\n+                popup.add(menu);\n+\n+                // swap ammo\n+                if (oneSelected) {\n+                    if (unit.getEntity().usesWeaponBays()) {\n+                        menuItem = new JMenuItem(\"Swap ammo...\");\n+                        menuItem.setActionCommand(COMMAND_LC_SWAP_AMMO);\n+                        menuItem.addActionListener(this);\n+                        popup.add(menuItem);\n+                    } else {\n+                        menu = new JMenu(\"Swap ammo\");\n+                        JMenu ammoMenu;\n+                        for (AmmoBin ammo : unit.getWorkingAmmoBins()) {\n+                            ammoMenu = new JMenu(ammo.getType().getDesc());\n+                            AmmoType curType = (AmmoType) ammo.getType();\n+                            for (AmmoType atype : Utilities.getMunitionsFor(unit\n+                                    .getEntity(), curType, gui.getCampaign()\n+                                    .getCampaignOptions().getTechLevel())) {\n+                                cbMenuItem = new JCheckBoxMenuItem(atype.getDesc());\n+                                if (atype == curType) {\n+                                    cbMenuItem.setSelected(true);\n+                                } else {\n+                                    cbMenuItem.setActionCommand(COMMAND_SWAP_AMMO + \":\" + ammo.getId()\n+                                            + \":\" + atype.getInternalName());\n+                                    cbMenuItem.addActionListener(this);\n+                                }\n+                                ammoMenu.add(cbMenuItem);\n+                            }\n+                            if (ammoMenu.getItemCount() > 20) {\n+                                MenuScroller.setScrollerFor(ammoMenu, 20);\n+                            }\n+                            menu.add(ammoMenu);\n+                        }\n+                        menu.setEnabled(unit.isAvailable());\n+                        if (menu.getItemCount() > 20) {\n+                            MenuScroller.setScrollerFor(menu, 20);\n+                        }\n+                        popup.add(menu);\n+                    }\n                 }\n-                cbMenuItem.setActionCommand(\"REPAIR\");\n-                cbMenuItem.addActionListener(this);\n-                cbMenuItem.setEnabled(unit.isAvailable()\n-                        && unit.isRepairable());\n-                menu.add(cbMenuItem);\n-                cbMenuItem = new JCheckBoxMenuItem(\"Salvage\");\n-                if (unit.isSalvage()) {\n-                    cbMenuItem.setSelected(true);\n+\n+                // Select bombs\n+                if (oneSelected && unit.getEntity().isBomber()) {\n+                    menuItem = new JMenuItem(\"Select Bombs\");\n+                    menuItem.setActionCommand(COMMAND_BOMBS);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-                cbMenuItem.setActionCommand(\"SALVAGE\");\n-                cbMenuItem.addActionListener(this);\n-                cbMenuItem.setEnabled(unit.isAvailable());\n-                menu.add(cbMenuItem);\n-                popup.add(menu);\n-            }\n-            if (oneSelected\n-                    && !(unit.getEntity() instanceof Infantry && !(unit\n-                            .getEntity() instanceof BattleArmor))) {\n-                if (unit.isMothballing()) {\n-                    menuItem = new JMenuItem(\n-                            \"Cancel Mothballing/Activation\");\n-                    menuItem.setActionCommand(COMMAND_CANCEL_MOTHBALL);\n+\n+                // Salvage / Repair\n+                if (noConventionalInfantry) {\n+                    menu = new JMenu(\"Repair Status\");\n+                    cbMenuItem = new JCheckBoxMenuItem(\"Repair\");\n+                    cbMenuItem.setSelected(areAllRepairFlagged);\n+                    cbMenuItem.setActionCommand(COMMAND_REPAIR);\n+                    cbMenuItem.addActionListener(this);\n+                    cbMenuItem.setEnabled(allUnitsAreRepairable);\n+                    menu.add(cbMenuItem);\n+                    cbMenuItem = new JCheckBoxMenuItem(\"Salvage\");\n+                    cbMenuItem.setSelected(areAllSalvageFlagged);\n+                    cbMenuItem.setActionCommand(COMMAND_SALVAGE);\n+                    cbMenuItem.addActionListener(this);\n+                    menu.add(cbMenuItem);\n+                    popup.add(menu);\n+                }\n+\n+                if (oneActive) {\n+                    menuItem = new JMenuItem(oneSelected ? \"Mothball\" : \"Mass Mothball\");\n+                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else if (unit.isMothballed()) {\n-                    menuItem = new JMenuItem(\"Activate Unit\");\n+                }\n+\n+                if (oneMothballed) {\n+                    menuItem = new JMenuItem(oneSelected ? \"Activate\" : \"Mass Activate\");\n                     menuItem.setActionCommand(COMMAND_ACTIVATE);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else {\n-                    menuItem = new JMenuItem(\"Mothball Unit\");\n-                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n+                }\n+\n+                if (oneMothballing) {\n+                    menuItem = new JMenuItem(\"Cancel Mothballing/Activation\");\n+                    menuItem.setActionCommand(COMMAND_CANCEL_MOTHBALL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(unit.isAvailable()\n-                            && (!unit.isSelfCrewed() || null != unit\n-                                    .getEngineer()));\n                     popup.add(menuItem);\n                 }\n-            }\n \n-            if(unitTable.getSelectedRowCount() > 1) {\n-                boolean allMothballed = true;\n-                boolean allAvailable = true;\n+                if (allRequireSameTechType && !StringUtil.isNullOrEmpty(skill)) {\n+                    menu = new JMenu(\"Assign Tech\");\n+                    JMenu menuElite = new JMenu(SkillType.ELITE_NM);\n+                    JMenu menuVeteran = new JMenu(SkillType.VETERAN_NM);\n+                    JMenu menuRegular = new JMenu(SkillType.REGULAR_NM);\n+                    JMenu menuGreen = new JMenu(SkillType.GREEN_NM);\n+                    JMenu menuUltraGreen = new JMenu(SkillType.ULTRA_GREEN_NM);\n \n-                for(int x = 0; x < units.length; x++) {\n-                    // infantry, jumpships and warships cannot be mothballed\n-                    if(units[x].isSelfCrewed()) {\n-                        allMothballed = false;\n-                        allAvailable = false;\n-                        break;\n-                    }\n+                    int techsFound = 0;\n+                    for (Person tech : gui.getCampaign().getTechs()) {\n+                        if (tech.hasSkill(skill)\n+                                && (tech.getMaintenanceTimeUsing() + maintenanceTime)\n+                                        <= Person.PRIMARY_ROLE_SUPPORT_TIME) {\n+\n+                            String skillLvl = \"Unknown\";\n+                            if (null != tech.getSkillForWorkingOn(unit)) {\n+                                skillLvl = SkillType.getExperienceLevelName(\n+                                        tech.getSkillForWorkingOn(unit).getExperienceLevel());\n+                            }\n+\n+                            JMenu subMenu;\n+                            switch (skillLvl) {\n+                                case SkillType.ELITE_NM:\n+                                    subMenu = menuElite;\n+                                    break;\n+                                case SkillType.VETERAN_NM:\n+                                    subMenu = menuVeteran;\n+                                    break;\n+                                case SkillType.REGULAR_NM:\n+                                    subMenu = menuRegular;\n+                                    break;\n+                                case SkillType.GREEN_NM:\n+                                    subMenu = menuGreen;\n+                                    break;\n+                                case SkillType.ULTRA_GREEN_NM:\n+                                    subMenu = menuUltraGreen;\n+                                    break;\n+                                default:\n+                                    subMenu = null;\n+                                    break;\n+                            }\n+\n+                            if (subMenu != null) {\n+                                cbMenuItem = new JCheckBoxMenuItem(tech.getFullTitle()\n+                                        + \" (\" + tech.getMaintenanceTimeUsing() + \"m)\");\n+                                cbMenuItem.setActionCommand(COMMAND_ASSIGN_TECH + \":\" + tech.getId());\n+\n+                                if (tech.getId().equals(unit.getTechId())) {\n+                                    cbMenuItem.setSelected(true);\n+                                } else {\n+                                    cbMenuItem.addActionListener(this);\n+                                }\n \n-                    if(!units[x].isMothballed()) {\n-                        allMothballed = false;\n+                                subMenu.add(cbMenuItem);\n+                                if (cbMenuItem.isSelected()) {\n+                                    subMenu.setIcon(UIManager.getIcon(\"CheckBoxMenuItem.checkIcon\"));\n+                                }\n+                                techsFound++;\n+                            }\n+                        }\n                     }\n+                    if (techsFound > 0) {\n+                        addMenuIfNonEmpty(menu, menuElite, 20);\n+                        addMenuIfNonEmpty(menu, menuVeteran, 20);\n+                        addMenuIfNonEmpty(menu, menuRegular, 20);\n+                        addMenuIfNonEmpty(menu, menuGreen, 20);\n+                        addMenuIfNonEmpty(menu, menuUltraGreen, 20);\n \n-                    if(!units[x].isAvailable()) {\n-                        allAvailable = false;\n+                        popup.add(menu);\n                     }\n                 }\n \n-                if(allAvailable) {\n-                    menuItem = new JMenuItem(\"Mass Mothball\");\n-                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n+                if (oneSelected && unit.requiresMaintenance()) {\n+                    menuItem = new JMenuItem(\"Show Last Maintenance Report\");\n+                    menuItem.setActionCommand(COMMAND_MAINTENANCE_REPORT);\n                     menuItem.addActionListener(this);\n                     popup.add(menuItem);\n-                } else if(allMothballed) {\n-                    menuItem = new JMenuItem(\"Mass Activate\");\n-                    menuItem.setActionCommand(COMMAND_ACTIVATE);\n+                }\n+\n+                if (oneSelected && !unit.isMothballed()\n+                        && gui.getCampaign().getCampaignOptions().usePeacetimeCost()) {\n+                    menuItem = new JMenuItem(\"Show Monthly Supply Cost Report\");\n+                    menuItem.setActionCommand(COMMAND_SUPPLY_COST);\n                     menuItem.addActionListener(this);\n                     popup.add(menuItem);\n                 }\n-            }\n-\n-            if (oneSelected && unit.requiresMaintenance()\n-                    && !unit.isSelfCrewed() && unit.isAvailable()) {\n-                menu = new JMenu(\"Assign Tech\");\n-                JMenu menuElite = new JMenu(SkillType.ELITE_NM);\n-                JMenu menuVeteran = new JMenu(SkillType.VETERAN_NM);\n-                JMenu menuRegular = new JMenu(SkillType.REGULAR_NM);\n-                JMenu menuGreen = new JMenu(SkillType.GREEN_NM);\n-                JMenu menuUltraGreen = new JMenu(SkillType.ULTRA_GREEN_NM);\n-\n-                int techsFound = 0;\n-                for (Person tech : gui.getCampaign().getTechs()) {\n-                    if (tech.canTech(unit.getEntity())\n-                            && (tech.getMaintenanceTimeUsing()\n-                                    + unit.getMaintenanceTime()) <= 480) {\n-                        String skillLvl = \"Unknown\";\n-                        if (null != tech.getSkillForWorkingOn(unit)) {\n-                            skillLvl = SkillType.getExperienceLevelName(\n-                                tech.getSkillForWorkingOn(unit)\n-                                    .getExperienceLevel());\n-                        }\n \n-                        cbMenuItem = new JCheckBoxMenuItem(\n-                                tech.getFullTitle()\n-                                    + \" (\"\n-                                    + tech.getMaintenanceTimeUsing()\n-                                    + \"m)\");\n-                        cbMenuItem.setActionCommand(\"ASSIGN:\" + tech.getId());\n-                        cbMenuItem.setEnabled(true);\n-                        if (null != unit.getTechId()\n-                                && unit.getTechId().equals(tech.getId())) {\n-                            cbMenuItem.setSelected(true);\n-                        } else {\n-                            cbMenuItem.addActionListener(this);\n-                        }\n+                if (areAllConventionalInfantry) {\n+                    menuItem = new JMenuItem(\"Disband\");\n+                    menuItem.setActionCommand(COMMAND_DISBAND);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n+                }\n \n-                        JMenu subMenu = null;\n-                        switch (skillLvl) {\n-                        case SkillType.ELITE_NM:\n-                            subMenu = menuElite;\n-                            break;\n-                        case SkillType.VETERAN_NM:\n-                            subMenu = menuVeteran;\n-                            break;\n-                        case SkillType.REGULAR_NM:\n-                            subMenu = menuRegular;\n-                            break;\n-                        case SkillType.GREEN_NM:\n-                            subMenu = menuGreen;\n-                            break;\n-                        case SkillType.ULTRA_GREEN_NM:\n-                            subMenu = menuUltraGreen;\n-                            break;\n-                        }\n-                        if (subMenu != null) {\n-                            subMenu.add(cbMenuItem);\n-                            if (cbMenuItem.isSelected()) {\n-                                subMenu.setIcon(UIManager.getIcon(\"CheckBoxMenuItem.checkIcon\"));\n-                            }\n-                            techsFound++;\n+                // Customize\n+                if (oneSelected) {\n+                    menu = new JMenu(\"Customize\");\n+                    if (unit.getEntity().isOmni()) {\n+                        menuItem = new JMenuItem(\"Choose configuration...\");\n+                    } else {\n+                        menuItem = new JMenuItem(\"Choose Refit Kit...\");\n+                    }\n+                    menuItem.setActionCommand(COMMAND_REFIT_KIT);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(unit.isAvailable()\n+                            && (unit.getEntity() instanceof Mech\n+                            || unit.getEntity() instanceof Tank\n+                            || unit.getEntity() instanceof Aero\n+                            || (unit.getEntity() instanceof Infantry)));\n+                    //TODO : Should ProtoMech be included in the above?\n+                    menu.add(menuItem);\n+                    menuItem = new JMenuItem(\"Refurbish Unit\");\n+                    menuItem.setActionCommand(COMMAND_REFURBISH);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(unit.isAvailable()\n+                            && (unit.getEntity() instanceof Mech\n+                            || unit.getEntity() instanceof Tank\n+                            || unit.getEntity() instanceof Aero\n+                            || unit.getEntity() instanceof BattleArmor\n+                            || unit.getEntity() instanceof Protomech));\n+                    menu.add(menuItem);\n+                    if (gui.hasTab(GuiTabType.MEKLAB)) {\n+                        menuItem = new JMenuItem(\"Customize in Mek Lab...\");\n+                        menuItem.setActionCommand(COMMAND_CUSTOMIZE);\n+                        menuItem.addActionListener(this);\n+                        menuItem.setEnabled(unit.isAvailable()\n+                                && !(unit.getEntity() instanceof GunEmplacement));\n+                        menu.add(menuItem);\n+                    }\n+                    if (unit.isRefitting()) {\n+                        menuItem = new JMenuItem(\"Cancel Customization\");\n+                        menuItem.setActionCommand(COMMAND_CANCEL_CUSTOMIZE);\n+                        menuItem.addActionListener(this);\n+                        menu.add(menuItem);\n+                        if (isGM) {\n+                            menuItem = new JMenuItem(\"Complete Refit (GM)\");\n+                            menuItem.setActionCommand(COMMAND_REFIT_GM_COMPLETE);\n+                            menuItem.addActionListener(this);\n+                            menu.add(menuItem);\n                         }\n                     }\n+                    menu.setEnabled(unit.isAvailable(true) && unit.isRepairable());\n+                    popup.add(menu);\n                 }\n-                if (techsFound > 0) {\n-                    addMenuIfNonEmpty(menu, menuElite, 20);\n-                    addMenuIfNonEmpty(menu, menuVeteran, 20);\n-                    addMenuIfNonEmpty(menu, menuRegular, 20);\n-                    addMenuIfNonEmpty(menu, menuGreen, 20);\n-                    addMenuIfNonEmpty(menu, menuUltraGreen, 20);\n \n-                    popup.add(menu);\n+                // fill with personnel\n+                if (oneAvailableUnitBelowMaxCrew) {\n+                    menuItem = new JMenuItem(\"Hire full complement\");\n+                    menuItem.setActionCommand(COMMAND_HIRE_FULL);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-            }\n-            if (oneSelected && unit.requiresMaintenance()) {\n-                menuItem = new JMenuItem(\"Show Last Maintenance Report\");\n-                menuItem.setActionCommand(\"MAINTENANCE_REPORT\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected && !unit.isMothballed() && gui.getCampaign().getCampaignOptions().usePeacetimeCost()) {\n-                menuItem = new JMenuItem(\"Show Monthly Supply Cost Report\");\n-                menuItem.setActionCommand(\"SUPPLY_COST\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected && unit.getEntity() instanceof Infantry\n-                    && !(unit.getEntity() instanceof BattleArmor)) {\n-                menuItem = new JMenuItem(\"Disband\");\n-                menuItem.setActionCommand(\"DISBAND\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable());\n-                popup.add(menuItem);\n-            }\n-            // Customize\n-            if (oneSelected) {\n-                menu = new JMenu(\"Customize\");\n-                if (unit.getEntity().isOmni()) {\n-                    menuItem = new JMenuItem(\"Choose configuration...\");\n-                } else {\n-                    menuItem = new JMenuItem(\"Choose Refit Kit...\");\n+\n+                // Camo\n+                if (oneSelected && !unit.isEntityCamo()) {\n+                    menuItem = new JMenuItem(gui.getResourceMap()\n+                            .getString(\"customizeMenu.individualCamo.text\"));\n+                    menuItem.setActionCommand(COMMAND_INDI_CAMO);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-                menuItem.setActionCommand(\"REFIT_KIT\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable()\n-                        && (unit.getEntity() instanceof megamek.common.Mech\n-                                || unit.getEntity() instanceof megamek.common.Tank\n-                                || unit.getEntity() instanceof megamek.common.Aero || (unit\n-                                    .getEntity() instanceof Infantry)));\n-                menu.add(menuItem);\n-                menuItem = new JMenuItem(\"Refurbish Unit\");\n-                menuItem.setActionCommand(\"REFURBISH\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable()\n-                        && (unit.getEntity() instanceof megamek.common.Mech\n-                                || unit.getEntity() instanceof megamek.common.Tank\n-                                || unit.getEntity() instanceof megamek.common.Aero\n-                                || unit.getEntity() instanceof BattleArmor\n-                                || unit.getEntity() instanceof megamek.common.Protomech));\n-                menu.add(menuItem);\n-                if (gui.hasTab(GuiTabType.MEKLAB)) {\n-                    menuItem = new JMenuItem(\"Customize in Mek Lab...\");\n-                    menuItem.setActionCommand(\"CUSTOMIZE\");\n+                if (oneHasIndividualCamo) {\n+                    menuItem = new JMenuItem(gui.getResourceMap()\n+                            .getString(\"customizeMenu.removeIndividualCamo.text\"));\n+                    menuItem.setActionCommand(COMMAND_REMOVE_INDI_CAMO);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(unit.isAvailable()\n-                            && !(unit.getEntity() instanceof GunEmplacement));\n-                    menu.add(menuItem);\n+                    popup.add(menuItem);\n                 }\n-                if (unit.isRefitting()) {\n-                    menuItem = new JMenuItem(\"Cancel Customization\");\n-                    menuItem.setActionCommand(\"CANCEL_CUSTOMIZE\");\n+\n+                if (oneSelected && !gui.getCampaign().isCustom(unit)) {\n+                    menuItem = new JMenuItem(\"Tag as a custom unit\");\n+                    menuItem.setActionCommand(COMMAND_TAG_CUSTOM);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n-                    menu.add(menuItem);\n-                    menuItem = new JMenuItem(\"Complete Refit (GM)\");\n-                    menuItem.setActionCommand(\"REFIT_GM_COMPLETE\");\n+                    popup.add(menuItem);\n+                }\n+\n+                if (oneSelected && gui.getCampaign().getCampaignOptions().useQuirks()) {\n+                    menuItem = new JMenuItem(\"Edit Quirks\");\n+                    menuItem.setActionCommand(COMMAND_QUIRKS);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(gui.getCampaign().isGM() && unit.isRefitting());\n-                    menu.add(menuItem);\n+                    popup.add(menuItem);\n                 }\n-                menu.setEnabled(unit.isAvailable(true) && unit.isRepairable());\n-                popup.add(menu);\n-            }\n-            // fill with personnel\n-            if (unit.getCrew().size() < unit.getFullCrewSize()) {\n-                menuItem = new JMenuItem(\"Hire full complement\");\n-                menuItem.setActionCommand(\"HIRE_FULL\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable());\n-                popup.add(menuItem);\n-            }\n-            // Camo\n-            if (oneSelected) {\n-                if (!unit.isEntityCamo()) {\n-                    menuItem = new JMenuItem(\n-                            gui.getResourceMap()\n-                                    .getString(\"customizeMenu.individualCamo.text\"));\n-                    menuItem.setActionCommand(\"INDI_CAMO\");\n+\n+                if (oneSelected) {\n+                    menuItem = new JMenuItem(\"Edit Unit History...\");\n+                    menuItem.setActionCommand(COMMAND_CHANGE_HISTORY);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else {\n-                    menuItem = new JMenuItem(\n-                            gui.getResourceMap()\n-                                    .getString(\"customizeMenu.removeIndividualCamo.text\"));\n-                    menuItem.setActionCommand(\"REMOVE_INDI_CAMO\");\n+                }\n+\n+                // remove all personnel\n+                if (oneHasCrew) {\n+                    popup.addSeparator();\n+                    menuItem = new JMenuItem(\"Remove all personnel\");\n+                    menuItem.setActionCommand(COMMAND_REMOVE_ALL_PERSONNEL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n                 }\n-            }\n-            if (oneSelected && !gui.getCampaign().isCustom(unit)) {\n-                menuItem = new JMenuItem(\"Tag as a custom unit\");\n-                menuItem.setActionCommand(\"TAG_CUSTOM\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected\n-                    && gui.getCampaign().getCampaignOptions().useQuirks()) {\n-                menuItem = new JMenuItem(\"Edit Quirks\");\n-                menuItem.setActionCommand(\"QUIRKS\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(\"Edit Unit History...\");\n-                menuItem.setActionCommand(\"CHANGE_HISTORY\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n \n-            // remove all personnel\n-            popup.addSeparator();\n-            menuItem = new JMenuItem(\"Remove all personnel\");\n-            menuItem.setActionCommand(\"REMOVE_ALL_PERSONNEL\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(!(unit.isUnmanned() && (null == unit.getTech()))\n-                    && !unit.isDeployed());\n-            popup.add(menuItem);\n-\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(\"Name Unit\");\n-                menuItem.setActionCommand(\"FLUFF_NAME\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n-            // sell unit\n-            if (gui.getCampaign().getCampaignOptions().canSellUnits()) {\n-                popup.addSeparator();\n-                menuItem = new JMenuItem(\"Sell Unit\");\n-                menuItem.setActionCommand(\"SELL\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(!unit.isDeployed());\n-                popup.add(menuItem);\n-            }\n-            // GM mode\n-            menu = new JMenu(\"GM Mode\");\n-            menuItem = new JMenuItem(\"Remove Unit\");\n-            menuItem.setActionCommand(\"REMOVE\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM());\n-            menu.add(menuItem);\n-            menuItem = new JMenuItem(\"Strip Unit\");\n-            menuItem.setActionCommand(\"STRIP_UNIT\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM());\n-            menu.add(menuItem);\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(unit.isMothballed() ? \"Activate Unit\" : \"Mothball Unit\");\n-                menuItem.setActionCommand(unit.isMothballed() ? COMMAND_GM_ACTIVATE : COMMAND_GM_MOTHBALL);\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(gui.getCampaign().isGM());\n-                menu.add(menuItem);\n-            }\n-            menuItem = new JMenuItem(\"Undeploy Unit\");\n-            menuItem.setActionCommand(\"UNDEPLOY\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM() && unit.isDeployed());\n-            menu.add(menuItem);\n-            if (unit.getCrew().size() < unit.getFullCrewSize()) {\n-                menuItem = new JMenuItem(\"Add full complement\");\n-                menuItem.setActionCommand(\"HIRE_FULL_GM\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable() && gui.getCampaign().isGM());\n-                menu.add(menuItem);\n+                if (oneSelected) {\n+                    menuItem = new JMenuItem(\"Name Unit\");\n+                    menuItem.setActionCommand(COMMAND_FLUFF_NAME);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n+                }\n+\n+                // sell unit\n+                if (gui.getCampaign().getCampaignOptions().canSellUnits()) {\n+                    popup.addSeparator();\n+                    menuItem = new JMenuItem(\"Sell Unit\");\n+                    menuItem.setActionCommand(COMMAND_SELL);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(!unit.isDeployed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 1551}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTQxOA==", "bodyText": "This should be hidden behind a check that ensures that one is not deployed, instead of enabling/disabling if the first unit is deployed. I've fixed that", "url": "https://github.com/MegaMek/mekhq/pull/1544#discussion_r389905418", "createdAt": "2020-03-09T19:15:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/UnitTableMouseAdapter.java", "diffHunk": "@@ -605,454 +629,508 @@ public void mouseReleased(MouseEvent e) {\n     }\n \n     private void maybeShowPopup(MouseEvent e) {\n-        JPopupMenu popup = new JPopupMenu();\n         if (e.isPopupTrigger()) {\n+            // Immediately return if there are no units selected\n             if (unitTable.getSelectedRowCount() == 0) {\n                 return;\n             }\n+\n+            //region Variable Declarations and Instantiations\n+            JPopupMenu popup = new JPopupMenu();\n+            JMenuItem menuItem;\n+            JMenu menu;\n+            JCheckBoxMenuItem cbMenuItem;\n+\n+            boolean isGM = gui.getCampaign().isGM();\n+\n             int[] rows = unitTable.getSelectedRows();\n-            int row = unitTable.getSelectedRow();\n             boolean oneSelected = unitTable.getSelectedRowCount() == 1;\n-            Unit unit = unitModel.getUnit(unitTable\n-                    .convertRowIndexToModel(row));\n             Unit[] units = new Unit[rows.length];\n             for (int i = 0; i < rows.length; i++) {\n-                units[i] = unitModel.getUnit(unitTable\n-                        .convertRowIndexToModel(rows[i]));\n+                units[i] = unitModel.getUnit(unitTable.convertRowIndexToModel(rows[i]));\n             }\n-            JMenuItem menuItem = null;\n-            JMenu menu = null;\n-            JCheckBoxMenuItem cbMenuItem = null;\n-            // **lets fill the pop up menu**//\n-            if (oneSelected && !unit.isPresent()) {\n+            Unit unit = units[0];\n+\n+            boolean nonePresent = true; // different menu if there is at least one present unit\n+            for (Unit u : units) {\n+                if (u.isPresent()) {\n+                    nonePresent = false;\n+                    break;\n+                }\n+            }\n+            //endregion Variable Declarations and Instantiations\n+\n+            if (nonePresent) {\n                 menuItem = new JMenuItem(\"Cancel This Delivery\");\n-                menuItem.setActionCommand(\"CANCEL_ORDER\");\n+                menuItem.setActionCommand(COMMAND_CANCEL_ORDER);\n                 menuItem.addActionListener(this);\n                 popup.add(menuItem);\n-                // GM mode\n-                menu = new JMenu(\"GM Mode\");\n-                menuItem = new JMenuItem(\"Deliver Part Now\");\n-                menuItem.setActionCommand(\"ARRIVE\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(gui.getCampaign().isGM());\n-                menu.add(menuItem);\n-                popup.addSeparator();\n-                popup.add(menu);\n-                popup.show(e.getComponent(), e.getX(), e.getY());\n-                return;\n-            }\n-            // change the location\n-            menu = new JMenu(\"Change site\");\n-            int i;\n-            for (i = 0; i < Unit.SITE_N; i++) {\n-                cbMenuItem = new JCheckBoxMenuItem(Unit.getSiteName(i));\n-                if (StaticChecks.areAllSameSite(units) && unit.getSite() == i) {\n-                    cbMenuItem.setSelected(true);\n-                } else {\n-                    cbMenuItem.setActionCommand(\"CHANGE_SITE:\" + i);\n-                    cbMenuItem.addActionListener(this);\n-                }\n-                menu.add(cbMenuItem);\n-            }\n-            menu.setEnabled(unit.isAvailable());\n-            popup.add(menu);\n-\n-            // swap ammo\n-            if (oneSelected) {\n-                if (unit.getEntity().usesWeaponBays()) {\n-                    menuItem = new JMenuItem(\"Swap ammo...\");\n-                    menuItem.setActionCommand(\"LC_SWAP_AMMO\");\n+                if (isGM) {\n+                    menu = new JMenu(\"GM Mode\");\n+                    menuItem = new JMenuItem(\"Unit Arrives Immediately\");\n+                    menuItem.setActionCommand(COMMAND_ARRIVE);\n                     menuItem.addActionListener(this);\n-                    popup.add(menuItem);\n-                } else {\n-                    menu = new JMenu(\"Swap ammo\");\n-                    JMenu ammoMenu = null;\n-                    for (AmmoBin ammo : unit.getWorkingAmmoBins()) {\n-                        ammoMenu = new JMenu(ammo.getType().getDesc());\n-                        AmmoType curType = (AmmoType) ammo.getType();\n-                        for (AmmoType atype : Utilities.getMunitionsFor(unit\n-                                .getEntity(), curType, gui.getCampaign()\n-                                .getCampaignOptions().getTechLevel())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(atype.getDesc());\n-                            if (atype == curType) {\n-                                cbMenuItem.setSelected(true);\n-                            } else {\n-                                cbMenuItem.setActionCommand(\"SWAP_AMMO:\"\n-                                        + ammo.getId() + \":\"\n-                                        + atype.getInternalName());\n-                                cbMenuItem.addActionListener(this);\n-                            }\n-                            ammoMenu.add(cbMenuItem);\n+                    menu.add(menuItem);\n+                    popup.addSeparator();\n+                    popup.add(menu);\n+                }\n+            } else {\n+                //region Determine if to Display\n+                // this is used to determine whether or not to show parts of the GUI, especially for\n+                // bulk selections\n+                boolean oneMothballed = false;\n+                boolean oneMothballing = false;\n+                boolean oneActive = false;\n+                boolean oneDeployed = false;\n+                boolean oneAvailableUnitBelowMaxCrew = false;\n+                boolean oneNotPresent = false;\n+                boolean oneHasIndividualCamo = false;\n+                boolean oneHasCrew = false;\n+                boolean allUnitsAreRepairable = true;\n+                boolean areAllConventionalInfantry = true;\n+                boolean noConventionalInfantry = true;\n+                boolean areAllRepairFlagged = true;\n+                boolean areAllSalvageFlagged = true;\n+                boolean allRequireSameTechType = true;\n+                String skill = units[0].determineUnitTechSkillType();\n+                int maintenanceTime = 0;\n+                for (Unit u : units) {\n+                    if (u.isMothballed()) {\n+                        oneMothballed = true;\n+                    } else if (u.isMothballing()) {\n+                        oneMothballing = true;\n+                    } else {\n+                        oneActive = true;\n+                    }\n+\n+                    if ((u.getCrew().size() < u.getFullCrewSize()) && u.isAvailable()) {\n+                        oneAvailableUnitBelowMaxCrew = true;\n+                    }\n+\n+                    if (u.isDeployed()) {\n+                        oneDeployed = true;\n+                    }\n+\n+                    if (!u.isPresent()) {\n+                        oneNotPresent = true;\n+                    }\n+\n+                    if (u.isEntityCamo()) {\n+                        oneHasIndividualCamo = true;\n+                    }\n+\n+                    if (u.getCrew().size() > 0) {\n+                        oneHasCrew = true;\n+                    }\n+\n+                    if (!u.isRepairable()) {\n+                        allUnitsAreRepairable = false;\n+                    }\n+\n+                    if (u.isSalvage()) {\n+                        areAllRepairFlagged = false;\n+                    } else {\n+                        areAllSalvageFlagged = false;\n+                    }\n+\n+                    if (u.getEntity().isConventionalInfantry()) {\n+                        noConventionalInfantry = false;\n+                    } else {\n+                        areAllConventionalInfantry = false;\n+                    }\n+\n+                    if (!StringUtil.isNullOrEmpty(skill)) {\n+                        if (!skill.equals(u.determineUnitTechSkillType())) {\n+                            allRequireSameTechType = false;\n+                            skill = \"\"; //little performance saving hack\n+                            continue;\n                         }\n-                        if (ammoMenu.getItemCount() > 20) {\n-                            MenuScroller.setScrollerFor(ammoMenu, 20);\n+                        maintenanceTime += u.getMaintenanceTime();\n+                        if (maintenanceTime > Person.PRIMARY_ROLE_SUPPORT_TIME) {\n+                            skill = \"\"; //little performance saving hack\n                         }\n-                        menu.add(ammoMenu);\n                     }\n-                    menu.setEnabled(unit.isAvailable());\n-                    if (menu.getItemCount() > 20) {\n-                        MenuScroller.setScrollerFor(menu, 20);\n+                }\n+                //endregion Determine if to Display\n+\n+                // change the location\n+                menu = new JMenu(\"Change site\");\n+                boolean allSameSite = StaticChecks.areAllSameSite(units);\n+                for (int i = 0; i < Unit.SITE_N; i++) {\n+                    cbMenuItem = new JCheckBoxMenuItem(Unit.getSiteName(i));\n+                    if (allSameSite && unit.getSite() == i) {\n+                        cbMenuItem.setSelected(true);\n+                    } else {\n+                        cbMenuItem.setActionCommand(COMMAND_CHANGE_SITE + \":\" + i);\n+                        cbMenuItem.addActionListener(this);\n                     }\n-                    popup.add(menu);\n+                    menu.add(cbMenuItem);\n                 }\n-            }\n-            // Select bombs.\n-            if (oneSelected && (unit.getEntity().isBomber())) {\n-                menuItem = new JMenuItem(\"Select Bombs\");\n-                menuItem.setActionCommand(\"BOMBS\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            // Salvage / Repair\n-            if (oneSelected\n-                    && !(unit.getEntity() instanceof Infantry && !(unit\n-                            .getEntity() instanceof BattleArmor))) {\n-                menu = new JMenu(\"Repair Status\");\n                 menu.setEnabled(unit.isAvailable());\n-                cbMenuItem = new JCheckBoxMenuItem(\"Repair\");\n-                if (!unit.isSalvage()) {\n-                    cbMenuItem.setSelected(true);\n+                popup.add(menu);\n+\n+                // swap ammo\n+                if (oneSelected) {\n+                    if (unit.getEntity().usesWeaponBays()) {\n+                        menuItem = new JMenuItem(\"Swap ammo...\");\n+                        menuItem.setActionCommand(COMMAND_LC_SWAP_AMMO);\n+                        menuItem.addActionListener(this);\n+                        popup.add(menuItem);\n+                    } else {\n+                        menu = new JMenu(\"Swap ammo\");\n+                        JMenu ammoMenu;\n+                        for (AmmoBin ammo : unit.getWorkingAmmoBins()) {\n+                            ammoMenu = new JMenu(ammo.getType().getDesc());\n+                            AmmoType curType = (AmmoType) ammo.getType();\n+                            for (AmmoType atype : Utilities.getMunitionsFor(unit\n+                                    .getEntity(), curType, gui.getCampaign()\n+                                    .getCampaignOptions().getTechLevel())) {\n+                                cbMenuItem = new JCheckBoxMenuItem(atype.getDesc());\n+                                if (atype == curType) {\n+                                    cbMenuItem.setSelected(true);\n+                                } else {\n+                                    cbMenuItem.setActionCommand(COMMAND_SWAP_AMMO + \":\" + ammo.getId()\n+                                            + \":\" + atype.getInternalName());\n+                                    cbMenuItem.addActionListener(this);\n+                                }\n+                                ammoMenu.add(cbMenuItem);\n+                            }\n+                            if (ammoMenu.getItemCount() > 20) {\n+                                MenuScroller.setScrollerFor(ammoMenu, 20);\n+                            }\n+                            menu.add(ammoMenu);\n+                        }\n+                        menu.setEnabled(unit.isAvailable());\n+                        if (menu.getItemCount() > 20) {\n+                            MenuScroller.setScrollerFor(menu, 20);\n+                        }\n+                        popup.add(menu);\n+                    }\n                 }\n-                cbMenuItem.setActionCommand(\"REPAIR\");\n-                cbMenuItem.addActionListener(this);\n-                cbMenuItem.setEnabled(unit.isAvailable()\n-                        && unit.isRepairable());\n-                menu.add(cbMenuItem);\n-                cbMenuItem = new JCheckBoxMenuItem(\"Salvage\");\n-                if (unit.isSalvage()) {\n-                    cbMenuItem.setSelected(true);\n+\n+                // Select bombs\n+                if (oneSelected && unit.getEntity().isBomber()) {\n+                    menuItem = new JMenuItem(\"Select Bombs\");\n+                    menuItem.setActionCommand(COMMAND_BOMBS);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-                cbMenuItem.setActionCommand(\"SALVAGE\");\n-                cbMenuItem.addActionListener(this);\n-                cbMenuItem.setEnabled(unit.isAvailable());\n-                menu.add(cbMenuItem);\n-                popup.add(menu);\n-            }\n-            if (oneSelected\n-                    && !(unit.getEntity() instanceof Infantry && !(unit\n-                            .getEntity() instanceof BattleArmor))) {\n-                if (unit.isMothballing()) {\n-                    menuItem = new JMenuItem(\n-                            \"Cancel Mothballing/Activation\");\n-                    menuItem.setActionCommand(COMMAND_CANCEL_MOTHBALL);\n+\n+                // Salvage / Repair\n+                if (noConventionalInfantry) {\n+                    menu = new JMenu(\"Repair Status\");\n+                    cbMenuItem = new JCheckBoxMenuItem(\"Repair\");\n+                    cbMenuItem.setSelected(areAllRepairFlagged);\n+                    cbMenuItem.setActionCommand(COMMAND_REPAIR);\n+                    cbMenuItem.addActionListener(this);\n+                    cbMenuItem.setEnabled(allUnitsAreRepairable);\n+                    menu.add(cbMenuItem);\n+                    cbMenuItem = new JCheckBoxMenuItem(\"Salvage\");\n+                    cbMenuItem.setSelected(areAllSalvageFlagged);\n+                    cbMenuItem.setActionCommand(COMMAND_SALVAGE);\n+                    cbMenuItem.addActionListener(this);\n+                    menu.add(cbMenuItem);\n+                    popup.add(menu);\n+                }\n+\n+                if (oneActive) {\n+                    menuItem = new JMenuItem(oneSelected ? \"Mothball\" : \"Mass Mothball\");\n+                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else if (unit.isMothballed()) {\n-                    menuItem = new JMenuItem(\"Activate Unit\");\n+                }\n+\n+                if (oneMothballed) {\n+                    menuItem = new JMenuItem(oneSelected ? \"Activate\" : \"Mass Activate\");\n                     menuItem.setActionCommand(COMMAND_ACTIVATE);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else {\n-                    menuItem = new JMenuItem(\"Mothball Unit\");\n-                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n+                }\n+\n+                if (oneMothballing) {\n+                    menuItem = new JMenuItem(\"Cancel Mothballing/Activation\");\n+                    menuItem.setActionCommand(COMMAND_CANCEL_MOTHBALL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(unit.isAvailable()\n-                            && (!unit.isSelfCrewed() || null != unit\n-                                    .getEngineer()));\n                     popup.add(menuItem);\n                 }\n-            }\n \n-            if(unitTable.getSelectedRowCount() > 1) {\n-                boolean allMothballed = true;\n-                boolean allAvailable = true;\n+                if (allRequireSameTechType && !StringUtil.isNullOrEmpty(skill)) {\n+                    menu = new JMenu(\"Assign Tech\");\n+                    JMenu menuElite = new JMenu(SkillType.ELITE_NM);\n+                    JMenu menuVeteran = new JMenu(SkillType.VETERAN_NM);\n+                    JMenu menuRegular = new JMenu(SkillType.REGULAR_NM);\n+                    JMenu menuGreen = new JMenu(SkillType.GREEN_NM);\n+                    JMenu menuUltraGreen = new JMenu(SkillType.ULTRA_GREEN_NM);\n \n-                for(int x = 0; x < units.length; x++) {\n-                    // infantry, jumpships and warships cannot be mothballed\n-                    if(units[x].isSelfCrewed()) {\n-                        allMothballed = false;\n-                        allAvailable = false;\n-                        break;\n-                    }\n+                    int techsFound = 0;\n+                    for (Person tech : gui.getCampaign().getTechs()) {\n+                        if (tech.hasSkill(skill)\n+                                && (tech.getMaintenanceTimeUsing() + maintenanceTime)\n+                                        <= Person.PRIMARY_ROLE_SUPPORT_TIME) {\n+\n+                            String skillLvl = \"Unknown\";\n+                            if (null != tech.getSkillForWorkingOn(unit)) {\n+                                skillLvl = SkillType.getExperienceLevelName(\n+                                        tech.getSkillForWorkingOn(unit).getExperienceLevel());\n+                            }\n+\n+                            JMenu subMenu;\n+                            switch (skillLvl) {\n+                                case SkillType.ELITE_NM:\n+                                    subMenu = menuElite;\n+                                    break;\n+                                case SkillType.VETERAN_NM:\n+                                    subMenu = menuVeteran;\n+                                    break;\n+                                case SkillType.REGULAR_NM:\n+                                    subMenu = menuRegular;\n+                                    break;\n+                                case SkillType.GREEN_NM:\n+                                    subMenu = menuGreen;\n+                                    break;\n+                                case SkillType.ULTRA_GREEN_NM:\n+                                    subMenu = menuUltraGreen;\n+                                    break;\n+                                default:\n+                                    subMenu = null;\n+                                    break;\n+                            }\n+\n+                            if (subMenu != null) {\n+                                cbMenuItem = new JCheckBoxMenuItem(tech.getFullTitle()\n+                                        + \" (\" + tech.getMaintenanceTimeUsing() + \"m)\");\n+                                cbMenuItem.setActionCommand(COMMAND_ASSIGN_TECH + \":\" + tech.getId());\n+\n+                                if (tech.getId().equals(unit.getTechId())) {\n+                                    cbMenuItem.setSelected(true);\n+                                } else {\n+                                    cbMenuItem.addActionListener(this);\n+                                }\n \n-                    if(!units[x].isMothballed()) {\n-                        allMothballed = false;\n+                                subMenu.add(cbMenuItem);\n+                                if (cbMenuItem.isSelected()) {\n+                                    subMenu.setIcon(UIManager.getIcon(\"CheckBoxMenuItem.checkIcon\"));\n+                                }\n+                                techsFound++;\n+                            }\n+                        }\n                     }\n+                    if (techsFound > 0) {\n+                        addMenuIfNonEmpty(menu, menuElite, 20);\n+                        addMenuIfNonEmpty(menu, menuVeteran, 20);\n+                        addMenuIfNonEmpty(menu, menuRegular, 20);\n+                        addMenuIfNonEmpty(menu, menuGreen, 20);\n+                        addMenuIfNonEmpty(menu, menuUltraGreen, 20);\n \n-                    if(!units[x].isAvailable()) {\n-                        allAvailable = false;\n+                        popup.add(menu);\n                     }\n                 }\n \n-                if(allAvailable) {\n-                    menuItem = new JMenuItem(\"Mass Mothball\");\n-                    menuItem.setActionCommand(COMMAND_MOTHBALL);\n+                if (oneSelected && unit.requiresMaintenance()) {\n+                    menuItem = new JMenuItem(\"Show Last Maintenance Report\");\n+                    menuItem.setActionCommand(COMMAND_MAINTENANCE_REPORT);\n                     menuItem.addActionListener(this);\n                     popup.add(menuItem);\n-                } else if(allMothballed) {\n-                    menuItem = new JMenuItem(\"Mass Activate\");\n-                    menuItem.setActionCommand(COMMAND_ACTIVATE);\n+                }\n+\n+                if (oneSelected && !unit.isMothballed()\n+                        && gui.getCampaign().getCampaignOptions().usePeacetimeCost()) {\n+                    menuItem = new JMenuItem(\"Show Monthly Supply Cost Report\");\n+                    menuItem.setActionCommand(COMMAND_SUPPLY_COST);\n                     menuItem.addActionListener(this);\n                     popup.add(menuItem);\n                 }\n-            }\n-\n-            if (oneSelected && unit.requiresMaintenance()\n-                    && !unit.isSelfCrewed() && unit.isAvailable()) {\n-                menu = new JMenu(\"Assign Tech\");\n-                JMenu menuElite = new JMenu(SkillType.ELITE_NM);\n-                JMenu menuVeteran = new JMenu(SkillType.VETERAN_NM);\n-                JMenu menuRegular = new JMenu(SkillType.REGULAR_NM);\n-                JMenu menuGreen = new JMenu(SkillType.GREEN_NM);\n-                JMenu menuUltraGreen = new JMenu(SkillType.ULTRA_GREEN_NM);\n-\n-                int techsFound = 0;\n-                for (Person tech : gui.getCampaign().getTechs()) {\n-                    if (tech.canTech(unit.getEntity())\n-                            && (tech.getMaintenanceTimeUsing()\n-                                    + unit.getMaintenanceTime()) <= 480) {\n-                        String skillLvl = \"Unknown\";\n-                        if (null != tech.getSkillForWorkingOn(unit)) {\n-                            skillLvl = SkillType.getExperienceLevelName(\n-                                tech.getSkillForWorkingOn(unit)\n-                                    .getExperienceLevel());\n-                        }\n \n-                        cbMenuItem = new JCheckBoxMenuItem(\n-                                tech.getFullTitle()\n-                                    + \" (\"\n-                                    + tech.getMaintenanceTimeUsing()\n-                                    + \"m)\");\n-                        cbMenuItem.setActionCommand(\"ASSIGN:\" + tech.getId());\n-                        cbMenuItem.setEnabled(true);\n-                        if (null != unit.getTechId()\n-                                && unit.getTechId().equals(tech.getId())) {\n-                            cbMenuItem.setSelected(true);\n-                        } else {\n-                            cbMenuItem.addActionListener(this);\n-                        }\n+                if (areAllConventionalInfantry) {\n+                    menuItem = new JMenuItem(\"Disband\");\n+                    menuItem.setActionCommand(COMMAND_DISBAND);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n+                }\n \n-                        JMenu subMenu = null;\n-                        switch (skillLvl) {\n-                        case SkillType.ELITE_NM:\n-                            subMenu = menuElite;\n-                            break;\n-                        case SkillType.VETERAN_NM:\n-                            subMenu = menuVeteran;\n-                            break;\n-                        case SkillType.REGULAR_NM:\n-                            subMenu = menuRegular;\n-                            break;\n-                        case SkillType.GREEN_NM:\n-                            subMenu = menuGreen;\n-                            break;\n-                        case SkillType.ULTRA_GREEN_NM:\n-                            subMenu = menuUltraGreen;\n-                            break;\n-                        }\n-                        if (subMenu != null) {\n-                            subMenu.add(cbMenuItem);\n-                            if (cbMenuItem.isSelected()) {\n-                                subMenu.setIcon(UIManager.getIcon(\"CheckBoxMenuItem.checkIcon\"));\n-                            }\n-                            techsFound++;\n+                // Customize\n+                if (oneSelected) {\n+                    menu = new JMenu(\"Customize\");\n+                    if (unit.getEntity().isOmni()) {\n+                        menuItem = new JMenuItem(\"Choose configuration...\");\n+                    } else {\n+                        menuItem = new JMenuItem(\"Choose Refit Kit...\");\n+                    }\n+                    menuItem.setActionCommand(COMMAND_REFIT_KIT);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(unit.isAvailable()\n+                            && (unit.getEntity() instanceof Mech\n+                            || unit.getEntity() instanceof Tank\n+                            || unit.getEntity() instanceof Aero\n+                            || (unit.getEntity() instanceof Infantry)));\n+                    //TODO : Should ProtoMech be included in the above?\n+                    menu.add(menuItem);\n+                    menuItem = new JMenuItem(\"Refurbish Unit\");\n+                    menuItem.setActionCommand(COMMAND_REFURBISH);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(unit.isAvailable()\n+                            && (unit.getEntity() instanceof Mech\n+                            || unit.getEntity() instanceof Tank\n+                            || unit.getEntity() instanceof Aero\n+                            || unit.getEntity() instanceof BattleArmor\n+                            || unit.getEntity() instanceof Protomech));\n+                    menu.add(menuItem);\n+                    if (gui.hasTab(GuiTabType.MEKLAB)) {\n+                        menuItem = new JMenuItem(\"Customize in Mek Lab...\");\n+                        menuItem.setActionCommand(COMMAND_CUSTOMIZE);\n+                        menuItem.addActionListener(this);\n+                        menuItem.setEnabled(unit.isAvailable()\n+                                && !(unit.getEntity() instanceof GunEmplacement));\n+                        menu.add(menuItem);\n+                    }\n+                    if (unit.isRefitting()) {\n+                        menuItem = new JMenuItem(\"Cancel Customization\");\n+                        menuItem.setActionCommand(COMMAND_CANCEL_CUSTOMIZE);\n+                        menuItem.addActionListener(this);\n+                        menu.add(menuItem);\n+                        if (isGM) {\n+                            menuItem = new JMenuItem(\"Complete Refit (GM)\");\n+                            menuItem.setActionCommand(COMMAND_REFIT_GM_COMPLETE);\n+                            menuItem.addActionListener(this);\n+                            menu.add(menuItem);\n                         }\n                     }\n+                    menu.setEnabled(unit.isAvailable(true) && unit.isRepairable());\n+                    popup.add(menu);\n                 }\n-                if (techsFound > 0) {\n-                    addMenuIfNonEmpty(menu, menuElite, 20);\n-                    addMenuIfNonEmpty(menu, menuVeteran, 20);\n-                    addMenuIfNonEmpty(menu, menuRegular, 20);\n-                    addMenuIfNonEmpty(menu, menuGreen, 20);\n-                    addMenuIfNonEmpty(menu, menuUltraGreen, 20);\n \n-                    popup.add(menu);\n+                // fill with personnel\n+                if (oneAvailableUnitBelowMaxCrew) {\n+                    menuItem = new JMenuItem(\"Hire full complement\");\n+                    menuItem.setActionCommand(COMMAND_HIRE_FULL);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-            }\n-            if (oneSelected && unit.requiresMaintenance()) {\n-                menuItem = new JMenuItem(\"Show Last Maintenance Report\");\n-                menuItem.setActionCommand(\"MAINTENANCE_REPORT\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected && !unit.isMothballed() && gui.getCampaign().getCampaignOptions().usePeacetimeCost()) {\n-                menuItem = new JMenuItem(\"Show Monthly Supply Cost Report\");\n-                menuItem.setActionCommand(\"SUPPLY_COST\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected && unit.getEntity() instanceof Infantry\n-                    && !(unit.getEntity() instanceof BattleArmor)) {\n-                menuItem = new JMenuItem(\"Disband\");\n-                menuItem.setActionCommand(\"DISBAND\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable());\n-                popup.add(menuItem);\n-            }\n-            // Customize\n-            if (oneSelected) {\n-                menu = new JMenu(\"Customize\");\n-                if (unit.getEntity().isOmni()) {\n-                    menuItem = new JMenuItem(\"Choose configuration...\");\n-                } else {\n-                    menuItem = new JMenuItem(\"Choose Refit Kit...\");\n+\n+                // Camo\n+                if (oneSelected && !unit.isEntityCamo()) {\n+                    menuItem = new JMenuItem(gui.getResourceMap()\n+                            .getString(\"customizeMenu.individualCamo.text\"));\n+                    menuItem.setActionCommand(COMMAND_INDI_CAMO);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n                 }\n-                menuItem.setActionCommand(\"REFIT_KIT\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable()\n-                        && (unit.getEntity() instanceof megamek.common.Mech\n-                                || unit.getEntity() instanceof megamek.common.Tank\n-                                || unit.getEntity() instanceof megamek.common.Aero || (unit\n-                                    .getEntity() instanceof Infantry)));\n-                menu.add(menuItem);\n-                menuItem = new JMenuItem(\"Refurbish Unit\");\n-                menuItem.setActionCommand(\"REFURBISH\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable()\n-                        && (unit.getEntity() instanceof megamek.common.Mech\n-                                || unit.getEntity() instanceof megamek.common.Tank\n-                                || unit.getEntity() instanceof megamek.common.Aero\n-                                || unit.getEntity() instanceof BattleArmor\n-                                || unit.getEntity() instanceof megamek.common.Protomech));\n-                menu.add(menuItem);\n-                if (gui.hasTab(GuiTabType.MEKLAB)) {\n-                    menuItem = new JMenuItem(\"Customize in Mek Lab...\");\n-                    menuItem.setActionCommand(\"CUSTOMIZE\");\n+                if (oneHasIndividualCamo) {\n+                    menuItem = new JMenuItem(gui.getResourceMap()\n+                            .getString(\"customizeMenu.removeIndividualCamo.text\"));\n+                    menuItem.setActionCommand(COMMAND_REMOVE_INDI_CAMO);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(unit.isAvailable()\n-                            && !(unit.getEntity() instanceof GunEmplacement));\n-                    menu.add(menuItem);\n+                    popup.add(menuItem);\n                 }\n-                if (unit.isRefitting()) {\n-                    menuItem = new JMenuItem(\"Cancel Customization\");\n-                    menuItem.setActionCommand(\"CANCEL_CUSTOMIZE\");\n+\n+                if (oneSelected && !gui.getCampaign().isCustom(unit)) {\n+                    menuItem = new JMenuItem(\"Tag as a custom unit\");\n+                    menuItem.setActionCommand(COMMAND_TAG_CUSTOM);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n-                    menu.add(menuItem);\n-                    menuItem = new JMenuItem(\"Complete Refit (GM)\");\n-                    menuItem.setActionCommand(\"REFIT_GM_COMPLETE\");\n+                    popup.add(menuItem);\n+                }\n+\n+                if (oneSelected && gui.getCampaign().getCampaignOptions().useQuirks()) {\n+                    menuItem = new JMenuItem(\"Edit Quirks\");\n+                    menuItem.setActionCommand(COMMAND_QUIRKS);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(gui.getCampaign().isGM() && unit.isRefitting());\n-                    menu.add(menuItem);\n+                    popup.add(menuItem);\n                 }\n-                menu.setEnabled(unit.isAvailable(true) && unit.isRepairable());\n-                popup.add(menu);\n-            }\n-            // fill with personnel\n-            if (unit.getCrew().size() < unit.getFullCrewSize()) {\n-                menuItem = new JMenuItem(\"Hire full complement\");\n-                menuItem.setActionCommand(\"HIRE_FULL\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable());\n-                popup.add(menuItem);\n-            }\n-            // Camo\n-            if (oneSelected) {\n-                if (!unit.isEntityCamo()) {\n-                    menuItem = new JMenuItem(\n-                            gui.getResourceMap()\n-                                    .getString(\"customizeMenu.individualCamo.text\"));\n-                    menuItem.setActionCommand(\"INDI_CAMO\");\n+\n+                if (oneSelected) {\n+                    menuItem = new JMenuItem(\"Edit Unit History...\");\n+                    menuItem.setActionCommand(COMMAND_CHANGE_HISTORY);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n-                } else {\n-                    menuItem = new JMenuItem(\n-                            gui.getResourceMap()\n-                                    .getString(\"customizeMenu.removeIndividualCamo.text\"));\n-                    menuItem.setActionCommand(\"REMOVE_INDI_CAMO\");\n+                }\n+\n+                // remove all personnel\n+                if (oneHasCrew) {\n+                    popup.addSeparator();\n+                    menuItem = new JMenuItem(\"Remove all personnel\");\n+                    menuItem.setActionCommand(COMMAND_REMOVE_ALL_PERSONNEL);\n                     menuItem.addActionListener(this);\n-                    menuItem.setEnabled(true);\n                     popup.add(menuItem);\n                 }\n-            }\n-            if (oneSelected && !gui.getCampaign().isCustom(unit)) {\n-                menuItem = new JMenuItem(\"Tag as a custom unit\");\n-                menuItem.setActionCommand(\"TAG_CUSTOM\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected\n-                    && gui.getCampaign().getCampaignOptions().useQuirks()) {\n-                menuItem = new JMenuItem(\"Edit Quirks\");\n-                menuItem.setActionCommand(\"QUIRKS\");\n-                menuItem.addActionListener(this);\n-                popup.add(menuItem);\n-            }\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(\"Edit Unit History...\");\n-                menuItem.setActionCommand(\"CHANGE_HISTORY\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n \n-            // remove all personnel\n-            popup.addSeparator();\n-            menuItem = new JMenuItem(\"Remove all personnel\");\n-            menuItem.setActionCommand(\"REMOVE_ALL_PERSONNEL\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(!(unit.isUnmanned() && (null == unit.getTech()))\n-                    && !unit.isDeployed());\n-            popup.add(menuItem);\n-\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(\"Name Unit\");\n-                menuItem.setActionCommand(\"FLUFF_NAME\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(true);\n-                popup.add(menuItem);\n-            }\n-            // sell unit\n-            if (gui.getCampaign().getCampaignOptions().canSellUnits()) {\n-                popup.addSeparator();\n-                menuItem = new JMenuItem(\"Sell Unit\");\n-                menuItem.setActionCommand(\"SELL\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(!unit.isDeployed());\n-                popup.add(menuItem);\n-            }\n-            // GM mode\n-            menu = new JMenu(\"GM Mode\");\n-            menuItem = new JMenuItem(\"Remove Unit\");\n-            menuItem.setActionCommand(\"REMOVE\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM());\n-            menu.add(menuItem);\n-            menuItem = new JMenuItem(\"Strip Unit\");\n-            menuItem.setActionCommand(\"STRIP_UNIT\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM());\n-            menu.add(menuItem);\n-            if (oneSelected) {\n-                menuItem = new JMenuItem(unit.isMothballed() ? \"Activate Unit\" : \"Mothball Unit\");\n-                menuItem.setActionCommand(unit.isMothballed() ? COMMAND_GM_ACTIVATE : COMMAND_GM_MOTHBALL);\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(gui.getCampaign().isGM());\n-                menu.add(menuItem);\n-            }\n-            menuItem = new JMenuItem(\"Undeploy Unit\");\n-            menuItem.setActionCommand(\"UNDEPLOY\");\n-            menuItem.addActionListener(this);\n-            menuItem.setEnabled(gui.getCampaign().isGM() && unit.isDeployed());\n-            menu.add(menuItem);\n-            if (unit.getCrew().size() < unit.getFullCrewSize()) {\n-                menuItem = new JMenuItem(\"Add full complement\");\n-                menuItem.setActionCommand(\"HIRE_FULL_GM\");\n-                menuItem.addActionListener(this);\n-                menuItem.setEnabled(unit.isAvailable() && gui.getCampaign().isGM());\n-                menu.add(menuItem);\n+                if (oneSelected) {\n+                    menuItem = new JMenuItem(\"Name Unit\");\n+                    menuItem.setActionCommand(COMMAND_FLUFF_NAME);\n+                    menuItem.addActionListener(this);\n+                    popup.add(menuItem);\n+                }\n+\n+                // sell unit\n+                if (gui.getCampaign().getCampaignOptions().canSellUnits()) {\n+                    popup.addSeparator();\n+                    menuItem = new JMenuItem(\"Sell Unit\");\n+                    menuItem.setActionCommand(COMMAND_SELL);\n+                    menuItem.addActionListener(this);\n+                    menuItem.setEnabled(!unit.isDeployed());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NjMxNQ=="}, "originalCommit": {"oid": "11c1f4ae8ca9e06ce5eca3f10f3095e591a6bc0d"}, "originalPosition": 1551}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1951, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}