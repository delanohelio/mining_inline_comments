{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTQ1MTE5", "number": 1500, "title": "Reworking Scenario Generation to Properly Handle GM Generation and Multiple Missions", "bodyText": "This fixes a few minor bugs in scenario generation, specifically that scenarios generated using GM Generation will now be generated and displayed on the graph in the proper order, getting a base attack (attacker) mission will now clear any pre-existing scenarios (as that is supposed to be the only scenario for the week), and getting a base attack (attacker) scenario on mission A will no longer prevent generation for mission B.", "createdAt": "2020-02-20T19:56:42Z", "url": "https://github.com/MegaMek/mekhq/pull/1500", "merged": true, "mergeCommit": {"oid": "05c9999e3d517ad1807811d51c2175029f1a77b7"}, "closed": true, "closedAt": "2020-02-23T02:33:59Z", "author": {"login": "Windchild292"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFlsgMAH2gAyMzc3OTQ1MTE5OjE0ZDQ1MjdkZmRjOWFmMjQ0MzYxZTFiYjI0MmMwZWEzZjJiYWI2NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcG_kl-gFqTM2MzA2MTk0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14d4527dfdc9af244361e1bb242c0ea3f2bab655", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/14d4527dfdc9af244361e1bb242c0ea3f2bab655", "committedDate": "2020-02-18T17:50:48Z", "message": "Reworking scenario generation to properly handle multiple missions, date order for GM generation of scenarios, and properly generate for GM generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2016fe3b44cbd1a46515ff2bd896ffaba801c3f9", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/2016fe3b44cbd1a46515ff2bd896ffaba801c3f9", "committedDate": "2020-02-19T13:23:15Z", "message": "Fixing bugs in AtB Scenario Factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a58321c061bf6b28c015c43fb2a0e7dbfafc981", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/8a58321c061bf6b28c015c43fb2a0e7dbfafc981", "committedDate": "2020-02-20T17:50:14Z", "message": "Fixing multiple forces being generated for the same scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69f734fd5ef5f2acc7ef4ed373835e1e1be4fd47", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/69f734fd5ef5f2acc7ef4ed373835e1e1be4fd47", "committedDate": "2020-02-20T19:06:18Z", "message": "Bug fixing in AtBScenarioFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe54678a573b2be96fbd28ec907ad1bd2179f5f", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/afe54678a573b2be96fbd28ec907ad1bd2179f5f", "committedDate": "2020-02-20T19:06:59Z", "message": "Refactoring in AtBScenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7bd950d41c168e3b8e78b5827a60984aff71b3", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/4e7bd950d41c168e3b8e78b5827a60984aff71b3", "committedDate": "2020-02-20T19:37:25Z", "message": "Bugfixing scenario changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04032e12d90448868cabe95af442b5fe4e4edec0", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/04032e12d90448868cabe95af442b5fe4e4edec0", "committedDate": "2020-02-20T19:39:19Z", "message": "Reverting changes to testcode in Lance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21bbdf47aa4d2ab2816bed335752d45e80153e3", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/d21bbdf47aa4d2ab2816bed335752d45e80153e3", "committedDate": "2020-02-20T20:10:06Z", "message": "Fixing edge case where a lance assigned to another mission has a scenario generated for them"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODk4MjA4", "url": "https://github.com/MegaMek/mekhq/pull/1500#pullrequestreview-362898208", "createdAt": "2020-02-21T20:30:14Z", "commit": {"oid": "d21bbdf47aa4d2ab2816bed335752d45e80153e3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozMDoxNFrOFtDuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozMDo0NlrOFtDvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MTIxNw==", "bodyText": "This whitespace looks odd.", "url": "https://github.com/MegaMek/mekhq/pull/1500#discussion_r382791217", "createdAt": "2020-02-21T20:30:14Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/mission/atb/AtBScenarioFactory.java", "diffHunk": "@@ -104,166 +99,212 @@ public static AtBScenario createScenario(Campaign c, Lance lance, int type, bool\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tpublic static boolean registerScenario(IAtBScenario scenario) {\n+\tpublic static void registerScenario(IAtBScenario scenario) {\n \t    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n \n-\t\tif (!IAtBScenario.class.isAssignableFrom(scenario.getClass())) {\n-\t        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-\t                String.format(\"Unable to register an AtBScenario of class '%s' because is does not implement '%s'.\", //$NON-NLS-1$\n-\t                        scenario.getClass().getName(), IAtBScenario.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n \t\tif (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n             MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n                     String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n                             scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tint type = scenario.getScenarioType();\n-        List<Class<IAtBScenario>> list = scenarioMap.computeIfAbsent(type, k -> new ArrayList<>());\n-\n-        list.add((Class<IAtBScenario>) scenario.getClass());\n+\t\t} else {\n+            int type = scenario.getScenarioType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21bbdf47aa4d2ab2816bed335752d45e80153e3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MTQ4MQ==", "bodyText": "Whitespace is off in this file.", "url": "https://github.com/MegaMek/mekhq/pull/1500#discussion_r382791481", "createdAt": "2020-02-21T20:30:46Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/mission/atb/AtBScenarioFactory.java", "diffHunk": "@@ -104,166 +99,212 @@ public static AtBScenario createScenario(Campaign c, Lance lance, int type, bool\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tpublic static boolean registerScenario(IAtBScenario scenario) {\n+\tpublic static void registerScenario(IAtBScenario scenario) {\n \t    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n \n-\t\tif (!IAtBScenario.class.isAssignableFrom(scenario.getClass())) {\n-\t        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-\t                String.format(\"Unable to register an AtBScenario of class '%s' because is does not implement '%s'.\", //$NON-NLS-1$\n-\t                        scenario.getClass().getName(), IAtBScenario.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n \t\tif (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n             MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n                     String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n                             scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tint type = scenario.getScenarioType();\n-        List<Class<IAtBScenario>> list = scenarioMap.computeIfAbsent(type, k -> new ArrayList<>());\n-\n-        list.add((Class<IAtBScenario>) scenario.getClass());\n+\t\t} else {\n+            int type = scenario.getScenarioType();\n+            List<Class<IAtBScenario>> list = scenarioMap.computeIfAbsent(type, k -> new ArrayList<>());\n \n-\t\treturn true;\n+            list.add((Class<IAtBScenario>) scenario.getClass());\n+        }\n \t}\n \n-\t/* Iterate through the list of lances and make a battle roll for each,\n+\t/**\n+     * Iterate through the list of lances and make a battle roll for each,\n \t * then sort them by date before adding them to the campaign.\n \t * Contracts with enemy morale level of invincible have a base attack\n \t * (defender) battle each week. If there is a base attack (attacker)\n-\t * battle, that is the only one for the week on that contract.\n+\t * battle, that is the only one for the week on that mission.\n+     *\n+     * Note that this handles having multiple missions at the same time\n+     * @param c the campaign for which to generate scenarios\n \t */\n-\tpublic static void createScenariosForNewWeek(Campaign c, boolean allowLancesToBeDuplicated) {\n+\tpublic static void createScenariosForNewWeek(Campaign c) {\n \t\tHashtable<Integer, Lance> lances = c.getLances();\n \n-\t\tArrayList<AtBScenario> sList = new ArrayList<>();\n-\t\tAtBScenario baseAttack = null;\n-\t\tMap<Integer, Integer> assignedLances = new HashMap<>();\n-\n-\t\tif (!allowLancesToBeDuplicated) {\n-\t\t\tfor (Mission m : c.getMissions()) {\n-\t\t\t\tif (!m.isActive()) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tfor (Scenario s : m.getScenarios()) {\n-\t\t\t\t\tif (!s.isCurrent() || !AtBScenario.class.isAssignableFrom(s.getClass())) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tAtBScenario atbScenario = (AtBScenario) s;\n-\n-\t\t\t\t\tif (atbScenario.getLanceForceId() == AtBScenario.NO_LANCE) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tassignedLances.put(atbScenario.getLanceForceId(), atbScenario.getLanceForceId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (Lance l : lances.values()) {\n-\t\t\tif (assignedLances.containsKey(l.getForceId())) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif ((l.getContract(c) == null) || !l.getContract(c).isActive() || !l.isEligible(c) || c.getDate().before(l.getContract(c).getStartDate())) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (l.getRole() == Lance.ROLE_TRAINING) {\n-\t\t\t\tc.awardTrainingXP(l);\n-\t\t\t}\n-\n-\t\t\tif (l.getContract(c).getMoraleLevel() <= AtBContract.MORALE_VERYLOW) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tAtBScenario scenario = l.checkForBattle(c);\n-\t\t\tif (scenario != null) {\n-\t\t\t\tsList.add(scenario);\n-\t\t\t\tif ((scenario.getScenarioType() == AtBScenario.BASEATTACK) && scenario.isAttacker()) {\n-\t\t\t\t\tbaseAttack = scenario;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t/* If there is a base attack (attacker), all other battles on\n-\t\t * that contract are cleared.\n-\t\t */\n-\t\tif (baseAttack != null) {\n-\t\t\tArrayList<Scenario> sameContract = new ArrayList<>();\n-\t\t\tfor (AtBScenario s : sList) {\n-\t\t\t\tif ((s != baseAttack) && (s.getMissionId() == baseAttack.getMissionId())) {\n-\t\t\t\t\tsameContract.add(s);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tsList.removeAll(sameContract);\n-\t\t}\n-\n-\t\t/* Make sure invincible morale has base attack */\n-\t\tfor (Mission m : c.getMissions()) {\n-\t\t\tif (m.isActive() && (m instanceof AtBContract) && (((AtBContract) m).getMoraleLevel() == AtBContract.MORALE_INVINCIBLE)) {\n-\t\t\t\tboolean hasBaseAttack = false;\n-\t\t\t\tfor (AtBScenario s : sList) {\n-\t\t\t\t\tif ((s.getMissionId() == m.getId()) && (s.getScenarioType() == AtBScenario.BASEATTACK) && !s.isAttacker()) {\n-\t\t\t\t\t\thasBaseAttack = true;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (!hasBaseAttack) {\n-\t\t\t\t\t/* find a lance to act as defender, giving preference\n-\t\t\t\t\t * first to those assigned to the same contract,\n-\t\t\t\t\t * then to those assigned to defense roles\n-\t\t\t\t\t */\n-\t\t\t\t\tArrayList<Lance> lList = new ArrayList<>();\n-    \t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\tif ((l.getMissionId() == m.getId()) && (l.getRole() == Lance.ROLE_DEFEND) && l.isEligible(c)) {\n-    \t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() == 0) {\n-    \t\t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\t\tif (l.getMissionId() == m.getId() && l.isEligible(c)) {\n-    \t\t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() == 0) {\n-    \t\t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\t\tif (l.isEligible(c)) {\n-    \t\t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() > 0) {\n-    \t\t\t\t\tLance lance = Utilities.getRandomItem(lList);\n-    \t\t\t\t\tAtBScenario scenario = AtBScenarioFactory.createScenario(c, lance, AtBScenario.BASEATTACK, false,\n-    \t\t\t\t\t\t\tLance.getBattleDate(c.getCalendar()));\n-    \t\t\t\t\tfor (int i = 0; i < sList.size(); i++) {\n-    \t\t\t\t\t\tif (sList.get(i).getLanceForceId() == lance.getForceId()) {\n-    \t\t\t\t\t\t\tsList.set(i, scenario);\n-    \t\t\t\t\t\t\tbreak;\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t\tif (!sList.contains(scenario)) {\n-    \t\t\t\t\t\tsList.add(scenario);\n-    \t\t\t\t\t}\n-    \t\t\t\t} else {\n-    \t\t\t\t\t//TODO: What to do if there are no lances assigned to this contract?\n-    \t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t/* Sort by date and add to the campaign */\n-\t\tsList.sort(Comparator.comparing(Scenario::getDate));\n-\t\tfor (AtBScenario s : sList) {\n-\t\t\tc.addScenario(s, c.getMission(s.getMissionId()));\n-\t\t\ts.setForces(c);\n-\t\t}\n+        AtBContract atbContract;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21bbdf47aa4d2ab2816bed335752d45e80153e3"}, "originalPosition": 198}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7384dbf8af7812b41ec4de2ce0551fad66622d11", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/7384dbf8af7812b41ec4de2ce0551fad66622d11", "committedDate": "2020-02-21T21:32:27Z", "message": "Converting file from tab to space formatted, and adding header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489c4f63007aeb73a72f5adadc24e63878d9c779", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/489c4f63007aeb73a72f5adadc24e63878d9c779", "committedDate": "2020-02-21T21:35:07Z", "message": "Fixing tab spacing of the class declaration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTk1Mjg4", "url": "https://github.com/MegaMek/mekhq/pull/1500#pullrequestreview-362995288", "createdAt": "2020-02-22T01:06:39Z", "commit": {"oid": "489c4f63007aeb73a72f5adadc24e63878d9c779"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTowNjozOVrOFtIixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMzo1N1rOFtImZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDIxNA==", "bodyText": "How does this happen?", "url": "https://github.com/MegaMek/mekhq/pull/1500#discussion_r382870214", "createdAt": "2020-02-22T01:06:39Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1009,6 +993,28 @@ public Mission getMission(int id) {\n         return missions.get(id);\n     }\n \n+    /**\n+     * Add scenario to an existing mission. This method will also assign the scenario an id and place it in the scenarioId\n+     * hash\n+     *\n+     * @param s - the Scenario to add\n+     * @param m - the mission to add the new scenario to\n+     */\n+    public void addScenario(Scenario s, Mission m) {\n+        int id;\n+        if (s.getId() == Scenario.S_DEFAULT_ID) {\n+            id = lastScenarioId + 1;\n+            lastScenarioId = id;\n+            s.setId(id);\n+        } else {\n+            // Scenario has already been assigned an Id, so just use its assigned value\n+            id = s.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489c4f63007aeb73a72f5adadc24e63878d9c779"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDkzNg==", "bodyText": "What was the purpose of removing this parameter?", "url": "https://github.com/MegaMek/mekhq/pull/1500#discussion_r382870936", "createdAt": "2020-02-22T01:12:12Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/mission/atb/AtBScenarioFactory.java", "diffHunk": "@@ -42,228 +55,274 @@\n import mekhq.campaign.mission.atb.scenario.StarLeagueCache2BuiltInScenario;\n \n public class AtBScenarioFactory {\n-\tprivate static Map<Integer, List<Class<IAtBScenario>>> scenarioMap = new HashMap<>();\n-\n-\tstatic {\n-\t\tregisterScenario(new AceDuelBuiltInScenario());\n-\t\tregisterScenario(new AlliedTraitorsBuiltInScenario());\n-\t\tregisterScenario(new AllyRescueBuiltInScenario());\n-\t\tregisterScenario(new AmbushBuiltInScenario());\n-\t\tregisterScenario(new BaseAttackBuiltInScenario());\n-\t\tregisterScenario(new BreakthroughBuiltInScenario());\n-\t\tregisterScenario(new ChaseBuiltInScenario());\n-\t\tregisterScenario(new CivilianHelpBuiltInScenario());\n-\t\tregisterScenario(new CivilianRiotBuiltInScenario());\n-\t\tregisterScenario(new ConvoyAttackBuiltInScenario());\n-\t\tregisterScenario(new ConvoyRescueBuiltInScenario());\n-\t\tregisterScenario(new ExtractionBuiltInScenario());\n-\t\tregisterScenario(new HideAndSeekBuiltInScenario());\n-\t\tregisterScenario(new HoldTheLineBuiltInScenario());\n-\t\tregisterScenario(new OfficerDualBuiltInScenario());\n-\t\tregisterScenario(new PirateFreeForAllBuiltInScenario());\n-\t\tregisterScenario(new PrisonBreakBuiltInScenario());\n-\t\tregisterScenario(new ProbeBuiltInScenario());\n-\t\tregisterScenario(new ReconRaidBuiltInScenario());\n-\t\tregisterScenario(new StandUpBuiltInScenario());\n-\t\tregisterScenario(new StarLeagueCache1BuiltInScenario());\n-\t\tregisterScenario(new StarLeagueCache2BuiltInScenario());\n-\t}\n-\n-\tprivate AtBScenarioFactory() {\n-\t}\n-\n-\tpublic static List<Class<IAtBScenario>> getScenarios(int type) {\n-\t\treturn scenarioMap.get(type);\n-\t}\n-\n-\tpublic static AtBScenario createScenario(Campaign c, Lance lance, int type, boolean attacker, Date date) {\n-\t\tList<Class<IAtBScenario>> classList = getScenarios(type);\n-\t\tClass<IAtBScenario> selectedClass;\n-\n-\t\tif ((classList == null) || classList.isEmpty()) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tif (classList.size() > 1) {\n-\t\t\tRandom randomGenerator = new Random();\n-\t\t\tselectedClass = classList.get(randomGenerator.nextInt(classList.size()));\n-\t\t} else {\n-\t\t\tselectedClass = classList.get(0);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tAtBScenario s = (AtBScenario) selectedClass.newInstance();\n-\t\t\ts.initialize(c, lance, attacker, date);\n-\n-\t\t\treturn s;\n-\t\t} catch (InstantiationException | IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static boolean registerScenario(IAtBScenario scenario) {\n-\t    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n-\n-\t\tif (!IAtBScenario.class.isAssignableFrom(scenario.getClass())) {\n-\t        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-\t                String.format(\"Unable to register an AtBScenario of class '%s' because is does not implement '%s'.\", //$NON-NLS-1$\n-\t                        scenario.getClass().getName(), IAtBScenario.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n-            MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-                    String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n-                            scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tint type = scenario.getScenarioType();\n+    private static Map<Integer, List<Class<IAtBScenario>>> scenarioMap = new HashMap<>();\n+\n+    static {\n+        registerScenario(new AceDuelBuiltInScenario());\n+        registerScenario(new AlliedTraitorsBuiltInScenario());\n+        registerScenario(new AllyRescueBuiltInScenario());\n+        registerScenario(new AmbushBuiltInScenario());\n+        registerScenario(new BaseAttackBuiltInScenario());\n+        registerScenario(new BreakthroughBuiltInScenario());\n+        registerScenario(new ChaseBuiltInScenario());\n+        registerScenario(new CivilianHelpBuiltInScenario());\n+        registerScenario(new CivilianRiotBuiltInScenario());\n+        registerScenario(new ConvoyAttackBuiltInScenario());\n+        registerScenario(new ConvoyRescueBuiltInScenario());\n+        registerScenario(new ExtractionBuiltInScenario());\n+        registerScenario(new HideAndSeekBuiltInScenario());\n+        registerScenario(new HoldTheLineBuiltInScenario());\n+        registerScenario(new OfficerDualBuiltInScenario());\n+        registerScenario(new PirateFreeForAllBuiltInScenario());\n+        registerScenario(new PrisonBreakBuiltInScenario());\n+        registerScenario(new ProbeBuiltInScenario());\n+        registerScenario(new ReconRaidBuiltInScenario());\n+        registerScenario(new StandUpBuiltInScenario());\n+        registerScenario(new StarLeagueCache1BuiltInScenario());\n+        registerScenario(new StarLeagueCache2BuiltInScenario());\n+    }\n+\n+    private AtBScenarioFactory() {\n+    }\n+\n+    public static List<Class<IAtBScenario>> getScenarios(int type) {\n+        return scenarioMap.get(type);\n+    }\n+\n+    public static AtBScenario createScenario(Campaign c, Lance lance, int type, boolean attacker, Date date) {\n+        List<Class<IAtBScenario>> classList = getScenarios(type);\n+        Class<IAtBScenario> selectedClass;\n+\n+        if ((classList == null) || classList.isEmpty()) {\n+            return null;\n+        }\n+\n+        if (classList.size() > 1) {\n+            Random randomGenerator = new Random();\n+            selectedClass = classList.get(randomGenerator.nextInt(classList.size()));\n+        } else {\n+            selectedClass = classList.get(0);\n+        }\n+\n+        try {\n+            AtBScenario s = (AtBScenario) selectedClass.newInstance();\n+            s.initialize(c, lance, attacker, date);\n+\n+            return s;\n+        } catch (InstantiationException | IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void registerScenario(IAtBScenario scenario) {\n+    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n+\n+    if (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n+        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n+                String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n+        scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n+    } else {\n+        int type = scenario.getScenarioType();\n         List<Class<IAtBScenario>> list = scenarioMap.computeIfAbsent(type, k -> new ArrayList<>());\n \n         list.add((Class<IAtBScenario>) scenario.getClass());\n-\n-\t\treturn true;\n-\t}\n-\n-\t/* Iterate through the list of lances and make a battle roll for each,\n-\t * then sort them by date before adding them to the campaign.\n-\t * Contracts with enemy morale level of invincible have a base attack\n-\t * (defender) battle each week. If there is a base attack (attacker)\n-\t * battle, that is the only one for the week on that contract.\n-\t */\n-\tpublic static void createScenariosForNewWeek(Campaign c, boolean allowLancesToBeDuplicated) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489c4f63007aeb73a72f5adadc24e63878d9c779"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTE0Mg==", "bodyText": "Let's put in a little more detailed commentary about why we're looping through all the scenarios in the current contract. I was eventually able to figure it out but it took me a couple of minutes.", "url": "https://github.com/MegaMek/mekhq/pull/1500#discussion_r382871142", "createdAt": "2020-02-22T01:13:57Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/mission/atb/AtBScenarioFactory.java", "diffHunk": "@@ -42,228 +55,274 @@\n import mekhq.campaign.mission.atb.scenario.StarLeagueCache2BuiltInScenario;\n \n public class AtBScenarioFactory {\n-\tprivate static Map<Integer, List<Class<IAtBScenario>>> scenarioMap = new HashMap<>();\n-\n-\tstatic {\n-\t\tregisterScenario(new AceDuelBuiltInScenario());\n-\t\tregisterScenario(new AlliedTraitorsBuiltInScenario());\n-\t\tregisterScenario(new AllyRescueBuiltInScenario());\n-\t\tregisterScenario(new AmbushBuiltInScenario());\n-\t\tregisterScenario(new BaseAttackBuiltInScenario());\n-\t\tregisterScenario(new BreakthroughBuiltInScenario());\n-\t\tregisterScenario(new ChaseBuiltInScenario());\n-\t\tregisterScenario(new CivilianHelpBuiltInScenario());\n-\t\tregisterScenario(new CivilianRiotBuiltInScenario());\n-\t\tregisterScenario(new ConvoyAttackBuiltInScenario());\n-\t\tregisterScenario(new ConvoyRescueBuiltInScenario());\n-\t\tregisterScenario(new ExtractionBuiltInScenario());\n-\t\tregisterScenario(new HideAndSeekBuiltInScenario());\n-\t\tregisterScenario(new HoldTheLineBuiltInScenario());\n-\t\tregisterScenario(new OfficerDualBuiltInScenario());\n-\t\tregisterScenario(new PirateFreeForAllBuiltInScenario());\n-\t\tregisterScenario(new PrisonBreakBuiltInScenario());\n-\t\tregisterScenario(new ProbeBuiltInScenario());\n-\t\tregisterScenario(new ReconRaidBuiltInScenario());\n-\t\tregisterScenario(new StandUpBuiltInScenario());\n-\t\tregisterScenario(new StarLeagueCache1BuiltInScenario());\n-\t\tregisterScenario(new StarLeagueCache2BuiltInScenario());\n-\t}\n-\n-\tprivate AtBScenarioFactory() {\n-\t}\n-\n-\tpublic static List<Class<IAtBScenario>> getScenarios(int type) {\n-\t\treturn scenarioMap.get(type);\n-\t}\n-\n-\tpublic static AtBScenario createScenario(Campaign c, Lance lance, int type, boolean attacker, Date date) {\n-\t\tList<Class<IAtBScenario>> classList = getScenarios(type);\n-\t\tClass<IAtBScenario> selectedClass;\n-\n-\t\tif ((classList == null) || classList.isEmpty()) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tif (classList.size() > 1) {\n-\t\t\tRandom randomGenerator = new Random();\n-\t\t\tselectedClass = classList.get(randomGenerator.nextInt(classList.size()));\n-\t\t} else {\n-\t\t\tselectedClass = classList.get(0);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tAtBScenario s = (AtBScenario) selectedClass.newInstance();\n-\t\t\ts.initialize(c, lance, attacker, date);\n-\n-\t\t\treturn s;\n-\t\t} catch (InstantiationException | IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static boolean registerScenario(IAtBScenario scenario) {\n-\t    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n-\n-\t\tif (!IAtBScenario.class.isAssignableFrom(scenario.getClass())) {\n-\t        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-\t                String.format(\"Unable to register an AtBScenario of class '%s' because is does not implement '%s'.\", //$NON-NLS-1$\n-\t                        scenario.getClass().getName(), IAtBScenario.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n-            MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n-                    String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n-                            scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tint type = scenario.getScenarioType();\n+    private static Map<Integer, List<Class<IAtBScenario>>> scenarioMap = new HashMap<>();\n+\n+    static {\n+        registerScenario(new AceDuelBuiltInScenario());\n+        registerScenario(new AlliedTraitorsBuiltInScenario());\n+        registerScenario(new AllyRescueBuiltInScenario());\n+        registerScenario(new AmbushBuiltInScenario());\n+        registerScenario(new BaseAttackBuiltInScenario());\n+        registerScenario(new BreakthroughBuiltInScenario());\n+        registerScenario(new ChaseBuiltInScenario());\n+        registerScenario(new CivilianHelpBuiltInScenario());\n+        registerScenario(new CivilianRiotBuiltInScenario());\n+        registerScenario(new ConvoyAttackBuiltInScenario());\n+        registerScenario(new ConvoyRescueBuiltInScenario());\n+        registerScenario(new ExtractionBuiltInScenario());\n+        registerScenario(new HideAndSeekBuiltInScenario());\n+        registerScenario(new HoldTheLineBuiltInScenario());\n+        registerScenario(new OfficerDualBuiltInScenario());\n+        registerScenario(new PirateFreeForAllBuiltInScenario());\n+        registerScenario(new PrisonBreakBuiltInScenario());\n+        registerScenario(new ProbeBuiltInScenario());\n+        registerScenario(new ReconRaidBuiltInScenario());\n+        registerScenario(new StandUpBuiltInScenario());\n+        registerScenario(new StarLeagueCache1BuiltInScenario());\n+        registerScenario(new StarLeagueCache2BuiltInScenario());\n+    }\n+\n+    private AtBScenarioFactory() {\n+    }\n+\n+    public static List<Class<IAtBScenario>> getScenarios(int type) {\n+        return scenarioMap.get(type);\n+    }\n+\n+    public static AtBScenario createScenario(Campaign c, Lance lance, int type, boolean attacker, Date date) {\n+        List<Class<IAtBScenario>> classList = getScenarios(type);\n+        Class<IAtBScenario> selectedClass;\n+\n+        if ((classList == null) || classList.isEmpty()) {\n+            return null;\n+        }\n+\n+        if (classList.size() > 1) {\n+            Random randomGenerator = new Random();\n+            selectedClass = classList.get(randomGenerator.nextInt(classList.size()));\n+        } else {\n+            selectedClass = classList.get(0);\n+        }\n+\n+        try {\n+            AtBScenario s = (AtBScenario) selectedClass.newInstance();\n+            s.initialize(c, lance, attacker, date);\n+\n+            return s;\n+        } catch (InstantiationException | IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void registerScenario(IAtBScenario scenario) {\n+    final String METHOD_NAME = \"registerScenario(IAtBScenario)\"; //$NON-NLS-1$\n+\n+    if (!scenario.getClass().isAnnotationPresent(AtBScenarioEnabled.class)) {\n+        MekHQ.getLogger().log(AtBScenarioFactory.class, METHOD_NAME, LogLevel.ERROR,\n+                String.format(\"Unable to register an AtBScenario of class '%s' because is does not have the '%s' annotation.\", //$NON-NLS-1$\n+        scenario.getClass().getName(), AtBScenarioEnabled.class.getName()));\n+    } else {\n+        int type = scenario.getScenarioType();\n         List<Class<IAtBScenario>> list = scenarioMap.computeIfAbsent(type, k -> new ArrayList<>());\n \n         list.add((Class<IAtBScenario>) scenario.getClass());\n-\n-\t\treturn true;\n-\t}\n-\n-\t/* Iterate through the list of lances and make a battle roll for each,\n-\t * then sort them by date before adding them to the campaign.\n-\t * Contracts with enemy morale level of invincible have a base attack\n-\t * (defender) battle each week. If there is a base attack (attacker)\n-\t * battle, that is the only one for the week on that contract.\n-\t */\n-\tpublic static void createScenariosForNewWeek(Campaign c, boolean allowLancesToBeDuplicated) {\n-\t\tHashtable<Integer, Lance> lances = c.getLances();\n-\n-\t\tArrayList<AtBScenario> sList = new ArrayList<>();\n-\t\tAtBScenario baseAttack = null;\n-\t\tMap<Integer, Integer> assignedLances = new HashMap<>();\n-\n-\t\tif (!allowLancesToBeDuplicated) {\n-\t\t\tfor (Mission m : c.getMissions()) {\n-\t\t\t\tif (!m.isActive()) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tfor (Scenario s : m.getScenarios()) {\n-\t\t\t\t\tif (!s.isCurrent() || !AtBScenario.class.isAssignableFrom(s.getClass())) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tAtBScenario atbScenario = (AtBScenario) s;\n-\n-\t\t\t\t\tif (atbScenario.getLanceForceId() == AtBScenario.NO_LANCE) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tassignedLances.put(atbScenario.getLanceForceId(), atbScenario.getLanceForceId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (Lance l : lances.values()) {\n-\t\t\tif (assignedLances.containsKey(l.getForceId())) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif ((l.getContract(c) == null) || !l.getContract(c).isActive() || !l.isEligible(c) || c.getDate().before(l.getContract(c).getStartDate())) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (l.getRole() == Lance.ROLE_TRAINING) {\n-\t\t\t\tc.awardTrainingXP(l);\n-\t\t\t}\n-\n-\t\t\tif (l.getContract(c).getMoraleLevel() <= AtBContract.MORALE_VERYLOW) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tAtBScenario scenario = l.checkForBattle(c);\n-\t\t\tif (scenario != null) {\n-\t\t\t\tsList.add(scenario);\n-\t\t\t\tif ((scenario.getScenarioType() == AtBScenario.BASEATTACK) && scenario.isAttacker()) {\n-\t\t\t\t\tbaseAttack = scenario;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t/* If there is a base attack (attacker), all other battles on\n-\t\t * that contract are cleared.\n-\t\t */\n-\t\tif (baseAttack != null) {\n-\t\t\tArrayList<Scenario> sameContract = new ArrayList<>();\n-\t\t\tfor (AtBScenario s : sList) {\n-\t\t\t\tif ((s != baseAttack) && (s.getMissionId() == baseAttack.getMissionId())) {\n-\t\t\t\t\tsameContract.add(s);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tsList.removeAll(sameContract);\n-\t\t}\n-\n-\t\t/* Make sure invincible morale has base attack */\n-\t\tfor (Mission m : c.getMissions()) {\n-\t\t\tif (m.isActive() && (m instanceof AtBContract) && (((AtBContract) m).getMoraleLevel() == AtBContract.MORALE_INVINCIBLE)) {\n-\t\t\t\tboolean hasBaseAttack = false;\n-\t\t\t\tfor (AtBScenario s : sList) {\n-\t\t\t\t\tif ((s.getMissionId() == m.getId()) && (s.getScenarioType() == AtBScenario.BASEATTACK) && !s.isAttacker()) {\n-\t\t\t\t\t\thasBaseAttack = true;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (!hasBaseAttack) {\n-\t\t\t\t\t/* find a lance to act as defender, giving preference\n-\t\t\t\t\t * first to those assigned to the same contract,\n-\t\t\t\t\t * then to those assigned to defense roles\n-\t\t\t\t\t */\n-\t\t\t\t\tArrayList<Lance> lList = new ArrayList<>();\n-    \t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\tif ((l.getMissionId() == m.getId()) && (l.getRole() == Lance.ROLE_DEFEND) && l.isEligible(c)) {\n-    \t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() == 0) {\n-    \t\t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\t\tif (l.getMissionId() == m.getId() && l.isEligible(c)) {\n-    \t\t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() == 0) {\n-    \t\t\t\t\tfor (Lance l : lances.values()) {\n-    \t\t\t\t\t\tif (l.isEligible(c)) {\n-    \t\t\t\t\t\t\tlList.add(l);\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tif (lList.size() > 0) {\n-    \t\t\t\t\tLance lance = Utilities.getRandomItem(lList);\n-    \t\t\t\t\tAtBScenario scenario = AtBScenarioFactory.createScenario(c, lance, AtBScenario.BASEATTACK, false,\n-    \t\t\t\t\t\t\tLance.getBattleDate(c.getCalendar()));\n-    \t\t\t\t\tfor (int i = 0; i < sList.size(); i++) {\n-    \t\t\t\t\t\tif (sList.get(i).getLanceForceId() == lance.getForceId()) {\n-    \t\t\t\t\t\t\tsList.set(i, scenario);\n-    \t\t\t\t\t\t\tbreak;\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t}\n-    \t\t\t\t\tif (!sList.contains(scenario)) {\n-    \t\t\t\t\t\tsList.add(scenario);\n-    \t\t\t\t\t}\n-    \t\t\t\t} else {\n-    \t\t\t\t\t//TODO: What to do if there are no lances assigned to this contract?\n-    \t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t/* Sort by date and add to the campaign */\n-\t\tsList.sort(Comparator.comparing(Scenario::getDate));\n-\t\tfor (AtBScenario s : sList) {\n-\t\t\tc.addScenario(s, c.getMission(s.getMissionId()));\n-\t\t\ts.setForces(c);\n-\t\t}\n-\t}\n+        }\n+    }\n+\n+    /**\n+     * Iterate through the list of lances and make a battle roll for each,\n+     * then sort them by date before adding them to the campaign.\n+     * Contracts with enemy morale level of invincible have a base attack\n+     * (defender) battle each week. If there is a base attack (attacker)\n+     * battle, that is the only one for the week on that mission.\n+     *\n+     * Note that this handles having multiple missions at the same time\n+     * @param c the campaign for which to generate scenarios\n+     */\n+    public static void createScenariosForNewWeek(Campaign c) {\n+        Hashtable<Integer, Lance> lances = c.getLances();\n+\n+        AtBContract atbContract;\n+        List<AtBScenario> sList;\n+        List<Integer> assignedLances = new ArrayList<>();\n+        List<Integer> dontGenerateForces;\n+        boolean hasBaseAttack;\n+        boolean hasBaseAttackAttacker;\n+\n+        // Determine active missions\n+        for (Mission mission : c.getMissions()) {\n+            if (!mission.isActive() || !(mission instanceof AtBContract) ) {\n+                continue; //if not active or an AtBContract, we don't care about the mission\n+            }\n+\n+            //region Value Initialization\n+            atbContract = (AtBContract) mission;\n+            sList = new ArrayList<>();\n+            dontGenerateForces = new ArrayList<>();\n+            hasBaseAttack = false;\n+            hasBaseAttackAttacker = false;\n+            //endregion Value Initialization\n+\n+            //region Current Scenarios\n+            // Determine active scenarios", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489c4f63007aeb73a72f5adadc24e63878d9c779"}, "originalPosition": 375}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a90b20092afb82b16586b5d98c3b75fe7c480e5d", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/a90b20092afb82b16586b5d98c3b75fe7c480e5d", "committedDate": "2020-02-22T18:05:56Z", "message": "Adding comments explaining how Scenario Generation works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d255072e679142a6ee372be537a17480c8252b", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/b8d255072e679142a6ee372be537a17480c8252b", "committedDate": "2020-02-22T18:06:05Z", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GMGenerateScenarios"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDYxOTQ1", "url": "https://github.com/MegaMek/mekhq/pull/1500#pullrequestreview-363061945", "createdAt": "2020-02-23T02:33:37Z", "commit": {"oid": "b8d255072e679142a6ee372be537a17480c8252b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}