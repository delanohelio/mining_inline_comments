{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDEyOTIw", "number": 1629, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODowODowNlrODutl-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODoxMDozN1rODutm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA4MDg4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/PersonAwardController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODowODowNlrOGAznoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODowODowNlrOGAznoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5ODkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n            \n          \n          \n            \n                /**", "url": "https://github.com/MegaMek/mekhq/pull/1629#discussion_r403498913", "createdAt": "2020-04-04T18:08:06Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/PersonAwardController.java", "diffHunk": "@@ -138,27 +139,48 @@ public void addAwardFromXml(Award award){\n         MekHQ.triggerEvent(new PersonChangedEvent(person));\n     }\n \n+    public void removeAward(String setName, String awardName, String stringDate) {\n+        if (StringUtil.isNullOrEmpty(stringDate)) {\n+            MekHQ.getLogger().error(getClass(), \"removeAward\",\n+                    \"Attempted to remove award with a null date. Returning without removing the award\");\n+        } else {\n+            removeAward(setName, awardName, stringDate, null);\n+        }\n+    }\n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86ca728a85c46cd4c765534d409feaa44bf520b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA4MzE2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODoxMDozN1rOGAzovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxODoxOTozM1rOGAzspg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5OTE5OQ==", "bodyText": "This is eventually going to break something as it doesn't follow the invariants. Why not sort by set then name?\nI also don't follow the comment about the \"original copy\".", "url": "https://github.com/MegaMek/mekhq/pull/1629#discussion_r403499199", "createdAt": "2020-04-04T18:10:37Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1836,95 +1845,97 @@ private void maybeShowPopup(MouseEvent e) {\n \n                     popup.add(menu);\n                 }\n+            }\n \n-                JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n-                List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n-                Collections.sort(setNames);\n-                for(String setName : setNames){\n-                    JMenu setAwardMenu = new JMenu(setName);\n-\n-                    List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n-                    Collections.sort(awardsOfSet);\n-\n-                    for (Award award : awardsOfSet) {\n+            //region Awards Menu\n+            JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n+            List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n+            Collections.sort(setNames);\n+            for (String setName : setNames) {\n+                JMenu setAwardMenu = new JMenu(setName);\n \n-                        if(!award.canBeAwarded(person)) continue;\n+                List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n+                Collections.sort(awardsOfSet);\n \n-                        StringBuilder awardMenuItem = new StringBuilder();\n-                        awardMenuItem.append(String.format(\"%s\", award.getName()));\n+                for (Award award : awardsOfSet) {\n+                    if (!award.canBeAwarded(selected)) {\n+                        continue;\n+                    }\n \n-                        if(award.getXPReward() != 0 || award.getEdgeReward() != 0){\n-                            awardMenuItem.append(\" (\");\n+                    StringBuilder awardMenuItem = new StringBuilder();\n+                    awardMenuItem.append(String.format(\"%s\", award.getName()));\n \n-                            if(award.getXPReward() != 0){\n-                                awardMenuItem.append(award.getXPReward()).append(\" XP\");\n-                                if(award.getEdgeReward() != 0)\n-                                    awardMenuItem.append(\" & \");\n-                            }\n+                    if ((award.getXPReward() != 0) || (award.getEdgeReward() != 0)) {\n+                        awardMenuItem.append(\" (\");\n \n-                            if(award.getEdgeReward() != 0){\n-                                awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n+                        if (award.getXPReward() != 0) {\n+                            awardMenuItem.append(award.getXPReward()).append(\" XP\");\n+                            if (award.getEdgeReward() != 0) {\n+                                awardMenuItem.append(\" & \");\n                             }\n+                        }\n \n-                            awardMenuItem.append(\")\");\n+                        if (award.getEdgeReward() != 0) {\n+                            awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n                         }\n \n-                        menuItem = new JMenuItem(awardMenuItem.toString());\n-                        menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                        awardMenuItem.append(\")\");\n+                    }\n \n-                        if(!award.canBeAwarded(person) && !gui.getCampaign().isGM())\n-                            menuItem.setEnabled(false);\n+                    menuItem = new JMenuItem(awardMenuItem.toString());\n+                    menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                    menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n+                    menuItem.addActionListener(this);\n+                    setAwardMenu.add(menuItem);\n+                }\n \n-                        menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n-                        menuItem.addActionListener(this);\n+                JMenuHelpers.addMenuIfNonEmpty(awardMenu, setAwardMenu, MAX_POPUP_ITEMS);\n+            }\n \n-                        setAwardMenu.add(menuItem);\n-                    }\n-                    if (setAwardMenu.getItemCount() > MAX_POPUP_ITEMS) {\n-                        MenuScroller.setScrollerFor(setAwardMenu, MAX_POPUP_ITEMS);\n-                    }\n-                    awardMenu.add(setAwardMenu);\n+            if (StaticChecks.doAnyHaveAnAward(selected)) {\n+                if (awardMenu.getItemCount() > 0) {\n+                    awardMenu.addSeparator();\n                 }\n-                awardMenu.addSeparator();\n-                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                if(!person.awardController.hasAwards())\n-                    removeAwardMenu.setEnabled(false);\n+                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                for(Award award : person.awardController.getAwards()){\n-                    JMenu singleAwardMenu = new JMenu(award.getName());\n-                    for(String date : award.getFormatedDates()){\n-                        JMenuItem specificAwardMenu = new JMenuItem(date);\n-                        specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n-                        specificAwardMenu.addActionListener(this);\n-                        singleAwardMenu.add(specificAwardMenu);\n+                if (oneSelected) {\n+                    for (Award award : person.awardController.getAwards()) {\n+                        JMenu singleAwardMenu = new JMenu(award.getName());\n+                        for (String date : award.getFormatedDates()) {\n+                            JMenuItem specificAwardMenu = new JMenuItem(date);\n+                            specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n+                            specificAwardMenu.addActionListener(this);\n+                            singleAwardMenu.add(specificAwardMenu);\n+                        }\n+                        JMenuHelpers.addMenuIfNonEmpty(removeAwardMenu, singleAwardMenu, MAX_POPUP_ITEMS);\n                     }\n-                    removeAwardMenu.add(singleAwardMenu);\n-                }\n-                awardMenu.add(removeAwardMenu);\n-                popup.add(awardMenu);\n-\n-                menu = new JMenu(resourceMap.getString(\"spendXP.text\")); //$NON-NLS-1$\n-                JMenu currentMenu = new JMenu(resourceMap.getString(\"spendOnCurrentSkills.text\")); //$NON-NLS-1$\n-                JMenu newMenu = new JMenu(resourceMap.getString(\"spendOnNewSkills.text\")); //$NON-NLS-1$\n-                for (int i = 0; i < SkillType.getSkillList().length; i++) {\n-                    String type = SkillType.getSkillList()[i];\n-                    int cost = person.hasSkill(type) ? person.getSkill(type).getCostToImprove() : SkillType.getType(type).getCost(0);\n-                    if( cost >= 0 ) {\n-                        String desc = String.format(resourceMap.getString(\"skillDesc.format\"), type, cost); //$NON-NLS-1$\n-                        menuItem = new JMenuItem(desc);\n-                        menuItem.setActionCommand(makeCommand(CMD_IMPROVE, type, String.valueOf(cost)));\n-                        menuItem.addActionListener(this);\n-                        menuItem.setEnabled(person.getXp() >= cost);\n-                        if(person.hasSkill(type)) {\n-                            currentMenu.add(menuItem);\n+                } else {\n+                    Set<Award> awards = new TreeSet<>((a1, a2) -> {\n+                        if (a1.getSet().equalsIgnoreCase(a2.getSet()) && a1.getName().equalsIgnoreCase(a2.getName())) {\n+                            return 0;\n                         } else {\n-                            newMenu.add(menuItem);\n+                            return 1; // This is purposeful, we want to keep the original copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86ca728a85c46cd4c765534d409feaa44bf520b"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5OTg2MQ==", "bodyText": "What, how... That was fixed \ud83e\udd14\nOh, I forgot to push the last commit \ud83d\ude33", "url": "https://github.com/MegaMek/mekhq/pull/1629#discussion_r403499861", "createdAt": "2020-04-04T18:16:40Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1836,95 +1845,97 @@ private void maybeShowPopup(MouseEvent e) {\n \n                     popup.add(menu);\n                 }\n+            }\n \n-                JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n-                List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n-                Collections.sort(setNames);\n-                for(String setName : setNames){\n-                    JMenu setAwardMenu = new JMenu(setName);\n-\n-                    List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n-                    Collections.sort(awardsOfSet);\n-\n-                    for (Award award : awardsOfSet) {\n+            //region Awards Menu\n+            JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n+            List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n+            Collections.sort(setNames);\n+            for (String setName : setNames) {\n+                JMenu setAwardMenu = new JMenu(setName);\n \n-                        if(!award.canBeAwarded(person)) continue;\n+                List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n+                Collections.sort(awardsOfSet);\n \n-                        StringBuilder awardMenuItem = new StringBuilder();\n-                        awardMenuItem.append(String.format(\"%s\", award.getName()));\n+                for (Award award : awardsOfSet) {\n+                    if (!award.canBeAwarded(selected)) {\n+                        continue;\n+                    }\n \n-                        if(award.getXPReward() != 0 || award.getEdgeReward() != 0){\n-                            awardMenuItem.append(\" (\");\n+                    StringBuilder awardMenuItem = new StringBuilder();\n+                    awardMenuItem.append(String.format(\"%s\", award.getName()));\n \n-                            if(award.getXPReward() != 0){\n-                                awardMenuItem.append(award.getXPReward()).append(\" XP\");\n-                                if(award.getEdgeReward() != 0)\n-                                    awardMenuItem.append(\" & \");\n-                            }\n+                    if ((award.getXPReward() != 0) || (award.getEdgeReward() != 0)) {\n+                        awardMenuItem.append(\" (\");\n \n-                            if(award.getEdgeReward() != 0){\n-                                awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n+                        if (award.getXPReward() != 0) {\n+                            awardMenuItem.append(award.getXPReward()).append(\" XP\");\n+                            if (award.getEdgeReward() != 0) {\n+                                awardMenuItem.append(\" & \");\n                             }\n+                        }\n \n-                            awardMenuItem.append(\")\");\n+                        if (award.getEdgeReward() != 0) {\n+                            awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n                         }\n \n-                        menuItem = new JMenuItem(awardMenuItem.toString());\n-                        menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                        awardMenuItem.append(\")\");\n+                    }\n \n-                        if(!award.canBeAwarded(person) && !gui.getCampaign().isGM())\n-                            menuItem.setEnabled(false);\n+                    menuItem = new JMenuItem(awardMenuItem.toString());\n+                    menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                    menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n+                    menuItem.addActionListener(this);\n+                    setAwardMenu.add(menuItem);\n+                }\n \n-                        menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n-                        menuItem.addActionListener(this);\n+                JMenuHelpers.addMenuIfNonEmpty(awardMenu, setAwardMenu, MAX_POPUP_ITEMS);\n+            }\n \n-                        setAwardMenu.add(menuItem);\n-                    }\n-                    if (setAwardMenu.getItemCount() > MAX_POPUP_ITEMS) {\n-                        MenuScroller.setScrollerFor(setAwardMenu, MAX_POPUP_ITEMS);\n-                    }\n-                    awardMenu.add(setAwardMenu);\n+            if (StaticChecks.doAnyHaveAnAward(selected)) {\n+                if (awardMenu.getItemCount() > 0) {\n+                    awardMenu.addSeparator();\n                 }\n-                awardMenu.addSeparator();\n-                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                if(!person.awardController.hasAwards())\n-                    removeAwardMenu.setEnabled(false);\n+                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                for(Award award : person.awardController.getAwards()){\n-                    JMenu singleAwardMenu = new JMenu(award.getName());\n-                    for(String date : award.getFormatedDates()){\n-                        JMenuItem specificAwardMenu = new JMenuItem(date);\n-                        specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n-                        specificAwardMenu.addActionListener(this);\n-                        singleAwardMenu.add(specificAwardMenu);\n+                if (oneSelected) {\n+                    for (Award award : person.awardController.getAwards()) {\n+                        JMenu singleAwardMenu = new JMenu(award.getName());\n+                        for (String date : award.getFormatedDates()) {\n+                            JMenuItem specificAwardMenu = new JMenuItem(date);\n+                            specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n+                            specificAwardMenu.addActionListener(this);\n+                            singleAwardMenu.add(specificAwardMenu);\n+                        }\n+                        JMenuHelpers.addMenuIfNonEmpty(removeAwardMenu, singleAwardMenu, MAX_POPUP_ITEMS);\n                     }\n-                    removeAwardMenu.add(singleAwardMenu);\n-                }\n-                awardMenu.add(removeAwardMenu);\n-                popup.add(awardMenu);\n-\n-                menu = new JMenu(resourceMap.getString(\"spendXP.text\")); //$NON-NLS-1$\n-                JMenu currentMenu = new JMenu(resourceMap.getString(\"spendOnCurrentSkills.text\")); //$NON-NLS-1$\n-                JMenu newMenu = new JMenu(resourceMap.getString(\"spendOnNewSkills.text\")); //$NON-NLS-1$\n-                for (int i = 0; i < SkillType.getSkillList().length; i++) {\n-                    String type = SkillType.getSkillList()[i];\n-                    int cost = person.hasSkill(type) ? person.getSkill(type).getCostToImprove() : SkillType.getType(type).getCost(0);\n-                    if( cost >= 0 ) {\n-                        String desc = String.format(resourceMap.getString(\"skillDesc.format\"), type, cost); //$NON-NLS-1$\n-                        menuItem = new JMenuItem(desc);\n-                        menuItem.setActionCommand(makeCommand(CMD_IMPROVE, type, String.valueOf(cost)));\n-                        menuItem.addActionListener(this);\n-                        menuItem.setEnabled(person.getXp() >= cost);\n-                        if(person.hasSkill(type)) {\n-                            currentMenu.add(menuItem);\n+                } else {\n+                    Set<Award> awards = new TreeSet<>((a1, a2) -> {\n+                        if (a1.getSet().equalsIgnoreCase(a2.getSet()) && a1.getName().equalsIgnoreCase(a2.getName())) {\n+                            return 0;\n                         } else {\n-                            newMenu.add(menuItem);\n+                            return 1; // This is purposeful, we want to keep the original copy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5OTE5OQ=="}, "originalCommit": {"oid": "a86ca728a85c46cd4c765534d409feaa44bf520b"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwMDE5OA==", "bodyText": "Pushed, sorry about that. (it did break something, funnily enough)", "url": "https://github.com/MegaMek/mekhq/pull/1629#discussion_r403500198", "createdAt": "2020-04-04T18:19:33Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1836,95 +1845,97 @@ private void maybeShowPopup(MouseEvent e) {\n \n                     popup.add(menu);\n                 }\n+            }\n \n-                JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n-                List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n-                Collections.sort(setNames);\n-                for(String setName : setNames){\n-                    JMenu setAwardMenu = new JMenu(setName);\n-\n-                    List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n-                    Collections.sort(awardsOfSet);\n-\n-                    for (Award award : awardsOfSet) {\n+            //region Awards Menu\n+            JMenu awardMenu = new JMenu(resourceMap.getString(\"award.text\"));\n+            List<String> setNames = AwardsFactory.getInstance().getAllSetNames();\n+            Collections.sort(setNames);\n+            for (String setName : setNames) {\n+                JMenu setAwardMenu = new JMenu(setName);\n \n-                        if(!award.canBeAwarded(person)) continue;\n+                List<Award> awardsOfSet = AwardsFactory.getInstance().getAllAwardsForSet(setName);\n+                Collections.sort(awardsOfSet);\n \n-                        StringBuilder awardMenuItem = new StringBuilder();\n-                        awardMenuItem.append(String.format(\"%s\", award.getName()));\n+                for (Award award : awardsOfSet) {\n+                    if (!award.canBeAwarded(selected)) {\n+                        continue;\n+                    }\n \n-                        if(award.getXPReward() != 0 || award.getEdgeReward() != 0){\n-                            awardMenuItem.append(\" (\");\n+                    StringBuilder awardMenuItem = new StringBuilder();\n+                    awardMenuItem.append(String.format(\"%s\", award.getName()));\n \n-                            if(award.getXPReward() != 0){\n-                                awardMenuItem.append(award.getXPReward()).append(\" XP\");\n-                                if(award.getEdgeReward() != 0)\n-                                    awardMenuItem.append(\" & \");\n-                            }\n+                    if ((award.getXPReward() != 0) || (award.getEdgeReward() != 0)) {\n+                        awardMenuItem.append(\" (\");\n \n-                            if(award.getEdgeReward() != 0){\n-                                awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n+                        if (award.getXPReward() != 0) {\n+                            awardMenuItem.append(award.getXPReward()).append(\" XP\");\n+                            if (award.getEdgeReward() != 0) {\n+                                awardMenuItem.append(\" & \");\n                             }\n+                        }\n \n-                            awardMenuItem.append(\")\");\n+                        if (award.getEdgeReward() != 0) {\n+                            awardMenuItem.append(award.getEdgeReward()).append(\" Edge\");\n                         }\n \n-                        menuItem = new JMenuItem(awardMenuItem.toString());\n-                        menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                        awardMenuItem.append(\")\");\n+                    }\n \n-                        if(!award.canBeAwarded(person) && !gui.getCampaign().isGM())\n-                            menuItem.setEnabled(false);\n+                    menuItem = new JMenuItem(awardMenuItem.toString());\n+                    menuItem.setToolTipText(MultiLineTooltip.splitToolTip(award.getDescription()));\n+                    menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n+                    menuItem.addActionListener(this);\n+                    setAwardMenu.add(menuItem);\n+                }\n \n-                        menuItem.setActionCommand(makeCommand(CMD_ADD_AWARD, award.getSet(), award.getName()));\n-                        menuItem.addActionListener(this);\n+                JMenuHelpers.addMenuIfNonEmpty(awardMenu, setAwardMenu, MAX_POPUP_ITEMS);\n+            }\n \n-                        setAwardMenu.add(menuItem);\n-                    }\n-                    if (setAwardMenu.getItemCount() > MAX_POPUP_ITEMS) {\n-                        MenuScroller.setScrollerFor(setAwardMenu, MAX_POPUP_ITEMS);\n-                    }\n-                    awardMenu.add(setAwardMenu);\n+            if (StaticChecks.doAnyHaveAnAward(selected)) {\n+                if (awardMenu.getItemCount() > 0) {\n+                    awardMenu.addSeparator();\n                 }\n-                awardMenu.addSeparator();\n-                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                if(!person.awardController.hasAwards())\n-                    removeAwardMenu.setEnabled(false);\n+                JMenu removeAwardMenu = new JMenu(resourceMap.getString(\"removeAward.text\"));\n \n-                for(Award award : person.awardController.getAwards()){\n-                    JMenu singleAwardMenu = new JMenu(award.getName());\n-                    for(String date : award.getFormatedDates()){\n-                        JMenuItem specificAwardMenu = new JMenuItem(date);\n-                        specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n-                        specificAwardMenu.addActionListener(this);\n-                        singleAwardMenu.add(specificAwardMenu);\n+                if (oneSelected) {\n+                    for (Award award : person.awardController.getAwards()) {\n+                        JMenu singleAwardMenu = new JMenu(award.getName());\n+                        for (String date : award.getFormatedDates()) {\n+                            JMenuItem specificAwardMenu = new JMenuItem(date);\n+                            specificAwardMenu.setActionCommand(makeCommand(CMD_RMV_AWARD, award.getSet(), award.getName(), date));\n+                            specificAwardMenu.addActionListener(this);\n+                            singleAwardMenu.add(specificAwardMenu);\n+                        }\n+                        JMenuHelpers.addMenuIfNonEmpty(removeAwardMenu, singleAwardMenu, MAX_POPUP_ITEMS);\n                     }\n-                    removeAwardMenu.add(singleAwardMenu);\n-                }\n-                awardMenu.add(removeAwardMenu);\n-                popup.add(awardMenu);\n-\n-                menu = new JMenu(resourceMap.getString(\"spendXP.text\")); //$NON-NLS-1$\n-                JMenu currentMenu = new JMenu(resourceMap.getString(\"spendOnCurrentSkills.text\")); //$NON-NLS-1$\n-                JMenu newMenu = new JMenu(resourceMap.getString(\"spendOnNewSkills.text\")); //$NON-NLS-1$\n-                for (int i = 0; i < SkillType.getSkillList().length; i++) {\n-                    String type = SkillType.getSkillList()[i];\n-                    int cost = person.hasSkill(type) ? person.getSkill(type).getCostToImprove() : SkillType.getType(type).getCost(0);\n-                    if( cost >= 0 ) {\n-                        String desc = String.format(resourceMap.getString(\"skillDesc.format\"), type, cost); //$NON-NLS-1$\n-                        menuItem = new JMenuItem(desc);\n-                        menuItem.setActionCommand(makeCommand(CMD_IMPROVE, type, String.valueOf(cost)));\n-                        menuItem.addActionListener(this);\n-                        menuItem.setEnabled(person.getXp() >= cost);\n-                        if(person.hasSkill(type)) {\n-                            currentMenu.add(menuItem);\n+                } else {\n+                    Set<Award> awards = new TreeSet<>((a1, a2) -> {\n+                        if (a1.getSet().equalsIgnoreCase(a2.getSet()) && a1.getName().equalsIgnoreCase(a2.getName())) {\n+                            return 0;\n                         } else {\n-                            newMenu.add(menuItem);\n+                            return 1; // This is purposeful, we want to keep the original copy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5OTE5OQ=="}, "originalCommit": {"oid": "a86ca728a85c46cd4c765534d409feaa44bf520b"}, "originalPosition": 259}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2406, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}