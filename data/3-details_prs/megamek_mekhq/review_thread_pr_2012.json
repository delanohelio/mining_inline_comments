{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTQ3NzI3", "number": 2012, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoyMjowMVrOEkyjhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoyMjowMVrOEkyjhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDEyNDg3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/MassRepairSalvageDialog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoyMjowMVrOHT7ryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjozODo1MlrOHT78SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Mjg1Nw==", "bodyText": "Isn't this going to throw an exception of getMassRepairOptions returns null?", "url": "https://github.com/MegaMek/mekhq/pull/2012#discussion_r490662857", "createdAt": "2020-09-18T02:22:01Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/gui/dialog/MassRepairSalvageDialog.java", "diffHunk": "@@ -634,628 +612,577 @@ public void actionPerformed(ActionEvent e) {\n                         \"All pod-mounted equipment will be replaced or salvaged regardless of other categories selected\",\n                         \"massRepairItemPod\", pnlItems, rowIdx++));\n \n-\t\treturn pnlOptions;\n-\t}\n-\n-\tprivate MassRepairOptionControl createMassRepairOptionControls(int type, String text, String tooltipText,\n-\t\t\tString activeBoxName, JPanel pnlItems, int rowIdx) {\n-\t\tMassRepairOption mro = null;\n-\n-\t\tList<MassRepairOption> mroList = campaignOptions.getMassRepairOptions();\n-\n-\t\tif (null != mroList) {\n-\t\t\tfor (int i = 0; i < mroList.size(); i++) {\n-\t\t\t\tif (mroList.get(i).getType() == type) {\n-\t\t\t\t\tmro = mroList.get(i);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (null == mro) {\n-\t\t\tmro = new MassRepairOption(type);\n-\t\t}\n-\n-\t\tint columnIdx = 0;\n-\n-\t\tMassRepairOptionControl mroc = new MassRepairOptionControl();\n-\t\tmroc.activeBox = createMassRepairOptionItemBox(text, tooltipText, activeBoxName, mro.isActive(), pnlItems,\n-\t\t\t\trowIdx, columnIdx++);\n-\t\tmroc.minSkillCBox = createMassRepairSkillCBox(mro.getSkillMin(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.maxSkillCBox = createMassRepairSkillCBox(mro.getSkillMax(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.minBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMin(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\t\tmroc.maxBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMax(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\n-\t\tmroc.activeBox.addActionListener(new java.awt.event.ActionListener() {\n-\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n-\t\t\t\tif (mroc.activeBox.isSelected()) {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(true);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(true);\n-\t\t\t\t} else {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(false);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn mroc;\n-\t}\n-\n-\tprivate JSpinner createMassRepairSkillBTHSpinner(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tJSpinner skillBTHSpn = new JSpinner(new SpinnerNumberModel(selectedValue, 1, 12, 1));\n-\t\t((JSpinner.DefaultEditor) skillBTHSpn.getEditor()).getTextField().setEditable(false);\n-\t\tskillBTHSpn.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\t\tgridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n-\n-\t\tpnlItems.add(skillBTHSpn, gridBagConstraints);\n-\n-\t\treturn skillBTHSpn;\n-\t}\n-\n-\tprivate JComboBox<String> createMassRepairSkillCBox(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tDefaultComboBoxModel<String> skillModel = new DefaultComboBoxModel<String>();\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ULTRA_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_REGULAR));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_VETERAN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ELITE));\n-\t\tskillModel.setSelectedItem(SkillType.getExperienceLevelName(selectedValue));\n-\t\tJComboBox<String> skillCBox = new JComboBox<String>(skillModel);\n-\t\tskillCBox.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\n-\t\tpnlItems.add(skillCBox, gridBagConstraints);\n-\n-\t\treturn skillCBox;\n-\t}\n-\n-\tprivate JCheckBox createMassRepairOptionItemBox(String text, String toolTipText, String name, boolean selected,\n-\t\t\tJPanel pnlItems, int rowIdx, int columnIdx) {\n-\t\tJCheckBox optionItemBox = new JCheckBox();\n-\t\toptionItemBox.setText(text);\n-\t\toptionItemBox.setToolTipText(toolTipText);\n-\t\toptionItemBox.setName(name);\n-\t\toptionItemBox.setSelected(selected);\n-\t\tif (name.equals(\"massRepairItemPod\") && !isModeWarehouse()) {\n+        return pnlOptions;\n+    }\n+\n+    private MassRepairOptionControl createMassRepairOptionControls(int type, String text,String tooltipText,\n+                                                                   String activeBoxName, JPanel pnlItems,\n+                                                                   int rowIdx) {\n+        MassRepairOption mro = null;\n+\n+        for (MassRepairOption massRepairOption : campaignOptions.getMassRepairOptions()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909fc06f1bed5d896b80b82b99c2a8c91123bb7b"}, "originalPosition": 1230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NDA5Mg==", "bodyText": "Fixed it on one end, and I think I forgot to fix it on the other end... give me five and I'll double check", "url": "https://github.com/MegaMek/mekhq/pull/2012#discussion_r490664092", "createdAt": "2020-09-18T02:26:57Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/MassRepairSalvageDialog.java", "diffHunk": "@@ -634,628 +612,577 @@ public void actionPerformed(ActionEvent e) {\n                         \"All pod-mounted equipment will be replaced or salvaged regardless of other categories selected\",\n                         \"massRepairItemPod\", pnlItems, rowIdx++));\n \n-\t\treturn pnlOptions;\n-\t}\n-\n-\tprivate MassRepairOptionControl createMassRepairOptionControls(int type, String text, String tooltipText,\n-\t\t\tString activeBoxName, JPanel pnlItems, int rowIdx) {\n-\t\tMassRepairOption mro = null;\n-\n-\t\tList<MassRepairOption> mroList = campaignOptions.getMassRepairOptions();\n-\n-\t\tif (null != mroList) {\n-\t\t\tfor (int i = 0; i < mroList.size(); i++) {\n-\t\t\t\tif (mroList.get(i).getType() == type) {\n-\t\t\t\t\tmro = mroList.get(i);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (null == mro) {\n-\t\t\tmro = new MassRepairOption(type);\n-\t\t}\n-\n-\t\tint columnIdx = 0;\n-\n-\t\tMassRepairOptionControl mroc = new MassRepairOptionControl();\n-\t\tmroc.activeBox = createMassRepairOptionItemBox(text, tooltipText, activeBoxName, mro.isActive(), pnlItems,\n-\t\t\t\trowIdx, columnIdx++);\n-\t\tmroc.minSkillCBox = createMassRepairSkillCBox(mro.getSkillMin(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.maxSkillCBox = createMassRepairSkillCBox(mro.getSkillMax(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.minBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMin(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\t\tmroc.maxBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMax(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\n-\t\tmroc.activeBox.addActionListener(new java.awt.event.ActionListener() {\n-\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n-\t\t\t\tif (mroc.activeBox.isSelected()) {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(true);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(true);\n-\t\t\t\t} else {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(false);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn mroc;\n-\t}\n-\n-\tprivate JSpinner createMassRepairSkillBTHSpinner(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tJSpinner skillBTHSpn = new JSpinner(new SpinnerNumberModel(selectedValue, 1, 12, 1));\n-\t\t((JSpinner.DefaultEditor) skillBTHSpn.getEditor()).getTextField().setEditable(false);\n-\t\tskillBTHSpn.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\t\tgridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n-\n-\t\tpnlItems.add(skillBTHSpn, gridBagConstraints);\n-\n-\t\treturn skillBTHSpn;\n-\t}\n-\n-\tprivate JComboBox<String> createMassRepairSkillCBox(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tDefaultComboBoxModel<String> skillModel = new DefaultComboBoxModel<String>();\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ULTRA_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_REGULAR));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_VETERAN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ELITE));\n-\t\tskillModel.setSelectedItem(SkillType.getExperienceLevelName(selectedValue));\n-\t\tJComboBox<String> skillCBox = new JComboBox<String>(skillModel);\n-\t\tskillCBox.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\n-\t\tpnlItems.add(skillCBox, gridBagConstraints);\n-\n-\t\treturn skillCBox;\n-\t}\n-\n-\tprivate JCheckBox createMassRepairOptionItemBox(String text, String toolTipText, String name, boolean selected,\n-\t\t\tJPanel pnlItems, int rowIdx, int columnIdx) {\n-\t\tJCheckBox optionItemBox = new JCheckBox();\n-\t\toptionItemBox.setText(text);\n-\t\toptionItemBox.setToolTipText(toolTipText);\n-\t\toptionItemBox.setName(name);\n-\t\toptionItemBox.setSelected(selected);\n-\t\tif (name.equals(\"massRepairItemPod\") && !isModeWarehouse()) {\n+        return pnlOptions;\n+    }\n+\n+    private MassRepairOptionControl createMassRepairOptionControls(int type, String text,String tooltipText,\n+                                                                   String activeBoxName, JPanel pnlItems,\n+                                                                   int rowIdx) {\n+        MassRepairOption mro = null;\n+\n+        for (MassRepairOption massRepairOption : campaignOptions.getMassRepairOptions()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Mjg1Nw=="}, "originalCommit": {"oid": "909fc06f1bed5d896b80b82b99c2a8c91123bb7b"}, "originalPosition": 1230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzA4MA==", "bodyText": "Yep, forgot to fix it on the other end... That's now fixed", "url": "https://github.com/MegaMek/mekhq/pull/2012#discussion_r490667080", "createdAt": "2020-09-18T02:38:52Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/MassRepairSalvageDialog.java", "diffHunk": "@@ -634,628 +612,577 @@ public void actionPerformed(ActionEvent e) {\n                         \"All pod-mounted equipment will be replaced or salvaged regardless of other categories selected\",\n                         \"massRepairItemPod\", pnlItems, rowIdx++));\n \n-\t\treturn pnlOptions;\n-\t}\n-\n-\tprivate MassRepairOptionControl createMassRepairOptionControls(int type, String text, String tooltipText,\n-\t\t\tString activeBoxName, JPanel pnlItems, int rowIdx) {\n-\t\tMassRepairOption mro = null;\n-\n-\t\tList<MassRepairOption> mroList = campaignOptions.getMassRepairOptions();\n-\n-\t\tif (null != mroList) {\n-\t\t\tfor (int i = 0; i < mroList.size(); i++) {\n-\t\t\t\tif (mroList.get(i).getType() == type) {\n-\t\t\t\t\tmro = mroList.get(i);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (null == mro) {\n-\t\t\tmro = new MassRepairOption(type);\n-\t\t}\n-\n-\t\tint columnIdx = 0;\n-\n-\t\tMassRepairOptionControl mroc = new MassRepairOptionControl();\n-\t\tmroc.activeBox = createMassRepairOptionItemBox(text, tooltipText, activeBoxName, mro.isActive(), pnlItems,\n-\t\t\t\trowIdx, columnIdx++);\n-\t\tmroc.minSkillCBox = createMassRepairSkillCBox(mro.getSkillMin(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.maxSkillCBox = createMassRepairSkillCBox(mro.getSkillMax(), mro.isActive(), pnlItems, rowIdx, columnIdx++);\n-\t\tmroc.minBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMin(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\t\tmroc.maxBTHSpn = createMassRepairSkillBTHSpinner(mro.getBthMax(), mro.isActive(), pnlItems, rowIdx,\n-\t\t\t\tcolumnIdx++);\n-\n-\t\tmroc.activeBox.addActionListener(new java.awt.event.ActionListener() {\n-\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n-\t\t\t\tif (mroc.activeBox.isSelected()) {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(true);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(true);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(true);\n-\t\t\t\t} else {\n-\t\t\t\t\tmroc.minSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.maxSkillCBox.setEnabled(false);\n-\t\t\t\t\tmroc.minBTHSpn.setEnabled(false);\n-\t\t\t\t\tmroc.maxBTHSpn.setEnabled(false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn mroc;\n-\t}\n-\n-\tprivate JSpinner createMassRepairSkillBTHSpinner(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tJSpinner skillBTHSpn = new JSpinner(new SpinnerNumberModel(selectedValue, 1, 12, 1));\n-\t\t((JSpinner.DefaultEditor) skillBTHSpn.getEditor()).getTextField().setEditable(false);\n-\t\tskillBTHSpn.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\t\tgridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n-\n-\t\tpnlItems.add(skillBTHSpn, gridBagConstraints);\n-\n-\t\treturn skillBTHSpn;\n-\t}\n-\n-\tprivate JComboBox<String> createMassRepairSkillCBox(int selectedValue, boolean enabled, JPanel pnlItems, int rowIdx,\n-\t\t\tint columnIdx) {\n-\t\tDefaultComboBoxModel<String> skillModel = new DefaultComboBoxModel<String>();\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ULTRA_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_GREEN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_REGULAR));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_VETERAN));\n-\t\tskillModel.addElement(SkillType.getExperienceLevelName(SkillType.EXP_ELITE));\n-\t\tskillModel.setSelectedItem(SkillType.getExperienceLevelName(selectedValue));\n-\t\tJComboBox<String> skillCBox = new JComboBox<String>(skillModel);\n-\t\tskillCBox.setEnabled(enabled);\n-\n-\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n-\t\tgridBagConstraints.gridx = columnIdx;\n-\t\tgridBagConstraints.gridy = rowIdx;\n-\t\tgridBagConstraints.insets = new Insets(0, 5, 0, 5);\n-\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n-\n-\t\tpnlItems.add(skillCBox, gridBagConstraints);\n-\n-\t\treturn skillCBox;\n-\t}\n-\n-\tprivate JCheckBox createMassRepairOptionItemBox(String text, String toolTipText, String name, boolean selected,\n-\t\t\tJPanel pnlItems, int rowIdx, int columnIdx) {\n-\t\tJCheckBox optionItemBox = new JCheckBox();\n-\t\toptionItemBox.setText(text);\n-\t\toptionItemBox.setToolTipText(toolTipText);\n-\t\toptionItemBox.setName(name);\n-\t\toptionItemBox.setSelected(selected);\n-\t\tif (name.equals(\"massRepairItemPod\") && !isModeWarehouse()) {\n+        return pnlOptions;\n+    }\n+\n+    private MassRepairOptionControl createMassRepairOptionControls(int type, String text,String tooltipText,\n+                                                                   String activeBoxName, JPanel pnlItems,\n+                                                                   int rowIdx) {\n+        MassRepairOption mro = null;\n+\n+        for (MassRepairOption massRepairOption : campaignOptions.getMassRepairOptions()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Mjg1Nw=="}, "originalCommit": {"oid": "909fc06f1bed5d896b80b82b99c2a8c91123bb7b"}, "originalPosition": 1230}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2243, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}