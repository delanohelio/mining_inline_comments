{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjU2MDk1", "number": 2000, "title": "1939: Fixing Preset Loading and Reworking Campaign Options Initial Value Load", "bodyText": "This fixes #1939", "createdAt": "2020-09-07T21:55:10Z", "url": "https://github.com/MegaMek/mekhq/pull/2000", "merged": true, "mergeCommit": {"oid": "a96aa9e97adb3b47dc7943e87c52dac783f0489c"}, "closed": true, "closedAt": "2020-09-16T03:21:20Z", "author": {"login": "Windchild292"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGa8I4AH2gAyNDgxNjU2MDk1OmFmYWNjMDA4ODUwMTI0Nzg5YTE1ZjIxMWUxNThhNjUxNjRhNTgzZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJTnTogFqTQ4OTI0MzI4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "afacc008850124789a15f211e158a65164a583e0", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/afacc008850124789a15f211e158a65164a583e0", "committedDate": "2020-09-07T04:04:00Z", "message": "Refactoring and minor code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc148dbb790f442c5a1cfd7a6f7eba070993f4e7", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/bc148dbb790f442c5a1cfd7a6f7eba070993f4e7", "committedDate": "2020-09-07T04:24:07Z", "message": "Refactoring and code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b239b56690bf89eecf53b9dce81a2c66e39e36", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/84b239b56690bf89eecf53b9dce81a2c66e39e36", "committedDate": "2020-09-07T15:37:39Z", "message": "Part 1 of implementing CampaignOptions rework for presets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094bd771ebe88345bee2ad150d652790716f6a99", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/094bd771ebe88345bee2ad150d652790716f6a99", "committedDate": "2020-09-07T17:25:11Z", "message": "Continuing reorder and fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39eabbc8d8ea123776ed4eabd7248656ad8e8137", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/39eabbc8d8ea123776ed4eabd7248656ad8e8137", "committedDate": "2020-09-07T17:28:20Z", "message": "Fixing merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c651cf3283f6d5fec78dc67c359ec635d96dcbed", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/c651cf3283f6d5fec78dc67c359ec635d96dcbed", "committedDate": "2020-09-07T19:41:27Z", "message": "Finishing changes relating to Random Skill Preferences and Campaign Options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e9d687d5c2a7fe88612cfffd62c2ca4874a5b1", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/b1e9d687d5c2a7fe88612cfffd62c2ca4874a5b1", "committedDate": "2020-09-07T21:20:20Z", "message": "Implementing SPA and Skill Type changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e998474c4ad230b9058d6984a7455cb275970a76", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/e998474c4ad230b9058d6984a7455cb275970a76", "committedDate": "2020-09-07T21:29:36Z", "message": "Fixing formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2528a105dc8259af53ddd4971ccfeaa9a2f4c9", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/1d2528a105dc8259af53ddd4971ccfeaa9a2f4c9", "committedDate": "2020-09-07T21:40:44Z", "message": "Formatting fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/mekhq/commit/e4f74e5a73fd42e5c6d327e398dcaae2d4f84646", "committedDate": "2020-09-15T19:47:52Z", "message": "Merge branch 'master' into dev_Windchild_1939"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjIyMDE4", "url": "https://github.com/MegaMek/mekhq/pull/2000#pullrequestreview-489222018", "createdAt": "2020-09-16T02:01:57Z", "commit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjowMTo1N1rOHSdUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjowNTowOFrOHSdXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNjcwNg==", "bodyText": "This probably ought to go into MekHQ preferences, but not for this PR.", "url": "https://github.com/MegaMek/mekhq/pull/2000#discussion_r489116706", "createdAt": "2020-09-16T02:01:57Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -4609,13 +4354,434 @@ private void fillRankInfo() {\n         }\n     }\n \n-    @SuppressWarnings(\"unused\") // FIXME:\n+    public void applyPreset(GamePreset gamePreset) {\n+        // Handle CampaignOptions and RandomSkillPreferences\n+        setOptions(gamePreset.getOptions(), gamePreset.getRandomSkillPreferences());\n+\n+        // Handle SPAs\n+        tempSPA = (gamePreset.getSpecialAbilities() != null) ? gamePreset.getSpecialAbilities() : new Hashtable<>();\n+        recreateSPAPanel(!getUnusedSPA().isEmpty());\n+\n+        if (gamePreset.getSkillHash() != null) {\n+            // Overwriting XP Table\n+            tableXP.setModel(new DefaultTableModel(getSkillCostsArray(gamePreset.getSkillHash()), TABLE_XP_COLUMN_NAMES));\n+            ((DefaultTableModel) tableXP.getModel()).fireTableDataChanged();\n+\n+            // Overwriting Skill List\n+            for (String skillName : SkillType.getSkillList()) {\n+                SkillType skillType = gamePreset.getSkillHash().get(skillName);\n+\n+                JSpinner spnTarget = hashSkillTargets.get(skillName);\n+                if (spnTarget == null) {\n+                    continue;\n+                }\n+\n+                spnTarget.setValue(skillType.getTarget());\n+                hashGreenSkill.get(skillName).setValue(skillType.getGreenLevel());\n+                hashRegSkill.get(skillName).setValue(skillType.getRegularLevel());\n+                hashVetSkill.get(skillName).setValue(skillType.getVeteranLevel());\n+                hashEliteSkill.get(skillName).setValue(skillType.getEliteLevel());\n+            }\n+        }\n+    }\n+\n+    public void setOptions(CampaignOptions options, RandomSkillPreferences randomSkillPreferences) {\n+        // Use the provided options and preferences when possible, but flip if they are null to be safe\n+        if (options != null) {\n+            this.options = options;\n+        } else {\n+            options = this.options;\n+        }\n+\n+        if (randomSkillPreferences != null) {\n+            this.rSkillPrefs = randomSkillPreferences;\n+        } else {\n+            randomSkillPreferences = this.rSkillPrefs;\n+        }\n+\n+        //region General Tab\n+        useUnitRatingCheckBox.setSelected(options.useDragoonRating());\n+        unitRatingMethodCombo.setSelectedItem(options.getUnitRatingMethod().getDescription());\n+        //endregion General Tab\n+\n+        //region Repair and Maintenance Tab\n+        useEraModsCheckBox.setSelected(options.useEraMods());\n+        assignedTechFirstCheckBox.setSelected(options.useAssignedTechFirst());\n+        resetToFirstTechCheckBox.setSelected(options.useResetToFirstTech());\n+        useQuirksBox.setSelected(options.useQuirks());\n+        useAeroSystemHitsBox.setSelected(options.useAeroSystemHits());\n+        if (options.isDestroyByMargin()) {\n+            useDamageMargin.doClick();\n+        }\n+        spnDamageMargin.setValue(options.getDestroyMargin());\n+        spnDestroyPartTarget.setValue(options.getDestroyPartTarget());\n+\n+        if (options.checkMaintenance()) {\n+            checkMaintenance.doClick();\n+        }\n+        spnMaintenanceDays.setValue(options.getMaintenanceCycleDays());\n+        spnMaintenanceBonus.setValue(options.getMaintenanceBonus());\n+        useQualityMaintenance.setSelected(options.useQualityMaintenance());\n+        reverseQualityNames.setSelected(options.reverseQualityNames());\n+        useUnofficialMaintenance.setSelected(options.useUnofficialMaintenance());\n+        logMaintenance.setSelected(options.logMaintenance());\n+        //endregion Repair and Maintenance Tab\n+\n+        //region Supplies and Acquisitions Tab\n+        spnAcquireWaitingPeriod.setValue(options.getWaitingPeriod());\n+        choiceAcquireSkill.setSelectedItem(options.getAcquisitionSkill());\n+        chkSupportStaffOnly.setSelected(options.isAcquisitionSupportStaffOnly());\n+        spnAcquireClanPenalty.setValue(options.getClanAcquisitionPenalty());\n+        spnAcquireIsPenalty.setValue(options.getIsAcquisitionPenalty());\n+        txtMaxAcquisitions.setText(Integer.toString(options.getMaxAcquisitions()));\n+\n+        spnNDiceTransitTime.setValue(options.getNDiceTransitTime());\n+        spnConstantTransitTime.setValue(options.getConstantTransitTime());\n+        choiceTransitTimeUnits.setSelectedItem(CampaignOptions.getTransitUnitName(options.getUnitTransitTime()));\n+        spnAcquireMinimum.setValue(options.getAcquireMinimumTime());\n+        choiceAcquireMinimumUnit.setSelectedItem(CampaignOptions.getTransitUnitName(options.getAcquireMinimumTimeUnit()));\n+        spnAcquireMosBonus.setValue(options.getAcquireMosBonus());\n+        choiceAcquireMosUnits.setSelectedItem(CampaignOptions.getTransitUnitName(options.getAcquireMosUnit()));\n+\n+        usePlanetaryAcquisitions.setSelected(options.usesPlanetaryAcquisition());\n+        spnMaxJumpPlanetaryAcquisitions.setValue(options.getMaxJumpsPlanetaryAcquisition());\n+        comboPlanetaryAcquisitionsFactionLimits.setSelectedIndex(options.getPlanetAcquisitionFactionLimit());\n+        disallowPlanetaryAcquisitionClanCrossover.setSelected(options.disallowPlanetAcquisitionClanCrossover());\n+        disallowClanPartsFromIS.setSelected(options.disallowClanPartsFromIS());\n+        spnPenaltyClanPartsFromIS.setValue(options.getPenaltyClanPartsFroIS());\n+        usePlanetaryAcquisitionsVerbose.setSelected(options.usePlanetAcquisitionVerboseReporting());\n+        for (int i = EquipmentType.RATING_A; i <= EquipmentType.RATING_F; i++) {\n+            spnPlanetAcquireTechBonus[i].setValue(options.getPlanetTechAcquisitionBonus(i));\n+            spnPlanetAcquireIndustryBonus[i].setValue(options.getPlanetIndustryAcquisitionBonus(i));\n+            spnPlanetAcquireOutputBonus[i].setValue(options.getPlanetOutputAcquisitionBonus(i));\n+        }\n+        //endregion Supplies and Acquisitions Tab\n+\n+        //region Tech Limits Tab\n+        if (options.limitByYear()) {\n+            limitByYearBox.doClick();\n+        }\n+        disallowExtinctStuffBox.setSelected(options.disallowExtinctStuff());\n+        allowClanPurchasesBox.setSelected(options.allowClanPurchases());\n+        allowISPurchasesBox.setSelected(options.allowISPurchases());\n+        allowCanonOnlyBox.setSelected(options.allowCanonOnly());\n+        allowCanonRefitOnlyBox.setSelected(options.allowCanonRefitOnly());\n+        choiceTechLevel.setSelectedIndex(options.getTechLevel());\n+        variableTechLevelBox.setSelected(options.useVariableTechLevel() && options.limitByYear());\n+        factionIntroDateBox.setSelected(options.useFactionIntroDate());\n+        useAmmoByTypeBox.setSelected(options.useAmmoByType());\n+        //endregion Tech Limits Tab\n+\n+        //region Personnel Tab\n+        useTacticsBox.setSelected(options.useTactics());\n+        useInitBonusBox.setSelected(options.useInitBonus());\n+        useToughnessBox.setSelected(options.useToughness());\n+        useArtilleryBox.setSelected(options.useArtillery());\n+        useAbilitiesBox.setSelected(options.useAbilities());\n+        useEdgeBox.setSelected(options.useEdge());\n+        useSupportEdgeBox.setSelected(options.useSupportEdge());\n+        useImplantsBox.setSelected(options.useImplants());\n+        chkCapturePrisoners.setSelected(options.capturePrisoners());\n+        comboPrisonerStatus.setSelectedItem(options.getDefaultPrisonerStatus());\n+        chkPrisonerBabyStatus.setSelected(options.getPrisonerBabyStatus());\n+        altQualityAveragingCheckBox.setSelected(options.useAltQualityAveraging());\n+        useAdvancedMedicalBox.setSelected(options.useAdvancedMedical());\n+        useDylansRandomXpBox.setSelected(options.useDylansRandomXp());\n+        spnHealWaitingPeriod.setValue(options.getHealingWaitingPeriod());\n+        spnNaturalHealWaitingPeriod.setValue(options.getNaturalHealingWaitingPeriod());\n+        spnMinimumHitsForVees.setValue(options.getMinimumHitsForVees());\n+        useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n+        useTougherHealing.setSelected(options.useTougherHealing());\n+        chkUseTransfers.setSelected(options.useTransfers());\n+        chkUseTimeInService.setSelected(options.getUseTimeInService());\n+        comboTimeInServiceDisplayFormat.setSelectedItem(options.getTimeInServiceDisplayFormat());\n+        chkUseTimeInRank.setSelected(options.getUseTimeInRank());\n+        comboTimeInRankDisplayFormat.setSelectedItem(options.getTimeInRankDisplayFormat());\n+        chkUseRetirementDateTracking.setSelected(options.useRetirementDateTracking());\n+        chkTrackTotalEarnings.setSelected(options.trackTotalEarnings());\n+        chkShowOriginFaction.setSelected(options.showOriginFaction());\n+        chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n+        chkRandomizeDependentsOrigin.setSelected(options.getRandomizeDependentOrigin());\n+        spnOriginSearchRadius.setValue(options.getOriginSearchRadius());\n+\n+        spnMinimumMarriageAge.setValue(options.getMinimumMarriageAge());\n+        spnCheckMutualAncestorsDepth.setValue(options.checkMutualAncestorsDepth());\n+        chkLogMarriageNameChange.setSelected(options.logMarriageNameChange());\n+        chkUseManualMarriages.setSelected(options.useManualMarriages());\n+        chkUseRandomMarriages.setSelected(options.useRandomMarriages());\n+        spnChanceRandomMarriages.setValue(options.getChanceRandomMarriages() * 100.0);\n+        spnMarriageAgeRange.setValue(options.getMarriageAgeRange());\n+        for (int i = 0; i < spnRandomMarriageSurnameWeights.length; i++) {\n+            spnRandomMarriageSurnameWeights[i].setValue(options.getRandomMarriageSurnameWeights(i) / 10.0);\n+        }\n+        chkUseRandomSameSexMarriages.setSelected(options.useRandomSameSexMarriages());\n+        spnChanceRandomSameSexMarriages.setValue(options.getChanceRandomSameSexMarriages() * 100.0);\n+        chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n+        spnChanceProcreation.setValue(options.getChanceProcreation() * 100.0);\n+        chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n+        spnChanceProcreationNoRelationship.setValue(options.getChanceProcreationNoRelationship() * 100.0);\n+        chkDisplayTrueDueDate.setSelected(options.getDisplayTrueDueDate());\n+        chkLogConception.setSelected(options.logConception());\n+        comboBabySurnameStyle.setSelectedItem(options.getBabySurnameStyle());\n+        chkDetermineFatherAtBirth.setSelected(options.determineFatherAtBirth());\n+        chkDisplayParentage.setSelected(options.displayParentage());\n+        comboDisplayFamilyLevel.setSelectedIndex(options.displayFamilyLevel());\n+        chkUseRandomDeaths.setSelected(options.useRandomDeaths());\n+        chkKeepMarriedNameUponSpouseDeath.setSelected(options.getKeepMarriedNameUponSpouseDeath());\n+\n+        spnSalaryCommission.setValue(options.getSalaryCommissionMultiplier());\n+        spnSalaryEnlisted.setValue(options.getSalaryEnlistedMultiplier());\n+        spnSalaryAntiMek.setValue(options.getSalaryAntiMekMultiplier());\n+        for (int i = 0; i < spnSalaryXp.length; i++) {\n+            spnSalaryXp[i].setValue(options.getSalaryXpMultiplier(i));\n+        }\n+        for (int i = 1; i < spnSalaryBase.length; i++) {\n+            spnSalaryBase[i].setValue(options.getBaseSalary(i));\n+        }\n+        //endregion Personnel Tab\n+\n+        //region Finances Tab\n+        payForPartsBox.setSelected(options.payForParts());\n+        payForRepairsBox.setSelected(options.payForRepairs());\n+        payForUnitsBox.setSelected(options.payForUnits());\n+        payForSalariesBox.setSelected(options.payForSalaries());\n+        payForOverheadBox.setSelected(options.payForOverhead());\n+        payForMaintainBox.setSelected(options.payForMaintain());\n+        payForTransportBox.setSelected(options.payForTransport());\n+        sellUnitsBox.setSelected(options.canSellUnits());\n+        sellPartsBox.setSelected(options.canSellParts());\n+        payForRecruitmentBox.setSelected(options.payForRecruitment());\n+        useLoanLimitsBox.setSelected(options.useLoanLimits());\n+        usePercentageMaintBox.setSelected(options.usePercentageMaint());\n+        useInfantryDontCountBox.setSelected(options.useInfantryDontCount());\n+        usePeacetimeCostBox.setSelected(options.usePeacetimeCost());\n+        useExtendedPartsModifierBox.setSelected(options.useExtendedPartsModifier());\n+        showPeacetimeCostBox.setSelected(options.showPeacetimeCost());\n+        comboFinancialYearDuration.setSelectedItem(options.getFinancialYearDuration());\n+        newFinancialYearFinancesToCSVExportBox.setSelected(options.getNewFinancialYearFinancesToCSVExport());\n+\n+        spnClanPriceModifier.setValue(options.getClanPriceModifier());\n+        for (int i = 0; i < spnUsedPartsValue.length; i++) {\n+            spnUsedPartsValue[i].setValue(options.getUsedPartsValue(i));\n+            partQualityLabels[i].setText(Part.getQualityName(i, options.reverseQualityNames()) + \" Quality\");\n+        }\n+        spnDamagedPartsValue.setValue(options.getDamagedPartsValue());\n+        spnOrderRefund.setValue(options.GetCanceledOrderReimbursement());\n+        //endregion Finances Tab\n+\n+        //region Mercenary Tab\n+        if (options.useEquipmentContractBase()) {\n+            btnContractEquipment.setSelected(true);\n+        } else {\n+            btnContractPersonnel.setSelected(true);\n+        }\n+        spnEquipPercent.setValue(options.getEquipmentContractPercent());\n+        spnDropshipPercent.setValue(options.getDropshipContractPercent());\n+        spnJumpshipPercent.setValue(options.getJumpshipContractPercent());\n+        spnWarshipPercent.setValue(options.getWarshipContractPercent());\n+        chkEquipContractSaleValue.setSelected(options.useEquipmentContractSaleValue());\n+        chkBLCSaleValue.setSelected(options.useBLCSaleValue());\n+        //endregion Mercenary Tab\n+\n+        //region Experience Tab\n+        spnScenarioXP.setValue(options.getScenarioXP());\n+        spnKillXP.setValue(options.getKillXPAward());\n+        spnKills.setValue(options.getKillsForXP());\n+        spnTaskXP.setValue(options.getTaskXP());\n+        spnNTasksXP.setValue(options.getNTasksXP());\n+        spnSuccessXP.setValue(options.getSuccessXP());\n+        spnMistakeXP.setValue(options.getMistakeXP());\n+        spnIdleXP.setValue(options.getIdleXP());\n+        spnMonthsIdleXP.setValue(options.getMonthsIdleXP());\n+        spnTargetIdleXP.setValue(options.getTargetIdleXP());\n+        spnContractNegotiationXP.setValue(options.getContractNegotiationXP());\n+        spnAdminWeeklyXP.setValue(options.getAdminXP());\n+        spnAdminWeeklyXPPeriod.setValue(options.getAdminXPPeriod());\n+        spnEdgeCost.setValue(options.getEdgeCost());\n+        //endregion Experience Tab\n+\n+        //region Skills Tab\n+        //endregion Skills Tab\n+\n+        //region Special Abilities Tab\n+        //endregion Special Abilities Tab\n+\n+        //region Skill Randomization Tab\n+        chkExtraRandom.setSelected(randomSkillPreferences.randomizeSkill());\n+        int[] phenotypeProbabilities = options.getPhenotypeProbabilities();\n+        for (int i = 0; i < phenotypeSpinners.length; i++) {\n+            phenotypeSpinners[i].setValue(phenotypeProbabilities[i]);\n+        }\n+        spnProbAntiMek.setValue(rSkillPrefs.getAntiMekProb());\n+        spnOverallRecruitBonus.setValue(rSkillPrefs.getOverallRecruitBonus());\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            spnTypeRecruitBonus[i].setValue(rSkillPrefs.getRecruitBonus(i));\n+        }\n+        spnArtyProb.setValue(rSkillPrefs.getArtilleryProb());\n+        spnArtyBonus.setValue(rSkillPrefs.getArtilleryBonus());\n+        spnSecondProb.setValue(rSkillPrefs.getSecondSkillProb());\n+        spnSecondBonus.setValue(rSkillPrefs.getSecondSkillBonus());\n+        spnTacticsGreen.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_GREEN));\n+        spnTacticsReg.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_REGULAR));\n+        spnTacticsVet.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_VETERAN));\n+        spnTacticsElite.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_ELITE));\n+        spnAbilGreen.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_GREEN));\n+        spnAbilReg.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_REGULAR));\n+        spnAbilVet.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_VETERAN));\n+        spnAbilElite.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_ELITE));\n+        spnCombatSA.setValue(rSkillPrefs.getCombatSmallArmsBonus());\n+        spnSupportSA.setValue(rSkillPrefs.getSupportSmallArmsBonus());\n+        //endregion Skill Randomization Tab\n+\n+        //region Rank System Tab\n+        //endregion Rank System Tab\n+\n+        //region Name and Portrait Generation Tab\n+        if (options.useOriginFactionForNames()) {\n+            chkUseOriginFactionForNames.doClick();\n+        }\n+\n+        boolean allSelected = true;\n+        boolean noneSelected = true;\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            boolean usePortrait = options.usePortraitForType(i);\n+            chkUsePortrait[i].setSelected(usePortrait);\n+            if (usePortrait) {\n+                noneSelected = false;\n+            } else {\n+                allSelected = false;\n+            }\n+        }\n+        if (allSelected) {\n+            allPortraitsBox.doClick();\n+        } else if (noneSelected) {\n+            noPortraitsBox.doClick();\n+        }\n+\n+        chkAssignPortraitOnRoleChange.setSelected(options.getAssignPortraitOnRoleChange());\n+        //endregion Name and Portrait Generation Tab\n+\n+        //region Personnel Market Tab\n+        personnelMarketType.setSelectedItem(options.getPersonnelMarketType());\n+        personnelMarketReportRefresh.setSelected(options.getPersonnelMarketReportRefresh());\n+        personnelMarketRandomEliteRemoval.setText(Integer.toString(options.getPersonnelMarketRandomEliteRemoval()));\n+        personnelMarketRandomVeteranRemoval.setText(Integer.toString(options.getPersonnelMarketRandomVeteranRemoval()));\n+        personnelMarketRandomRegularRemoval.setText(Integer.toString(options.getPersonnelMarketRandomRegularRemoval()));\n+        personnelMarketRandomGreenRemoval.setText(Integer.toString(options.getPersonnelMarketRandomGreenRemoval()));\n+        personnelMarketRandomUltraGreenRemoval.setText(Integer.toString(options.getPersonnelMarketRandomUltraGreenRemoval()));\n+        personnelMarketDylansWeight.setValue(options.getPersonnelMarketDylansWeight());\n+        //endregion Personnel Market Tab\n+\n+        //region Against the Bot Tab\n+        if (options.getUseAtB()) {\n+            chkUseAtB.doClick();\n+        }\n+        cbSkillLevel.setSelectedIndex(options.getSkillLevel());\n+\n+        chkUseShareSystem.setSelected(options.getUseShareSystem());\n+        chkSharesExcludeLargeCraft.setSelected(options.getSharesExcludeLargeCraft());\n+        chkSharesForAll.setSelected(options.getSharesForAll());\n+        chkAeroRecruitsHaveUnits.setSelected(options.getAeroRecruitsHaveUnits());\n+        chkRetirementRolls.setSelected(options.doRetirementRolls());\n+        chkCustomRetirementMods.setSelected(options.getCustomRetirementMods());\n+        chkFoundersNeverRetire.setSelected(options.getFoundersNeverRetire());\n+        chkAddDependents.setSelected(options.canAtBAddDependents());\n+        chkDependentsNeverLeave.setSelected(options.getDependentsNeverLeave());\n+        chkTrackUnitFatigue.setSelected(options.getTrackUnitFatigue());\n+        chkUseLeadership.setSelected(options.getUseLeadership());\n+        chkTrackOriginalUnit.setSelected(options.getTrackOriginalUnit());\n+        chkUseAero.setSelected(options.getUseAero());\n+        chkUseVehicles.setSelected(options.getUseVehicles());\n+        chkClanVehicles.setSelected(options.getClanVehicles());\n+        chkInstantUnitMarketDelivery.setSelected(options.getInstantUnitMarketDelivery());\n+        chkContractMarketReportRefresh.setSelected(options.getContractMarketReportRefresh());\n+        chkUnitMarketReportRefresh.setSelected(options.getUnitMarketReportRefresh());\n+\n+        spnSearchRadius.setValue(options.getSearchRadius());\n+        chkVariableContractLength.setSelected(options.getVariableContractLength());\n+        chkMercSizeLimited.setSelected(options.isMercSizeLimited());\n+        chkRestrictPartsByMission.setSelected(options.getRestrictPartsByMission());\n+        chkLimitLanceWeight.setSelected(options.getLimitLanceWeight());\n+        chkLimitLanceNumUnits.setSelected(options.getLimitLanceNumUnits());\n+        chkUseStrategy.setSelected(options.getUseStrategy());\n+        spnBaseStrategyDeployment.setValue(options.getBaseStrategyDeployment());\n+        spnAdditionalStrategyDeployment.setValue(options.getAdditionalStrategyDeployment());\n+        chkAdjustPaymentForStrategy.setSelected(options.getAdjustPaymentForStrategy());\n+        spnAtBBattleChance[AtBLanceRole.FIGHTING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.FIGHTING));\n+        spnAtBBattleChance[AtBLanceRole.DEFENCE.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.DEFENCE));\n+        spnAtBBattleChance[AtBLanceRole.SCOUTING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.SCOUTING));\n+        spnAtBBattleChance[AtBLanceRole.TRAINING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.TRAINING));\n+        btnIntensityUpdate.doClick();\n+        chkGenerateChases.setSelected(options.generateChases());\n+\n+        btnDynamicRATs.setSelected(!options.useStaticRATs());\n+        btnStaticRATs.setSelected(options.useStaticRATs());\n+        for (String rat : options.getRATs()) {\n+            List<Integer> eras = RATManager.getAllRATCollections().get(rat);\n+            if (eras != null) {\n+                StringBuilder displayName = new StringBuilder(rat);\n+                if (eras.size() > 0) {\n+                    displayName.append(\" (\").append(eras.get(0));\n+                    if (eras.size() > 1) {\n+                        displayName.append(\"-\").append(eras.get(eras.size() - 1));\n+                    }\n+                    displayName.append(\")\");\n+                }\n+                if (availableRatModel.contains(displayName.toString())) {\n+                    chosenRatModel.addElement(displayName.toString());\n+                    availableRatModel.removeElement(displayName.toString());\n+                }\n+            }\n+        }\n+        chkIgnoreRatEra.setSelected(options.canIgnoreRatEra());\n+\n+        chkDoubleVehicles.setSelected(options.getDoubleVehicles());\n+        spnOpforLanceTypeMechs.setValue(options.getOpforLanceTypeMechs());\n+        spnOpforLanceTypeMixed.setValue(options.getOpforLanceTypeMixed());\n+        spnOpforLanceTypeVehicles.setValue(options.getOpforLanceTypeVehicles());\n+        chkOpforUsesVTOLs.setSelected(options.getOpforUsesVTOLs());\n+        chkOpforUsesAero.setSelected(options.getAllowOpforAeros());\n+        spnOpforAeroChance.setValue(options.getOpforAeroChance());\n+        chkOpforUsesLocalForces.setSelected(options.getAllowOpforLocalUnits());\n+        spnOpforLocalForceChance.setValue(options.getOpforLocalUnitChance());\n+        chkAdjustPlayerVehicles.setSelected(options.getAdjustPlayerVehicles());\n+        chkRegionalMechVariations.setSelected(options.getRegionalMechVariations());\n+        chkAttachedPlayerCamouflage.setSelected(options.getAttachedPlayerCamouflage());\n+        chkPlayerControlsAttachedUnits.setSelected(options.getPlayerControlsAttachedUnits());\n+        chkUseDropShips.setSelected(options.getUseDropShips());\n+        chkUseWeatherConditions.setSelected(options.getUseWeatherConditions());\n+        chkUseLightConditions.setSelected(options.getUseLightConditions());\n+        chkUsePlanetaryConditions.setSelected(options.getUsePlanetaryConditions());\n+        chkUseAtBCapture.setSelected(options.getUseAtBCapture());\n+        spnStartGameDelay.setValue(options.getStartGameDelay());\n+        //endregion Against the Bot Tab\n+\n+        //region Miscellaneous Tab\n+        chkHistoricalDailyLog.setSelected(options.historicalDailyLog());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646"}, "originalPosition": 2846}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNjg4Ng==", "bodyText": "What's the point of having this method if it does nothing and isn't used anyway?", "url": "https://github.com/MegaMek/mekhq/pull/2000#discussion_r489116886", "createdAt": "2020-09-16T02:02:40Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -4609,13 +4354,434 @@ private void fillRankInfo() {\n         }\n     }\n \n-    @SuppressWarnings(\"unused\") // FIXME:\n+    public void applyPreset(GamePreset gamePreset) {\n+        // Handle CampaignOptions and RandomSkillPreferences\n+        setOptions(gamePreset.getOptions(), gamePreset.getRandomSkillPreferences());\n+\n+        // Handle SPAs\n+        tempSPA = (gamePreset.getSpecialAbilities() != null) ? gamePreset.getSpecialAbilities() : new Hashtable<>();\n+        recreateSPAPanel(!getUnusedSPA().isEmpty());\n+\n+        if (gamePreset.getSkillHash() != null) {\n+            // Overwriting XP Table\n+            tableXP.setModel(new DefaultTableModel(getSkillCostsArray(gamePreset.getSkillHash()), TABLE_XP_COLUMN_NAMES));\n+            ((DefaultTableModel) tableXP.getModel()).fireTableDataChanged();\n+\n+            // Overwriting Skill List\n+            for (String skillName : SkillType.getSkillList()) {\n+                SkillType skillType = gamePreset.getSkillHash().get(skillName);\n+\n+                JSpinner spnTarget = hashSkillTargets.get(skillName);\n+                if (spnTarget == null) {\n+                    continue;\n+                }\n+\n+                spnTarget.setValue(skillType.getTarget());\n+                hashGreenSkill.get(skillName).setValue(skillType.getGreenLevel());\n+                hashRegSkill.get(skillName).setValue(skillType.getRegularLevel());\n+                hashVetSkill.get(skillName).setValue(skillType.getVeteranLevel());\n+                hashEliteSkill.get(skillName).setValue(skillType.getEliteLevel());\n+            }\n+        }\n+    }\n+\n+    public void setOptions(CampaignOptions options, RandomSkillPreferences randomSkillPreferences) {\n+        // Use the provided options and preferences when possible, but flip if they are null to be safe\n+        if (options != null) {\n+            this.options = options;\n+        } else {\n+            options = this.options;\n+        }\n+\n+        if (randomSkillPreferences != null) {\n+            this.rSkillPrefs = randomSkillPreferences;\n+        } else {\n+            randomSkillPreferences = this.rSkillPrefs;\n+        }\n+\n+        //region General Tab\n+        useUnitRatingCheckBox.setSelected(options.useDragoonRating());\n+        unitRatingMethodCombo.setSelectedItem(options.getUnitRatingMethod().getDescription());\n+        //endregion General Tab\n+\n+        //region Repair and Maintenance Tab\n+        useEraModsCheckBox.setSelected(options.useEraMods());\n+        assignedTechFirstCheckBox.setSelected(options.useAssignedTechFirst());\n+        resetToFirstTechCheckBox.setSelected(options.useResetToFirstTech());\n+        useQuirksBox.setSelected(options.useQuirks());\n+        useAeroSystemHitsBox.setSelected(options.useAeroSystemHits());\n+        if (options.isDestroyByMargin()) {\n+            useDamageMargin.doClick();\n+        }\n+        spnDamageMargin.setValue(options.getDestroyMargin());\n+        spnDestroyPartTarget.setValue(options.getDestroyPartTarget());\n+\n+        if (options.checkMaintenance()) {\n+            checkMaintenance.doClick();\n+        }\n+        spnMaintenanceDays.setValue(options.getMaintenanceCycleDays());\n+        spnMaintenanceBonus.setValue(options.getMaintenanceBonus());\n+        useQualityMaintenance.setSelected(options.useQualityMaintenance());\n+        reverseQualityNames.setSelected(options.reverseQualityNames());\n+        useUnofficialMaintenance.setSelected(options.useUnofficialMaintenance());\n+        logMaintenance.setSelected(options.logMaintenance());\n+        //endregion Repair and Maintenance Tab\n+\n+        //region Supplies and Acquisitions Tab\n+        spnAcquireWaitingPeriod.setValue(options.getWaitingPeriod());\n+        choiceAcquireSkill.setSelectedItem(options.getAcquisitionSkill());\n+        chkSupportStaffOnly.setSelected(options.isAcquisitionSupportStaffOnly());\n+        spnAcquireClanPenalty.setValue(options.getClanAcquisitionPenalty());\n+        spnAcquireIsPenalty.setValue(options.getIsAcquisitionPenalty());\n+        txtMaxAcquisitions.setText(Integer.toString(options.getMaxAcquisitions()));\n+\n+        spnNDiceTransitTime.setValue(options.getNDiceTransitTime());\n+        spnConstantTransitTime.setValue(options.getConstantTransitTime());\n+        choiceTransitTimeUnits.setSelectedItem(CampaignOptions.getTransitUnitName(options.getUnitTransitTime()));\n+        spnAcquireMinimum.setValue(options.getAcquireMinimumTime());\n+        choiceAcquireMinimumUnit.setSelectedItem(CampaignOptions.getTransitUnitName(options.getAcquireMinimumTimeUnit()));\n+        spnAcquireMosBonus.setValue(options.getAcquireMosBonus());\n+        choiceAcquireMosUnits.setSelectedItem(CampaignOptions.getTransitUnitName(options.getAcquireMosUnit()));\n+\n+        usePlanetaryAcquisitions.setSelected(options.usesPlanetaryAcquisition());\n+        spnMaxJumpPlanetaryAcquisitions.setValue(options.getMaxJumpsPlanetaryAcquisition());\n+        comboPlanetaryAcquisitionsFactionLimits.setSelectedIndex(options.getPlanetAcquisitionFactionLimit());\n+        disallowPlanetaryAcquisitionClanCrossover.setSelected(options.disallowPlanetAcquisitionClanCrossover());\n+        disallowClanPartsFromIS.setSelected(options.disallowClanPartsFromIS());\n+        spnPenaltyClanPartsFromIS.setValue(options.getPenaltyClanPartsFroIS());\n+        usePlanetaryAcquisitionsVerbose.setSelected(options.usePlanetAcquisitionVerboseReporting());\n+        for (int i = EquipmentType.RATING_A; i <= EquipmentType.RATING_F; i++) {\n+            spnPlanetAcquireTechBonus[i].setValue(options.getPlanetTechAcquisitionBonus(i));\n+            spnPlanetAcquireIndustryBonus[i].setValue(options.getPlanetIndustryAcquisitionBonus(i));\n+            spnPlanetAcquireOutputBonus[i].setValue(options.getPlanetOutputAcquisitionBonus(i));\n+        }\n+        //endregion Supplies and Acquisitions Tab\n+\n+        //region Tech Limits Tab\n+        if (options.limitByYear()) {\n+            limitByYearBox.doClick();\n+        }\n+        disallowExtinctStuffBox.setSelected(options.disallowExtinctStuff());\n+        allowClanPurchasesBox.setSelected(options.allowClanPurchases());\n+        allowISPurchasesBox.setSelected(options.allowISPurchases());\n+        allowCanonOnlyBox.setSelected(options.allowCanonOnly());\n+        allowCanonRefitOnlyBox.setSelected(options.allowCanonRefitOnly());\n+        choiceTechLevel.setSelectedIndex(options.getTechLevel());\n+        variableTechLevelBox.setSelected(options.useVariableTechLevel() && options.limitByYear());\n+        factionIntroDateBox.setSelected(options.useFactionIntroDate());\n+        useAmmoByTypeBox.setSelected(options.useAmmoByType());\n+        //endregion Tech Limits Tab\n+\n+        //region Personnel Tab\n+        useTacticsBox.setSelected(options.useTactics());\n+        useInitBonusBox.setSelected(options.useInitBonus());\n+        useToughnessBox.setSelected(options.useToughness());\n+        useArtilleryBox.setSelected(options.useArtillery());\n+        useAbilitiesBox.setSelected(options.useAbilities());\n+        useEdgeBox.setSelected(options.useEdge());\n+        useSupportEdgeBox.setSelected(options.useSupportEdge());\n+        useImplantsBox.setSelected(options.useImplants());\n+        chkCapturePrisoners.setSelected(options.capturePrisoners());\n+        comboPrisonerStatus.setSelectedItem(options.getDefaultPrisonerStatus());\n+        chkPrisonerBabyStatus.setSelected(options.getPrisonerBabyStatus());\n+        altQualityAveragingCheckBox.setSelected(options.useAltQualityAveraging());\n+        useAdvancedMedicalBox.setSelected(options.useAdvancedMedical());\n+        useDylansRandomXpBox.setSelected(options.useDylansRandomXp());\n+        spnHealWaitingPeriod.setValue(options.getHealingWaitingPeriod());\n+        spnNaturalHealWaitingPeriod.setValue(options.getNaturalHealingWaitingPeriod());\n+        spnMinimumHitsForVees.setValue(options.getMinimumHitsForVees());\n+        useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n+        useTougherHealing.setSelected(options.useTougherHealing());\n+        chkUseTransfers.setSelected(options.useTransfers());\n+        chkUseTimeInService.setSelected(options.getUseTimeInService());\n+        comboTimeInServiceDisplayFormat.setSelectedItem(options.getTimeInServiceDisplayFormat());\n+        chkUseTimeInRank.setSelected(options.getUseTimeInRank());\n+        comboTimeInRankDisplayFormat.setSelectedItem(options.getTimeInRankDisplayFormat());\n+        chkUseRetirementDateTracking.setSelected(options.useRetirementDateTracking());\n+        chkTrackTotalEarnings.setSelected(options.trackTotalEarnings());\n+        chkShowOriginFaction.setSelected(options.showOriginFaction());\n+        chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n+        chkRandomizeDependentsOrigin.setSelected(options.getRandomizeDependentOrigin());\n+        spnOriginSearchRadius.setValue(options.getOriginSearchRadius());\n+\n+        spnMinimumMarriageAge.setValue(options.getMinimumMarriageAge());\n+        spnCheckMutualAncestorsDepth.setValue(options.checkMutualAncestorsDepth());\n+        chkLogMarriageNameChange.setSelected(options.logMarriageNameChange());\n+        chkUseManualMarriages.setSelected(options.useManualMarriages());\n+        chkUseRandomMarriages.setSelected(options.useRandomMarriages());\n+        spnChanceRandomMarriages.setValue(options.getChanceRandomMarriages() * 100.0);\n+        spnMarriageAgeRange.setValue(options.getMarriageAgeRange());\n+        for (int i = 0; i < spnRandomMarriageSurnameWeights.length; i++) {\n+            spnRandomMarriageSurnameWeights[i].setValue(options.getRandomMarriageSurnameWeights(i) / 10.0);\n+        }\n+        chkUseRandomSameSexMarriages.setSelected(options.useRandomSameSexMarriages());\n+        spnChanceRandomSameSexMarriages.setValue(options.getChanceRandomSameSexMarriages() * 100.0);\n+        chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n+        spnChanceProcreation.setValue(options.getChanceProcreation() * 100.0);\n+        chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n+        spnChanceProcreationNoRelationship.setValue(options.getChanceProcreationNoRelationship() * 100.0);\n+        chkDisplayTrueDueDate.setSelected(options.getDisplayTrueDueDate());\n+        chkLogConception.setSelected(options.logConception());\n+        comboBabySurnameStyle.setSelectedItem(options.getBabySurnameStyle());\n+        chkDetermineFatherAtBirth.setSelected(options.determineFatherAtBirth());\n+        chkDisplayParentage.setSelected(options.displayParentage());\n+        comboDisplayFamilyLevel.setSelectedIndex(options.displayFamilyLevel());\n+        chkUseRandomDeaths.setSelected(options.useRandomDeaths());\n+        chkKeepMarriedNameUponSpouseDeath.setSelected(options.getKeepMarriedNameUponSpouseDeath());\n+\n+        spnSalaryCommission.setValue(options.getSalaryCommissionMultiplier());\n+        spnSalaryEnlisted.setValue(options.getSalaryEnlistedMultiplier());\n+        spnSalaryAntiMek.setValue(options.getSalaryAntiMekMultiplier());\n+        for (int i = 0; i < spnSalaryXp.length; i++) {\n+            spnSalaryXp[i].setValue(options.getSalaryXpMultiplier(i));\n+        }\n+        for (int i = 1; i < spnSalaryBase.length; i++) {\n+            spnSalaryBase[i].setValue(options.getBaseSalary(i));\n+        }\n+        //endregion Personnel Tab\n+\n+        //region Finances Tab\n+        payForPartsBox.setSelected(options.payForParts());\n+        payForRepairsBox.setSelected(options.payForRepairs());\n+        payForUnitsBox.setSelected(options.payForUnits());\n+        payForSalariesBox.setSelected(options.payForSalaries());\n+        payForOverheadBox.setSelected(options.payForOverhead());\n+        payForMaintainBox.setSelected(options.payForMaintain());\n+        payForTransportBox.setSelected(options.payForTransport());\n+        sellUnitsBox.setSelected(options.canSellUnits());\n+        sellPartsBox.setSelected(options.canSellParts());\n+        payForRecruitmentBox.setSelected(options.payForRecruitment());\n+        useLoanLimitsBox.setSelected(options.useLoanLimits());\n+        usePercentageMaintBox.setSelected(options.usePercentageMaint());\n+        useInfantryDontCountBox.setSelected(options.useInfantryDontCount());\n+        usePeacetimeCostBox.setSelected(options.usePeacetimeCost());\n+        useExtendedPartsModifierBox.setSelected(options.useExtendedPartsModifier());\n+        showPeacetimeCostBox.setSelected(options.showPeacetimeCost());\n+        comboFinancialYearDuration.setSelectedItem(options.getFinancialYearDuration());\n+        newFinancialYearFinancesToCSVExportBox.setSelected(options.getNewFinancialYearFinancesToCSVExport());\n+\n+        spnClanPriceModifier.setValue(options.getClanPriceModifier());\n+        for (int i = 0; i < spnUsedPartsValue.length; i++) {\n+            spnUsedPartsValue[i].setValue(options.getUsedPartsValue(i));\n+            partQualityLabels[i].setText(Part.getQualityName(i, options.reverseQualityNames()) + \" Quality\");\n+        }\n+        spnDamagedPartsValue.setValue(options.getDamagedPartsValue());\n+        spnOrderRefund.setValue(options.GetCanceledOrderReimbursement());\n+        //endregion Finances Tab\n+\n+        //region Mercenary Tab\n+        if (options.useEquipmentContractBase()) {\n+            btnContractEquipment.setSelected(true);\n+        } else {\n+            btnContractPersonnel.setSelected(true);\n+        }\n+        spnEquipPercent.setValue(options.getEquipmentContractPercent());\n+        spnDropshipPercent.setValue(options.getDropshipContractPercent());\n+        spnJumpshipPercent.setValue(options.getJumpshipContractPercent());\n+        spnWarshipPercent.setValue(options.getWarshipContractPercent());\n+        chkEquipContractSaleValue.setSelected(options.useEquipmentContractSaleValue());\n+        chkBLCSaleValue.setSelected(options.useBLCSaleValue());\n+        //endregion Mercenary Tab\n+\n+        //region Experience Tab\n+        spnScenarioXP.setValue(options.getScenarioXP());\n+        spnKillXP.setValue(options.getKillXPAward());\n+        spnKills.setValue(options.getKillsForXP());\n+        spnTaskXP.setValue(options.getTaskXP());\n+        spnNTasksXP.setValue(options.getNTasksXP());\n+        spnSuccessXP.setValue(options.getSuccessXP());\n+        spnMistakeXP.setValue(options.getMistakeXP());\n+        spnIdleXP.setValue(options.getIdleXP());\n+        spnMonthsIdleXP.setValue(options.getMonthsIdleXP());\n+        spnTargetIdleXP.setValue(options.getTargetIdleXP());\n+        spnContractNegotiationXP.setValue(options.getContractNegotiationXP());\n+        spnAdminWeeklyXP.setValue(options.getAdminXP());\n+        spnAdminWeeklyXPPeriod.setValue(options.getAdminXPPeriod());\n+        spnEdgeCost.setValue(options.getEdgeCost());\n+        //endregion Experience Tab\n+\n+        //region Skills Tab\n+        //endregion Skills Tab\n+\n+        //region Special Abilities Tab\n+        //endregion Special Abilities Tab\n+\n+        //region Skill Randomization Tab\n+        chkExtraRandom.setSelected(randomSkillPreferences.randomizeSkill());\n+        int[] phenotypeProbabilities = options.getPhenotypeProbabilities();\n+        for (int i = 0; i < phenotypeSpinners.length; i++) {\n+            phenotypeSpinners[i].setValue(phenotypeProbabilities[i]);\n+        }\n+        spnProbAntiMek.setValue(rSkillPrefs.getAntiMekProb());\n+        spnOverallRecruitBonus.setValue(rSkillPrefs.getOverallRecruitBonus());\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            spnTypeRecruitBonus[i].setValue(rSkillPrefs.getRecruitBonus(i));\n+        }\n+        spnArtyProb.setValue(rSkillPrefs.getArtilleryProb());\n+        spnArtyBonus.setValue(rSkillPrefs.getArtilleryBonus());\n+        spnSecondProb.setValue(rSkillPrefs.getSecondSkillProb());\n+        spnSecondBonus.setValue(rSkillPrefs.getSecondSkillBonus());\n+        spnTacticsGreen.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_GREEN));\n+        spnTacticsReg.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_REGULAR));\n+        spnTacticsVet.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_VETERAN));\n+        spnTacticsElite.setValue(rSkillPrefs.getTacticsMod(SkillType.EXP_ELITE));\n+        spnAbilGreen.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_GREEN));\n+        spnAbilReg.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_REGULAR));\n+        spnAbilVet.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_VETERAN));\n+        spnAbilElite.setValue(rSkillPrefs.getSpecialAbilBonus(SkillType.EXP_ELITE));\n+        spnCombatSA.setValue(rSkillPrefs.getCombatSmallArmsBonus());\n+        spnSupportSA.setValue(rSkillPrefs.getSupportSmallArmsBonus());\n+        //endregion Skill Randomization Tab\n+\n+        //region Rank System Tab\n+        //endregion Rank System Tab\n+\n+        //region Name and Portrait Generation Tab\n+        if (options.useOriginFactionForNames()) {\n+            chkUseOriginFactionForNames.doClick();\n+        }\n+\n+        boolean allSelected = true;\n+        boolean noneSelected = true;\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            boolean usePortrait = options.usePortraitForType(i);\n+            chkUsePortrait[i].setSelected(usePortrait);\n+            if (usePortrait) {\n+                noneSelected = false;\n+            } else {\n+                allSelected = false;\n+            }\n+        }\n+        if (allSelected) {\n+            allPortraitsBox.doClick();\n+        } else if (noneSelected) {\n+            noPortraitsBox.doClick();\n+        }\n+\n+        chkAssignPortraitOnRoleChange.setSelected(options.getAssignPortraitOnRoleChange());\n+        //endregion Name and Portrait Generation Tab\n+\n+        //region Personnel Market Tab\n+        personnelMarketType.setSelectedItem(options.getPersonnelMarketType());\n+        personnelMarketReportRefresh.setSelected(options.getPersonnelMarketReportRefresh());\n+        personnelMarketRandomEliteRemoval.setText(Integer.toString(options.getPersonnelMarketRandomEliteRemoval()));\n+        personnelMarketRandomVeteranRemoval.setText(Integer.toString(options.getPersonnelMarketRandomVeteranRemoval()));\n+        personnelMarketRandomRegularRemoval.setText(Integer.toString(options.getPersonnelMarketRandomRegularRemoval()));\n+        personnelMarketRandomGreenRemoval.setText(Integer.toString(options.getPersonnelMarketRandomGreenRemoval()));\n+        personnelMarketRandomUltraGreenRemoval.setText(Integer.toString(options.getPersonnelMarketRandomUltraGreenRemoval()));\n+        personnelMarketDylansWeight.setValue(options.getPersonnelMarketDylansWeight());\n+        //endregion Personnel Market Tab\n+\n+        //region Against the Bot Tab\n+        if (options.getUseAtB()) {\n+            chkUseAtB.doClick();\n+        }\n+        cbSkillLevel.setSelectedIndex(options.getSkillLevel());\n+\n+        chkUseShareSystem.setSelected(options.getUseShareSystem());\n+        chkSharesExcludeLargeCraft.setSelected(options.getSharesExcludeLargeCraft());\n+        chkSharesForAll.setSelected(options.getSharesForAll());\n+        chkAeroRecruitsHaveUnits.setSelected(options.getAeroRecruitsHaveUnits());\n+        chkRetirementRolls.setSelected(options.doRetirementRolls());\n+        chkCustomRetirementMods.setSelected(options.getCustomRetirementMods());\n+        chkFoundersNeverRetire.setSelected(options.getFoundersNeverRetire());\n+        chkAddDependents.setSelected(options.canAtBAddDependents());\n+        chkDependentsNeverLeave.setSelected(options.getDependentsNeverLeave());\n+        chkTrackUnitFatigue.setSelected(options.getTrackUnitFatigue());\n+        chkUseLeadership.setSelected(options.getUseLeadership());\n+        chkTrackOriginalUnit.setSelected(options.getTrackOriginalUnit());\n+        chkUseAero.setSelected(options.getUseAero());\n+        chkUseVehicles.setSelected(options.getUseVehicles());\n+        chkClanVehicles.setSelected(options.getClanVehicles());\n+        chkInstantUnitMarketDelivery.setSelected(options.getInstantUnitMarketDelivery());\n+        chkContractMarketReportRefresh.setSelected(options.getContractMarketReportRefresh());\n+        chkUnitMarketReportRefresh.setSelected(options.getUnitMarketReportRefresh());\n+\n+        spnSearchRadius.setValue(options.getSearchRadius());\n+        chkVariableContractLength.setSelected(options.getVariableContractLength());\n+        chkMercSizeLimited.setSelected(options.isMercSizeLimited());\n+        chkRestrictPartsByMission.setSelected(options.getRestrictPartsByMission());\n+        chkLimitLanceWeight.setSelected(options.getLimitLanceWeight());\n+        chkLimitLanceNumUnits.setSelected(options.getLimitLanceNumUnits());\n+        chkUseStrategy.setSelected(options.getUseStrategy());\n+        spnBaseStrategyDeployment.setValue(options.getBaseStrategyDeployment());\n+        spnAdditionalStrategyDeployment.setValue(options.getAdditionalStrategyDeployment());\n+        chkAdjustPaymentForStrategy.setSelected(options.getAdjustPaymentForStrategy());\n+        spnAtBBattleChance[AtBLanceRole.FIGHTING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.FIGHTING));\n+        spnAtBBattleChance[AtBLanceRole.DEFENCE.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.DEFENCE));\n+        spnAtBBattleChance[AtBLanceRole.SCOUTING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.SCOUTING));\n+        spnAtBBattleChance[AtBLanceRole.TRAINING.ordinal()].setValue(options.getAtBBattleChance(AtBLanceRole.TRAINING));\n+        btnIntensityUpdate.doClick();\n+        chkGenerateChases.setSelected(options.generateChases());\n+\n+        btnDynamicRATs.setSelected(!options.useStaticRATs());\n+        btnStaticRATs.setSelected(options.useStaticRATs());\n+        for (String rat : options.getRATs()) {\n+            List<Integer> eras = RATManager.getAllRATCollections().get(rat);\n+            if (eras != null) {\n+                StringBuilder displayName = new StringBuilder(rat);\n+                if (eras.size() > 0) {\n+                    displayName.append(\" (\").append(eras.get(0));\n+                    if (eras.size() > 1) {\n+                        displayName.append(\"-\").append(eras.get(eras.size() - 1));\n+                    }\n+                    displayName.append(\")\");\n+                }\n+                if (availableRatModel.contains(displayName.toString())) {\n+                    chosenRatModel.addElement(displayName.toString());\n+                    availableRatModel.removeElement(displayName.toString());\n+                }\n+            }\n+        }\n+        chkIgnoreRatEra.setSelected(options.canIgnoreRatEra());\n+\n+        chkDoubleVehicles.setSelected(options.getDoubleVehicles());\n+        spnOpforLanceTypeMechs.setValue(options.getOpforLanceTypeMechs());\n+        spnOpforLanceTypeMixed.setValue(options.getOpforLanceTypeMixed());\n+        spnOpforLanceTypeVehicles.setValue(options.getOpforLanceTypeVehicles());\n+        chkOpforUsesVTOLs.setSelected(options.getOpforUsesVTOLs());\n+        chkOpforUsesAero.setSelected(options.getAllowOpforAeros());\n+        spnOpforAeroChance.setValue(options.getOpforAeroChance());\n+        chkOpforUsesLocalForces.setSelected(options.getAllowOpforLocalUnits());\n+        spnOpforLocalForceChance.setValue(options.getOpforLocalUnitChance());\n+        chkAdjustPlayerVehicles.setSelected(options.getAdjustPlayerVehicles());\n+        chkRegionalMechVariations.setSelected(options.getRegionalMechVariations());\n+        chkAttachedPlayerCamouflage.setSelected(options.getAttachedPlayerCamouflage());\n+        chkPlayerControlsAttachedUnits.setSelected(options.getPlayerControlsAttachedUnits());\n+        chkUseDropShips.setSelected(options.getUseDropShips());\n+        chkUseWeatherConditions.setSelected(options.getUseWeatherConditions());\n+        chkUseLightConditions.setSelected(options.getUseLightConditions());\n+        chkUsePlanetaryConditions.setSelected(options.getUsePlanetaryConditions());\n+        chkUseAtBCapture.setSelected(options.getUseAtBCapture());\n+        spnStartGameDelay.setValue(options.getStartGameDelay());\n+        //endregion Against the Bot Tab\n+\n+        //region Miscellaneous Tab\n+        chkHistoricalDailyLog.setSelected(options.historicalDailyLog());\n+        //endregion Miscellaneous Tab\n+    }\n+\n+    public static String[][] getSkillCostsArray(Hashtable<String, SkillType> skillHash) {\n+        String[][] array = new String[SkillType.getSkillList().length][11];\n+        int i = 0;\n+        for (String name : SkillType.getSkillList()) {\n+            SkillType type = skillHash.get(name);\n+            for (int j = 0; j < 11; j++) {\n+                array[i][j] = Integer.toString(type.getCost(j));\n+            }\n+            i++;\n+        }\n+        return array;\n+    }\n+    //endregion Initialization\n+\n+    @SuppressWarnings(value = \"unused\") // FIXME:\n     private void tableRanksValueChanged(javax.swing.event.ListSelectionEvent evt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646"}, "originalPosition": 2865}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNzU4MA==", "bodyText": "I assume this construct automatically closes the input stream regardless of whether the try/catch block throws an exception or not?", "url": "https://github.com/MegaMek/mekhq/pull/2000#discussion_r489117580", "createdAt": "2020-09-16T02:05:08Z", "author": {"login": "NickAragua"}, "path": "MekHQ/src/mekhq/campaign/GamePreset.java", "diffHunk": "@@ -228,53 +234,41 @@ else if (xn.equalsIgnoreCase(\"campaignOptions\")) {\n                             continue;\n                         }\n                         if (!wn2.getNodeName().equalsIgnoreCase(\"ability\")) {\n-                            // Error condition of sorts!\n-                            // Errr, what should we do here?\n-                            MekHQ.getLogger().log(GamePreset.class, METHOD_NAME, LogLevel.ERROR,\n-                                    \"Unknown node type not loaded in Special Ability nodes: \" //$NON-NLS-1$\n-                                             + wn2.getNodeName());\n+                            MekHQ.getLogger().error(GamePreset.class, METHOD_NAME,\n+                                    \"Unknown node type not loaded in Special Ability nodes: \" + wn2.getNodeName());\n                             continue;\n                         }\n \n-                        SpecialAbility.generateSeparateInstanceFromXML(wn2, preset.specialAbilities, options);\n+                        SpecialAbility.generateSeparateInstanceFromXML(wn2, preset.getSpecialAbilities(), options);\n                     }\n                 }\n             }\n         }\n-\t\treturn preset;\n-\t}\n-\n-\t/**\n-\t * Collect and load all the Game Presets in files in a given directory and\n-\t * return an ArrayList of them\n-\t * @param directory\n-\t * @return\n-\t */\n-\tpublic static ArrayList<GamePreset> getGamePresetsIn(String directory) {\n-\n-\t\tArrayList<GamePreset> presets = new ArrayList<GamePreset>();\n-\n-\t\tFile[] files = Utilities.getAllFiles(MekHQ.PRESET_DIR, new FilenameFilter() {\n-            public boolean accept(File dir, String name) {\n-                return name.toLowerCase().endsWith(\".xml\");\n-            }\n-        });\n-    \tfor(File file : files) {\n-    \t\t// And then load the campaign object from it.\n-    \t\tFileInputStream fis = null;\n-    \t\tGamePreset preset = null;\n-\n-    \t\ttry {\n-    \t\t\tfis = new FileInputStream(file);\n-    \t\t\tpreset = GamePreset.createGamePresetFromXMLFileInputStream(fis);\n-    \t\t\tif(preset.isValid()) {\n-    \t\t\t\tpresets.add(preset);\n-    \t\t\t}\n-    \t\t\tfis.close();\n-    \t\t} catch (Exception e) {\n+        return preset;\n+    }\n+\n+    /**\n+     * Collect and load all the Game Presets in files in a given directory and\n+     * return a List of them\n+     * @return a list of all of the game presets in the given directory\n+     */\n+    public static List<GamePreset> getGamePresetsIn() {\n+        List<GamePreset> presets = new ArrayList<>();\n+\n+        File[] files = Utilities.getAllFiles(MekHQ.PRESET_DIR, (dir, name) -> name.toLowerCase().endsWith(\".xml\"));\n+        for (File file : files) {\n+            // And then load the campaign object from it.\n+            GamePreset preset;\n+\n+            try (FileInputStream fis = new FileInputStream(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646"}, "originalPosition": 353}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjQzMjgw", "url": "https://github.com/MegaMek/mekhq/pull/2000#pullrequestreview-489243280", "createdAt": "2020-09-16T03:13:41Z", "commit": {"oid": "e4f74e5a73fd42e5c6d327e398dcaae2d4f84646"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4189, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}