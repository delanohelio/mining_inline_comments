{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNzI4OTI1", "number": 1533, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyMDowN1rODkGtSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDoxMDo1NlrODoBCaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1MjI1OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyMDowN1rOFwP83g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozMjozOFrOFwQSJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzMxMA==", "bodyText": "Is this to help remember these values?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386137310", "createdAt": "2020-03-01T20:20:07Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "diffHunk": "@@ -64,7 +64,16 @@\n \tpublic static final int P_PROTOMECH = 4;\n \tpublic static final int P_NAVAL = 5;\n \tpublic static final int P_NUM = 6;\n-\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0Mjc1Nw==", "bodyText": "This is for my bloodname merge, as we've currently got two different lists, one in person and one in Bloodname. I was going to do it now, but wanted to cut down on the scope creep a bit. I've added a TODO message to remind myself.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142757", "createdAt": "2020-03-01T21:32:38Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "diffHunk": "@@ -64,7 +64,16 @@\n \tpublic static final int P_PROTOMECH = 4;\n \tpublic static final int P_NAVAL = 5;\n \tpublic static final int P_NUM = 6;\n-\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzMxMA=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1MjQwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyMDozM1rOFwP89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozMToxM1rOFwQRqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzMzNQ==", "bodyText": "indentation is off", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386137335", "createdAt": "2020-03-01T20:20:33Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "diffHunk": "@@ -161,28 +170,35 @@ public NameAcquired getAbsorbed() {\n \tpublic int phenotypeMultiplier(int warriorType, int year) {\n \t\tswitch (phenotype) {\n \t\tcase P_MECHWARRIOR:\n-\t\t\treturn (warriorType == P_MECHWARRIOR)?3:0;\n+\t\t\treturn (warriorType == P_MECHWARRIOR) ? 3 : 0;\n \t\tcase P_AEROSPACE:\n-\t\t\treturn (warriorType == P_AEROSPACE || warriorType == P_PROTOMECH)?3:0;\n+\t\t\treturn (warriorType == P_AEROSPACE || warriorType == P_PROTOMECH) ? 3 : 0;\n \t\tcase P_ELEMENTAL:\n \t\t\tif (year < 2870) {\n \t\t\t\treturn 1;\n \t\t\t}\n \t\t\treturn (warriorType == P_ELEMENTAL)?3:0;\n \t\tcase P_PROTOMECH:\n \t\t\tswitch (warriorType) {\n-\t\t\tcase P_PROTOMECH:return 9;\n-\t\t\tcase P_AEROSPACE:return 1;\n-\t\t\tdefault:return 0;\n+\t\t\tcase P_PROTOMECH:\n+\t\t\t    return 9;\n+\t\t\tcase P_AEROSPACE:\n+\t\t\t    return 1;\n+\t\t\tdefault:\n+\t\t\t    return 0;\n \t\t\t}\n \t\tcase P_NAVAL:\n-\t\t\treturn (warriorType == P_NAVAL)?3:0;\n+\t\t\treturn (warriorType == P_NAVAL) ? 3 : 0;\n \t\tcase P_GENERAL:\n \t\tdefault:\n-\t\t\treturn 1;\n+\t\t    return 1;\n \t\t}\n \t}\n \n+\tpublic static int determinePhenotype(Person person) {\n+\t    return 0; // TODO : Windchild Fix Me During Personnel Wave 2\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjYzNA==", "bodyText": "The whole file is tab spaced, fixing", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142634", "createdAt": "2020-03-01T21:31:13Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Bloodname.java", "diffHunk": "@@ -161,28 +170,35 @@ public NameAcquired getAbsorbed() {\n \tpublic int phenotypeMultiplier(int warriorType, int year) {\n \t\tswitch (phenotype) {\n \t\tcase P_MECHWARRIOR:\n-\t\t\treturn (warriorType == P_MECHWARRIOR)?3:0;\n+\t\t\treturn (warriorType == P_MECHWARRIOR) ? 3 : 0;\n \t\tcase P_AEROSPACE:\n-\t\t\treturn (warriorType == P_AEROSPACE || warriorType == P_PROTOMECH)?3:0;\n+\t\t\treturn (warriorType == P_AEROSPACE || warriorType == P_PROTOMECH) ? 3 : 0;\n \t\tcase P_ELEMENTAL:\n \t\t\tif (year < 2870) {\n \t\t\t\treturn 1;\n \t\t\t}\n \t\t\treturn (warriorType == P_ELEMENTAL)?3:0;\n \t\tcase P_PROTOMECH:\n \t\t\tswitch (warriorType) {\n-\t\t\tcase P_PROTOMECH:return 9;\n-\t\t\tcase P_AEROSPACE:return 1;\n-\t\t\tdefault:return 0;\n+\t\t\tcase P_PROTOMECH:\n+\t\t\t    return 9;\n+\t\t\tcase P_AEROSPACE:\n+\t\t\t    return 1;\n+\t\t\tdefault:\n+\t\t\t    return 0;\n \t\t\t}\n \t\tcase P_NAVAL:\n-\t\t\treturn (warriorType == P_NAVAL)?3:0;\n+\t\t\treturn (warriorType == P_NAVAL) ? 3 : 0;\n \t\tcase P_GENERAL:\n \t\tdefault:\n-\t\t\treturn 1;\n+\t\t    return 1;\n \t\t}\n \t}\n \n+\tpublic static int determinePhenotype(Person person) {\n+\t    return 0; // TODO : Windchild Fix Me During Personnel Wave 2\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzMzNQ=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1NTI4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/service/MassRepairService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyNTozM1rOFwP-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNDozMFrOFwQSsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzY5MA==", "bodyText": "Looks like mixed tabs/spaces in this file", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386137690", "createdAt": "2020-03-01T20:25:33Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/service/MassRepairService.java", "diffHunk": "@@ -805,11 +805,7 @@ private static MassRepairPartAction repairPart(CampaignGUI campaignGUI, IPartWor\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \n-\t\t\t\tif (configuredOptions.isOptimizeToCompleteToday()) {\n-\t\t\t\t\tisSameDayTech = false;\n-\t\t\t\t} else {\n-\t\t\t\t\tisSameDayTech = true;\n-\t\t\t\t}\n+                isSameDayTech = !configuredOptions.isOptimizeToCompleteToday();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0Mjg5Nw==", "bodyText": "Yep, pretty much the whole file was tab spaced. Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142897", "createdAt": "2020-03-01T21:34:30Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/service/MassRepairService.java", "diffHunk": "@@ -805,11 +805,7 @@ private static MassRepairPartAction repairPart(CampaignGUI campaignGUI, IPartWor\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \n-\t\t\t\tif (configuredOptions.isOptimizeToCompleteToday()) {\n-\t\t\t\t\tisSameDayTech = false;\n-\t\t\t\t} else {\n-\t\t\t\t\tisSameDayTech = true;\n-\t\t\t\t}\n+                isSameDayTech = !configuredOptions.isOptimizeToCompleteToday();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzY5MA=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1NjE2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/view/PersonViewPanel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyNjo1OVrOFwP-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0NjowMlrOFwo8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzgwMw==", "bodyText": "Could this be loop local instead of an instance field?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386137803", "createdAt": "2020-03-01T20:26:59Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/view/PersonViewPanel.java", "diffHunk": "@@ -740,22 +760,52 @@ private JPanel fillFamily() {\n             lblSpouse2.addMouseListener(new MouseAdapter() {\n                 @Override\n                 public void mouseClicked(MouseEvent e) {\n-                    gui.getPersonnelTab().focusOnPerson(person.getSpouseID());\n+                    gui.getPersonnelTab().focusOnPerson(person.getSpouseId());\n                 }\n             });\n-            gridBagConstraints = new GridBagConstraints();\n             gridBagConstraints.gridx = 1;\n             gridBagConstraints.gridy = firsty;\n             gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n-            gridBagConstraints.fill = GridBagConstraints.NONE;\n-            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n             pnlFamily.add(lblSpouse2, gridBagConstraints);\n             firsty++;\n         }\n \n+        if (person.hasFormerSpouse()) {\n+            lblFormerSpouses1.setName(\"lblFormerSpouses1\"); // NOI18N //$NON-NLS-1$\n+            lblFormerSpouses1.setText(resourceMap.getString(\"lblFormerSpouses1.text\")); //$NON-NLS-1$\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = firsty;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            pnlFamily.add(lblFormerSpouses1, gridBagConstraints);\n+\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n+\n+            for (FormerSpouse formerSpouse : person.getFormerSpouses()) {\n+                Person ex = campaign.getPerson(formerSpouse.getFormerSpouseId());\n+                gridBagConstraints.gridy = firsty;\n+                lblFormerSpouses2 = new JLabel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjkzNA==", "bodyText": "It could be, I just find it cleaner listed above.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142934", "createdAt": "2020-03-01T21:35:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/view/PersonViewPanel.java", "diffHunk": "@@ -740,22 +760,52 @@ private JPanel fillFamily() {\n             lblSpouse2.addMouseListener(new MouseAdapter() {\n                 @Override\n                 public void mouseClicked(MouseEvent e) {\n-                    gui.getPersonnelTab().focusOnPerson(person.getSpouseID());\n+                    gui.getPersonnelTab().focusOnPerson(person.getSpouseId());\n                 }\n             });\n-            gridBagConstraints = new GridBagConstraints();\n             gridBagConstraints.gridx = 1;\n             gridBagConstraints.gridy = firsty;\n             gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n-            gridBagConstraints.fill = GridBagConstraints.NONE;\n-            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n             pnlFamily.add(lblSpouse2, gridBagConstraints);\n             firsty++;\n         }\n \n+        if (person.hasFormerSpouse()) {\n+            lblFormerSpouses1.setName(\"lblFormerSpouses1\"); // NOI18N //$NON-NLS-1$\n+            lblFormerSpouses1.setText(resourceMap.getString(\"lblFormerSpouses1.text\")); //$NON-NLS-1$\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = firsty;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            pnlFamily.add(lblFormerSpouses1, gridBagConstraints);\n+\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n+\n+            for (FormerSpouse formerSpouse : person.getFormerSpouses()) {\n+                Person ex = campaign.getPerson(formerSpouse.getFormerSpouseId());\n+                gridBagConstraints.gridy = firsty;\n+                lblFormerSpouses2 = new JLabel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzgwMw=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0NjgwMw==", "bodyText": "I'm going to swap this out in Wave 2, and try to clean up the code here then.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386546803", "createdAt": "2020-03-02T17:46:02Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/view/PersonViewPanel.java", "diffHunk": "@@ -740,22 +760,52 @@ private JPanel fillFamily() {\n             lblSpouse2.addMouseListener(new MouseAdapter() {\n                 @Override\n                 public void mouseClicked(MouseEvent e) {\n-                    gui.getPersonnelTab().focusOnPerson(person.getSpouseID());\n+                    gui.getPersonnelTab().focusOnPerson(person.getSpouseId());\n                 }\n             });\n-            gridBagConstraints = new GridBagConstraints();\n             gridBagConstraints.gridx = 1;\n             gridBagConstraints.gridy = firsty;\n             gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n-            gridBagConstraints.fill = GridBagConstraints.NONE;\n-            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n             pnlFamily.add(lblSpouse2, gridBagConstraints);\n             firsty++;\n         }\n \n+        if (person.hasFormerSpouse()) {\n+            lblFormerSpouses1.setName(\"lblFormerSpouses1\"); // NOI18N //$NON-NLS-1$\n+            lblFormerSpouses1.setText(resourceMap.getString(\"lblFormerSpouses1.text\")); //$NON-NLS-1$\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = firsty;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            pnlFamily.add(lblFormerSpouses1, gridBagConstraints);\n+\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.insets = new Insets(0, 10, 0, 0);\n+\n+            for (FormerSpouse formerSpouse : person.getFormerSpouses()) {\n+                Person ex = campaign.getPerson(formerSpouse.getFormerSpouseId());\n+                gridBagConstraints.gridy = firsty;\n+                lblFormerSpouses2 = new JLabel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzgwMw=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1ODE4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/CustomizePersonDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoyOTo1N1rOFwP_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToyNjoyMFrOFwQQWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODA0Ng==", "bodyText": "mixed tabs and spaces it appears", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138046", "createdAt": "2020-03-01T20:29:57Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/dialog/CustomizePersonDialog.java", "diffHunk": "@@ -985,14 +933,15 @@ private void randomBloodname() {\n \t\t\tphenotype = Bloodname.P_PROTOMECH;\n \t\t\tbreak;\n \t\t}\n-\t\ttextBloodname.setText(Bloodname.randomBloodname(campaign.getFactionCode(), phenotype,\n-\t\t\t\t\tcampaign.getCalendar().get(Calendar.YEAR)).getName());   \t\n+\t\ttextBloodname.setText(Bloodname.randomBloodname(campaign.getFaction().isClan()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 760}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjI5OA==", "bodyText": "Yeah, the whole file was that. Fixed now", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142298", "createdAt": "2020-03-01T21:26:20Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/CustomizePersonDialog.java", "diffHunk": "@@ -985,14 +933,15 @@ private void randomBloodname() {\n \t\t\tphenotype = Bloodname.P_PROTOMECH;\n \t\t\tbreak;\n \t\t}\n-\t\ttextBloodname.setText(Bloodname.randomBloodname(campaign.getFactionCode(), phenotype,\n-\t\t\t\t\tcampaign.getCalendar().get(Calendar.YEAR)).getName());   \t\n+\t\ttextBloodname.setText(Bloodname.randomBloodname(campaign.getFaction().isClan()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODA0Ng=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 760}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1OTEwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMTozMlrOFwQAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToyNjoxMVrOFwQQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODE3MQ==", "bodyText": "What sort of exceptions are we trying to catch that we can't expect?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138171", "createdAt": "2020-03-01T20:31:32Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -1588,385 +1544,471 @@ private void initComponents() {\n \n         tabOptions.addTab(resourceMap.getString(\"panTech.TabConstraints.tabTitle\"), panTech); // NOI18N\n \n-        panPersonnel.setName(\"panPersonnel\"); // NOI18N\n-        panPersonnel.setLayout(new java.awt.GridBagLayout());\n-\n-        useTacticsBox.setText(resourceMap.getString(\"useTacticsBox.text\")); // NOI18N\n-        useTacticsBox.setToolTipText(resourceMap.getString(\"useTacticsBox.toolTipText\")); // NOI18N\n-        useTacticsBox.setName(\"useTacticsBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useTacticsBox, gridBagConstraints);\n-\n-        useInitBonusBox.setText(resourceMap.getString(\"useInitBonusBox.text\")); // NOI18N\n-        useInitBonusBox.setToolTipText(resourceMap.getString(\"useInitBonusBox.toolTipText\")); // NOI18N\n-        useInitBonusBox.setName(\"useInitBonusBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 1;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useInitBonusBox, gridBagConstraints);\n-\n-        useToughnessBox.setText(resourceMap.getString(\"useToughnessBox.text\")); // NOI18N\n-        useToughnessBox.setToolTipText(resourceMap.getString(\"useToughnessBox.toolTipText\")); // NOI18N\n-        useToughnessBox.setName(\"useToughnessBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 2;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useToughnessBox, gridBagConstraints);\n-\n-        useArtilleryBox.setText(resourceMap.getString(\"useArtilleryBox.text\")); // NOI18N\n-        useArtilleryBox.setToolTipText(resourceMap.getString(\"useArtilleryBox.toolTipText\")); // NOI18N\n-        useArtilleryBox.setName(\"useArtilleryBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 3;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useArtilleryBox, gridBagConstraints);\n-\n-        useAbilitiesBox.setText(resourceMap.getString(\"useAbilitiesBox.text\")); // NOI18N\n-        useAbilitiesBox.setToolTipText(resourceMap.getString(\"useAbilitiesBox.toolTipText\")); // NOI18N\n-        useAbilitiesBox.setName(\"useAbilitiesBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 4;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useAbilitiesBox, gridBagConstraints);\n-\n-        useEdgeBox.setText(resourceMap.getString(\"useEdgeBox.text\")); // NOI18N\n-        useEdgeBox.setToolTipText(resourceMap.getString(\"useEdgeBox.toolTipText\")); // NOI18N\n-        useEdgeBox.setName(\"useEdgeBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 5;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useEdgeBox, gridBagConstraints);\n-\n-        useSupportEdgeBox.setText(resourceMap.getString(\"useSupportEdgeBox.text\")); // NOI18N\n-        useSupportEdgeBox.setToolTipText(resourceMap.getString(\"useSupportEdgeBox.toolTipText\")); // NOI18N\n-        useSupportEdgeBox.setName(\"useSupportEdgeBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 6;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useSupportEdgeBox, gridBagConstraints);\n-\n-        useImplantsBox.setText(resourceMap.getString(\"useImplantsBox.text\")); // NOI18N\n-        useImplantsBox.setToolTipText(resourceMap.getString(\"useImplantsBox.toolTipText\")); // NOI18N\n-        useImplantsBox.setName(\"useImplantsBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 7;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useImplantsBox, gridBagConstraints);\n-\n-        chkCapturePrisoners.setText(resourceMap.getString(\"chkCapturePrisoners.text\")); // NOI18N\n-        chkCapturePrisoners.setToolTipText(resourceMap.getString(\"chkCapturePrisoners.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 8;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(chkCapturePrisoners, gridBagConstraints);\n-\n-        DefaultComboBoxModel<String> prisonerStatusModel = new DefaultComboBoxModel<>();\n-        prisonerStatusModel.addElement(\"Prisoner\");\n-        prisonerStatusModel.addElement(\"Bondsman\");\n-        comboPrisonerStatus = new JComboBox<>(prisonerStatusModel);\n-        comboPrisonerStatus.setSelectedIndex(options.getDefaultPrisonerStatus());\n-        JPanel pnlPrisonerStatus = new JPanel();\n-        pnlPrisonerStatus.add(new JLabel(\"Default Prisoner Status:\"));\n-        pnlPrisonerStatus.add(comboPrisonerStatus);\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 9;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlPrisonerStatus, gridBagConstraints);\n-\n-\t\taltQualityAveragingCheckBox.setText(resourceMap.getString(\"altQualityAveragingCheckBox.text\")); // NOI18N\n-        altQualityAveragingCheckBox.setToolTipText(resourceMap.getString(\"altQualityAveragingCheckBox.toolTipText\")); // NOI18N\n-        altQualityAveragingCheckBox.setName(\"altQualityAveragingCheckBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 10;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(altQualityAveragingCheckBox, gridBagConstraints);\n-\n-        useAdvancedMedicalBox.setText(resourceMap.getString(\"useAdvancedMedicalBox.text\")); // NOI18N\n-        useAdvancedMedicalBox.setToolTipText(resourceMap.getString(\"useAdvancedMedicalBox.toolTipText\")); // NOI18N\n-        useAdvancedMedicalBox.setName(\"useAdvancedMedicalBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 11;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useAdvancedMedicalBox, gridBagConstraints);\n-\n-        useDylansRandomXpBox.setText(resourceMap.getString(\"useDylansRandomXpBox.text\")); // NOI18N\n-        useDylansRandomXpBox.setToolTipText(resourceMap.getString(\"useDylansRandomXpBox.toolTipText\")); // NOI18N\n-        useDylansRandomXpBox.setName(\"useDylansRandomXpBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 12;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useDylansRandomXpBox, gridBagConstraints);\n-\n-        spnHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getHealingWaitingPeriod(), 1, 30, 1));\n-        ((JSpinner.DefaultEditor) spnHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n-        JPanel pnlHealWaitingPeriod = new JPanel();\n-        pnlHealWaitingPeriod.add(spnHealWaitingPeriod);\n-        pnlHealWaitingPeriod.add(new JLabel(\"Days to wait between healing checks by doctors\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 13;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlHealWaitingPeriod, gridBagConstraints);\n-\n-        spnNaturalHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getNaturalHealingWaitingPeriod(),\n-                                                                          1, 365, 1));\n-        ((JSpinner.DefaultEditor) spnNaturalHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n-        JPanel pnlNaturalHealWaitingPeriod = new JPanel();\n-        pnlNaturalHealWaitingPeriod.add(spnNaturalHealWaitingPeriod);\n-        pnlNaturalHealWaitingPeriod.add(new JLabel(\"Days to wait for natural healing\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 14;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlNaturalHealWaitingPeriod, gridBagConstraints);\n-\n-        spnMinimumHitsForVees = new JSpinner(new SpinnerNumberModel(options.getMinimumHitsForVees(), 1, 5, 1));\n-        ((JSpinner.DefaultEditor) spnMinimumHitsForVees.getEditor()).getTextField().setEditable(false);\n-        JPanel panMinimumHitsForVees = new JPanel();\n-        panMinimumHitsForVees.add(spnMinimumHitsForVees);\n-        panMinimumHitsForVees.add(new JLabel(\"Minimum number of hits for wounded crews and infantry\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 15;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(panMinimumHitsForVees, gridBagConstraints);\n-\n-        useRandomHitsForVees = new JCheckBox();\n-        useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n-        useRandomHitsForVees.setText(resourceMap.getString(\"useRandomHitsForVees.text\")); // NOI18N\n-        useRandomHitsForVees.setToolTipText(resourceMap.getString(\"useRandomHitsForVees.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 16;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useRandomHitsForVees, gridBagConstraints);\n-\n-        useTougherHealing = new JCheckBox(resourceMap.getString(\"useTougherHealing.text\"));\n-        useTougherHealing.setSelected(options.useTougherHealing());\n-        useTougherHealing.setToolTipText(resourceMap.getString(\"useTougherHealing.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 17;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useTougherHealing, gridBagConstraints);\n-\n-        chkUseUnofficialProcreation = new JCheckBox(\"Use procreation (Unofficial)\"); // NOI18N\n-        chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n-        //chkUseUnofficialProcreation.setToolTipText(resourceMap.getString(\"chkUseUnofficialProcreation.toolTipText\")); // NOI18N\n-        gridBagConstraints.gridy = 18;\n-        panPersonnel.add(chkUseUnofficialProcreation, gridBagConstraints);\n-\n-        chkUseUnofficialProcreationNoRelationship = new JCheckBox(\"Use procreation without a relationship (Unofficial)\"); // NOI18N\n-        chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n-        //chkUseUnofficialProcreationNoRelationship.setToolTipText(resourceMap.getString(\"chkUseUnofficialProcreationNoRelationship.toolTipText\")); // NOI18N\n-        gridBagConstraints.gridy = 19;\n-        panPersonnel.add(chkUseUnofficialProcreationNoRelationship, gridBagConstraints);\n-\n-        chkUseParentage = new JCheckBox(\"Display children in the person panel\");\n-        chkUseParentage.setSelected(options.useParentage());\n-        gridBagConstraints.gridy = 20;\n-        panPersonnel.add(chkUseParentage, gridBagConstraints);\n-\n-        chkLogConception = new JCheckBox(\"Log Conception and Birth \");\n-        chkLogConception.setSelected(options.logConception());\n-        gridBagConstraints.gridy = 21;\n-        panPersonnel.add(chkLogConception, gridBagConstraints);\n-\n-        chkUseTransfers = new JCheckBox(\"Log Saver - Use Reassign instead of Remove/Assign\"); // NOI18N\n-        chkUseTransfers.setSelected(options.useTransfers());\n-        gridBagConstraints.gridy = 22;\n-        panPersonnel.add(chkUseTransfers, gridBagConstraints);\n-\n-        chkUseTimeInService = new JCheckBox(\"Track Time In Service\"); // NOI18N\n-        chkUseTimeInService.setSelected(options.getUseTimeInService());\n-        gridBagConstraints.gridy = 23;\n-        panPersonnel.add(chkUseTimeInService, gridBagConstraints);\n-\n-        chkShowOriginFaction = new JCheckBox(\"Show Origin Faction\"); // NOI18N\n-        chkShowOriginFaction.setSelected(options.showOriginFaction());\n-        gridBagConstraints.gridy = 24;\n-        panPersonnel.add(chkShowOriginFaction, gridBagConstraints);\n-\n-        chkRandomizeOrigin = new JCheckBox(\"Randomize Origin\"); // NOI18N\n-        chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n-        gridBagConstraints.gridy = 25;\n-        panPersonnel.add(chkRandomizeOrigin, gridBagConstraints);\n-\n-        spnOriginSearchRadius = new JSpinner(new SpinnerNumberModel(options.getOriginSearchRadius(), 10, 250, 10));\n-        JPanel panOriginSearchRadius = new JPanel();\n-        panOriginSearchRadius.add(spnOriginSearchRadius);\n-        panOriginSearchRadius.add(new JLabel(\"Random Origin Search Radius\"));\n-        gridBagConstraints.gridy = 26;\n-        panPersonnel.add(panOriginSearchRadius, gridBagConstraints);\n-\n-        JPanel panSalary = new JPanel(new GridBagLayout());\n-        panSalary.setBorder(BorderFactory.createTitledBorder(\"Salary\"));\n-\n-        JPanel panMultiplier = new JPanel(new GridLayout(1, 3));\n-        panMultiplier.setBorder(BorderFactory.createTitledBorder(\"Multipliers\"));\n-        spnSalaryCommission = new JSpinner(new SpinnerNumberModel(options.getSalaryCommissionMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryCommission.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryCommission = new JPanel();\n-        panSalaryCommission.add(spnSalaryCommission);\n-        panSalaryCommission.add(new JLabel(\"Commissioned\"));\n-        panMultiplier.add(panSalaryCommission);\n-\n-        spnSalaryEnlisted = new JSpinner(new SpinnerNumberModel(options.getSalaryEnlistedMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryEnlisted.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryEnlisted = new JPanel();\n-        panSalaryEnlisted.add(spnSalaryEnlisted);\n-        panSalaryEnlisted.add(new JLabel(\"Enlisted\"));\n-        panMultiplier.add(panSalaryEnlisted);\n-\n-        spnSalaryAntiMek = new JSpinner(new SpinnerNumberModel(options.getSalaryAntiMekMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryAntiMek.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryAntiMek = new JPanel();\n-        panSalaryAntiMek.add(spnSalaryAntiMek);\n-        panSalaryAntiMek.add(new JLabel(\"Anti-Mek\"));\n-        panMultiplier.add(panSalaryAntiMek);\n-\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 0.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(panMultiplier, gridBagConstraints);\n+        //region Personnel Tab\n+        try {\n+            panPersonnel.setName(\"panPersonnel\");\n+            panPersonnel.setLayout(new java.awt.GridBagLayout());\n+            gridy = 0;\n \n-        JPanel panXpMultiplier = new JPanel(new GridLayout(2, 3));\n-        panXpMultiplier.setBorder(BorderFactory.createTitledBorder(\"Experience Multipliers\"));\n-        spnSalaryXp = new JSpinner[5];\n-        JSpinner spnXpSalary;\n-        JPanel panXpSalary;\n-        for (int i = 0; i < 5; i++) {\n-            spnXpSalary = new JSpinner(new SpinnerNumberModel(options.getSalaryXpMultiplier(i), 0, 10, 0.05));\n-            ((JSpinner.DefaultEditor) spnXpSalary.getEditor()).getTextField().setEditable(false);\n-            panXpSalary = new JPanel();\n-            panXpSalary.add(spnXpSalary);\n-            panXpSalary.add(new JLabel(SkillType.getExperienceLevelName(i)));\n-            panXpMultiplier.add(panXpSalary);\n-            spnSalaryXp[i] = spnXpSalary;\n-        }\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 1;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 0.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(panXpMultiplier, gridBagConstraints);\n+            useTacticsBox.setText(resourceMap.getString(\"useTacticsBox.text\"));\n+            useTacticsBox.setToolTipText(resourceMap.getString(\"useTacticsBox.toolTipText\"));\n+            useTacticsBox.setName(\"useTacticsBox\");\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = gridy;\n+            gridBagConstraints.gridwidth = 2;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n+            panPersonnel.add(useTacticsBox, gridBagConstraints);\n+\n+            useInitBonusBox.setText(resourceMap.getString(\"useInitBonusBox.text\"));\n+            useInitBonusBox.setToolTipText(resourceMap.getString(\"useInitBonusBox.toolTipText\"));\n+            useInitBonusBox.setName(\"useInitBonusBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useInitBonusBox, gridBagConstraints);\n+\n+            useToughnessBox.setText(resourceMap.getString(\"useToughnessBox.text\"));\n+            useToughnessBox.setToolTipText(resourceMap.getString(\"useToughnessBox.toolTipText\"));\n+            useToughnessBox.setName(\"useToughnessBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useToughnessBox, gridBagConstraints);\n+\n+            useArtilleryBox.setText(resourceMap.getString(\"useArtilleryBox.text\"));\n+            useArtilleryBox.setToolTipText(resourceMap.getString(\"useArtilleryBox.toolTipText\"));\n+            useArtilleryBox.setName(\"useArtilleryBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useArtilleryBox, gridBagConstraints);\n+\n+            useAbilitiesBox.setText(resourceMap.getString(\"useAbilitiesBox.text\"));\n+            useAbilitiesBox.setToolTipText(resourceMap.getString(\"useAbilitiesBox.toolTipText\"));\n+            useAbilitiesBox.setName(\"useAbilitiesBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useAbilitiesBox, gridBagConstraints);\n+\n+            useEdgeBox.setText(resourceMap.getString(\"useEdgeBox.text\"));\n+            useEdgeBox.setToolTipText(resourceMap.getString(\"useEdgeBox.toolTipText\"));\n+            useEdgeBox.setName(\"useEdgeBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useEdgeBox, gridBagConstraints);\n+\n+            useSupportEdgeBox.setText(resourceMap.getString(\"useSupportEdgeBox.text\"));\n+            useSupportEdgeBox.setToolTipText(resourceMap.getString(\"useSupportEdgeBox.toolTipText\"));\n+            useSupportEdgeBox.setName(\"useSupportEdgeBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useSupportEdgeBox, gridBagConstraints);\n+\n+            useImplantsBox.setText(resourceMap.getString(\"useImplantsBox.text\"));\n+            useImplantsBox.setToolTipText(resourceMap.getString(\"useImplantsBox.toolTipText\"));\n+            useImplantsBox.setName(\"useImplantsBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useImplantsBox, gridBagConstraints);\n+\n+            chkCapturePrisoners.setText(resourceMap.getString(\"chkCapturePrisoners.text\"));\n+            chkCapturePrisoners.setToolTipText(resourceMap.getString(\"chkCapturePrisoners.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkCapturePrisoners, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> prisonerStatusModel = new DefaultComboBoxModel<>();\n+            prisonerStatusModel.addElement(resourceMap.getString(\"prisonerStatus.Prisoner\"));\n+            prisonerStatusModel.addElement(resourceMap.getString(\"prisonerStatus.Bondsman\"));\n+            comboPrisonerStatus = new JComboBox<>(prisonerStatusModel);\n+            comboPrisonerStatus.setSelectedIndex(options.getDefaultPrisonerStatus());\n+            JPanel pnlPrisonerStatus = new JPanel();\n+            pnlPrisonerStatus.add(new JLabel(resourceMap.getString(\"prisonerStatus.text\")));\n+            pnlPrisonerStatus.add(comboPrisonerStatus);\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlPrisonerStatus, gridBagConstraints);\n+\n+            altQualityAveragingCheckBox.setText(resourceMap.getString(\"altQualityAveragingCheckBox.text\"));\n+            altQualityAveragingCheckBox.setToolTipText(resourceMap.getString(\"altQualityAveragingCheckBox.toolTipText\"));\n+            altQualityAveragingCheckBox.setName(\"altQualityAveragingCheckBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(altQualityAveragingCheckBox, gridBagConstraints);\n+\n+            useAdvancedMedicalBox.setText(resourceMap.getString(\"useAdvancedMedicalBox.text\"));\n+            useAdvancedMedicalBox.setToolTipText(resourceMap.getString(\"useAdvancedMedicalBox.toolTipText\"));\n+            useAdvancedMedicalBox.setName(\"useAdvancedMedicalBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useAdvancedMedicalBox, gridBagConstraints);\n+\n+            useDylansRandomXpBox.setText(resourceMap.getString(\"useDylansRandomXpBox.text\"));\n+            useDylansRandomXpBox.setToolTipText(resourceMap.getString(\"useDylansRandomXpBox.toolTipText\"));\n+            useDylansRandomXpBox.setName(\"useDylansRandomXpBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useDylansRandomXpBox, gridBagConstraints);\n+\n+            spnHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getHealingWaitingPeriod(), 1, 30, 1));\n+            ((JSpinner.DefaultEditor) spnHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n+            JPanel pnlHealWaitingPeriod = new JPanel();\n+            pnlHealWaitingPeriod.add(spnHealWaitingPeriod);\n+            pnlHealWaitingPeriod.add(new JLabel(resourceMap.getString(\"healWaitingPeriod.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlHealWaitingPeriod, gridBagConstraints);\n+\n+            spnNaturalHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getNaturalHealingWaitingPeriod(),\n+                    1, 365, 1));\n+            ((JSpinner.DefaultEditor) spnNaturalHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n+            JPanel pnlNaturalHealWaitingPeriod = new JPanel();\n+            pnlNaturalHealWaitingPeriod.add(spnNaturalHealWaitingPeriod);\n+            pnlNaturalHealWaitingPeriod.add(new JLabel(resourceMap.getString(\"naturalHealWaitingPeriod.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlNaturalHealWaitingPeriod, gridBagConstraints);\n+\n+            spnMinimumHitsForVees = new JSpinner(new SpinnerNumberModel(options.getMinimumHitsForVees(), 1, 5, 1));\n+            ((JSpinner.DefaultEditor) spnMinimumHitsForVees.getEditor()).getTextField().setEditable(false);\n+            JPanel panMinimumHitsForVees = new JPanel();\n+            panMinimumHitsForVees.add(spnMinimumHitsForVees);\n+            panMinimumHitsForVees.add(new JLabel(resourceMap.getString(\"minimumHitsForVees.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(panMinimumHitsForVees, gridBagConstraints);\n+\n+            useRandomHitsForVees = new JCheckBox();\n+            useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n+            useRandomHitsForVees.setText(resourceMap.getString(\"useRandomHitsForVees.text\"));\n+            useRandomHitsForVees.setToolTipText(resourceMap.getString(\"useRandomHitsForVees.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useRandomHitsForVees, gridBagConstraints);\n+\n+            useTougherHealing = new JCheckBox(resourceMap.getString(\"useTougherHealing.text\"));\n+            useTougherHealing.setSelected(options.useTougherHealing());\n+            useTougherHealing.setToolTipText(resourceMap.getString(\"useTougherHealing.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useTougherHealing, gridBagConstraints);\n+\n+            chkUseTransfers = new JCheckBox(resourceMap.getString(\"useTransfers.text\"));\n+            chkUseTransfers.setSelected(options.useTransfers());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkUseTransfers, gridBagConstraints);\n+\n+            chkUseTimeInService = new JCheckBox(resourceMap.getString(\"useTimeInService.text\"));\n+            chkUseTimeInService.setSelected(options.getUseTimeInService());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkUseTimeInService, gridBagConstraints);\n+\n+            chkShowOriginFaction = new JCheckBox(resourceMap.getString(\"showOriginFaction.text\"));\n+            chkShowOriginFaction.setSelected(options.showOriginFaction());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkShowOriginFaction, gridBagConstraints);\n+\n+            chkRandomizeOrigin = new JCheckBox(resourceMap.getString(\"randomizeOrigin.text\"));\n+            chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkRandomizeOrigin, gridBagConstraints);\n+\n+            chkRandomizeDependentsOrigin = new JCheckBox(resourceMap.getString(\"randomizeDependentsOrigin.text\"));\n+            chkRandomizeDependentsOrigin.setSelected(options.getRandomizeDependentOrigin());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkRandomizeDependentsOrigin, gridBagConstraints);\n+\n+            spnOriginSearchRadius = new JSpinner(new SpinnerNumberModel(options.getOriginSearchRadius(), 10, 250, 10));\n+            JPanel panOriginSearchRadius = new JPanel();\n+            panOriginSearchRadius.add(spnOriginSearchRadius);\n+            panOriginSearchRadius.add(new JLabel(resourceMap.getString(\"originSearchRadius.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(panOriginSearchRadius, gridBagConstraints);\n+\n+            //Family\n+            JPanel panFamily = new JPanel(new GridBagLayout());\n+            panFamily.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"FamilyTab.text\")));\n+            int panFamilyGridY = ++gridy;\n+\n+            spnMinimumMarriageAge = new JSpinner(new SpinnerNumberModel(options.getMinimumMarriageAge(), 14, null, 1));\n+            Dimension dimensionMinimumMarriageAge = spnMinimumMarriageAge.getPreferredSize();\n+            dimensionMinimumMarriageAge.width = 40;\n+            spnMinimumMarriageAge.setPreferredSize(dimensionMinimumMarriageAge);\n+            JPanel panMinimumMarriageAge = new JPanel();\n+            panMinimumMarriageAge.add(new JLabel(resourceMap.getString(\"minimumMarriageAge.text\")));\n+            panMinimumMarriageAge.setToolTipText(resourceMap.getString(\"minimumMarriageAge.toolTipText\"));\n+            panMinimumMarriageAge.add(spnMinimumMarriageAge);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panMinimumMarriageAge, gridBagConstraints);\n+\n+            spnCheckMutualAncestorsDepth = new JSpinner(new SpinnerNumberModel(options.checkMutualAncestorsDepth(), 0, 20, 1));\n+            Dimension dimensionCheckMutualAncestorsDepth = spnCheckMutualAncestorsDepth.getPreferredSize();\n+            dimensionCheckMutualAncestorsDepth.width = 40;\n+            spnCheckMutualAncestorsDepth.setPreferredSize(dimensionCheckMutualAncestorsDepth);\n+            JPanel panCheckMutualAncestorsDepth = new JPanel();\n+            panCheckMutualAncestorsDepth.add(new JLabel(resourceMap.getString(\"checkMutualAncestorsDepth.text\")));\n+            panCheckMutualAncestorsDepth.setToolTipText(resourceMap.getString(\"checkMutualAncestorsDepth.toolTipText\"));\n+            panCheckMutualAncestorsDepth.add(spnCheckMutualAncestorsDepth);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panCheckMutualAncestorsDepth, gridBagConstraints);\n+\n+            chkUseRandomMarriages = new JCheckBox(resourceMap.getString(\"useRandomMarriages.text\"));\n+            chkUseRandomMarriages.setToolTipText(resourceMap.getString(\"useRandomMarriages.toolTipText\"));\n+            chkUseRandomMarriages.setSelected(options.useRandomMarriages());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomMarriages, gridBagConstraints);\n+\n+            spnChanceRandomMarriages = new JSpinner(new SpinnerNumberModel(options.getChanceRandomMarriages(), 0, 100, 0.001));\n+            Dimension dimensionChanceRandomMarriages = spnChanceRandomMarriages.getPreferredSize();\n+            dimensionChanceRandomMarriages.width = 50;\n+            spnChanceRandomMarriages.setPreferredSize(dimensionChanceRandomMarriages);\n+            JPanel panChanceRandomMarriages = new JPanel();\n+            panChanceRandomMarriages.add(new JLabel(resourceMap.getString(\"chanceRandomMarriages.text\")));\n+            panChanceRandomMarriages.setToolTipText(resourceMap.getString(\"chanceRandomMarriages.toolTipText\"));\n+            panChanceRandomMarriages.add(spnChanceRandomMarriages);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceRandomMarriages, gridBagConstraints);\n+\n+            spnMarriageAgeRange = new JSpinner(new SpinnerNumberModel(options.getMarriageAgeRange(), 0, null, 1));\n+            Dimension dimensionMarriageAgeRange = spnMarriageAgeRange.getPreferredSize();\n+            dimensionMarriageAgeRange.width = 40;\n+            spnMarriageAgeRange.setPreferredSize(dimensionMarriageAgeRange);\n+            JPanel panMarriageAgeRange = new JPanel();\n+            panMarriageAgeRange.add(new JLabel(resourceMap.getString(\"marriageAgeRange.text\")));\n+            panMarriageAgeRange.setToolTipText(resourceMap.getString(\"marriageAgeRange.toolTipText\"));\n+            panMarriageAgeRange.add(spnMarriageAgeRange);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panMarriageAgeRange, gridBagConstraints);\n+\n+            JPanel panRandomMarriageSurnameWeights = new JPanel(new GridLayout((int) Math.ceil(Person.NUM_SURNAME / 3.0), 3));\n+            panRandomMarriageSurnameWeights.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"randomMarriageSurnameWeights.text\")));\n+            panRandomMarriageSurnameWeights.setToolTipText(resourceMap.getString(\"randomMarriageSurnameWeights.toolTipText\"));\n+            spnRandomMarriageSurnameWeights = new JSpinner[Person.NUM_SURNAME];\n+            JSpinner spnRandomMarriageSurnameWeight;\n+            JPanel panRandomMarriageSurnameWeight;\n+            for (int i = 0; i < Person.NUM_SURNAME; i++) {\n+                spnRandomMarriageSurnameWeight = new JSpinner(new SpinnerNumberModel((options.getRandomMarriageSurnameWeights(i) / 10.0), 0, 100, 0.1));\n+                panRandomMarriageSurnameWeight = new JPanel();\n+                panRandomMarriageSurnameWeight.add(spnRandomMarriageSurnameWeight);\n+                panRandomMarriageSurnameWeight.add(new JLabel(Person.SURNAME_TYPE_NAMES[i]));\n+                panRandomMarriageSurnameWeights.add(panRandomMarriageSurnameWeight);\n+                spnRandomMarriageSurnameWeights[i] = spnRandomMarriageSurnameWeight;\n+            }\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panRandomMarriageSurnameWeights, gridBagConstraints);\n+\n+            chkUseRandomSameSexMarriages = new JCheckBox(resourceMap.getString(\"useRandomSameSexMarriages.text\"));\n+            chkUseRandomSameSexMarriages.setToolTipText(resourceMap.getString(\"useRandomSameSexMarriages.toolTipText\"));\n+            chkUseRandomSameSexMarriages.setSelected(options.useRandomSameSexMarriages());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomSameSexMarriages, gridBagConstraints);\n+\n+            spnChanceRandomSameSexMarriages = new JSpinner(new SpinnerNumberModel(options.getChanceRandomSameSexMarriages(), 0, 100, 0.001));\n+            Dimension dimensionChanceRandomSameSexMarriages = spnChanceRandomSameSexMarriages.getPreferredSize();\n+            dimensionChanceRandomSameSexMarriages.width = 50;\n+            spnChanceRandomSameSexMarriages.setPreferredSize(dimensionChanceRandomSameSexMarriages);\n+            JPanel panChanceRandomSameSexMarriages = new JPanel();\n+            panChanceRandomSameSexMarriages.add(new JLabel(resourceMap.getString(\"chanceRandomSameSexMarriages.text\")));\n+            panChanceRandomSameSexMarriages.setToolTipText(resourceMap.getString(\"chanceRandomSameSexMarriages.toolTipText\"));\n+            panChanceRandomSameSexMarriages.add(spnChanceRandomSameSexMarriages);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceRandomSameSexMarriages, gridBagConstraints);\n+\n+            chkUseUnofficialProcreation = new JCheckBox(resourceMap.getString(\"useUnofficialProcreation.text\"));\n+            chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n+            chkUseUnofficialProcreation.setToolTipText(resourceMap.getString(\"useUnofficialProcreation.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseUnofficialProcreation, gridBagConstraints);\n+\n+            spnChanceProcreation = new JSpinner(new SpinnerNumberModel(options.getChanceProcreation(), 0, 100, 0.001));\n+            Dimension dimensionChanceProcreation = spnChanceProcreation.getPreferredSize();\n+            dimensionChanceProcreation.width = 50;\n+            spnChanceProcreation.setPreferredSize(dimensionChanceProcreation);\n+            JPanel panChanceProcreation = new JPanel();\n+            panChanceProcreation.add(new JLabel(resourceMap.getString(\"chanceProcreation.text\")));\n+            panChanceProcreation.setToolTipText(resourceMap.getString(\"chanceProcreation.toolTipText\"));\n+            panChanceProcreation.add(spnChanceProcreation);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceProcreation, gridBagConstraints);\n+\n+            chkUseUnofficialProcreationNoRelationship = new JCheckBox(resourceMap.getString(\"useUnofficialProcreationNoRelationship.text\"));\n+            chkUseUnofficialProcreationNoRelationship.setToolTipText(resourceMap.getString(\"useUnofficialProcreationNoRelationship.toolTipText\"));\n+            chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseUnofficialProcreationNoRelationship, gridBagConstraints);\n+\n+            spnChanceProcreationNoRelationship = new JSpinner(new SpinnerNumberModel(options.getChanceProcreationNoRelationship(), 0, 100, 0.001));\n+            Dimension dimensionChanceProcreationNoRelationship = spnChanceProcreationNoRelationship.getPreferredSize();\n+            dimensionChanceProcreationNoRelationship.width = 50;\n+            spnChanceProcreationNoRelationship.setPreferredSize(dimensionChanceProcreationNoRelationship);\n+            JPanel panChanceProcreationNoRelationship = new JPanel();\n+            panChanceProcreationNoRelationship.add(new JLabel(resourceMap.getString(\"chanceProcreationNoRelationship.text\")));\n+            panChanceProcreationNoRelationship.setToolTipText(resourceMap.getString(\"chanceProcreationNoRelationship.toolTipText\"));\n+            panChanceProcreationNoRelationship.add(spnChanceProcreationNoRelationship);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceProcreationNoRelationship, gridBagConstraints);\n+\n+            chkDisplayTrueDueDate = new JCheckBox(resourceMap.getString(\"displayTrueDueDate.text\"));\n+            chkDisplayTrueDueDate.setToolTipText(resourceMap.getString(\"displayTrueDueDate.toolTipText\"));\n+            chkDisplayTrueDueDate.setSelected(options.getDisplayTrueDueDate());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkDisplayTrueDueDate, gridBagConstraints);\n+\n+            chkLogConception = new JCheckBox(resourceMap.getString(\"logConception.text\"));\n+            chkLogConception.setSelected(options.logConception());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkLogConception, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> babySurnameStyleModel = new DefaultComboBoxModel<>();\n+            babySurnameStyleModel.addElement(resourceMap.getString(\"babySurnameStyle.Mother\"));\n+            babySurnameStyleModel.addElement(resourceMap.getString(\"babySurnameStyle.Father\"));\n+            comboBabySurnameStyle = new JComboBox<>(babySurnameStyleModel);\n+            comboBabySurnameStyle.setSelectedIndex(options.getBabySurnameStyle());\n+            JPanel pnlBabySurnameStyle = new JPanel();\n+            pnlBabySurnameStyle.add(new JLabel(resourceMap.getString(\"babySurnameStyle.text\")));\n+            pnlBabySurnameStyle.setToolTipText(resourceMap.getString(\"babySurnameStyle.toolTipText\"));\n+            pnlBabySurnameStyle.add(comboBabySurnameStyle);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(pnlBabySurnameStyle, gridBagConstraints);\n+\n+            chkUseParentage = new JCheckBox(resourceMap.getString(\"useParentage.text\"));\n+            chkUseParentage.setSelected(options.useParentage());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseParentage, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> familyLevelStatusModel = new DefaultComboBoxModel<>();\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.ParentsChildren\"));\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.GrandparentsGrandchildren\"));\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.AuntsUnclesCousins\"));\n+            comboDisplayFamilyLevel = new JComboBox<>(familyLevelStatusModel);\n+            comboDisplayFamilyLevel.setSelectedIndex(options.displayFamilyLevel());\n+            JPanel pnlDisplayFamilyLevel = new JPanel();\n+            pnlDisplayFamilyLevel.add(new JLabel(resourceMap.getString(\"displayFamilyLevel.text\")));\n+            pnlDisplayFamilyLevel.setToolTipText(resourceMap.getString(\"displayFamilyLevel.toolTipText\"));\n+            pnlDisplayFamilyLevel.add(comboDisplayFamilyLevel);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(pnlDisplayFamilyLevel, gridBagConstraints);\n+\n+            chkUseRandomDeaths = new JCheckBox(resourceMap.getString(\"useRandomDeaths.text\"));\n+            chkUseRandomDeaths.setToolTipText(resourceMap.getString(\"useRandomDeaths.toolTipText\"));\n+            chkUseRandomDeaths.setSelected(options.useRandomDeaths());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomDeaths, gridBagConstraints);\n+\n+            chkKeepMarriedNameUponSpouseDeath = new JCheckBox(resourceMap.getString(\"keepMarriedNameUponSpouseDeath.text\"));\n+            chkKeepMarriedNameUponSpouseDeath.setSelected(options.getKeepMarriedNameUponSpouseDeath());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkKeepMarriedNameUponSpouseDeath, gridBagConstraints);\n+\n+            gridBagConstraints.gridy = panFamilyGridY;\n+            panPersonnel.add(panFamily, gridBagConstraints);\n+\n+            //Salary\n+            JPanel panSalary = new JPanel(new GridBagLayout());\n+            panSalary.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"SalaryTab.text\")));\n+\n+            JPanel panMultiplier = new JPanel(new GridLayout(1, 3));\n+            panMultiplier.setBorder(BorderFactory.createTitledBorder(\"Multipliers\"));\n+            spnSalaryCommission = new JSpinner(new SpinnerNumberModel(options.getSalaryCommissionMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryCommission.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryCommission = new JPanel();\n+            panSalaryCommission.add(spnSalaryCommission);\n+            panSalaryCommission.add(new JLabel(\"Commissioned\"));\n+            panMultiplier.add(panSalaryCommission);\n+\n+            spnSalaryEnlisted = new JSpinner(new SpinnerNumberModel(options.getSalaryEnlistedMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryEnlisted.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryEnlisted = new JPanel();\n+            panSalaryEnlisted.add(spnSalaryEnlisted);\n+            panSalaryEnlisted.add(new JLabel(\"Enlisted\"));\n+            panMultiplier.add(panSalaryEnlisted);\n+\n+            spnSalaryAntiMek = new JSpinner(new SpinnerNumberModel(options.getSalaryAntiMekMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryAntiMek.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryAntiMek = new JPanel();\n+            panSalaryAntiMek.add(spnSalaryAntiMek);\n+            panSalaryAntiMek.add(new JLabel(\"Anti-Mek\"));\n+            panMultiplier.add(panSalaryAntiMek);\n \n-        JPanel panAllTypes = new JPanel(new GridLayout(Person.T_NUM / 2, 2));\n-        JMoneyTextField txtType;\n-        JPanel panType;\n-        // TODO: use JFormattedTextField with Numeric formatter\n-        txtSalaryBase = new JMoneyTextField[Person.T_NUM];\n-        for (int i = 1; i < Person.T_NUM; i++) {\n-            txtType = new JMoneyTextField();\n-            txtType.setMoney(options.getBaseSalary(i));\n-            txtType.setPreferredSize(new Dimension(75, 20));\n-            panType = new JPanel(new GridBagLayout());\n             gridBagConstraints = new java.awt.GridBagConstraints();\n             gridBagConstraints.gridx = 0;\n             gridBagConstraints.gridy = 0;\n             gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.weighty = 0.0;\n             gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-            panType.add(new JLabel(Person.getRoleDesc(i, false)), gridBagConstraints);\n+            panSalary.add(panMultiplier, gridBagConstraints);\n+\n+            JPanel panXpMultiplier = new JPanel(new GridLayout(2, 3));\n+            panXpMultiplier.setBorder(BorderFactory.createTitledBorder(\"Experience Multipliers\"));\n+            spnSalaryXp = new JSpinner[5];\n+            JSpinner spnXpSalary;\n+            JPanel panXpSalary;\n+            for (int i = 0; i < 5; i++) {\n+                spnXpSalary = new JSpinner(new SpinnerNumberModel(options.getSalaryXpMultiplier(i), 0, 10, 0.05));\n+                ((JSpinner.DefaultEditor) spnXpSalary.getEditor()).getTextField().setEditable(false);\n+                panXpSalary = new JPanel();\n+                panXpSalary.add(spnXpSalary);\n+                panXpSalary.add(new JLabel(SkillType.getExperienceLevelName(i)));\n+                panXpMultiplier.add(panXpSalary);\n+                spnSalaryXp[i] = spnXpSalary;\n+            }\n             gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 1;\n-            gridBagConstraints.gridy = 0;\n-            gridBagConstraints.weightx = 0.0;\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = 1;\n+            gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.weighty = 0.0;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-            panType.add(txtType, gridBagConstraints);\n-            txtSalaryBase[i] = txtType;\n-            panAllTypes.add(panType);\n-        }\n-        JScrollPane scrSalaryBase = new JScrollPane(panAllTypes);\n-        scrSalaryBase.setBorder(BorderFactory.createTitledBorder(\"Base Salaries\"));\n-        scrSalaryBase.setOpaque(false);\n-        scrSalaryBase.setPreferredSize(new Dimension(200, 200));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 2;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 1.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(scrSalaryBase, gridBagConstraints);\n+            panSalary.add(panXpMultiplier, gridBagConstraints);\n+\n+            JPanel panAllTypes = new JPanel(new GridLayout(Person.T_NUM / 2, 2));\n+            JMoneyTextField txtType;\n+            JPanel panType;\n+            // TODO: use JFormattedTextField with Numeric formatter\n+            txtSalaryBase = new JMoneyTextField[Person.T_NUM];\n+            for (int i = 1; i < Person.T_NUM; i++) {\n+                txtType = new JMoneyTextField();\n+                txtType.setMoney(options.getBaseSalary(i));\n+                txtType.setPreferredSize(new Dimension(75, 20));\n+                panType = new JPanel(new GridBagLayout());\n+                gridBagConstraints = new java.awt.GridBagConstraints();\n+                gridBagConstraints.gridx = 0;\n+                gridBagConstraints.gridy = 0;\n+                gridBagConstraints.weightx = 1.0;\n+                gridBagConstraints.weighty = 0.0;\n+                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+                panType.add(new JLabel(Person.getRoleDesc(i, false)), gridBagConstraints);\n+                gridBagConstraints = new java.awt.GridBagConstraints();\n+                gridBagConstraints.gridx = 1;\n+                gridBagConstraints.gridy = 0;\n+                gridBagConstraints.weightx = 0.0;\n+                gridBagConstraints.weighty = 0.0;\n+                gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n+                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+                panType.add(txtType, gridBagConstraints);\n+                txtSalaryBase[i] = txtType;\n+                panAllTypes.add(panType);\n+            }\n+            JScrollPane scrSalaryBase = new JScrollPane(panAllTypes);\n+            scrSalaryBase.setBorder(BorderFactory.createTitledBorder(\"Base Salaries\"));\n+            scrSalaryBase.setOpaque(false);\n+            scrSalaryBase.setPreferredSize(new Dimension(200, 200));\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = 2;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.weighty = 1.0;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+            panSalary.add(scrSalaryBase, gridBagConstraints);\n \n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 3;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.gridheight = 23;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 1.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(panSalary, gridBagConstraints);\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 3;\n+            gridBagConstraints.gridy = 0;\n+            gridBagConstraints.gridheight = 23;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.weighty = 1.0;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+            panPersonnel.add(panSalary, gridBagConstraints);\n \n-        JScrollPane scrollPersonnel = new JScrollPane(panPersonnel);\n-        scrollPersonnel.setPreferredSize(new java.awt.Dimension(500, 400));\n+            JScrollPane scrollPersonnel = new JScrollPane(panPersonnel);\n+            scrollPersonnel.setPreferredSize(new java.awt.Dimension(500, 400));\n \n-        tabOptions.addTab(resourceMap.getString(\"panPersonnel.TabConstraints.tabTitle\"), scrollPersonnel); // NOI18N\n+            tabOptions.addTab(resourceMap.getString(\"panPersonnel.TabConstraints.tabTitle\"), scrollPersonnel);\n+        } catch (Exception e) {\n+            MekHQ.getLogger().error(getClass(), \"PersonnelTab\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 1116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjI4OQ==", "bodyText": "Found it super useful while testing, but forgot to remove it after. Removing", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386142289", "createdAt": "2020-03-01T21:26:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -1588,385 +1544,471 @@ private void initComponents() {\n \n         tabOptions.addTab(resourceMap.getString(\"panTech.TabConstraints.tabTitle\"), panTech); // NOI18N\n \n-        panPersonnel.setName(\"panPersonnel\"); // NOI18N\n-        panPersonnel.setLayout(new java.awt.GridBagLayout());\n-\n-        useTacticsBox.setText(resourceMap.getString(\"useTacticsBox.text\")); // NOI18N\n-        useTacticsBox.setToolTipText(resourceMap.getString(\"useTacticsBox.toolTipText\")); // NOI18N\n-        useTacticsBox.setName(\"useTacticsBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useTacticsBox, gridBagConstraints);\n-\n-        useInitBonusBox.setText(resourceMap.getString(\"useInitBonusBox.text\")); // NOI18N\n-        useInitBonusBox.setToolTipText(resourceMap.getString(\"useInitBonusBox.toolTipText\")); // NOI18N\n-        useInitBonusBox.setName(\"useInitBonusBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 1;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useInitBonusBox, gridBagConstraints);\n-\n-        useToughnessBox.setText(resourceMap.getString(\"useToughnessBox.text\")); // NOI18N\n-        useToughnessBox.setToolTipText(resourceMap.getString(\"useToughnessBox.toolTipText\")); // NOI18N\n-        useToughnessBox.setName(\"useToughnessBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 2;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useToughnessBox, gridBagConstraints);\n-\n-        useArtilleryBox.setText(resourceMap.getString(\"useArtilleryBox.text\")); // NOI18N\n-        useArtilleryBox.setToolTipText(resourceMap.getString(\"useArtilleryBox.toolTipText\")); // NOI18N\n-        useArtilleryBox.setName(\"useArtilleryBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 3;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useArtilleryBox, gridBagConstraints);\n-\n-        useAbilitiesBox.setText(resourceMap.getString(\"useAbilitiesBox.text\")); // NOI18N\n-        useAbilitiesBox.setToolTipText(resourceMap.getString(\"useAbilitiesBox.toolTipText\")); // NOI18N\n-        useAbilitiesBox.setName(\"useAbilitiesBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 4;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useAbilitiesBox, gridBagConstraints);\n-\n-        useEdgeBox.setText(resourceMap.getString(\"useEdgeBox.text\")); // NOI18N\n-        useEdgeBox.setToolTipText(resourceMap.getString(\"useEdgeBox.toolTipText\")); // NOI18N\n-        useEdgeBox.setName(\"useEdgeBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 5;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useEdgeBox, gridBagConstraints);\n-\n-        useSupportEdgeBox.setText(resourceMap.getString(\"useSupportEdgeBox.text\")); // NOI18N\n-        useSupportEdgeBox.setToolTipText(resourceMap.getString(\"useSupportEdgeBox.toolTipText\")); // NOI18N\n-        useSupportEdgeBox.setName(\"useSupportEdgeBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 6;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useSupportEdgeBox, gridBagConstraints);\n-\n-        useImplantsBox.setText(resourceMap.getString(\"useImplantsBox.text\")); // NOI18N\n-        useImplantsBox.setToolTipText(resourceMap.getString(\"useImplantsBox.toolTipText\")); // NOI18N\n-        useImplantsBox.setName(\"useImplantsBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 7;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useImplantsBox, gridBagConstraints);\n-\n-        chkCapturePrisoners.setText(resourceMap.getString(\"chkCapturePrisoners.text\")); // NOI18N\n-        chkCapturePrisoners.setToolTipText(resourceMap.getString(\"chkCapturePrisoners.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 8;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(chkCapturePrisoners, gridBagConstraints);\n-\n-        DefaultComboBoxModel<String> prisonerStatusModel = new DefaultComboBoxModel<>();\n-        prisonerStatusModel.addElement(\"Prisoner\");\n-        prisonerStatusModel.addElement(\"Bondsman\");\n-        comboPrisonerStatus = new JComboBox<>(prisonerStatusModel);\n-        comboPrisonerStatus.setSelectedIndex(options.getDefaultPrisonerStatus());\n-        JPanel pnlPrisonerStatus = new JPanel();\n-        pnlPrisonerStatus.add(new JLabel(\"Default Prisoner Status:\"));\n-        pnlPrisonerStatus.add(comboPrisonerStatus);\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 9;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlPrisonerStatus, gridBagConstraints);\n-\n-\t\taltQualityAveragingCheckBox.setText(resourceMap.getString(\"altQualityAveragingCheckBox.text\")); // NOI18N\n-        altQualityAveragingCheckBox.setToolTipText(resourceMap.getString(\"altQualityAveragingCheckBox.toolTipText\")); // NOI18N\n-        altQualityAveragingCheckBox.setName(\"altQualityAveragingCheckBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 10;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(altQualityAveragingCheckBox, gridBagConstraints);\n-\n-        useAdvancedMedicalBox.setText(resourceMap.getString(\"useAdvancedMedicalBox.text\")); // NOI18N\n-        useAdvancedMedicalBox.setToolTipText(resourceMap.getString(\"useAdvancedMedicalBox.toolTipText\")); // NOI18N\n-        useAdvancedMedicalBox.setName(\"useAdvancedMedicalBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 11;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useAdvancedMedicalBox, gridBagConstraints);\n-\n-        useDylansRandomXpBox.setText(resourceMap.getString(\"useDylansRandomXpBox.text\")); // NOI18N\n-        useDylansRandomXpBox.setToolTipText(resourceMap.getString(\"useDylansRandomXpBox.toolTipText\")); // NOI18N\n-        useDylansRandomXpBox.setName(\"useDylansRandomXpBox\"); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 12;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useDylansRandomXpBox, gridBagConstraints);\n-\n-        spnHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getHealingWaitingPeriod(), 1, 30, 1));\n-        ((JSpinner.DefaultEditor) spnHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n-        JPanel pnlHealWaitingPeriod = new JPanel();\n-        pnlHealWaitingPeriod.add(spnHealWaitingPeriod);\n-        pnlHealWaitingPeriod.add(new JLabel(\"Days to wait between healing checks by doctors\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 13;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlHealWaitingPeriod, gridBagConstraints);\n-\n-        spnNaturalHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getNaturalHealingWaitingPeriod(),\n-                                                                          1, 365, 1));\n-        ((JSpinner.DefaultEditor) spnNaturalHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n-        JPanel pnlNaturalHealWaitingPeriod = new JPanel();\n-        pnlNaturalHealWaitingPeriod.add(spnNaturalHealWaitingPeriod);\n-        pnlNaturalHealWaitingPeriod.add(new JLabel(\"Days to wait for natural healing\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 14;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(pnlNaturalHealWaitingPeriod, gridBagConstraints);\n-\n-        spnMinimumHitsForVees = new JSpinner(new SpinnerNumberModel(options.getMinimumHitsForVees(), 1, 5, 1));\n-        ((JSpinner.DefaultEditor) spnMinimumHitsForVees.getEditor()).getTextField().setEditable(false);\n-        JPanel panMinimumHitsForVees = new JPanel();\n-        panMinimumHitsForVees.add(spnMinimumHitsForVees);\n-        panMinimumHitsForVees.add(new JLabel(\"Minimum number of hits for wounded crews and infantry\"));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 15;\n-        gridBagConstraints.gridwidth = 2;\n-        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(panMinimumHitsForVees, gridBagConstraints);\n-\n-        useRandomHitsForVees = new JCheckBox();\n-        useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n-        useRandomHitsForVees.setText(resourceMap.getString(\"useRandomHitsForVees.text\")); // NOI18N\n-        useRandomHitsForVees.setToolTipText(resourceMap.getString(\"useRandomHitsForVees.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 16;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useRandomHitsForVees, gridBagConstraints);\n-\n-        useTougherHealing = new JCheckBox(resourceMap.getString(\"useTougherHealing.text\"));\n-        useTougherHealing.setSelected(options.useTougherHealing());\n-        useTougherHealing.setToolTipText(resourceMap.getString(\"useTougherHealing.toolTipText\")); // NOI18N\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 17;\n-        gridBagConstraints.gridwidth = 2;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(useTougherHealing, gridBagConstraints);\n-\n-        chkUseUnofficialProcreation = new JCheckBox(\"Use procreation (Unofficial)\"); // NOI18N\n-        chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n-        //chkUseUnofficialProcreation.setToolTipText(resourceMap.getString(\"chkUseUnofficialProcreation.toolTipText\")); // NOI18N\n-        gridBagConstraints.gridy = 18;\n-        panPersonnel.add(chkUseUnofficialProcreation, gridBagConstraints);\n-\n-        chkUseUnofficialProcreationNoRelationship = new JCheckBox(\"Use procreation without a relationship (Unofficial)\"); // NOI18N\n-        chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n-        //chkUseUnofficialProcreationNoRelationship.setToolTipText(resourceMap.getString(\"chkUseUnofficialProcreationNoRelationship.toolTipText\")); // NOI18N\n-        gridBagConstraints.gridy = 19;\n-        panPersonnel.add(chkUseUnofficialProcreationNoRelationship, gridBagConstraints);\n-\n-        chkUseParentage = new JCheckBox(\"Display children in the person panel\");\n-        chkUseParentage.setSelected(options.useParentage());\n-        gridBagConstraints.gridy = 20;\n-        panPersonnel.add(chkUseParentage, gridBagConstraints);\n-\n-        chkLogConception = new JCheckBox(\"Log Conception and Birth \");\n-        chkLogConception.setSelected(options.logConception());\n-        gridBagConstraints.gridy = 21;\n-        panPersonnel.add(chkLogConception, gridBagConstraints);\n-\n-        chkUseTransfers = new JCheckBox(\"Log Saver - Use Reassign instead of Remove/Assign\"); // NOI18N\n-        chkUseTransfers.setSelected(options.useTransfers());\n-        gridBagConstraints.gridy = 22;\n-        panPersonnel.add(chkUseTransfers, gridBagConstraints);\n-\n-        chkUseTimeInService = new JCheckBox(\"Track Time In Service\"); // NOI18N\n-        chkUseTimeInService.setSelected(options.getUseTimeInService());\n-        gridBagConstraints.gridy = 23;\n-        panPersonnel.add(chkUseTimeInService, gridBagConstraints);\n-\n-        chkShowOriginFaction = new JCheckBox(\"Show Origin Faction\"); // NOI18N\n-        chkShowOriginFaction.setSelected(options.showOriginFaction());\n-        gridBagConstraints.gridy = 24;\n-        panPersonnel.add(chkShowOriginFaction, gridBagConstraints);\n-\n-        chkRandomizeOrigin = new JCheckBox(\"Randomize Origin\"); // NOI18N\n-        chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n-        gridBagConstraints.gridy = 25;\n-        panPersonnel.add(chkRandomizeOrigin, gridBagConstraints);\n-\n-        spnOriginSearchRadius = new JSpinner(new SpinnerNumberModel(options.getOriginSearchRadius(), 10, 250, 10));\n-        JPanel panOriginSearchRadius = new JPanel();\n-        panOriginSearchRadius.add(spnOriginSearchRadius);\n-        panOriginSearchRadius.add(new JLabel(\"Random Origin Search Radius\"));\n-        gridBagConstraints.gridy = 26;\n-        panPersonnel.add(panOriginSearchRadius, gridBagConstraints);\n-\n-        JPanel panSalary = new JPanel(new GridBagLayout());\n-        panSalary.setBorder(BorderFactory.createTitledBorder(\"Salary\"));\n-\n-        JPanel panMultiplier = new JPanel(new GridLayout(1, 3));\n-        panMultiplier.setBorder(BorderFactory.createTitledBorder(\"Multipliers\"));\n-        spnSalaryCommission = new JSpinner(new SpinnerNumberModel(options.getSalaryCommissionMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryCommission.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryCommission = new JPanel();\n-        panSalaryCommission.add(spnSalaryCommission);\n-        panSalaryCommission.add(new JLabel(\"Commissioned\"));\n-        panMultiplier.add(panSalaryCommission);\n-\n-        spnSalaryEnlisted = new JSpinner(new SpinnerNumberModel(options.getSalaryEnlistedMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryEnlisted.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryEnlisted = new JPanel();\n-        panSalaryEnlisted.add(spnSalaryEnlisted);\n-        panSalaryEnlisted.add(new JLabel(\"Enlisted\"));\n-        panMultiplier.add(panSalaryEnlisted);\n-\n-        spnSalaryAntiMek = new JSpinner(new SpinnerNumberModel(options.getSalaryAntiMekMultiplier(), 0, 10, 0.05));\n-        ((JSpinner.DefaultEditor) spnSalaryAntiMek.getEditor()).getTextField().setEditable(false);\n-        JPanel panSalaryAntiMek = new JPanel();\n-        panSalaryAntiMek.add(spnSalaryAntiMek);\n-        panSalaryAntiMek.add(new JLabel(\"Anti-Mek\"));\n-        panMultiplier.add(panSalaryAntiMek);\n-\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 0.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(panMultiplier, gridBagConstraints);\n+        //region Personnel Tab\n+        try {\n+            panPersonnel.setName(\"panPersonnel\");\n+            panPersonnel.setLayout(new java.awt.GridBagLayout());\n+            gridy = 0;\n \n-        JPanel panXpMultiplier = new JPanel(new GridLayout(2, 3));\n-        panXpMultiplier.setBorder(BorderFactory.createTitledBorder(\"Experience Multipliers\"));\n-        spnSalaryXp = new JSpinner[5];\n-        JSpinner spnXpSalary;\n-        JPanel panXpSalary;\n-        for (int i = 0; i < 5; i++) {\n-            spnXpSalary = new JSpinner(new SpinnerNumberModel(options.getSalaryXpMultiplier(i), 0, 10, 0.05));\n-            ((JSpinner.DefaultEditor) spnXpSalary.getEditor()).getTextField().setEditable(false);\n-            panXpSalary = new JPanel();\n-            panXpSalary.add(spnXpSalary);\n-            panXpSalary.add(new JLabel(SkillType.getExperienceLevelName(i)));\n-            panXpMultiplier.add(panXpSalary);\n-            spnSalaryXp[i] = spnXpSalary;\n-        }\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 1;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 0.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(panXpMultiplier, gridBagConstraints);\n+            useTacticsBox.setText(resourceMap.getString(\"useTacticsBox.text\"));\n+            useTacticsBox.setToolTipText(resourceMap.getString(\"useTacticsBox.toolTipText\"));\n+            useTacticsBox.setName(\"useTacticsBox\");\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = gridy;\n+            gridBagConstraints.gridwidth = 2;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n+            panPersonnel.add(useTacticsBox, gridBagConstraints);\n+\n+            useInitBonusBox.setText(resourceMap.getString(\"useInitBonusBox.text\"));\n+            useInitBonusBox.setToolTipText(resourceMap.getString(\"useInitBonusBox.toolTipText\"));\n+            useInitBonusBox.setName(\"useInitBonusBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useInitBonusBox, gridBagConstraints);\n+\n+            useToughnessBox.setText(resourceMap.getString(\"useToughnessBox.text\"));\n+            useToughnessBox.setToolTipText(resourceMap.getString(\"useToughnessBox.toolTipText\"));\n+            useToughnessBox.setName(\"useToughnessBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useToughnessBox, gridBagConstraints);\n+\n+            useArtilleryBox.setText(resourceMap.getString(\"useArtilleryBox.text\"));\n+            useArtilleryBox.setToolTipText(resourceMap.getString(\"useArtilleryBox.toolTipText\"));\n+            useArtilleryBox.setName(\"useArtilleryBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useArtilleryBox, gridBagConstraints);\n+\n+            useAbilitiesBox.setText(resourceMap.getString(\"useAbilitiesBox.text\"));\n+            useAbilitiesBox.setToolTipText(resourceMap.getString(\"useAbilitiesBox.toolTipText\"));\n+            useAbilitiesBox.setName(\"useAbilitiesBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useAbilitiesBox, gridBagConstraints);\n+\n+            useEdgeBox.setText(resourceMap.getString(\"useEdgeBox.text\"));\n+            useEdgeBox.setToolTipText(resourceMap.getString(\"useEdgeBox.toolTipText\"));\n+            useEdgeBox.setName(\"useEdgeBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useEdgeBox, gridBagConstraints);\n+\n+            useSupportEdgeBox.setText(resourceMap.getString(\"useSupportEdgeBox.text\"));\n+            useSupportEdgeBox.setToolTipText(resourceMap.getString(\"useSupportEdgeBox.toolTipText\"));\n+            useSupportEdgeBox.setName(\"useSupportEdgeBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useSupportEdgeBox, gridBagConstraints);\n+\n+            useImplantsBox.setText(resourceMap.getString(\"useImplantsBox.text\"));\n+            useImplantsBox.setToolTipText(resourceMap.getString(\"useImplantsBox.toolTipText\"));\n+            useImplantsBox.setName(\"useImplantsBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useImplantsBox, gridBagConstraints);\n+\n+            chkCapturePrisoners.setText(resourceMap.getString(\"chkCapturePrisoners.text\"));\n+            chkCapturePrisoners.setToolTipText(resourceMap.getString(\"chkCapturePrisoners.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkCapturePrisoners, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> prisonerStatusModel = new DefaultComboBoxModel<>();\n+            prisonerStatusModel.addElement(resourceMap.getString(\"prisonerStatus.Prisoner\"));\n+            prisonerStatusModel.addElement(resourceMap.getString(\"prisonerStatus.Bondsman\"));\n+            comboPrisonerStatus = new JComboBox<>(prisonerStatusModel);\n+            comboPrisonerStatus.setSelectedIndex(options.getDefaultPrisonerStatus());\n+            JPanel pnlPrisonerStatus = new JPanel();\n+            pnlPrisonerStatus.add(new JLabel(resourceMap.getString(\"prisonerStatus.text\")));\n+            pnlPrisonerStatus.add(comboPrisonerStatus);\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlPrisonerStatus, gridBagConstraints);\n+\n+            altQualityAveragingCheckBox.setText(resourceMap.getString(\"altQualityAveragingCheckBox.text\"));\n+            altQualityAveragingCheckBox.setToolTipText(resourceMap.getString(\"altQualityAveragingCheckBox.toolTipText\"));\n+            altQualityAveragingCheckBox.setName(\"altQualityAveragingCheckBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(altQualityAveragingCheckBox, gridBagConstraints);\n+\n+            useAdvancedMedicalBox.setText(resourceMap.getString(\"useAdvancedMedicalBox.text\"));\n+            useAdvancedMedicalBox.setToolTipText(resourceMap.getString(\"useAdvancedMedicalBox.toolTipText\"));\n+            useAdvancedMedicalBox.setName(\"useAdvancedMedicalBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useAdvancedMedicalBox, gridBagConstraints);\n+\n+            useDylansRandomXpBox.setText(resourceMap.getString(\"useDylansRandomXpBox.text\"));\n+            useDylansRandomXpBox.setToolTipText(resourceMap.getString(\"useDylansRandomXpBox.toolTipText\"));\n+            useDylansRandomXpBox.setName(\"useDylansRandomXpBox\");\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useDylansRandomXpBox, gridBagConstraints);\n+\n+            spnHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getHealingWaitingPeriod(), 1, 30, 1));\n+            ((JSpinner.DefaultEditor) spnHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n+            JPanel pnlHealWaitingPeriod = new JPanel();\n+            pnlHealWaitingPeriod.add(spnHealWaitingPeriod);\n+            pnlHealWaitingPeriod.add(new JLabel(resourceMap.getString(\"healWaitingPeriod.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlHealWaitingPeriod, gridBagConstraints);\n+\n+            spnNaturalHealWaitingPeriod = new JSpinner(new SpinnerNumberModel(options.getNaturalHealingWaitingPeriod(),\n+                    1, 365, 1));\n+            ((JSpinner.DefaultEditor) spnNaturalHealWaitingPeriod.getEditor()).getTextField().setEditable(false);\n+            JPanel pnlNaturalHealWaitingPeriod = new JPanel();\n+            pnlNaturalHealWaitingPeriod.add(spnNaturalHealWaitingPeriod);\n+            pnlNaturalHealWaitingPeriod.add(new JLabel(resourceMap.getString(\"naturalHealWaitingPeriod.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(pnlNaturalHealWaitingPeriod, gridBagConstraints);\n+\n+            spnMinimumHitsForVees = new JSpinner(new SpinnerNumberModel(options.getMinimumHitsForVees(), 1, 5, 1));\n+            ((JSpinner.DefaultEditor) spnMinimumHitsForVees.getEditor()).getTextField().setEditable(false);\n+            JPanel panMinimumHitsForVees = new JPanel();\n+            panMinimumHitsForVees.add(spnMinimumHitsForVees);\n+            panMinimumHitsForVees.add(new JLabel(resourceMap.getString(\"minimumHitsForVees.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(panMinimumHitsForVees, gridBagConstraints);\n+\n+            useRandomHitsForVees = new JCheckBox();\n+            useRandomHitsForVees.setSelected(options.useRandomHitsForVees());\n+            useRandomHitsForVees.setText(resourceMap.getString(\"useRandomHitsForVees.text\"));\n+            useRandomHitsForVees.setToolTipText(resourceMap.getString(\"useRandomHitsForVees.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useRandomHitsForVees, gridBagConstraints);\n+\n+            useTougherHealing = new JCheckBox(resourceMap.getString(\"useTougherHealing.text\"));\n+            useTougherHealing.setSelected(options.useTougherHealing());\n+            useTougherHealing.setToolTipText(resourceMap.getString(\"useTougherHealing.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(useTougherHealing, gridBagConstraints);\n+\n+            chkUseTransfers = new JCheckBox(resourceMap.getString(\"useTransfers.text\"));\n+            chkUseTransfers.setSelected(options.useTransfers());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkUseTransfers, gridBagConstraints);\n+\n+            chkUseTimeInService = new JCheckBox(resourceMap.getString(\"useTimeInService.text\"));\n+            chkUseTimeInService.setSelected(options.getUseTimeInService());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkUseTimeInService, gridBagConstraints);\n+\n+            chkShowOriginFaction = new JCheckBox(resourceMap.getString(\"showOriginFaction.text\"));\n+            chkShowOriginFaction.setSelected(options.showOriginFaction());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkShowOriginFaction, gridBagConstraints);\n+\n+            chkRandomizeOrigin = new JCheckBox(resourceMap.getString(\"randomizeOrigin.text\"));\n+            chkRandomizeOrigin.setSelected(options.randomizeOrigin());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkRandomizeOrigin, gridBagConstraints);\n+\n+            chkRandomizeDependentsOrigin = new JCheckBox(resourceMap.getString(\"randomizeDependentsOrigin.text\"));\n+            chkRandomizeDependentsOrigin.setSelected(options.getRandomizeDependentOrigin());\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(chkRandomizeDependentsOrigin, gridBagConstraints);\n+\n+            spnOriginSearchRadius = new JSpinner(new SpinnerNumberModel(options.getOriginSearchRadius(), 10, 250, 10));\n+            JPanel panOriginSearchRadius = new JPanel();\n+            panOriginSearchRadius.add(spnOriginSearchRadius);\n+            panOriginSearchRadius.add(new JLabel(resourceMap.getString(\"originSearchRadius.text\")));\n+            gridBagConstraints.gridy = ++gridy;\n+            panPersonnel.add(panOriginSearchRadius, gridBagConstraints);\n+\n+            //Family\n+            JPanel panFamily = new JPanel(new GridBagLayout());\n+            panFamily.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"FamilyTab.text\")));\n+            int panFamilyGridY = ++gridy;\n+\n+            spnMinimumMarriageAge = new JSpinner(new SpinnerNumberModel(options.getMinimumMarriageAge(), 14, null, 1));\n+            Dimension dimensionMinimumMarriageAge = spnMinimumMarriageAge.getPreferredSize();\n+            dimensionMinimumMarriageAge.width = 40;\n+            spnMinimumMarriageAge.setPreferredSize(dimensionMinimumMarriageAge);\n+            JPanel panMinimumMarriageAge = new JPanel();\n+            panMinimumMarriageAge.add(new JLabel(resourceMap.getString(\"minimumMarriageAge.text\")));\n+            panMinimumMarriageAge.setToolTipText(resourceMap.getString(\"minimumMarriageAge.toolTipText\"));\n+            panMinimumMarriageAge.add(spnMinimumMarriageAge);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panMinimumMarriageAge, gridBagConstraints);\n+\n+            spnCheckMutualAncestorsDepth = new JSpinner(new SpinnerNumberModel(options.checkMutualAncestorsDepth(), 0, 20, 1));\n+            Dimension dimensionCheckMutualAncestorsDepth = spnCheckMutualAncestorsDepth.getPreferredSize();\n+            dimensionCheckMutualAncestorsDepth.width = 40;\n+            spnCheckMutualAncestorsDepth.setPreferredSize(dimensionCheckMutualAncestorsDepth);\n+            JPanel panCheckMutualAncestorsDepth = new JPanel();\n+            panCheckMutualAncestorsDepth.add(new JLabel(resourceMap.getString(\"checkMutualAncestorsDepth.text\")));\n+            panCheckMutualAncestorsDepth.setToolTipText(resourceMap.getString(\"checkMutualAncestorsDepth.toolTipText\"));\n+            panCheckMutualAncestorsDepth.add(spnCheckMutualAncestorsDepth);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panCheckMutualAncestorsDepth, gridBagConstraints);\n+\n+            chkUseRandomMarriages = new JCheckBox(resourceMap.getString(\"useRandomMarriages.text\"));\n+            chkUseRandomMarriages.setToolTipText(resourceMap.getString(\"useRandomMarriages.toolTipText\"));\n+            chkUseRandomMarriages.setSelected(options.useRandomMarriages());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomMarriages, gridBagConstraints);\n+\n+            spnChanceRandomMarriages = new JSpinner(new SpinnerNumberModel(options.getChanceRandomMarriages(), 0, 100, 0.001));\n+            Dimension dimensionChanceRandomMarriages = spnChanceRandomMarriages.getPreferredSize();\n+            dimensionChanceRandomMarriages.width = 50;\n+            spnChanceRandomMarriages.setPreferredSize(dimensionChanceRandomMarriages);\n+            JPanel panChanceRandomMarriages = new JPanel();\n+            panChanceRandomMarriages.add(new JLabel(resourceMap.getString(\"chanceRandomMarriages.text\")));\n+            panChanceRandomMarriages.setToolTipText(resourceMap.getString(\"chanceRandomMarriages.toolTipText\"));\n+            panChanceRandomMarriages.add(spnChanceRandomMarriages);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceRandomMarriages, gridBagConstraints);\n+\n+            spnMarriageAgeRange = new JSpinner(new SpinnerNumberModel(options.getMarriageAgeRange(), 0, null, 1));\n+            Dimension dimensionMarriageAgeRange = spnMarriageAgeRange.getPreferredSize();\n+            dimensionMarriageAgeRange.width = 40;\n+            spnMarriageAgeRange.setPreferredSize(dimensionMarriageAgeRange);\n+            JPanel panMarriageAgeRange = new JPanel();\n+            panMarriageAgeRange.add(new JLabel(resourceMap.getString(\"marriageAgeRange.text\")));\n+            panMarriageAgeRange.setToolTipText(resourceMap.getString(\"marriageAgeRange.toolTipText\"));\n+            panMarriageAgeRange.add(spnMarriageAgeRange);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panMarriageAgeRange, gridBagConstraints);\n+\n+            JPanel panRandomMarriageSurnameWeights = new JPanel(new GridLayout((int) Math.ceil(Person.NUM_SURNAME / 3.0), 3));\n+            panRandomMarriageSurnameWeights.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"randomMarriageSurnameWeights.text\")));\n+            panRandomMarriageSurnameWeights.setToolTipText(resourceMap.getString(\"randomMarriageSurnameWeights.toolTipText\"));\n+            spnRandomMarriageSurnameWeights = new JSpinner[Person.NUM_SURNAME];\n+            JSpinner spnRandomMarriageSurnameWeight;\n+            JPanel panRandomMarriageSurnameWeight;\n+            for (int i = 0; i < Person.NUM_SURNAME; i++) {\n+                spnRandomMarriageSurnameWeight = new JSpinner(new SpinnerNumberModel((options.getRandomMarriageSurnameWeights(i) / 10.0), 0, 100, 0.1));\n+                panRandomMarriageSurnameWeight = new JPanel();\n+                panRandomMarriageSurnameWeight.add(spnRandomMarriageSurnameWeight);\n+                panRandomMarriageSurnameWeight.add(new JLabel(Person.SURNAME_TYPE_NAMES[i]));\n+                panRandomMarriageSurnameWeights.add(panRandomMarriageSurnameWeight);\n+                spnRandomMarriageSurnameWeights[i] = spnRandomMarriageSurnameWeight;\n+            }\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panRandomMarriageSurnameWeights, gridBagConstraints);\n+\n+            chkUseRandomSameSexMarriages = new JCheckBox(resourceMap.getString(\"useRandomSameSexMarriages.text\"));\n+            chkUseRandomSameSexMarriages.setToolTipText(resourceMap.getString(\"useRandomSameSexMarriages.toolTipText\"));\n+            chkUseRandomSameSexMarriages.setSelected(options.useRandomSameSexMarriages());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomSameSexMarriages, gridBagConstraints);\n+\n+            spnChanceRandomSameSexMarriages = new JSpinner(new SpinnerNumberModel(options.getChanceRandomSameSexMarriages(), 0, 100, 0.001));\n+            Dimension dimensionChanceRandomSameSexMarriages = spnChanceRandomSameSexMarriages.getPreferredSize();\n+            dimensionChanceRandomSameSexMarriages.width = 50;\n+            spnChanceRandomSameSexMarriages.setPreferredSize(dimensionChanceRandomSameSexMarriages);\n+            JPanel panChanceRandomSameSexMarriages = new JPanel();\n+            panChanceRandomSameSexMarriages.add(new JLabel(resourceMap.getString(\"chanceRandomSameSexMarriages.text\")));\n+            panChanceRandomSameSexMarriages.setToolTipText(resourceMap.getString(\"chanceRandomSameSexMarriages.toolTipText\"));\n+            panChanceRandomSameSexMarriages.add(spnChanceRandomSameSexMarriages);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceRandomSameSexMarriages, gridBagConstraints);\n+\n+            chkUseUnofficialProcreation = new JCheckBox(resourceMap.getString(\"useUnofficialProcreation.text\"));\n+            chkUseUnofficialProcreation.setSelected(options.useUnofficialProcreation());\n+            chkUseUnofficialProcreation.setToolTipText(resourceMap.getString(\"useUnofficialProcreation.toolTipText\"));\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseUnofficialProcreation, gridBagConstraints);\n+\n+            spnChanceProcreation = new JSpinner(new SpinnerNumberModel(options.getChanceProcreation(), 0, 100, 0.001));\n+            Dimension dimensionChanceProcreation = spnChanceProcreation.getPreferredSize();\n+            dimensionChanceProcreation.width = 50;\n+            spnChanceProcreation.setPreferredSize(dimensionChanceProcreation);\n+            JPanel panChanceProcreation = new JPanel();\n+            panChanceProcreation.add(new JLabel(resourceMap.getString(\"chanceProcreation.text\")));\n+            panChanceProcreation.setToolTipText(resourceMap.getString(\"chanceProcreation.toolTipText\"));\n+            panChanceProcreation.add(spnChanceProcreation);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceProcreation, gridBagConstraints);\n+\n+            chkUseUnofficialProcreationNoRelationship = new JCheckBox(resourceMap.getString(\"useUnofficialProcreationNoRelationship.text\"));\n+            chkUseUnofficialProcreationNoRelationship.setToolTipText(resourceMap.getString(\"useUnofficialProcreationNoRelationship.toolTipText\"));\n+            chkUseUnofficialProcreationNoRelationship.setSelected(options.useUnofficialProcreationNoRelationship());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseUnofficialProcreationNoRelationship, gridBagConstraints);\n+\n+            spnChanceProcreationNoRelationship = new JSpinner(new SpinnerNumberModel(options.getChanceProcreationNoRelationship(), 0, 100, 0.001));\n+            Dimension dimensionChanceProcreationNoRelationship = spnChanceProcreationNoRelationship.getPreferredSize();\n+            dimensionChanceProcreationNoRelationship.width = 50;\n+            spnChanceProcreationNoRelationship.setPreferredSize(dimensionChanceProcreationNoRelationship);\n+            JPanel panChanceProcreationNoRelationship = new JPanel();\n+            panChanceProcreationNoRelationship.add(new JLabel(resourceMap.getString(\"chanceProcreationNoRelationship.text\")));\n+            panChanceProcreationNoRelationship.setToolTipText(resourceMap.getString(\"chanceProcreationNoRelationship.toolTipText\"));\n+            panChanceProcreationNoRelationship.add(spnChanceProcreationNoRelationship);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(panChanceProcreationNoRelationship, gridBagConstraints);\n+\n+            chkDisplayTrueDueDate = new JCheckBox(resourceMap.getString(\"displayTrueDueDate.text\"));\n+            chkDisplayTrueDueDate.setToolTipText(resourceMap.getString(\"displayTrueDueDate.toolTipText\"));\n+            chkDisplayTrueDueDate.setSelected(options.getDisplayTrueDueDate());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkDisplayTrueDueDate, gridBagConstraints);\n+\n+            chkLogConception = new JCheckBox(resourceMap.getString(\"logConception.text\"));\n+            chkLogConception.setSelected(options.logConception());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkLogConception, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> babySurnameStyleModel = new DefaultComboBoxModel<>();\n+            babySurnameStyleModel.addElement(resourceMap.getString(\"babySurnameStyle.Mother\"));\n+            babySurnameStyleModel.addElement(resourceMap.getString(\"babySurnameStyle.Father\"));\n+            comboBabySurnameStyle = new JComboBox<>(babySurnameStyleModel);\n+            comboBabySurnameStyle.setSelectedIndex(options.getBabySurnameStyle());\n+            JPanel pnlBabySurnameStyle = new JPanel();\n+            pnlBabySurnameStyle.add(new JLabel(resourceMap.getString(\"babySurnameStyle.text\")));\n+            pnlBabySurnameStyle.setToolTipText(resourceMap.getString(\"babySurnameStyle.toolTipText\"));\n+            pnlBabySurnameStyle.add(comboBabySurnameStyle);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(pnlBabySurnameStyle, gridBagConstraints);\n+\n+            chkUseParentage = new JCheckBox(resourceMap.getString(\"useParentage.text\"));\n+            chkUseParentage.setSelected(options.useParentage());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseParentage, gridBagConstraints);\n+\n+            DefaultComboBoxModel<String> familyLevelStatusModel = new DefaultComboBoxModel<>();\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.ParentsChildren\"));\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.GrandparentsGrandchildren\"));\n+            familyLevelStatusModel.addElement(resourceMap.getString(\"displayFamilyLevel.AuntsUnclesCousins\"));\n+            comboDisplayFamilyLevel = new JComboBox<>(familyLevelStatusModel);\n+            comboDisplayFamilyLevel.setSelectedIndex(options.displayFamilyLevel());\n+            JPanel pnlDisplayFamilyLevel = new JPanel();\n+            pnlDisplayFamilyLevel.add(new JLabel(resourceMap.getString(\"displayFamilyLevel.text\")));\n+            pnlDisplayFamilyLevel.setToolTipText(resourceMap.getString(\"displayFamilyLevel.toolTipText\"));\n+            pnlDisplayFamilyLevel.add(comboDisplayFamilyLevel);\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(pnlDisplayFamilyLevel, gridBagConstraints);\n+\n+            chkUseRandomDeaths = new JCheckBox(resourceMap.getString(\"useRandomDeaths.text\"));\n+            chkUseRandomDeaths.setToolTipText(resourceMap.getString(\"useRandomDeaths.toolTipText\"));\n+            chkUseRandomDeaths.setSelected(options.useRandomDeaths());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkUseRandomDeaths, gridBagConstraints);\n+\n+            chkKeepMarriedNameUponSpouseDeath = new JCheckBox(resourceMap.getString(\"keepMarriedNameUponSpouseDeath.text\"));\n+            chkKeepMarriedNameUponSpouseDeath.setSelected(options.getKeepMarriedNameUponSpouseDeath());\n+            gridBagConstraints.gridy = ++gridy;\n+            panFamily.add(chkKeepMarriedNameUponSpouseDeath, gridBagConstraints);\n+\n+            gridBagConstraints.gridy = panFamilyGridY;\n+            panPersonnel.add(panFamily, gridBagConstraints);\n+\n+            //Salary\n+            JPanel panSalary = new JPanel(new GridBagLayout());\n+            panSalary.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"SalaryTab.text\")));\n+\n+            JPanel panMultiplier = new JPanel(new GridLayout(1, 3));\n+            panMultiplier.setBorder(BorderFactory.createTitledBorder(\"Multipliers\"));\n+            spnSalaryCommission = new JSpinner(new SpinnerNumberModel(options.getSalaryCommissionMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryCommission.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryCommission = new JPanel();\n+            panSalaryCommission.add(spnSalaryCommission);\n+            panSalaryCommission.add(new JLabel(\"Commissioned\"));\n+            panMultiplier.add(panSalaryCommission);\n+\n+            spnSalaryEnlisted = new JSpinner(new SpinnerNumberModel(options.getSalaryEnlistedMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryEnlisted.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryEnlisted = new JPanel();\n+            panSalaryEnlisted.add(spnSalaryEnlisted);\n+            panSalaryEnlisted.add(new JLabel(\"Enlisted\"));\n+            panMultiplier.add(panSalaryEnlisted);\n+\n+            spnSalaryAntiMek = new JSpinner(new SpinnerNumberModel(options.getSalaryAntiMekMultiplier(), 0, 10, 0.05));\n+            ((JSpinner.DefaultEditor) spnSalaryAntiMek.getEditor()).getTextField().setEditable(false);\n+            JPanel panSalaryAntiMek = new JPanel();\n+            panSalaryAntiMek.add(spnSalaryAntiMek);\n+            panSalaryAntiMek.add(new JLabel(\"Anti-Mek\"));\n+            panMultiplier.add(panSalaryAntiMek);\n \n-        JPanel panAllTypes = new JPanel(new GridLayout(Person.T_NUM / 2, 2));\n-        JMoneyTextField txtType;\n-        JPanel panType;\n-        // TODO: use JFormattedTextField with Numeric formatter\n-        txtSalaryBase = new JMoneyTextField[Person.T_NUM];\n-        for (int i = 1; i < Person.T_NUM; i++) {\n-            txtType = new JMoneyTextField();\n-            txtType.setMoney(options.getBaseSalary(i));\n-            txtType.setPreferredSize(new Dimension(75, 20));\n-            panType = new JPanel(new GridBagLayout());\n             gridBagConstraints = new java.awt.GridBagConstraints();\n             gridBagConstraints.gridx = 0;\n             gridBagConstraints.gridy = 0;\n             gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.weighty = 0.0;\n             gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-            panType.add(new JLabel(Person.getRoleDesc(i, false)), gridBagConstraints);\n+            panSalary.add(panMultiplier, gridBagConstraints);\n+\n+            JPanel panXpMultiplier = new JPanel(new GridLayout(2, 3));\n+            panXpMultiplier.setBorder(BorderFactory.createTitledBorder(\"Experience Multipliers\"));\n+            spnSalaryXp = new JSpinner[5];\n+            JSpinner spnXpSalary;\n+            JPanel panXpSalary;\n+            for (int i = 0; i < 5; i++) {\n+                spnXpSalary = new JSpinner(new SpinnerNumberModel(options.getSalaryXpMultiplier(i), 0, 10, 0.05));\n+                ((JSpinner.DefaultEditor) spnXpSalary.getEditor()).getTextField().setEditable(false);\n+                panXpSalary = new JPanel();\n+                panXpSalary.add(spnXpSalary);\n+                panXpSalary.add(new JLabel(SkillType.getExperienceLevelName(i)));\n+                panXpMultiplier.add(panXpSalary);\n+                spnSalaryXp[i] = spnXpSalary;\n+            }\n             gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 1;\n-            gridBagConstraints.gridy = 0;\n-            gridBagConstraints.weightx = 0.0;\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = 1;\n+            gridBagConstraints.weightx = 1.0;\n             gridBagConstraints.weighty = 0.0;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-            panType.add(txtType, gridBagConstraints);\n-            txtSalaryBase[i] = txtType;\n-            panAllTypes.add(panType);\n-        }\n-        JScrollPane scrSalaryBase = new JScrollPane(panAllTypes);\n-        scrSalaryBase.setBorder(BorderFactory.createTitledBorder(\"Base Salaries\"));\n-        scrSalaryBase.setOpaque(false);\n-        scrSalaryBase.setPreferredSize(new Dimension(200, 200));\n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 0;\n-        gridBagConstraints.gridy = 2;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 1.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panSalary.add(scrSalaryBase, gridBagConstraints);\n+            panSalary.add(panXpMultiplier, gridBagConstraints);\n+\n+            JPanel panAllTypes = new JPanel(new GridLayout(Person.T_NUM / 2, 2));\n+            JMoneyTextField txtType;\n+            JPanel panType;\n+            // TODO: use JFormattedTextField with Numeric formatter\n+            txtSalaryBase = new JMoneyTextField[Person.T_NUM];\n+            for (int i = 1; i < Person.T_NUM; i++) {\n+                txtType = new JMoneyTextField();\n+                txtType.setMoney(options.getBaseSalary(i));\n+                txtType.setPreferredSize(new Dimension(75, 20));\n+                panType = new JPanel(new GridBagLayout());\n+                gridBagConstraints = new java.awt.GridBagConstraints();\n+                gridBagConstraints.gridx = 0;\n+                gridBagConstraints.gridy = 0;\n+                gridBagConstraints.weightx = 1.0;\n+                gridBagConstraints.weighty = 0.0;\n+                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+                panType.add(new JLabel(Person.getRoleDesc(i, false)), gridBagConstraints);\n+                gridBagConstraints = new java.awt.GridBagConstraints();\n+                gridBagConstraints.gridx = 1;\n+                gridBagConstraints.gridy = 0;\n+                gridBagConstraints.weightx = 0.0;\n+                gridBagConstraints.weighty = 0.0;\n+                gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;\n+                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+                panType.add(txtType, gridBagConstraints);\n+                txtSalaryBase[i] = txtType;\n+                panAllTypes.add(panType);\n+            }\n+            JScrollPane scrSalaryBase = new JScrollPane(panAllTypes);\n+            scrSalaryBase.setBorder(BorderFactory.createTitledBorder(\"Base Salaries\"));\n+            scrSalaryBase.setOpaque(false);\n+            scrSalaryBase.setPreferredSize(new Dimension(200, 200));\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = 2;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.weighty = 1.0;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+            panSalary.add(scrSalaryBase, gridBagConstraints);\n \n-        gridBagConstraints = new java.awt.GridBagConstraints();\n-        gridBagConstraints.gridx = 3;\n-        gridBagConstraints.gridy = 0;\n-        gridBagConstraints.gridheight = 23;\n-        gridBagConstraints.weightx = 1.0;\n-        gridBagConstraints.weighty = 1.0;\n-        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n-        panPersonnel.add(panSalary, gridBagConstraints);\n+            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints.gridx = 3;\n+            gridBagConstraints.gridy = 0;\n+            gridBagConstraints.gridheight = 23;\n+            gridBagConstraints.weightx = 1.0;\n+            gridBagConstraints.weighty = 1.0;\n+            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+            panPersonnel.add(panSalary, gridBagConstraints);\n \n-        JScrollPane scrollPersonnel = new JScrollPane(panPersonnel);\n-        scrollPersonnel.setPreferredSize(new java.awt.Dimension(500, 400));\n+            JScrollPane scrollPersonnel = new JScrollPane(panPersonnel);\n+            scrollPersonnel.setPreferredSize(new java.awt.Dimension(500, 400));\n \n-        tabOptions.addTab(resourceMap.getString(\"panPersonnel.TabConstraints.tabTitle\"), scrollPersonnel); // NOI18N\n+            tabOptions.addTab(resourceMap.getString(\"panPersonnel.TabConstraints.tabTitle\"), scrollPersonnel);\n+        } catch (Exception e) {\n+            MekHQ.getLogger().error(getClass(), \"PersonnelTab\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODE3MQ=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 1116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1OTQwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMjoxOFrOFwQAaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNzo0OFrOFwQTkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODIxNg==", "bodyText": "Should this instead use spnSalaryXp.length()?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138216", "createdAt": "2020-03-01T20:32:18Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -4786,22 +4787,75 @@ private void updateOptions() {\n         options.setProbPhenoBA((Integer) spnProbPhenoBA.getModel().getValue());\n         options.setProbPhenoVee((Integer) spnProbPhenoVee.getModel().getValue());\n \n-        //start salary\n-        for (int i = 1; i < Person.T_NUM; i++) {\n-            try {\n-                Money salary = txtSalaryBase[i].getMoney();\n-                options.setBaseSalary(salary, i);\n-            } catch (Exception ignored) {\n+        //region Personnel Tab\n \n-            }\n-        }\n-        for (int i = 0; i < 5; i++) {\n-            options.setSalaryXpMultiplier((Double) spnSalaryXp[i].getModel().getValue(), i);\n+        options.setInitBonus(useInitBonusBox.isSelected());\n+        campaign.getGameOptions().getOption(\"individual_initiative\").setValue(useInitBonusBox.isSelected());\n+        options.setToughness(useToughnessBox.isSelected());\n+        campaign.getGameOptions().getOption(\"toughness\").setValue(useToughnessBox.isSelected());\n+        options.setArtillery(useArtilleryBox.isSelected());\n+        campaign.getGameOptions().getOption(\"artillery_skill\").setValue(useArtilleryBox.isSelected());\n+        options.setAbilities(useAbilitiesBox.isSelected());\n+        campaign.getGameOptions().getOption(\"pilot_advantages\").setValue(useAbilitiesBox.isSelected());\n+        options.setEdge(useEdgeBox.isSelected());\n+        campaign.getGameOptions().getOption(\"edge\").setValue(useEdgeBox.isSelected());\n+        options.setSupportEdge(useSupportEdgeBox.isSelected());\n+        options.setImplants(useImplantsBox.isSelected());\n+        campaign.getGameOptions().getOption(\"manei_domini\").setValue(useImplantsBox.isSelected());\n+        options.setCapturePrisoners(chkCapturePrisoners.isSelected());\n+        options.setDefaultPrisonerStatus(comboPrisonerStatus.getSelectedIndex());\n+        options.setAltQualityAveraging(altQualityAveragingCheckBox.isSelected());\n+        options.setAdvancedMedical(useAdvancedMedicalBox.isSelected());\n+        options.setDylansRandomXp(useDylansRandomXpBox.isSelected());\n+        //we need to reset healing time options through the campaign because we may need to\n+        //loop through personnel to make adjustments\n+        campaign.setHealingTimeOptions((Integer) spnHealWaitingPeriod.getModel().getValue(),\n+                (Integer) spnNaturalHealWaitingPeriod.getModel().getValue());\n+        options.setMinimumHitsForVees((Integer) spnMinimumHitsForVees.getModel().getValue());\n+        options.setUseRandomHitsForVees(useRandomHitsForVees.isSelected());\n+        options.setTougherHealing(useTougherHealing.isSelected());\n+        options.setUseTransfers(chkUseTransfers.isSelected());\n+        options.setUseTimeInService(chkUseTimeInService.isSelected());\n+        options.setShowOriginFaction(chkShowOriginFaction.isSelected());\n+        options.setRandomizeOrigin(chkRandomizeOrigin.isSelected());\n+        options.setRandomizeDependentOrigin(chkRandomizeDependentsOrigin.isSelected());\n+        options.setOriginSearchRadius((Integer)spnOriginSearchRadius.getModel().getValue());\n+        //Family\n+        options.setMinimumMarriageAge((Integer) spnMinimumMarriageAge.getModel().getValue());\n+        options.setCheckMutualAncestorsDepth((Integer) spnCheckMutualAncestorsDepth.getModel().getValue());\n+        options.setUseRandomMarriages(chkUseRandomMarriages.isSelected());\n+        options.setChanceRandomMarriages((Double) spnChanceRandomMarriages.getModel().getValue());\n+        options.setMarriageAgeRange((Integer) spnMarriageAgeRange.getModel().getValue());\n+        for (int i = 0; i < Person.NUM_SURNAME; i++) {\n+            int val = (int) Math.round(((Double) spnRandomMarriageSurnameWeights[i].getModel().getValue()) * 10);\n+            options.setRandomMarriageSurnameWeight(i, val);\n         }\n+        options.setUseRandomSameSexMarriages(chkUseRandomSameSexMarriages.isSelected());\n+        options.setChanceRandomSameSexMarriages((Double) spnChanceRandomSameSexMarriages.getModel().getValue());\n+        options.setUseUnofficialProcreation(chkUseUnofficialProcreation.isSelected());\n+        options.setChanceProcreation((Double) spnChanceProcreation.getModel().getValue());\n+        options.setUseUnofficialProcreationNoRelationship(chkUseUnofficialProcreationNoRelationship.isSelected());\n+        options.setChanceProcreationNoRelationship((Double) spnChanceProcreationNoRelationship.getModel().getValue());\n+        options.setDisplayTrueDueDate(chkDisplayTrueDueDate.isSelected());\n+        options.setLogConception(chkLogConception.isSelected());\n+        options.setBabySurnameStyle(comboBabySurnameStyle.getSelectedIndex());\n+        options.setUseParentage(chkUseParentage.isSelected());\n+        options.setDisplayFamilyLevel(comboDisplayFamilyLevel.getSelectedIndex());\n+        options.setUseRandomDeaths(chkUseRandomDeaths.isSelected());\n+        options.setKeepMarriedNameUponSpouseDeath(chkKeepMarriedNameUponSpouseDeath.isSelected());\n+        //Salary\n         options.setSalaryCommissionMultiplier((Double) spnSalaryCommission.getModel().getValue());\n         options.setSalaryEnlistedMultiplier((Double) spnSalaryEnlisted.getModel().getValue());\n         options.setSalaryAntiMekMultiplier((Double) spnSalaryAntiMek.getModel().getValue());\n-        //end salary\n+        for (int i = 0; i < 5; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 1479}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzEyMQ==", "bodyText": "Yes, it should. Fixed.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386143121", "createdAt": "2020-03-01T21:37:48Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/dialog/CampaignOptionsDialog.java", "diffHunk": "@@ -4786,22 +4787,75 @@ private void updateOptions() {\n         options.setProbPhenoBA((Integer) spnProbPhenoBA.getModel().getValue());\n         options.setProbPhenoVee((Integer) spnProbPhenoVee.getModel().getValue());\n \n-        //start salary\n-        for (int i = 1; i < Person.T_NUM; i++) {\n-            try {\n-                Money salary = txtSalaryBase[i].getMoney();\n-                options.setBaseSalary(salary, i);\n-            } catch (Exception ignored) {\n+        //region Personnel Tab\n \n-            }\n-        }\n-        for (int i = 0; i < 5; i++) {\n-            options.setSalaryXpMultiplier((Double) spnSalaryXp[i].getModel().getValue(), i);\n+        options.setInitBonus(useInitBonusBox.isSelected());\n+        campaign.getGameOptions().getOption(\"individual_initiative\").setValue(useInitBonusBox.isSelected());\n+        options.setToughness(useToughnessBox.isSelected());\n+        campaign.getGameOptions().getOption(\"toughness\").setValue(useToughnessBox.isSelected());\n+        options.setArtillery(useArtilleryBox.isSelected());\n+        campaign.getGameOptions().getOption(\"artillery_skill\").setValue(useArtilleryBox.isSelected());\n+        options.setAbilities(useAbilitiesBox.isSelected());\n+        campaign.getGameOptions().getOption(\"pilot_advantages\").setValue(useAbilitiesBox.isSelected());\n+        options.setEdge(useEdgeBox.isSelected());\n+        campaign.getGameOptions().getOption(\"edge\").setValue(useEdgeBox.isSelected());\n+        options.setSupportEdge(useSupportEdgeBox.isSelected());\n+        options.setImplants(useImplantsBox.isSelected());\n+        campaign.getGameOptions().getOption(\"manei_domini\").setValue(useImplantsBox.isSelected());\n+        options.setCapturePrisoners(chkCapturePrisoners.isSelected());\n+        options.setDefaultPrisonerStatus(comboPrisonerStatus.getSelectedIndex());\n+        options.setAltQualityAveraging(altQualityAveragingCheckBox.isSelected());\n+        options.setAdvancedMedical(useAdvancedMedicalBox.isSelected());\n+        options.setDylansRandomXp(useDylansRandomXpBox.isSelected());\n+        //we need to reset healing time options through the campaign because we may need to\n+        //loop through personnel to make adjustments\n+        campaign.setHealingTimeOptions((Integer) spnHealWaitingPeriod.getModel().getValue(),\n+                (Integer) spnNaturalHealWaitingPeriod.getModel().getValue());\n+        options.setMinimumHitsForVees((Integer) spnMinimumHitsForVees.getModel().getValue());\n+        options.setUseRandomHitsForVees(useRandomHitsForVees.isSelected());\n+        options.setTougherHealing(useTougherHealing.isSelected());\n+        options.setUseTransfers(chkUseTransfers.isSelected());\n+        options.setUseTimeInService(chkUseTimeInService.isSelected());\n+        options.setShowOriginFaction(chkShowOriginFaction.isSelected());\n+        options.setRandomizeOrigin(chkRandomizeOrigin.isSelected());\n+        options.setRandomizeDependentOrigin(chkRandomizeDependentsOrigin.isSelected());\n+        options.setOriginSearchRadius((Integer)spnOriginSearchRadius.getModel().getValue());\n+        //Family\n+        options.setMinimumMarriageAge((Integer) spnMinimumMarriageAge.getModel().getValue());\n+        options.setCheckMutualAncestorsDepth((Integer) spnCheckMutualAncestorsDepth.getModel().getValue());\n+        options.setUseRandomMarriages(chkUseRandomMarriages.isSelected());\n+        options.setChanceRandomMarriages((Double) spnChanceRandomMarriages.getModel().getValue());\n+        options.setMarriageAgeRange((Integer) spnMarriageAgeRange.getModel().getValue());\n+        for (int i = 0; i < Person.NUM_SURNAME; i++) {\n+            int val = (int) Math.round(((Double) spnRandomMarriageSurnameWeights[i].getModel().getValue()) * 10);\n+            options.setRandomMarriageSurnameWeight(i, val);\n         }\n+        options.setUseRandomSameSexMarriages(chkUseRandomSameSexMarriages.isSelected());\n+        options.setChanceRandomSameSexMarriages((Double) spnChanceRandomSameSexMarriages.getModel().getValue());\n+        options.setUseUnofficialProcreation(chkUseUnofficialProcreation.isSelected());\n+        options.setChanceProcreation((Double) spnChanceProcreation.getModel().getValue());\n+        options.setUseUnofficialProcreationNoRelationship(chkUseUnofficialProcreationNoRelationship.isSelected());\n+        options.setChanceProcreationNoRelationship((Double) spnChanceProcreationNoRelationship.getModel().getValue());\n+        options.setDisplayTrueDueDate(chkDisplayTrueDueDate.isSelected());\n+        options.setLogConception(chkLogConception.isSelected());\n+        options.setBabySurnameStyle(comboBabySurnameStyle.getSelectedIndex());\n+        options.setUseParentage(chkUseParentage.isSelected());\n+        options.setDisplayFamilyLevel(comboDisplayFamilyLevel.getSelectedIndex());\n+        options.setUseRandomDeaths(chkUseRandomDeaths.isSelected());\n+        options.setKeepMarriedNameUponSpouseDeath(chkKeepMarriedNameUponSpouseDeath.isSelected());\n+        //Salary\n         options.setSalaryCommissionMultiplier((Double) spnSalaryCommission.getModel().getValue());\n         options.setSalaryEnlistedMultiplier((Double) spnSalaryEnlisted.getModel().getValue());\n         options.setSalaryAntiMekMultiplier((Double) spnSalaryAntiMek.getModel().getValue());\n-        //end salary\n+        for (int i = 0; i < 5; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODIxNg=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 1479}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg2MDUyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMzo1M1rOFwQA8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDowNjo1OFrOFwTI3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM1NA==", "bodyText": "Is reference equality what we want here?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138354", "createdAt": "2020-03-01T20:33:53Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1529,39 +1397,31 @@ private void maybeShowPopup(MouseEvent e) {\n             /*\n              * if(!person.isAssigned()) { cbMenuItem.setSelected(true); }\n              */\n-            if (oneSelected && person.isActive()\n-                    && !(person.isPrisoner() || person.isBondsman())) {\n+            if (oneSelected && person.isActive() && !(person.isPrisoner() || person.isBondsman())) {\n                 for (Unit unit : gui.getCampaign().getUnits()) {\n                     if (!unit.isAvailable()) {\n                         continue;\n                     }\n                     if (unit.usesSoloPilot()) {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())\n                                 && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_PILOT, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             pilotMenu.add(cbMenuItem);\n                         }\n                     } else if (unit.usesSoldiers()) {\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 940}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzM3Mg==", "bodyText": "If the person is assigned to this unit, we want it selected. A comparison of the unit id should do that perfectly. I'm pretty sure it is correct, unless I'm missing something both in code and testing.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386143372", "createdAt": "2020-03-01T21:41:23Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1529,39 +1397,31 @@ private void maybeShowPopup(MouseEvent e) {\n             /*\n              * if(!person.isAssigned()) { cbMenuItem.setSelected(true); }\n              */\n-            if (oneSelected && person.isActive()\n-                    && !(person.isPrisoner() || person.isBondsman())) {\n+            if (oneSelected && person.isActive() && !(person.isPrisoner() || person.isBondsman())) {\n                 for (Unit unit : gui.getCampaign().getUnits()) {\n                     if (!unit.isAvailable()) {\n                         continue;\n                     }\n                     if (unit.usesSoloPilot()) {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())\n                                 && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_PILOT, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             pilotMenu.add(cbMenuItem);\n                         }\n                     } else if (unit.usesSoldiers()) {\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM1NA=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 940}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2OTYxMQ==", "bodyText": "You're currently testing if the person's unit ID points to the same location in memory as the unit's ID. You likely intended this to compare the value of the IDs, right? Outside of int, boolean, float, and other primitive types, you should be using a.equals(b) or Objects.equals(a, b).", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386169611", "createdAt": "2020-03-02T02:06:21Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1529,39 +1397,31 @@ private void maybeShowPopup(MouseEvent e) {\n             /*\n              * if(!person.isAssigned()) { cbMenuItem.setSelected(true); }\n              */\n-            if (oneSelected && person.isActive()\n-                    && !(person.isPrisoner() || person.isBondsman())) {\n+            if (oneSelected && person.isActive() && !(person.isPrisoner() || person.isBondsman())) {\n                 for (Unit unit : gui.getCampaign().getUnits()) {\n                     if (!unit.isAvailable()) {\n                         continue;\n                     }\n                     if (unit.usesSoloPilot()) {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())\n                                 && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_PILOT, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             pilotMenu.add(cbMenuItem);\n                         }\n                     } else if (unit.usesSoldiers()) {\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM1NA=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 940}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4OTUzMg==", "bodyText": "Fixed, and I always forget where the line is drawn for .equals instead of == comparisons", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386189532", "createdAt": "2020-03-02T04:06:58Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1529,39 +1397,31 @@ private void maybeShowPopup(MouseEvent e) {\n             /*\n              * if(!person.isAssigned()) { cbMenuItem.setSelected(true); }\n              */\n-            if (oneSelected && person.isActive()\n-                    && !(person.isPrisoner() || person.isBondsman())) {\n+            if (oneSelected && person.isActive() && !(person.isPrisoner() || person.isBondsman())) {\n                 for (Unit unit : gui.getCampaign().getUnits()) {\n                     if (!unit.isAvailable()) {\n                         continue;\n                     }\n                     if (unit.usesSoloPilot()) {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())\n                                 && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_PILOT, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             pilotMenu.add(cbMenuItem);\n                         }\n                     } else if (unit.usesSoldiers()) {\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM1NA=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 940}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg2MDY0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNDoxMlrOFwQBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNDoxMlrOFwQBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM2OQ==", "bodyText": "Is reference equality what we want here?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138369", "createdAt": "2020-03-01T20:34:12Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1529,39 +1397,31 @@ private void maybeShowPopup(MouseEvent e) {\n             /*\n              * if(!person.isAssigned()) { cbMenuItem.setSelected(true); }\n              */\n-            if (oneSelected && person.isActive()\n-                    && !(person.isPrisoner() || person.isBondsman())) {\n+            if (oneSelected && person.isActive() && !(person.isPrisoner() || person.isBondsman())) {\n                 for (Unit unit : gui.getCampaign().getUnits()) {\n                     if (!unit.isAvailable()) {\n                         continue;\n                     }\n                     if (unit.usesSoloPilot()) {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())\n                                 && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_PILOT, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             pilotMenu.add(cbMenuItem);\n                         }\n                     } else if (unit.usesSoldiers()) {\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_SOLDIER, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             soldierMenu.add(cbMenuItem);\n                         }\n                     } else {\n-                        if (unit.canTakeMoreDrivers()\n-                                && person.canDrive(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreDrivers() && person.canDrive(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 953}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg2MDcxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNDoyNVrOFwQBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNDoyNVrOFwQBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODM4Mw==", "bodyText": "Is reference equality what we want here?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138383", "createdAt": "2020-03-01T20:34:25Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1570,30 +1430,25 @@ private void maybeShowPopup(MouseEvent e) {\n                                 driverMenu.add(cbMenuItem);\n                             }\n                         }\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 968}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg2MDg3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNDo1NlrOFwQBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTo0Mjo1M1rOFwQU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODQwOQ==", "bodyText": "I'll stop asking about that reference equality, but there's more of these.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386138409", "createdAt": "2020-03-01T20:34:56Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1570,30 +1430,25 @@ private void maybeShowPopup(MouseEvent e) {\n                                 driverMenu.add(cbMenuItem);\n                             }\n                         }\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_GUNNER, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             gunnerMenu.add(cbMenuItem);\n                         }\n                         if (unit.canTakeMoreVesselCrew()\n                                 && ((unit.getEntity().isAero() && person.hasSkill(SkillType.S_TECH_VESSEL))\n                                     || ((unit.getEntity().isSupportVehicle() && person.hasSkill(SkillType.S_TECH_MECHANIC))))){\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 980}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzQ3Mw==", "bodyText": "Fourteen in total.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386143473", "createdAt": "2020-03-01T21:42:53Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1570,30 +1430,25 @@ private void maybeShowPopup(MouseEvent e) {\n                                 driverMenu.add(cbMenuItem);\n                             }\n                         }\n-                        if (unit.canTakeMoreGunners()\n-                                && person.canGun(unit.getEntity())) {\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                        if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n                             cbMenuItem.setActionCommand(makeCommand(CMD_ADD_GUNNER, unit.getId().toString()));\n                             cbMenuItem.addActionListener(this);\n                             gunnerMenu.add(cbMenuItem);\n                         }\n                         if (unit.canTakeMoreVesselCrew()\n                                 && ((unit.getEntity().isAero() && person.hasSkill(SkillType.S_TECH_VESSEL))\n                                     || ((unit.getEntity().isSupportVehicle() && person.hasSkill(SkillType.S_TECH_MECHANIC))))){\n-                            cbMenuItem = new JCheckBoxMenuItem(\n-                                    unit.getName());\n-                            // TODO: check the box\n+                            cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n+                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODQwOQ=="}, "originalCommit": {"oid": "0097883e28e931dc8b135ef875b0d6c5e34f94b4"}, "originalPosition": 980}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTkwOTcxOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMjowMDo0NlrOFwQZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMjozNDoxN1rOFwQjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0NDcxNw==", "bodyText": "I'll take a look at moving this into Person later tonight, as it really should just use the divorce method.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386144717", "createdAt": "2020-03-01T22:00:46Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -6027,8 +5959,19 @@ public void changeStatus(Person person, int status) {\n             // Don't forget to tell the spouse\n             if (person.hasSpouse()) {\n                 Person spouse = person.getSpouse();\n+\n+                spouse.addFormerSpouse(new FormerSpouse(person.getId(),\n+                        FormerSpouse.convertDateTimeToLocalDate(getDateTime()), FormerSpouse.REASON_WIDOWED));\n+                person.addFormerSpouse(new FormerSpouse(spouse.getId(),\n+                        FormerSpouse.convertDateTimeToLocalDate(getDateTime()), FormerSpouse.REASON_WIDOWED));\n+\n+                if (!getCampaignOptions().getKeepMarriedNameUponSpouseDeath() && (spouse.getMaidenName() != null)) {\n+                    spouse.setSurname(spouse.getMaidenName());\n+                }\n+\n                 PersonalLogger.spouseKia(spouse, person, getDate());\n-                spouse.setSpouseID(null);\n+                spouse.setSpouseId(null);\n+                spouse.setMaidenName(null);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaca153caa3426d265fc4419a2d14be934e468ee"}, "originalPosition": 1238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0NzI2Mg==", "bodyText": "Moved and fixed a bug in the divorce code.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386147262", "createdAt": "2020-03-01T22:34:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -6027,8 +5959,19 @@ public void changeStatus(Person person, int status) {\n             // Don't forget to tell the spouse\n             if (person.hasSpouse()) {\n                 Person spouse = person.getSpouse();\n+\n+                spouse.addFormerSpouse(new FormerSpouse(person.getId(),\n+                        FormerSpouse.convertDateTimeToLocalDate(getDateTime()), FormerSpouse.REASON_WIDOWED));\n+                person.addFormerSpouse(new FormerSpouse(spouse.getId(),\n+                        FormerSpouse.convertDateTimeToLocalDate(getDateTime()), FormerSpouse.REASON_WIDOWED));\n+\n+                if (!getCampaignOptions().getKeepMarriedNameUponSpouseDeath() && (spouse.getMaidenName() != null)) {\n+                    spouse.setSurname(spouse.getMaidenName());\n+                }\n+\n                 PersonalLogger.spouseKia(spouse, person, getDate());\n-                spouse.setSpouseID(null);\n+                spouse.setSpouseId(null);\n+                spouse.setMaidenName(null);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0NDcxNw=="}, "originalCommit": {"oid": "aaca153caa3426d265fc4419a2d14be934e468ee"}, "originalPosition": 1238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzM3MjY5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjozMjo1NlrOFwd4og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0NTozNVrOFwo7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2NTYwMg==", "bodyText": "Can person.getUnitId be null? If so you should swap the order as unit.getId() will always be non-null.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386365602", "createdAt": "2020-03-02T12:32:56Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1413,15 +1413,15 @@ private void maybeShowPopup(MouseEvent e) {\n                     } else if (unit.usesSoldiers()) {\n                         if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n                             cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n-                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n+                            cbMenuItem.setSelected(person.getUnitId().equals(unit.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df4a73968754c16e9b671ff590163cb3d5764483"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNjY1NQ==", "bodyText": "Yeah, that's a dumb tired programmer mistake.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386406655", "createdAt": "2020-03-02T13:57:51Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1413,15 +1413,15 @@ private void maybeShowPopup(MouseEvent e) {\n                     } else if (unit.usesSoldiers()) {\n                         if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n                             cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n-                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n+                            cbMenuItem.setSelected(person.getUnitId().equals(unit.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2NTYwMg=="}, "originalCommit": {"oid": "df4a73968754c16e9b671ff590163cb3d5764483"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0NjU1MA==", "bodyText": "Fixed", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r386546550", "createdAt": "2020-03-02T17:45:35Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/gui/adapter/PersonnelTableMouseAdapter.java", "diffHunk": "@@ -1413,15 +1413,15 @@ private void maybeShowPopup(MouseEvent e) {\n                     } else if (unit.usesSoldiers()) {\n                         if (unit.canTakeMoreGunners() && person.canGun(unit.getEntity())) {\n                             cbMenuItem = new JCheckBoxMenuItem(unit.getName());\n-                            cbMenuItem.setSelected(person.getUnitId() == unit.getId());\n+                            cbMenuItem.setSelected(person.getUnitId().equals(unit.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2NTYwMg=="}, "originalCommit": {"oid": "df4a73968754c16e9b671ff590163cb3d5764483"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjgyODEzOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzozODowN1rOF2WDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDoyMzoyNFrOF2Wg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc0MA==", "bodyText": "Is this null safe?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392528740", "createdAt": "2020-03-13T23:38:07Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNjI4Nw==", "bodyText": "Bloodname defaults to \"\", so it does not need to be.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392536287", "createdAt": "2020-03-14T00:23:24Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc0MA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjgyODQ3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzozODoyOVrOF2WDmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjo0MToyNVrOF2agJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc5NQ==", "bodyText": "Should these be AUTOMATIC_FAIL?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392528795", "createdAt": "2020-03-13T23:38:29Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {\n+            int result = JOptionPane.showConfirmDialog(null,\n+                    person.getFullName() + \" already has the bloodname \" + person.getBloodname()\n+                            + \"\\nDo you wish to remove that bloodname and generate a new one?\",\n+                    \"Already Has Bloodname\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\n+            if (result == JOptionPane.NO_OPTION) {\n+                return;\n             }\n         }\n-        return patients;\n-    }\n \n-    public ArrayList<Unit> getServiceableUnits() {\n-        ArrayList<Unit> service = new ArrayList<>();\n-        for (Unit u : getUnits()) {\n-            if (!u.isAvailable()) {\n-                continue;\n-            }\n-            if (u.isServiceable()) {\n-                service.add(u);\n-            }\n-        }\n-        return service;\n-    }\n+        // Go ahead and generate a new bloodname\n+        if (person.isClanner() && person.getPhenotype() != Person.PHENOTYPE_NONE) {\n+            int bloodnameTarget = 6;\n+            switch (person.getPhenotype()) {\n+                case Person.PHENOTYPE_MW:\n+                    bloodnameTarget += person.hasSkill(SkillType.S_GUN_MECH)\n+                            ? person.getSkill(SkillType.S_GUN_MECH).getFinalSkillValue()\n+                            : 13;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 430}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNjg0OA==", "bodyText": "No, because of modifiers these can be pushed below 13. It just makes it very rare, which I believe is the point. IIRC, @neoancient added this and should be able to comment?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392536848", "createdAt": "2020-03-14T00:27:11Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {\n+            int result = JOptionPane.showConfirmDialog(null,\n+                    person.getFullName() + \" already has the bloodname \" + person.getBloodname()\n+                            + \"\\nDo you wish to remove that bloodname and generate a new one?\",\n+                    \"Already Has Bloodname\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\n+            if (result == JOptionPane.NO_OPTION) {\n+                return;\n             }\n         }\n-        return patients;\n-    }\n \n-    public ArrayList<Unit> getServiceableUnits() {\n-        ArrayList<Unit> service = new ArrayList<>();\n-        for (Unit u : getUnits()) {\n-            if (!u.isAvailable()) {\n-                continue;\n-            }\n-            if (u.isServiceable()) {\n-                service.add(u);\n-            }\n-        }\n-        return service;\n-    }\n+        // Go ahead and generate a new bloodname\n+        if (person.isClanner() && person.getPhenotype() != Person.PHENOTYPE_NONE) {\n+            int bloodnameTarget = 6;\n+            switch (person.getPhenotype()) {\n+                case Person.PHENOTYPE_MW:\n+                    bloodnameTarget += person.hasSkill(SkillType.S_GUN_MECH)\n+                            ? person.getSkill(SkillType.S_GUN_MECH).getFinalSkillValue()\n+                            : 13;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 430}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMDYzNw==", "bodyText": "I wrote the bloodname generation code, but I didn't write this part, and I can't say for sure what the intention was. I'm not sure how we would end up in a situation where somebody was generated with a certain phenotypes and doesn't have the skills that go with the role, but I would say it should be automatic fail.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392600637", "createdAt": "2020-03-14T16:29:08Z", "author": {"login": "neoancient"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {\n+            int result = JOptionPane.showConfirmDialog(null,\n+                    person.getFullName() + \" already has the bloodname \" + person.getBloodname()\n+                            + \"\\nDo you wish to remove that bloodname and generate a new one?\",\n+                    \"Already Has Bloodname\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\n+            if (result == JOptionPane.NO_OPTION) {\n+                return;\n             }\n         }\n-        return patients;\n-    }\n \n-    public ArrayList<Unit> getServiceableUnits() {\n-        ArrayList<Unit> service = new ArrayList<>();\n-        for (Unit u : getUnits()) {\n-            if (!u.isAvailable()) {\n-                continue;\n-            }\n-            if (u.isServiceable()) {\n-                service.add(u);\n-            }\n-        }\n-        return service;\n-    }\n+        // Go ahead and generate a new bloodname\n+        if (person.isClanner() && person.getPhenotype() != Person.PHENOTYPE_NONE) {\n+            int bloodnameTarget = 6;\n+            switch (person.getPhenotype()) {\n+                case Person.PHENOTYPE_MW:\n+                    bloodnameTarget += person.hasSkill(SkillType.S_GUN_MECH)\n+                            ? person.getSkill(SkillType.S_GUN_MECH).getFinalSkillValue()\n+                            : 13;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 430}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMTYzOA==", "bodyText": "Sounds good, will have that updated shortly", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392601638", "createdAt": "2020-03-14T16:41:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1318,154 +1382,210 @@ public boolean recruitPerson(Person p, boolean prisoner, boolean dependent, bool\n         MekHQ.triggerEvent(new PersonNewEvent(p));\n         return true;\n     }\n+    //endregion Personnel Recruitment\n \n-    /** Adds a person to the campaign unconditionally, without paying for the person. */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void addPerson(Person p) {\n-        if (p == null) {\n-            return;\n-        }\n-\n-        UUID id = UUID.randomUUID();\n-        while (null != personnel.get(id)) {\n-            id = UUID.randomUUID();\n-        }\n-        p.setId(id);\n-        personnel.put(id, p);\n-\n-        //TODO: implement a boolean check based on campaign options\n-        addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-\n-        p.setFreeMan();\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n-    }\n-\n+    //region Bloodnames\n     /**\n-     * Imports a {@link Person} into a campaign.\n-     * @param p A {@link Person} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n      */\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    public void importPerson(Person p) {\n-        addPersonWithoutId(p);\n-    }\n-\n-    @Deprecated // as part of the personnel changes, 23-Feb-2020\n-    private void addPersonWithoutId(Person p) {\n-        personnel.put(p.getId(), p);\n-        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    public void checkBloodnameAdd(Person person, int type) {\n+        checkBloodnameAdd(person, type, false, this.factionCode);\n     }\n \n     /**\n-     * Imports an {@link Ancestors} into a campaign.\n-     * @param a An {@link Ancestors} to import into the campaign.\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n      */\n-    public void importAncestors(Ancestors a) {\n-        addAncestorsWithoutId(a);\n-    }\n-\n-    private void addAncestorsWithoutId(Ancestors a) {\n-        ancestors.put(a.getId(), a);\n-    }\n-\n-    public void addPersonWithoutId(Person p, boolean log) {\n-        while((null == p.getId()) || (null != personnel.get(p.getId()))) {\n-            p.setId(UUID.randomUUID());\n-        }\n-        addPersonWithoutId(p);\n-        if (log) {\n-            addReport(p.getHyperlinkedName() + \" has been added to the personnel roster.\");\n-        }\n-        if (p.getPrimaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 480;\n-            astechPoolOvertime += 240;\n-        }\n-        if (p.getSecondaryRole() == Person.T_ASTECH) {\n-            astechPoolMinutes += 240;\n-            astechPoolOvertime += 120;\n-        }\n-        String rankEntry = LogEntryController.generateRankEntryString(p);\n-        ServiceLogger.joined(p, getDate(), getName(), rankEntry);\n-    }\n-\n-    @Deprecated\n-    public Date getDate() {\n-        return calendar.getTime();\n-    }\n-\n-    public DateTime getDateTime() {\n-        return currentDateTime;\n-    }\n-\n-    public Collection<Person> getPersonnel() {\n-        return personnel.values();\n+    public void checkBloodnameAdd(Person person, int type, String factionCode) {\n+        checkBloodnameAdd(person, type, false, factionCode);\n     }\n \n     /**\n-     * Provides a filtered list of personnel including only active Persons.\n-     * @return ArrayList<Person>\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to the person's phenotype and the player's faction.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n      */\n-    public ArrayList<Person> getActivePersonnel() {\n-        ArrayList<Person> activePersonnel = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.isActive()) {activePersonnel.add(p);}\n-        }\n-        return activePersonnel;\n-    }\n-\n-    public Iterable<Ancestors> getAncestors() {\n-        return ancestors.values();\n-    }\n-\n-    /** @return a matching ancestors entry for the arguments, or null if there isn't any */\n-    public Ancestors getAncestors(UUID fatherId, UUID motherId) {\n-        for(Map.Entry<UUID, Ancestors> m : ancestors.entrySet()) {\n-            Ancestors a = m.getValue();\n-            if(Objects.equals(fatherId, a.getFatherId()) && Objects.equals(motherId, a.getMotherId())) {\n-                return a;\n-            }\n-        }\n-        return null;\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice) {\n+        checkBloodnameAdd(person, type, ignoreDice, this.factionCode);\n     }\n \n-    public ArrayList<Person> getPatients() {\n-        ArrayList<Person> patients = new ArrayList<>();\n-        for (Person p : getPersonnel()) {\n-            if (p.needsFixing()\n-                    || (getCampaignOptions().useAdvancedMedical() && p.hasInjuries(true) && p.isActive())) {\n-                patients.add(p);\n+    /**\n+     * If the person does not already have a bloodname, assigns a chance of having one based on\n+     * skill and rank. If the roll indicates there should be a bloodname, one is assigned as\n+     * appropriate to Clan and phenotype.\n+     *\n+     * @param person       The Bloodname candidate\n+     * @param type         The phenotype index\n+     * @param ignoreDice   If true, skips the random roll and assigns a Bloodname automatically\n+     * @param factionCode  The shortName of the faction the person belongs to. Note that there\n+     *                     is a chance of having a Bloodname that is unique to a different Clan\n+     *                     as this person could have been captured.\n+     */\n+    public void checkBloodnameAdd(Person person, int type, boolean ignoreDice, String factionCode) {\n+        // Person already has a bloodname?\n+        if (person.getBloodname().length() > 0) {\n+            int result = JOptionPane.showConfirmDialog(null,\n+                    person.getFullName() + \" already has the bloodname \" + person.getBloodname()\n+                            + \"\\nDo you wish to remove that bloodname and generate a new one?\",\n+                    \"Already Has Bloodname\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\n+            if (result == JOptionPane.NO_OPTION) {\n+                return;\n             }\n         }\n-        return patients;\n-    }\n \n-    public ArrayList<Unit> getServiceableUnits() {\n-        ArrayList<Unit> service = new ArrayList<>();\n-        for (Unit u : getUnits()) {\n-            if (!u.isAvailable()) {\n-                continue;\n-            }\n-            if (u.isServiceable()) {\n-                service.add(u);\n-            }\n-        }\n-        return service;\n-    }\n+        // Go ahead and generate a new bloodname\n+        if (person.isClanner() && person.getPhenotype() != Person.PHENOTYPE_NONE) {\n+            int bloodnameTarget = 6;\n+            switch (person.getPhenotype()) {\n+                case Person.PHENOTYPE_MW:\n+                    bloodnameTarget += person.hasSkill(SkillType.S_GUN_MECH)\n+                            ? person.getSkill(SkillType.S_GUN_MECH).getFinalSkillValue()\n+                            : 13;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODc5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 430}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjgzMTk2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0MDo1NFrOF2WFjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0MDo1NFrOF2WFjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyOTI5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (p.isActive()) {activePersonnel.add(p);}\n          \n          \n            \n                        if (p.isActive()) {\n          \n          \n            \n                            activePersonnel.add(p);\n          \n          \n            \n                        }", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392529293", "createdAt": "2020-03-13T23:40:54Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -1480,6 +1600,120 @@ public Ancestors createAncestors(UUID father, UUID mother) {\n         ancestors.put(na.getId(), na);\n         return na;\n     }\n+    //endregion Ancestors\n+\n+    //region Other Personnel Methods\n+    /**\n+     * Imports a {@link Person} into a campaign.\n+     * @param p A {@link Person} to import into the campaign.\n+     */\n+    public void importPerson(Person p) {\n+        personnel.put(p.getId(), p);\n+        MekHQ.triggerEvent(new PersonNewEvent(p));\n+    }\n+\n+    public Person getPerson(UUID id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        return personnel.get(id);\n+    }\n+\n+    public Collection<Person> getPersonnel() {\n+        return personnel.values();\n+    }\n+\n+    /**\n+     * Provides a filtered list of personnel including only active Persons.\n+     * @return List<Person>\n+     */\n+    public List<Person> getActivePersonnel() {\n+        List<Person> activePersonnel = new ArrayList<>();\n+        for (Person p : getPersonnel()) {\n+            if (p.isActive()) {activePersonnel.add(p);}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 602}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjgzNjQ0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0NToxNVrOF2WIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxODowNDo0MVrOF2a2IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDAzNA==", "bodyText": "These all need documentation.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392530034", "createdAt": "2020-03-13T23:45:15Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "diffHunk": "@@ -792,28 +712,549 @@ public void setImplants(boolean b) {\n         this.useImplants = b;\n     }\n \n-\tpublic boolean useAltQualityAveraging() {\n-\t\treturn altQualityAveraging;\n-\t}\n+    public boolean capturePrisoners() {\n+        return capturePrisoners;\n+    }\n \n-\tpublic void setAltQualityAveraging(boolean altQualityAveraging) {\n-\t\tthis.altQualityAveraging = altQualityAveraging;\n-\t}\n+    public void setCapturePrisoners(boolean b) {\n+        capturePrisoners = b;\n+    }\n+\n+    public int getDefaultPrisonerStatus() {\n+        return defaultPrisonerStatus;\n+    }\n+\n+    public void setDefaultPrisonerStatus(int d) {\n+        defaultPrisonerStatus = d;\n+    }\n+\n+    public boolean useAltQualityAveraging() {\n+        return altQualityAveraging;\n+    }\n+\n+    public void setAltQualityAveraging(boolean altQualityAveraging) {\n+        this.altQualityAveraging = altQualityAveraging;\n+    }\n \n     public boolean useAdvancedMedical() {\n         return useAdvancedMedical;\n     }\n \n-    public void setAdvancedMedical(boolean b) {\n-        this.useAdvancedMedical = b;\n+    public void setAdvancedMedical(boolean b) {\n+        this.useAdvancedMedical = b;\n+    }\n+\n+    public boolean useDylansRandomXp() {\n+        return useDylansRandomXp;\n+    }\n+\n+    public void setDylansRandomXp(boolean b) {\n+        this.useDylansRandomXp = b;\n+    }\n+\n+    public int getHealingWaitingPeriod() {\n+        return healWaitingPeriod;\n+    }\n+\n+    public void setHealingWaitingPeriod(int d) {\n+        healWaitingPeriod = d;\n+    }\n+\n+    public int getNaturalHealingWaitingPeriod() {\n+        return naturalHealingWaitingPeriod;\n+    }\n+\n+    public void setNaturalHealingWaitingPeriod(int d) {\n+        naturalHealingWaitingPeriod = d;\n+    }\n+\n+    public int getMinimumHitsForVees() {\n+        return minimumHitsForVees;\n+    }\n+\n+    public void setMinimumHitsForVees(int d) {\n+        minimumHitsForVees = d;\n+    }\n+\n+    public boolean useRandomHitsForVees() {\n+        return useRandomHitsForVees;\n+    }\n+\n+    public void setUseRandomHitsForVees(boolean b) {\n+        useRandomHitsForVees = b;\n+    }\n+\n+    public boolean useTougherHealing() {\n+        return tougherHealing;\n+    }\n+\n+    public void setTougherHealing(boolean b) {\n+        tougherHealing = b;\n+    }\n+\n+    public boolean useTransfers() {\n+        return useTransfers;\n+    }\n+\n+    public void setUseTransfers(boolean b) {\n+        useTransfers = b;\n+    }\n+\n+    public boolean getUseTimeInService() {\n+        return useTimeInService;\n+    }\n+\n+    public void setUseTimeInService(boolean b) {\n+        useTimeInService = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public boolean showOriginFaction() {\n+        return showOriginFaction;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public void setShowOriginFaction(boolean b) {\n+        showOriginFaction = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the\n+     * origin of personnel.\n+     */\n+    public boolean randomizeOrigin() {\n+        return randomizeOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * the origin of personnel.\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeOrigin(boolean b) {\n+        randomizeOrigin = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the origin of dependents\n+     */\n+    public boolean getRandomizeDependentOrigin() {\n+        return randomizeDependentOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize the origin of dependents\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeDependentOrigin(boolean b) {\n+        randomizeDependentOrigin = b;\n+    }\n+\n+    /**\n+     * Gets the search radius to use for randomizing\n+     * personnel origins.\n+     */\n+    public int getOriginSearchRadius() {\n+        return originSearchRadius;\n+    }\n+\n+    /**\n+     * Sets the search radius to use for randomizing\n+     * personnel origins.\n+     * @param r The search radius.\n+     */\n+    public void setOriginSearchRadius(int r) {\n+        originSearchRadius = r;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public boolean isOriginExtraRandom() {\n+        return isOriginExtraRandom;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public void setOriginExtraRandom(boolean b) {\n+        isOriginExtraRandom = b;\n+    }\n+\n+    /**\n+     * Gets the distance scale factor to apply when weighting\n+     * random origin planets.\n+     */\n+    public double getOriginDistanceScale() {\n+        return originDistanceScale;\n+    }\n+\n+    /**\n+     * Sets the distance scale factor to apply when weighting\n+     * random origin planets (should be between 0.1 and 2).\n+     */\n+    public void setOriginDistanceScale(double v) {\n+        originDistanceScale = v;\n+    }\n+\n+    //region family\n+    public int getMinimumMarriageAge() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 693}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjQxNw==", "bodyText": "What do you mean by that? Javadoc style?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392542417", "createdAt": "2020-03-14T01:06:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "diffHunk": "@@ -792,28 +712,549 @@ public void setImplants(boolean b) {\n         this.useImplants = b;\n     }\n \n-\tpublic boolean useAltQualityAveraging() {\n-\t\treturn altQualityAveraging;\n-\t}\n+    public boolean capturePrisoners() {\n+        return capturePrisoners;\n+    }\n \n-\tpublic void setAltQualityAveraging(boolean altQualityAveraging) {\n-\t\tthis.altQualityAveraging = altQualityAveraging;\n-\t}\n+    public void setCapturePrisoners(boolean b) {\n+        capturePrisoners = b;\n+    }\n+\n+    public int getDefaultPrisonerStatus() {\n+        return defaultPrisonerStatus;\n+    }\n+\n+    public void setDefaultPrisonerStatus(int d) {\n+        defaultPrisonerStatus = d;\n+    }\n+\n+    public boolean useAltQualityAveraging() {\n+        return altQualityAveraging;\n+    }\n+\n+    public void setAltQualityAveraging(boolean altQualityAveraging) {\n+        this.altQualityAveraging = altQualityAveraging;\n+    }\n \n     public boolean useAdvancedMedical() {\n         return useAdvancedMedical;\n     }\n \n-    public void setAdvancedMedical(boolean b) {\n-        this.useAdvancedMedical = b;\n+    public void setAdvancedMedical(boolean b) {\n+        this.useAdvancedMedical = b;\n+    }\n+\n+    public boolean useDylansRandomXp() {\n+        return useDylansRandomXp;\n+    }\n+\n+    public void setDylansRandomXp(boolean b) {\n+        this.useDylansRandomXp = b;\n+    }\n+\n+    public int getHealingWaitingPeriod() {\n+        return healWaitingPeriod;\n+    }\n+\n+    public void setHealingWaitingPeriod(int d) {\n+        healWaitingPeriod = d;\n+    }\n+\n+    public int getNaturalHealingWaitingPeriod() {\n+        return naturalHealingWaitingPeriod;\n+    }\n+\n+    public void setNaturalHealingWaitingPeriod(int d) {\n+        naturalHealingWaitingPeriod = d;\n+    }\n+\n+    public int getMinimumHitsForVees() {\n+        return minimumHitsForVees;\n+    }\n+\n+    public void setMinimumHitsForVees(int d) {\n+        minimumHitsForVees = d;\n+    }\n+\n+    public boolean useRandomHitsForVees() {\n+        return useRandomHitsForVees;\n+    }\n+\n+    public void setUseRandomHitsForVees(boolean b) {\n+        useRandomHitsForVees = b;\n+    }\n+\n+    public boolean useTougherHealing() {\n+        return tougherHealing;\n+    }\n+\n+    public void setTougherHealing(boolean b) {\n+        tougherHealing = b;\n+    }\n+\n+    public boolean useTransfers() {\n+        return useTransfers;\n+    }\n+\n+    public void setUseTransfers(boolean b) {\n+        useTransfers = b;\n+    }\n+\n+    public boolean getUseTimeInService() {\n+        return useTimeInService;\n+    }\n+\n+    public void setUseTimeInService(boolean b) {\n+        useTimeInService = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public boolean showOriginFaction() {\n+        return showOriginFaction;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public void setShowOriginFaction(boolean b) {\n+        showOriginFaction = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the\n+     * origin of personnel.\n+     */\n+    public boolean randomizeOrigin() {\n+        return randomizeOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * the origin of personnel.\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeOrigin(boolean b) {\n+        randomizeOrigin = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the origin of dependents\n+     */\n+    public boolean getRandomizeDependentOrigin() {\n+        return randomizeDependentOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize the origin of dependents\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeDependentOrigin(boolean b) {\n+        randomizeDependentOrigin = b;\n+    }\n+\n+    /**\n+     * Gets the search radius to use for randomizing\n+     * personnel origins.\n+     */\n+    public int getOriginSearchRadius() {\n+        return originSearchRadius;\n+    }\n+\n+    /**\n+     * Sets the search radius to use for randomizing\n+     * personnel origins.\n+     * @param r The search radius.\n+     */\n+    public void setOriginSearchRadius(int r) {\n+        originSearchRadius = r;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public boolean isOriginExtraRandom() {\n+        return isOriginExtraRandom;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public void setOriginExtraRandom(boolean b) {\n+        isOriginExtraRandom = b;\n+    }\n+\n+    /**\n+     * Gets the distance scale factor to apply when weighting\n+     * random origin planets.\n+     */\n+    public double getOriginDistanceScale() {\n+        return originDistanceScale;\n+    }\n+\n+    /**\n+     * Sets the distance scale factor to apply when weighting\n+     * random origin planets (should be between 0.1 and 2).\n+     */\n+    public void setOriginDistanceScale(double v) {\n+        originDistanceScale = v;\n+    }\n+\n+    //region family\n+    public int getMinimumMarriageAge() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDAzNA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 693}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMTgyMw==", "bodyText": "Ah, the options... do we have an options documentation? Irregardless, I'll create a story to do options documentation for that as it is going to take me a bit of time to think and explain it well.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392601823", "createdAt": "2020-03-14T16:44:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "diffHunk": "@@ -792,28 +712,549 @@ public void setImplants(boolean b) {\n         this.useImplants = b;\n     }\n \n-\tpublic boolean useAltQualityAveraging() {\n-\t\treturn altQualityAveraging;\n-\t}\n+    public boolean capturePrisoners() {\n+        return capturePrisoners;\n+    }\n \n-\tpublic void setAltQualityAveraging(boolean altQualityAveraging) {\n-\t\tthis.altQualityAveraging = altQualityAveraging;\n-\t}\n+    public void setCapturePrisoners(boolean b) {\n+        capturePrisoners = b;\n+    }\n+\n+    public int getDefaultPrisonerStatus() {\n+        return defaultPrisonerStatus;\n+    }\n+\n+    public void setDefaultPrisonerStatus(int d) {\n+        defaultPrisonerStatus = d;\n+    }\n+\n+    public boolean useAltQualityAveraging() {\n+        return altQualityAveraging;\n+    }\n+\n+    public void setAltQualityAveraging(boolean altQualityAveraging) {\n+        this.altQualityAveraging = altQualityAveraging;\n+    }\n \n     public boolean useAdvancedMedical() {\n         return useAdvancedMedical;\n     }\n \n-    public void setAdvancedMedical(boolean b) {\n-        this.useAdvancedMedical = b;\n+    public void setAdvancedMedical(boolean b) {\n+        this.useAdvancedMedical = b;\n+    }\n+\n+    public boolean useDylansRandomXp() {\n+        return useDylansRandomXp;\n+    }\n+\n+    public void setDylansRandomXp(boolean b) {\n+        this.useDylansRandomXp = b;\n+    }\n+\n+    public int getHealingWaitingPeriod() {\n+        return healWaitingPeriod;\n+    }\n+\n+    public void setHealingWaitingPeriod(int d) {\n+        healWaitingPeriod = d;\n+    }\n+\n+    public int getNaturalHealingWaitingPeriod() {\n+        return naturalHealingWaitingPeriod;\n+    }\n+\n+    public void setNaturalHealingWaitingPeriod(int d) {\n+        naturalHealingWaitingPeriod = d;\n+    }\n+\n+    public int getMinimumHitsForVees() {\n+        return minimumHitsForVees;\n+    }\n+\n+    public void setMinimumHitsForVees(int d) {\n+        minimumHitsForVees = d;\n+    }\n+\n+    public boolean useRandomHitsForVees() {\n+        return useRandomHitsForVees;\n+    }\n+\n+    public void setUseRandomHitsForVees(boolean b) {\n+        useRandomHitsForVees = b;\n+    }\n+\n+    public boolean useTougherHealing() {\n+        return tougherHealing;\n+    }\n+\n+    public void setTougherHealing(boolean b) {\n+        tougherHealing = b;\n+    }\n+\n+    public boolean useTransfers() {\n+        return useTransfers;\n+    }\n+\n+    public void setUseTransfers(boolean b) {\n+        useTransfers = b;\n+    }\n+\n+    public boolean getUseTimeInService() {\n+        return useTimeInService;\n+    }\n+\n+    public void setUseTimeInService(boolean b) {\n+        useTimeInService = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public boolean showOriginFaction() {\n+        return showOriginFaction;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public void setShowOriginFaction(boolean b) {\n+        showOriginFaction = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the\n+     * origin of personnel.\n+     */\n+    public boolean randomizeOrigin() {\n+        return randomizeOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * the origin of personnel.\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeOrigin(boolean b) {\n+        randomizeOrigin = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the origin of dependents\n+     */\n+    public boolean getRandomizeDependentOrigin() {\n+        return randomizeDependentOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize the origin of dependents\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeDependentOrigin(boolean b) {\n+        randomizeDependentOrigin = b;\n+    }\n+\n+    /**\n+     * Gets the search radius to use for randomizing\n+     * personnel origins.\n+     */\n+    public int getOriginSearchRadius() {\n+        return originSearchRadius;\n+    }\n+\n+    /**\n+     * Sets the search radius to use for randomizing\n+     * personnel origins.\n+     * @param r The search radius.\n+     */\n+    public void setOriginSearchRadius(int r) {\n+        originSearchRadius = r;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public boolean isOriginExtraRandom() {\n+        return isOriginExtraRandom;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public void setOriginExtraRandom(boolean b) {\n+        isOriginExtraRandom = b;\n+    }\n+\n+    /**\n+     * Gets the distance scale factor to apply when weighting\n+     * random origin planets.\n+     */\n+    public double getOriginDistanceScale() {\n+        return originDistanceScale;\n+    }\n+\n+    /**\n+     * Sets the distance scale factor to apply when weighting\n+     * random origin planets (should be between 0.1 and 2).\n+     */\n+    public void setOriginDistanceScale(double v) {\n+        originDistanceScale = v;\n+    }\n+\n+    //region family\n+    public int getMinimumMarriageAge() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDAzNA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 693}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDI4Mw==", "bodyText": "JavaDoc", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392604283", "createdAt": "2020-03-14T17:20:39Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "diffHunk": "@@ -792,28 +712,549 @@ public void setImplants(boolean b) {\n         this.useImplants = b;\n     }\n \n-\tpublic boolean useAltQualityAveraging() {\n-\t\treturn altQualityAveraging;\n-\t}\n+    public boolean capturePrisoners() {\n+        return capturePrisoners;\n+    }\n \n-\tpublic void setAltQualityAveraging(boolean altQualityAveraging) {\n-\t\tthis.altQualityAveraging = altQualityAveraging;\n-\t}\n+    public void setCapturePrisoners(boolean b) {\n+        capturePrisoners = b;\n+    }\n+\n+    public int getDefaultPrisonerStatus() {\n+        return defaultPrisonerStatus;\n+    }\n+\n+    public void setDefaultPrisonerStatus(int d) {\n+        defaultPrisonerStatus = d;\n+    }\n+\n+    public boolean useAltQualityAveraging() {\n+        return altQualityAveraging;\n+    }\n+\n+    public void setAltQualityAveraging(boolean altQualityAveraging) {\n+        this.altQualityAveraging = altQualityAveraging;\n+    }\n \n     public boolean useAdvancedMedical() {\n         return useAdvancedMedical;\n     }\n \n-    public void setAdvancedMedical(boolean b) {\n-        this.useAdvancedMedical = b;\n+    public void setAdvancedMedical(boolean b) {\n+        this.useAdvancedMedical = b;\n+    }\n+\n+    public boolean useDylansRandomXp() {\n+        return useDylansRandomXp;\n+    }\n+\n+    public void setDylansRandomXp(boolean b) {\n+        this.useDylansRandomXp = b;\n+    }\n+\n+    public int getHealingWaitingPeriod() {\n+        return healWaitingPeriod;\n+    }\n+\n+    public void setHealingWaitingPeriod(int d) {\n+        healWaitingPeriod = d;\n+    }\n+\n+    public int getNaturalHealingWaitingPeriod() {\n+        return naturalHealingWaitingPeriod;\n+    }\n+\n+    public void setNaturalHealingWaitingPeriod(int d) {\n+        naturalHealingWaitingPeriod = d;\n+    }\n+\n+    public int getMinimumHitsForVees() {\n+        return minimumHitsForVees;\n+    }\n+\n+    public void setMinimumHitsForVees(int d) {\n+        minimumHitsForVees = d;\n+    }\n+\n+    public boolean useRandomHitsForVees() {\n+        return useRandomHitsForVees;\n+    }\n+\n+    public void setUseRandomHitsForVees(boolean b) {\n+        useRandomHitsForVees = b;\n+    }\n+\n+    public boolean useTougherHealing() {\n+        return tougherHealing;\n+    }\n+\n+    public void setTougherHealing(boolean b) {\n+        tougherHealing = b;\n+    }\n+\n+    public boolean useTransfers() {\n+        return useTransfers;\n+    }\n+\n+    public void setUseTransfers(boolean b) {\n+        useTransfers = b;\n+    }\n+\n+    public boolean getUseTimeInService() {\n+        return useTimeInService;\n+    }\n+\n+    public void setUseTimeInService(boolean b) {\n+        useTimeInService = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public boolean showOriginFaction() {\n+        return showOriginFaction;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public void setShowOriginFaction(boolean b) {\n+        showOriginFaction = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the\n+     * origin of personnel.\n+     */\n+    public boolean randomizeOrigin() {\n+        return randomizeOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * the origin of personnel.\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeOrigin(boolean b) {\n+        randomizeOrigin = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the origin of dependents\n+     */\n+    public boolean getRandomizeDependentOrigin() {\n+        return randomizeDependentOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize the origin of dependents\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeDependentOrigin(boolean b) {\n+        randomizeDependentOrigin = b;\n+    }\n+\n+    /**\n+     * Gets the search radius to use for randomizing\n+     * personnel origins.\n+     */\n+    public int getOriginSearchRadius() {\n+        return originSearchRadius;\n+    }\n+\n+    /**\n+     * Sets the search radius to use for randomizing\n+     * personnel origins.\n+     * @param r The search radius.\n+     */\n+    public void setOriginSearchRadius(int r) {\n+        originSearchRadius = r;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public boolean isOriginExtraRandom() {\n+        return isOriginExtraRandom;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public void setOriginExtraRandom(boolean b) {\n+        isOriginExtraRandom = b;\n+    }\n+\n+    /**\n+     * Gets the distance scale factor to apply when weighting\n+     * random origin planets.\n+     */\n+    public double getOriginDistanceScale() {\n+        return originDistanceScale;\n+    }\n+\n+    /**\n+     * Sets the distance scale factor to apply when weighting\n+     * random origin planets (should be between 0.1 and 2).\n+     */\n+    public void setOriginDistanceScale(double v) {\n+        originDistanceScale = v;\n+    }\n+\n+    //region family\n+    public int getMinimumMarriageAge() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDAzNA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 693}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzI2NA==", "bodyText": "Implemented JavaDoc comments that help with explaining them. The ones in person will come in wave 2, as I've got quite a few more ideas to implement there and find JavaDoc comments slow me down.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392607264", "createdAt": "2020-03-14T18:04:41Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/CampaignOptions.java", "diffHunk": "@@ -792,28 +712,549 @@ public void setImplants(boolean b) {\n         this.useImplants = b;\n     }\n \n-\tpublic boolean useAltQualityAveraging() {\n-\t\treturn altQualityAveraging;\n-\t}\n+    public boolean capturePrisoners() {\n+        return capturePrisoners;\n+    }\n \n-\tpublic void setAltQualityAveraging(boolean altQualityAveraging) {\n-\t\tthis.altQualityAveraging = altQualityAveraging;\n-\t}\n+    public void setCapturePrisoners(boolean b) {\n+        capturePrisoners = b;\n+    }\n+\n+    public int getDefaultPrisonerStatus() {\n+        return defaultPrisonerStatus;\n+    }\n+\n+    public void setDefaultPrisonerStatus(int d) {\n+        defaultPrisonerStatus = d;\n+    }\n+\n+    public boolean useAltQualityAveraging() {\n+        return altQualityAveraging;\n+    }\n+\n+    public void setAltQualityAveraging(boolean altQualityAveraging) {\n+        this.altQualityAveraging = altQualityAveraging;\n+    }\n \n     public boolean useAdvancedMedical() {\n         return useAdvancedMedical;\n     }\n \n-    public void setAdvancedMedical(boolean b) {\n-        this.useAdvancedMedical = b;\n+    public void setAdvancedMedical(boolean b) {\n+        this.useAdvancedMedical = b;\n+    }\n+\n+    public boolean useDylansRandomXp() {\n+        return useDylansRandomXp;\n+    }\n+\n+    public void setDylansRandomXp(boolean b) {\n+        this.useDylansRandomXp = b;\n+    }\n+\n+    public int getHealingWaitingPeriod() {\n+        return healWaitingPeriod;\n+    }\n+\n+    public void setHealingWaitingPeriod(int d) {\n+        healWaitingPeriod = d;\n+    }\n+\n+    public int getNaturalHealingWaitingPeriod() {\n+        return naturalHealingWaitingPeriod;\n+    }\n+\n+    public void setNaturalHealingWaitingPeriod(int d) {\n+        naturalHealingWaitingPeriod = d;\n+    }\n+\n+    public int getMinimumHitsForVees() {\n+        return minimumHitsForVees;\n+    }\n+\n+    public void setMinimumHitsForVees(int d) {\n+        minimumHitsForVees = d;\n+    }\n+\n+    public boolean useRandomHitsForVees() {\n+        return useRandomHitsForVees;\n+    }\n+\n+    public void setUseRandomHitsForVees(boolean b) {\n+        useRandomHitsForVees = b;\n+    }\n+\n+    public boolean useTougherHealing() {\n+        return tougherHealing;\n+    }\n+\n+    public void setTougherHealing(boolean b) {\n+        tougherHealing = b;\n+    }\n+\n+    public boolean useTransfers() {\n+        return useTransfers;\n+    }\n+\n+    public void setUseTransfers(boolean b) {\n+        useTransfers = b;\n+    }\n+\n+    public boolean getUseTimeInService() {\n+        return useTimeInService;\n+    }\n+\n+    public void setUseTimeInService(boolean b) {\n+        useTimeInService = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public boolean showOriginFaction() {\n+        return showOriginFaction;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to show a person's\n+     * origin faction when displaying their details.\n+     */\n+    public void setShowOriginFaction(boolean b) {\n+        showOriginFaction = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the\n+     * origin of personnel.\n+     */\n+    public boolean randomizeOrigin() {\n+        return randomizeOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * the origin of personnel.\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeOrigin(boolean b) {\n+        randomizeOrigin = b;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize the origin of dependents\n+     */\n+    public boolean getRandomizeDependentOrigin() {\n+        return randomizeDependentOrigin;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize the origin of dependents\n+     * @param b true for randomize, otherwise false\n+     */\n+    public void setRandomizeDependentOrigin(boolean b) {\n+        randomizeDependentOrigin = b;\n+    }\n+\n+    /**\n+     * Gets the search radius to use for randomizing\n+     * personnel origins.\n+     */\n+    public int getOriginSearchRadius() {\n+        return originSearchRadius;\n+    }\n+\n+    /**\n+     * Sets the search radius to use for randomizing\n+     * personnel origins.\n+     * @param r The search radius.\n+     */\n+    public void setOriginSearchRadius(int r) {\n+        originSearchRadius = r;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public boolean isOriginExtraRandom() {\n+        return isOriginExtraRandom;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether or not to randomize\n+     * origin to the planetary level, rather than just the\n+     * system level.\n+     */\n+    public void setOriginExtraRandom(boolean b) {\n+        isOriginExtraRandom = b;\n+    }\n+\n+    /**\n+     * Gets the distance scale factor to apply when weighting\n+     * random origin planets.\n+     */\n+    public double getOriginDistanceScale() {\n+        return originDistanceScale;\n+    }\n+\n+    /**\n+     * Sets the distance scale factor to apply when weighting\n+     * random origin planets (should be between 0.1 and 2).\n+     */\n+    public void setOriginDistanceScale(double v) {\n+        originDistanceScale = v;\n+    }\n+\n+    //region family\n+    public int getMinimumMarriageAge() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDAzNA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 693}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0MDk2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0ODo1NVrOF2WLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozMDo1MVrOF2Wk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDcxNg==", "bodyText": "?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392530716", "createdAt": "2020-03-13T23:48:55Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -165,31 +148,73 @@\n \n     public PersonAwardController awardController;\n \n-    private static final IntSupplier PREGNANCY_DURATION = () -> {\n+    //region Family Variables\n+    // Lineage\n+    protected UUID ancestorsId;\n+    protected UUID spouse;\n+    protected List<FormerSpouse> formerSpouses;\n+\n+    //region Procreation\n+    protected GregorianCalendar dueDate;\n+    protected GregorianCalendar expectedDueDate;\n+\n+    private static final int PREGNANCY_STANDARD_DURATION = 268; //standard duration of a pregnancy in days\n+\n+    // This creates a random range of approximately six weeks with which to modify the standard pregnancy duration\n+    // To create randomized pregnancy duration\n+    private static final IntSupplier PREGNANCY_MODIFY_DURATION = () -> {\n         double gaussian = Math.sqrt(-2 * Math.log(Math.nextUp(Math.random())))\n             * Math.cos(2.0 * Math.PI * Math.random());\n         // To not get weird results, we limit the values to +/- 4.0 (almost 6 weeks)\n-        gaussian = Math.max(-4.0, Math.min(4.0, gaussian));\n-        return (int) Math.round(gaussian * 10 + 38 * 7);\n+        return (int) Math.round(Math.max(-4.0, Math.min(4.0, gaussian)) * 10);\n     };\n+\n     private static final IntSupplier PREGNANCY_SIZE = () -> {\n         int children = 1;\n         // Hellin's law says it's 1:89 chance, to not make it appear too seldom, we use 1:50\n         while(Compute.randomInt(50) == 0) {\n             ++ children;\n         }\n-        return Math.min(children, 8); // Limit to octuplets, for the sake of sanity\n+        return Math.min(children, 10); // Limit to decuplets, for the sake of sanity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzMyMg==", "bodyText": "The odds are insane, but if we've got the base code to support it why not (1 / 50^10, IIRC)", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392537322", "createdAt": "2020-03-14T00:30:51Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -165,31 +148,73 @@\n \n     public PersonAwardController awardController;\n \n-    private static final IntSupplier PREGNANCY_DURATION = () -> {\n+    //region Family Variables\n+    // Lineage\n+    protected UUID ancestorsId;\n+    protected UUID spouse;\n+    protected List<FormerSpouse> formerSpouses;\n+\n+    //region Procreation\n+    protected GregorianCalendar dueDate;\n+    protected GregorianCalendar expectedDueDate;\n+\n+    private static final int PREGNANCY_STANDARD_DURATION = 268; //standard duration of a pregnancy in days\n+\n+    // This creates a random range of approximately six weeks with which to modify the standard pregnancy duration\n+    // To create randomized pregnancy duration\n+    private static final IntSupplier PREGNANCY_MODIFY_DURATION = () -> {\n         double gaussian = Math.sqrt(-2 * Math.log(Math.nextUp(Math.random())))\n             * Math.cos(2.0 * Math.PI * Math.random());\n         // To not get weird results, we limit the values to +/- 4.0 (almost 6 weeks)\n-        gaussian = Math.max(-4.0, Math.min(4.0, gaussian));\n-        return (int) Math.round(gaussian * 10 + 38 * 7);\n+        return (int) Math.round(Math.max(-4.0, Math.min(4.0, gaussian)) * 10);\n     };\n+\n     private static final IntSupplier PREGNANCY_SIZE = () -> {\n         int children = 1;\n         // Hellin's law says it's 1:89 chance, to not make it appear too seldom, we use 1:50\n         while(Compute.randomInt(50) == 0) {\n             ++ children;\n         }\n-        return Math.min(children, 8); // Limit to octuplets, for the sake of sanity\n+        return Math.min(children, 10); // Limit to decuplets, for the sake of sanity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDcxNg=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0NDQ4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1MTozNlrOF2WNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozMzozNlrOF2WmTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTIzMw==", "bodyText": "It would be best if the less specific constructors delegated to this, the most specific constructor.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392531233", "createdAt": "2020-03-13T23:51:36Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -355,62 +370,115 @@ private static String getMissionParticipatedString() {\n         OTHER_RANSOM_VALUES.put(SkillType.EXP_ELITE, Money.of(50000));\n     }\n \n+    //region Reverse Compatibility\n+    // TODO : Move these so their migration is handled locally, to free the memory space (as minimal it might be)\n+    private int oldUnitId = -1;\n+    private int oldDoctorId = -1;\n+    //v0.1.8 and earlier\n+    protected int teamId = -1;\n+    //endregion Reverse Compatibility\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n     //default constructor\n-    public Person(Campaign c) {\n-        this(\"Biff the Understudy\", c);\n+    public Person(Campaign campaign) {\n+        this(Crew.UNNAMED, Crew.UNNAMED_SURNAME, campaign);\n     }\n \n-    public Person(Campaign c, String factionCode) {\n-        this(\"Biff the Understudy\", c, factionCode);\n+    public Person(Campaign campaign, String factionCode) {\n+        this(Crew.UNNAMED, Crew.UNNAMED_SURNAME, campaign, factionCode);\n     }\n \n-    public Person(String name, Campaign c) {\n-        this(name, c, c.getFactionCode());\n+    public Person(String givenName, String surname, Campaign campaign) {\n+        this(givenName, surname, campaign, campaign.getFactionCode());\n     }\n \n-    public Person(String name, Campaign c, String factionCode) {\n-        this.name = name;\n+    /**\n+     * Primary Person constructor, variables are initialized in the exact same order as they are\n+     * saved to the XML file\n+     * @param givenName     the person's given name\n+     * @param surname       the person's surname\n+     * @param campaign      the campaign this person is a part of\n+     * @param factionCode   the faction this person was borne into\n+     */\n+    public Person(String givenName, String surname, Campaign campaign, String factionCode) {\n+        // First, we assign campaign\n+        this.campaign = campaign;\n+\n+        // Then, we assign the variables in XML file order\n+        id = null;\n+        this.givenName = givenName;\n+        this.surname = surname;\n+        honorific = \"\";\n+        maidenName = null; // this is set to null to handle divorce cases\n         callsign = \"\";\n+        primaryRole = T_NONE;\n+        secondaryRole = T_NONE;\n+        primaryDesignator = DESIG_NONE;\n+        secondaryDesignator = DESIG_NONE;\n+        commander = false;\n+        dependent = false;\n+        originFaction = Faction.getFaction(factionCode);\n+        originPlanet = null;\n+        clan = originFaction.isClan();\n+        phenotype = PHENOTYPE_NONE;\n+        bloodname = \"\";\n+        biography = \"\";\n+        idleMonths = -1;\n+        ancestorsId = null;\n+        spouse = null;\n+        formerSpouses = new ArrayList<>();\n+        dueDate = null;\n+        expectedDueDate = null;\n         portraitCategory = Crew.ROOT_PORTRAIT;\n         portraitFile = Crew.PORTRAIT_NONE;\n-        portraitCategoryOverride = null;\n-        portraitFileOverride = null;\n         xp = 0;\n-        acquisitions = 0;\n-        gender = G_MALE;\n-        birthday = new GregorianCalendar(3042, Calendar.JANUARY, 1);\n+        daysToWaitForHealing = 0;\n+        gender = Crew.G_MALE;\n         rank = 0;\n         rankLevel = 0;\n-        status = S_ACTIVE;\n-        hits = 0;\n-        salary = Money.of(-1);\n-        campaign = c;\n+        rankSystem = -1;\n+        maneiDominiRank = Rank.MD_RANK_NONE;\n+        maneiDominiClass = MD_NONE;\n+        nTasks = 0;\n         doctorId = null;\n         unitId = null;\n-        oldDoctorId = -1;\n-        oldUnitId = -1;\n+        salary = Money.of(-1);\n+        status = S_ACTIVE;\n+        prisonerStatus = PRISONER_NOT;\n+        willingToDefect = false;\n+        hits = 0;\n         toughness = 0;\n-        biography = \"\";\n-        nTasks = 0;\n+        resetMinutesLeft(); // this assigns minutesLeft and overtimeLeft\n+        birthday = null;\n+        dateOfDeath = null;\n+        recruitment = null;\n+        skills = new Skills();\n+        options = new PersonnelOptions();\n+        currentEdge = 0;\n+        techUnitIds = new ArrayList<>();\n         personnelLog = new ArrayList<>();\n         missionLog = new ArrayList<>();\n-        idleMonths = -1;\n-        daysToWaitForHealing = 15;\n-        resetMinutesLeft();\n-        prisonerStatus = PRISONER_NOT;\n-        dependent = false;\n-        commander = false;\n-        isClanTech = false;\n-        techUnitIds = new ArrayList<>();\n-        phenotype = PHENOTYPE_NONE;\n-        originFaction = Faction.getFaction(factionCode);\n-        clan = originFaction.isClan();\n-        bloodname = \"\";\n-        primaryDesignator = DESIG_NONE;\n-        secondaryDesignator = DESIG_NONE;\n         awardController = new PersonAwardController(this);\n+        injuries = new ArrayList<>();\n+        founder = false;\n+        originalUnitWeight = EntityWeightClass.WEIGHT_ULTRA_LIGHT;\n+        originalUnitTech = TECH_IS1;\n+        originalUnitId = null;\n+        acquisitions = 0;\n+        extraData = null;\n+\n+        // Initialize Data based on these settings\n+        setFullName();\n     }\n \n+    public Person(String givenName, String surname, String honorific, Campaign c, String factionCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzY3OQ==", "bodyText": "Good point, I'll swap that over", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392537679", "createdAt": "2020-03-14T00:33:36Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -355,62 +370,115 @@ private static String getMissionParticipatedString() {\n         OTHER_RANSOM_VALUES.put(SkillType.EXP_ELITE, Money.of(50000));\n     }\n \n+    //region Reverse Compatibility\n+    // TODO : Move these so their migration is handled locally, to free the memory space (as minimal it might be)\n+    private int oldUnitId = -1;\n+    private int oldDoctorId = -1;\n+    //v0.1.8 and earlier\n+    protected int teamId = -1;\n+    //endregion Reverse Compatibility\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n     //default constructor\n-    public Person(Campaign c) {\n-        this(\"Biff the Understudy\", c);\n+    public Person(Campaign campaign) {\n+        this(Crew.UNNAMED, Crew.UNNAMED_SURNAME, campaign);\n     }\n \n-    public Person(Campaign c, String factionCode) {\n-        this(\"Biff the Understudy\", c, factionCode);\n+    public Person(Campaign campaign, String factionCode) {\n+        this(Crew.UNNAMED, Crew.UNNAMED_SURNAME, campaign, factionCode);\n     }\n \n-    public Person(String name, Campaign c) {\n-        this(name, c, c.getFactionCode());\n+    public Person(String givenName, String surname, Campaign campaign) {\n+        this(givenName, surname, campaign, campaign.getFactionCode());\n     }\n \n-    public Person(String name, Campaign c, String factionCode) {\n-        this.name = name;\n+    /**\n+     * Primary Person constructor, variables are initialized in the exact same order as they are\n+     * saved to the XML file\n+     * @param givenName     the person's given name\n+     * @param surname       the person's surname\n+     * @param campaign      the campaign this person is a part of\n+     * @param factionCode   the faction this person was borne into\n+     */\n+    public Person(String givenName, String surname, Campaign campaign, String factionCode) {\n+        // First, we assign campaign\n+        this.campaign = campaign;\n+\n+        // Then, we assign the variables in XML file order\n+        id = null;\n+        this.givenName = givenName;\n+        this.surname = surname;\n+        honorific = \"\";\n+        maidenName = null; // this is set to null to handle divorce cases\n         callsign = \"\";\n+        primaryRole = T_NONE;\n+        secondaryRole = T_NONE;\n+        primaryDesignator = DESIG_NONE;\n+        secondaryDesignator = DESIG_NONE;\n+        commander = false;\n+        dependent = false;\n+        originFaction = Faction.getFaction(factionCode);\n+        originPlanet = null;\n+        clan = originFaction.isClan();\n+        phenotype = PHENOTYPE_NONE;\n+        bloodname = \"\";\n+        biography = \"\";\n+        idleMonths = -1;\n+        ancestorsId = null;\n+        spouse = null;\n+        formerSpouses = new ArrayList<>();\n+        dueDate = null;\n+        expectedDueDate = null;\n         portraitCategory = Crew.ROOT_PORTRAIT;\n         portraitFile = Crew.PORTRAIT_NONE;\n-        portraitCategoryOverride = null;\n-        portraitFileOverride = null;\n         xp = 0;\n-        acquisitions = 0;\n-        gender = G_MALE;\n-        birthday = new GregorianCalendar(3042, Calendar.JANUARY, 1);\n+        daysToWaitForHealing = 0;\n+        gender = Crew.G_MALE;\n         rank = 0;\n         rankLevel = 0;\n-        status = S_ACTIVE;\n-        hits = 0;\n-        salary = Money.of(-1);\n-        campaign = c;\n+        rankSystem = -1;\n+        maneiDominiRank = Rank.MD_RANK_NONE;\n+        maneiDominiClass = MD_NONE;\n+        nTasks = 0;\n         doctorId = null;\n         unitId = null;\n-        oldDoctorId = -1;\n-        oldUnitId = -1;\n+        salary = Money.of(-1);\n+        status = S_ACTIVE;\n+        prisonerStatus = PRISONER_NOT;\n+        willingToDefect = false;\n+        hits = 0;\n         toughness = 0;\n-        biography = \"\";\n-        nTasks = 0;\n+        resetMinutesLeft(); // this assigns minutesLeft and overtimeLeft\n+        birthday = null;\n+        dateOfDeath = null;\n+        recruitment = null;\n+        skills = new Skills();\n+        options = new PersonnelOptions();\n+        currentEdge = 0;\n+        techUnitIds = new ArrayList<>();\n         personnelLog = new ArrayList<>();\n         missionLog = new ArrayList<>();\n-        idleMonths = -1;\n-        daysToWaitForHealing = 15;\n-        resetMinutesLeft();\n-        prisonerStatus = PRISONER_NOT;\n-        dependent = false;\n-        commander = false;\n-        isClanTech = false;\n-        techUnitIds = new ArrayList<>();\n-        phenotype = PHENOTYPE_NONE;\n-        originFaction = Faction.getFaction(factionCode);\n-        clan = originFaction.isClan();\n-        bloodname = \"\";\n-        primaryDesignator = DESIG_NONE;\n-        secondaryDesignator = DESIG_NONE;\n         awardController = new PersonAwardController(this);\n+        injuries = new ArrayList<>();\n+        founder = false;\n+        originalUnitWeight = EntityWeightClass.WEIGHT_ULTRA_LIGHT;\n+        originalUnitTech = TECH_IS1;\n+        originalUnitId = null;\n+        acquisitions = 0;\n+        extraData = null;\n+\n+        // Initialize Data based on these settings\n+        setFullName();\n     }\n \n+    public Person(String givenName, String surname, String honorific, Campaign c, String factionCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTIzMw=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0NTM0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1MjoyM1rOF2WNpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTowNTo0MlrOF2W4dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTM2Nw==", "bodyText": "Is there a particular reason the variant can't be an Enum?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392531367", "createdAt": "2020-03-13T23:52:23Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -529,80 +582,96 @@ public void setWillingToDefect(boolean willingToDefect) {\n         this.willingToDefect = willingToDefect && (prisonerStatus == PRISONER_YES);\n     }\n \n-    public String getGenderName() {\n-        return getGenderName(gender);\n-    }\n-\n-    public static String getGenderName(int gender) {\n-        switch (gender) {\n-            case G_MALE:\n-                return \"Male\";\n-            case G_FEMALE:\n-                return \"Female\";\n-            default:\n-                return \"?\";\n-        }\n-    }\n-\n-    public String getChildGenderName() {\n-        return getChildGenderName(gender);\n-    }\n-\n-    public static String getChildGenderName(int gender) {\n-        switch (gender) {\n-            case G_MALE:\n-                return \"boy\";\n-            case G_FEMALE:\n-                return \"girl\";\n-            default:\n-                return \"?\";\n+    //region Text Getters\n+    //TODO : Rename and Localize region\n+    public String getGenderString(int variant) {\n+        return getGenderString(gender, variant);\n+    }\n+\n+    public static String getGenderString(int gender, int variant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 521}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjMyNQ==", "bodyText": "Nope, switched it to an enum.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392542325", "createdAt": "2020-03-14T01:05:42Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -529,80 +582,96 @@ public void setWillingToDefect(boolean willingToDefect) {\n         this.willingToDefect = willingToDefect && (prisonerStatus == PRISONER_YES);\n     }\n \n-    public String getGenderName() {\n-        return getGenderName(gender);\n-    }\n-\n-    public static String getGenderName(int gender) {\n-        switch (gender) {\n-            case G_MALE:\n-                return \"Male\";\n-            case G_FEMALE:\n-                return \"Female\";\n-            default:\n-                return \"?\";\n-        }\n-    }\n-\n-    public String getChildGenderName() {\n-        return getChildGenderName(gender);\n-    }\n-\n-    public static String getChildGenderName(int gender) {\n-        switch (gender) {\n-            case G_MALE:\n-                return \"boy\";\n-            case G_FEMALE:\n-                return \"girl\";\n-            default:\n-                return \"?\";\n+    //region Text Getters\n+    //TODO : Rename and Localize region\n+    public String getGenderString(int variant) {\n+        return getGenderString(gender, variant);\n+    }\n+\n+    public static String getGenderString(int gender, int variant) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTM2Nw=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 521}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0NzkwOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1NDozNlrOF2WPKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1NDozNlrOF2WPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String space = \" \";\n          \n          \n            \n                    final String space = \" \";", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392531754", "createdAt": "2020-03-13T23:54:36Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -701,13 +783,103 @@ public void setMaidenName(String n) {\n     }\n \n     public String getFullName() {\n-        if (bloodname.length() > 0) {\n-            return name + \" \" + bloodname;\n+        return fullName;\n+    }\n+\n+    public void setFullName() {\n+        if (!StringUtil.isNullOrEmpty(givenName)) {\n+            if (isClanner()) {\n+                if (!StringUtil.isNullOrEmpty(bloodname)) {\n+                    fullName = givenName + \" \" + bloodname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            } else {\n+                if (!StringUtil.isNullOrEmpty(surname)) {\n+                    fullName = givenName + \" \" + surname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            }\n+\n+            if (!StringUtil.isNullOrEmpty(honorific)) {\n+                fullName += \" \" + honorific;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is used to migrate names from being a joined name to split between given name and surname,\n+     * as part of the Personnel changes in MekHQ 0.47.4.\n+     * @param n the name to be migrated\n+     */\n+    public void migrateName(String n) {\n+        // How this works:\n+        // Takes the input name, and splits it into individual parts.\n+        // Then, it depends on whether the person is a Clanner or not.\n+        // For Clan names:\n+        // Takes the input name, and assumes that person does not have a surname\n+        // Bloodnames are assumed to have been assigned either through the\n+        // For Inner Sphere names:\n+        // Depending on the length of the resulting array, the name is processed differently\n+        // Array of length 1: the name is assumed to not have a surname, just a given name\n+        // Array of length 2: the name is assumed to be a given name and a surname\n+        // Array of length 3: the name is assumed to be a given name and two surnames\n+        // Array of length 4+: the name is assumed to be as many given names as possible and two surnames\n+        //\n+        // Then, the full name is set\n+        String space = \" \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 781}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0ODc3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1NToxOVrOF2WPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo0MTo1MFrOF2Wt1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTg3OA==", "bodyText": "Can we get an example name for this area that this handles?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392531878", "createdAt": "2020-03-13T23:55:19Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -701,13 +783,103 @@ public void setMaidenName(String n) {\n     }\n \n     public String getFullName() {\n-        if (bloodname.length() > 0) {\n-            return name + \" \" + bloodname;\n+        return fullName;\n+    }\n+\n+    public void setFullName() {\n+        if (!StringUtil.isNullOrEmpty(givenName)) {\n+            if (isClanner()) {\n+                if (!StringUtil.isNullOrEmpty(bloodname)) {\n+                    fullName = givenName + \" \" + bloodname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            } else {\n+                if (!StringUtil.isNullOrEmpty(surname)) {\n+                    fullName = givenName + \" \" + surname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            }\n+\n+            if (!StringUtil.isNullOrEmpty(honorific)) {\n+                fullName += \" \" + honorific;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is used to migrate names from being a joined name to split between given name and surname,\n+     * as part of the Personnel changes in MekHQ 0.47.4.\n+     * @param n the name to be migrated\n+     */\n+    public void migrateName(String n) {\n+        // How this works:\n+        // Takes the input name, and splits it into individual parts.\n+        // Then, it depends on whether the person is a Clanner or not.\n+        // For Clan names:\n+        // Takes the input name, and assumes that person does not have a surname\n+        // Bloodnames are assumed to have been assigned either through the\n+        // For Inner Sphere names:\n+        // Depending on the length of the resulting array, the name is processed differently\n+        // Array of length 1: the name is assumed to not have a surname, just a given name\n+        // Array of length 2: the name is assumed to be a given name and a surname\n+        // Array of length 3: the name is assumed to be a given name and two surnames\n+        // Array of length 4+: the name is assumed to be as many given names as possible and two surnames\n+        //\n+        // Then, the full name is set\n+        String space = \" \";\n+        String[] name = n.split(space);\n+\n+        if (isClanner()) {\n+            int i = 0;\n+            givenName = name[i];\n+            for (i = 1; i < name.length - 1; i++) {\n+                if (!name[i].equals(space)) {\n+                    givenName += space + name[i];\n+                }\n+            }\n+\n+            if (!(!StringUtil.isNullOrEmpty(getBloodname()) && getBloodname().equals(name[i]))) {\n+                givenName += space + name[i];\n+            }\n+\n+            surname = null;\n+        } else {\n+            if (name.length == 1) {\n+                givenName = name[0];\n+                surname = null;\n+            } else if (name.length == 2) {\n+                givenName = name[0];\n+                surname = name[1];\n+            } else if (name.length == 3) {\n+                givenName = name[0];\n+                if (name[1].equals(space)) {\n+                    surname = name[2];\n+                } else {\n+                    surname = name[1] + space + name[2];\n+                }\n+            } else if (name.length > 3) {\n+                int i = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 813}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTYwNg==", "bodyText": "One potential case from our own random generation is:\nChan Juan St. Albans\nOne reason I'm adding this is to handle one of my D&D character's names:\nThe Right Honourable Terrwyn Owain ap Gwythyr Aberdinas von Hofen Penderyn III", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392539606", "createdAt": "2020-03-14T00:41:50Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -701,13 +783,103 @@ public void setMaidenName(String n) {\n     }\n \n     public String getFullName() {\n-        if (bloodname.length() > 0) {\n-            return name + \" \" + bloodname;\n+        return fullName;\n+    }\n+\n+    public void setFullName() {\n+        if (!StringUtil.isNullOrEmpty(givenName)) {\n+            if (isClanner()) {\n+                if (!StringUtil.isNullOrEmpty(bloodname)) {\n+                    fullName = givenName + \" \" + bloodname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            } else {\n+                if (!StringUtil.isNullOrEmpty(surname)) {\n+                    fullName = givenName + \" \" + surname;\n+                } else {\n+                    fullName = givenName;\n+                }\n+            }\n+\n+            if (!StringUtil.isNullOrEmpty(honorific)) {\n+                fullName += \" \" + honorific;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is used to migrate names from being a joined name to split between given name and surname,\n+     * as part of the Personnel changes in MekHQ 0.47.4.\n+     * @param n the name to be migrated\n+     */\n+    public void migrateName(String n) {\n+        // How this works:\n+        // Takes the input name, and splits it into individual parts.\n+        // Then, it depends on whether the person is a Clanner or not.\n+        // For Clan names:\n+        // Takes the input name, and assumes that person does not have a surname\n+        // Bloodnames are assumed to have been assigned either through the\n+        // For Inner Sphere names:\n+        // Depending on the length of the resulting array, the name is processed differently\n+        // Array of length 1: the name is assumed to not have a surname, just a given name\n+        // Array of length 2: the name is assumed to be a given name and a surname\n+        // Array of length 3: the name is assumed to be a given name and two surnames\n+        // Array of length 4+: the name is assumed to be as many given names as possible and two surnames\n+        //\n+        // Then, the full name is set\n+        String space = \" \";\n+        String[] name = n.split(space);\n+\n+        if (isClanner()) {\n+            int i = 0;\n+            givenName = name[i];\n+            for (i = 1; i < name.length - 1; i++) {\n+                if (!name[i].equals(space)) {\n+                    givenName += space + name[i];\n+                }\n+            }\n+\n+            if (!(!StringUtil.isNullOrEmpty(getBloodname()) && getBloodname().equals(name[i]))) {\n+                givenName += space + name[i];\n+            }\n+\n+            surname = null;\n+        } else {\n+            if (name.length == 1) {\n+                givenName = name[0];\n+                surname = null;\n+            } else if (name.length == 2) {\n+                givenName = name[0];\n+                surname = name[1];\n+            } else if (name.length == 3) {\n+                givenName = name[0];\n+                if (name[1].equals(space)) {\n+                    surname = name[2];\n+                } else {\n+                    surname = name[1] + space + name[2];\n+                }\n+            } else if (name.length > 3) {\n+                int i = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTg3OA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 813}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0OTk4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1NjoxM1rOF2WQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1NjowM1rOF2W0Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjA1OQ==", "bodyText": "Any reason this can't be an Enum? I loathe all of our random integers.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392532059", "createdAt": "2020-03-13T23:56:13Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1034,24 +1207,67 @@ public UUID getId() {\n         return id;\n     }\n \n-    @Nullable\n-    public UUID getSpouseID() {\n-        return spouse;\n-    }\n+    public boolean isChild() {\n+        return (getAge(campaign.getCalendar()) <= 13);\n+    }\n+\n+    //region Age Range Identification\n+    // TODO : Windchild Implement Me fully - Either add or remove in Personnel Wave 2\n+    // idea : have a method that allows you to determine what a person's age range would be, as this could be useful\n+    // in implementing a way to display ages instead of unknown for children\n+    public static final int AGE_BABY = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 871}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTg1NQ==", "bodyText": "This is unimplemented (code that I'm thinking about for wave 2), but I'll add a note to myself to swap it to an enum (I personally like the integers instead of enums, but I know that's not a common view)", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392539855", "createdAt": "2020-03-14T00:44:10Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1034,24 +1207,67 @@ public UUID getId() {\n         return id;\n     }\n \n-    @Nullable\n-    public UUID getSpouseID() {\n-        return spouse;\n-    }\n+    public boolean isChild() {\n+        return (getAge(campaign.getCalendar()) <= 13);\n+    }\n+\n+    //region Age Range Identification\n+    // TODO : Windchild Implement Me fully - Either add or remove in Personnel Wave 2\n+    // idea : have a method that allows you to determine what a person's age range would be, as this could be useful\n+    // in implementing a way to display ages instead of unknown for children\n+    public static final int AGE_BABY = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjA1OQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 871}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MTI0Nw==", "bodyText": "I've removed the code from this PR", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392541247", "createdAt": "2020-03-14T00:56:03Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1034,24 +1207,67 @@ public UUID getId() {\n         return id;\n     }\n \n-    @Nullable\n-    public UUID getSpouseID() {\n-        return spouse;\n-    }\n+    public boolean isChild() {\n+        return (getAge(campaign.getCalendar()) <= 13);\n+    }\n+\n+    //region Age Range Identification\n+    // TODO : Windchild Implement Me fully - Either add or remove in Personnel Wave 2\n+    // idea : have a method that allows you to determine what a person's age range would be, as this could be useful\n+    // in implementing a way to display ages instead of unknown for children\n+    public static final int AGE_BABY = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjA1OQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 871}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg1MzQ5OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1OTozOVrOF2WScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoyMDozMFrOF2aqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjU5NQ==", "bodyText": "Based on this comment then is CampaignOptions storing the fraction or percentage? If Percentage that should be called out in the documentation for the option. Would be more obvious given the name \"chance\" to store it as a fraction and convert to a percentage when displaying.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392532595", "createdAt": "2020-03-13T23:59:39Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1060,166 +1276,420 @@ public void setDueDate(GregorianCalendar dueDate) {\n         this.dueDate = dueDate;\n     }\n \n-    public boolean isPregnant() {\n-        return dueDate != null;\n+    public GregorianCalendar getExpectedDueDate() {\n+        return expectedDueDate;\n     }\n \n-    public UUID getAncestorsId() {\n-        return ancestorsId;\n+    public void setExpectedDueDate(GregorianCalendar expectedDueDate) {\n+        this.expectedDueDate = expectedDueDate;\n     }\n \n-    public void setAncestorsId(UUID id) {\n-        ancestorsId = id;\n+    public boolean isPregnant() {\n+        return dueDate != null;\n     }\n \n-    public Ancestors getAncestors() {\n-        return campaign.getAncestors(ancestorsId);\n-    }\n+    public void procreate() {\n+        if (!isFemale() || isPregnant() || isDeployed()) {\n+            return;\n+        }\n \n-    public Person getMother() {\n-        Ancestors a = getAncestors();\n+        // Age limitations...\n+        if (!isChild() && getAge(campaign.getCalendar()) < 51) {\n+            boolean conceived = false;\n+            if (hasSpouse()) {\n+                if (!getSpouse().isDeployed() && !getSpouse().isDeadOrMIA() && !getSpouse().isChild()\n+                        && !(getSpouse().getGender() == getGender())) {\n+                    // setting is the chance that this procreation attempt will create a child, base is 0.05%\n+                    // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                    conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreation() / 100));\n+                }\n+            } else if (campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n+                // setting is the chance that this procreation attempt will create a child, base is 0.005%\n+                // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreationNoRelationship() / 100));\n+            }\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getMotherId());\n+            if (conceived) {\n+                addPregnancy();\n+            }\n         }\n-        return null;\n     }\n \n-    public Person getFather() {\n-        Ancestors a = getAncestors();\n+    public void addPregnancy() {\n+        GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getFatherId());\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_STANDARD_DURATION);\n+        setExpectedDueDate(tCal);\n+        tCal = (GregorianCalendar) tCal.clone();\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_MODIFY_DURATION.getAsInt());\n+        setDueDate(tCal);\n+\n+        int size = PREGNANCY_SIZE.getAsInt();\n+        if (extraData == null) {\n+            extraData = new ExtraData();\n         }\n-        return null;\n+        extraData.set(PREGNANCY_CHILDREN_DATA, size);\n+        extraData.set(PREGNANCY_FATHER_DATA, (hasSpouse()) ? getSpouseId().toString() : null);\n+\n+        String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n+\n+        campaign.addReport(getHyperlinkedName() + \" has conceived\" + (sizeString == null ? \"\" : (\" \" + sizeString)));\n+        if (campaign.getCampaignOptions().logConception()) {\n+            MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n+            if (hasSpouse()) {\n+                PersonalLogger.spouseConceived(getSpouse(), getFullName(), campaign.getDate(), sizeString);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Removes a pregnancy and clears all related data from the current person\n+     */\n+    public void removePregnancy() {\n+        setDueDate(null);\n+        setExpectedDueDate(null);\n+        extraData.set(PREGNANCY_CHILDREN_DATA, null);\n+        extraData.set(PREGNANCY_FATHER_DATA, null);\n     }\n \n     public Collection<Person> birth() {\n         int size = extraData.get(PREGNANCY_CHILDREN_DATA, 1);\n         String fatherIdString = extraData.get(PREGNANCY_FATHER_DATA);\n-        UUID fatherId = (null != fatherIdString) ? UUID.fromString(fatherIdString) : getSpouseID();\n+        UUID fatherId = (fatherIdString != null) ? UUID.fromString(fatherIdString) : null;\n         Ancestors anc = campaign.getAncestors(fatherId, id);\n-        if(null == anc) {\n+        if (null == anc) {\n             anc = campaign.createAncestors(fatherId, id);\n         }\n         final UUID ancId = anc.getId();\n-        final String surname = getName().contains(\" \") ? getName().split(\" \", 2)[1] : \"\";\n+\n+        final String surname = generateBabySurname(fatherId);\n \n         // Cleanup\n-        setDueDate(null);\n-        extraData.set(PREGNANCY_CHILDREN_DATA, 0);\n-        extraData.set(PREGNANCY_FATHER_DATA, null);\n+        removePregnancy();\n \n         return IntStream.range(0, size).mapToObj(i -> {\n-            Person baby = campaign.newDependent(T_NONE);\n-            baby.setName(baby.getName().split(\" \", 2)[0] + \" \" + surname);\n+            Person baby = campaign.newDependent(T_NONE, true);\n+            baby.setSurname(surname);\n             baby.setBirthday((GregorianCalendar) campaign.getCalendar().clone());\n             UUID babyId = UUID.randomUUID();\n-            while (null != campaign.getPerson(babyId)) {\n-                babyId = UUID.randomUUID();\n-            }\n+\n             baby.setId(babyId);\n             baby.setAncestorsId(ancId);\n-            campaign.addReport(getHyperlinkedName() + \" has given birth to \" + baby.getHyperlinkedName()\n-                    + \", a baby \" + baby.getChildGenderName());\n+\n+            campaign.addReport(String.format(\"%s has given birth to %s, a baby %s!\", getHyperlinkedName(),\n+                    baby.getHyperlinkedName(), baby.getGenderString(Person.G_DESCRIPTION_BOY_GIRL)));\n             if (campaign.getCampaignOptions().logConception()) {\n                 MedicalLogger.deliveredBaby(this, baby, campaign.getDate());\n+                if (fatherId != null) {\n+                    PersonalLogger.ourChildBorn(campaign.getPerson(fatherId), baby, getFullName(), campaign.getDate());\n+                }\n             }\n             return baby;\n         }).collect(Collectors.toList());\n     }\n \n-    public void procreate() {\n-        if(!isFemale() || isPregnant()) {\n-            return;\n+    private String generateBabySurname(UUID fatherId) {\n+        if (campaign.getCampaignOptions().getBabySurnameStyle() == CampaignOptions.BABY_SURNAME_SPOUSE) {\n+            if (fatherId != null) {\n+                return campaign.getPerson(fatherId).getSurname();\n+            }\n         }\n+        return surname = getSurname();\n+    }\n+    //endregion Pregnancy\n \n-        if (!isDeployed()) {\n-            // Age limitations...\n-            if (getAge(campaign.getCalendar()) > 13 && getAge(campaign.getCalendar()) < 51) {\n-                boolean concieved = false;\n-                if (!hasSpouse() && campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n-                    // 0.005% chance that this procreation attempt will create a child\n-                    concieved = (Compute.randomInt(100000) < 2);\n-                } else if (hasSpouse()) {\n-                    if (getSpouse().isActive() && !getSpouse().isDeployed() && getSpouse().getAge(campaign.getCalendar()) > 13) {\n-                        // 0.05% chance that this procreation attempt will create a child\n-                        concieved = (Compute.randomInt(10000) < 2);\n-                    }\n-                }\n+    //region Marriage\n+    /**\n+     * Determines if another person is a safe spouse for the current person\n+     * @param p the person to determine if they are a safe spouse\n+     */\n+    public boolean safeSpouse(Person p) {\n+        // Huge convoluted return statement, with the following restrictions\n+        // can't marry yourself\n+        // can't marry someone who is already married\n+        // can't marry a prisoner, unless you are also a prisoner (this is purposely left open for prisoners to marry who they want)\n+        // can't marry a person who is dead or MIA\n+        // can't marry inactive personnel (this is to show how they aren't part of the force anymore)\n+        // can't marry a close relative\n+        return (\n+                !this.equals(p)\n+                && !p.hasSpouse()\n+                && p.oldEnoughToMarry()\n+                && (!p.isPrisoner() || (p.isPrisoner() && isPrisoner()))\n+                && !p.isDeadOrMIA()\n+                && p.isActive()\n+                && ((getAncestorsId() == null)\n+                    || !campaign.getAncestors(getAncestorsId()).checkMutualAncestors(campaign.getAncestors(p.getAncestorsId())))\n+        );\n+    }\n \n-                if(concieved) {\n-                    GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n-                    tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_DURATION.getAsInt());\n-                    setDueDate(tCal);\n-                    int size = PREGNANCY_SIZE.getAsInt();\n-                    extraData.set(PREGNANCY_CHILDREN_DATA, size);\n-                    extraData.set(PREGNANCY_FATHER_DATA,\n-                        (hasSpouse()) ? getSpouseID().toString() : null);\n+    public boolean oldEnoughToMarry() {\n+        return (getAge(campaign.getCalendar()) >= campaign.getCampaignOptions().getMinimumMarriageAge());\n+    }\n \n-                    String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n-                    if(null == sizeString) {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived\");\n-                    } else {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived \" + sizeString);\n-                    }\n-                    if (campaign.getCampaignOptions().logConception()) {\n-                        MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n-                    }\n-                }\n+    public void randomMarriage() {\n+        // Don't attempt to generate is someone has a spouse, isn't old enough to marry,\n+        // is actively deployed, or is currently a prisoner\n+        if (hasSpouse() || !oldEnoughToMarry() || isDeployed() || isPrisoner()) {\n+            return;\n+        }\n+\n+        // setting is the chance that this attempt at finding a marriage will result in one\n+        // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+        if (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceRandomMarriages() / 100)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MDA0Mw==", "bodyText": "It is saving as a percentage, we divide by 100 here for the fraction.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392540043", "createdAt": "2020-03-14T00:45:42Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1060,166 +1276,420 @@ public void setDueDate(GregorianCalendar dueDate) {\n         this.dueDate = dueDate;\n     }\n \n-    public boolean isPregnant() {\n-        return dueDate != null;\n+    public GregorianCalendar getExpectedDueDate() {\n+        return expectedDueDate;\n     }\n \n-    public UUID getAncestorsId() {\n-        return ancestorsId;\n+    public void setExpectedDueDate(GregorianCalendar expectedDueDate) {\n+        this.expectedDueDate = expectedDueDate;\n     }\n \n-    public void setAncestorsId(UUID id) {\n-        ancestorsId = id;\n+    public boolean isPregnant() {\n+        return dueDate != null;\n     }\n \n-    public Ancestors getAncestors() {\n-        return campaign.getAncestors(ancestorsId);\n-    }\n+    public void procreate() {\n+        if (!isFemale() || isPregnant() || isDeployed()) {\n+            return;\n+        }\n \n-    public Person getMother() {\n-        Ancestors a = getAncestors();\n+        // Age limitations...\n+        if (!isChild() && getAge(campaign.getCalendar()) < 51) {\n+            boolean conceived = false;\n+            if (hasSpouse()) {\n+                if (!getSpouse().isDeployed() && !getSpouse().isDeadOrMIA() && !getSpouse().isChild()\n+                        && !(getSpouse().getGender() == getGender())) {\n+                    // setting is the chance that this procreation attempt will create a child, base is 0.05%\n+                    // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                    conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreation() / 100));\n+                }\n+            } else if (campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n+                // setting is the chance that this procreation attempt will create a child, base is 0.005%\n+                // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreationNoRelationship() / 100));\n+            }\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getMotherId());\n+            if (conceived) {\n+                addPregnancy();\n+            }\n         }\n-        return null;\n     }\n \n-    public Person getFather() {\n-        Ancestors a = getAncestors();\n+    public void addPregnancy() {\n+        GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getFatherId());\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_STANDARD_DURATION);\n+        setExpectedDueDate(tCal);\n+        tCal = (GregorianCalendar) tCal.clone();\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_MODIFY_DURATION.getAsInt());\n+        setDueDate(tCal);\n+\n+        int size = PREGNANCY_SIZE.getAsInt();\n+        if (extraData == null) {\n+            extraData = new ExtraData();\n         }\n-        return null;\n+        extraData.set(PREGNANCY_CHILDREN_DATA, size);\n+        extraData.set(PREGNANCY_FATHER_DATA, (hasSpouse()) ? getSpouseId().toString() : null);\n+\n+        String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n+\n+        campaign.addReport(getHyperlinkedName() + \" has conceived\" + (sizeString == null ? \"\" : (\" \" + sizeString)));\n+        if (campaign.getCampaignOptions().logConception()) {\n+            MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n+            if (hasSpouse()) {\n+                PersonalLogger.spouseConceived(getSpouse(), getFullName(), campaign.getDate(), sizeString);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Removes a pregnancy and clears all related data from the current person\n+     */\n+    public void removePregnancy() {\n+        setDueDate(null);\n+        setExpectedDueDate(null);\n+        extraData.set(PREGNANCY_CHILDREN_DATA, null);\n+        extraData.set(PREGNANCY_FATHER_DATA, null);\n     }\n \n     public Collection<Person> birth() {\n         int size = extraData.get(PREGNANCY_CHILDREN_DATA, 1);\n         String fatherIdString = extraData.get(PREGNANCY_FATHER_DATA);\n-        UUID fatherId = (null != fatherIdString) ? UUID.fromString(fatherIdString) : getSpouseID();\n+        UUID fatherId = (fatherIdString != null) ? UUID.fromString(fatherIdString) : null;\n         Ancestors anc = campaign.getAncestors(fatherId, id);\n-        if(null == anc) {\n+        if (null == anc) {\n             anc = campaign.createAncestors(fatherId, id);\n         }\n         final UUID ancId = anc.getId();\n-        final String surname = getName().contains(\" \") ? getName().split(\" \", 2)[1] : \"\";\n+\n+        final String surname = generateBabySurname(fatherId);\n \n         // Cleanup\n-        setDueDate(null);\n-        extraData.set(PREGNANCY_CHILDREN_DATA, 0);\n-        extraData.set(PREGNANCY_FATHER_DATA, null);\n+        removePregnancy();\n \n         return IntStream.range(0, size).mapToObj(i -> {\n-            Person baby = campaign.newDependent(T_NONE);\n-            baby.setName(baby.getName().split(\" \", 2)[0] + \" \" + surname);\n+            Person baby = campaign.newDependent(T_NONE, true);\n+            baby.setSurname(surname);\n             baby.setBirthday((GregorianCalendar) campaign.getCalendar().clone());\n             UUID babyId = UUID.randomUUID();\n-            while (null != campaign.getPerson(babyId)) {\n-                babyId = UUID.randomUUID();\n-            }\n+\n             baby.setId(babyId);\n             baby.setAncestorsId(ancId);\n-            campaign.addReport(getHyperlinkedName() + \" has given birth to \" + baby.getHyperlinkedName()\n-                    + \", a baby \" + baby.getChildGenderName());\n+\n+            campaign.addReport(String.format(\"%s has given birth to %s, a baby %s!\", getHyperlinkedName(),\n+                    baby.getHyperlinkedName(), baby.getGenderString(Person.G_DESCRIPTION_BOY_GIRL)));\n             if (campaign.getCampaignOptions().logConception()) {\n                 MedicalLogger.deliveredBaby(this, baby, campaign.getDate());\n+                if (fatherId != null) {\n+                    PersonalLogger.ourChildBorn(campaign.getPerson(fatherId), baby, getFullName(), campaign.getDate());\n+                }\n             }\n             return baby;\n         }).collect(Collectors.toList());\n     }\n \n-    public void procreate() {\n-        if(!isFemale() || isPregnant()) {\n-            return;\n+    private String generateBabySurname(UUID fatherId) {\n+        if (campaign.getCampaignOptions().getBabySurnameStyle() == CampaignOptions.BABY_SURNAME_SPOUSE) {\n+            if (fatherId != null) {\n+                return campaign.getPerson(fatherId).getSurname();\n+            }\n         }\n+        return surname = getSurname();\n+    }\n+    //endregion Pregnancy\n \n-        if (!isDeployed()) {\n-            // Age limitations...\n-            if (getAge(campaign.getCalendar()) > 13 && getAge(campaign.getCalendar()) < 51) {\n-                boolean concieved = false;\n-                if (!hasSpouse() && campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n-                    // 0.005% chance that this procreation attempt will create a child\n-                    concieved = (Compute.randomInt(100000) < 2);\n-                } else if (hasSpouse()) {\n-                    if (getSpouse().isActive() && !getSpouse().isDeployed() && getSpouse().getAge(campaign.getCalendar()) > 13) {\n-                        // 0.05% chance that this procreation attempt will create a child\n-                        concieved = (Compute.randomInt(10000) < 2);\n-                    }\n-                }\n+    //region Marriage\n+    /**\n+     * Determines if another person is a safe spouse for the current person\n+     * @param p the person to determine if they are a safe spouse\n+     */\n+    public boolean safeSpouse(Person p) {\n+        // Huge convoluted return statement, with the following restrictions\n+        // can't marry yourself\n+        // can't marry someone who is already married\n+        // can't marry a prisoner, unless you are also a prisoner (this is purposely left open for prisoners to marry who they want)\n+        // can't marry a person who is dead or MIA\n+        // can't marry inactive personnel (this is to show how they aren't part of the force anymore)\n+        // can't marry a close relative\n+        return (\n+                !this.equals(p)\n+                && !p.hasSpouse()\n+                && p.oldEnoughToMarry()\n+                && (!p.isPrisoner() || (p.isPrisoner() && isPrisoner()))\n+                && !p.isDeadOrMIA()\n+                && p.isActive()\n+                && ((getAncestorsId() == null)\n+                    || !campaign.getAncestors(getAncestorsId()).checkMutualAncestors(campaign.getAncestors(p.getAncestorsId())))\n+        );\n+    }\n \n-                if(concieved) {\n-                    GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n-                    tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_DURATION.getAsInt());\n-                    setDueDate(tCal);\n-                    int size = PREGNANCY_SIZE.getAsInt();\n-                    extraData.set(PREGNANCY_CHILDREN_DATA, size);\n-                    extraData.set(PREGNANCY_FATHER_DATA,\n-                        (hasSpouse()) ? getSpouseID().toString() : null);\n+    public boolean oldEnoughToMarry() {\n+        return (getAge(campaign.getCalendar()) >= campaign.getCampaignOptions().getMinimumMarriageAge());\n+    }\n \n-                    String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n-                    if(null == sizeString) {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived\");\n-                    } else {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived \" + sizeString);\n-                    }\n-                    if (campaign.getCampaignOptions().logConception()) {\n-                        MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n-                    }\n-                }\n+    public void randomMarriage() {\n+        // Don't attempt to generate is someone has a spouse, isn't old enough to marry,\n+        // is actively deployed, or is currently a prisoner\n+        if (hasSpouse() || !oldEnoughToMarry() || isDeployed() || isPrisoner()) {\n+            return;\n+        }\n+\n+        // setting is the chance that this attempt at finding a marriage will result in one\n+        // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+        if (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceRandomMarriages() / 100)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjU5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjQ5OQ==", "bodyText": "Would you prefer switching to saving it divided by 100 @sixlettervariables?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392542499", "createdAt": "2020-03-14T01:06:52Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1060,166 +1276,420 @@ public void setDueDate(GregorianCalendar dueDate) {\n         this.dueDate = dueDate;\n     }\n \n-    public boolean isPregnant() {\n-        return dueDate != null;\n+    public GregorianCalendar getExpectedDueDate() {\n+        return expectedDueDate;\n     }\n \n-    public UUID getAncestorsId() {\n-        return ancestorsId;\n+    public void setExpectedDueDate(GregorianCalendar expectedDueDate) {\n+        this.expectedDueDate = expectedDueDate;\n     }\n \n-    public void setAncestorsId(UUID id) {\n-        ancestorsId = id;\n+    public boolean isPregnant() {\n+        return dueDate != null;\n     }\n \n-    public Ancestors getAncestors() {\n-        return campaign.getAncestors(ancestorsId);\n-    }\n+    public void procreate() {\n+        if (!isFemale() || isPregnant() || isDeployed()) {\n+            return;\n+        }\n \n-    public Person getMother() {\n-        Ancestors a = getAncestors();\n+        // Age limitations...\n+        if (!isChild() && getAge(campaign.getCalendar()) < 51) {\n+            boolean conceived = false;\n+            if (hasSpouse()) {\n+                if (!getSpouse().isDeployed() && !getSpouse().isDeadOrMIA() && !getSpouse().isChild()\n+                        && !(getSpouse().getGender() == getGender())) {\n+                    // setting is the chance that this procreation attempt will create a child, base is 0.05%\n+                    // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                    conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreation() / 100));\n+                }\n+            } else if (campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n+                // setting is the chance that this procreation attempt will create a child, base is 0.005%\n+                // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreationNoRelationship() / 100));\n+            }\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getMotherId());\n+            if (conceived) {\n+                addPregnancy();\n+            }\n         }\n-        return null;\n     }\n \n-    public Person getFather() {\n-        Ancestors a = getAncestors();\n+    public void addPregnancy() {\n+        GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getFatherId());\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_STANDARD_DURATION);\n+        setExpectedDueDate(tCal);\n+        tCal = (GregorianCalendar) tCal.clone();\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_MODIFY_DURATION.getAsInt());\n+        setDueDate(tCal);\n+\n+        int size = PREGNANCY_SIZE.getAsInt();\n+        if (extraData == null) {\n+            extraData = new ExtraData();\n         }\n-        return null;\n+        extraData.set(PREGNANCY_CHILDREN_DATA, size);\n+        extraData.set(PREGNANCY_FATHER_DATA, (hasSpouse()) ? getSpouseId().toString() : null);\n+\n+        String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n+\n+        campaign.addReport(getHyperlinkedName() + \" has conceived\" + (sizeString == null ? \"\" : (\" \" + sizeString)));\n+        if (campaign.getCampaignOptions().logConception()) {\n+            MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n+            if (hasSpouse()) {\n+                PersonalLogger.spouseConceived(getSpouse(), getFullName(), campaign.getDate(), sizeString);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Removes a pregnancy and clears all related data from the current person\n+     */\n+    public void removePregnancy() {\n+        setDueDate(null);\n+        setExpectedDueDate(null);\n+        extraData.set(PREGNANCY_CHILDREN_DATA, null);\n+        extraData.set(PREGNANCY_FATHER_DATA, null);\n     }\n \n     public Collection<Person> birth() {\n         int size = extraData.get(PREGNANCY_CHILDREN_DATA, 1);\n         String fatherIdString = extraData.get(PREGNANCY_FATHER_DATA);\n-        UUID fatherId = (null != fatherIdString) ? UUID.fromString(fatherIdString) : getSpouseID();\n+        UUID fatherId = (fatherIdString != null) ? UUID.fromString(fatherIdString) : null;\n         Ancestors anc = campaign.getAncestors(fatherId, id);\n-        if(null == anc) {\n+        if (null == anc) {\n             anc = campaign.createAncestors(fatherId, id);\n         }\n         final UUID ancId = anc.getId();\n-        final String surname = getName().contains(\" \") ? getName().split(\" \", 2)[1] : \"\";\n+\n+        final String surname = generateBabySurname(fatherId);\n \n         // Cleanup\n-        setDueDate(null);\n-        extraData.set(PREGNANCY_CHILDREN_DATA, 0);\n-        extraData.set(PREGNANCY_FATHER_DATA, null);\n+        removePregnancy();\n \n         return IntStream.range(0, size).mapToObj(i -> {\n-            Person baby = campaign.newDependent(T_NONE);\n-            baby.setName(baby.getName().split(\" \", 2)[0] + \" \" + surname);\n+            Person baby = campaign.newDependent(T_NONE, true);\n+            baby.setSurname(surname);\n             baby.setBirthday((GregorianCalendar) campaign.getCalendar().clone());\n             UUID babyId = UUID.randomUUID();\n-            while (null != campaign.getPerson(babyId)) {\n-                babyId = UUID.randomUUID();\n-            }\n+\n             baby.setId(babyId);\n             baby.setAncestorsId(ancId);\n-            campaign.addReport(getHyperlinkedName() + \" has given birth to \" + baby.getHyperlinkedName()\n-                    + \", a baby \" + baby.getChildGenderName());\n+\n+            campaign.addReport(String.format(\"%s has given birth to %s, a baby %s!\", getHyperlinkedName(),\n+                    baby.getHyperlinkedName(), baby.getGenderString(Person.G_DESCRIPTION_BOY_GIRL)));\n             if (campaign.getCampaignOptions().logConception()) {\n                 MedicalLogger.deliveredBaby(this, baby, campaign.getDate());\n+                if (fatherId != null) {\n+                    PersonalLogger.ourChildBorn(campaign.getPerson(fatherId), baby, getFullName(), campaign.getDate());\n+                }\n             }\n             return baby;\n         }).collect(Collectors.toList());\n     }\n \n-    public void procreate() {\n-        if(!isFemale() || isPregnant()) {\n-            return;\n+    private String generateBabySurname(UUID fatherId) {\n+        if (campaign.getCampaignOptions().getBabySurnameStyle() == CampaignOptions.BABY_SURNAME_SPOUSE) {\n+            if (fatherId != null) {\n+                return campaign.getPerson(fatherId).getSurname();\n+            }\n         }\n+        return surname = getSurname();\n+    }\n+    //endregion Pregnancy\n \n-        if (!isDeployed()) {\n-            // Age limitations...\n-            if (getAge(campaign.getCalendar()) > 13 && getAge(campaign.getCalendar()) < 51) {\n-                boolean concieved = false;\n-                if (!hasSpouse() && campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n-                    // 0.005% chance that this procreation attempt will create a child\n-                    concieved = (Compute.randomInt(100000) < 2);\n-                } else if (hasSpouse()) {\n-                    if (getSpouse().isActive() && !getSpouse().isDeployed() && getSpouse().getAge(campaign.getCalendar()) > 13) {\n-                        // 0.05% chance that this procreation attempt will create a child\n-                        concieved = (Compute.randomInt(10000) < 2);\n-                    }\n-                }\n+    //region Marriage\n+    /**\n+     * Determines if another person is a safe spouse for the current person\n+     * @param p the person to determine if they are a safe spouse\n+     */\n+    public boolean safeSpouse(Person p) {\n+        // Huge convoluted return statement, with the following restrictions\n+        // can't marry yourself\n+        // can't marry someone who is already married\n+        // can't marry a prisoner, unless you are also a prisoner (this is purposely left open for prisoners to marry who they want)\n+        // can't marry a person who is dead or MIA\n+        // can't marry inactive personnel (this is to show how they aren't part of the force anymore)\n+        // can't marry a close relative\n+        return (\n+                !this.equals(p)\n+                && !p.hasSpouse()\n+                && p.oldEnoughToMarry()\n+                && (!p.isPrisoner() || (p.isPrisoner() && isPrisoner()))\n+                && !p.isDeadOrMIA()\n+                && p.isActive()\n+                && ((getAncestorsId() == null)\n+                    || !campaign.getAncestors(getAncestorsId()).checkMutualAncestors(campaign.getAncestors(p.getAncestorsId())))\n+        );\n+    }\n \n-                if(concieved) {\n-                    GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n-                    tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_DURATION.getAsInt());\n-                    setDueDate(tCal);\n-                    int size = PREGNANCY_SIZE.getAsInt();\n-                    extraData.set(PREGNANCY_CHILDREN_DATA, size);\n-                    extraData.set(PREGNANCY_FATHER_DATA,\n-                        (hasSpouse()) ? getSpouseID().toString() : null);\n+    public boolean oldEnoughToMarry() {\n+        return (getAge(campaign.getCalendar()) >= campaign.getCampaignOptions().getMinimumMarriageAge());\n+    }\n \n-                    String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n-                    if(null == sizeString) {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived\");\n-                    } else {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived \" + sizeString);\n-                    }\n-                    if (campaign.getCampaignOptions().logConception()) {\n-                        MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n-                    }\n-                }\n+    public void randomMarriage() {\n+        // Don't attempt to generate is someone has a spouse, isn't old enough to marry,\n+        // is actively deployed, or is currently a prisoner\n+        if (hasSpouse() || !oldEnoughToMarry() || isDeployed() || isPrisoner()) {\n+            return;\n+        }\n+\n+        // setting is the chance that this attempt at finding a marriage will result in one\n+        // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+        if (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceRandomMarriages() / 100)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjU5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDI2OQ==", "bodyText": "I would find storing a fraction to be less confusing.\nThat being said, JavaDoc for the methods would provide those details and hopefully answer those questions.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392604269", "createdAt": "2020-03-14T17:20:30Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1060,166 +1276,420 @@ public void setDueDate(GregorianCalendar dueDate) {\n         this.dueDate = dueDate;\n     }\n \n-    public boolean isPregnant() {\n-        return dueDate != null;\n+    public GregorianCalendar getExpectedDueDate() {\n+        return expectedDueDate;\n     }\n \n-    public UUID getAncestorsId() {\n-        return ancestorsId;\n+    public void setExpectedDueDate(GregorianCalendar expectedDueDate) {\n+        this.expectedDueDate = expectedDueDate;\n     }\n \n-    public void setAncestorsId(UUID id) {\n-        ancestorsId = id;\n+    public boolean isPregnant() {\n+        return dueDate != null;\n     }\n \n-    public Ancestors getAncestors() {\n-        return campaign.getAncestors(ancestorsId);\n-    }\n+    public void procreate() {\n+        if (!isFemale() || isPregnant() || isDeployed()) {\n+            return;\n+        }\n \n-    public Person getMother() {\n-        Ancestors a = getAncestors();\n+        // Age limitations...\n+        if (!isChild() && getAge(campaign.getCalendar()) < 51) {\n+            boolean conceived = false;\n+            if (hasSpouse()) {\n+                if (!getSpouse().isDeployed() && !getSpouse().isDeadOrMIA() && !getSpouse().isChild()\n+                        && !(getSpouse().getGender() == getGender())) {\n+                    // setting is the chance that this procreation attempt will create a child, base is 0.05%\n+                    // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                    conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreation() / 100));\n+                }\n+            } else if (campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n+                // setting is the chance that this procreation attempt will create a child, base is 0.005%\n+                // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+                conceived = (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceProcreationNoRelationship() / 100));\n+            }\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getMotherId());\n+            if (conceived) {\n+                addPregnancy();\n+            }\n         }\n-        return null;\n     }\n \n-    public Person getFather() {\n-        Ancestors a = getAncestors();\n+    public void addPregnancy() {\n+        GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n \n-        if (a != null) {\n-            return campaign.getPerson(a.getFatherId());\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_STANDARD_DURATION);\n+        setExpectedDueDate(tCal);\n+        tCal = (GregorianCalendar) tCal.clone();\n+        tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_MODIFY_DURATION.getAsInt());\n+        setDueDate(tCal);\n+\n+        int size = PREGNANCY_SIZE.getAsInt();\n+        if (extraData == null) {\n+            extraData = new ExtraData();\n         }\n-        return null;\n+        extraData.set(PREGNANCY_CHILDREN_DATA, size);\n+        extraData.set(PREGNANCY_FATHER_DATA, (hasSpouse()) ? getSpouseId().toString() : null);\n+\n+        String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n+\n+        campaign.addReport(getHyperlinkedName() + \" has conceived\" + (sizeString == null ? \"\" : (\" \" + sizeString)));\n+        if (campaign.getCampaignOptions().logConception()) {\n+            MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n+            if (hasSpouse()) {\n+                PersonalLogger.spouseConceived(getSpouse(), getFullName(), campaign.getDate(), sizeString);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Removes a pregnancy and clears all related data from the current person\n+     */\n+    public void removePregnancy() {\n+        setDueDate(null);\n+        setExpectedDueDate(null);\n+        extraData.set(PREGNANCY_CHILDREN_DATA, null);\n+        extraData.set(PREGNANCY_FATHER_DATA, null);\n     }\n \n     public Collection<Person> birth() {\n         int size = extraData.get(PREGNANCY_CHILDREN_DATA, 1);\n         String fatherIdString = extraData.get(PREGNANCY_FATHER_DATA);\n-        UUID fatherId = (null != fatherIdString) ? UUID.fromString(fatherIdString) : getSpouseID();\n+        UUID fatherId = (fatherIdString != null) ? UUID.fromString(fatherIdString) : null;\n         Ancestors anc = campaign.getAncestors(fatherId, id);\n-        if(null == anc) {\n+        if (null == anc) {\n             anc = campaign.createAncestors(fatherId, id);\n         }\n         final UUID ancId = anc.getId();\n-        final String surname = getName().contains(\" \") ? getName().split(\" \", 2)[1] : \"\";\n+\n+        final String surname = generateBabySurname(fatherId);\n \n         // Cleanup\n-        setDueDate(null);\n-        extraData.set(PREGNANCY_CHILDREN_DATA, 0);\n-        extraData.set(PREGNANCY_FATHER_DATA, null);\n+        removePregnancy();\n \n         return IntStream.range(0, size).mapToObj(i -> {\n-            Person baby = campaign.newDependent(T_NONE);\n-            baby.setName(baby.getName().split(\" \", 2)[0] + \" \" + surname);\n+            Person baby = campaign.newDependent(T_NONE, true);\n+            baby.setSurname(surname);\n             baby.setBirthday((GregorianCalendar) campaign.getCalendar().clone());\n             UUID babyId = UUID.randomUUID();\n-            while (null != campaign.getPerson(babyId)) {\n-                babyId = UUID.randomUUID();\n-            }\n+\n             baby.setId(babyId);\n             baby.setAncestorsId(ancId);\n-            campaign.addReport(getHyperlinkedName() + \" has given birth to \" + baby.getHyperlinkedName()\n-                    + \", a baby \" + baby.getChildGenderName());\n+\n+            campaign.addReport(String.format(\"%s has given birth to %s, a baby %s!\", getHyperlinkedName(),\n+                    baby.getHyperlinkedName(), baby.getGenderString(Person.G_DESCRIPTION_BOY_GIRL)));\n             if (campaign.getCampaignOptions().logConception()) {\n                 MedicalLogger.deliveredBaby(this, baby, campaign.getDate());\n+                if (fatherId != null) {\n+                    PersonalLogger.ourChildBorn(campaign.getPerson(fatherId), baby, getFullName(), campaign.getDate());\n+                }\n             }\n             return baby;\n         }).collect(Collectors.toList());\n     }\n \n-    public void procreate() {\n-        if(!isFemale() || isPregnant()) {\n-            return;\n+    private String generateBabySurname(UUID fatherId) {\n+        if (campaign.getCampaignOptions().getBabySurnameStyle() == CampaignOptions.BABY_SURNAME_SPOUSE) {\n+            if (fatherId != null) {\n+                return campaign.getPerson(fatherId).getSurname();\n+            }\n         }\n+        return surname = getSurname();\n+    }\n+    //endregion Pregnancy\n \n-        if (!isDeployed()) {\n-            // Age limitations...\n-            if (getAge(campaign.getCalendar()) > 13 && getAge(campaign.getCalendar()) < 51) {\n-                boolean concieved = false;\n-                if (!hasSpouse() && campaign.getCampaignOptions().useUnofficialProcreationNoRelationship()) {\n-                    // 0.005% chance that this procreation attempt will create a child\n-                    concieved = (Compute.randomInt(100000) < 2);\n-                } else if (hasSpouse()) {\n-                    if (getSpouse().isActive() && !getSpouse().isDeployed() && getSpouse().getAge(campaign.getCalendar()) > 13) {\n-                        // 0.05% chance that this procreation attempt will create a child\n-                        concieved = (Compute.randomInt(10000) < 2);\n-                    }\n-                }\n+    //region Marriage\n+    /**\n+     * Determines if another person is a safe spouse for the current person\n+     * @param p the person to determine if they are a safe spouse\n+     */\n+    public boolean safeSpouse(Person p) {\n+        // Huge convoluted return statement, with the following restrictions\n+        // can't marry yourself\n+        // can't marry someone who is already married\n+        // can't marry a prisoner, unless you are also a prisoner (this is purposely left open for prisoners to marry who they want)\n+        // can't marry a person who is dead or MIA\n+        // can't marry inactive personnel (this is to show how they aren't part of the force anymore)\n+        // can't marry a close relative\n+        return (\n+                !this.equals(p)\n+                && !p.hasSpouse()\n+                && p.oldEnoughToMarry()\n+                && (!p.isPrisoner() || (p.isPrisoner() && isPrisoner()))\n+                && !p.isDeadOrMIA()\n+                && p.isActive()\n+                && ((getAncestorsId() == null)\n+                    || !campaign.getAncestors(getAncestorsId()).checkMutualAncestors(campaign.getAncestors(p.getAncestorsId())))\n+        );\n+    }\n \n-                if(concieved) {\n-                    GregorianCalendar tCal = (GregorianCalendar) campaign.getCalendar().clone();\n-                    tCal.add(GregorianCalendar.DAY_OF_YEAR, PREGNANCY_DURATION.getAsInt());\n-                    setDueDate(tCal);\n-                    int size = PREGNANCY_SIZE.getAsInt();\n-                    extraData.set(PREGNANCY_CHILDREN_DATA, size);\n-                    extraData.set(PREGNANCY_FATHER_DATA,\n-                        (hasSpouse()) ? getSpouseID().toString() : null);\n+    public boolean oldEnoughToMarry() {\n+        return (getAge(campaign.getCalendar()) >= campaign.getCampaignOptions().getMinimumMarriageAge());\n+    }\n \n-                    String sizeString = (size < PREGNANCY_MULTIPLE_NAMES.length) ? PREGNANCY_MULTIPLE_NAMES[size] : null;\n-                    if(null == sizeString) {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived\");\n-                    } else {\n-                        campaign.addReport(getHyperlinkedName()+\" has conceived \" + sizeString);\n-                    }\n-                    if (campaign.getCampaignOptions().logConception()) {\n-                        MedicalLogger.hasConceived(this, campaign.getDate(), sizeString);\n-                    }\n-                }\n+    public void randomMarriage() {\n+        // Don't attempt to generate is someone has a spouse, isn't old enough to marry,\n+        // is actively deployed, or is currently a prisoner\n+        if (hasSpouse() || !oldEnoughToMarry() || isDeployed() || isPrisoner()) {\n+            return;\n+        }\n+\n+        // setting is the chance that this attempt at finding a marriage will result in one\n+        // the setting is divided by 100 because we are running a float from 0 to 1 instead of 0 to 100\n+        if (Compute.randomFloat() < (campaign.getCampaignOptions().getChanceRandomMarriages() / 100)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMjU5NQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg2MTE0OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDowNjowNVrOF2WWsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1MToxNFrOF2WyHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMzY4Mw==", "bodyText": "I'm not so sure that'll help. I went through and rewrote this to use equals (as case is important in XML) and also a trie, the node name matching did not end up being a significant part of the work.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392533683", "createdAt": "2020-03-14T00:06:05Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1628,8 +2190,15 @@ public static Person generateInstanceFromXML(Node wn, Campaign c, Version versio\n             for (int x = 0; x < nl.getLength(); x++) {\n                 Node wn2 = nl.item(x);\n \n-                if (wn2.getNodeName().equalsIgnoreCase(\"name\")) {\n-                    retVal.name = wn2.getTextContent();\n+                // TODO : reorder these based on what is most likely to show up, to improve load speed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1953}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MDcwMQ==", "bodyText": "Just one of the performance ideas I was working on, I also found it didn't amount to much, but forgot to remove. Removed.", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392540701", "createdAt": "2020-03-14T00:51:14Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1628,8 +2190,15 @@ public static Person generateInstanceFromXML(Node wn, Campaign c, Version versio\n             for (int x = 0; x < nl.getLength(); x++) {\n                 Node wn2 = nl.item(x);\n \n-                if (wn2.getNodeName().equalsIgnoreCase(\"name\")) {\n-                    retVal.name = wn2.getTextContent();\n+                // TODO : reorder these based on what is most likely to show up, to improve load speed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMzY4Mw=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1953}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg2MTU3OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDowNjozMFrOF2WW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1MToyOFrOF2WyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMzc0OQ==", "bodyText": "Why not just call this once at the very end?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392533749", "createdAt": "2020-03-14T00:06:30Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1644,13 +2213,13 @@ public static Person generateInstanceFromXML(Node wn, Campaign c, Version versio\n                     String systemId = wn2.getAttributes().getNamedItem(\"systemId\").getTextContent().trim();\n                     String planetId = wn2.getTextContent().trim();\n                     retVal.originPlanet = c.getSystemById(systemId).getPlanetById(planetId);\n-                } else if (wn2.getNodeName().equalsIgnoreCase(\"isClanTech\")\n-                           || wn2.getNodeName().equalsIgnoreCase(\"clan\")) {\n+                } else if (wn2.getNodeName().equalsIgnoreCase(\"clan\")) {\n                     retVal.clan = Boolean.parseBoolean(wn2.getTextContent().trim());\n                 } else if (wn2.getNodeName().equalsIgnoreCase(\"phenotype\")) {\n                     retVal.phenotype = Integer.parseInt(wn2.getTextContent());\n                 } else if (wn2.getNodeName().equalsIgnoreCase(\"bloodname\")) {\n                     retVal.bloodname = wn2.getTextContent();\n+                    retVal.setFullName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1977}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MDcyNg==", "bodyText": "Switched it over to do so", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392540726", "createdAt": "2020-03-14T00:51:28Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -1644,13 +2213,13 @@ public static Person generateInstanceFromXML(Node wn, Campaign c, Version versio\n                     String systemId = wn2.getAttributes().getNamedItem(\"systemId\").getTextContent().trim();\n                     String planetId = wn2.getTextContent().trim();\n                     retVal.originPlanet = c.getSystemById(systemId).getPlanetById(planetId);\n-                } else if (wn2.getNodeName().equalsIgnoreCase(\"isClanTech\")\n-                           || wn2.getNodeName().equalsIgnoreCase(\"clan\")) {\n+                } else if (wn2.getNodeName().equalsIgnoreCase(\"clan\")) {\n                     retVal.clan = Boolean.parseBoolean(wn2.getTextContent().trim());\n                 } else if (wn2.getNodeName().equalsIgnoreCase(\"phenotype\")) {\n                     retVal.phenotype = Integer.parseInt(wn2.getTextContent());\n                 } else if (wn2.getNodeName().equalsIgnoreCase(\"bloodname\")) {\n                     retVal.bloodname = wn2.getTextContent();\n+                    retVal.setFullName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMzc0OQ=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 1977}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg2NjMyOnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDoxMDo1NlrOF2WZ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1NDo1OVrOF2Wzpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNDQ4MA==", "bodyText": "Is abilityString.length() == 0 not an option? (or size() == 0) ?", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392534480", "createdAt": "2020-03-14T00:10:56Z", "author": {"login": "sixlettervariables"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -2999,39 +3536,38 @@ public void changeEdgeTrigger(String name) {\n     }\n \n     /**\n-     * This function returns an html-coded tooltip that says what edge will be used\n      *\n-     * @return\n+     * @return an html-coded tooltip that says what edge will be used\n      */\n     public String getEdgeTooltip() {\n-        String edgett = \"\";\n+        StringBuilder edgett = new StringBuilder();\n         for (Enumeration<IOption> i = getOptions(PilotOptions.EDGE_ADVANTAGES); i.hasMoreElements(); ) {\n             IOption ability = i.nextElement();\n             //yuck, it would be nice to have a more fool-proof way of identifying edge triggers\n             if (ability.getName().contains(\"edge_when\") && ability.booleanValue()) {\n-                edgett = edgett + ability.getDescription() + \"<br>\";\n+                edgett.append(ability.getDescription()).append(\"<br>\");\n             }\n         }\n-        if (edgett.equals(\"\")) {\n+        if (edgett.toString().equals(\"\")) {\n             return \"No triggers set\";\n         }\n         return \"<html>\" + edgett + \"</html>\";\n     }\n+    //endregion edge\n \n     /**\n-     * This function returns an html-coded list that says what abilities are enabled for this pilot\n      *\n-     * @return\n+     * @return an html-coded list that says what abilities are enabled for this pilot\n      */\n     public String getAbilityList(String type) {\n-        String abilityString = \"\";\n+        StringBuilder abilityString = new StringBuilder();\n         for (Enumeration<IOption> i = getOptions(type); i.hasMoreElements(); ) {\n             IOption ability = i.nextElement();\n             if (ability.booleanValue()) {\n-                abilityString = abilityString + Utilities.getOptionDisplayName(ability) + \"<br>\";\n+                abilityString.append(Utilities.getOptionDisplayName(ability)).append(\"<br>\");\n             }\n         }\n-        if (abilityString.equals(\"\")) {\n+        if (abilityString.toString().equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 2285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MTA5NA==", "bodyText": "It is, swapped over to using abilityString.length() == 0", "url": "https://github.com/MegaMek/mekhq/pull/1533#discussion_r392541094", "createdAt": "2020-03-14T00:54:59Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/personnel/Person.java", "diffHunk": "@@ -2999,39 +3536,38 @@ public void changeEdgeTrigger(String name) {\n     }\n \n     /**\n-     * This function returns an html-coded tooltip that says what edge will be used\n      *\n-     * @return\n+     * @return an html-coded tooltip that says what edge will be used\n      */\n     public String getEdgeTooltip() {\n-        String edgett = \"\";\n+        StringBuilder edgett = new StringBuilder();\n         for (Enumeration<IOption> i = getOptions(PilotOptions.EDGE_ADVANTAGES); i.hasMoreElements(); ) {\n             IOption ability = i.nextElement();\n             //yuck, it would be nice to have a more fool-proof way of identifying edge triggers\n             if (ability.getName().contains(\"edge_when\") && ability.booleanValue()) {\n-                edgett = edgett + ability.getDescription() + \"<br>\";\n+                edgett.append(ability.getDescription()).append(\"<br>\");\n             }\n         }\n-        if (edgett.equals(\"\")) {\n+        if (edgett.toString().equals(\"\")) {\n             return \"No triggers set\";\n         }\n         return \"<html>\" + edgett + \"</html>\";\n     }\n+    //endregion edge\n \n     /**\n-     * This function returns an html-coded list that says what abilities are enabled for this pilot\n      *\n-     * @return\n+     * @return an html-coded list that says what abilities are enabled for this pilot\n      */\n     public String getAbilityList(String type) {\n-        String abilityString = \"\";\n+        StringBuilder abilityString = new StringBuilder();\n         for (Enumeration<IOption> i = getOptions(type); i.hasMoreElements(); ) {\n             IOption ability = i.nextElement();\n             if (ability.booleanValue()) {\n-                abilityString = abilityString + Utilities.getOptionDisplayName(ability) + \"<br>\";\n+                abilityString.append(Utilities.getOptionDisplayName(ability)).append(\"<br>\");\n             }\n         }\n-        if (abilityString.equals(\"\")) {\n+        if (abilityString.toString().equals(\"\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNDQ4MA=="}, "originalCommit": {"oid": "106ed2739d3941e172f9ec5ab83d301febb1770c"}, "originalPosition": 2285}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1940, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}