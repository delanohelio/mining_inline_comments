{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODE3OTU1", "number": 2227, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDowOVrOE4_1iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0ODozNFrOE4_7TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAxNjA4OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDowOVrOHzNzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDowOVrOHzNzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NTQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     return ((double)shots / getType().getShots());\n          \n          \n            \n                     return ((double) shots / getType().getShots());", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523465476", "createdAt": "2020-11-14T21:30:09Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "diffHunk": "@@ -77,10 +72,10 @@ public AmmoType getType() {\n \n     @Override\n     public double getTonnage() {\n-    \tif (getType().getKgPerShot() > 0) {\n-    \t\treturn getType().getKgPerShot() * shots/1000.0;\n-    \t}\n-     \treturn ((double)shots / getType().getShots());\n+        if (getType().getKgPerShot() > 0) {\n+            return getType().getKgPerShot() * shots/1000.0;\n+        }\n+         return ((double)shots / getType().getShots());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAxNjE2OnYy", "diffSide": "RIGHT", "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDoyNFrOHzNzDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTozMDoyNFrOHzNzDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NTQ4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return getType().getKgPerShot() * shots/1000.0;\n          \n          \n            \n                        return getType().getKgPerShot() * (shots / 1000.0);", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523465485", "createdAt": "2020-11-14T21:30:24Z", "author": {"login": "Windchild292"}, "path": "MekHQ/src/mekhq/campaign/parts/AmmoStorage.java", "diffHunk": "@@ -77,10 +72,10 @@ public AmmoType getType() {\n \n     @Override\n     public double getTonnage() {\n-    \tif (getType().getKgPerShot() > 0) {\n-    \t\treturn getType().getKgPerShot() * shots/1000.0;\n-    \t}\n-     \treturn ((double)shots / getType().getShots());\n+        if (getType().getKgPerShot() > 0) {\n+            return getType().getKgPerShot() * shots/1000.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNDQ2OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDowNlrOHzN26g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDowNlrOHzN26g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466474", "createdAt": "2020-11-14T21:40:06Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNDUxOnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoxN1rOHzN29A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoxN1rOHzN29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466484", "createdAt": "2020-11-14T21:40:17Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNDY4OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoyNVrOHzN3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoyNVrOHzN3Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466503", "createdAt": "2020-11-14T21:40:25Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNDc5OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoyOFrOHzN3FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MDoyOFrOHzN3FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466516", "createdAt": "2020-11-14T21:40:28Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNTE3OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MTowN1rOHzN3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MTowN1rOHzN3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and the new part should be identical in ALMOST every way...\n          \n          \n            \n                    // ... and the new part should be identical in ALMOST every way...", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466558", "createdAt": "2020-11-14T21:41:07Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAyNTIyOnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MToxNVrOHzN3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0MToxNVrOHzN3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NjU2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except for the number of shots, which should be instead\n          \n          \n            \n                    // ... except for the number of shots, which should be instead", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523466566", "createdAt": "2020-11-14T21:41:15Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjAzMDg1OnYy", "diffSide": "RIGHT", "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0ODozNFrOHzN54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMTo0ODozNFrOHzN54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NzIzNQ==", "bodyText": "Can you please fix the rest of these? The missing space isn't great w.r.t. accessibility.", "url": "https://github.com/MegaMek/mekhq/pull/2227#discussion_r523467235", "createdAt": "2020-11-14T21:48:34Z", "author": {"login": "Windchild292"}, "path": "MekHQ/unittests/mekhq/campaign/parts/AmmoStorageTest.java", "diffHunk": "@@ -20,13 +20,795 @@\n package mekhq.campaign.parts;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n \n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.BombType;\n+import megamek.common.EquipmentType;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Quartermaster;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.work.IAcquisitionWork;\n \n public class AmmoStorageTest {\n     @Test\n     public void ammoStorageDeserializationCtorTest() {\n         AmmoStorage ammoStorage = new AmmoStorage();\n         assertNotNull(ammoStorage);\n     }\n+\n+    @Test\n+    public void ammoStorageCtorTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        assertEquals(ammoType, ammoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoType, ammoStorage.getType()));\n+        assertEquals(ammoType.getShots(), ammoStorage.getShots());\n+        assertEquals(1.0, ammoStorage.getTonnage(), 0.001);\n+    }\n+\n+    @Test\n+    public void getMissingPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, ammoType.getShots(), mockCampaign);\n+\n+        // There should be no missing part.\n+        assertNull(ammoStorage.getMissingPart());\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        AmmoStorage clone = ammoStorage.clone();\n+        assertNotNull(clone);\n+\n+        assertEquals(ammoStorage.getType(), clone.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), clone.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), clone.getBuyCost());\n+        assertEquals(ammoStorage.getCurrentValue(), clone.getCurrentValue());\n+        assertEquals(ammoStorage.getShots(), clone.getShots());\n+    }\n+\n+    @Test\n+    public void getNewPartTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewPart();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getNewEquipmentTest() {\n+        AmmoType ammoType = getAmmoType(\"ISAC5 Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new part...\n+        AmmoStorage newAmmoStorage = ammoStorage.getNewEquipment();\n+        assertNotNull(newAmmoStorage);\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+    }\n+\n+    @Test\n+    public void getAcquisitionWorkTest() {\n+        AmmoType ammoType = getAmmoType(\"ISSRM6 Inferno Ammo\");\n+        Campaign mockCampaign = mock(Campaign.class);\n+\n+        AmmoStorage ammoStorage = new AmmoStorage(0, ammoType, 2 * ammoType.getShots(), mockCampaign);\n+\n+        // Create a new acquisition work...\n+        IAcquisitionWork acquisitionWork = ammoStorage.getAcquisitionWork();\n+        assertNotNull(acquisitionWork);\n+\n+        // Check getNewEquipment()...\n+        Object newEquipment = acquisitionWork.getNewEquipment();\n+        assertNotNull(newEquipment);\n+        assertTrue(newEquipment instanceof AmmoStorage);\n+\n+        AmmoStorage newAmmoStorage = (AmmoStorage) newEquipment;\n+\n+        // ...and the new part should be identical in ALMOST every way...\n+        assertEquals(ammoStorage.getType(), newAmmoStorage.getType());\n+        assertTrue(AmmoStorage.isSameAmmoType(ammoStorage.getType(), newAmmoStorage.getType()));\n+        assertEquals(ammoStorage.getBuyCost(), newAmmoStorage.getBuyCost());\n+\n+        // ...except for the number of shots, which should be instead\n+        // equal to the default number of shots for the type.\n+        assertEquals(ammoType.getShots(), newAmmoStorage.getShots());\n+\n+        // Check getAcquisitionPart()\n+        Part acquisitionPart = acquisitionWork.getAcquisitionPart();\n+        assertNotNull(acquisitionPart);\n+        assertTrue(acquisitionPart instanceof AmmoStorage);\n+\n+        newAmmoStorage = (AmmoStorage) acquisitionPart;\n+\n+        // ...and the new part should be identical in ALMOST every way...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f396dd4acf25118142a3e902e50ffb575fdc7a5"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2177, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}