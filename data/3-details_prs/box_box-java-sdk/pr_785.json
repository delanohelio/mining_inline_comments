{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTI3MDA1", "number": 785, "title": "adds shared link downscoping and coverage", "bodyText": "Adds string sharedLink arg thats a Box shared link to BoxAPIConnection.getLowerScopedToken. Returns a downscoped token for the resource associated to the shared link if the args not null.\nAdds test coverage.", "createdAt": "2020-03-23T02:52:17Z", "url": "https://github.com/box/box-java-sdk/pull/785", "merged": true, "mergeCommit": {"oid": "1d907c166fb25c824b8acbbb4c6442e4334edc76"}, "closed": true, "closedAt": "2020-06-15T18:40:08Z", "author": {"login": "boxdave"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQUXwNgH2gAyMzkyMTI3MDA1OmU2YjhlNzI5ZjVlYTFhZGIyMjlhMWI2ZDMwYTE4NzUyODk0NzE3MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrlHU9gFqTQzMDg5ODY2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/e6b8e729f5ea1adb229a1b6d30a1875289471733", "committedDate": "2020-03-23T01:52:55Z", "message": "adds shared link downscoping and coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTE1Mzcx", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-379115371", "createdAt": "2020-03-23T03:37:24Z", "commit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzozNzoyNFrOF52DDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxMzo0NVrOF52coA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODY2OQ==", "bodyText": "Hey @boxdave since this is a public method adding this will be a breaking change, I think another thing we can do is overload this method and have one that has the original signature and a new one that takes in the new sharedLink parameter", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396198669", "createdAt": "2020-03-23T03:37:24Z", "author": {"login": "carycheng"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -677,7 +677,7 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n      * @param resource the resource for which the new token has to be obtained\n      * @return scopedToken which has access token and other details\n      */\n-    public ScopedToken getLowerScopedToken(List<String> scopes, String resource) {\n+    public ScopedToken getLowerScopedToken(List<String> scopes, String resource, String sharedLink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODk5MA==", "bodyText": "getLowerScopedToken(List scopes, String resource) will call into getLowerScopedToken(List scopes, String resource, String sharedLink) by calling something like this: getLowerScopedToken(scopes, resource, null) and we can then move the logic from this current method down into the new overloaded method", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396198990", "createdAt": "2020-03-23T03:39:08Z", "author": {"login": "carycheng"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -677,7 +677,7 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n      * @param resource the resource for which the new token has to be obtained\n      * @return scopedToken which has access token and other details\n      */\n-    public ScopedToken getLowerScopedToken(List<String> scopes, String resource) {\n+    public ScopedToken getLowerScopedToken(List<String> scopes, String resource, String sharedLink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODY2OQ=="}, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNDgxNg==", "bodyText": "will probably have to break this out into two tests - one for the original method and one for the new overloaded method", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396204816", "createdAt": "2020-03-23T04:11:46Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNDgzNQ==", "bodyText": "same here", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396204835", "createdAt": "2020-03-23T04:11:53Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource);\n+            api.getLowerScopedToken(scopes, resource, sharedLink);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTIxNg==", "bodyText": "I think we can also add a unit test here with the intent to force it down the new if branches in boxapiconnection class. We can just have it return a string but we can assert that request to downscope token has all the parameter in the json body", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396205216", "createdAt": "2020-03-23T04:13:45Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource);\n+            api.getLowerScopedToken(scopes, resource, sharedLink);\n         } catch (RuntimeException e) {\n             //Ignore it\n         }\n         verify(api).getAccessToken();\n     }\n \n     @Test\n-    @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n-        BoxAPIConnection api = mock(BoxAPIConnection.class);\n+    @Category(IntegrationTest.class)\n+    public void getLowerScopedToken() {\n+        final String originalAccessToken = TestConfig.getAccessToken();\n+        BoxAPIConnection api = new BoxAPIConnection(originalAccessToken);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n+        scopes.add(\"item_preview\");\n+        scopes.add(\"item_content_upload\");\n         String resource = null;\n+        String sharedLink = null;\n \n-        when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n-        try {\n-            api.getLowerScopedToken(scopes, resource);\n-        } catch (RuntimeException e) {\n-            //Ignore it\n-        }\n-        verify(api).getAccessToken();\n+        ScopedToken token = api.getLowerScopedToken(scopes, resource, sharedLink);\n+        assertThat(token, notNullValue());\n+        assertThat(token.getAccessToken(), notNullValue());\n     }\n \n     @Test\n     @Category(IntegrationTest.class)\n-    public void getLowerScopedTokenWorks() {\n+    public void getLowerScopedTokenForResource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTI0MTYy", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-379124162", "createdAt": "2020-03-23T04:17:47Z", "commit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxNzo0N1rOF52fUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxNzo0N1rOF52fUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTkwNw==", "bodyText": "our linter is pretty strict with docstrings so with the overloaded method if you can put a @param sharedLink  it will make then make the linter pass", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396205907", "createdAt": "2020-03-23T04:17:47Z", "author": {"login": "carycheng"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -677,7 +677,7 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n      * @param resource the resource for which the new token has to be obtained", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "committedDate": "2020-03-29T21:21:08Z", "message": "adds helper for api vs. shared link url. tests failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1429f7f624a20b438d2177edde7a0a817f94d942", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/1429f7f624a20b438d2177edde7a0a817f94d942", "committedDate": "2020-04-03T16:18:21Z", "message": "git ignore config.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21540ee763e01751304997fa0c9597b026e349e6", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/21540ee763e01751304997fa0c9597b026e349e6", "committedDate": "2020-04-03T16:56:56Z", "message": "unit tests passing. integration failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d680ac093ca8341bced7c01771817b0242ecac2b", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/d680ac093ca8341bced7c01771817b0242ecac2b", "committedDate": "2020-04-03T17:39:18Z", "message": "integration test BoxAPIConnectionTest.getLowerScopedTokenWorks failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af", "author": {"user": {"login": "boxdave", "name": null}}, "url": "https://github.com/box/box-java-sdk/commit/b93682e870ca87c9799c47a893184f656da5f5af", "committedDate": "2020-04-07T17:38:57Z", "message": "adds method for building scopes list. tests passing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzM2OTA1", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-401336905", "createdAt": "2020-04-27T21:23:05Z", "commit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyMzowNVrOGM4Sbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMjoyMVrOGO4V_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODMxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158319", "createdAt": "2020-04-27T21:23:05Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n          \n          \n            \n                        String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n          \n          \n            \n                        String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158549", "createdAt": "2020-04-27T21:23:24Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODcyMA==", "bodyText": "Move this line up, per suggestion...", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158720", "createdAt": "2020-04-27T21:23:41Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODMxOQ=="}, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTIxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159212", "createdAt": "2020-04-27T21:24:28Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTMyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (isSharedLinkMatch) {\n          \n          \n            \n                            if (Pattern.matches(sharedLinkPattern, validURLStr)) {", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159329", "createdAt": "2020-04-27T21:24:41Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTYxNQ==", "bodyText": "Make enumerated data type.", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159615", "createdAt": "2020-04-27T21:25:13Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTg3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159877", "createdAt": "2020-04-27T21:25:37Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTk3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isAPIEndpointMatch) {\n          \n          \n            \n                        if (Pattern.matches(APIEndpointPattern, validURLStr)) {", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159976", "createdAt": "2020-04-27T21:25:50Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MTA1Mw==", "bodyText": "[nit] I generally like to put private methods below the methods that they are called from, within the class, and also with other private methods, if it makes sense.", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r417491053", "createdAt": "2020-04-29T17:34:28Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {\n+                    System.out.println(validURLStr + \" is valid shared link\");\n+                    resourceType = \"shared link\";\n+                };\n+            };\n+\n+        } catch (MalformedURLException e) {\n+            System.out.println(resourceLink + \" is not a valid URL\");\n+        };\n+\n+        return resourceType;\n+    }\n+\n+    private StringBuilder buildScopesForTokenDownscoping(List<String> scopes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MTQyMg==", "bodyText": "[nit] I generally like to put private methods below the methods that they are called from, within the class, and also with other private methods, if it makes sense.", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r417491422", "createdAt": "2020-04-29T17:35:06Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzMyOQ==", "bodyText": "Why did you change this?", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418253329", "createdAt": "2020-04-30T19:56:13Z", "author": {"login": "PJSimon"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -563,12 +560,12 @@ public void appUsersManuallyPaginatesCorrectly() throws IOException {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n+    public void getLowerScopedTokenWithNullResource() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n-        String resource = \"\";\n+        scopes.add(\"item_preview\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDcwNg==", "bodyText": "Currently (on master), we have a two similar tests:\n\ngetLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken, which sets String resource = \"\";\ngetLowerScopedTokenWithNullResource, which sets String resource = null;\nShould we still have tests for each value?  If so, would you mind parameterizing the resource string and consolidate the two tests into one method that's called twice from another method?", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418254706", "createdAt": "2020-04-30T19:58:56Z", "author": {"login": "PJSimon"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -563,12 +560,12 @@ public void appUsersManuallyPaginatesCorrectly() throws IOException {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n+    public void getLowerScopedTokenWithNullResource() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n-        String resource = \"\";\n+        scopes.add(\"item_preview\");\n+        String resource = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjM4MQ==", "bodyText": "Actually, you can combine the following methods into one method, if you parameterize the resource string:\n\ngetLowerScopedTokenForAPIEndpointResource\ngetLowerScopedTokenForSharedLinkResource\ngetLowerScopedTokenForNoteSharedLinkResource", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418256381", "createdAt": "2020-04-30T20:02:21Z", "author": {"login": "PJSimon"}, "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -582,17 +579,56 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n+    public void getLowerScopedTokenForAPIEndpointResource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93682e870ca87c9799c47a893184f656da5f5af"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "author": {"user": {"login": "PJSimon", "name": "Patrick Simon"}}, "url": "https://github.com/box/box-java-sdk/commit/f7e06e08ee65b8e4249e6ea4868260d1f704907b", "committedDate": "2020-06-04T23:00:24Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "950d94aaac2ac87d018c6214646280c778b6e465", "author": {"user": {"login": "PJSimon", "name": "Patrick Simon"}}, "url": "https://github.com/box/box-java-sdk/commit/950d94aaac2ac87d018c6214646280c778b6e465", "committedDate": "2020-06-12T22:27:07Z", "message": "Merge branch 'master' into feature/shared-link-downscoping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2506429a48ffd0384d673a43cc93307790d3609", "author": {"user": {"login": "PJSimon", "name": "Patrick Simon"}}, "url": "https://github.com/box/box-java-sdk/commit/b2506429a48ffd0384d673a43cc93307790d3609", "committedDate": "2020-06-13T04:45:23Z", "message": "Add enum type, update tests, refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjc2NjQw", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-430276640", "createdAt": "2020-06-15T01:32:58Z", "commit": {"oid": "b2506429a48ffd0384d673a43cc93307790d3609"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzY2NDY1", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-430766465", "createdAt": "2020-06-15T15:40:59Z", "commit": {"oid": "b2506429a48ffd0384d673a43cc93307790d3609"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a2f0d4f6fa3cf60e1eda9ca92cbc716e04c795e", "author": {"user": {"login": "PJSimon", "name": "Patrick Simon"}}, "url": "https://github.com/box/box-java-sdk/commit/2a2f0d4f6fa3cf60e1eda9ca92cbc716e04c795e", "committedDate": "2020-06-15T18:13:20Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbbca4bf4cb1cb9b89e3a2379e15234754a3c28b", "author": {"user": {"login": "PJSimon", "name": "Patrick Simon"}}, "url": "https://github.com/box/box-java-sdk/commit/dbbca4bf4cb1cb9b89e3a2379e15234754a3c28b", "committedDate": "2020-06-15T18:15:02Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODk4NjY5", "url": "https://github.com/box/box-java-sdk/pull/785#pullrequestreview-430898669", "createdAt": "2020-06-15T18:39:19Z", "commit": {"oid": "dbbca4bf4cb1cb9b89e3a2379e15234754a3c28b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2935, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}