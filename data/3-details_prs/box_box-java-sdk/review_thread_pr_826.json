{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTkxMDA4", "number": 826, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxMjozMVrOEOWgeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjoyMVrOEOWvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg0MjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/box/sdk/MetadataTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxMjozMVrOGxdPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMjozNFrOGxfJJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjQ4Mw==", "bodyText": "What was the complaint?", "url": "https://github.com/box/box-java-sdk/pull/826#discussion_r454512483", "createdAt": "2020-07-14T17:12:31Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/MetadataTemplate.java", "diffHunk": "@@ -412,6 +464,84 @@ protected BoxMetadataQueryItem factory(JsonObject jsonObject) {\n         };\n     }\n \n+    /**\n+     * Executes a metadata query.\n+     *\n+     * @param api The API connection to be used\n+     * @param from The template used in the query. Must be in the form scope.templateKey\n+     * @param query The logical expression of the query\n+     * @param queryParameters Required if query present. The arguments for the query\n+     * @param ancestorFolderId The folder_id to which to restrain the query\n+     * @param indexName The name of the Index to use\n+     * @param orderBy The field_key(s) to order on and the corresponding direction(s)\n+     * @param limit Max results to return for a single request (0-100 inclusive)\n+     * @param marker The marker to use for requesting the next page\n+     * @param fields The fields to retrieve.\n+     * @return An iterable of BoxItem.Info search results\n+     */\n+    //CHECKSTYLE:OFF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a1759024fcdf565d3da5173208f3fc53ed4a067"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzY1NA==", "bodyText": "Too many parameters for the method", "url": "https://github.com/box/box-java-sdk/pull/826#discussion_r454543654", "createdAt": "2020-07-14T18:02:34Z", "author": {"login": "sujaygarlanka"}, "path": "src/main/java/com/box/sdk/MetadataTemplate.java", "diffHunk": "@@ -412,6 +464,84 @@ protected BoxMetadataQueryItem factory(JsonObject jsonObject) {\n         };\n     }\n \n+    /**\n+     * Executes a metadata query.\n+     *\n+     * @param api The API connection to be used\n+     * @param from The template used in the query. Must be in the form scope.templateKey\n+     * @param query The logical expression of the query\n+     * @param queryParameters Required if query present. The arguments for the query\n+     * @param ancestorFolderId The folder_id to which to restrain the query\n+     * @param indexName The name of the Index to use\n+     * @param orderBy The field_key(s) to order on and the corresponding direction(s)\n+     * @param limit Max results to return for a single request (0-100 inclusive)\n+     * @param marker The marker to use for requesting the next page\n+     * @param fields The fields to retrieve.\n+     * @return An iterable of BoxItem.Info search results\n+     */\n+    //CHECKSTYLE:OFF", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjQ4Mw=="}, "originalCommit": {"oid": "6a1759024fcdf565d3da5173208f3fc53ed4a067"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg4MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/box/sdk/MetadataTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjoyMVrOGxdmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjoyMVrOGxdmxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODQ3MQ==", "bodyText": "Could you extract these lines into a new method getMetadataQueryRequestBody or similar?  Then you can remove the similar lines of code in public static BoxResourceIterable<BoxMetadataQueryItem> executeMetadataQuery.", "url": "https://github.com/box/box-java-sdk/pull/826#discussion_r454518471", "createdAt": "2020-07-14T17:22:21Z", "author": {"login": "PJSimon"}, "path": "src/main/java/com/box/sdk/MetadataTemplate.java", "diffHunk": "@@ -412,6 +464,84 @@ protected BoxMetadataQueryItem factory(JsonObject jsonObject) {\n         };\n     }\n \n+    /**\n+     * Executes a metadata query.\n+     *\n+     * @param api The API connection to be used\n+     * @param from The template used in the query. Must be in the form scope.templateKey\n+     * @param query The logical expression of the query\n+     * @param queryParameters Required if query present. The arguments for the query\n+     * @param ancestorFolderId The folder_id to which to restrain the query\n+     * @param indexName The name of the Index to use\n+     * @param orderBy The field_key(s) to order on and the corresponding direction(s)\n+     * @param limit Max results to return for a single request (0-100 inclusive)\n+     * @param marker The marker to use for requesting the next page\n+     * @param fields The fields to retrieve.\n+     * @return An iterable of BoxItem.Info search results\n+     */\n+    //CHECKSTYLE:OFF\n+    public static BoxResourceIterable<BoxItem.Info> executeMetadataQuery(final BoxAPIConnection api,\n+                                                            String from, String query, JsonObject queryParameters,\n+                                                            String ancestorFolderId, String indexName,\n+                                                            JsonArray orderBy, int limit, String marker,\n+                                                            String ... fields) {\n+    //CHECKSTYLE:ON\n+        JsonObject jsonObject = new JsonObject().add(\"from\", from);\n+        if (query != null) {\n+            jsonObject.add(\"query\", query);\n+        }\n+        if (queryParameters != null) {\n+            jsonObject.add(\"query_params\", queryParameters);\n+        }\n+        if (ancestorFolderId != null) {\n+            jsonObject.add(\"ancestor_folder_id\", ancestorFolderId);\n+        }\n+        if (indexName != null) {\n+            jsonObject.add(\"use_index\", indexName);\n+        }\n+        if (orderBy != null) {\n+            jsonObject.add(\"order_by\", orderBy);\n+        }\n+        if (fields.length > 0) {\n+            JsonArray fieldsBody = new JsonArray();\n+            for (String field : fields) {\n+                fieldsBody.add(field);\n+            }\n+            jsonObject.add(\"fields\", fieldsBody);\n+        }\n+        jsonObject.add(\"limit\", limit);\n+        if (marker != null) {\n+            jsonObject.add(\"marker\", marker);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a1759024fcdf565d3da5173208f3fc53ed4a067"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1270, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}