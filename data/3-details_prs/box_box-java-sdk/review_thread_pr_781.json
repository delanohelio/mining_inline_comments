{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDIxMjYz", "number": 781, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0ODowNVrODnVxRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MjoxMFrODnVzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc3NzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/box/sdk/BoxAPIRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0ODowNVrOF1R77w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0ODowNVrOF1R77w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjcxOQ==", "bodyText": "If we don't want to expose this method and it's only meant for internal package use only for chunked upload we should consider different modifier, maybe default or protected?", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391412719", "createdAt": "2020-03-12T05:48:05Z", "author": {"login": "carycheng"}, "path": "src/main/java/com/box/sdk/BoxAPIRequest.java", "diffHunk": "@@ -404,6 +405,66 @@ public BoxAPIResponse send(ProgressListener listener) {\n         throw new RuntimeException();\n     }\n \n+    /**\n+      * Sends a request to upload a file part and returns a BoxFileUploadSessionPart containing information\n+      * about the upload part. This method is separate from send() because it has custom retry logic.\n+      *\n+      * <p>If the server returns an error code or if a network error occurs, then the request will be automatically\n+      * retried. If the maximum number of retries is reached and an error still occurs, then a {@link BoxAPIException}\n+      * will be thrown.</p>\n+      *\n+      * @param session The BoxFileUploadSession uploading the part\n+      * @param offset Offset of the part being uploaded\n+      * @throws BoxAPIException if the server returns an error code or if a network error occurs.\n+      * @return A {@link BoxFileUploadSessionPart} part that has been uploaded.\n+      */\n+    public BoxFileUploadSessionPart sendForUploadPart(BoxFileUploadSession session, long offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc4MTcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MTowM1rOF1R-mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MTowM1rOF1R-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzQwMA==", "bodyText": "What's the status code for this post to be returned?", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413400", "createdAt": "2020-03-12T05:51:03Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc4MjEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MToyMFrOF1R-4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MToyMFrOF1R-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzQ3Mg==", "bodyText": "Here too", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413472", "createdAt": "2020-03-12T05:51:20Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc4MjQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MToyN1rOF1R_AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MToyN1rOF1R_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzUwNA==", "bodyText": "Here as well", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413504", "createdAt": "2020-03-12T05:51:27Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n+                        .willReturn(WireMock.aResponse()\n+                            .withHeader(\"Content-Type\", \"application/json\")\n+                            .withBody(partsResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc4MzQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MjoxMFrOF1R_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo1MjoxMFrOF1R_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzY2OA==", "bodyText": "This test needs to add the status codes for the stubbed api response", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413668", "createdAt": "2020-03-12T05:52:10Z", "author": {"login": "carycheng"}, "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n+                        .willReturn(WireMock.aResponse()\n+                            .withHeader(\"Content-Type\", \"application/json\")\n+                            .withBody(partsResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n+                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n+                .withRequestBody(WireMock.containing(commitObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(commitResult)));\n+\n+        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n+        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n+\n+        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n+        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n+        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n+        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n+        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n+    }\n+\n+    @Test\n+    @Category(UnitTest.class)\n+    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String uploadResult = \"\";\n+        String wrongPartsResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n+        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1229, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}