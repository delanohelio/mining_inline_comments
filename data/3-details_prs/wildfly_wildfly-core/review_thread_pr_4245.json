{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTgxMTI5", "number": 4245, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NjozNlrOEHokAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1NjowOFrOEmvTzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQwMDY2OnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/DomainTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NjozNlrOGnHBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyNTo1NVrOGnKPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MjcyNA==", "bodyText": "Just minor but would be good to add a comment here that the realm contains \"USER8\"", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r443662724", "createdAt": "2020-06-22T15:56:36Z", "author": {"login": "fjuma"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/DomainTestCase.java", "diffHunk": "@@ -109,6 +109,43 @@ private void init() throws Exception {\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SubjectAltNameEvidenceDecoderDomain\");\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SubjectEvidenceDecoderDomain\");\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SourceAddressRoleDecoderDomain\");\n+        TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"LowerCasePrincipalTransformerDomain\");\n+        TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"UpperCasePrincipalTransformerDomain\");\n+\n+    }\n+\n+    @Test\n+    public void testCasePrincipalTransformerLowerCase() throws Exception {\n+        init();\n+        ServiceName serviceName = Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY.getCapabilityServiceName(\"LowerCasePrincipalTransformerDomain\");\n+        SecurityDomain domain = (SecurityDomain) services.getContainer().getService(serviceName).getValue();\n+        Assert.assertNotNull(domain);\n+\n+        ServerAuthenticationContext context = domain.createNewAuthenticationContext();\n+        context.setAuthenticationName(\"USER1\"); // the realm contains \"user1\"\n+        Assert.assertTrue(context.exists());\n+        context.authorize();\n+        context.succeed();\n+\n+        SecurityIdentity identity = context.getAuthorizedIdentity();\n+        Assert.assertEquals(\"user1\", identity.getPrincipal().getName()); // after pre-realm-name-rewriter only\n+    }\n+\n+    @Test\n+    public void testCasePrincipalTransformerUpperCase() throws Exception {\n+        init();\n+        ServiceName serviceName = Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY.getCapabilityServiceName(\"UpperCasePrincipalTransformerDomain\");\n+        SecurityDomain domain = (SecurityDomain) services.getContainer().getService(serviceName).getValue();\n+        Assert.assertNotNull(domain);\n+\n+        ServerAuthenticationContext context = domain.createNewAuthenticationContext();\n+        context.setAuthenticationName(\"user8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3b6898bdaba6ecd6dd90ced02ebc3db5336558"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNTQzMQ==", "bodyText": "fixed!", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r443715431", "createdAt": "2020-06-22T17:25:55Z", "author": {"login": "SoniaZaldana"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/DomainTestCase.java", "diffHunk": "@@ -109,6 +109,43 @@ private void init() throws Exception {\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SubjectAltNameEvidenceDecoderDomain\");\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SubjectEvidenceDecoderDomain\");\n         TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"SourceAddressRoleDecoderDomain\");\n+        TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"LowerCasePrincipalTransformerDomain\");\n+        TestEnvironment.activateService(services, Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY, \"UpperCasePrincipalTransformerDomain\");\n+\n+    }\n+\n+    @Test\n+    public void testCasePrincipalTransformerLowerCase() throws Exception {\n+        init();\n+        ServiceName serviceName = Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY.getCapabilityServiceName(\"LowerCasePrincipalTransformerDomain\");\n+        SecurityDomain domain = (SecurityDomain) services.getContainer().getService(serviceName).getValue();\n+        Assert.assertNotNull(domain);\n+\n+        ServerAuthenticationContext context = domain.createNewAuthenticationContext();\n+        context.setAuthenticationName(\"USER1\"); // the realm contains \"user1\"\n+        Assert.assertTrue(context.exists());\n+        context.authorize();\n+        context.succeed();\n+\n+        SecurityIdentity identity = context.getAuthorizedIdentity();\n+        Assert.assertEquals(\"user1\", identity.getPrincipal().getName()); // after pre-realm-name-rewriter only\n+    }\n+\n+    @Test\n+    public void testCasePrincipalTransformerUpperCase() throws Exception {\n+        init();\n+        ServiceName serviceName = Capabilities.SECURITY_DOMAIN_RUNTIME_CAPABILITY.getCapabilityServiceName(\"UpperCasePrincipalTransformerDomain\");\n+        SecurityDomain domain = (SecurityDomain) services.getContainer().getService(serviceName).getValue();\n+        Assert.assertNotNull(domain);\n+\n+        ServerAuthenticationContext context = domain.createNewAuthenticationContext();\n+        context.setAuthenticationName(\"user8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MjcyNA=="}, "originalCommit": {"oid": "7e3b6898bdaba6ecd6dd90ced02ebc3db5336558"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU2NDYwOnYy", "diffSide": "LEFT", "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1NjowOFrOHW8k9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowMDozNVrOHW-2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMzIyMw==", "bodyText": "Before, you had updated ElytronSubsystemParser10_0.java (i.e., the previous parser), to update the return value to return new MapperParser(MapperParser.Version.VERSION_6_0).getParser();. That change should be removed from that file and added here instead (since now ElytronSubsystemParser11_0.java is the previous parser).", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r493823223", "createdAt": "2020-09-23T18:56:08Z", "author": {"login": "fjuma"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "diffHunk": "@@ -33,11 +33,6 @@ String getNameSpace() {\n         return ElytronExtension.NAMESPACE_11_0;\n     }\n \n-    @Override\n-    protected PersistentResourceXMLDescription getMapperParser() {\n-        return new MapperParser().getParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ad4d8bd752e88c516c4394ca439b9b6615d822"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MzM1Mg==", "bodyText": "In that case, as ElytronSubsystemParser10_0 is also supposed to return version 6, I leave the return value as  new MapperParser(MapperParser.Version.VERSION_6_0).getParser() there too, right? Previously, that parser used to return the current version.", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r493843352", "createdAt": "2020-09-23T19:29:17Z", "author": {"login": "SoniaZaldana"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "diffHunk": "@@ -33,11 +33,6 @@ String getNameSpace() {\n         return ElytronExtension.NAMESPACE_11_0;\n     }\n \n-    @Override\n-    protected PersistentResourceXMLDescription getMapperParser() {\n-        return new MapperParser().getParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMzIyMw=="}, "originalCommit": {"oid": "68ad4d8bd752e88c516c4394ca439b9b6615d822"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NTg2MQ==", "bodyText": "Ah, just realized that the newly introduced MapperParser.Version.VERSION_6_0 corresponds to ElytronSubsystemParser10_0 and is also needed for ElytronSubsystemParser11_0. This means it is correct to specify this version in ElytronSubsystemParser10_0 and to remove the getMapperParser() method from ElytronSubsystemParser11_0.\nTo help make things clearer though, I think it would be good to rename MapperParser.CURRENT so that it references the actual version instead. That way, the next time we add a new version in MapperParser, we won't need to worry about updating an older version of the parser from CURRENT to the previous version.", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r493855861", "createdAt": "2020-09-23T19:52:07Z", "author": {"login": "fjuma"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "diffHunk": "@@ -33,11 +33,6 @@ String getNameSpace() {\n         return ElytronExtension.NAMESPACE_11_0;\n     }\n \n-    @Override\n-    protected PersistentResourceXMLDescription getMapperParser() {\n-        return new MapperParser().getParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMzIyMw=="}, "originalCommit": {"oid": "68ad4d8bd752e88c516c4394ca439b9b6615d822"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1OTAxMw==", "bodyText": "So just verify I understood correctly, you're suggesting we rename MapperParser.CURRENT to say MapperParser.VERSION_7_0 and then in the ElytronSubsystemParser12_0 class I instantiate the mapper parser with version 7, as opposed to leaving an empty constructor? That way in the future, we won't have to update ElytronSubsystemParser12_0.", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r493859013", "createdAt": "2020-09-23T19:57:58Z", "author": {"login": "SoniaZaldana"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "diffHunk": "@@ -33,11 +33,6 @@ String getNameSpace() {\n         return ElytronExtension.NAMESPACE_11_0;\n     }\n \n-    @Override\n-    protected PersistentResourceXMLDescription getMapperParser() {\n-        return new MapperParser().getParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMzIyMw=="}, "originalCommit": {"oid": "68ad4d8bd752e88c516c4394ca439b9b6615d822"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MDQ0NQ==", "bodyText": "Yes, exactly.", "url": "https://github.com/wildfly/wildfly-core/pull/4245#discussion_r493860445", "createdAt": "2020-09-23T20:00:35Z", "author": {"login": "fjuma"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemParser11_0.java", "diffHunk": "@@ -33,11 +33,6 @@ String getNameSpace() {\n         return ElytronExtension.NAMESPACE_11_0;\n     }\n \n-    @Override\n-    protected PersistentResourceXMLDescription getMapperParser() {\n-        return new MapperParser().getParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMzIyMw=="}, "originalCommit": {"oid": "68ad4d8bd752e88c516c4394ca439b9b6615d822"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3819, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}