{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODYwMTcy", "number": 4054, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1Mjo0MFrODXdw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNjozMVrODXeA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMxNDc5OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1Mjo0MFrOFcxh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1Mjo0MFrOFcxh0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxNTkyMw==", "bodyText": "should be 2020 now", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365715923", "createdAt": "2020-01-13T09:52:40Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzMzA0OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1ODo0MFrOFcxsaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1ODo0MFrOFcxsaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxODYzMw==", "bodyText": "error log must be i18ned", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365718633", "createdAt": "2020-01-13T09:58:40Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzNTgyOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTozNFrOFcxuGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTozNFrOFcxuGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTA2NA==", "bodyText": "-1, all lines should be appended to a single String and logged with a single call to LOGGER.error", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719064", "createdAt": "2020-01-13T09:59:34Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzNjQyOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTo0OFrOFcxucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTo0OFrOFcxucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTE1Mw==", "bodyText": "error log must be i18ned", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719153", "createdAt": "2020-01-13T09:59:48Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzNjg2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTo1OFrOFcxuvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1OTo1OFrOFcxuvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTIzMQ==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719231", "createdAt": "2020-01-13T09:59:58Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzODMzOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMDoyNVrOFcxvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMDoyNVrOFcxvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTQ1MA==", "bodyText": "info log must be i18ned", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719450", "createdAt": "2020-01-13T10:00:25Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTMzOTE5OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMDo0NVrOFcxwLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMDo0NVrOFcxwLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTU5OA==", "bodyText": "error log must be i18ned", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719598", "createdAt": "2020-01-13T10:00:45Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0MDMxOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTowOFrOFcxw3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTowOFrOFcxw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTc3Mg==", "bodyText": "exception message must be i18ned", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719772", "createdAt": "2020-01-13T10:01:08Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0MTU2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTozMFrOFcxxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTozMFrOFcxxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTk1NQ==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719955", "createdAt": "2020-01-13T10:01:30Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0MjQ5OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo0NlrOFcxyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo0NlrOFcxyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDA5Ng==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720096", "createdAt": "2020-01-13T10:01:46Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0Mjc1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo1MVrOFcxyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo1MVrOFcxyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDEyOQ==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720129", "createdAt": "2020-01-13T10:01:51Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"\n+                        + \"there were unexpected values. See list of errors in \" + errors);\n+                for (String line : Files.readAllLines(errors.toPath())) {\n+                    LOGGER.error(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0MzA3OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo1N1rOFcxycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMTo1N1rOFcxycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDE3OA==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720178", "createdAt": "2020-01-13T10:01:57Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"\n+                        + \"there were unexpected values. See list of errors in \" + errors);\n+                for (String line : Files.readAllLines(errors.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+            }\n+\n+        }\n+        if (cmdCtx.getExitCode() != 0 || cmdCtx.isTerminated()) {\n+            throw new RuntimeException(\"Error applying \" + file + \" CLI script.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1MDM2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNDozOFrOFcx25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNDozOFrOFcx25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTMxNw==", "bodyText": "same remark as above", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365721317", "createdAt": "2020-01-13T10:04:38Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "diffHunk": "@@ -445,6 +449,44 @@\n         CliLauncher.runcom(this);\n     }\n \n+    /**\n+     * Constructor called from Boot invoker, minimal configuration.\n+     * public for testing purpose.\n+     *\n+     */\n+    public CommandContextImpl(OutputStream output) throws CliInitializationException {\n+        bootInvoker = true;\n+        config = CliConfigImpl.newBootConfig();\n+        addressResolver = ControllerAddressResolver.newInstance(config, null);\n+\n+        operationHandler = new OperationRequestHandler();\n+\n+        this.username = null;\n+        this.password = null;\n+        this.disableLocalAuth = false;\n+        this.clientBindAddress = null;\n+\n+        SILENT = config.isSilent();\n+        ERROR_ON_INTERACT = config.isErrorOnInteract();\n+        echoCommand = config.isEchoCommand();\n+        configTimeout = config.getCommandTimeout() == null ? DEFAULT_TIMEOUT : config.getCommandTimeout();\n+        resolveParameterValues = config.isResolveParameterValues();\n+        redefinedOutput = output != null;\n+        cliPrintStream = !redefinedOutput ? new CLIPrintStream() : new CLIPrintStream(output);\n+\n+        aeshCommands = new AeshCommands(this, new OperationCommandContainer(this));\n+        this.cmdRegistry = aeshCommands.getRegistry();\n+        this.cmdCompleter = null;\n+        this.legacyCmdCompleter = null;\n+        this.operationCandidatesProvider = null;\n+\n+        try {\n+            initCommands(true);\n+        } catch (CommandLineException | CommandLineParserException e) {\n+            throw new CliInitializationException(\"Failed to initialize commands\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1NTgyOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNjozMVrOFcx6Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjozMTo0M1rOFc1Zuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjE0Nw==", "bodyText": "stylistic suggestion: maybe you should add things that change with bootInvoker in a single if (!bootInvoker)?", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365722147", "createdAt": "2020-01-13T10:06:31Z", "author": {"login": "jmesnil"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "diffHunk": "@@ -523,18 +565,26 @@ private void restoreStdIO() {\n     }\n \n     private void initCommands() throws CommandLineException, CommandLineParserException {\n+        initCommands(false);\n+    }\n+\n+    private void initCommands(boolean bootInvoker) throws CommandLineException, CommandLineParserException {\n         // aesh commands\n         cmdRegistry.addCommand(new VersionCommand());\n         cmdRegistry.addCommand(new HelpCommand(cmdRegistry));\n-        cmdRegistry.addCommand(new ConnectCommand());\n+        if (!bootInvoker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTM4Nw==", "bodyText": "@jmesnil I would prefer to keep the current order when registering commands.", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365779387", "createdAt": "2020-01-13T12:31:43Z", "author": {"login": "jfdenise"}, "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "diffHunk": "@@ -523,18 +565,26 @@ private void restoreStdIO() {\n     }\n \n     private void initCommands() throws CommandLineException, CommandLineParserException {\n+        initCommands(false);\n+    }\n+\n+    private void initCommands(boolean bootInvoker) throws CommandLineException, CommandLineParserException {\n         // aesh commands\n         cmdRegistry.addCommand(new VersionCommand());\n         cmdRegistry.addCommand(new HelpCommand(cmdRegistry));\n-        cmdRegistry.addCommand(new ConnectCommand());\n+        if (!bootInvoker) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjE0Nw=="}, "originalCommit": {"oid": "baa625f598fa9631f79874a25ee62274cabc88d0"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3871, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}