{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjMxNDU2", "number": 4228, "title": "[WFCORE-4995] Bump management API version to 14.0.0", "bodyText": "and urn:jboss:domain:14.0 for the XSD\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\nSigned-off-by: Jeff Mesnil jmesnil@redhat.com", "createdAt": "2020-06-09T08:44:34Z", "url": "https://github.com/wildfly/wildfly-core/pull/4228", "merged": true, "mergeCommit": {"oid": "53b51081f8b5d9bcc027f985f3cae51545aea08b"}, "closed": true, "closedAt": "2020-06-10T07:13:05Z", "author": {"login": "jmesnil"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcphNV2gBqjM0MjM4MDE3ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpnqQnAFqTQyNzMzOTU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baad1960ea9a52ddbddbe1d8e82d29ab8ebf9490", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly-core/commit/baad1960ea9a52ddbddbe1d8e82d29ab8ebf9490", "committedDate": "2020-06-09T08:40:50Z", "message": "[WFCORE-4995] Bump management API version to 13.0.0\n\nand `urn:jboss:domain:14.0` for the XSD\n\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}, "afterCommit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly-core/commit/b7028b7175b122e1db497beccc6b34ac1c49915c", "committedDate": "2020-06-09T08:58:07Z", "message": "[WFCORE-4995] Bump management API version to 14.0.0\n\nand `urn:jboss:domain:14.0` for the XSD\n\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDQyMjk2", "url": "https://github.com/wildfly/wildfly-core/pull/4228#pullrequestreview-427042296", "createdAt": "2020-06-09T11:24:57Z", "commit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToyNDo1N1rOGhEzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToyNDo1N1rOGhEzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzNDkzOQ==", "bodyText": "writeAccessControl can also be removed since this file will be used for read only.\nhttps://github.com/wildfly/wildfly-core/pull/4228/files#diff-3a186e12b2e248de03d22e9991e1d13cR686", "url": "https://github.com/wildfly/wildfly-core/pull/4228#discussion_r437334939", "createdAt": "2020-06-09T11:24:57Z", "author": {"login": "yersan"}, "path": "host-controller/src/main/java/org/jboss/as/host/controller/parsing/DomainXml_13.java", "diffHunk": "@@ -694,106 +602,6 @@ private void initializeRolloutPlans(ModelNode address, List<ModelNode> list) {\n         list.add(addOp);\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDQ4NTg5", "url": "https://github.com/wildfly/wildfly-core/pull/4228#pullrequestreview-427048589", "createdAt": "2020-06-09T11:34:49Z", "commit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozNDo0OVrOGhFF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozNDo0OVrOGhFF8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzOTYzNQ==", "bodyText": "I would also expect the following methods removed from this file:\nwriteNativeManagementProtocol https://github.com/wildfly/wildfly-core/pull/4228/files#diff-ae4aaafa96590692ce977218d56e3326R1448\nwriteHttpManagementProtocol https://github.com/wildfly/wildfly-core/pull/4228/files#diff-ae4aaafa96590692ce977218d56e3326R1467\nwriteAuditLog https://github.com/wildfly/wildfly-core/pull/4228/files#diff-ae4aaafa96590692ce977218d56e3326R1514", "url": "https://github.com/wildfly/wildfly-core/pull/4228#discussion_r437339635", "createdAt": "2020-06-09T11:34:49Z", "author": {"login": "yersan"}, "path": "host-controller/src/main/java/org/jboss/as/host/controller/parsing/HostXml_13.java", "diffHunk": "@@ -1512,174 +1399,6 @@ private void parseSocketBindingGroup(final XMLExtendedStreamReader reader, final\n         }\n     }\n \n-    private void writeDomainController(final XMLExtendedStreamWriter writer, final ModelNode modelNode, ModelNode ignoredResources,\n-                                       ModelNode discoveryOptions) throws XMLStreamException {\n-        writer.writeStartElement(Element.DOMAIN_CONTROLLER.getLocalName());\n-        if (modelNode.hasDefined(LOCAL)) {\n-            if (discoveryOptions != null) {\n-                writer.writeStartElement(Element.LOCAL.getLocalName());\n-                writeDiscoveryOptions(writer, discoveryOptions);\n-                writer.writeEndElement();\n-            } else {\n-                writer.writeEmptyElement(Element.LOCAL.getLocalName());\n-            }\n-        } else if (modelNode.hasDefined(REMOTE)) {\n-            writer.writeStartElement(Element.REMOTE.getLocalName());\n-            final ModelNode remote = modelNode.get(REMOTE);\n-            RemoteDomainControllerAddHandler.PROTOCOL.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.HOST.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.PORT.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.AUTHENTICATION_CONTEXT.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.SECURITY_REALM.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.USERNAME.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.IGNORE_UNUSED_CONFIG.marshallAsAttribute(remote, writer);\n-            RemoteDomainControllerAddHandler.ADMIN_ONLY_POLICY.marshallAsAttribute(remote, writer);\n-\n-            if (ignoredResources != null) {\n-                writeIgnoredResources(writer, ignoredResources);\n-            }\n-            if (discoveryOptions != null) {\n-                writeDiscoveryOptions(writer, discoveryOptions);\n-            }\n-            writer.writeEndElement();\n-        }\n-        writer.writeEndElement();\n-    }\n-\n-    private void writeIgnoredResources(XMLExtendedStreamWriter writer, ModelNode ignoredTypes) throws XMLStreamException {\n-        for (String ignoredName : ignoredTypes.keys()) {\n-\n-            ModelNode ignored = ignoredTypes.get(ignoredName);\n-\n-            ModelNode names = ignored.hasDefined(NAMES) ? ignored.get(NAMES) : null;\n-            boolean hasNames = names != null && names.asInt() > 0;\n-            if (hasNames) {\n-                writer.writeStartElement(Element.IGNORED_RESOURCE.getLocalName());\n-            } else {\n-                writer.writeEmptyElement(Element.IGNORED_RESOURCE.getLocalName());\n-            }\n-\n-            writer.writeAttribute(Attribute.TYPE.getLocalName(), ignoredName);\n-            IgnoredDomainTypeResourceDefinition.WILDCARD.marshallAsAttribute(ignored, writer);\n-\n-            if (hasNames) {\n-                for (ModelNode name : names.asList()) {\n-                    writer.writeEmptyElement(Element.INSTANCE.getLocalName());\n-                    writer.writeAttribute(Attribute.NAME.getLocalName(), name.asString());\n-                }\n-                writer.writeEndElement();\n-            }\n-        }\n-    }\n-\n-    private void writeDiscoveryOptions(XMLExtendedStreamWriter writer, ModelNode discoveryOptions) throws XMLStreamException {\n-        writer.writeStartElement(Element.DISCOVERY_OPTIONS.getLocalName());\n-        for (Property property : discoveryOptions.asPropertyList()) {\n-            final String type = property.getName().equals(STATIC_DISCOVERY) ? STATIC_DISCOVERY : DISCOVERY_OPTION;\n-            final Element element = Element.forName(type);\n-            final String optionName = property.getValue().get(ModelDescriptionConstants.NAME).asString();\n-\n-            switch (element) {\n-                case STATIC_DISCOVERY: {\n-                    final ModelNode staticDiscoveryOption = property.getValue();\n-                    writer.writeStartElement(element.getLocalName());\n-                    WriteUtils.writeAttribute(writer, Attribute.NAME, optionName);\n-                    StaticDiscoveryResourceDefinition.PROTOCOL.marshallAsAttribute(staticDiscoveryOption, writer);\n-                    StaticDiscoveryResourceDefinition.HOST.marshallAsAttribute(staticDiscoveryOption, writer);\n-                    StaticDiscoveryResourceDefinition.PORT.marshallAsAttribute(staticDiscoveryOption, writer);\n-                    writer.writeEndElement();\n-                    break;\n-                }\n-                case DISCOVERY_OPTION: {\n-                    final ModelNode discoveryOption = property.getValue();\n-                    writer.writeStartElement(element.getLocalName());\n-                    WriteUtils.writeAttribute(writer, Attribute.NAME, optionName);\n-                    DiscoveryOptionResourceDefinition.CODE.marshallAsAttribute(discoveryOption, writer);\n-                    DiscoveryOptionResourceDefinition.MODULE.marshallAsAttribute(discoveryOption, writer);\n-                    if (discoveryOption.hasDefined(PROPERTIES)) {\n-                        writeDiscoveryOptionProperties(writer, discoveryOption.get(PROPERTIES));\n-                    }\n-                    writer.writeEndElement();\n-                    break;\n-                }\n-                default:\n-                    throw new RuntimeException(ControllerLogger.ROOT_LOGGER.unknownChildType(element.getLocalName()));\n-            }\n-        }\n-        writer.writeEndElement();\n-    }\n-\n-    private void writeDiscoveryOptionProperties(XMLExtendedStreamWriter writer, ModelNode discoveryOptionProperties) throws XMLStreamException {\n-        for (String property : discoveryOptionProperties.keys()) {\n-            writer.writeStartElement(Element.PROPERTY.getLocalName());\n-            WriteUtils.writeAttribute(writer, Attribute.NAME, property);\n-            WriteUtils.writeAttribute(writer, Attribute.VALUE, discoveryOptionProperties.get(property).asString());\n-            writer.writeEndElement();\n-        }\n-    }\n-\n-    private void writeServers(final XMLExtendedStreamWriter writer, final ModelNode modelNode) throws XMLStreamException {\n-\n-        for (String serverName : modelNode.keys()) {\n-            final ModelNode server = modelNode.get(serverName);\n-\n-            writer.writeStartElement(Element.SERVER.getLocalName());\n-\n-            WriteUtils.writeAttribute(writer, Attribute.NAME, serverName);\n-            ServerConfigResourceDefinition.GROUP.marshallAsAttribute(server, writer);\n-            ServerConfigResourceDefinition.AUTO_START.marshallAsAttribute(server, writer);\n-            ServerConfigResourceDefinition.UPDATE_AUTO_START_WITH_SERVER_STATUS.marshallAsAttribute(server, writer);\n-            if (server.hasDefined(PATH)) {\n-                writePaths(writer, server.get(PATH), false);\n-            }\n-            if (server.hasDefined(SYSTEM_PROPERTY)) {\n-                writeProperties(writer, server.get(SYSTEM_PROPERTY), Element.SYSTEM_PROPERTIES, false);\n-            }\n-            if (server.hasDefined(INTERFACE)) {\n-                writeInterfaces(writer, server.get(INTERFACE));\n-            }\n-            if (server.hasDefined(JVM)) {\n-                for (final Property jvm : server.get(JVM).asPropertyList()) {\n-                    JvmXml.writeJVMElement(writer, jvm.getName(), jvm.getValue());\n-                    break; // TODO just write the first !?\n-                }\n-            }\n-            if (server.hasDefined(SOCKET_BINDING_GROUP) || server.hasDefined(SOCKET_BINDING_PORT_OFFSET) || server.hasDefined(SOCKET_BINDING_DEFAULT_INTERFACE)) {\n-                writer.writeStartElement(Element.SOCKET_BINDINGS.getLocalName());\n-                ServerConfigResourceDefinition.SOCKET_BINDING_GROUP.marshallAsAttribute(server, writer);\n-                ServerConfigResourceDefinition.SOCKET_BINDING_PORT_OFFSET.marshallAsAttribute(server, writer);\n-                ServerConfigResourceDefinition.SOCKET_BINDING_DEFAULT_INTERFACE.marshallAsAttribute(server, writer);\n-                writer.writeEndElement();\n-            }\n-            if (server.hasDefined(SSL, LOOPBACK)) {\n-                ModelNode ssl = server.get(SSL, LOOPBACK);\n-                writer.writeStartElement(Element.SSL.getLocalName());\n-                SslLoopbackResourceDefinition.SSL_PROTOCOCOL.marshallAsAttribute(ssl, writer);\n-                SslLoopbackResourceDefinition.TRUST_MANAGER_ALGORITHM.marshallAsAttribute(ssl, writer);\n-                SslLoopbackResourceDefinition.TRUSTSTORE_TYPE.marshallAsAttribute(ssl, writer);\n-                SslLoopbackResourceDefinition.TRUSTSTORE_PATH.marshallAsAttribute(ssl, writer);\n-                SslLoopbackResourceDefinition.TRUSTSTORE_PASSWORD.marshallAsAttribute(ssl, writer);\n-                writer.writeEndElement();\n-            }\n-\n-            writer.writeEndElement();\n-        }\n-    }\n-\n-    private void writeHostProfile(final XMLExtendedStreamWriter writer, final ModelMarshallingContext context)\n-            throws XMLStreamException {\n-\n-        final ModelNode profileNode = context.getModelNode();\n-        // In case there are no subsystems defined\n-        if (!profileNode.hasDefined(SUBSYSTEM)) {\n-            return;\n-        }\n-\n-        writer.writeStartElement(Element.PROFILE.getLocalName());\n-        writeSubsystems(profileNode, writer, context);\n-        writer.writeEndElement();\n-    }\n-\n     /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "originalPosition": 332}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDUxOTg1", "url": "https://github.com/wildfly/wildfly-core/pull/4228#pullrequestreview-427051985", "createdAt": "2020-06-09T11:39:52Z", "commit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozOTo1MlrOGhFQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozOTo1MlrOGhFQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MjMzMQ==", "bodyText": "There are still write methods in this file, however it is supposed to be a read-only parser, see all the write* method names.", "url": "https://github.com/wildfly/wildfly-core/pull/4228#discussion_r437342331", "createdAt": "2020-06-09T11:39:52Z", "author": {"login": "yersan"}, "path": "server/src/main/java/org/jboss/as/server/parsing/StandaloneXml_13.java", "diffHunk": "@@ -717,120 +701,6 @@ private void setServerName(final ModelNode address, final List<ModelNode> operat\n         }\n     }\n \n-    void writeContent(final XMLExtendedStreamWriter writer, final ModelMarshallingContext context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30534462ba061eb07e5857d31c26ac30968418de", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly-core/commit/30534462ba061eb07e5857d31c26ac30968418de", "committedDate": "2020-06-09T14:11:36Z", "message": "[WFCORE-4995] Bump management API version to 14.0.0\n\nand `urn:jboss:domain:14.0` for the XSD\n\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7028b7175b122e1db497beccc6b34ac1c49915c", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly-core/commit/b7028b7175b122e1db497beccc6b34ac1c49915c", "committedDate": "2020-06-09T08:58:07Z", "message": "[WFCORE-4995] Bump management API version to 14.0.0\n\nand `urn:jboss:domain:14.0` for the XSD\n\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}, "afterCommit": {"oid": "30534462ba061eb07e5857d31c26ac30968418de", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly-core/commit/30534462ba061eb07e5857d31c26ac30968418de", "committedDate": "2020-06-09T14:11:36Z", "message": "[WFCORE-4995] Bump management API version to 14.0.0\n\nand `urn:jboss:domain:14.0` for the XSD\n\nJIRA: https://issues.redhat.com/browse/WFCORE-4995\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzM5NTUw", "url": "https://github.com/wildfly/wildfly-core/pull/4228#pullrequestreview-427339550", "createdAt": "2020-06-09T16:29:26Z", "commit": {"oid": "30534462ba061eb07e5857d31c26ac30968418de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3418, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}