{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDI3Njg2", "number": 4250, "title": "[WFCORE-5010] Startup error messages caused by expression where expressions are not allowed are confusing", "bodyText": "https://issues.redhat.com/browse/WFCORE-5010", "createdAt": "2020-06-29T13:48:07Z", "url": "https://github.com/wildfly/wildfly-core/pull/4250", "merged": true, "mergeCommit": {"oid": "015e2c6f1d8982bd72422f4e5279926d41969dda"}, "closed": true, "closedAt": "2020-09-15T06:53:12Z", "author": {"login": "lvydra"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv_tS6gH2gAyNDQxNDI3Njg2OmQwZjU2NTk0N2QwNzA0ZmViNTNjMGFlZGM5OTNhNWVjNjJhMmZiMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8RrDagFqTQ2MjYzNzg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0f565947d0704feb53c0aedc993a5ec62a2fb20", "author": {"user": {"login": "lvydra", "name": null}}, "url": "https://github.com/wildfly/wildfly-core/commit/d0f565947d0704feb53c0aedc993a5ec62a2fb20", "committedDate": "2020-06-29T11:54:01Z", "message": "[WFCORE-5010] Handling expression text in the unresolvable capability name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Mjg0NTc0", "url": "https://github.com/wildfly/wildfly-core/pull/4250#pullrequestreview-439284574", "createdAt": "2020-06-29T15:55:45Z", "commit": {"oid": "d0f565947d0704feb53c0aedc993a5ec62a2fb20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NTo0NVrOGqXdmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NTo0NVrOGqXdmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3Nzc4Nw==", "bodyText": "What kind of performance overhead will this cause?  This pattern is going to have to be recompiled for every ID encountered.", "url": "https://github.com/wildfly/wildfly-core/pull/4250#discussion_r447077787", "createdAt": "2020-06-29T15:55:45Z", "author": {"login": "darranl"}, "path": "controller/src/main/java/org/jboss/as/controller/OperationContextImpl.java", "diffHunk": "@@ -347,32 +349,38 @@ private boolean validateCapabilities() {\n             for (Map.Entry<Step, Set<CapabilityId>> entry : missingForStep.entrySet()) {\n                 Step step = entry.getKey();\n                 ModelNode response = step.response;\n-                // only overwrite reponse failure-description if there isn't one\n-                StringBuilder msg = response.hasDefined(FAILURE_DESCRIPTION)\n-                        ? null\n-                        : new StringBuilder(ControllerLogger.ROOT_LOGGER.requiredCapabilityMissing());\n-                StringBuilder bootMsg = isBooting() || ignoreFailures\n-                        ? new StringBuilder(ControllerLogger.ROOT_LOGGER.requiredCapabilityMissing(step.address.toCLIStyleString()))\n-                        : null;\n+                StringBuilder unsupportedExpressionsMsg = new StringBuilder();\n+                StringBuilder capabilityMissingMsg = new StringBuilder();\n                 for (CapabilityId id : entry.getValue()) {\n-                    String formattedCapability = ignoreContext\n-                            ? ControllerLogger.ROOT_LOGGER.formattedCapabilityName(id.getName())\n-                            : ControllerLogger.ROOT_LOGGER.formattedCapabilityId(id.getName(), id.getScope().getName());\n-                    Set<PathAddress> possiblePoints = managementModel.getCapabilityRegistry().getPossibleProviderPoints(id);\n-                    if (msg != null) {\n-                        msg = appendPossibleProviderPoints(msg, formattedCapability, possiblePoints);\n-                    }\n-                    if (bootMsg != null) {\n-                        bootMsg = appendPossibleProviderPoints(bootMsg, formattedCapability, possiblePoints);\n+                    if (id.getName().matches(UNSUPPORTED_EXPRESSION_PATTERN)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0f565947d0704feb53c0aedc993a5ec62a2fb20"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Mjg1Nzc3", "url": "https://github.com/wildfly/wildfly-core/pull/4250#pullrequestreview-439285777", "createdAt": "2020-06-29T15:57:10Z", "commit": {"oid": "d0f565947d0704feb53c0aedc993a5ec62a2fb20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NzoxMFrOGqXhag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NzoxMFrOGqXhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3ODc2Mg==", "bodyText": "For any regular expression IMO it is better to add a comment describing how it is structured so if anyone needs to work on it or debug it in the future they can understand the original intent of the regular expression.", "url": "https://github.com/wildfly/wildfly-core/pull/4250#discussion_r447078762", "createdAt": "2020-06-29T15:57:10Z", "author": {"login": "darranl"}, "path": "controller/src/main/java/org/jboss/as/controller/OperationContextImpl.java", "diffHunk": "@@ -144,6 +144,8 @@\n     private static final Set<Action.ActionEffect> WRITE_RUNTIME = EnumSet.of(Action.ActionEffect.WRITE_RUNTIME);\n     private static final Set<Action.ActionEffect> ALL_READ_WRITE = EnumSet.of(Action.ActionEffect.READ_CONFIG, Action.ActionEffect.READ_RUNTIME, Action.ActionEffect.WRITE_CONFIG, Action.ActionEffect.WRITE_RUNTIME);\n \n+    private static final String UNSUPPORTED_EXPRESSION_PATTERN = \".+\\\\.\\\\$\\\\{.+\\\\}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0f565947d0704feb53c0aedc993a5ec62a2fb20"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eca9f1ad515da9ec15588d1648c4a96e386a359", "author": {"user": {"login": "lvydra", "name": null}}, "url": "https://github.com/wildfly/wildfly-core/commit/9eca9f1ad515da9ec15588d1648c4a96e386a359", "committedDate": "2020-06-30T09:31:27Z", "message": "[WFCORE-5010] Optimization of pattern compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzk0Njk5", "url": "https://github.com/wildfly/wildfly-core/pull/4250#pullrequestreview-443394699", "createdAt": "2020-07-06T20:44:08Z", "commit": {"oid": "9eca9f1ad515da9ec15588d1648c4a96e386a359"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NDowOVrOGtme_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NDowOVrOGtme_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2OTYyOQ==", "bodyText": "ExpressionResolver.EXPRESSION_PATTERN exists and should be used.", "url": "https://github.com/wildfly/wildfly-core/pull/4250#discussion_r450469629", "createdAt": "2020-07-06T20:44:09Z", "author": {"login": "bstansberry"}, "path": "controller/src/main/java/org/jboss/as/controller/OperationContextImpl.java", "diffHunk": "@@ -144,6 +145,10 @@\n     private static final Set<Action.ActionEffect> WRITE_RUNTIME = EnumSet.of(Action.ActionEffect.WRITE_RUNTIME);\n     private static final Set<Action.ActionEffect> ALL_READ_WRITE = EnumSet.of(Action.ActionEffect.READ_CONFIG, Action.ActionEffect.READ_RUNTIME, Action.ActionEffect.WRITE_CONFIG, Action.ActionEffect.WRITE_RUNTIME);\n \n+    /** Pattern that can be used to identify capabilities name strings that include expression syntax\n+     * started with one or more of any character, followed by '.${' sequence, then one or more of any character ended with '}' */\n+    private static final Pattern UNSUPPORTED_EXPRESSION_PATTERN = Pattern.compile(\".+\\\\.\\\\$\\\\{.+\\\\}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca9f1ad515da9ec15588d1648c4a96e386a359"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDA5MjUw", "url": "https://github.com/wildfly/wildfly-core/pull/4250#pullrequestreview-443409250", "createdAt": "2020-07-06T21:09:23Z", "commit": {"oid": "9eca9f1ad515da9ec15588d1648c4a96e386a359"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTowOToyM1rOGtnM6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTowOToyM1rOGtnM6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MTM4NA==", "bodyText": "I think this needs a bit more info to explain things, as now it's going to output a capability name, which the user may not understand. The name will include an expression that perhaps they will recognize. But what the problem is isn't clear.\nPerhaps\n\"Required capabilities are not available. This likely is due to the use of an expression string in a configuration attribute that does not support expressions:\"\nHmm, but thinking further... AIUI with what is in the current code we have, for example:\nRequired capabilities are not available:\n     some.capability.name; Possible registration points for this capability:\n          blahblahblah\n     some.other.capability.name;  There are no known registration points which can provide this capability.\n\nSo shouldn't the result here be:\nRequired capabilities are not available:\n     some.capability.name; Possible registration points for this capability:\n          blahblahblah\n     some.other.capability.name; There are no known registration points which can provide this capability.\n     another.capability.${name}; This unresolvable capability likely is due to the use of an expression string in a configuration attribute that does not support expressions.\n\nThe appendPossibleProviderPoints method could handle that. If there are no possible provider points, report that, as it means something is odd beyond the use of the expression. Otherwise if there's an expression use the \"does not support expressions\" message. Otherwise report the provider points.", "url": "https://github.com/wildfly/wildfly-core/pull/4250#discussion_r450481384", "createdAt": "2020-07-06T21:09:23Z", "author": {"login": "bstansberry"}, "path": "controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java", "diffHunk": "@@ -3623,4 +3623,7 @@ OperationFailedRuntimeException capabilityAlreadyRegisteredInContext(String capa\n \n     @Message(id = 475, value = \"Value for attribute '%s' is invalid.\")\n     OperationFailedException invalidAttributeValue(String attributeName);\n+\n+    @Message(id = 476, value = \"Unsupported usage of expression:\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca9f1ad515da9ec15588d1648c4a96e386a359"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8508046ff90371a01a9228b4f78c0f3c6c5fe23d", "author": {"user": {"login": "lvydra", "name": null}}, "url": "https://github.com/wildfly/wildfly-core/commit/8508046ff90371a01a9228b4f78c0f3c6c5fe23d", "committedDate": "2020-07-13T13:30:45Z", "message": "[WFCORE-5010] Move to appendPossibleProviderPoints method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjM3ODc2", "url": "https://github.com/wildfly/wildfly-core/pull/4250#pullrequestreview-462637876", "createdAt": "2020-08-06T15:36:57Z", "commit": {"oid": "8508046ff90371a01a9228b4f78c0f3c6c5fe23d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}