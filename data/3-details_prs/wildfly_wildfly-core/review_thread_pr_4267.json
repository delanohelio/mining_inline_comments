{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Mzc0Mzcw", "number": 4267, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMjo0N1rOEUf3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMjo0N1rOEUf3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTI5MTM2OnYy", "diffSide": "RIGHT", "path": "elytron/src/main/java/org/wildfly/extension/elytron/PolicyDefinitions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMjo0N1rOG6vBhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo0MzoyNlrOG7U5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MTAyOQ==", "bodyText": "should this sys prop remain? or should it be discarded at some point?", "url": "https://github.com/wildfly/wildfly-core/pull/4267#discussion_r464241029", "createdAt": "2020-08-03T07:32:47Z", "author": {"login": "jmesnil"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/PolicyDefinitions.java", "diffHunk": "@@ -287,292 +276,131 @@ protected void recordCapabilitiesAndRequirements(OperationContext context, Attri\n \n     }\n \n-    private static Supplier<Policy> getPolicyProvider(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n-        Supplier<Policy> result = configureJaccPolicy(context, model, serviceBuilder);\n+    private static Consumer<Consumer<Policy>> getPolicyProvider(OperationContext context, ModelNode model) throws OperationFailedException {\n+        Consumer<Consumer<Policy>> result = configureJaccPolicy(context, model);\n         if (result == null) {\n             result = configureCustomPolicy(context, model);\n         }\n         return result;\n     }\n \n-    private static Supplier<Policy> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(CUSTOM_POLICY);\n \n         if (policyModel.isDefined()) {\n             String className = CustomPolicyDefinition.CLASS_NAME.resolveModelAttribute(context, policyModel).asString();\n             String module = CustomPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            return () -> newPolicy(className, module);\n+            return (t) -> {\n+                try {\n+                    t.accept(newPolicy(className, ClassLoadingAttributeDefinitions.resolveClassLoader(module)));\n+                } catch (ModuleLoadException e) {\n+                    throw ElytronSubsystemMessages.ROOT_LOGGER.unableToLoadModuleRuntime(module, e);\n+                }\n+            };\n         }\n \n         return null;\n     }\n \n-    private static Supplier<Policy> configureJaccPolicy(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureJaccPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(JACC_POLICY);\n \n         if (policyModel.isDefined()) {\n-            String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n-            String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n+            final String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final boolean defaultConfigurationFactory = configurationFactory.equals(JaccPolicyDefinition.CONFIGURATION_FACTORY.getDefaultValue().asString());\n             String module = JaccPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            serviceBuilder.addAliases(JACC_POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+            return new Consumer<Consumer<Policy>>() {\n \n-            return new Supplier<Policy>() {\n                 @Override\n-                public Policy get() {\n-                    if (configurationFactory != null) {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            AccessController.doPrivileged(setConfigurationProviderSystemProperty());\n-                        } else {\n-                            setConfigurationProviderSystemProperty().run();\n-                        }\n-                    }\n-\n-                    Policy policy = newPolicy(policyProvider, module);\n+                public void accept(Consumer<Policy> policyConsumer) {\n \n                     try {\n-                        PolicyContext.registerHandler(SecurityConstants.SUBJECT_CONTEXT_KEY, createSubjectPolicyContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityConstants.CALLBACK_HANDLER_KEY, createCallbackHandlerContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityIdentity.class.getName(), createSecurityIdentityContextHandler(), true);\n-                    } catch (PolicyContextException cause) {\n-                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n-                    }\n-\n-                    return policy;\n-                }\n-\n-                private PrivilegedAction<Void> setConfigurationProviderSystemProperty() {\n-                    return () -> {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            WildFlySecurityManager.setPropertyPrivileged(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        } else {\n-                            System.setProperty(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        }\n-                        return null;\n-                    };\n-                }\n+                        ClassLoader configuredClassLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n \n-                private PolicyContextHandler createSecurityIdentityContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        final String KEY = SecurityIdentity.class.getName();\n+                        Policy policy = newPolicy(policyProvider, configuredClassLoader);\n+                        policyConsumer.accept(policy);\n \n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityDomain securityDomain = doPrivileged((PrivilegedAction<SecurityDomain>) SecurityDomain::getCurrent);\n+                        doPrivileged((PrivilegedExceptionAction<PolicyConfigurationFactory>) () -> newPolicyConfigurationFactory(\n+                                configurationFactory,\n+                                defaultConfigurationFactory ? PolicyDefinitions.class.getClassLoader() : configuredClassLoader));\n \n-                                if (securityDomain == null) {\n-                                    return null;\n-                                }\n+                        Map<String, PolicyContextHandler> discoveredHandlers = discoverPolicyContextHandlers();\n \n-                                SecurityIdentity securityIdentity = securityDomain.getCurrentSecurityIdentity();\n-\n-                                if (securityIdentity != null) {\n-                                    return securityIdentity;\n-                                }\n-                            }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return new String[]{KEY};\n+                        registerHandler(discoveredHandlers, new SubjectPolicyContextHandler());\n+                        registerHandler(discoveredHandlers, new SecurityIdentityHandler());\n+                        for (Entry<String, PolicyContextHandler> entry : discoveredHandlers.entrySet()) {\n+                            PolicyContext.registerHandler(entry.getKey(), entry.getValue(), true);\n                         }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return getKeys()[0].equalsIgnoreCase(key);\n-                        }\n-                    };\n+                    } catch (Exception cause) {\n+                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n+                    }\n                 }\n \n-                private PolicyContextHandler createCallbackHandlerContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        CallbackHandlerPolicyContextHandler legacy = new CallbackHandlerPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            return legacy.getContext(key, data);\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n-                        }\n-\n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n+                private void registerHandler(Map<String, PolicyContextHandler> discoveredHandlers, PolicyContextHandler handler) throws PolicyContextException {\n+                    for (String key : handler.getKeys()) {\n+                        PolicyContextHandler discovered = discoveredHandlers.remove(key);\n+                        if (discovered != null) {\n+                            ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Registering DelegatingPolicyContextHandler for key '%s'.\", key);\n+                            PolicyContext.registerHandler(key, discovered != null ? new DelegatingPolicyContextHandler(key, handler, discovered) : handler, true);\n+                        } else {\n+                            PolicyContext.registerHandler(key, handler, true);\n                         }\n-                    };\n+                    }\n                 }\n \n-                private PolicyContextHandler createSubjectPolicyContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        SubjectPolicyContextHandler legacy = new SubjectPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityIdentity securityIdentity = (SecurityIdentity) PolicyContext.getContext(SecurityIdentity.class.getName());\n-\n-                                if (securityIdentity == null) {\n-                                    return legacy.getContext(key, data);\n-                                }\n-\n-                                return SubjectUtil.fromSecurityIdentity(securityIdentity);\n+                private Map<String, PolicyContextHandler> discoverPolicyContextHandlers() throws PolicyContextException {\n+                    Map<String, PolicyContextHandler> handlerMap = new HashMap<>();\n+                    ServiceLoader<PolicyContextHandler> serviceLoader = ServiceLoader.load(PolicyContextHandler.class, PolicyDefinitions.class.getClassLoader());\n+                    for (PolicyContextHandler handler : serviceLoader) {\n+                        for (String key : handler.getKeys()) {\n+                            if (handlerMap.put(key, handler) != null) {\n+                                throw ElytronSubsystemMessages.ROOT_LOGGER.duplicatePolicyContextHandler(key);\n+                            }\n+                            if (ElytronSubsystemMessages.ROOT_LOGGER.isTraceEnabled()) {\n+                                ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Discovered PolicyContextHandler '%s' for key '%s'.\", handler.getClass().getName(), key);\n                             }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n                         }\n+                    }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n-                        }\n-                    };\n+                    return handlerMap;\n                 }\n+\n             };\n         }\n \n         return null;\n     }\n \n-    private static Policy newPolicy(String className, String module) {\n+    private static Policy newPolicy(String className, ClassLoader classLoader) {\n         try {\n-            ClassLoader classLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n             Object policy = classLoader.loadClass(className).newInstance();\n             return Policy.class.cast(policy);\n         } catch (Exception e) {\n             throw ElytronSubsystemMessages.ROOT_LOGGER.failedToCreatePolicy(className, e);\n         }\n     }\n \n-    /**\n-     * Utilities for dealing with {@link Subject}.\n-     *\n-     * @author <a href=\"mailto:sguilhen@redhat.com\">Stefan Guilhen</a>\n-     */\n-    static final class SubjectUtil {\n-\n-        /**\n-         * Converts the supplied {@link SecurityIdentity} into a {@link Subject}.\n-         *\n-         * @param securityIdentity the {@link SecurityIdentity} to be converted.\n-         * @return the constructed {@link Subject} instance.\n-         */\n-        static Subject fromSecurityIdentity(final SecurityIdentity securityIdentity) {\n-            Assert.checkNotNullParam(\"securityIdentity\", securityIdentity);\n-            Subject subject = new Subject();\n-            subject.getPrincipals().add(securityIdentity.getPrincipal());\n-\n-            // add the 'Roles' group to the subject containing the identity's mapped roles.\n-            Group rolesGroup = new SimpleGroup(\"Roles\");\n-            for (String role : securityIdentity.getRoles()) {\n-                rolesGroup.addMember(new NamePrincipal(role));\n-            }\n-            subject.getPrincipals().add(rolesGroup);\n-\n-            // add a 'CallerPrincipal' group containing the identity's principal.\n-            Group callerPrincipalGroup = new SimpleGroup(\"CallerPrincipal\");\n-            callerPrincipalGroup.addMember(securityIdentity.getPrincipal());\n-            subject.getPrincipals().add(callerPrincipalGroup);\n-\n-            // process the identity's public and private credentials.\n-            for (Credential credential : securityIdentity.getPublicCredentials()) {\n-                if (credential instanceof PublicKeyCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(PublicKeyCredential.class).getPublicKey());\n-                }\n-                else if (credential instanceof X509CertificateChainPublicCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(X509CertificateChainPublicCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    subject.getPublicCredentials().add(credential);\n-                }\n-            }\n+    private static PolicyConfigurationFactory newPolicyConfigurationFactory(String className, ClassLoader classLoader) throws PolicyContextException, ClassNotFoundException {\n+        final ClassLoader original = Thread.currentThread().getContextClassLoader();\n \n-            for (Credential credential : doPrivileged((PrivilegedAction<IdentityCredentials>) securityIdentity::getPrivateCredentials)) {\n-                if (credential instanceof PasswordCredential) {\n-                    addPrivateCredential(subject, credential.castAs(PasswordCredential.class).getPassword());\n-                }\n-                else if (credential instanceof SecretKeyCredential) {\n-                    addPrivateCredential(subject, credential.castAs(SecretKeyCredential.class).getSecretKey());\n-                }\n-                else if (credential instanceof KeyPairCredential) {\n-                    addPrivateCredential(subject, credential.castAs(KeyPairCredential.class).getKeyPair());\n-                }\n-                else if (credential instanceof X509CertificateChainPrivateCredential) {\n-                    addPrivateCredential(subject, credential.castAs(X509CertificateChainPrivateCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    addPrivateCredential(subject, credential);\n-                }\n+        try {\n+            Thread.currentThread().setContextClassLoader(classLoader);\n+            System.setProperty(PolicyConfigurationFactory.class.getName() + \".provider\", className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8180e29c479bf8f65b9ddf7814aebd6dd4ff5f4c"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MTcyOA==", "bodyText": "TBH after setting it and triggering the initialisation clearing it has no effect, without restarting the process it is not possible to clear the previous result.\nTBH compared to some of the other specs this seems to be a gap in JACC that was can't manually swap in a different implementation / instance.", "url": "https://github.com/wildfly/wildfly-core/pull/4267#discussion_r464371728", "createdAt": "2020-08-03T12:07:58Z", "author": {"login": "darranl"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/PolicyDefinitions.java", "diffHunk": "@@ -287,292 +276,131 @@ protected void recordCapabilitiesAndRequirements(OperationContext context, Attri\n \n     }\n \n-    private static Supplier<Policy> getPolicyProvider(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n-        Supplier<Policy> result = configureJaccPolicy(context, model, serviceBuilder);\n+    private static Consumer<Consumer<Policy>> getPolicyProvider(OperationContext context, ModelNode model) throws OperationFailedException {\n+        Consumer<Consumer<Policy>> result = configureJaccPolicy(context, model);\n         if (result == null) {\n             result = configureCustomPolicy(context, model);\n         }\n         return result;\n     }\n \n-    private static Supplier<Policy> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(CUSTOM_POLICY);\n \n         if (policyModel.isDefined()) {\n             String className = CustomPolicyDefinition.CLASS_NAME.resolveModelAttribute(context, policyModel).asString();\n             String module = CustomPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            return () -> newPolicy(className, module);\n+            return (t) -> {\n+                try {\n+                    t.accept(newPolicy(className, ClassLoadingAttributeDefinitions.resolveClassLoader(module)));\n+                } catch (ModuleLoadException e) {\n+                    throw ElytronSubsystemMessages.ROOT_LOGGER.unableToLoadModuleRuntime(module, e);\n+                }\n+            };\n         }\n \n         return null;\n     }\n \n-    private static Supplier<Policy> configureJaccPolicy(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureJaccPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(JACC_POLICY);\n \n         if (policyModel.isDefined()) {\n-            String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n-            String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n+            final String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final boolean defaultConfigurationFactory = configurationFactory.equals(JaccPolicyDefinition.CONFIGURATION_FACTORY.getDefaultValue().asString());\n             String module = JaccPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            serviceBuilder.addAliases(JACC_POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+            return new Consumer<Consumer<Policy>>() {\n \n-            return new Supplier<Policy>() {\n                 @Override\n-                public Policy get() {\n-                    if (configurationFactory != null) {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            AccessController.doPrivileged(setConfigurationProviderSystemProperty());\n-                        } else {\n-                            setConfigurationProviderSystemProperty().run();\n-                        }\n-                    }\n-\n-                    Policy policy = newPolicy(policyProvider, module);\n+                public void accept(Consumer<Policy> policyConsumer) {\n \n                     try {\n-                        PolicyContext.registerHandler(SecurityConstants.SUBJECT_CONTEXT_KEY, createSubjectPolicyContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityConstants.CALLBACK_HANDLER_KEY, createCallbackHandlerContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityIdentity.class.getName(), createSecurityIdentityContextHandler(), true);\n-                    } catch (PolicyContextException cause) {\n-                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n-                    }\n-\n-                    return policy;\n-                }\n-\n-                private PrivilegedAction<Void> setConfigurationProviderSystemProperty() {\n-                    return () -> {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            WildFlySecurityManager.setPropertyPrivileged(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        } else {\n-                            System.setProperty(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        }\n-                        return null;\n-                    };\n-                }\n+                        ClassLoader configuredClassLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n \n-                private PolicyContextHandler createSecurityIdentityContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        final String KEY = SecurityIdentity.class.getName();\n+                        Policy policy = newPolicy(policyProvider, configuredClassLoader);\n+                        policyConsumer.accept(policy);\n \n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityDomain securityDomain = doPrivileged((PrivilegedAction<SecurityDomain>) SecurityDomain::getCurrent);\n+                        doPrivileged((PrivilegedExceptionAction<PolicyConfigurationFactory>) () -> newPolicyConfigurationFactory(\n+                                configurationFactory,\n+                                defaultConfigurationFactory ? PolicyDefinitions.class.getClassLoader() : configuredClassLoader));\n \n-                                if (securityDomain == null) {\n-                                    return null;\n-                                }\n+                        Map<String, PolicyContextHandler> discoveredHandlers = discoverPolicyContextHandlers();\n \n-                                SecurityIdentity securityIdentity = securityDomain.getCurrentSecurityIdentity();\n-\n-                                if (securityIdentity != null) {\n-                                    return securityIdentity;\n-                                }\n-                            }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return new String[]{KEY};\n+                        registerHandler(discoveredHandlers, new SubjectPolicyContextHandler());\n+                        registerHandler(discoveredHandlers, new SecurityIdentityHandler());\n+                        for (Entry<String, PolicyContextHandler> entry : discoveredHandlers.entrySet()) {\n+                            PolicyContext.registerHandler(entry.getKey(), entry.getValue(), true);\n                         }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return getKeys()[0].equalsIgnoreCase(key);\n-                        }\n-                    };\n+                    } catch (Exception cause) {\n+                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n+                    }\n                 }\n \n-                private PolicyContextHandler createCallbackHandlerContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        CallbackHandlerPolicyContextHandler legacy = new CallbackHandlerPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            return legacy.getContext(key, data);\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n-                        }\n-\n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n+                private void registerHandler(Map<String, PolicyContextHandler> discoveredHandlers, PolicyContextHandler handler) throws PolicyContextException {\n+                    for (String key : handler.getKeys()) {\n+                        PolicyContextHandler discovered = discoveredHandlers.remove(key);\n+                        if (discovered != null) {\n+                            ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Registering DelegatingPolicyContextHandler for key '%s'.\", key);\n+                            PolicyContext.registerHandler(key, discovered != null ? new DelegatingPolicyContextHandler(key, handler, discovered) : handler, true);\n+                        } else {\n+                            PolicyContext.registerHandler(key, handler, true);\n                         }\n-                    };\n+                    }\n                 }\n \n-                private PolicyContextHandler createSubjectPolicyContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        SubjectPolicyContextHandler legacy = new SubjectPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityIdentity securityIdentity = (SecurityIdentity) PolicyContext.getContext(SecurityIdentity.class.getName());\n-\n-                                if (securityIdentity == null) {\n-                                    return legacy.getContext(key, data);\n-                                }\n-\n-                                return SubjectUtil.fromSecurityIdentity(securityIdentity);\n+                private Map<String, PolicyContextHandler> discoverPolicyContextHandlers() throws PolicyContextException {\n+                    Map<String, PolicyContextHandler> handlerMap = new HashMap<>();\n+                    ServiceLoader<PolicyContextHandler> serviceLoader = ServiceLoader.load(PolicyContextHandler.class, PolicyDefinitions.class.getClassLoader());\n+                    for (PolicyContextHandler handler : serviceLoader) {\n+                        for (String key : handler.getKeys()) {\n+                            if (handlerMap.put(key, handler) != null) {\n+                                throw ElytronSubsystemMessages.ROOT_LOGGER.duplicatePolicyContextHandler(key);\n+                            }\n+                            if (ElytronSubsystemMessages.ROOT_LOGGER.isTraceEnabled()) {\n+                                ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Discovered PolicyContextHandler '%s' for key '%s'.\", handler.getClass().getName(), key);\n                             }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n                         }\n+                    }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n-                        }\n-                    };\n+                    return handlerMap;\n                 }\n+\n             };\n         }\n \n         return null;\n     }\n \n-    private static Policy newPolicy(String className, String module) {\n+    private static Policy newPolicy(String className, ClassLoader classLoader) {\n         try {\n-            ClassLoader classLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n             Object policy = classLoader.loadClass(className).newInstance();\n             return Policy.class.cast(policy);\n         } catch (Exception e) {\n             throw ElytronSubsystemMessages.ROOT_LOGGER.failedToCreatePolicy(className, e);\n         }\n     }\n \n-    /**\n-     * Utilities for dealing with {@link Subject}.\n-     *\n-     * @author <a href=\"mailto:sguilhen@redhat.com\">Stefan Guilhen</a>\n-     */\n-    static final class SubjectUtil {\n-\n-        /**\n-         * Converts the supplied {@link SecurityIdentity} into a {@link Subject}.\n-         *\n-         * @param securityIdentity the {@link SecurityIdentity} to be converted.\n-         * @return the constructed {@link Subject} instance.\n-         */\n-        static Subject fromSecurityIdentity(final SecurityIdentity securityIdentity) {\n-            Assert.checkNotNullParam(\"securityIdentity\", securityIdentity);\n-            Subject subject = new Subject();\n-            subject.getPrincipals().add(securityIdentity.getPrincipal());\n-\n-            // add the 'Roles' group to the subject containing the identity's mapped roles.\n-            Group rolesGroup = new SimpleGroup(\"Roles\");\n-            for (String role : securityIdentity.getRoles()) {\n-                rolesGroup.addMember(new NamePrincipal(role));\n-            }\n-            subject.getPrincipals().add(rolesGroup);\n-\n-            // add a 'CallerPrincipal' group containing the identity's principal.\n-            Group callerPrincipalGroup = new SimpleGroup(\"CallerPrincipal\");\n-            callerPrincipalGroup.addMember(securityIdentity.getPrincipal());\n-            subject.getPrincipals().add(callerPrincipalGroup);\n-\n-            // process the identity's public and private credentials.\n-            for (Credential credential : securityIdentity.getPublicCredentials()) {\n-                if (credential instanceof PublicKeyCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(PublicKeyCredential.class).getPublicKey());\n-                }\n-                else if (credential instanceof X509CertificateChainPublicCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(X509CertificateChainPublicCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    subject.getPublicCredentials().add(credential);\n-                }\n-            }\n+    private static PolicyConfigurationFactory newPolicyConfigurationFactory(String className, ClassLoader classLoader) throws PolicyContextException, ClassNotFoundException {\n+        final ClassLoader original = Thread.currentThread().getContextClassLoader();\n \n-            for (Credential credential : doPrivileged((PrivilegedAction<IdentityCredentials>) securityIdentity::getPrivateCredentials)) {\n-                if (credential instanceof PasswordCredential) {\n-                    addPrivateCredential(subject, credential.castAs(PasswordCredential.class).getPassword());\n-                }\n-                else if (credential instanceof SecretKeyCredential) {\n-                    addPrivateCredential(subject, credential.castAs(SecretKeyCredential.class).getSecretKey());\n-                }\n-                else if (credential instanceof KeyPairCredential) {\n-                    addPrivateCredential(subject, credential.castAs(KeyPairCredential.class).getKeyPair());\n-                }\n-                else if (credential instanceof X509CertificateChainPrivateCredential) {\n-                    addPrivateCredential(subject, credential.castAs(X509CertificateChainPrivateCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    addPrivateCredential(subject, credential);\n-                }\n+        try {\n+            Thread.currentThread().setContextClassLoader(classLoader);\n+            System.setProperty(PolicyConfigurationFactory.class.getName() + \".provider\", className);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MTAyOQ=="}, "originalCommit": {"oid": "8180e29c479bf8f65b9ddf7814aebd6dd4ff5f4c"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MTU0OA==", "bodyText": "ok, thanks for the explanation", "url": "https://github.com/wildfly/wildfly-core/pull/4267#discussion_r464861548", "createdAt": "2020-08-04T07:43:26Z", "author": {"login": "jmesnil"}, "path": "elytron/src/main/java/org/wildfly/extension/elytron/PolicyDefinitions.java", "diffHunk": "@@ -287,292 +276,131 @@ protected void recordCapabilitiesAndRequirements(OperationContext context, Attri\n \n     }\n \n-    private static Supplier<Policy> getPolicyProvider(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n-        Supplier<Policy> result = configureJaccPolicy(context, model, serviceBuilder);\n+    private static Consumer<Consumer<Policy>> getPolicyProvider(OperationContext context, ModelNode model) throws OperationFailedException {\n+        Consumer<Consumer<Policy>> result = configureJaccPolicy(context, model);\n         if (result == null) {\n             result = configureCustomPolicy(context, model);\n         }\n         return result;\n     }\n \n-    private static Supplier<Policy> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureCustomPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(CUSTOM_POLICY);\n \n         if (policyModel.isDefined()) {\n             String className = CustomPolicyDefinition.CLASS_NAME.resolveModelAttribute(context, policyModel).asString();\n             String module = CustomPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            return () -> newPolicy(className, module);\n+            return (t) -> {\n+                try {\n+                    t.accept(newPolicy(className, ClassLoadingAttributeDefinitions.resolveClassLoader(module)));\n+                } catch (ModuleLoadException e) {\n+                    throw ElytronSubsystemMessages.ROOT_LOGGER.unableToLoadModuleRuntime(module, e);\n+                }\n+            };\n         }\n \n         return null;\n     }\n \n-    private static Supplier<Policy> configureJaccPolicy(OperationContext context, ModelNode model, ServiceBuilder<Policy> serviceBuilder) throws OperationFailedException {\n+    private static Consumer<Consumer<Policy>> configureJaccPolicy(OperationContext context, ModelNode model) throws OperationFailedException {\n         ModelNode policyModel = model.get(JACC_POLICY);\n \n         if (policyModel.isDefined()) {\n-            String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n-            String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final String policyProvider = JaccPolicyDefinition.POLICY_PROVIDER.resolveModelAttribute(context, policyModel).asString();\n+            final String configurationFactory = JaccPolicyDefinition.CONFIGURATION_FACTORY.resolveModelAttribute(context, policyModel).asString();\n+            final boolean defaultConfigurationFactory = configurationFactory.equals(JaccPolicyDefinition.CONFIGURATION_FACTORY.getDefaultValue().asString());\n             String module = JaccPolicyDefinition.MODULE.resolveModelAttribute(context, policyModel).asStringOrNull();\n \n-            serviceBuilder.addAliases(JACC_POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+            return new Consumer<Consumer<Policy>>() {\n \n-            return new Supplier<Policy>() {\n                 @Override\n-                public Policy get() {\n-                    if (configurationFactory != null) {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            AccessController.doPrivileged(setConfigurationProviderSystemProperty());\n-                        } else {\n-                            setConfigurationProviderSystemProperty().run();\n-                        }\n-                    }\n-\n-                    Policy policy = newPolicy(policyProvider, module);\n+                public void accept(Consumer<Policy> policyConsumer) {\n \n                     try {\n-                        PolicyContext.registerHandler(SecurityConstants.SUBJECT_CONTEXT_KEY, createSubjectPolicyContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityConstants.CALLBACK_HANDLER_KEY, createCallbackHandlerContextHandler(), true);\n-                        PolicyContext.registerHandler(SecurityIdentity.class.getName(), createSecurityIdentityContextHandler(), true);\n-                    } catch (PolicyContextException cause) {\n-                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n-                    }\n-\n-                    return policy;\n-                }\n-\n-                private PrivilegedAction<Void> setConfigurationProviderSystemProperty() {\n-                    return () -> {\n-                        if (WildFlySecurityManager.isChecking()) {\n-                            WildFlySecurityManager.setPropertyPrivileged(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        } else {\n-                            System.setProperty(\"javax.security.jacc.PolicyConfigurationFactory.provider\", configurationFactory);\n-                        }\n-                        return null;\n-                    };\n-                }\n+                        ClassLoader configuredClassLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n \n-                private PolicyContextHandler createSecurityIdentityContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        final String KEY = SecurityIdentity.class.getName();\n+                        Policy policy = newPolicy(policyProvider, configuredClassLoader);\n+                        policyConsumer.accept(policy);\n \n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityDomain securityDomain = doPrivileged((PrivilegedAction<SecurityDomain>) SecurityDomain::getCurrent);\n+                        doPrivileged((PrivilegedExceptionAction<PolicyConfigurationFactory>) () -> newPolicyConfigurationFactory(\n+                                configurationFactory,\n+                                defaultConfigurationFactory ? PolicyDefinitions.class.getClassLoader() : configuredClassLoader));\n \n-                                if (securityDomain == null) {\n-                                    return null;\n-                                }\n+                        Map<String, PolicyContextHandler> discoveredHandlers = discoverPolicyContextHandlers();\n \n-                                SecurityIdentity securityIdentity = securityDomain.getCurrentSecurityIdentity();\n-\n-                                if (securityIdentity != null) {\n-                                    return securityIdentity;\n-                                }\n-                            }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return new String[]{KEY};\n+                        registerHandler(discoveredHandlers, new SubjectPolicyContextHandler());\n+                        registerHandler(discoveredHandlers, new SecurityIdentityHandler());\n+                        for (Entry<String, PolicyContextHandler> entry : discoveredHandlers.entrySet()) {\n+                            PolicyContext.registerHandler(entry.getKey(), entry.getValue(), true);\n                         }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return getKeys()[0].equalsIgnoreCase(key);\n-                        }\n-                    };\n+                    } catch (Exception cause) {\n+                        throw ElytronSubsystemMessages.ROOT_LOGGER.failedToRegisterPolicyHandlers(cause);\n+                    }\n                 }\n \n-                private PolicyContextHandler createCallbackHandlerContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        CallbackHandlerPolicyContextHandler legacy = new CallbackHandlerPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            return legacy.getContext(key, data);\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n-                        }\n-\n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n+                private void registerHandler(Map<String, PolicyContextHandler> discoveredHandlers, PolicyContextHandler handler) throws PolicyContextException {\n+                    for (String key : handler.getKeys()) {\n+                        PolicyContextHandler discovered = discoveredHandlers.remove(key);\n+                        if (discovered != null) {\n+                            ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Registering DelegatingPolicyContextHandler for key '%s'.\", key);\n+                            PolicyContext.registerHandler(key, discovered != null ? new DelegatingPolicyContextHandler(key, handler, discovered) : handler, true);\n+                        } else {\n+                            PolicyContext.registerHandler(key, handler, true);\n                         }\n-                    };\n+                    }\n                 }\n \n-                private PolicyContextHandler createSubjectPolicyContextHandler() {\n-                    return new PolicyContextHandler() {\n-                        // in case applications are using legacy (PicketBox) security infrastructure\n-                        SubjectPolicyContextHandler legacy = new SubjectPolicyContextHandler();\n-\n-                        @Override\n-                        public Object getContext(String key, Object data) throws PolicyContextException {\n-                            if (supports(key)) {\n-                                SecurityIdentity securityIdentity = (SecurityIdentity) PolicyContext.getContext(SecurityIdentity.class.getName());\n-\n-                                if (securityIdentity == null) {\n-                                    return legacy.getContext(key, data);\n-                                }\n-\n-                                return SubjectUtil.fromSecurityIdentity(securityIdentity);\n+                private Map<String, PolicyContextHandler> discoverPolicyContextHandlers() throws PolicyContextException {\n+                    Map<String, PolicyContextHandler> handlerMap = new HashMap<>();\n+                    ServiceLoader<PolicyContextHandler> serviceLoader = ServiceLoader.load(PolicyContextHandler.class, PolicyDefinitions.class.getClassLoader());\n+                    for (PolicyContextHandler handler : serviceLoader) {\n+                        for (String key : handler.getKeys()) {\n+                            if (handlerMap.put(key, handler) != null) {\n+                                throw ElytronSubsystemMessages.ROOT_LOGGER.duplicatePolicyContextHandler(key);\n+                            }\n+                            if (ElytronSubsystemMessages.ROOT_LOGGER.isTraceEnabled()) {\n+                                ElytronSubsystemMessages.ROOT_LOGGER.tracef(\"Discovered PolicyContextHandler '%s' for key '%s'.\", handler.getClass().getName(), key);\n                             }\n-\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public String[] getKeys() throws PolicyContextException {\n-                            return legacy.getKeys();\n                         }\n+                    }\n \n-                        @Override\n-                        public boolean supports(String key) throws PolicyContextException {\n-                            return legacy.supports(key);\n-                        }\n-                    };\n+                    return handlerMap;\n                 }\n+\n             };\n         }\n \n         return null;\n     }\n \n-    private static Policy newPolicy(String className, String module) {\n+    private static Policy newPolicy(String className, ClassLoader classLoader) {\n         try {\n-            ClassLoader classLoader = ClassLoadingAttributeDefinitions.resolveClassLoader(module);\n             Object policy = classLoader.loadClass(className).newInstance();\n             return Policy.class.cast(policy);\n         } catch (Exception e) {\n             throw ElytronSubsystemMessages.ROOT_LOGGER.failedToCreatePolicy(className, e);\n         }\n     }\n \n-    /**\n-     * Utilities for dealing with {@link Subject}.\n-     *\n-     * @author <a href=\"mailto:sguilhen@redhat.com\">Stefan Guilhen</a>\n-     */\n-    static final class SubjectUtil {\n-\n-        /**\n-         * Converts the supplied {@link SecurityIdentity} into a {@link Subject}.\n-         *\n-         * @param securityIdentity the {@link SecurityIdentity} to be converted.\n-         * @return the constructed {@link Subject} instance.\n-         */\n-        static Subject fromSecurityIdentity(final SecurityIdentity securityIdentity) {\n-            Assert.checkNotNullParam(\"securityIdentity\", securityIdentity);\n-            Subject subject = new Subject();\n-            subject.getPrincipals().add(securityIdentity.getPrincipal());\n-\n-            // add the 'Roles' group to the subject containing the identity's mapped roles.\n-            Group rolesGroup = new SimpleGroup(\"Roles\");\n-            for (String role : securityIdentity.getRoles()) {\n-                rolesGroup.addMember(new NamePrincipal(role));\n-            }\n-            subject.getPrincipals().add(rolesGroup);\n-\n-            // add a 'CallerPrincipal' group containing the identity's principal.\n-            Group callerPrincipalGroup = new SimpleGroup(\"CallerPrincipal\");\n-            callerPrincipalGroup.addMember(securityIdentity.getPrincipal());\n-            subject.getPrincipals().add(callerPrincipalGroup);\n-\n-            // process the identity's public and private credentials.\n-            for (Credential credential : securityIdentity.getPublicCredentials()) {\n-                if (credential instanceof PublicKeyCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(PublicKeyCredential.class).getPublicKey());\n-                }\n-                else if (credential instanceof X509CertificateChainPublicCredential) {\n-                    subject.getPublicCredentials().add(credential.castAs(X509CertificateChainPublicCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    subject.getPublicCredentials().add(credential);\n-                }\n-            }\n+    private static PolicyConfigurationFactory newPolicyConfigurationFactory(String className, ClassLoader classLoader) throws PolicyContextException, ClassNotFoundException {\n+        final ClassLoader original = Thread.currentThread().getContextClassLoader();\n \n-            for (Credential credential : doPrivileged((PrivilegedAction<IdentityCredentials>) securityIdentity::getPrivateCredentials)) {\n-                if (credential instanceof PasswordCredential) {\n-                    addPrivateCredential(subject, credential.castAs(PasswordCredential.class).getPassword());\n-                }\n-                else if (credential instanceof SecretKeyCredential) {\n-                    addPrivateCredential(subject, credential.castAs(SecretKeyCredential.class).getSecretKey());\n-                }\n-                else if (credential instanceof KeyPairCredential) {\n-                    addPrivateCredential(subject, credential.castAs(KeyPairCredential.class).getKeyPair());\n-                }\n-                else if (credential instanceof X509CertificateChainPrivateCredential) {\n-                    addPrivateCredential(subject, credential.castAs(X509CertificateChainPrivateCredential.class).getCertificateChain());\n-                }\n-                else {\n-                    addPrivateCredential(subject, credential);\n-                }\n+        try {\n+            Thread.currentThread().setContextClassLoader(classLoader);\n+            System.setProperty(PolicyConfigurationFactory.class.getName() + \".provider\", className);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MTAyOQ=="}, "originalCommit": {"oid": "8180e29c479bf8f65b9ddf7814aebd6dd4ff5f4c"}, "originalPosition": 428}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3833, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}