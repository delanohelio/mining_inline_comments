{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTg1ODQy", "number": 4303, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozMTo1MVrOEaAX4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MzoyNFrOEaAtpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA0NTQ0OnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozMTo1MVrOHDKPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0MDoyNVrOHDNSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NTQ2MQ==", "bodyText": "Isn't the .get(RESULT) part redundant as we don't use that value anywhere anymore?", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473075461", "createdAt": "2020-08-19T14:31:51Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -552,6 +616,54 @@ private String addKeyStoreWithCredentialReference(String keyStoreName, String st\n         }\n     }\n \n+    private void testAddKeyStoreWithInvalidCredentialReference(String keyStoreName, String store, String alias, String secret) throws Exception {\n+        Path resources = Paths.get(KeyStoresTestCase.class.getResource(\".\").toURI());\n+        ModelNode operation = new ModelNode();\n+        operation.get(ClientConstants.OPERATION_HEADERS).get(\"allow-resource-service-restart\").set(Boolean.TRUE);\n+        operation.get(ClientConstants.OP_ADDR).add(\"subsystem\",\"elytron\").add(\"key-store\", keyStoreName);\n+        operation.get(ClientConstants.OP).set(ClientConstants.ADD);\n+        operation.get(ElytronDescriptionConstants.PATH).set(resources + \"/test.keystore\");\n+        operation.get(ElytronDescriptionConstants.TYPE).set(\"JKS\");\n+        if (store != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(STORE).set(store);\n+        }\n+        if (alias != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(ALIAS).set(alias);\n+        }\n+        if (secret != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(CLEAR_TEXT).set(secret);\n+        }\n+\n+        ModelNode response = services.executeOperation(operation);\n+        assertEquals(FAILED, response.get(OUTCOME).asString());\n+        assertTrue(response.get(FAILURE_DESCRIPTION).asString().contains(CREDENTIAL_REFERENCE));\n+    }\n+\n+    private void testWriteCredentialReferenceAttribute(String resource, String resourceName, String store, String alias, String secret, boolean assertFailed) {\n+        ModelNode operation = new ModelNode();\n+        operation.get(ClientConstants.OP_ADDR).add(\"subsystem\", \"elytron\").add(resource, resourceName);\n+        operation.get(ClientConstants.OP).set(ClientConstants.WRITE_ATTRIBUTE_OPERATION);\n+        operation.get(ClientConstants.NAME).set(CREDENTIAL_REFERENCE);\n+        ModelNode credentialReference = new ModelNode();\n+        if (store != null) {\n+            credentialReference.get(STORE).set(store);\n+        }\n+        if (alias != null) {\n+            credentialReference.get(ALIAS).set(alias);\n+        }\n+        if (secret != null) {\n+            credentialReference.get(CLEAR_TEXT).set(secret);\n+        }\n+        operation.get(ClientConstants.VALUE).set(credentialReference);\n+        ModelNode response = services.executeOperation(operation);\n+        if (assertFailed) {\n+            assertEquals(FAILED, response.get(OUTCOME).asString());\n+            assertTrue(response.get(FAILURE_DESCRIPTION).asString().contains(CREDENTIAL_REFERENCE));\n+        } else {\n+            assertSuccess(response).get(RESULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNTU3Ng==", "bodyText": "Good catch, this was from copy/pasting from somewhere else. Fixed now.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473125576", "createdAt": "2020-08-19T15:40:25Z", "author": {"login": "fjuma"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -552,6 +616,54 @@ private String addKeyStoreWithCredentialReference(String keyStoreName, String st\n         }\n     }\n \n+    private void testAddKeyStoreWithInvalidCredentialReference(String keyStoreName, String store, String alias, String secret) throws Exception {\n+        Path resources = Paths.get(KeyStoresTestCase.class.getResource(\".\").toURI());\n+        ModelNode operation = new ModelNode();\n+        operation.get(ClientConstants.OPERATION_HEADERS).get(\"allow-resource-service-restart\").set(Boolean.TRUE);\n+        operation.get(ClientConstants.OP_ADDR).add(\"subsystem\",\"elytron\").add(\"key-store\", keyStoreName);\n+        operation.get(ClientConstants.OP).set(ClientConstants.ADD);\n+        operation.get(ElytronDescriptionConstants.PATH).set(resources + \"/test.keystore\");\n+        operation.get(ElytronDescriptionConstants.TYPE).set(\"JKS\");\n+        if (store != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(STORE).set(store);\n+        }\n+        if (alias != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(ALIAS).set(alias);\n+        }\n+        if (secret != null) {\n+            operation.get(CredentialReference.CREDENTIAL_REFERENCE).get(CLEAR_TEXT).set(secret);\n+        }\n+\n+        ModelNode response = services.executeOperation(operation);\n+        assertEquals(FAILED, response.get(OUTCOME).asString());\n+        assertTrue(response.get(FAILURE_DESCRIPTION).asString().contains(CREDENTIAL_REFERENCE));\n+    }\n+\n+    private void testWriteCredentialReferenceAttribute(String resource, String resourceName, String store, String alias, String secret, boolean assertFailed) {\n+        ModelNode operation = new ModelNode();\n+        operation.get(ClientConstants.OP_ADDR).add(\"subsystem\", \"elytron\").add(resource, resourceName);\n+        operation.get(ClientConstants.OP).set(ClientConstants.WRITE_ATTRIBUTE_OPERATION);\n+        operation.get(ClientConstants.NAME).set(CREDENTIAL_REFERENCE);\n+        ModelNode credentialReference = new ModelNode();\n+        if (store != null) {\n+            credentialReference.get(STORE).set(store);\n+        }\n+        if (alias != null) {\n+            credentialReference.get(ALIAS).set(alias);\n+        }\n+        if (secret != null) {\n+            credentialReference.get(CLEAR_TEXT).set(secret);\n+        }\n+        operation.get(ClientConstants.VALUE).set(credentialReference);\n+        ModelNode response = services.executeOperation(operation);\n+        if (assertFailed) {\n+            assertEquals(FAILED, response.get(OUTCOME).asString());\n+            assertTrue(response.get(FAILURE_DESCRIPTION).asString().contains(CREDENTIAL_REFERENCE));\n+        } else {\n+            assertSuccess(response).get(RESULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NTQ2MQ=="}, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA1NTkyOnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozNDowM1rOHDKVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0MToxMVrOHDNUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NzE3OA==", "bodyText": "Could be simplified to assertNull.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473077178", "createdAt": "2020-08-19T14:34:03Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);\n+            assertEquals(password, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNjA3OA==", "bodyText": "Fixed all of these.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473126078", "createdAt": "2020-08-19T15:41:11Z", "author": {"login": "fjuma"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);\n+            assertEquals(password, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NzE3OA=="}, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA3MjQ2OnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozNzoxNFrOHDKfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0MToxN1rOHDNU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3OTczNg==", "bodyText": "We could use password variable instead of \"secret\" string.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473079736", "createdAt": "2020-08-19T14:37:14Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNjEzMw==", "bodyText": "Fixed.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473126133", "createdAt": "2020-08-19T15:41:17Z", "author": {"login": "fjuma"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3OTczNg=="}, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA4MjA0OnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxOVrOHDKl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxOVrOHDKl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTMyNQ==", "bodyText": "Could be simplified to assertNull.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473081325", "createdAt": "2020-08-19T14:39:19Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);\n+            assertEquals(password, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithStoreOnly() throws Exception {\n+        try {\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, NON_EMPTY_CS_NAME, null, null, true);\n+\n+            // no changes to credential-reference attribute\n+            assertEquals(null, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA5MTIyOnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MToyMFrOHDKrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MToyMFrOHDKrnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4Mjc4Mw==", "bodyText": "Could be simplified to assertNull.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473082783", "createdAt": "2020-08-19T14:41:20Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);\n+            assertEquals(password, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithStoreOnly() throws Exception {\n+        try {\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, NON_EMPTY_CS_NAME, null, null, true);\n+\n+            // no changes to credential-reference attribute\n+            assertEquals(null, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(EXISTING_ALIAS, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+            assertEquals(NON_EMPTY_CS_NAME, readAttribute(KS_NAME, STORE_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithAliasOnly() throws Exception {\n+        try {\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, null, NEW_ALIAS, null, true);\n+\n+            // no changes to credential-reference attribute\n+            assertEquals(null, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzEwMTE2OnYy", "diffSide": "RIGHT", "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MzoyNVrOHDKxxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MzoyNVrOHDKxxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NDM1Nw==", "bodyText": "These two could be simplified to assertNull.", "url": "https://github.com/wildfly/wildfly-core/pull/4303#discussion_r473084357", "createdAt": "2020-08-19T14:43:25Z", "author": {"login": "jstourac"}, "path": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUpdatesTestCase.java", "diffHunk": "@@ -503,6 +496,77 @@ public void testFailedRuntimeOperationWithClearTextAttributeOnly() throws Except\n         }\n     }\n \n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithStoreOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, null, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithAliasOnly() throws Exception {\n+        testAddKeyStoreWithInvalidCredentialReference(KS_NAME, null, EXISTING_ALIAS, null);\n+    }\n+\n+    @Test\n+    public void testAddOperationWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String password = \"secret\";\n+            addKeyStoreWithCredentialReference(KS_NAME, null, null, \"secret\", false, false);\n+            assertEquals(password, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithStoreOnly() throws Exception {\n+        try {\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, NON_EMPTY_CS_NAME, null, null, true);\n+\n+            // no changes to credential-reference attribute\n+            assertEquals(null, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(EXISTING_ALIAS, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+            assertEquals(NON_EMPTY_CS_NAME, readAttribute(KS_NAME, STORE_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithAliasOnly() throws Exception {\n+        try {\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, null, NEW_ALIAS, null, true);\n+\n+            // no changes to credential-reference attribute\n+            assertEquals(null, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(EXISTING_ALIAS, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+            assertEquals(NON_EMPTY_CS_NAME, readAttribute(KS_NAME, STORE_ATTRIBUTE_NAME));\n+        } finally {\n+            removeKeyStore(KS_NAME);\n+        }\n+    }\n+\n+    @Test\n+    public void testWriteAttributeWithCredentialReferenceWithClearTextOnly() throws Exception {\n+        try {\n+            String newPassword = \"newPassword\";\n+            getNonEmptyCredentialStore();\n+            addKeyStoreWithCredentialReference(KS_NAME, NON_EMPTY_CS_NAME, EXISTING_ALIAS, null, true);\n+            testWriteCredentialReferenceAttribute(\"key-store\", KS_NAME, null, null, newPassword, false);\n+\n+            // changes to credential-reference attribute\n+            assertEquals(newPassword, readAttribute(KS_NAME, CLEAR_TEXT_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, ALIAS_ATTRIBUTE_NAME));\n+            assertEquals(null, readAttribute(KS_NAME, STORE_ATTRIBUTE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e88b771d4b2ef132baf41f9001897cd014884b4"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3769, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}