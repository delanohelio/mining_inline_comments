{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTgxOTEy", "number": 4173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNzo1MFrOD0K1aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMjozM1rOD1JoCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDMwMDU2OnYy", "diffSide": "RIGHT", "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNzo1MFrOGI-enQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyNzowMlrOGJvJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NTQzNw==", "bodyText": "@darranl @fjuma After fix for WFCORE-4407 security domain service was not started before attempting to read the identity which resulted in NPE.\nThis fix removes NPE but it is still not possible to read the identity and resulting message is \"Identity with name [myIdentity] not authorized.\" This is also invalid response as I should be able to read the identity I just added, right?", "url": "https://github.com/wildfly/wildfly-core/pull/4173#discussion_r412065437", "createdAt": "2020-04-21T10:27:50Z", "author": {"login": "Skyllarr"}, "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wildfly.test.security.common.elytron;\n+\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.core.testrunner.WildflyTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+@RunWith(WildflyTestRunner.class)\n+public class SecurityDomainTest {\n+    CLIWrapper cli;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        cli = new CLIWrapper(true);\n+        // add security-domain\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add(path=my-fs-realm-users,relative-to=jboss.server.config.dir)\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add-identity(identity=myIdentity)\");\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:add(realms=[{realm=myFsRealm}],default-realm=myFsRealm)\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        removeTestResources();\n+        cli.close();\n+    }\n+\n+    private void removeTestResources() {\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:remove\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:remove\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @Test\n+    public void testValidHostContextMapValue() {\n+        boolean success = cli.sendLine(\"/subsystem=elytron/security-domain=mySD:read-identity(name=myIdentity)\", true);\n+        Assert.assertFalse(success);\n+        Assert.assertThat(\"Wrong error message\", cli.readOutput(), containsString(\"Identity with name [myIdentity] not authorized.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f9ebdbde78e5c745d555fcfc5086384eb9a46d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTY5MA==", "bodyText": "Just a clarification that the response Identity with name [myIdentity] not authorized. is unrelated to this NPE bug. This NPE bug is happening since wf-core 9.0.0.Beta7 and before that the response was also Identity with name [myIdentity] not authorized.", "url": "https://github.com/wildfly/wildfly-core/pull/4173#discussion_r412789690", "createdAt": "2020-04-22T08:42:08Z", "author": {"login": "Skyllarr"}, "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wildfly.test.security.common.elytron;\n+\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.core.testrunner.WildflyTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+@RunWith(WildflyTestRunner.class)\n+public class SecurityDomainTest {\n+    CLIWrapper cli;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        cli = new CLIWrapper(true);\n+        // add security-domain\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add(path=my-fs-realm-users,relative-to=jboss.server.config.dir)\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add-identity(identity=myIdentity)\");\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:add(realms=[{realm=myFsRealm}],default-realm=myFsRealm)\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        removeTestResources();\n+        cli.close();\n+    }\n+\n+    private void removeTestResources() {\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:remove\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:remove\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @Test\n+    public void testValidHostContextMapValue() {\n+        boolean success = cli.sendLine(\"/subsystem=elytron/security-domain=mySD:read-identity(name=myIdentity)\", true);\n+        Assert.assertFalse(success);\n+        Assert.assertThat(\"Wrong error message\", cli.readOutput(), containsString(\"Identity with name [myIdentity] not authorized.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NTQzNw=="}, "originalCommit": {"oid": "4f9ebdbde78e5c745d555fcfc5086384eb9a46d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Mjc2Nw==", "bodyText": "update: when I add default-permission-mapper to the security domain I can read the identity without not authorized error. I have updated the test case in this PR", "url": "https://github.com/wildfly/wildfly-core/pull/4173#discussion_r412862767", "createdAt": "2020-04-22T10:27:02Z", "author": {"login": "Skyllarr"}, "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wildfly.test.security.common.elytron;\n+\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.core.testrunner.WildflyTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+@RunWith(WildflyTestRunner.class)\n+public class SecurityDomainTest {\n+    CLIWrapper cli;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        cli = new CLIWrapper(true);\n+        // add security-domain\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add(path=my-fs-realm-users,relative-to=jboss.server.config.dir)\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:add-identity(identity=myIdentity)\");\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:add(realms=[{realm=myFsRealm}],default-realm=myFsRealm)\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        removeTestResources();\n+        cli.close();\n+    }\n+\n+    private void removeTestResources() {\n+        cli.sendLine(\"/subsystem=elytron/security-domain=mySD:remove\");\n+        cli.sendLine(\"/subsystem=elytron/filesystem-realm=myFsRealm:remove\");\n+        cli.sendLine(\"reload\");\n+    }\n+\n+    @Test\n+    public void testValidHostContextMapValue() {\n+        boolean success = cli.sendLine(\"/subsystem=elytron/security-domain=mySD:read-identity(name=myIdentity)\", true);\n+        Assert.assertFalse(success);\n+        Assert.assertThat(\"Wrong error message\", cli.readOutput(), containsString(\"Identity with name [myIdentity] not authorized.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NTQzNw=="}, "originalCommit": {"oid": "4f9ebdbde78e5c745d555fcfc5086384eb9a46d7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDU4ODI1OnYy", "diffSide": "RIGHT", "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMjozM1rOGKcHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMjozM1rOGKcHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5OTU0MQ==", "bodyText": "Just missing a copyright header on this one.", "url": "https://github.com/wildfly/wildfly-core/pull/4173#discussion_r413599541", "createdAt": "2020-04-23T08:02:33Z", "author": {"login": "darranl"}, "path": "testsuite/elytron/src/test/java/org/wildfly/test/security/common/elytron/SecurityDomainTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wildfly.test.security.common.elytron;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68cade19e26d01ac923b1e9f4d47fe3ed253c238"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}