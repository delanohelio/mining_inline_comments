{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzQ5MzEy", "number": 4392, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzozNjoyN1rOE8CI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToyMFrOFAmIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzg1MDc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/jboss/as/server/deployment/DeploymentAddHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzozNjoyN1rOH38ZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzo1Mjo1MFrOH38hQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMzI3Ng==", "bodyText": "I assume what we are really trying to catch is a RuntimeException thrown by EclipseTransformer, not a java.lang.Error. So this catch should be limited to RuntimeException.\nBeyond a general code standard thing of avoiding suppressing Error, this matters because if we bypass trying again for deployments that use DeploymentAttributes.CONTENT_INPUT_STREAM_INDEX, then for those we are going to have to rethrow the exception.", "url": "https://github.com/wildfly/wildfly-core/pull/4392#discussion_r528423276", "createdAt": "2020-11-22T23:36:27Z", "author": {"login": "bstansberry"}, "path": "server/src/main/java/org/jboss/as/server/deployment/DeploymentAddHandler.java", "diffHunk": "@@ -219,8 +219,17 @@ private static String getRuntimeName(String name, ModelNode deployment) {\n             try {\n                 transformed = deploymentTransformer == null ? in : deploymentTransformer.transform(in, name);\n                 hash = contentRepository.addContent(transformed);\n-            } catch (IOException e) {\n+            } catch (IOException e) { // fail hard on IO error\n                 throw createFailureException(e.toString());\n+            } catch(Throwable t) {  // for other errors, return original file stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a053452ad2e2ef2cc9356276b69ef9ce6fd81e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyNTI4MA==", "bodyText": "Also, I think this catch should be for a try block that only includes L220.  We want to react to failures in deploymentTransformer.transform, not to anything that happens with L221's contentRepository.addContent.\nCreating a method for the L220 and the try/catch would be cleaner looking.", "url": "https://github.com/wildfly/wildfly-core/pull/4392#discussion_r528425280", "createdAt": "2020-11-22T23:52:50Z", "author": {"login": "bstansberry"}, "path": "server/src/main/java/org/jboss/as/server/deployment/DeploymentAddHandler.java", "diffHunk": "@@ -219,8 +219,17 @@ private static String getRuntimeName(String name, ModelNode deployment) {\n             try {\n                 transformed = deploymentTransformer == null ? in : deploymentTransformer.transform(in, name);\n                 hash = contentRepository.addContent(transformed);\n-            } catch (IOException e) {\n+            } catch (IOException e) { // fail hard on IO error\n                 throw createFailureException(e.toString());\n+            } catch(Throwable t) {  // for other errors, return original file stream", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMzI3Ng=="}, "originalCommit": {"oid": "96a053452ad2e2ef2cc9356276b69ef9ce6fd81e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY5MDg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/jboss/as/server/deployment/DeploymentAddHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToyMFrOH--QGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToyMFrOH--QGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzY5MQ==", "bodyText": "I think it will be ok to retry with the untransformed deployment no matter what the exception was but it's ok to start off being more restrictive.", "url": "https://github.com/wildfly/wildfly-core/pull/4392#discussion_r535793691", "createdAt": "2020-12-04T02:41:20Z", "author": {"login": "bstansberry"}, "path": "server/src/main/java/org/jboss/as/server/deployment/DeploymentAddHandler.java", "diffHunk": "@@ -230,6 +231,25 @@ private static String getRuntimeName(String name, ModelNode deployment) {\n         return new DeploymentHandlerUtil.ContentItem(hash);\n     }\n \n+    private InputStream doTransformation(OperationContext context, ModelNode contentItemNode, String name, InputStream in) throws IOException, OperationFailedException {\n+        try {\n+            return deploymentTransformer.transform(in, name);\n+        } catch (RuntimeException t) {\n+            // Check if the InputStream is already attached to the operation request (as per CONTENT_INPUT_STREAM_INDEX check) and ignore that case\n+            // as calling getInputStream would of returned the already partially consumed InputStream.\n+            // Also verify that the thrown exception is the specific WFCORE-5198 `Error code 3`.\n+            if (!contentItemNode.hasDefined(DeploymentAttributes.CONTENT_INPUT_STREAM_INDEX.getName()) &&\n+                    t.getCause() != null && t.getCause().getCause() != null &&\n+                    t.getCause().getCause() instanceof IOException &&\n+                    t.getCause().getCause().getMessage().contains(\"during transformation. Error code 3\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a232305ef725107767b7d4453957a94d8b6d406"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3738, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}