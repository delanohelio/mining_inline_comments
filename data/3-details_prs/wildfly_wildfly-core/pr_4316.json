{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NzcyMzYy", "number": 4316, "title": "Bootable JAR Logging Updates", "bodyText": "The following issues are fixed in this PR:\n\nhttps://issues.redhat.com/browse/WFCORE-5115\nhttps://issues.redhat.com/browse/WFCORE-5109\n\nWFCORE-5115\nUse a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\nWFCORE-4895\nMinor follow up to the bootable JAR module. Actually throw the exception when a shutdown failure occurs.\nWFCORE-5109\nEnsure the configurator is attached to the root logger. This means the logging subsystem will not reconfigure resources that do not need to be reconfigured.", "createdAt": "2020-09-03T17:13:35Z", "url": "https://github.com/wildfly/wildfly-core/pull/4316", "merged": true, "mergeCommit": {"oid": "6170c3ce2769e13a59c3911927f78c4719deb07b"}, "closed": true, "closedAt": "2020-09-08T08:05:41Z", "author": {"login": "jamezp"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFZZrkABqjM3MjcyMTYyMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFmH82ABqjM3MzAwNTY0ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78748bccde11f0105c5c3a76e79007bbddcfc826", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/78748bccde11f0105c5c3a76e79007bbddcfc826", "committedDate": "2020-09-03T17:13:00Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}, "afterCommit": {"oid": "e906a2c4821cc670745047f8529a638518300789", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/e906a2c4821cc670745047f8529a638518300789", "committedDate": "2020-09-03T23:38:12Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e906a2c4821cc670745047f8529a638518300789", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/e906a2c4821cc670745047f8529a638518300789", "committedDate": "2020-09-03T23:38:12Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}, "afterCommit": {"oid": "8fc7fb2ef87a21479993101d7b1435c47a791560", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/8fc7fb2ef87a21479993101d7b1435c47a791560", "committedDate": "2020-09-03T23:44:44Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjcxNzE1", "url": "https://github.com/wildfly/wildfly-core/pull/4316#pullrequestreview-482271715", "createdAt": "2020-09-03T23:46:55Z", "commit": {"oid": "8fc7fb2ef87a21479993101d7b1435c47a791560"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0Njo1NVrOHM67Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0Njo1NVrOHM67Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDM5OQ==", "bodyText": "Note this is just an idea. I'm happy to remove it, but felt it may be useful to see some information about the environment when it's booting.", "url": "https://github.com/wildfly/wildfly-core/pull/4316#discussion_r483310399", "createdAt": "2020-09-03T23:46:55Z", "author": {"login": "jamezp"}, "path": "bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableEnvironment.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ *\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wildfly.core.jar.runtime;\n+\n+import java.nio.file.Path;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Represents a bootable JAR environment.\n+ * <p>\n+ * The environment initializes required system properties. System properties should also be\n+ * {@linkplain #setSystemProperty(String, String) set} via the environment and not directly.\n+ * </p>\n+ *\n+ * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>\n+ */\n+class BootableEnvironment {\n+\n+    private static final AtomicBoolean DEBUG = new AtomicBoolean();\n+    private final Path jbossHome;\n+    private final Path serverDir;\n+    private final Collection<String> ignoredProperties;\n+    private final PropertyUpdater propertyUpdater;\n+\n+    private BootableEnvironment(final Path jbossHome, final Collection<String> ignoredProperties,\n+                                final PropertyUpdater propertyUpdater) {\n+        this.jbossHome = jbossHome;\n+        serverDir = jbossHome.resolve(\"standalone\");\n+        this.ignoredProperties = ignoredProperties;\n+        this.propertyUpdater = propertyUpdater;\n+    }\n+\n+    /**\n+     * Creates a new environment initializing required system properties based on the JBoss Home directory passed in.\n+     *\n+     * @param jbossHome the base JBoss Home directory\n+     *\n+     * @return the newly create environment\n+     */\n+    static BootableEnvironment of(final Path jbossHome) {\n+        final PropertyUpdater propertyUpdater;\n+        if (System.getSecurityManager() == null) {\n+            propertyUpdater = System::setProperty;\n+        } else {\n+            propertyUpdater = (name, value) ->\n+                    AccessController.doPrivileged((PrivilegedAction<String>) () -> System.setProperty(name, value));\n+        }\n+        return of(jbossHome, propertyUpdater);\n+    }\n+\n+    /**\n+     * Creates a new environment initializing required system properties based on the JBoss Home directory passed in.\n+     *\n+     * @param jbossHome       the base JBoss Home directory\n+     * @param propertyUpdater the updater used to set system properties\n+     *\n+     * @return the newly create environment\n+     */\n+    static BootableEnvironment of(final Path jbossHome, final PropertyUpdater propertyUpdater) {\n+        return new BootableEnvironment(jbossHome, init(jbossHome, propertyUpdater), propertyUpdater);\n+    }\n+\n+    /**\n+     * Returns the base JBoss Home directory.\n+     *\n+     * @return the JBoss Home directory\n+     */\n+    Path getJBossHome() {\n+        return jbossHome;\n+    }\n+\n+    /**\n+     * Results the servers configuration directory appending any optional paths.\n+     *\n+     * @param paths the optional paths to append to the configuration directory\n+     *\n+     * @return the resolved path\n+     */\n+    Path resolveConfigurationDir(final String... paths) {\n+        return resolvePath(serverDir, \"configuration\", paths);\n+    }\n+\n+    /**\n+     * Results the servers content directory appending any optional paths.\n+     *\n+     * @param paths the optional paths to append to the content directory\n+     *\n+     * @return the resolved path\n+     */\n+    Path resolveContentDir(final String... paths) {\n+        return resolvePath(resolveDataDir(), \"content\", paths);\n+    }\n+\n+    /**\n+     * Results the servers data directory appending any optional paths.\n+     *\n+     * @param paths the optional paths to append to the data directory\n+     *\n+     * @return the resolved path\n+     */\n+    Path resolveDataDir(final String... paths) {\n+        return resolvePath(serverDir, \"data\", paths);\n+    }\n+\n+    /**\n+     * Results the servers log directory appending any optional paths.\n+     *\n+     * @param paths the optional paths to append to the log directory\n+     *\n+     * @return the resolved path\n+     */\n+    Path resolveLogDir(final String... paths) {\n+        return resolvePath(serverDir, \"log\", paths);\n+    }\n+\n+    /**\n+     * Sets the system properties represented by the properties.\n+     * <p>\n+     * Note there are a set of system properties that will not be set and are determined based on the JBoss Home\n+     * directory.\n+     * </p>\n+     *\n+     * @param properties the properties to set\n+     */\n+    void setSystemProperties(final Map<String, String> properties) {\n+        final Map<String, String> local = new HashMap<>(properties);\n+        final String debugValue = local.remove(Constants.DEBUG_PROPERTY);\n+        if (debugValue != null) {\n+            DEBUG.set(debugValue.isEmpty() || \"true\".equalsIgnoreCase(debugValue));\n+        }\n+        for (Map.Entry<String, String> entry : local.entrySet()) {\n+            setSystemProperty(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Sets the system property.\n+     * <p>\n+     * Note there are a set of system properties that will not be set and are determined based on the JBoss Home\n+     * directory.\n+     * </p>\n+     *\n+     * @param key   the key for the property\n+     * @param value the property value\n+     */\n+    void setSystemProperty(final String key, final String value) {\n+        if (ignoredProperties.contains(key)) {\n+            logDebug(\"Ignoring system property %s.\", key);\n+        } else {\n+            propertyUpdater.setProperty(key, value);\n+        }\n+    }\n+\n+    private static Collection<String> init(final Path jbossHome, final PropertyUpdater propertyUpdater) {\n+        final Collection<String> propertyNames = new ArrayList<>();\n+        propertyNames.add(\"java.ext.dirs\");\n+        propertyNames.add(\"java.home\");\n+        propertyNames.add(\"java.io.tmpdir\");\n+        propertyNames.add(\"jboss.server.persist.config\");\n+        propertyNames.add(\"jboss.server.management.uuid\");\n+        propertyNames.add(\"modules.path\");\n+        propertyNames.add(\"user.dir\");\n+        propertyNames.add(\"user.home\");\n+\n+        // Configure known paths\n+        setSystemProperty(propertyUpdater, \"jboss.home.dir\", jbossHome, propertyNames);\n+        final Path serverBaseDir = resolvePath(jbossHome, \"standalone\");\n+        setSystemProperty(propertyUpdater, \"jboss.server.base.dir\", serverBaseDir, propertyNames);\n+        setSystemProperty(propertyUpdater, \"jboss.controller.temp.dir\", resolvePath(serverBaseDir, \"tmp\"), propertyNames);\n+        final Path dataDir = resolvePath(serverBaseDir, \"data\");\n+        setSystemProperty(propertyUpdater, \"jboss.server.data.dir\", dataDir, propertyNames);\n+        setSystemProperty(propertyUpdater, \"jboss.server.config.dir\", resolvePath(serverBaseDir, \"config\"), propertyNames);\n+        setSystemProperty(propertyUpdater, \"jboss.server.deploy.dir\", resolvePath(dataDir, \"content\"), propertyNames);\n+        setSystemProperty(propertyUpdater, \"jboss.server.log.dir\", resolvePath(serverBaseDir, \"log\"), propertyNames);\n+        setSystemProperty(propertyUpdater, \"jboss.server.temp.dir\", resolvePath(serverBaseDir, \"tmp\"), propertyNames);\n+        return propertyNames;\n+    }\n+\n+    private static Path resolvePath(final Path base, final String path1, final String... paths) {\n+        Path result = base.resolve(path1);\n+        for (String path : paths) {\n+            result = result.resolve(path);\n+        }\n+        return result.toAbsolutePath().normalize();\n+    }\n+\n+    private static void setSystemProperty(final PropertyUpdater propertyUpdater, final String key, final Path path, final Collection<String> names) {\n+        names.add(key);\n+        final String previousValue = propertyUpdater.setProperty(key, path.toString());\n+        if (previousValue == null) {\n+            logDebug(\"Setting system property %s to %s\", key, path);\n+        } else {\n+            logDebug(\"Replacing system property %s with a value of %s. The previous value was %s.\", key, path, previousValue);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"UseOfSystemOutOrSystemErr\")\n+    static void logDebug(final String format, final Object... args) {\n+        if (DEBUG.get()) {\n+            System.out.printf(\"[DEBUG] \" + format, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc7fb2ef87a21479993101d7b1435c47a791560"}, "originalPosition": 223}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fc7fb2ef87a21479993101d7b1435c47a791560", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/8fc7fb2ef87a21479993101d7b1435c47a791560", "committedDate": "2020-09-03T23:44:44Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}, "afterCommit": {"oid": "4b38e25e835de0b5a411db53f412475555d9d686", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/4b38e25e835de0b5a411db53f412475555d9d686", "committedDate": "2020-09-04T00:23:51Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b38e25e835de0b5a411db53f412475555d9d686", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/4b38e25e835de0b5a411db53f412475555d9d686", "committedDate": "2020-09-04T00:23:51Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}, "afterCommit": {"oid": "227b871d0689f7babe9d328db372f361d1671445", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/227b871d0689f7babe9d328db372f361d1671445", "committedDate": "2020-09-04T00:55:19Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c147e038986b5a9e063d4c218d6d5e298ea5da5", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/4c147e038986b5a9e063d4c218d6d5e298ea5da5", "committedDate": "2020-09-04T14:21:40Z", "message": "[WFCORE-4895] Minor follow up to the bootable JAR module. Actually throw the exception when a shutdown failure occurs.\n\nhttps://issues.redhat.com/browse/WFCORE-4895"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7618565dc9e6a1881180ceb4814eaec52e4c6d65", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/7618565dc9e6a1881180ceb4814eaec52e4c6d65", "committedDate": "2020-09-04T14:21:40Z", "message": "[WFCORE-5109] Ensure the configurator is attached to the root logger. This means the logging subsystem will not reconfigure resources that do not need to be reconfigured.\n\nhttps://issues.redhat.com/browse/WFCORE-5109"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc89be4f1f9d1238b338a373ccdfb9c4620b6605", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/bc89be4f1f9d1238b338a373ccdfb9c4620b6605", "committedDate": "2020-09-04T14:30:45Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "227b871d0689f7babe9d328db372f361d1671445", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/227b871d0689f7babe9d328db372f361d1671445", "committedDate": "2020-09-04T00:55:19Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}, "afterCommit": {"oid": "bc89be4f1f9d1238b338a373ccdfb9c4620b6605", "author": {"user": {"login": "jamezp", "name": "James R. Perkins"}}, "url": "https://github.com/wildfly/wildfly-core/commit/bc89be4f1f9d1238b338a373ccdfb9c4620b6605", "committedDate": "2020-09-04T14:30:45Z", "message": "[WFCORE-5115] Use a hard-coded boot-config.properties to load system properties in the bootable JAR entry point. This properties file is generated by the wildfly-jar-maven-plugin. It's used at boot to configure properties required by the log manager during initialization.\n\nhttps://issues.redhat.com/browse/WFCORE-5115"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3363, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}