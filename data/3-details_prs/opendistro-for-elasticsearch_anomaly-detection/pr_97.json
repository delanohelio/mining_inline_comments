{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTkyMjAy", "number": 97, "title": "Integration with Ultrawarm - Follow up", "bodyText": "Issue #, if available:\nDescription of changes:\nThis is a follow up PR to address comments.\nSee context in #95\nTesting done:\n\ngradle build passes\nVerified AD runs only in hot nodes.\nstats API and HourlyCron still works.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-01T05:39:23Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97", "merged": true, "mergeCommit": {"oid": "fbc8a4ec8304c57d59bb908e0ca4052852caddc6"}, "closed": true, "closedAt": "2020-05-04T19:52:07Z", "author": {"login": "kaituo"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc689DAH2gAyNDExOTkyMjAyOjg0MGZjMDdmNWUzYWM3MWFkMDE3NmZiNjg4ZDdhZDY0ZjcwMDliMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceEPsFAFqTQwNTI2Mjc0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/840fc07f5e3ac71ad0176fb688d7ad64f7009b33", "committedDate": "2020-05-01T05:37:02Z", "message": "Integration with Ultrawarm - Follow up\n\nThis is a follow up PR to address comments.\n\nTesting done:\n1. gradle build passes\n2. Verified AD runs only in hot nodes.\n3. stats API and HourlyCron still works."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjYyMzc0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#pullrequestreview-404262374", "createdAt": "2020-05-01T16:38:51Z", "commit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozODo1MVrOGPOxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1Mjo1MFrOGPPJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzkwOA==", "bodyText": "question. Just to confirm this if-and-only-if behavior since it is different from the last change, any data nodes that are marked but not marked hot are not eligible? if a data node is marked with some unknown new value, it would be ineligible based on this rule.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418623908", "createdAt": "2020-05-01T16:38:51Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);\n+    }\n+\n+    static class HotDataNodePredicate implements Predicate<DiscoveryNode> {\n+        @Override\n+        public boolean test(DiscoveryNode discoveryNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTUwMw==", "bodyText": "issue. this predicate should be instantiated, maybe injected, and reused for calls and should not be instantiated once for every call.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418625503", "createdAt": "2020-05-01T16:42:44Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNjE3MA==", "bodyText": "suggestion. stream helps improve code efficiency (eliminating need for intermediary data structures, variables creation and operation) and readability.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418626170", "createdAt": "2020-05-01T16:44:17Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTk2MA==", "bodyText": "Minor. class documentation is missing. For public classes and methods, the responsibilities should be summarized for clients and readers.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418629960", "createdAt": "2020-05-01T16:52:50Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjY4MjA3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#pullrequestreview-404268207", "createdAt": "2020-05-01T16:50:00Z", "commit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1MDowMFrOGPPEYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzowMDoxNFrOGPPWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyODcwNg==", "bodyText": "minor: indentation is not needed in java docs", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418628706", "createdAt": "2020-05-01T16:50:00Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTU3MQ==", "bodyText": "minor: typo nodes r", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418629571", "createdAt": "2020-05-01T16:51:56Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -119,7 +119,7 @@ public String getName() {\n     /**\n      * Constructor.\n      *\n-     * @param clusterStateUtils cluster info\n+     * @param nodeFilter utility class to select nodesr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMzM2MQ==", "bodyText": "I don't see any UT for this class. Would be great to add some.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418633361", "createdAt": "2020-05-01T17:00:14Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837b44f4e532a432b2372255b3f7ede55983552b", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/837b44f4e532a432b2372255b3f7ede55983552b", "committedDate": "2020-05-04T15:47:16Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTQ4ODQy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#pullrequestreview-405148842", "createdAt": "2020-05-04T16:27:36Z", "commit": {"oid": "837b44f4e532a432b2372255b3f7ede55983552b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MjYyNzQ0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#pullrequestreview-405262744", "createdAt": "2020-05-04T19:00:34Z", "commit": {"oid": "837b44f4e532a432b2372255b3f7ede55983552b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1666, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}