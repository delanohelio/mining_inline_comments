{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjgzNTY5", "number": 341, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTozOTo0MFrOFJDJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo1ODo1NFrOFJmTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDMzMDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTozOTo0MFrOILTxKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQyMzo0MzowM1rOILflYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA==", "bodyText": "This error checking is too general. I will change this part in next commit. My plan is to list all of supported aggregation types, check if the feature aggregation supported before starting detector.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548729130", "createdAt": "2020-12-24T19:39:40Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1Mzk4MQ==", "bodyText": "FYI: We can also get RemoteTransportException with nestedd java.lang.IllegalArgumentException.  See tt V279686544 for detail.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548753981", "createdAt": "2020-12-24T21:56:37Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NTYwNw==", "bodyText": "Yeah, it's hard to cover all exceptions correctly. So I will update this part soon and publish a new commit.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548755607", "createdAt": "2020-12-24T22:13:12Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkyMjcyMw==", "bodyText": "FYI: We can also get RemoteTransportException with nestedd java.lang.IllegalArgumentException. See tt V279686544 for detail.\n\nTested latest commit on odfe1.12, use sum on text  field, can see debug level remote transport exception, the error message is a little bit different, but actually it's wrapped into SearchPhaseExecutionException , so we can catch such exception and end detector run.\nI see the issue you shared occurred on 7.4, so I backported the change to odfe1.4 and tested sum on message, can see RemoteTransportException and the same error stack. Actually the RemoteTransportException will be wrapped into SearchPhaseExecutionException and what we got in handleExecuteException method is SearchPhaseExecutionException.\n[2020-12-25T15:22:02,808][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[org.elasticsearch.transport.RemoteTransportException,java.lang.IllegalArgumentException]#[nab_art_daily_jumpsdown][3], node[MZHT5zvFSBqhwcki53lApQ], [R], s[STARTED], a[id=ZI44E0oWQbib3wdD0-K4mA]: Failed to execute [SearchRequest{searchType=QUERY_THEN_FETCH, indices=[nab_art_daily_jumpsdown], indicesOptions=IndicesOptions[ignore_unavailable=false, allow_no_indices=true, expand_wildcards_open=true, expand_wildcards_closed=false, allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true], types=[], routing='null', preference='null', requestCache=null, scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=128, allowPartialSearchResults=true, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1, ccsMinimizeRoundtrips=true, source={\"query\":{\"bool\":{\"must\":[{\"range\":{\"timestamp\":{\"from\":1608938402680,\"to\":1608938462680,\"include_lower\":true,\"include_upper\":false,\"format\":\"epoch_millis\",\"boost\":1.0}}},{\"match_all\":{\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"aggregations\":{\"KBwrnHYBlKi-0FCLcTSO\":{\"sum\":{\"field\":\"message\"}}}}}] lastShard [true]\norg.elasticsearch.transport.RemoteTransportException: [cd4870d4eb100a906320f8465ea222c6][10.212.30.8:9300][indices:data/read/search[phase/query]]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n[2020-12-25T15:22:02,802][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[org.elasticsearch.transport.RemoteTransportException,java.lang.IllegalArgumentException]#[nab_art_daily_jumpsdown][2], node[MZHT5zvFSBqhwcki53lApQ], [R], s[STARTED], a[id=Vzvbr61bSOqNjRy5hh_hXw]: Failed to execute [SearchRequest{searchType=QUERY_THEN_FETCH, indices=[nab_art_daily_jumpsdown], indicesOptions=IndicesOptions[ignore_unavailable=false, allow_no_indices=true, expand_wildcards_open=true, expand_wildcards_closed=false, allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true], types=[], routing='null', preference='null', requestCache=null, scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=128, allowPartialSearchResults=true, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1, ccsMinimizeRoundtrips=true, source={\"query\":{\"bool\":{\"must\":[{\"range\":{\"timestamp\":{\"from\":1608938402680,\"to\":1608938462680,\"include_lower\":true,\"include_upper\":false,\"format\":\"epoch_millis\",\"boost\":1.0}}},{\"match_all\":{\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"aggregations\":{\"KBwrnHYBlKi-0FCLcTSO\":{\"sum\":{\"field\":\"message\"}}}}}] lastShard [true]\norg.elasticsearch.transport.RemoteTransportException: [cd4870d4eb100a906320f8465ea222c6][10.212.30.8:9300][indices:data/read/search[phase/query]]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n[2020-12-25T15:22:02,802][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[org.elasticsearch.transport.RemoteTransportException,java.lang.IllegalArgumentException]#[nab_art_daily_jumpsdown][0], node[MZHT5zvFSBqhwcki53lApQ], [R], s[STARTED], a[id=35P-1gZpSVq_VaYoZbxWFg]: Failed to execute [SearchRequest{searchType=QUERY_THEN_FETCH, indices=[nab_art_daily_jumpsdown], indicesOptions=IndicesOptions[ignore_unavailable=false, allow_no_indices=true, expand_wildcards_open=true, expand_wildcards_closed=false, allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true], types=[], routing='null', preference='null', requestCache=null, scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=128, allowPartialSearchResults=true, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1, ccsMinimizeRoundtrips=true, source={\"query\":{\"bool\":{\"must\":[{\"range\":{\"timestamp\":{\"from\":1608938402680,\"to\":1608938462680,\"include_lower\":true,\"include_upper\":false,\"format\":\"epoch_millis\",\"boost\":1.0}}},{\"match_all\":{\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"aggregations\":{\"KBwrnHYBlKi-0FCLcTSO\":{\"sum\":{\"field\":\"message\"}}}}}] lastShard [true]\norg.elasticsearch.transport.RemoteTransportException: [cd4870d4eb100a906320f8465ea222c6][10.212.30.8:9300][indices:data/read/search[phase/query]]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n[2020-12-25T15:22:02,802][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[org.elasticsearch.transport.RemoteTransportException,java.lang.IllegalArgumentException]#[nab_art_daily_jumpsdown][4], node[MZHT5zvFSBqhwcki53lApQ], [R], s[STARTED], a[id=gzG2p6rZRViHB8TGQSH_5Q]: Failed to execute [SearchRequest{searchType=QUERY_THEN_FETCH, indices=[nab_art_daily_jumpsdown], indicesOptions=IndicesOptions[ignore_unavailable=false, allow_no_indices=true, expand_wildcards_open=true, expand_wildcards_closed=false, allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true], types=[], routing='null', preference='null', requestCache=null, scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=128, allowPartialSearchResults=true, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1, ccsMinimizeRoundtrips=true, source={\"query\":{\"bool\":{\"must\":[{\"range\":{\"timestamp\":{\"from\":1608938402680,\"to\":1608938462680,\"include_lower\":true,\"include_upper\":false,\"format\":\"epoch_millis\",\"boost\":1.0}}},{\"match_all\":{\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"aggregations\":{\"KBwrnHYBlKi-0FCLcTSO\":{\"sum\":{\"field\":\"message\"}}}}}] lastShard [true]\norg.elasticsearch.transport.RemoteTransportException: [cd4870d4eb100a906320f8465ea222c6][10.212.30.8:9300][indices:data/read/search[phase/query]]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n[2020-12-25T15:22:02,812][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[org.elasticsearch.transport.RemoteTransportException,java.lang.IllegalArgumentException]#[nab_art_daily_jumpsdown][1], node[MZHT5zvFSBqhwcki53lApQ], [R], s[STARTED], a[id=Kh2hxl0UTniVNCEYsOWErg]: Failed to execute [SearchRequest{searchType=QUERY_THEN_FETCH, indices=[nab_art_daily_jumpsdown], indicesOptions=IndicesOptions[ignore_unavailable=false, allow_no_indices=true, expand_wildcards_open=true, expand_wildcards_closed=false, allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true], types=[], routing='null', preference='null', requestCache=null, scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=128, allowPartialSearchResults=true, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1, ccsMinimizeRoundtrips=true, source={\"query\":{\"bool\":{\"must\":[{\"range\":{\"timestamp\":{\"from\":1608938402680,\"to\":1608938462680,\"include_lower\":true,\"include_upper\":false,\"format\":\"epoch_millis\",\"boost\":1.0}}},{\"match_all\":{\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"aggregations\":{\"KBwrnHYBlKi-0FCLcTSO\":{\"sum\":{\"field\":\"message\"}}}}}]\norg.elasticsearch.transport.RemoteTransportException: [cd4870d4eb100a906320f8465ea222c6][10.212.30.8:9300][indices:data/read/search[phase/query]]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n[2020-12-25T15:22:02,814][DEBUG][o.e.a.s.TransportSearchAction] [9958a62ed23d9862bbf1717ad8aa27ee] #[null,java.lang.IllegalArgumentException]#All shards failed for phase: [query]\norg.elasticsearch.ElasticsearchException$1: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.ElasticsearchException.guessRootCauses(ElasticsearchException.java:644) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.executeNextPhase(AbstractSearchAsyncAction.java:137) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseDone(AbstractSearchAsyncAction.java:273) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase.onShardFailure(InitialSearchPhase.java:105) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase.access$200(InitialSearchPhase.java:50) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase$2.onFailure(InitialSearchPhase.java:273) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.SearchExecutionStatsCollector.onFailure(SearchExecutionStatsCollector.java:73) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListenerResponseHandler.handleException(ActionListenerResponseHandler.java:59) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.SearchTransportService$ConnectionCountingHandler.handleException(SearchTransportService.java:424) [elasticsearch-7.4.2.jar:7.4.2]\n\tat com.amazon.opendistroforelasticsearch.security.transport.OpenDistroSecurityInterceptor$RestoringTransportResponseHandler.handleException(OpenDistroSecurityInterceptor.java:282) [opendistro_security-1.4.0.2.jar:1.4.0.2]\n\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleException(TransportService.java:1120) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.lambda$handleException$2(InboundHandler.java:243) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.EsExecutors$DirectExecutorService.execute(EsExecutors.java:249) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.handleException(InboundHandler.java:241) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.handlerResponseError(InboundHandler.java:233) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.messageReceived(InboundHandler.java:136) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.inboundMessage(InboundHandler.java:102) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.TcpTransport.inboundMessage(TcpTransport.java:663) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:62) [transport-netty4-client-7.4.2.jar:7.4.2]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1475) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1224) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1271) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:505) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:444) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:283) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1421) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:697) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:597) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:551) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) [netty-common-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-common-4.1.38.Final.jar:4.1.38.Final]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\nCaused by: java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default. Set fielddata=true on [message] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.\n\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:759) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.index.query.QueryShardContext.getForField(QueryShardContext.java:191) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceConfig.resolve(ValuesSourceConfig.java:112) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.resolveConfig(ValuesSourceAggregationBuilder.java:350) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.doBuild(ValuesSourceAggregationBuilder.java:322) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder$LeafOnly.doBuild(ValuesSourceAggregationBuilder.java:42) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AbstractAggregationBuilder.build(AbstractAggregationBuilder.java:139) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.aggregations.AggregatorFactories$Builder.build(AggregatorFactories.java:332) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.parseSource(SearchService.java:784) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createContext(SearchService.java:586) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.createAndPutContext(SearchService.java:545) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:348) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$executeQueryPhase$1(SearchService.java:340) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener.lambda$map$2(ActionListener.java:146) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.search.SearchService.lambda$rewriteShardRequest$7(SearchService.java:1043) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionRunnable$1.doRun(ActionRunnable.java:45) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:782) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:36) ~[elasticsearch-7.4.2.jar:7.4.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]\n\tat java.lang.Thread.run(Thread.java:834) ~[?:?]\n\nI add some debug log to print the exception we cached in handleExecuteException method, the RemoteTransportException will be wrapped into SearchPhaseExecutionException\n[2020-12-25T15:22:02,816][INFO ][c.a.o.a.t.AnomalyResultTransportAction] [9958a62ed23d9862bbf1717ad8aa27ee] exception we got:\norg.elasticsearch.action.search.SearchPhaseExecutionException: all shards failed\n\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseFailure(AbstractSearchAsyncAction.java:314) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.executeNextPhase(AbstractSearchAsyncAction.java:139) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseDone(AbstractSearchAsyncAction.java:273) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase.onShardFailure(InitialSearchPhase.java:105) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase.access$200(InitialSearchPhase.java:50) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.InitialSearchPhase$2.onFailure(InitialSearchPhase.java:273) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.SearchExecutionStatsCollector.onFailure(SearchExecutionStatsCollector.java:73) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.ActionListenerResponseHandler.handleException(ActionListenerResponseHandler.java:59) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.action.search.SearchTransportService$ConnectionCountingHandler.handleException(SearchTransportService.java:424) [elasticsearch-7.4.2.jar:7.4.2]\n\tat com.amazon.opendistroforelasticsearch.security.transport.OpenDistroSecurityInterceptor$RestoringTransportResponseHandler.handleException(OpenDistroSecurityInterceptor.java:282) [opendistro_security-1.4.0.2.jar:1.4.0.2]\n\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleException(TransportService.java:1120) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.lambda$handleException$2(InboundHandler.java:243) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.common.util.concurrent.EsExecutors$DirectExecutorService.execute(EsExecutors.java:249) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.handleException(InboundHandler.java:241) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.handlerResponseError(InboundHandler.java:233) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.messageReceived(InboundHandler.java:136) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.InboundHandler.inboundMessage(InboundHandler.java:102) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.TcpTransport.inboundMessage(TcpTransport.java:663) [elasticsearch-7.4.2.jar:7.4.2]\n\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:62) [transport-netty4-client-7.4.2.jar:7.4.2]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1475) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1224) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1271) [netty-handler-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:505) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:444) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:283) [netty-codec-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1421) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:697) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:597) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:551) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511) [netty-transport-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) [netty-common-4.1.38.Final.jar:4.1.38.Final]\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-common-4.1.38.Final.jar:4.1.38.Final]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548922723", "createdAt": "2020-12-25T23:43:03Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDM4NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/common/exception/AnomalyDetectionException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1NDo0MFrOILUXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoyNDowNVrOILVczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczODkzOA==", "bodyText": "maybe rename it to countedInStats", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548738938", "createdAt": "2020-12-24T19:54:40Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/common/exception/AnomalyDetectionException.java", "diffHunk": "@@ -20,7 +20,14 @@\n  */\n public class AnomalyDetectionException extends RuntimeException {\n \n-    private final String anomalyDetectorId;\n+    private String anomalyDetectorId;\n+    // countInStats will be used to tell whether the exception should be\n+    // counted in feature stats.\n+    private boolean countInStats = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjY4NA==", "bodyText": "sure, sounds a better name", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548756684", "createdAt": "2020-12-24T22:24:05Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/common/exception/AnomalyDetectionException.java", "diffHunk": "@@ -20,7 +20,14 @@\n  */\n public class AnomalyDetectionException extends RuntimeException {\n \n-    private final String anomalyDetectorId;\n+    private String anomalyDetectorId;\n+    // countInStats will be used to tell whether the exception should be\n+    // counted in feature stats.\n+    private boolean countInStats = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczODkzOA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDM5MjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1NTo0OFrOILUaPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoxNDo0NlrOILVZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczOTY0Nw==", "bodyText": "double .countInStats(false)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548739647", "createdAt": "2020-12-24T19:55:48Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -264,7 +269,10 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"AnomalyDetector is not available.\", true).countInStats(false).countInStats(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTk4OQ==", "bodyText": "This can be an error from us.  Can we count it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751989", "createdAt": "2020-12-24T21:36:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -264,7 +269,10 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"AnomalyDetector is not available.\", true).countInStats(false).countInStats(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczOTY0Nw=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NTc1OQ==", "bodyText": "Sure, will count this error in failure stats.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548755759", "createdAt": "2020-12-24T22:14:46Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -264,7 +269,10 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"AnomalyDetector is not available.\", true).countInStats(false).countInStats(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczOTY0Nw=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQwMTczOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/ADIntegTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1OTowNlrOILUgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoxNjozMlrOILVaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTE5Mg==", "bodyText": "do we have plan to migrate other IT to extend this ADIntegTestCase?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548741192", "createdAt": "2020-12-24T19:59:06Z", "author": {"login": "yizheliu-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/ADIntegTestCase.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils.XCONTENT_WITH_TYPE;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+public abstract class ADIntegTestCase extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjAwMw==", "bodyText": "Yeah, I think it can save some effort to write IT cases with this ADIntegTestCase. Not urgent, we can write new IT cases by extending this class first. If we have bandwith, we can do some migration.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548756003", "createdAt": "2020-12-24T22:16:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/ADIntegTestCase.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils.XCONTENT_WITH_TYPE;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+public abstract class ADIntegTestCase extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTE5Mg=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQ4NDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/EntityColdStarter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMToyOTo0NVrOILVH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoxNjo1M1rOILVacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTMzMQ==", "bodyText": "This can be a bug of us.  Can we count it in stats?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751331", "createdAt": "2020-12-24T21:29:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/EntityColdStarter.java", "diffHunk": "@@ -351,7 +351,10 @@ private void getEntityColdStartData(\n         ActionListener<Optional<AnomalyDetector>> getDetectorListener = ActionListener.wrap(detectorOp -> {\n             if (!detectorOp.isPresent()) {\n                 nodeStateManager\n-                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjA4MA==", "bodyText": "Sure, will count it", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548756080", "createdAt": "2020-12-24T22:16:53Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/EntityColdStarter.java", "diffHunk": "@@ -351,7 +351,10 @@ private void getEntityColdStartData(\n         ActionListener<Optional<AnomalyDetector>> getDetectorListener = ActionListener.wrap(detectorOp -> {\n             if (!detectorOp.isPresent()) {\n                 nodeStateManager\n-                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTMzMQ=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQ4ODg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTozNToxOFrOILVJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoxNzozOFrOILVamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTg1Mg==", "bodyText": "how about changing to \"!(e instanceof AnomalyDetectionException) || ((AnomalyDetectionException) e).isCountInStats()\"?  This is more effective than negative of negative.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751852", "createdAt": "2020-12-24T21:35:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -228,16 +229,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 hcDetectors.remove(adID);\n                 original.onResponse(r);\n             }, e -> {\n-                adStats.getStat(StatNames.AD_EXECUTE_FAIL_COUNT.getName()).increment();\n-                if (hcDetectors.contains(adID)) {\n-                    adStats.getStat(StatNames.AD_HC_EXECUTE_FAIL_COUNT.getName()).increment();\n+                // If exception is AnomalyDetectionException and it should not be counted in stats,\n+                // we will not count it in failure stats.\n+                if (!(e instanceof AnomalyDetectionException && !((AnomalyDetectionException) e).isCountInStats())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjEyMw==", "bodyText": "sure, looks good", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548756123", "createdAt": "2020-12-24T22:17:38Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -228,16 +229,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 hcDetectors.remove(adID);\n                 original.onResponse(r);\n             }, e -> {\n-                adStats.getStat(StatNames.AD_EXECUTE_FAIL_COUNT.getName()).increment();\n-                if (hcDetectors.contains(adID)) {\n-                    adStats.getStat(StatNames.AD_HC_EXECUTE_FAIL_COUNT.getName()).increment();\n+                // If exception is AnomalyDetectionException and it should not be counted in stats,\n+                // we will not count it in failure stats.\n+                if (!(e instanceof AnomalyDetectionException && !((AnomalyDetectionException) e).isCountInStats())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTg1Mg=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDUwODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/EntityResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTo1NzozOFrOILVSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMjoxOTo1N1rOILVbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NDExMQ==", "bodyText": "This can be an error from us. Can we count it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548754111", "createdAt": "2020-12-24T21:57:38Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/EntityResultTransportAction.java", "diffHunk": "@@ -147,7 +147,7 @@ protected void doExecute(Task task, EntityResultRequest request, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjM1MQ==", "bodyText": "sure", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548756351", "createdAt": "2020-12-24T22:19:57Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/EntityResultTransportAction.java", "diffHunk": "@@ -147,7 +147,7 @@ protected void doExecute(Task task, EntityResultRequest request, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NDExMQ=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDY4OTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMTo0MzoxNFrOILWnOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozNjozMFrOIMBkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3NTczOA==", "bodyText": "Do you plan to add the error message for the exception on kibana?  Users need to know why their detectors are stopped.   Also, we need to have some prefix before the concrete causes.  Kibana would need it to differentiate errors from the backend and provide suggested actions.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548775738", "createdAt": "2020-12-25T01:43:14Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {\n+                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMzc5NQ==", "bodyText": "Good point, added invalid query tag.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548933795", "createdAt": "2020-12-26T02:31:22Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {\n+                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3NTczOA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NDQ1OQ==", "bodyText": "Do you plan to add the error message for the exception on kibana?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549454459", "createdAt": "2020-12-28T19:02:02Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {\n+                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3NTczOA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3OTQzMA==", "bodyText": "Kibana already supported invalid query tag. Have added this tag in backend exception message.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549479430", "createdAt": "2020-12-28T20:36:30Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {\n+                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3NTczOA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjA5MTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo1ODo1NFrOIL__YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozNDozN1rOIMBiGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ==", "bodyText": "if invalidQuery is false, do you want to return immediately?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549453665", "createdAt": "2020-12-28T18:58:54Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NDE1Nw==", "bodyText": "Also, how do you plan to deal with #341 (comment) ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549454157", "createdAt": "2020-12-28T19:00:47Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ=="}, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODYxOQ==", "bodyText": "Also, how do you plan to deal with #341 (comment) ?\n\nCheck this reply #341 (comment)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549478619", "createdAt": "2020-12-28T20:33:26Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ=="}, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODkzNg==", "bodyText": "if invalidQuery is false, do you want to return immediately?\n\nWill return as InternalFailure", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549478936", "createdAt": "2020-12-28T20:34:37Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ=="}, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}