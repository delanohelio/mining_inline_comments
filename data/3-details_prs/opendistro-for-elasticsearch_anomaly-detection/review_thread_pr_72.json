{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjQzNzEx", "number": 72, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzowMjo1NFrODqDjYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1Mjo1N1rODqkYfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI0OTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzowMjo1NVrOF5nM4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMTozOVrOF6PDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQyNg==", "bodyText": "I removed run since it is the same as executeDetector.  Please rebase .", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955426", "createdAt": "2020-03-21T03:02:55Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -106,12 +106,27 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             String rawPath = request.rawPath();\n             String error = validateAdExecutionInput(input);\n             if (error != null) {\n-                channel.sendResponse(new BytesRestResponse(RestStatus.NOT_FOUND, error));\n+                channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n                 return;\n             }\n \n             if (rawPath.endsWith(PREVIEW)) {\n-                preivewAnomalyDetector(client, channel, input);\n+                if (input.getDetector() != null) {\n+                    error = validateDetector(input.getDetector());\n+                    if (error != null) {\n+                        channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n+                        return;\n+                    }\n+                    anomalyDetectorRunner\n+                        .run(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODQ0NA==", "bodyText": "sure, will rebase", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608444", "createdAt": "2020-03-23T17:01:39Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -106,12 +106,27 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             String rawPath = request.rawPath();\n             String error = validateAdExecutionInput(input);\n             if (error != null) {\n-                channel.sendResponse(new BytesRestResponse(RestStatus.NOT_FOUND, error));\n+                channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n                 return;\n             }\n \n             if (rawPath.endsWith(PREVIEW)) {\n-                preivewAnomalyDetector(client, channel, input);\n+                if (input.getDetector() != null) {\n+                    error = validateDetector(input.getDetector());\n+                    if (error != null) {\n+                        channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n+                        return;\n+                    }\n+                    anomalyDetectorRunner\n+                        .run(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQyNg=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI1MDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzowMzo0NVrOF5nNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTowMjoxMFrOF6dncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA==", "bodyText": "Do u need to verify other things like index name?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955470", "createdAt": "2020-03-21T03:03:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODgyNg==", "bodyText": "Other required fields are verified in AnomalyDetector", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608826", "createdAt": "2020-03-23T17:02:13Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0Njk2Mg==", "bodyText": "As Lai suggested, add same validation logic as  line 166 in IndexAnomalyDetectorActionHandler.java", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396846962", "createdAt": "2020-03-24T01:02:10Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI1MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzowNDo1NlrOF5nNWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMjoyOFrOF6PF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTU0Nw==", "bodyText": "rest status should be internal failure.  I updated and please rebase.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955547", "createdAt": "2020-03-21T03:04:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,24 +206,29 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n-                        channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                anomalyDetectorRunner\n+                    .run(detector, input.getPeriodStart(), input.getPeriodEnd(), getPreviewDetectorActionListener(channel, detector));\n             }\n         };\n     }\n+\n+    private ActionListener getPreviewDetectorActionListener(RestChannel channel, AnomalyDetector detector) {\n+        return ActionListener.wrap(anomalyResult -> {\n+            XContentBuilder builder = channel\n+                .newBuilder()\n+                .startObject()\n+                .field(ANOMALY_RESULT, anomalyResult)\n+                .field(ANOMALY_DETECTOR, detector)\n+                .endObject();\n+            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n+        }, exception -> {\n+            logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+            try {\n+                XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODk5Ng==", "bodyText": "Sure, will rebase", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608996", "createdAt": "2020-03-23T17:02:28Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,24 +206,29 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n-                        channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                anomalyDetectorRunner\n+                    .run(detector, input.getPeriodStart(), input.getPeriodEnd(), getPreviewDetectorActionListener(channel, detector));\n             }\n         };\n     }\n+\n+    private ActionListener getPreviewDetectorActionListener(RestChannel channel, AnomalyDetector detector) {\n+        return ActionListener.wrap(anomalyResult -> {\n+            XContentBuilder builder = channel\n+                .newBuilder()\n+                .startObject()\n+                .field(ANOMALY_RESULT, anomalyResult)\n+                .field(ANOMALY_DETECTOR, detector)\n+                .endObject();\n+            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n+        }, exception -> {\n+            logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+            try {\n+                XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTU0Nw=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI1ODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzoyMDo1NlrOF5nRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTo0NDoyNFrOF6eRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg==", "bodyText": "Instead of creating a new AnomalyDetector, why don't we have a setter method for update time and reset anomalyDetector's last update time?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395956526", "createdAt": "2020-03-21T03:20:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -268,9 +269,24 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n     }\n \n     private void indexAnomalyDetector(String detectorId) throws IOException {\n+        AnomalyDetector detector = new AnomalyDetector(\n+            anomalyDetector.getDetectorId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTk0MQ==", "bodyText": "This is to make detector immutable object, to make it thread-safe.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396609941", "createdAt": "2020-03-23T17:03:50Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -268,9 +269,24 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n     }\n \n     private void indexAnomalyDetector(String detectorId) throws IOException {\n+        AnomalyDetector detector = new AnomalyDetector(\n+            anomalyDetector.getDetectorId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NzgwMg==", "bodyText": "make sense", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396857802", "createdAt": "2020-03-24T01:44:24Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -268,9 +269,24 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n     }\n \n     private void indexAnomalyDetector(String detectorId) throws IOException {\n+        AnomalyDetector detector = new AnomalyDetector(\n+            anomalyDetector.getDetectorId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg=="}, "originalCommit": {"oid": "d51b001b9662a7b47c0a99d339d8064270525a7c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTYyODc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1Mjo1N1rOF6Zeew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTowMjoyOFrOF6dnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3OTEzMQ==", "bodyText": "should this validation be the same as the one in indexing detector, line 166 in IndexAnomalyDetectorActionHandler.java ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396779131", "createdAt": "2020-03-23T21:52:57Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0NzA1NQ==", "bodyText": "Good point, will add that verification.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396847055", "createdAt": "2020-03-24T01:02:28Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3OTEzMQ=="}, "originalCommit": {"oid": "0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3003, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}