{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MjQ5ODg2", "number": 203, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1NDowNFrOEWCkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxNjoyNFrOEXuMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ2MTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1NDowNFrOG9I4fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzowMVrOG9nCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTg1Mg==", "bodyText": "minor. why not follow the convention of other optional fields?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r466761852", "createdAt": "2020-08-07T00:54:04Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -199,7 +206,7 @@ public static AnomalyDetector parse(XContentParser parser, String detectorId) th\n      * @throws IOException IOException if content can't be parsed correctly\n      */\n     public static AnomalyDetector parse(XContentParser parser, String detectorId, Long version) throws IOException {\n-        return parse(parser, detectorId, version, null, null);\n+        return parse(parser, detectorId, version, null, null, AnomalyDetectorSettings.DEFAULT_SHINGLE_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTkzMQ==", "bodyText": "A unit test was failing when I passed null for the default shingle size here, but I can find another way to fix the test. I agree it makes sense to follow the convention of the other fields and pass a null.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r467255931", "createdAt": "2020-08-07T20:33:01Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -199,7 +206,7 @@ public static AnomalyDetector parse(XContentParser parser, String detectorId) th\n      * @throws IOException IOException if content can't be parsed correctly\n      */\n     public static AnomalyDetector parse(XContentParser parser, String detectorId, Long version) throws IOException {\n-        return parse(parser, detectorId, version, null, null);\n+        return parse(parser, detectorId, version, null, null, AnomalyDetectorSettings.DEFAULT_SHINGLE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTg1Mg=="}, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ2NzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1Nzo1MVrOG9I8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMTowN1rOG9m_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2Mjc4NQ==", "bodyText": "minor. 2 is a hardcoded magic number that should be avoided. if 2 becomes 3, it should be a configuration change and the class and the unit tests should not need to be changed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r466762785", "createdAt": "2020-08-07T00:57:51Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -597,6 +594,20 @@ private long truncateToMinute(long epochMillis) {\n         return Instant.ofEpochMilli(epochMillis).truncatedTo(ChronoUnit.MINUTES).toEpochMilli();\n     }\n \n+    /**\n+     * @return max number of missing points allowed to generate a shingle\n+     */\n+    private int getMaxMissingPoints(int shingleSize) {\n+        return Math.max(Math.min(2, shingleSize), (int) Math.floor(shingleSize * 0.25));\n+    }\n+\n+    /**\n+     * @return max distance (number of intervals) between a missing point and a replacement neighbor\n+     */\n+    private int getMaxNeighborDistance(int shingleSize) {\n+        return Math.min(2, shingleSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTE0Mg==", "bodyText": "Ok, I'll add it to the AnomalyDetectorSettings.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r467255142", "createdAt": "2020-08-07T20:31:07Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -597,6 +594,20 @@ private long truncateToMinute(long epochMillis) {\n         return Instant.ofEpochMilli(epochMillis).truncatedTo(ChronoUnit.MINUTES).toEpochMilli();\n     }\n \n+    /**\n+     * @return max number of missing points allowed to generate a shingle\n+     */\n+    private int getMaxMissingPoints(int shingleSize) {\n+        return Math.max(Math.min(2, shingleSize), (int) Math.floor(shingleSize * 0.25));\n+    }\n+\n+    /**\n+     * @return max distance (number of intervals) between a missing point and a replacement neighbor\n+     */\n+    private int getMaxNeighborDistance(int shingleSize) {\n+        return Math.min(2, shingleSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2Mjc4NQ=="}, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ3NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTowMzowNlrOG9JBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozODoxM1rOG9nKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDA5NA==", "bodyText": "minor. if the value is from input, a validation can be used such as non-positive values.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r466764094", "createdAt": "2020-08-07T01:03:06Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -285,6 +295,9 @@ public static AnomalyDetector parse(\n                 case WINDOW_DELAY_FIELD:\n                     windowDelay = TimeConfiguration.parse(parser);\n                     break;\n+                case WINDOW_SIZE_FIELD:\n+                    windowSize = parser.intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1Nzg5MA==", "bodyText": "Sure, I'll add a change to validate and throw an IllegalArgumentException (unless is there another more appropriate exception class for this?)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r467257890", "createdAt": "2020-08-07T20:38:13Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -285,6 +295,9 @@ public static AnomalyDetector parse(\n                 case WINDOW_DELAY_FIELD:\n                     windowDelay = TimeConfiguration.parse(parser);\n                     break;\n+                case WINDOW_SIZE_FIELD:\n+                    windowSize = parser.intValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDA5NA=="}, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ5NzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMToxNDo1NVrOG9JNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMDo0OVrOG9m-0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NzIwNQ==", "bodyText": "issue. Limit the imputed to up to 25%. The current value of 2 is based on shingle size 8. When shingle size is 1 ~ 3,  0 is the max. 4 ~ 7, 1.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r466767205", "createdAt": "2020-08-07T01:14:55Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -597,6 +594,20 @@ private long truncateToMinute(long epochMillis) {\n         return Instant.ofEpochMilli(epochMillis).truncatedTo(ChronoUnit.MINUTES).toEpochMilli();\n     }\n \n+    /**\n+     * @return max number of missing points allowed to generate a shingle\n+     */\n+    private int getMaxMissingPoints(int shingleSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDk5NA==", "bodyText": "Sure, I will simplify the function to just Math.floor(shingleSize * 0.25).", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r467254994", "createdAt": "2020-08-07T20:30:49Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -597,6 +594,20 @@ private long truncateToMinute(long epochMillis) {\n         return Instant.ofEpochMilli(epochMillis).truncatedTo(ChronoUnit.MINUTES).toEpochMilli();\n     }\n \n+    /**\n+     * @return max number of missing points allowed to generate a shingle\n+     */\n+    private int getMaxMissingPoints(int shingleSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NzIwNQ=="}, "originalCommit": {"oid": "126b3198bfa4ff66a640cb843bee6880686713ec"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzA5NTAwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/mappings/anomaly-detectors.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxNjoyNFrOG_q5Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDoxOTo0NVrOHAcM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjI2Mw==", "bodyText": "Should the type be short as we don't expect shingle size exceed 32k?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r469416263", "createdAt": "2020-08-12T17:16:24Z", "author": {"login": "kaituo"}, "path": "src/main/resources/mappings/anomaly-detectors.json", "diffHunk": "@@ -93,6 +93,9 @@\n         }\n       }\n     },\n+    \"shingle_size\": {\n+      \"type\": \"integer\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae010a7844d1dc7a1f94c33796755b237513c5bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzOTE0NA==", "bodyText": "I don't see short commonly used in ES mappings (I know it's available as an ES number mapping type, but haven't seen it used in practice much). It seems the common convention is to use the integer type for integers where long is not needed, and the other integers in this same file seem to reflect that. It doesn't seem we would ever expect schema version, detection interval, nor window delay to exceed 32k, but we still map them as the integer type. I set shingle size type to be integer for consistency.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r470139144", "createdAt": "2020-08-13T17:51:40Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/resources/mappings/anomaly-detectors.json", "diffHunk": "@@ -93,6 +93,9 @@\n         }\n       }\n     },\n+    \"shingle_size\": {\n+      \"type\": \"integer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjI2Mw=="}, "originalCommit": {"oid": "ae010a7844d1dc7a1f94c33796755b237513c5bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MjgxNw==", "bodyText": "How do you evaluate the number is not used much in practice?  How much schema have you seen?\nschema version would increment as long as the detector is updated.  We cannot limit the detector update saying you have exceeded 32k.\nDetector interval and window delay can exceed 32 k if I am running detector on an old data.\nshort is like any programming language data type.  It is there for saving space purpose.  Otherwise, we only need double and long, nothing else.\nJust a suggestion.  Won't block your commit.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r470192817", "createdAt": "2020-08-13T19:22:14Z", "author": {"login": "kaituo"}, "path": "src/main/resources/mappings/anomaly-detectors.json", "diffHunk": "@@ -93,6 +93,9 @@\n         }\n       }\n     },\n+    \"shingle_size\": {\n+      \"type\": \"integer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjI2Mw=="}, "originalCommit": {"oid": "ae010a7844d1dc7a1f94c33796755b237513c5bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNDA5OQ==", "bodyText": "Ok thanks, since it's not a blocker I will merge it. I am aware what the short data type is, my comment was merely about consistency and common convention. Since we also haven't evaluated maximum limits to the shingle size, there isn't concrete evidence to support that the integer type is not appropriate for this field.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/203#discussion_r470224099", "createdAt": "2020-08-13T20:19:45Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/resources/mappings/anomaly-detectors.json", "diffHunk": "@@ -93,6 +93,9 @@\n         }\n       }\n     },\n+    \"shingle_size\": {\n+      \"type\": \"integer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjI2Mw=="}, "originalCommit": {"oid": "ae010a7844d1dc7a1f94c33796755b237513c5bf"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2907, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}