{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTkyMjAy", "number": 97, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozODo1MVrOD4arfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzowMDoxNFrOD4bCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgzOTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozODo1MVrOGPOxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyNzozMlrOGQIIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzkwOA==", "bodyText": "question. Just to confirm this if-and-only-if behavior since it is different from the last change, any data nodes that are marked but not marked hot are not eligible? if a data node is marked with some unknown new value, it would be ineligible based on this rule.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418623908", "createdAt": "2020-05-01T16:38:51Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);\n+    }\n+\n+    static class HotDataNodePredicate implements Predicate<DiscoveryNode> {\n+        @Override\n+        public boolean test(DiscoveryNode discoveryNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjMxMw==", "bodyText": "Currently, there are only hot and warm data nodes.\nPreviously, if a data node is marked with warm node, we ignore it\nNow, if a data node is marked with hot node or not marked at all, we use it.\nIf a data node is marked with some unknown new value in the future, it would be ineligible.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536313", "createdAt": "2020-05-04T15:48:04Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);\n+    }\n+\n+    static class HotDataNodePredicate implements Predicate<DiscoveryNode> {\n+        @Override\n+        public boolean test(DiscoveryNode discoveryNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzkwOA=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2MzY0Mg==", "bodyText": "Suggestion. Since this business logic/decision has important effects on system behavior, it is better to document it. Also, the documentation at line 49 is outdated based on this new change.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419563642", "createdAt": "2020-05-04T16:27:32Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);\n+    }\n+\n+    static class HotDataNodePredicate implements Predicate<DiscoveryNode> {\n+        @Override\n+        public boolean test(DiscoveryNode discoveryNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzkwOA=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg0OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0Mjo0NFrOGPO33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODoxNFrOGQGeJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTUwMw==", "bodyText": "issue. this predicate should be instantiated, maybe injected, and reused for calls and should not be instantiated once for every call.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418625503", "createdAt": "2020-05-01T16:42:44Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjQyMg==", "bodyText": "good point.  Changed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536422", "createdAt": "2020-05-04T15:48:14Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {\n+            if (eligibleNodeFilter.test(node)) {\n+                eligibleNodes.add(node);\n+            }\n+        }\n+        return eligibleNodes.toArray(new DiscoveryNode[0]);\n+    }\n+\n+    /**\n+     * @param node a discovery node\n+     * @return whether we should use this node for AD\n+     */\n+    public boolean isEligibleNode(DiscoveryNode node) {\n+        return new HotDataNodePredicate().test(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTUwMw=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg1MzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0NDoxN1rOGPO6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODoyOVrOGQGevw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNjE3MA==", "bodyText": "suggestion. stream helps improve code efficiency (eliminating need for intermediary data structures, variables creation and operation) and readability.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418626170", "createdAt": "2020-05-01T16:44:17Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjU3NQ==", "bodyText": "It is personal coding style.  Thanks for the suggestions.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536575", "createdAt": "2020-05-04T15:48:29Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes\n+     */\n+    public DiscoveryNode[] getEligibleDataNodes() {\n+        ClusterState state = this.clusterService.state();\n+        final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n+        final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n+        for (DiscoveryNode node : state.nodes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNjE3MA=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg2OTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1MDowMFrOGPPEYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODo0N1rOGQGfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyODcwNg==", "bodyText": "minor: indentation is not needed in java docs", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418628706", "createdAt": "2020-05-01T16:50:00Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjc4NA==", "bodyText": "Changed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536784", "createdAt": "2020-05-04T15:48:47Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {\n+    private static final Logger LOG = LogManager.getLogger(DiscoveryNodeFilterer.class);\n+    private final ClusterService clusterService;\n+\n+    public DiscoveryNodeFilterer(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+    }\n+\n+    /**\n+     * Find nodes that are elibile to be used by us.  For example, Ultrawarm\n+     *  introduces warm nodes into the ES cluster. Currently, we distribute\n+     *   model partitions to all data nodes in the cluster randomly, which\n+     *    could cause a model performance downgrade issue once warm nodes\n+     *     are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n+     * @return an array of eligible data nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyODcwNg=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg3NDg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1MTo1NlrOGPPHww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODo1MlrOGQGfyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTU3MQ==", "bodyText": "minor: typo nodes r", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418629571", "createdAt": "2020-05-01T16:51:56Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -119,7 +119,7 @@ public String getName() {\n     /**\n      * Constructor.\n      *\n-     * @param clusterStateUtils cluster info\n+     * @param nodeFilter utility class to select nodesr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjg0Mw==", "bodyText": "Changed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536843", "createdAt": "2020-05-04T15:48:52Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -119,7 +119,7 @@ public String getName() {\n     /**\n      * Constructor.\n      *\n-     * @param clusterStateUtils cluster info\n+     * @param nodeFilter utility class to select nodesr", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTU3MQ=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg3NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1Mjo1MFrOGPPJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODozOVrOGQGfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTk2MA==", "bodyText": "Minor. class documentation is missing. For public classes and methods, the responsibilities should be summarized for clients and readers.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418629960", "createdAt": "2020-05-01T16:52:50Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjcwMw==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536703", "createdAt": "2020-05-04T15:48:39Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyOTk2MA=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg5ODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzowMDoxNFrOGPPWkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OTowM1rOGQGgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMzM2MQ==", "bodyText": "I don't see any UT for this class. Would be great to add some.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r418633361", "createdAt": "2020-05-01T17:00:14Z", "author": {"login": "sohami"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjk4NQ==", "bodyText": "We have coverage tool to check coverage (75% line and 60% branch coverage). Without enough coverage, build would fail.  This class is covered by its callers\u2019 tests.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/97#discussion_r419536985", "createdAt": "2020-05-04T15:49:03Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DiscoveryNodeFilterer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+\n+public class DiscoveryNodeFilterer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMzM2MQ=="}, "originalCommit": {"oid": "840fc07f5e3ac71ad0176fb688d7ad64f7009b33"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3027, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}