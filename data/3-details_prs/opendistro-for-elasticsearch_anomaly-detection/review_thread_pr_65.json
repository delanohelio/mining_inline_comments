{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDM0NTc0", "number": 65, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxMTo0MlrODoz-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowNzozMlrODp_BbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIxMzEzOnYy", "diffSide": "LEFT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxMTo0MlrOF3l_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo1OTowMFrOF32ZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODM2Mw==", "bodyText": "Minor. FEATURE_SAMPLE_PREFERENCE can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393838363", "createdAt": "2020-03-17T17:11:42Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +200,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzE3NA==", "bodyText": "removed", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394107174", "createdAt": "2020-03-18T04:59:00Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +200,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODM2Mw=="}, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIyNzEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxNTozOVrOF3mIXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MDo1MFrOF3298g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDczNA==", "bodyText": "Minor. Some parts might be refactored with existing response parsing logic.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393840734", "createdAt": "2020-03-17T17:15:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference\n+    ) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private Optional<double[]> parseBucket(InternalDateRange.Bucket bucket, List<String> featureIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjU5NA==", "bodyText": "refactored", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394116594", "createdAt": "2020-03-18T05:40:50Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference\n+    ) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private Optional<double[]> parseBucket(InternalDateRange.Bucket bucket, List<String> featureIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDczNA=="}, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIzNzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxODoyOVrOF3mPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo1OToxNVrOF32ZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjUwOA==", "bodyText": "Minor. Since this parameter is not used, it can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393842508", "createdAt": "2020-03-17T17:18:29Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzIyMQ==", "bodyText": "removed", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394107221", "createdAt": "2020-03-18T04:59:15Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjUwOA=="}, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI0OTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NDowN1rOF4ONcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTowOToyNFrOF4coPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzM5Mw==", "bodyText": "log detector.getDetectorId()", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394497393", "createdAt": "2020-03-18T16:54:07Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMzYzMQ==", "bodyText": "good catch.  fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394733631", "createdAt": "2020-03-19T01:09:24Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzM5Mw=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3MjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1MVrOF4Oclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNToxODoxMlrOF5H6aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA==", "bodyText": "Why wrap IOException with IllegalStateException?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394501270", "createdAt": "2020-03-18T16:59:51Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNDA0OQ==", "bodyText": "I am following Lai's style in this class.  He prefers unchecked exception like IllegalStateException. IOException is checked exception and the method and and its callers have to declare the exception before the exception is handled.\nI prefer checked exceptions as they serve as documentation on what a method can throw and remind the caller to handle it.\nDo you have any preference on when to use checked and unchecked exceptions?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394734049", "createdAt": "2020-03-19T01:11:11Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MTg5Nw==", "bodyText": "https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-exceptions.html\ni don't mind the team making their own decisions.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395241897", "createdAt": "2020-03-19T18:40:14Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0ODAyMw==", "bodyText": "From https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html\n\nGenerally speaking, do not throw a RuntimeException or create a subclass of RuntimeException simply because you don't want to be bothered with specifying the exceptions your methods can throw.\nHere's the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.\n\nFor this case, generateInternalFeatureQuery method may throw IOException which caused by user's wrong query input. It's possible to be recovered from this for user to fix the query. And we just wrap the IOException without adding more info like custom error message; and no special handling logic for this IllegalStateException .  Seems we just don't want to be bothered with specifying the checked exception IOException.  So prefer to use checked exception here.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395248023", "createdAt": "2020-03-19T18:51:02Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0Mjc5NQ==", "bodyText": "Thanks for your analysis.  fixed it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395442795", "createdAt": "2020-03-20T05:18:12Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI4OTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMzo0NFrOF4Om1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDoxODo1NVrOF5HVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA==", "bodyText": "Is it possible ES returns different date range class other than InternalDateRange for this case?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394503894", "createdAt": "2020-03-18T17:03:44Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTQyMA==", "bodyText": "for 7.4, it is not possible.  For other versions, it is possible.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394729420", "createdAt": "2020-03-19T01:00:49Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0Mjg1Mg==", "bodyText": "Got it. So for other version, the InternalDateRange.class is still what we want?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395242852", "createdAt": "2020-03-19T18:41:56Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzI4NQ==", "bodyText": "other versions is untested.  Will do that when we release new versions.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395433285", "createdAt": "2020-03-20T04:18:55Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTUxODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNTowMFrOF4Q98g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDo1ODo1NlrOF4cVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MjU3OA==", "bodyText": "Should we do return here? Otherwise it will continue to line 202", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394542578", "createdAt": "2020-03-18T18:05:00Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODg4MA==", "bodyText": "good catch.  fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394728880", "createdAt": "2020-03-19T00:58:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MjU3OA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTUyNDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNjo0NVrOF4RByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTowODo1OVrOF4cnig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzU2MA==", "bodyText": "same as Yaliang's comment.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394543560", "createdAt": "2020-03-18T18:06:45Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMzQ1MA==", "bodyText": "This is Lai's code I guess.  I guess IOException is checked exception and the method and and its callers have to declare the exception before the exception is handled.  Lai prefers to use unchecked exception like IllegalStateException.\nI prefer checked exceptions as they serve as documentation on what a method can throw and remind the caller to handle it.\nDo you have any preference on when to use checked and unchecked exceptions?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394733450", "createdAt": "2020-03-19T01:08:59Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzU2MA=="}, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzUwNzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowNzozMlrOF5gFSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMjoyODoyOVrOF5nDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODc5Mw==", "bodyText": "question: why send OK response if there is an exception while running AD?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395838793", "createdAt": "2020-03-20T19:07:32Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,23 +184,24 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                anomalyDetectorRunner\n+                    .executeDetector(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n+                        XContentBuilder builder = channel\n+                            .newBuilder()\n+                            .startObject()\n+                            .field(ANOMALY_RESULT, anomalyResult)\n+                            .field(ANOMALY_DETECTOR, detector)\n+                            .endObject();\n                         channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                    }, exception -> {\n+                        logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+                        try {\n+                            XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MzAyOQ==", "bodyText": "Good catch.  I changed to RestStatus.INTERNAL_SERVER_ERROR.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395953029", "createdAt": "2020-03-21T02:28:29Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,23 +184,24 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                anomalyDetectorRunner\n+                    .executeDetector(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n+                        XContentBuilder builder = channel\n+                            .newBuilder()\n+                            .startObject()\n+                            .field(ANOMALY_RESULT, anomalyResult)\n+                            .field(ANOMALY_DETECTOR, detector)\n+                            .endObject();\n                         channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                    }, exception -> {\n+                        logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+                        try {\n+                            XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODc5Mw=="}, "originalCommit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3000, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}