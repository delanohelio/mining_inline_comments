{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjk0OTIy", "number": 108, "title": "Stats API: moved detector count call outside transport layer and make asynchronous", "bodyText": "Issue #, if available:\n#107\nDescription of changes:\nPreviously, getting the detector count for the stats API was leading to timeouts. The detector count was retrieved by making a timed blocking SearchRequest in the transport layer and tallying up the number of results.\nThis PR changes the way in which the detector count is retrieved. It moves the logic to get the detector count to a nonblocking IndicesStatsRequest in the Rest layer. Now, the rest layer makes two asynchronous requests:\n\nIndicesStatsRequest to get detector count (only if needed)\nADStatsRequest to get the node level stats\n\nOn response from those requests, it combines the node stats and the cluster stats together and sends the response back to the user.\nIn order to test, I modified existing tests and added a new one. I also manually tested on a local cluster using the command ./gradlew run -PnumNodes=3\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-05T18:58:20Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108", "merged": true, "mergeCommit": {"oid": "5bc0ccd40287fc9d1c3acbb51307fb43c64ca0a8"}, "closed": true, "closedAt": "2020-05-06T22:07:51Z", "author": {"login": "jmazanec15"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceXSsrgH2gAyNDEzNjk0OTIyOmYxMGVjMzVjNTA2YWFhN2Q2MjdjZDEzNDZiOTMyODE3MTg1ZmJjN2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcev9pagFqTQwNzAxNjAzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f10ec35c506aaa7d627cd1346b932817185fbc7c", "committedDate": "2020-05-05T17:12:03Z", "message": "moved detector count call outside transport layer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTM4NTI5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#pullrequestreview-406138529", "createdAt": "2020-05-05T20:40:49Z", "commit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0MDo0OVrOGQ6tuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo1NToyOFrOGQ7NcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MjM3Ng==", "bodyText": "Minor. other instanceof ADStatsResponse seems better.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420392376", "createdAt": "2020-05-05T20:40:49Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5Mzk0NA==", "bodyText": "Minor. Some edge cases might be handled more clearly, such as when both have node responses/cluster stats, throw an exception if unexpected.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420393944", "createdAt": "2020-05-05T20:43:35Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {\n+            return;\n+        }\n+\n+        ADStatsResponse otherResponse = (ADStatsResponse) other;\n+\n+        if (otherResponse.adStatsNodesResponse != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMDQ5Nw==", "bodyText": "Minor. Seems more consistent to use adStats.getClusterStats() as in the for loop.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420400497", "createdAt": "2020-05-05T20:55:28Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+            listener.onResponse(adStatsResponse);\n+        }\n+    }\n+\n+    /**\n+     * Make async request to get the Anomaly Detection statistics from each node and, onResponse, set the\n+     * ADStatsNodesResponse field of ADStatsResponse\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetNodeStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        client.execute(ADStatsNodesAction.INSTANCE, adStatsRequest, ActionListener.wrap(adStatsResponse -> {\n+            ADStatsResponse restADStatsResponse = new ADStatsResponse();\n+            restADStatsResponse.setADStatsNodesResponse(adStatsResponse);\n+            listener.onResponse(restADStatsResponse);\n+        }, listener::onFailure));\n+    }\n+\n+    /**\n+     * Collect Cluster Stats into map to be retrieved\n+     *\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     * @return Map containing Cluster Stats\n+     */\n+    private Map<String, Object> getClusterStats(ADStatsRequest adStatsRequest) {\n+        Map<String, Object> clusterStats = new HashMap<>();\n+        Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n+        for (String statName : adStats.getClusterStats().keySet()) {\n+            if (statsToBeRetrieved.contains(statName)) {\n+                clusterStats.put(statName, adStats.getStats().get(statName).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjA1MzU5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#pullrequestreview-406205359", "createdAt": "2020-05-05T22:42:32Z", "commit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MjozMlrOGQ-OIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo1MjowOVrOGQ-d3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgyNQ==", "bodyText": "minor. should ad_stats_action be renamed to ad_stats_node_action ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420449825", "createdAt": "2020-05-05T22:42:32Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "diffHunk": "@@ -18,18 +18,18 @@\n import org.elasticsearch.action.ActionType;\n \n /**\n- * ADStatsAction class\n+ * ADStatsNodesAction class\n  */\n-public class ADStatsAction extends ActionType<ADStatsResponse> {\n+public class ADStatsNodesAction extends ActionType<ADStatsNodesResponse> {\n \n-    public static final ADStatsAction INSTANCE = new ADStatsAction();\n+    public static final ADStatsNodesAction INSTANCE = new ADStatsNodesAction();\n     public static final String NAME = \"cluster:admin/ad_stats_action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MTc2Nw==", "bodyText": "minor. The get methods should be private because they are implementation not contract. Tests are done based on contract not implementation. Because implementation is not client-facing, the full documentation is optional.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420451767", "createdAt": "2020-05-05T22:47:13Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1Mzg1NA==", "bodyText": "a different way might be iterating the entries using map::entrySet", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420453854", "createdAt": "2020-05-05T22:52:09Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+            listener.onResponse(adStatsResponse);\n+        }\n+    }\n+\n+    /**\n+     * Make async request to get the Anomaly Detection statistics from each node and, onResponse, set the\n+     * ADStatsNodesResponse field of ADStatsResponse\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetNodeStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        client.execute(ADStatsNodesAction.INSTANCE, adStatsRequest, ActionListener.wrap(adStatsResponse -> {\n+            ADStatsResponse restADStatsResponse = new ADStatsResponse();\n+            restADStatsResponse.setADStatsNodesResponse(adStatsResponse);\n+            listener.onResponse(restADStatsResponse);\n+        }, listener::onFailure));\n+    }\n+\n+    /**\n+     * Collect Cluster Stats into map to be retrieved\n+     *\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     * @return Map containing Cluster Stats\n+     */\n+    private Map<String, Object> getClusterStats(ADStatsRequest adStatsRequest) {\n+        Map<String, Object> clusterStats = new HashMap<>();\n+        Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n+        for (String statName : adStats.getClusterStats().keySet()) {\n+            if (statsToBeRetrieved.contains(statName)) {\n+                clusterStats.put(statName, adStats.getStats().get(statName).getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMDQ5Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTcwMTU2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#pullrequestreview-406170156", "createdAt": "2020-05-05T21:30:53Z", "commit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMDo1M1rOGQ8URQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNzoyOFrOGQ_CrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODYyOQ==", "bodyText": "on is more of a name for listener.  You can change to getClusterStats or sth similar.  Same applies below.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420418629", "createdAt": "2020-05-05T21:30:53Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMzcyNQ==", "bodyText": "You only need docs statistics.  .setDocs(true) seems what you need.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420423725", "createdAt": "2020-05-05T21:41:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNTA4MA==", "bodyText": "new RuntimeException(\"Failed to get AD cluster stats\", e) is more common.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420425080", "createdAt": "2020-05-05T21:44:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw==", "bodyText": "Since you didn't set a value here, would it be possible that we pick some value set previously?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420463277", "createdAt": "2020-05-05T23:17:28Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8943661a1a01de7b06f461a805d5dda6fd41d111", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8943661a1a01de7b06f461a805d5dda6fd41d111", "committedDate": "2020-05-06T00:17:21Z", "message": "fixed minor issues with styling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjgxNzQ2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#pullrequestreview-406281746", "createdAt": "2020-05-06T03:19:07Z", "commit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxOTowN1rOGRCxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxOTowN1rOGRCxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNDMyNQ==", "bodyText": "Is it always 2?  If customers don't want to get detector count or only want to get detector count, this value should be 1.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420524325", "createdAt": "2020-05-06T03:19:07Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568dc07c3f404cd53341aca6f2d5a21cee756ab3", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/568dc07c3f404cd53341aca6f2d5a21cee756ab3", "committedDate": "2020-05-06T17:27:15Z", "message": "minor style fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDE2MDMw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#pullrequestreview-407016030", "createdAt": "2020-05-06T21:56:41Z", "commit": {"oid": "568dc07c3f404cd53341aca6f2d5a21cee756ab3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1676, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}