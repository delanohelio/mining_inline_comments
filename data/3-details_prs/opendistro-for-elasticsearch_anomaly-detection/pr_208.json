{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODEwNjM5", "number": 208, "title": "Change to use callbacks in cold start", "bodyText": "Issue #, if available:\n#78\nDescription of changes:\nThis PR changes the code path of cold start in the transport layer to use callbacks.\nPreviously, I created AD\u2019s ExecutorService that has one thread for cold starts in ColdStartRunner. When triggering a cold start, we can submit a task in the ExecutorService, and consult a hash map (keyed by detector Id) that cached the results of recent cold start results. Since I have to invoke the cold start thread in various callbacks, ColdStartRunner does not work anymore.  I created a cold start thread pool and put the cold start result in the transport state instead.\nThis PR also handles new exceptions like invalid queries introduced by recent changes on ModelManager and FeatureManager.\nThis PR lowers the severity of a couple of log messages in HashRing and RCFPollingTransportAction to avoid overwhelming log file readers. These log messages are common.\nThis PR corrects typos and updates known causes of EndRunException in comments.\nTesting done:\n\nSimulated cold start failures: Exceptions of cold starts can be seen by the transport layer.  EndRunException can cause AD jobs to be terminated.\nHappy case of a cold start still works.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-11T01:28:11Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208", "merged": true, "mergeCommit": {"oid": "92a586718f93a9ab934169cab0aca42c8641f4d9"}, "closed": true, "closedAt": "2020-08-19T18:23:03Z", "author": {"login": "kaituo"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc96o15AFqTQ2NTI5ODM3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAfx41gFqTQ3MDcyNDU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Mjk4Mzc5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-465298379", "createdAt": "2020-08-11T17:54:34Z", "commit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1NDozNFrOG_C6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1NDozNFrOG_C6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2MTE5NA==", "bodyText": "minor: Shall we add this as last constant? ( constants arranged alphabetically )", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r468761194", "createdAt": "2020-08-11T17:54:34Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -142,6 +141,7 @@\n     public static final String AD_BASE_URI = \"/_opendistro/_anomaly_detection\";\n     public static final String AD_BASE_DETECTORS_URI = AD_BASE_URI + \"/detectors\";\n     public static final String AD_THREAD_POOL_NAME = \"ad-threadpool\";\n+    public static final String COLD_START_THREAD_POOL_NAME = \"ad-cold-start-threadpool\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzAyMzA2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-465302306", "createdAt": "2020-08-11T17:59:42Z", "commit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1OTo0MlrOG_DGcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1OTo0MlrOG_DGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NDI3Mg==", "bodyText": "Question: Is it possible to have both (lastDetectionError and lastColdStartException) to be not null ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r468764272", "createdAt": "2020-08-11T17:59:42Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportState.java", "diffHunk": "@@ -88,8 +99,11 @@ public boolean expired(Duration stateTtl, Instant now) {\n         if (checkpoint != null) {\n             ans = ans && expired(stateTtl, now, checkpoint);\n         }\n-        if (lastError != null) {\n-            ans = ans && expired(stateTtl, now, lastError.getValue());\n+        if (lastDetectionError != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzA3NzQ2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-465307746", "createdAt": "2020-08-11T18:07:13Z", "commit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNzoxM1rOG_DWuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNzoxM1rOG_DWuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODQ0Mw==", "bodyText": "Question: Where is this used?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r468768443", "createdAt": "2020-08-11T18:07:13Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportStateManager.java", "diffHunk": "@@ -250,12 +250,37 @@ public String getLastError(String adID) {\n     }\n \n     /**\n-     * Set last error of a detector\n+     * Set last detection error of a detector\n      * @param adID detector id\n      * @param error error, can be null\n      */\n-    public void setLastError(String adID, String error) {\n+    public void setLastDetectionError(String adID, String error) {\n         TransportState state = transportStates.computeIfAbsent(adID, id -> new TransportState(id));\n-        state.setLastError(new SimpleEntry<>(error, clock.instant()));\n+        state.setLastDetectionError(new SimpleEntry<>(error, clock.instant()));\n+    }\n+\n+    /**\n+     * Set last cold start error of a detector\n+     * @param adID detector id\n+     * @param exception exception, can be null\n+     */\n+    public void setLastColdStartException(String adID, Exception exception) {\n+        TransportState state = transportStates.computeIfAbsent(adID, id -> new TransportState(id));\n+        state.setLastColdStartException(new SimpleEntry<>(exception, clock.instant()));\n+    }\n+\n+    /**\n+     * Get last cold start exception of a detector\n+     * @param adID detector id\n+     * @return last cold start exception for the detector\n+     */\n+    public Exception fetchColdStartException(String adID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007b5d3a0829f549e60109dafa8dced7ea7ed0b5"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDQ2OTAy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-465446902", "createdAt": "2020-08-11T21:37:36Z", "commit": {"oid": "d59b96bfd6d8e80fb8f2cc24e09e254e2f4e7786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozNzozNlrOG_KH8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozNzozNlrOG_KH8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3OTM0NQ==", "bodyText": "since detectorId is already extracted, can we reuse it here and other places like 811, 802 ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r468879345", "createdAt": "2020-08-11T21:37:36Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +775,122 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detector.getDetectorId(), \"Invalid training data\", exception, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59b96bfd6d8e80fb8f2cc24e09e254e2f4e7786"}, "originalPosition": 267}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDUyNzkw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-465452790", "createdAt": "2020-08-11T21:49:08Z", "commit": {"oid": "d59b96bfd6d8e80fb8f2cc24e09e254e2f4e7786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0OTowOFrOG_KbHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0OTowOFrOG_KbHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NDI1Mw==", "bodyText": "Shall we do short circuit like below?\nif ( exp == null )\nreturn null\nand then...\nif !(exp instanceof  ResourceNotFoundException)\nthrow exp\nString adID = detector.getDetectorID();\n......\nUsually it is hard to read if there is nested scope and else .\nAlso it increases Cyclomatic complexity .", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r468884253", "createdAt": "2020-08-11T21:49:08Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -397,32 +396,44 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n      *\n      * @param failure  object that may contain exceptions thrown\n      * @param detector detector object\n-     * @return whether cold start runs\n+     * @return exception if we get resource not found exception\n      * @throws AnomalyDetectionException List of exceptions we can throw\n      *     1. Exception from cold start:\n      *       1). InternalFailure due to\n      *         a. ElasticsearchTimeoutException thrown by putModelCheckpoint during cold start\n      *       2). EndRunException with endNow equal to false\n      *         a. training data not available\n      *         b. cold start cannot succeed\n+     *         c. invalid training data\n+     *       3) EndRunException with endNow equal to true\n+     *         a. invalid search query\n      *     2. LimitExceededException from one of RCF model node when the total size of the models\n      *      is more than X% of heap memory.\n      *     3. InternalFailure wrapping ElasticsearchTimeoutException inside caused by\n      *      RCF/Threshold model node failing to get checkpoint to restore model before timeout.\n      */\n-    private boolean coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n+    private Exception coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n         throws AnomalyDetectionException {\n         AnomalyDetectionException exp = failure.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59b96bfd6d8e80fb8f2cc24e09e254e2f4e7786"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzEwOTM0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-466310934", "createdAt": "2020-08-12T22:09:01Z", "commit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjowOTowMlrOG_0jQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzowMzozMFrOG_1xRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDQ2Ng==", "bodyText": "why keep the overhead of an additional thread pool constantly when model training is at best occasional?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r469574466", "createdAt": "2020-08-12T22:09:02Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -400,14 +399,21 @@ private static Void initGson() {\n \n     @Override\n     public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {\n-        return Collections\n-            .singletonList(\n+        return Arrays\n+            .asList(\n                 new FixedExecutorBuilder(\n                     settings,\n                     AD_THREAD_POOL_NAME,\n                     Math.max(1, EsExecutors.allocatedProcessors(settings) / 4),\n                     AnomalyDetectorSettings.AD_THEAD_POOL_QUEUE_SIZE,\n                     \"opendistro.ad.\" + AD_THREAD_POOL_NAME\n+                ),\n+                new FixedExecutorBuilder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODMyNw==", "bodyText": "why should this query call back be run separately?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r469578327", "createdAt": "2020-08-12T22:19:04Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -330,22 +336,38 @@ private LongStream getFullShingleEndTimes(long endTime, long intervalMilli) {\n      *                 onFailure is called with EndRunException on feature query creation errors\n      */\n     public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n+        ActionListener<Optional<Long>> latestTimeListener = ActionListener\n+            .wrap(latest -> getColdStartSamples(latest, detector, listener), listener::onFailure);\n         searchFeatureDao\n             .getLatestDataTime(\n                 detector,\n-                ActionListener.wrap(latest -> getColdStartSamples(latest, detector, listener), listener::onFailure)\n+                new ThreadedActionListener<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4NjY2Mw==", "bodyText": "what does a null exception mean? is that an exception or no exception? why not using optional?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r469586663", "createdAt": "2020-08-12T22:40:49Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportStateManager.java", "diffHunk": "@@ -250,12 +250,37 @@ public String getLastError(String adID) {\n     }\n \n     /**\n-     * Set last error of a detector\n+     * Set last detection error of a detector\n      * @param adID detector id\n      * @param error error, can be null\n      */\n-    public void setLastError(String adID, String error) {\n+    public void setLastDetectionError(String adID, String error) {\n         TransportState state = transportStates.computeIfAbsent(adID, id -> new TransportState(id));\n-        state.setLastError(new SimpleEntry<>(error, clock.instant()));\n+        state.setLastDetectionError(new SimpleEntry<>(error, clock.instant()));\n+    }\n+\n+    /**\n+     * Set last cold start error of a detector\n+     * @param adID detector id\n+     * @param exception exception, can be null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4ODU5OA==", "bodyText": "why getting the exception status involves updating the timestamp?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r469588598", "createdAt": "2020-08-12T22:46:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportStateManager.java", "diffHunk": "@@ -250,12 +250,37 @@ public String getLastError(String adID) {\n     }\n \n     /**\n-     * Set last error of a detector\n+     * Set last detection error of a detector\n      * @param adID detector id\n      * @param error error, can be null\n      */\n-    public void setLastError(String adID, String error) {\n+    public void setLastDetectionError(String adID, String error) {\n         TransportState state = transportStates.computeIfAbsent(adID, id -> new TransportState(id));\n-        state.setLastError(new SimpleEntry<>(error, clock.instant()));\n+        state.setLastDetectionError(new SimpleEntry<>(error, clock.instant()));\n+    }\n+\n+    /**\n+     * Set last cold start error of a detector\n+     * @param adID detector id\n+     * @param exception exception, can be null\n+     */\n+    public void setLastColdStartException(String adID, Exception exception) {\n+        TransportState state = transportStates.computeIfAbsent(adID, id -> new TransportState(id));\n+        state.setLastColdStartException(new SimpleEntry<>(exception, clock.instant()));\n+    }\n+\n+    /**\n+     * Get last cold start exception of a detector\n+     * @param adID detector id\n+     * @return last cold start exception for the detector\n+     */\n+    public Exception fetchColdStartException(String adID) {\n+        if (transportStates.containsKey(adID) && transportStates.get(adID).getLastColdStartException() != null) {\n+            Entry<Exception, Instant> errorAndTime = transportStates.get(adID).getLastColdStartException();\n+            errorAndTime.setValue(clock.instant());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NDQzNg==", "bodyText": "the two cases are different", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r469594436", "createdAt": "2020-08-12T23:03:30Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +776,115 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // partitioned model exceeds memory limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTcwMjA2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467170206", "createdAt": "2020-08-13T22:21:49Z", "commit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/49f82fe8fc4771c475584e5a185ed922942c9ebb", "committedDate": "2020-08-13T22:36:36Z", "message": "Change to use callbacks in cold start\n\nThis PR changes the code path of cold start in the transport layer to use callbacks.\n\nPreviously, I created AD\u2019s ExecutorService that has one thread for cold starts in ColdStartRunner. When we need to trigger a cold start, we can submit a task in the ExecutorService, and consult a hash map (keyed by detector Id) that cached the results of recent cold start results. Since I have to invoke the cold start thread in various callbacks, I created a cold start thread pool and put the cold start result in the transport state.\n\nThis PR also handles new exceptions like invalid queries introduced by recent changes on ModelManager and FeatureManager.\n\nThis PR lowers the severity of a couple of log messages in HashRing and RCFPollingTransportAction to avoid overwhelming readers of log files. These log messages are common.\n\nThis PR corrects typos and updates known causes of EndRunException in comments.\n\nTesting done:\n1. Simulated cold start failures: Exceptions of cold starts can be seen by the transport layer.\u00a0 EndRunException can cause AD jobs to be terminated.\n2. Happy case of a cold start still works."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e3065fc68a4841f4a3713390ac7acb07721e1c2", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/7e3065fc68a4841f4a3713390ac7acb07721e1c2", "committedDate": "2020-08-12T17:25:04Z", "message": "Refactoring code like not calling getDetectorId repeatedly"}, "afterCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/49f82fe8fc4771c475584e5a185ed922942c9ebb", "committedDate": "2020-08-13T22:36:36Z", "message": "Change to use callbacks in cold start\n\nThis PR changes the code path of cold start in the transport layer to use callbacks.\n\nPreviously, I created AD\u2019s ExecutorService that has one thread for cold starts in ColdStartRunner. When we need to trigger a cold start, we can submit a task in the ExecutorService, and consult a hash map (keyed by detector Id) that cached the results of recent cold start results. Since I have to invoke the cold start thread in various callbacks, I created a cold start thread pool and put the cold start result in the transport state.\n\nThis PR also handles new exceptions like invalid queries introduced by recent changes on ModelManager and FeatureManager.\n\nThis PR lowers the severity of a couple of log messages in HashRing and RCFPollingTransportAction to avoid overwhelming readers of log files. These log messages are common.\n\nThis PR corrects typos and updates known causes of EndRunException in comments.\n\nTesting done:\n1. Simulated cold start failures: Exceptions of cold starts can be seen by the transport layer.\u00a0 EndRunException can cause AD jobs to be terminated.\n2. Happy case of a cold start still works."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMyMTE2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467932116", "createdAt": "2020-08-15T00:40:39Z", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0MDozOVrOHBGa1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0MDozOVrOHBGa1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTc5OA==", "bodyText": "Why use () -> detectorId?  detectorId should work.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r470915798", "createdAt": "2020-08-15T00:40:39Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +776,109 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // e.g., partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Invalid training data\", exception, false)\n+                                );\n+                        } else if (exception instanceof ElasticsearchTimeoutException) {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new InternalFailure(detectorId, \"Time out while indexing cold start checkpoint\", exception)\n+                                );\n+                        } else {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Error while training model\", exception, false)\n+                                );\n+                        }\n+                    });\n+\n+                modelManager\n+                    .trainModel(\n+                        detector,\n+                        dataPoints,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, trainModelListener, false)\n+                    );\n+            } else {\n+                stateManager.setLastColdStartException(detectorId, new EndRunException(detectorId, \"Cannot get training data\", false));\n+            }\n+        }, exception -> {\n+            if (exception instanceof ElasticsearchTimeoutException) {\n+                stateManager\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new InternalFailure(detectorId, \"Time out while getting training data\", exception)\n+                    );\n+            } else if (exception instanceof AnomalyDetectionException) {\n+                // e.g., Invalid search query\n+                stateManager.setLastColdStartException(detectorId, exception);\n+            } else {\n+                stateManager\n+                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"Error while cold start\", exception, false));\n+            }\n+        });\n \n-        private AnomalyDetector detector;\n+        threadPool\n+            .executor(AnomalyDetectorPlugin.AD_THREAD_POOL_NAME)\n+            .execute(\n+                () -> featureManager\n+                    .getColdStartData(\n+                        detector,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, listener, false)\n+                    )\n+            );\n+    }\n \n-        ColdStartJob(AnomalyDetector detector) {\n-            this.detector = detector;\n-        }\n+    /**\n+     * Check if checkpoint for an detector exists or not.  If not and previous\n+     *  run is not EndRunException whose endNow is true, trigger cold start.\n+     * @param detector detector object\n+     * @return previous cold start exception\n+     */\n+    private Exception coldStartIfNoCheckPoint(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n \n-        @Override\n-        public Boolean call() {\n-            String detectorId = detector.getDetectorId();\n-            try {\n-                Optional<double[][]> traingData = featureManager.getColdStartData(detector);\n-                if (traingData.isPresent()) {\n-                    double[][] trainingPoints = traingData.get();\n-                    modelManager.trainModel(detector, trainingPoints);\n-                    return true;\n-                } else {\n-                    throw new EndRunException(detectorId, \"Cannot get training data\", false);\n-                }\n+        Exception previousException = stateManager.fetchColdStartException(detectorId);\n \n-            } catch (ElasticsearchTimeoutException timeoutEx) {\n-                throw new InternalFailure(\n-                    detector.getDetectorId(),\n-                    \"Time out while indexing cold start checkpoint or get training data\",\n-                    timeoutEx\n-                );\n-            } catch (EndRunException endRunEx) {\n-                throw endRunEx;\n-            } catch (Exception ex) {\n-                throw new EndRunException(detector.getDetectorId(), \"Error while cold start\", ex, false);\n+        if (previousException != null) {\n+            LOG.error(\"Previous exception of {}: {}\", () -> detectorId, () -> previousException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "originalPosition": 364}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMyODc3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467932877", "createdAt": "2020-08-15T00:48:15Z", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0ODoxNVrOHBGeNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0ODoxNVrOHBGeNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjY2Mw==", "bodyText": "If it's EndRunException  and  isEndNow() is true, JobRunner will stop detector job. Will the previousException be cleaned when stop detector job? Why need to check previous exception ? If user wait for some time and restart detector, cluster state may change, and user may not get previous exception any more.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r470916663", "createdAt": "2020-08-15T00:48:15Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +776,109 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // e.g., partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Invalid training data\", exception, false)\n+                                );\n+                        } else if (exception instanceof ElasticsearchTimeoutException) {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new InternalFailure(detectorId, \"Time out while indexing cold start checkpoint\", exception)\n+                                );\n+                        } else {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Error while training model\", exception, false)\n+                                );\n+                        }\n+                    });\n+\n+                modelManager\n+                    .trainModel(\n+                        detector,\n+                        dataPoints,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, trainModelListener, false)\n+                    );\n+            } else {\n+                stateManager.setLastColdStartException(detectorId, new EndRunException(detectorId, \"Cannot get training data\", false));\n+            }\n+        }, exception -> {\n+            if (exception instanceof ElasticsearchTimeoutException) {\n+                stateManager\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new InternalFailure(detectorId, \"Time out while getting training data\", exception)\n+                    );\n+            } else if (exception instanceof AnomalyDetectionException) {\n+                // e.g., Invalid search query\n+                stateManager.setLastColdStartException(detectorId, exception);\n+            } else {\n+                stateManager\n+                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"Error while cold start\", exception, false));\n+            }\n+        });\n \n-        private AnomalyDetector detector;\n+        threadPool\n+            .executor(AnomalyDetectorPlugin.AD_THREAD_POOL_NAME)\n+            .execute(\n+                () -> featureManager\n+                    .getColdStartData(\n+                        detector,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, listener, false)\n+                    )\n+            );\n+    }\n \n-        ColdStartJob(AnomalyDetector detector) {\n-            this.detector = detector;\n-        }\n+    /**\n+     * Check if checkpoint for an detector exists or not.  If not and previous\n+     *  run is not EndRunException whose endNow is true, trigger cold start.\n+     * @param detector detector object\n+     * @return previous cold start exception\n+     */\n+    private Exception coldStartIfNoCheckPoint(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n \n-        @Override\n-        public Boolean call() {\n-            String detectorId = detector.getDetectorId();\n-            try {\n-                Optional<double[][]> traingData = featureManager.getColdStartData(detector);\n-                if (traingData.isPresent()) {\n-                    double[][] trainingPoints = traingData.get();\n-                    modelManager.trainModel(detector, trainingPoints);\n-                    return true;\n-                } else {\n-                    throw new EndRunException(detectorId, \"Cannot get training data\", false);\n-                }\n+        Exception previousException = stateManager.fetchColdStartException(detectorId);\n \n-            } catch (ElasticsearchTimeoutException timeoutEx) {\n-                throw new InternalFailure(\n-                    detector.getDetectorId(),\n-                    \"Time out while indexing cold start checkpoint or get training data\",\n-                    timeoutEx\n-                );\n-            } catch (EndRunException endRunEx) {\n-                throw endRunEx;\n-            } catch (Exception ex) {\n-                throw new EndRunException(detector.getDetectorId(), \"Error while cold start\", ex, false);\n+        if (previousException != null) {\n+            LOG.error(\"Previous exception of {}: {}\", () -> detectorId, () -> previousException);\n+            if (previousException instanceof EndRunException && ((EndRunException) previousException).isEndNow()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "originalPosition": 365}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMzMjMz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467933233", "createdAt": "2020-08-15T00:51:24Z", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1MToyNFrOHBGfuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1MToyNFrOHBGfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNzA1MQ==", "bodyText": "Should we throw exception ? Why not record this exception as previousException ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r470917051", "createdAt": "2020-08-15T00:51:24Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +776,109 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // e.g., partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Invalid training data\", exception, false)\n+                                );\n+                        } else if (exception instanceof ElasticsearchTimeoutException) {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new InternalFailure(detectorId, \"Time out while indexing cold start checkpoint\", exception)\n+                                );\n+                        } else {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Error while training model\", exception, false)\n+                                );\n+                        }\n+                    });\n+\n+                modelManager\n+                    .trainModel(\n+                        detector,\n+                        dataPoints,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, trainModelListener, false)\n+                    );\n+            } else {\n+                stateManager.setLastColdStartException(detectorId, new EndRunException(detectorId, \"Cannot get training data\", false));\n+            }\n+        }, exception -> {\n+            if (exception instanceof ElasticsearchTimeoutException) {\n+                stateManager\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new InternalFailure(detectorId, \"Time out while getting training data\", exception)\n+                    );\n+            } else if (exception instanceof AnomalyDetectionException) {\n+                // e.g., Invalid search query\n+                stateManager.setLastColdStartException(detectorId, exception);\n+            } else {\n+                stateManager\n+                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"Error while cold start\", exception, false));\n+            }\n+        });\n \n-        private AnomalyDetector detector;\n+        threadPool\n+            .executor(AnomalyDetectorPlugin.AD_THREAD_POOL_NAME)\n+            .execute(\n+                () -> featureManager\n+                    .getColdStartData(\n+                        detector,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, listener, false)\n+                    )\n+            );\n+    }\n \n-        ColdStartJob(AnomalyDetector detector) {\n-            this.detector = detector;\n-        }\n+    /**\n+     * Check if checkpoint for an detector exists or not.  If not and previous\n+     *  run is not EndRunException whose endNow is true, trigger cold start.\n+     * @param detector detector object\n+     * @return previous cold start exception\n+     */\n+    private Exception coldStartIfNoCheckPoint(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n \n-        @Override\n-        public Boolean call() {\n-            String detectorId = detector.getDetectorId();\n-            try {\n-                Optional<double[][]> traingData = featureManager.getColdStartData(detector);\n-                if (traingData.isPresent()) {\n-                    double[][] trainingPoints = traingData.get();\n-                    modelManager.trainModel(detector, trainingPoints);\n-                    return true;\n-                } else {\n-                    throw new EndRunException(detectorId, \"Cannot get training data\", false);\n-                }\n+        Exception previousException = stateManager.fetchColdStartException(detectorId);\n \n-            } catch (ElasticsearchTimeoutException timeoutEx) {\n-                throw new InternalFailure(\n-                    detector.getDetectorId(),\n-                    \"Time out while indexing cold start checkpoint or get training data\",\n-                    timeoutEx\n-                );\n-            } catch (EndRunException endRunEx) {\n-                throw endRunEx;\n-            } catch (Exception ex) {\n-                throw new EndRunException(detector.getDetectorId(), \"Error while cold start\", ex, false);\n+        if (previousException != null) {\n+            LOG.error(\"Previous exception of {}: {}\", () -> detectorId, () -> previousException);\n+            if (previousException instanceof EndRunException && ((EndRunException) previousException).isEndNow()) {\n+                return previousException;\n             }\n         }\n \n+        stateManager.getDetectorCheckpoint(detectorId, ActionListener.wrap(checkpointExists -> {\n+            if (!checkpointExists) {\n+                LOG.info(\"Trigger cold start for {}\", detectorId);\n+                coldStart(detector);\n+            }\n+        }, exception -> {\n+            Throwable cause = ExceptionsHelper.unwrapCause(exception);\n+            if (cause instanceof IndexNotFoundException) {\n+                LOG.info(\"Trigger cold start for {}\", detectorId);\n+                coldStart(detector);\n+            } else {\n+                LOG.error(String.format(\"Fail to get checkpoint state for %s\", detectorId), exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "originalPosition": 381}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMzNjQ5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467933649", "createdAt": "2020-08-15T00:55:21Z", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1NToyMVrOHBGhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1NToyMVrOHBGhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNzUzMQ==", "bodyText": "cold error  means cold start error?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r470917531", "createdAt": "2020-08-15T00:55:21Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportState.java", "diffHunk": "@@ -29,16 +29,19 @@\n     private Entry<Integer, Instant> partitonNumber;\n     // checkpoint fetch time\n     private Instant checkpoint;\n-    // last error. Used by DetectorStateHandler to check if the error for a\n+    // last detection error. Used by DetectorStateHandler to check if the error for a\n     // detector has changed or not. If changed, trigger indexing.\n-    private Entry<String, Instant> lastError;\n+    private Entry<String, Instant> lastDetectionError;\n+    // last training error. Used to save cold error by a concurrent cold start thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMzOTc3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-467933977", "createdAt": "2020-08-15T00:59:24Z", "commit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1OToyNFrOHBGjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1OToyNFrOHBGjKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNzkzMQ==", "bodyText": "Why not return this exception ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r470917931", "createdAt": "2020-08-15T00:59:24Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -397,32 +396,45 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n      *\n      * @param failure  object that may contain exceptions thrown\n      * @param detector detector object\n-     * @return whether cold start runs\n+     * @return exception if we get resource not found exception\n      * @throws AnomalyDetectionException List of exceptions we can throw\n      *     1. Exception from cold start:\n      *       1). InternalFailure due to\n      *         a. ElasticsearchTimeoutException thrown by putModelCheckpoint during cold start\n      *       2). EndRunException with endNow equal to false\n      *         a. training data not available\n      *         b. cold start cannot succeed\n+     *         c. invalid training data\n+     *       3) EndRunException with endNow equal to true\n+     *         a. invalid search query\n      *     2. LimitExceededException from one of RCF model node when the total size of the models\n      *      is more than X% of heap memory.\n      *     3. InternalFailure wrapping ElasticsearchTimeoutException inside caused by\n      *      RCF/Threshold model node failing to get checkpoint to restore model before timeout.\n      */\n-    private boolean coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n+    private Exception coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n         throws AnomalyDetectionException {\n         AnomalyDetectionException exp = failure.get();\n-        if (exp != null) {\n-            if (exp instanceof ResourceNotFoundException) {\n-                LOG.info(\"Trigger cold start for {}\", detector.getDetectorId());\n-                globalRunner.compute(new ColdStartJob(detector));\n-                return true;\n-            } else {\n-                throw exp;\n+        if (exp == null) {\n+            return null;\n+        }\n+\n+        if (!(exp instanceof ResourceNotFoundException)) {\n+            throw exp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f82fe8fc4771c475584e5a185ed922942c9ebb"}, "originalPosition": 191}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec18704741b04e245a2372f349c4853629b5cab", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8ec18704741b04e245a2372f349c4853629b5cab", "committedDate": "2020-08-17T18:34:11Z", "message": "Change error to use Optional and use a common last update time in transport state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f", "committedDate": "2020-08-18T00:23:22Z", "message": "Update comment and log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTI1OTAz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-468925903", "createdAt": "2020-08-18T01:06:50Z", "commit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTowNjo1MFrOHB_zQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTo1NDowNVrOHCAjWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NTkzNw==", "bodyText": "minor. why not using configured executor name instead of hardcoding it in all places?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471855937", "createdAt": "2020-08-18T01:06:50Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -331,10 +338,12 @@ private LongStream getFullShingleEndTimes(long endTime, long intervalMilli, int\n      *                 onFailure is called with EndRunException on feature query creation errors\n      */\n     public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n+        ActionListener<Optional<Long>> latestTimeListener = ActionListener\n+            .wrap(latest -> getColdStartSamples(latest, detector, listener), listener::onFailure);\n         searchFeatureDao\n             .getLatestDataTime(\n                 detector,\n-                ActionListener.wrap(latest -> getColdStartSamples(latest, detector, listener), listener::onFailure)\n+                new ThreadedActionListener<>(logger, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, latestTimeListener, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NzI4MA==", "bodyText": "minor. documentation is missing for the interface of this class.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471857280", "createdAt": "2020-08-18T01:11:55Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportState.java", "diffHunk": "@@ -15,86 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n \n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n \n public class TransportState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NzkxNg==", "bodyText": "minor. the input can be simplified to one parameter as the expiration time.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471857916", "createdAt": "2020-08-18T01:14:15Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportState.java", "diffHunk": "@@ -15,86 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n \n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n \n public class TransportState {\n     private String detectorId;\n-    // detector definition and the definition fetch time\n-    private Entry<AnomalyDetector, Instant> detectorDef;\n-    // number of partitions and the number's fetch time\n-    private Entry<Integer, Instant> partitonNumber;\n+    // detector definition\n+    private AnomalyDetector detectorDef;\n+    // number of partitions\n+    private int partitonNumber;\n     // checkpoint fetch time\n-    private Instant checkpoint;\n-    // last error. Used by DetectorStateHandler to check if the error for a\n+    private Instant lastAccessTime;\n+    // last detection error. Used by DetectorStateHandler to check if the error for a\n     // detector has changed or not. If changed, trigger indexing.\n-    private Entry<String, Instant> lastError;\n-\n-    public TransportState(String detectorId) {\n+    private Optional<String> lastDetectionError;\n+    // last training error. Used to save cold start error by a concurrent cold start thread.\n+    private Optional<Exception> lastColdStartException;\n+    // flag indicating whether checkpoint for the detector exists\n+    private boolean checkPointExists;\n+    // clock to get current time\n+    private final Clock clock;\n+\n+    public TransportState(String detectorId, Clock clock) {\n         this.detectorId = detectorId;\n-        detectorDef = null;\n-        partitonNumber = null;\n-        checkpoint = null;\n-        lastError = null;\n+        this.detectorDef = null;\n+        this.partitonNumber = -1;\n+        this.lastAccessTime = clock.instant();\n+        this.lastDetectionError = Optional.empty();\n+        this.lastColdStartException = Optional.empty();\n+        this.checkPointExists = false;\n+        this.clock = clock;\n     }\n \n     public String getDetectorId() {\n         return detectorId;\n     }\n \n-    public Entry<AnomalyDetector, Instant> getDetectorDef() {\n+    public AnomalyDetector getDetectorDef() {\n+        refreshLastUpdateTime();\n         return detectorDef;\n     }\n \n-    public void setDetectorDef(Entry<AnomalyDetector, Instant> detectorDef) {\n+    public void setDetectorDef(AnomalyDetector detectorDef) {\n         this.detectorDef = detectorDef;\n+        refreshLastUpdateTime();\n     }\n \n-    public Entry<Integer, Instant> getPartitonNumber() {\n+    public int getPartitonNumber() {\n+        refreshLastUpdateTime();\n         return partitonNumber;\n     }\n \n-    public void setPartitonNumber(Entry<Integer, Instant> partitonNumber) {\n+    public void setPartitonNumber(int partitonNumber) {\n         this.partitonNumber = partitonNumber;\n+        refreshLastUpdateTime();\n     }\n \n-    public Instant getCheckpoint() {\n-        return checkpoint;\n+    public boolean doesCheckpointExists() {\n+        refreshLastUpdateTime();\n+        return checkPointExists;\n     }\n \n-    public void setCheckpoint(Instant checkpoint) {\n-        this.checkpoint = checkpoint;\n+    public void setCheckpointExists(boolean checkpointExists) {\n+        refreshLastUpdateTime();\n+        this.checkPointExists = checkpointExists;\n     };\n \n-    public Entry<String, Instant> getLastError() {\n-        return lastError;\n+    public Optional<String> getLastDetectionError() {\n+        refreshLastUpdateTime();\n+        return lastDetectionError;\n     }\n \n-    public void setLastError(Entry<String, Instant> lastError) {\n-        this.lastError = lastError;\n+    public void setLastDetectionError(String lastError) {\n+        this.lastDetectionError = Optional.ofNullable(lastError);\n+        refreshLastUpdateTime();\n     }\n \n-    public boolean expired(Duration stateTtl, Instant now) {\n-        boolean ans = true;\n-        if (detectorDef != null) {\n-            ans = ans && expired(stateTtl, now, detectorDef.getValue());\n-        }\n-        if (partitonNumber != null) {\n-            ans = ans && expired(stateTtl, now, partitonNumber.getValue());\n-        }\n-        if (checkpoint != null) {\n-            ans = ans && expired(stateTtl, now, checkpoint);\n-        }\n-        if (lastError != null) {\n-            ans = ans && expired(stateTtl, now, lastError.getValue());\n-        }\n-        return ans;\n+    public Optional<Exception> getLastColdStartException() {\n+        refreshLastUpdateTime();\n+        return lastColdStartException;\n+    }\n+\n+    public void setLastColdStartException(Exception lastColdStartError) {\n+        this.lastColdStartException = Optional.ofNullable(lastColdStartError);\n+        refreshLastUpdateTime();\n     }\n \n-    private boolean expired(Duration stateTtl, Instant now, Instant toCheck) {\n-        return toCheck.plus(stateTtl).isBefore(now);\n+    private void refreshLastUpdateTime() {\n+        lastAccessTime = clock.instant();\n+    }\n+\n+    public boolean expired(Duration stateTtl, Instant now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2MTMyNw==", "bodyText": "minor.\nwhen resource is not found, what exception does this method return? why the general exception instead of the more specific one? if other exceptions occur, what does this method return?\nalso who is we? does it refer to the reader of the doc? the client of the interface? the developer of the implementation? or the software implementation? please avoid incorrect/ambiguous use of we when the referee is software.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471861327", "createdAt": "2020-08-18T01:27:11Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -397,32 +396,46 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n      *\n      * @param failure  object that may contain exceptions thrown\n      * @param detector detector object\n-     * @return whether cold start runs\n+     * @return exception if we get resource not found exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2NTI5MQ==", "bodyText": "question. what should be returned when the checkpoint exists?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471865291", "createdAt": "2020-08-18T01:42:07Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +777,110 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // e.g., partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Invalid training data\", exception, false)\n+                                );\n+                        } else if (exception instanceof ElasticsearchTimeoutException) {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new InternalFailure(detectorId, \"Time out while indexing cold start checkpoint\", exception)\n+                                );\n+                        } else {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Error while training model\", exception, false)\n+                                );\n+                        }\n+                    });\n+\n+                modelManager\n+                    .trainModel(\n+                        detector,\n+                        dataPoints,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, trainModelListener, false)\n+                    );\n+            } else {\n+                stateManager.setLastColdStartException(detectorId, new EndRunException(detectorId, \"Cannot get training data\", false));\n+            }\n+        }, exception -> {\n+            if (exception instanceof ElasticsearchTimeoutException) {\n+                stateManager\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new InternalFailure(detectorId, \"Time out while getting training data\", exception)\n+                    );\n+            } else if (exception instanceof AnomalyDetectionException) {\n+                // e.g., Invalid search query\n+                stateManager.setLastColdStartException(detectorId, exception);\n+            } else {\n+                stateManager\n+                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"Error while cold start\", exception, false));\n+            }\n+        });\n \n-        private AnomalyDetector detector;\n+        threadPool\n+            .executor(AnomalyDetectorPlugin.AD_THREAD_POOL_NAME)\n+            .execute(\n+                () -> featureManager\n+                    .getColdStartData(\n+                        detector,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, listener, false)\n+                    )\n+            );\n+    }\n \n-        ColdStartJob(AnomalyDetector detector) {\n-            this.detector = detector;\n-        }\n+    /**\n+     * Check if checkpoint for an detector exists or not.  If not and previous\n+     *  run is not EndRunException whose endNow is true, trigger cold start.\n+     * @param detector detector object\n+     * @return previous cold start exception\n+     */\n+    private Optional<Exception> coldStartIfNoCheckPoint(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n \n-        @Override\n-        public Boolean call() {\n-            String detectorId = detector.getDetectorId();\n-            try {\n-                Optional<double[][]> traingData = featureManager.getColdStartData(detector);\n-                if (traingData.isPresent()) {\n-                    double[][] trainingPoints = traingData.get();\n-                    modelManager.trainModel(detector, trainingPoints);\n-                    return true;\n-                } else {\n-                    throw new EndRunException(detectorId, \"Cannot get training data\", false);\n-                }\n+        Optional<Exception> previousException = stateManager.fetchColdStartException(detectorId);\n \n-            } catch (ElasticsearchTimeoutException timeoutEx) {\n-                throw new InternalFailure(\n-                    detector.getDetectorId(),\n-                    \"Time out while indexing cold start checkpoint or get training data\",\n-                    timeoutEx\n-                );\n-            } catch (EndRunException endRunEx) {\n-                throw endRunEx;\n-            } catch (Exception ex) {\n-                throw new EndRunException(detector.getDetectorId(), \"Error while cold start\", ex, false);\n+        if (previousException.isPresent()) {\n+            Exception exception = previousException.get();\n+            LOG.error(\"Previous exception of {}: {}\", detectorId, exception);\n+            if (exception instanceof EndRunException && ((EndRunException) exception).isEndNow()) {\n+                return previousException;\n             }\n         }\n \n+        stateManager.getDetectorCheckpoint(detectorId, ActionListener.wrap(checkpointExists -> {\n+            if (!checkpointExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2ODI0OQ==", "bodyText": "question. why should exception be cleared only when data point is missing?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r471868249", "createdAt": "2020-08-18T01:54:05Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -770,39 +777,110 @@ private boolean shouldStart(\n         return true;\n     }\n \n-    class ColdStartJob implements Callable<Boolean> {\n+    private void coldStart(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n+\n+        ActionListener<Optional<double[][]>> listener = ActionListener.wrap(trainingData -> {\n+            if (trainingData.isPresent()) {\n+                double[][] dataPoints = trainingData.get();\n+\n+                ActionListener<Void> trainModelListener = ActionListener\n+                    .wrap(res -> { LOG.info(\"Succeeded in training {}\", detectorId); }, exception -> {\n+                        if (exception instanceof AnomalyDetectionException) {\n+                            // e.g., partitioned model exceeds memory limit\n+                            stateManager.setLastColdStartException(detectorId, exception);\n+                        } else if (exception instanceof IllegalArgumentException) {\n+                            // IllegalArgumentException due to invalid training data\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Invalid training data\", exception, false)\n+                                );\n+                        } else if (exception instanceof ElasticsearchTimeoutException) {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new InternalFailure(detectorId, \"Time out while indexing cold start checkpoint\", exception)\n+                                );\n+                        } else {\n+                            stateManager\n+                                .setLastColdStartException(\n+                                    detectorId,\n+                                    new EndRunException(detectorId, \"Error while training model\", exception, false)\n+                                );\n+                        }\n+                    });\n+\n+                modelManager\n+                    .trainModel(\n+                        detector,\n+                        dataPoints,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, trainModelListener, false)\n+                    );\n+            } else {\n+                stateManager.setLastColdStartException(detectorId, new EndRunException(detectorId, \"Cannot get training data\", false));\n+            }\n+        }, exception -> {\n+            if (exception instanceof ElasticsearchTimeoutException) {\n+                stateManager\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new InternalFailure(detectorId, \"Time out while getting training data\", exception)\n+                    );\n+            } else if (exception instanceof AnomalyDetectionException) {\n+                // e.g., Invalid search query\n+                stateManager.setLastColdStartException(detectorId, exception);\n+            } else {\n+                stateManager\n+                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"Error while cold start\", exception, false));\n+            }\n+        });\n \n-        private AnomalyDetector detector;\n+        threadPool\n+            .executor(AnomalyDetectorPlugin.AD_THREAD_POOL_NAME)\n+            .execute(\n+                () -> featureManager\n+                    .getColdStartData(\n+                        detector,\n+                        new ThreadedActionListener<>(LOG, threadPool, AnomalyDetectorPlugin.AD_THREAD_POOL_NAME, listener, false)\n+                    )\n+            );\n+    }\n \n-        ColdStartJob(AnomalyDetector detector) {\n-            this.detector = detector;\n-        }\n+    /**\n+     * Check if checkpoint for an detector exists or not.  If not and previous\n+     *  run is not EndRunException whose endNow is true, trigger cold start.\n+     * @param detector detector object\n+     * @return previous cold start exception\n+     */\n+    private Optional<Exception> coldStartIfNoCheckPoint(AnomalyDetector detector) {\n+        String detectorId = detector.getDetectorId();\n \n-        @Override\n-        public Boolean call() {\n-            String detectorId = detector.getDetectorId();\n-            try {\n-                Optional<double[][]> traingData = featureManager.getColdStartData(detector);\n-                if (traingData.isPresent()) {\n-                    double[][] trainingPoints = traingData.get();\n-                    modelManager.trainModel(detector, trainingPoints);\n-                    return true;\n-                } else {\n-                    throw new EndRunException(detectorId, \"Cannot get training data\", false);\n-                }\n+        Optional<Exception> previousException = stateManager.fetchColdStartException(detectorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 352}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzczNzY2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-469773766", "createdAt": "2020-08-18T19:51:41Z", "commit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MTo0MVrOHCjjgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MTo0MVrOHCjjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTczMQ==", "bodyText": "Is it possible that last cold start still not finished when execute coldStart ? Should we check the state of last cold start ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r472441731", "createdAt": "2020-08-18T19:51:41Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -397,32 +396,46 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n      *\n      * @param failure  object that may contain exceptions thrown\n      * @param detector detector object\n-     * @return whether cold start runs\n+     * @return exception if we get resource not found exception\n      * @throws AnomalyDetectionException List of exceptions we can throw\n      *     1. Exception from cold start:\n      *       1). InternalFailure due to\n      *         a. ElasticsearchTimeoutException thrown by putModelCheckpoint during cold start\n      *       2). EndRunException with endNow equal to false\n      *         a. training data not available\n      *         b. cold start cannot succeed\n+     *         c. invalid training data\n+     *       3) EndRunException with endNow equal to true\n+     *         a. invalid search query\n      *     2. LimitExceededException from one of RCF model node when the total size of the models\n      *      is more than X% of heap memory.\n      *     3. InternalFailure wrapping ElasticsearchTimeoutException inside caused by\n      *      RCF/Threshold model node failing to get checkpoint to restore model before timeout.\n      */\n-    private boolean coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n+    private Exception coldStartIfNoModel(AtomicReference<AnomalyDetectionException> failure, AnomalyDetector detector)\n         throws AnomalyDetectionException {\n         AnomalyDetectionException exp = failure.get();\n-        if (exp != null) {\n-            if (exp instanceof ResourceNotFoundException) {\n-                LOG.info(\"Trigger cold start for {}\", detector.getDetectorId());\n-                globalRunner.compute(new ColdStartJob(detector));\n-                return true;\n-            } else {\n-                throw exp;\n+        if (exp == null) {\n+            return null;\n+        }\n+\n+        if (!(exp instanceof ResourceNotFoundException)) {\n+            throw exp;\n+        }\n+\n+        // fetch previous cold start exception\n+        String adID = detector.getDetectorId();\n+        final Optional<Exception> previousException = stateManager.fetchColdStartException(adID);\n+        if (previousException.isPresent()) {\n+            Exception exception = previousException.get();\n+            LOG.error(\"Previous exception of {}: {}\", () -> adID, () -> exception);\n+            if (exception instanceof EndRunException && ((EndRunException) exception).isEndNow()) {\n+                return exception;\n             }\n         }\n-        return false;\n+        LOG.info(\"Trigger cold start for {}\", detector.getDetectorId());\n+        coldStart(detector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 206}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dc0e8e31bc6d5fb20ba7ff96a7939564d62d58", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/72dc0e8e31bc6d5fb20ba7ff96a7939564d62d58", "committedDate": "2020-08-18T23:55:25Z", "message": "Make threadpool name configurable and add get checkpoint exception to last cold start exception, and more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5OTEzOTcw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-469913970", "createdAt": "2020-08-19T00:20:52Z", "commit": {"oid": "72dc0e8e31bc6d5fb20ba7ff96a7939564d62d58"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoyMDo1MlrOHCrBMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoyOTowMVrOHCrJ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2NDAxNg==", "bodyText": "minor. why not do expired(expirationdate=now-ttl)? ttl is an odd parameter.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r472564016", "createdAt": "2020-08-19T00:20:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportStateManager.java", "diffHunk": "@@ -187,7 +188,7 @@ public void maintenance() {\n             String detectorId = entry.getKey();\n             try {\n                 TransportState state = entry.getValue();\n-                if (state.expired(stateTtl, clock.instant())) {\n+                if (state.expired(stateTtl)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dc0e8e31bc6d5fb20ba7ff96a7939564d62d58"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2NjI1Mw==", "bodyText": "also all the public methods (interface)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#discussion_r472566253", "createdAt": "2020-08-19T00:29:01Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/TransportState.java", "diffHunk": "@@ -15,86 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n \n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n \n public class TransportState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NzI4MA=="}, "originalCommit": {"oid": "2f63d9e1d7d3525ddfdff80e717eaaf97d4d434f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb86d965958039026cf501e8b129cbf4e9ebbb21", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/bb86d965958039026cf501e8b129cbf4e9ebbb21", "committedDate": "2020-08-19T17:50:23Z", "message": "Add comments to transport state methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzI0NTU2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/208#pullrequestreview-470724556", "createdAt": "2020-08-19T18:18:47Z", "commit": {"oid": "bb86d965958039026cf501e8b129cbf4e9ebbb21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}