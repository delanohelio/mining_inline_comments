{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDI0ODIy", "number": 117, "title": "Improve profile API's error fetching efficiency", "bodyText": "Issue #, if available:\n#111\nDescription of changes:\nPreviously, profile API scans all anomaly result indices to get a detector's most recent error, which can cause performance bottleneck with large anomaly result indices. This PR improves this aspect via various efforts.\nFirst, when a detector is running, we only need to scan the current index, not all of the rolled over ones since we are interested in the latest error.\nSecond, when a detector is disabled, we only need to scan the latest anomaly result indices created before the detector's disabled time.\nThird, setting track total hits false makes ES terminate search early. ES will not try to count the number of documents and will be able to end the query as soon as N document have been collected per segment.\nTesting done:\n\npatched a cluster with 1,000 detectors and 2GB anomaly result indices. Without the PR, scanning anomaly result indices 1000 times would timeout after 30 seconds. After the PR, we would not see the timeout.\nA detector's error message can be on a rotated index. Adds a test case to makes sure we get error info from .opendistro-anomaly-results index that has been rolled over.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-08T20:42:20Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117", "merged": true, "mergeCommit": {"oid": "a40ccf6510d485b4053a8f9c69fcde13a8480732"}, "closed": true, "closedAt": "2020-05-09T03:05:52Z", "author": {"login": "kaituo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfYAMWAH2gAyNDE1NDI0ODIyOjBjMDIzMGI5Y2MyOTQ2YjY0NTRjZGEwNmEwYjc2YzljODMwOTc3ZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfdj85gFqTQwODYwNjA1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0c0230b9cc2946b6454cda06a0b76c9c830977fa", "committedDate": "2020-05-08T20:35:40Z", "message": "Improve profile API's error fetching efficiency\n\nPreviously, profile API scans all anomaly result indices to get a detector's most recent error, which can cause performance bottleneck with large anomaly result indices. This PR improves this aspect via various efforts.\n\nFirst, when a detector is running, we only need to scan the current index, not all of the rolled over ones since we are interested in the latest error.\nSecond, when a detector is disabled, we only need to scan the latest anomaly result indices created before the detector's enable time.\nThird, setting track total hits false makes ES terminate search early. ES will not try to count the number of documents and will be able to end the query as soon as N document have been collected per segment.\n\nTesting done:\n1. patched a cluster with 1,000 detectors and 2GB anomaly result indices. Without the PR, scanning anomaly result indices 1000 times would timeout after 30 seconds. After the PR, we would not see the timeout.\n2. A detector's error message can be on a rotated index. Adds a test case to makes sure we get error info from .opendistro-anomaly-results index that has been rolled over."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTU0Nzc1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#pullrequestreview-408554775", "createdAt": "2020-05-08T22:07:57Z", "commit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNzo1N1rOGS1IKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNzo1N1rOGS1IKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5Nzk5Mg==", "bodyText": "will Jan. cause any issue? I guess in case of Jan., month is 1, not sure if this can cause any issue", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#discussion_r422397992", "createdAt": "2020-05-08T22:07:57Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -234,20 +260,81 @@ private void profileState(\n     }\n \n     /**\n+     * Precondition:\n+     * 1. Index are rotated with name pattern \".opendistro-anomaly-results-history-{now/d}-1\" and now is using UTC.\n+     * 2. Latest entry with error is recorded within enabled and disabled time.  Note disabled time can be null.\n+     *\n      * Error is populated if error of the latest anomaly result is not empty.\n      * @param detectorId detector id\n-     * @param enabledTime the time when AD job is enabled in milliseconds\n+     * @param enabledTimeMillis the time when AD job is enabled in milliseconds\n      * @param listener listener to process the returned error or exception\n      */\n-    private void profileError(String detectorId, long enabledTime, MultiResponsesDelegateActionListener<DetectorProfile> listener) {\n-        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, enabledTime);\n+    private void profileError(\n+        String detectorId,\n+        long enabledTimeMillis,\n+        Instant disabledTime,\n+        MultiResponsesDelegateActionListener<DetectorProfile> listener\n+    ) {\n+        String[] latestIndex = null;\n+\n+        long disabledTimeMillis = 0;\n+        if (disabledTime != null) {\n+            disabledTimeMillis = disabledTime.toEpochMilli();\n+        }\n+        if (enabledTimeMillis > disabledTimeMillis) {\n+            // detector is still running\n+            latestIndex = new String[1];\n+            latestIndex[0] = AnomalyResult.ANOMALY_RESULT_INDEX;\n+        } else {\n+            String[] concreteIndices = indexNameExpressionResolver\n+                .concreteIndexNames(\n+                    clusterService.state(),\n+                    IndicesOptions.lenientExpandOpen(),\n+                    AnomalyDetectionIndices.ALL_AD_RESULTS_INDEX_PATTERN\n+                );\n+\n+            // find the latest from result indices such as .opendistro-anomaly-results-history-2020.04.06-1 and\n+            // /.opendistro-anomaly-results-history-2020.04.07-000002\n+            long maxTimestamp = -1;\n+            Map<Long, List<String>> candidateIndices = new HashMap<>();\n+            for (String indexName : concreteIndices) {\n+                Matcher m = Pattern.compile(\"\\\\.opendistro-anomaly-results-history-(\\\\d{4})\\\\.(\\\\d{2})\\\\.(\\\\d{2})-\\\\d+\").matcher(indexName);\n+                if (m.matches()) {\n+                    int year = Integer.parseInt(m.group(1));\n+                    int month = Integer.parseInt(m.group(2));\n+                    int date = Integer.parseInt(m.group(3));\n+                    // month starts with 0\n+                    calendar.clear();\n+                    calendar.set(year, month - 1, date);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTY0MjE0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#pullrequestreview-408564214", "createdAt": "2020-05-08T22:36:11Z", "commit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjozNjoxMVrOGS1olA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjozNjoxMVrOGS1olA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNjI5Mg==", "bodyText": "One edge case: suppose detector interval is 1 minute\n1.Detector last run is at 2020-05-07, 11:59:50 PM, then AD result indices rolled over as .opendistro-anomaly-results-history-2020.05.07-001\n2.Detector next run will be 2020-05-08, 00:00:50 AM. If user stop the detector at  2020-05-08 00:00:10 AM, detector will not have AD result on 2020-05-08.\nSo this code change will check latest AD result index on 2020-05-08, as  2020-05-08 <= 2020-05-08 00:00:10 AM(disabledTime). But we can't find any AD result for this detector on 2020-05-08. How about we check last two days' AD result indices to make sure we can always get AD result? Similar to set monitor interval as 2*detector_interval", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#discussion_r422406292", "createdAt": "2020-05-08T22:36:11Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -234,20 +260,81 @@ private void profileState(\n     }\n \n     /**\n+     * Precondition:\n+     * 1. Index are rotated with name pattern \".opendistro-anomaly-results-history-{now/d}-1\" and now is using UTC.\n+     * 2. Latest entry with error is recorded within enabled and disabled time.  Note disabled time can be null.\n+     *\n      * Error is populated if error of the latest anomaly result is not empty.\n      * @param detectorId detector id\n-     * @param enabledTime the time when AD job is enabled in milliseconds\n+     * @param enabledTimeMillis the time when AD job is enabled in milliseconds\n      * @param listener listener to process the returned error or exception\n      */\n-    private void profileError(String detectorId, long enabledTime, MultiResponsesDelegateActionListener<DetectorProfile> listener) {\n-        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, enabledTime);\n+    private void profileError(\n+        String detectorId,\n+        long enabledTimeMillis,\n+        Instant disabledTime,\n+        MultiResponsesDelegateActionListener<DetectorProfile> listener\n+    ) {\n+        String[] latestIndex = null;\n+\n+        long disabledTimeMillis = 0;\n+        if (disabledTime != null) {\n+            disabledTimeMillis = disabledTime.toEpochMilli();\n+        }\n+        if (enabledTimeMillis > disabledTimeMillis) {\n+            // detector is still running\n+            latestIndex = new String[1];\n+            latestIndex[0] = AnomalyResult.ANOMALY_RESULT_INDEX;\n+        } else {\n+            String[] concreteIndices = indexNameExpressionResolver\n+                .concreteIndexNames(\n+                    clusterService.state(),\n+                    IndicesOptions.lenientExpandOpen(),\n+                    AnomalyDetectionIndices.ALL_AD_RESULTS_INDEX_PATTERN\n+                );\n+\n+            // find the latest from result indices such as .opendistro-anomaly-results-history-2020.04.06-1 and\n+            // /.opendistro-anomaly-results-history-2020.04.07-000002\n+            long maxTimestamp = -1;\n+            Map<Long, List<String>> candidateIndices = new HashMap<>();\n+            for (String indexName : concreteIndices) {\n+                Matcher m = Pattern.compile(\"\\\\.opendistro-anomaly-results-history-(\\\\d{4})\\\\.(\\\\d{2})\\\\.(\\\\d{2})-\\\\d+\").matcher(indexName);\n+                if (m.matches()) {\n+                    int year = Integer.parseInt(m.group(1));\n+                    int month = Integer.parseInt(m.group(2));\n+                    int date = Integer.parseInt(m.group(3));\n+                    // month starts with 0\n+                    calendar.clear();\n+                    calendar.set(year, month - 1, date);\n+                    // 2020.05.08 is translated to 1588896000000\n+                    long timestamp = calendar.getTimeInMillis();\n+\n+                    // a candidate index can be created before or after enabled time, but the index is definitely created before disabled\n+                    // time\n+                    if (timestamp <= disabledTimeMillis && maxTimestamp <= timestamp) {\n+                        maxTimestamp = timestamp;\n+                        // we can have two rotations on the same day and we don't know which one has our data, so we keep all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTY0ODIx", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#pullrequestreview-408564821", "createdAt": "2020-05-08T22:38:11Z", "commit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTc1NDI5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#pullrequestreview-408575429", "createdAt": "2020-05-08T23:17:15Z", "commit": {"oid": "0c0230b9cc2946b6454cda06a0b76c9c830977fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f597bfbc31dbe1231acda002ae75aaa886fe2c", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/b1f597bfbc31dbe1231acda002ae75aaa886fe2c", "committedDate": "2020-05-09T02:28:46Z", "message": "Scan one more index to address edge case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjA2MDU3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/117#pullrequestreview-408606057", "createdAt": "2020-05-09T03:04:15Z", "commit": {"oid": "b1f597bfbc31dbe1231acda002ae75aaa886fe2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1685, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}