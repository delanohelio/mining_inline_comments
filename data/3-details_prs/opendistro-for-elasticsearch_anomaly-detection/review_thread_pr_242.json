{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDQ4MDM1", "number": 242, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzowMTo0NVrOEsIUVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzowMTo0NVrOEsIUVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzA5MDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzowMTo0NVrOHfR6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1NToxM1rOHfTiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MTI4Nw==", "bodyText": "Should we override Writeable.writeTo method like Feature class?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/242#discussion_r502561287", "createdAt": "2020-10-09T17:01:45Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -153,10 +156,60 @@ public AnomalyDetector(\n         this.lastUpdateTime = lastUpdateTime;\n     }\n \n+    public AnomalyDetector(StreamInput input) throws IOException {\n+        detectorId = input.readString();\n+        version = input.readLong();\n+        String name = input.readString();\n+        if (Strings.isBlank(name)) {\n+            throw new IllegalArgumentException(\"Detector name should be set\");\n+        }\n+        this.name = name;\n+        description = input.readString();\n+        String timeField = input.readString();\n+        if (timeField == null) {\n+            throw new IllegalArgumentException(\"Time field should be set\");\n+        }\n+        this.timeField = timeField;\n+        List<String> indices = input.readStringList();\n+        if (indices == null || indices.isEmpty()) {\n+            throw new IllegalArgumentException(\"Indices should be set\");\n+        }\n+        this.indices = indices;\n+        featureAttributes = input.readList(Feature::new);\n+        filterQuery = new MatchAllQueryBuilder(input);\n+        detectionInterval = IntervalTimeConfiguration.readFrom(input);\n+        windowDelay = IntervalTimeConfiguration.readFrom(input);\n+        Integer shingleSize = input.readInt();\n+        if (shingleSize != null && shingleSize < 1) {\n+            throw new IllegalArgumentException(\"Shingle size must be a positive integer\");\n+        }\n+        this.shingleSize = shingleSize;\n+        uiMetadata = input.readMap();\n+        schemaVersion = input.readInt();\n+        lastUpdateTime = input.readInstant();\n+    }\n+\n     public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n         return toXContent(builder, ToXContent.EMPTY_PARAMS);\n     }\n \n+    public void writeTo(StreamOutput output) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e6ad7a76b7c3cced6bc06b1d08cd24496454ab"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4Nzk4Mg==", "bodyText": "Sure thats a good point.\nWill make changes for both AnomalyDetector and AnomalyDetectorJob", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/242#discussion_r502587982", "createdAt": "2020-10-09T17:55:13Z", "author": {"login": "saratvemulapalli"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -153,10 +156,60 @@ public AnomalyDetector(\n         this.lastUpdateTime = lastUpdateTime;\n     }\n \n+    public AnomalyDetector(StreamInput input) throws IOException {\n+        detectorId = input.readString();\n+        version = input.readLong();\n+        String name = input.readString();\n+        if (Strings.isBlank(name)) {\n+            throw new IllegalArgumentException(\"Detector name should be set\");\n+        }\n+        this.name = name;\n+        description = input.readString();\n+        String timeField = input.readString();\n+        if (timeField == null) {\n+            throw new IllegalArgumentException(\"Time field should be set\");\n+        }\n+        this.timeField = timeField;\n+        List<String> indices = input.readStringList();\n+        if (indices == null || indices.isEmpty()) {\n+            throw new IllegalArgumentException(\"Indices should be set\");\n+        }\n+        this.indices = indices;\n+        featureAttributes = input.readList(Feature::new);\n+        filterQuery = new MatchAllQueryBuilder(input);\n+        detectionInterval = IntervalTimeConfiguration.readFrom(input);\n+        windowDelay = IntervalTimeConfiguration.readFrom(input);\n+        Integer shingleSize = input.readInt();\n+        if (shingleSize != null && shingleSize < 1) {\n+            throw new IllegalArgumentException(\"Shingle size must be a positive integer\");\n+        }\n+        this.shingleSize = shingleSize;\n+        uiMetadata = input.readMap();\n+        schemaVersion = input.readInt();\n+        lastUpdateTime = input.readInstant();\n+    }\n+\n     public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n         return toXContent(builder, ToXContent.EMPTY_PARAMS);\n     }\n \n+    public void writeTo(StreamOutput output) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MTI4Nw=="}, "originalCommit": {"oid": "14e6ad7a76b7c3cced6bc06b1d08cd24496454ab"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2955, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}