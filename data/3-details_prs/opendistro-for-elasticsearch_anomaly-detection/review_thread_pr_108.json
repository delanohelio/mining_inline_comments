{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjk0OTIy", "number": 108, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0MDo0OVrOD5kgxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxOTowN1rOD5p66Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjkzNjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0MDo0OVrOGQ6tuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowODo0NVrOGRaexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MjM3Ng==", "bodyText": "Minor. other instanceof ADStatsResponse seems better.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420392376", "createdAt": "2020-05-05T20:40:49Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MTM2MA==", "bodyText": "Good point will fix", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420471360", "createdAt": "2020-05-05T23:42:08Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MjM3Ng=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMzI2MA==", "bodyText": "We don't want to use instanceof since this makes a subclass relationship returns true.  We want to have exact same class.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420523260", "createdAt": "2020-05-06T03:13:58Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MjM3Ng=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMjgzNw==", "bodyText": "That makes sense, will change back.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420912837", "createdAt": "2020-05-06T16:08:45Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MjM3Ng=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk0NjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0MzozNVrOGQ6z2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo0NjoxOVrOGQ_nCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5Mzk0NA==", "bodyText": "Minor. Some edge cases might be handled more clearly, such as when both have node responses/cluster stats, throw an exception if unexpected.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420393944", "createdAt": "2020-05-05T20:43:35Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {\n+            return;\n+        }\n+\n+        ADStatsResponse otherResponse = (ADStatsResponse) other;\n+\n+        if (otherResponse.adStatsNodesResponse != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjU4NQ==", "bodyText": "For this object, the expected behavior if other has both node response and cluster stats is to merge them both into the object.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420472585", "createdAt": "2020-05-05T23:46:19Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/ADStatsResponse.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.stats;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+import com.amazon.opendistroforelasticsearch.ad.transport.ADStatsNodesResponse;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+/**\n+ * ADStatsResponse contains logic to merge the node stats and cluster stats together and return them to user\n+ */\n+public class ADStatsResponse implements ToXContentObject, Mergeable {\n+    private ADStatsNodesResponse adStatsNodesResponse;\n+    private Map<String, Object> clusterStats;\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return Map of cluster stats\n+     */\n+    public Map<String, Object> getClusterStats() {\n+        return clusterStats;\n+    }\n+\n+    /**\n+     * Set cluster stats\n+     *\n+     * @param clusterStats Map of cluster stats\n+     */\n+    public void setClusterStats(Map<String, Object> clusterStats) {\n+        this.clusterStats = clusterStats;\n+    }\n+\n+    /**\n+     * Get cluster stats\n+     *\n+     * @return ADStatsNodesResponse\n+     */\n+    public ADStatsNodesResponse getADStatsNodesResponse() {\n+        return adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Sets adStatsNodesResponse\n+     *\n+     * @param adStatsNodesResponse AD Stats Response from Nodes\n+     */\n+    public void setADStatsNodesResponse(ADStatsNodesResponse adStatsNodesResponse) {\n+        this.adStatsNodesResponse = adStatsNodesResponse;\n+    }\n+\n+    /**\n+     * Convert ADStatsResponse to XContent\n+     *\n+     * @param builder XContentBuilder\n+     * @return XContentBuilder\n+     * @throws IOException thrown on invalid input\n+     */\n+    public XContentBuilder toXContent(XContentBuilder builder) throws IOException {\n+        return toXContent(builder, ToXContent.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        XContentBuilder xContentBuilder = builder.startObject();\n+        for (Map.Entry<String, Object> clusterStat : clusterStats.entrySet()) {\n+            builder.field(clusterStat.getKey(), clusterStat.getValue());\n+        }\n+        adStatsNodesResponse.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);\n+        return xContentBuilder.endObject();\n+    }\n+\n+    @Override\n+    public void merge(Mergeable other) {\n+        if (this == other || other == null || getClass() != other.getClass()) {\n+            return;\n+        }\n+\n+        ADStatsResponse otherResponse = (ADStatsResponse) other;\n+\n+        if (otherResponse.adStatsNodesResponse != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5Mzk0NA=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk4Nzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo1NToyOFrOGQ7NcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo1MzoxMVrOGQ_vaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMDQ5Nw==", "bodyText": "Minor. Seems more consistent to use adStats.getClusterStats() as in the for loop.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420400497", "createdAt": "2020-05-05T20:55:28Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+            listener.onResponse(adStatsResponse);\n+        }\n+    }\n+\n+    /**\n+     * Make async request to get the Anomaly Detection statistics from each node and, onResponse, set the\n+     * ADStatsNodesResponse field of ADStatsResponse\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetNodeStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        client.execute(ADStatsNodesAction.INSTANCE, adStatsRequest, ActionListener.wrap(adStatsResponse -> {\n+            ADStatsResponse restADStatsResponse = new ADStatsResponse();\n+            restADStatsResponse.setADStatsNodesResponse(adStatsResponse);\n+            listener.onResponse(restADStatsResponse);\n+        }, listener::onFailure));\n+    }\n+\n+    /**\n+     * Collect Cluster Stats into map to be retrieved\n+     *\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     * @return Map containing Cluster Stats\n+     */\n+    private Map<String, Object> getClusterStats(ADStatsRequest adStatsRequest) {\n+        Map<String, Object> clusterStats = new HashMap<>();\n+        Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n+        for (String statName : adStats.getClusterStats().keySet()) {\n+            if (statsToBeRetrieved.contains(statName)) {\n+                clusterStats.put(statName, adStats.getStats().get(statName).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1Mzg1NA==", "bodyText": "a different way might be iterating the entries using map::entrySet", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420453854", "createdAt": "2020-05-05T22:52:09Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+            listener.onResponse(adStatsResponse);\n+        }\n+    }\n+\n+    /**\n+     * Make async request to get the Anomaly Detection statistics from each node and, onResponse, set the\n+     * ADStatsNodesResponse field of ADStatsResponse\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetNodeStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        client.execute(ADStatsNodesAction.INSTANCE, adStatsRequest, ActionListener.wrap(adStatsResponse -> {\n+            ADStatsResponse restADStatsResponse = new ADStatsResponse();\n+            restADStatsResponse.setADStatsNodesResponse(adStatsResponse);\n+            listener.onResponse(restADStatsResponse);\n+        }, listener::onFailure));\n+    }\n+\n+    /**\n+     * Collect Cluster Stats into map to be retrieved\n+     *\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     * @return Map containing Cluster Stats\n+     */\n+    private Map<String, Object> getClusterStats(ADStatsRequest adStatsRequest) {\n+        Map<String, Object> clusterStats = new HashMap<>();\n+        Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n+        for (String statName : adStats.getClusterStats().keySet()) {\n+            if (statsToBeRetrieved.contains(statName)) {\n+                clusterStats.put(statName, adStats.getStats().get(statName).getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMDQ5Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NDcyOQ==", "bodyText": "Good suggestion", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420474729", "createdAt": "2020-05-05T23:53:11Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+            listener.onResponse(adStatsResponse);\n+        }\n+    }\n+\n+    /**\n+     * Make async request to get the Anomaly Detection statistics from each node and, onResponse, set the\n+     * ADStatsNodesResponse field of ADStatsResponse\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetNodeStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        client.execute(ADStatsNodesAction.INSTANCE, adStatsRequest, ActionListener.wrap(adStatsResponse -> {\n+            ADStatsResponse restADStatsResponse = new ADStatsResponse();\n+            restADStatsResponse.setADStatsNodesResponse(adStatsResponse);\n+            listener.onResponse(restADStatsResponse);\n+        }, listener::onFailure));\n+    }\n+\n+    /**\n+     * Collect Cluster Stats into map to be retrieved\n+     *\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     * @return Map containing Cluster Stats\n+     */\n+    private Map<String, Object> getClusterStats(ADStatsRequest adStatsRequest) {\n+        Map<String, Object> clusterStats = new HashMap<>();\n+        Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n+        for (String statName : adStats.getClusterStats().keySet()) {\n+            if (statsToBeRetrieved.contains(statName)) {\n+                clusterStats.put(statName, adStats.getStats().get(statName).getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMDQ5Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzEwMjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMDo1M1rOGQ8URQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo1NzoyN1rOGQ_0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODYyOQ==", "bodyText": "on is more of a name for listener.  You can change to getClusterStats or sth similar.  Same applies below.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420418629", "createdAt": "2020-05-05T21:30:53Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NjAzOA==", "bodyText": "Good point. Will update both.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420476038", "createdAt": "2020-05-05T23:57:27Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODYyOQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzEzNTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo0MToxNlrOGQ8oLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo1ODozNVrOGQ_13A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMzcyNQ==", "bodyText": "You only need docs statistics.  .setDocs(true) seems what you need.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420423725", "createdAt": "2020-05-05T21:41:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NjM4MA==", "bodyText": "Right that is correct. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420476380", "createdAt": "2020-05-05T23:58:35Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMzcyNQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzE0NDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo0NDoxNlrOGQ8teA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo1OTozM1rOGQ_2_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNTA4MA==", "bodyText": "new RuntimeException(\"Failed to get AD cluster stats\", e) is more common.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420425080", "createdAt": "2020-05-05T21:44:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NjY2OA==", "bodyText": "Got it. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420476668", "createdAt": "2020-05-05T23:59:33Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNTA4MA=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzMwODc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MjozMlrOGQ-OIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowODoyMFrOGRaddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgyNQ==", "bodyText": "minor. should ad_stats_action be renamed to ad_stats_node_action ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420449825", "createdAt": "2020-05-05T22:42:32Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "diffHunk": "@@ -18,18 +18,18 @@\n import org.elasticsearch.action.ActionType;\n \n /**\n- * ADStatsAction class\n+ * ADStatsNodesAction class\n  */\n-public class ADStatsAction extends ActionType<ADStatsResponse> {\n+public class ADStatsNodesAction extends ActionType<ADStatsNodesResponse> {\n \n-    public static final ADStatsAction INSTANCE = new ADStatsAction();\n+    public static final ADStatsNodesAction INSTANCE = new ADStatsNodesAction();\n     public static final String NAME = \"cluster:admin/ad_stats_action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NDc5MA==", "bodyText": "Yes it should good catch.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420474790", "createdAt": "2020-05-05T23:53:24Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "diffHunk": "@@ -18,18 +18,18 @@\n import org.elasticsearch.action.ActionType;\n \n /**\n- * ADStatsAction class\n+ * ADStatsNodesAction class\n  */\n-public class ADStatsAction extends ActionType<ADStatsResponse> {\n+public class ADStatsNodesAction extends ActionType<ADStatsNodesResponse> {\n \n-    public static final ADStatsAction INSTANCE = new ADStatsAction();\n+    public static final ADStatsNodesAction INSTANCE = new ADStatsNodesAction();\n     public static final String NAME = \"cluster:admin/ad_stats_action\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgyNQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNDgzOA==", "bodyText": "all of our transport actions are using prefix \"cluster:admin/ad\" like:\n\"cluster:admin/ad/result\"\n\"cluster:admin/ad/cron\"\n\"cluster:admin/ad/model/delete\"\nIt would be good to have the same style.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420524838", "createdAt": "2020-05-06T03:21:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "diffHunk": "@@ -18,18 +18,18 @@\n import org.elasticsearch.action.ActionType;\n \n /**\n- * ADStatsAction class\n+ * ADStatsNodesAction class\n  */\n-public class ADStatsAction extends ActionType<ADStatsResponse> {\n+public class ADStatsNodesAction extends ActionType<ADStatsNodesResponse> {\n \n-    public static final ADStatsAction INSTANCE = new ADStatsAction();\n+    public static final ADStatsNodesAction INSTANCE = new ADStatsNodesAction();\n     public static final String NAME = \"cluster:admin/ad_stats_action\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgyNQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMjUwMg==", "bodyText": "Good call out. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420912502", "createdAt": "2020-05-06T16:08:20Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesAction.java", "diffHunk": "@@ -18,18 +18,18 @@\n import org.elasticsearch.action.ActionType;\n \n /**\n- * ADStatsAction class\n+ * ADStatsNodesAction class\n  */\n-public class ADStatsAction extends ActionType<ADStatsResponse> {\n+public class ADStatsNodesAction extends ActionType<ADStatsNodesResponse> {\n \n-    public static final ADStatsAction INSTANCE = new ADStatsAction();\n+    public static final ADStatsNodesAction INSTANCE = new ADStatsNodesAction();\n     public static final String NAME = \"cluster:admin/ad_stats_action\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgyNQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzMyMTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0NzoxM1rOGQ-Vtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo1NDozNFrOGQ_xIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MTc2Nw==", "bodyText": "minor. The get methods should be private because they are implementation not contract. Tests are done based on contract not implementation. Because implementation is not client-facing, the full documentation is optional.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420451767", "createdAt": "2020-05-05T22:47:13Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NTE2OQ==", "bodyText": "Good point. I will update them.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420475169", "createdAt": "2020-05-05T23:54:34Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MTc2Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQwMTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNzoyOFrOGQ_CrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNzoyNFrOGRnJ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw==", "bodyText": "Since you didn't set a value here, would it be possible that we pick some value set previously?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420463277", "createdAt": "2020-05-05T23:17:28Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3Njk5OA==", "bodyText": "This else block is only entered if the user does not want to get the detector count stat. So, it will not be retrieved.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420476998", "createdAt": "2020-05-06T00:00:42Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNDA5MQ==", "bodyText": "Got it.  Is SettableSupplier's value a singleton shared by all of the requests?  Would we have concurrent issue like one thread is writing to it while another is reading it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420524091", "createdAt": "2020-05-06T03:17:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNjYxNA==", "bodyText": "Yes SettableSupplier's value is a singleton. SettableSupplier uses AtomicLong for thread safety.\nI believe this is the scenario of concern:\n\nasync request(req_1) to get detector count is made (detector count = 3)\ndetector is created (detector count = 4)\nasync request(req_2) to get detector count is made (detector count = 4)\nreq_2 returns and sets detector count to 4\nreq_1 returns and sets detector count to 3\nstats are returned for req_1 with detector count = 3\nstats are returned for req_2 with detector count = 3\n\nI think this is a minor issue for a couple of reasons. (1) On each stats request, the detector count is updated so it will not put the system in a permanent state of inconsistency (2) The scenario above is low probability because detector count is not expected to be that volatile and also stats api calls are not expected to be in that tight of a window.\nA workaround could be to pass the detector count to getClusterStatsMap(ADStatsRequest adStatsRequest) and have a special case for DetectorCount stat. However, I am not sure this is best practice. Do you have any other suggestions?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420936614", "createdAt": "2020-05-06T16:44:24Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTk2NQ==", "bodyText": "Agree it is a minor issue since document count is only used by humans, right?\nCan you create a github issue for this?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r421115965", "createdAt": "2020-05-06T21:56:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyMDQ4Mw==", "bodyText": "Yes only humans will read.\n#112", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r421120483", "createdAt": "2020-05-06T22:07:24Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,\n+            \"Unable to return AD Stats\"\n+        );\n+\n+        onGetClusterStats(client, delegateListener, adStatsRequest);\n+        onGetNodeStats(client, delegateListener, adStatsRequest);\n+    }\n+\n+    /**\n+     * Make async request to get the number of detectors in AnomalyDetector.ANOMALY_DETECTORS_INDEX if necessary\n+     * and, onResponse, gather the cluster statistics\n+     *\n+     * @param client Client\n+     * @param listener MultiResponsesDelegateActionListener to be used once both requests complete\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void onGetClusterStats(\n+        Client client,\n+        MultiResponsesDelegateActionListener<ADStatsResponse> listener,\n+        ADStatsRequest adStatsRequest\n+    ) {\n+        ADStatsResponse adStatsResponse = new ADStatsResponse();\n+        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n+            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+                IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest();\n+                client.execute(IndicesStatsAction.INSTANCE, indicesStatsRequest, ActionListener.wrap(indicesStatsResponse -> {\n+                    adStats\n+                        .getStat(StatNames.DETECTOR_COUNT.getName())\n+                        .setValue(indicesStatsResponse.getIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX).getPrimaries().docs.getCount());\n+                    adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                    listener.onResponse(adStatsResponse);\n+                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats: \" + e))));\n+            } else {\n+                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+                adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));\n+                listener.onResponse(adStatsResponse);\n+            }\n+        } else {\n+            adStatsResponse.setClusterStats(getClusterStats(adStatsRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI3Nw=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzgyMjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxOTowN1rOGRCxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0OToyMFrOGRcIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNDMyNQ==", "bodyText": "Is it always 2?  If customers don't want to get detector count or only want to get detector count, this value should be 1.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420524325", "createdAt": "2020-05-06T03:19:07Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzOTg4OQ==", "bodyText": "Yes it is always 2. We still call the listeners onResponse method even if the calls are not made. For example, here", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/108#discussion_r420939889", "createdAt": "2020-05-06T16:49:20Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -115,4 +131,111 @@ private ADStatsRequest getRequest(RestRequest request) {\n         }\n         return adStatsRequest;\n     }\n+\n+    /**\n+     * Make the 2 requests to get the node and cluster statistics\n+     *\n+     * @param client Client\n+     * @param channel Channel to send response\n+     * @param adStatsRequest Request containing stats to be retrieved\n+     */\n+    public void getStats(Client client, RestChannel channel, ADStatsRequest adStatsRequest) {\n+        // Use MultiResponsesDelegateActionListener to execute 2 async requests and create the response once they finish\n+        MultiResponsesDelegateActionListener<ADStatsResponse> delegateListener = new MultiResponsesDelegateActionListener<>(\n+            getRestStatsListener(channel),\n+            2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNDMyNQ=="}, "originalCommit": {"oid": "f10ec35c506aaa7d627cd1346b932817185fbc7c"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3040, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}