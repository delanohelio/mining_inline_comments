{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTkzNDYw", "number": 340, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo0NDowNlrOFJDPjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOTowNjo0M1rOFJLfcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDM0NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo0NDowNlrOILT8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDo0Mjo0NlrOILUzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczMTk2Ng==", "bodyText": "why use logger.warn instead of logger.error?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548731966", "createdAt": "2020-12-24T19:44:06Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -261,20 +258,19 @@ private void profileEntityStats(MultiResponsesDelegateActionListener<DetectorPro\n                 DetectorProfile.Builder profileBuilder = new DetectorProfile.Builder();\n                 DetectorProfile profile = profileBuilder.totalEntities(value).build();\n                 listener.onResponse(profile);\n-            }, searchException -> { listener.failImmediately(CommonErrorMessages.FAIL_TO_GET_TOTAL_ENTITIES + detector.getDetectorId()); })\n-            );\n+            }, searchException -> {\n+                logger.warn(CommonErrorMessages.FAIL_TO_GET_TOTAL_ENTITIES + detector.getDetectorId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NjEwOA==", "bodyText": "It is possible that users haven't created their source index yet.  Since it is a user error, I make it warn instead of error.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548746108", "createdAt": "2020-12-24T20:42:46Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -261,20 +258,19 @@ private void profileEntityStats(MultiResponsesDelegateActionListener<DetectorPro\n                 DetectorProfile.Builder profileBuilder = new DetectorProfile.Builder();\n                 DetectorProfile profile = profileBuilder.totalEntities(value).build();\n                 listener.onResponse(profile);\n-            }, searchException -> { listener.failImmediately(CommonErrorMessages.FAIL_TO_GET_TOTAL_ENTITIES + detector.getDetectorId()); })\n-            );\n+            }, searchException -> {\n+                logger.warn(CommonErrorMessages.FAIL_TO_GET_TOTAL_ENTITIES + detector.getDetectorId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczMTk2Ng=="}, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDM0OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/EntityProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo0NDo1NVrOILT-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDo0Njo1MFrOILU1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczMjQ3NQ==", "bodyText": "may replace with FAIL_FETCH_ERR_MSG", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548732475", "createdAt": "2020-12-24T19:44:55Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/EntityProfileRunner.java", "diffHunk": "@@ -184,6 +164,25 @@ private void getJob(\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n                     AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n \n+                    int totalResponsesToWait = 0;\n+                    if (profilesToCollect.contains(EntityProfileName.INIT_PROGRESS)\n+                        || profilesToCollect.contains(EntityProfileName.STATE)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    if (profilesToCollect.contains(EntityProfileName.ENTITY_INFO)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    if (profilesToCollect.contains(EntityProfileName.MODELS)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    MultiResponsesDelegateActionListener<EntityProfile> delegateListener =\n+                        new MultiResponsesDelegateActionListener<EntityProfile>(\n+                            listener,\n+                            totalResponsesToWait,\n+                            \"Fail to fetch profile for \" + entityValue + \" of detector \" + detectorId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NjYyNg==", "bodyText": "replaced", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548746626", "createdAt": "2020-12-24T20:46:50Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/EntityProfileRunner.java", "diffHunk": "@@ -184,6 +164,25 @@ private void getJob(\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n                     AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n \n+                    int totalResponsesToWait = 0;\n+                    if (profilesToCollect.contains(EntityProfileName.INIT_PROGRESS)\n+                        || profilesToCollect.contains(EntityProfileName.STATE)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    if (profilesToCollect.contains(EntityProfileName.ENTITY_INFO)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    if (profilesToCollect.contains(EntityProfileName.MODELS)) {\n+                        totalResponsesToWait++;\n+                    }\n+                    MultiResponsesDelegateActionListener<EntityProfile> delegateListener =\n+                        new MultiResponsesDelegateActionListener<EntityProfile>(\n+                            listener,\n+                            totalResponsesToWait,\n+                            \"Fail to fetch profile for \" + entityValue + \" of detector \" + detectorId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczMjQ3NQ=="}, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDM3NDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1MToyNVrOILUOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDo1MToyM1rOILU3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczNjY2MA==", "bodyText": "is it possible for state to be null? Do we still need to keep checking if state is null?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548736660", "createdAt": "2020-12-24T19:51:25Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "diffHunk": "@@ -214,7 +214,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (modelProfile != null) {\n             builder.field(CommonName.MODEL, modelProfile);\n         }\n-        if (state != null) {\n+        if (state != EntityState.UNKNOWN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NzA2OA==", "bodyText": "It is possible.  Added back.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548747068", "createdAt": "2020-12-24T20:51:23Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "diffHunk": "@@ -214,7 +214,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (modelProfile != null) {\n             builder.field(CommonName.MODEL, modelProfile);\n         }\n-        if (state != null) {\n+        if (state != EntityState.UNKNOWN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczNjY2MA=="}, "originalCommit": {"oid": "4fb17b0470484cd161d4a985a3b95eeaac50c321"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY5NDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOTowMzoxNVrOILeXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDo1MToxMFrOIMByfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMjY5OA==", "bodyText": "Why not use AnomalyDetectionException here? Same question for other places", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548902698", "createdAt": "2020-12-25T19:03:15Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -118,10 +117,38 @@ private void calculateTotalResponsesToWait(\n                 ) {\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, xContentParser.nextToken(), xContentParser);\n                     AnomalyDetector detector = AnomalyDetector.parse(xContentParser, detectorId);\n+\n+                    prepareProfile(detector, listener, profilesToCollect);\n+                } catch (Exception e) {\n+                    listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ0OTQ1NQ==", "bodyText": "I can do it.  Most of transport APIs use AnomalyDetectionException (except the recent ones added by Sarat).  When I reviewed Sarat's PRs, I thought about pointing it out, but didn't because changing to use AnomalyDetectionException does not add too much benefit except that we have standardized the exceptions we throw.  Our public APIs do not standardize the exception it throws back to the user.   Take profile API as an example, sometimes it throws IOException, sometimes NullPointerException, and sometimes RuntimeException.  Do you think we should change all of public APIs and transport APIs to use AnomalyDetectionException?  The benefit is that we can have a standard wrapper exception to throw.  The drawback is that this might be another PR due to the large changes.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r549449455", "createdAt": "2020-12-28T18:43:47Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -118,10 +117,38 @@ private void calculateTotalResponsesToWait(\n                 ) {\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, xContentParser.nextToken(), xContentParser);\n                     AnomalyDetector detector = AnomalyDetector.parse(xContentParser, detectorId);\n+\n+                    prepareProfile(detector, listener, profilesToCollect);\n+                } catch (Exception e) {\n+                    listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMjY5OA=="}, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODA2OA==", "bodyText": "Currently we only catch exceptions in AD realtime job and count in failure stats. We may need to count all exceptions from other places, then we need to wrap the exception.\nNo so urgent. We can fix it later.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r549478068", "createdAt": "2020-12-28T20:30:52Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -118,10 +117,38 @@ private void calculateTotalResponsesToWait(\n                 ) {\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, xContentParser.nextToken(), xContentParser);\n                     AnomalyDetector detector = AnomalyDetector.parse(xContentParser, detectorId);\n+\n+                    prepareProfile(detector, listener, profilesToCollect);\n+                } catch (Exception e) {\n+                    listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMjY5OA=="}, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4MzEzNA==", "bodyText": "Make sense.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r549483134", "createdAt": "2020-12-28T20:51:10Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -118,10 +117,38 @@ private void calculateTotalResponsesToWait(\n                 ) {\n                     ensureExpectedToken(XContentParser.Token.START_OBJECT, xContentParser.nextToken(), xContentParser);\n                     AnomalyDetector detector = AnomalyDetector.parse(xContentParser, detectorId);\n+\n+                    prepareProfile(detector, listener, profilesToCollect);\n+                } catch (Exception e) {\n+                    listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.onFailure(new RuntimeException(CommonErrorMessages.FAIL_TO_FIND_DETECTOR_MSG + detectorId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMjY5OA=="}, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY5Nzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOTowNjo0M1rOILeYWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo0OToxMFrOIL_02Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMzAwMw==", "bodyText": "When will the entity state be UNKNOWN ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r548903003", "createdAt": "2020-12-25T19:06:43Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "diffHunk": "@@ -214,7 +214,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (modelProfile != null) {\n             builder.field(CommonName.MODEL, modelProfile);\n         }\n-        if (state != null) {\n+        if (state != null && state != EntityState.UNKNOWN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MDk2OQ==", "bodyText": "When we cannot get an entity's state.  For example, a user wants to profile an entity's state.  If we cannot find the associated detector's job, I will mark the state as unknown since I find no way to prove it is in INIT or RUNNING.\npublic enum EntityState {\nUNKNOWN,\nINIT,\nRUNNING\n}", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/340#discussion_r549450969", "createdAt": "2020-12-28T18:49:10Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/EntityProfile.java", "diffHunk": "@@ -214,7 +214,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (modelProfile != null) {\n             builder.field(CommonName.MODEL, modelProfile);\n         }\n-        if (state != null) {\n+        if (state != null && state != EntityState.UNKNOWN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMzAwMw=="}, "originalCommit": {"oid": "114c948ec1d1c2f48632725ef98ab45688c43f6e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2843, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}