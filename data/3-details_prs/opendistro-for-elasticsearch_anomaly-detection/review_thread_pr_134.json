{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNzI1MDYy", "number": 134, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTowNzoxM1rOD_C_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjoxODo1MVrOD_FcVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDM1OTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTowNzoxM1rOGZhQCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1NjoxNVrOGZiU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjM2Mw==", "bodyText": "minor. can this query also include a condition like not this detector id to utilize es search instead of additional postprocessing?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429412363", "createdAt": "2020-05-22T19:07:13Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f30a23d690ff22f6df902f3969f7b6047a496f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyOTk5MA==", "bodyText": "that's a good point. will change to use must_not to exclude this detector id", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429429990", "createdAt": "2020-05-22T19:56:15Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjM2Mw=="}, "originalCommit": {"oid": "49f30a23d690ff22f6df902f3969f7b6047a496f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDM2NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMDoyM1rOGZhUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1NjoyMlrOGZiU_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzUxOA==", "bodyText": "minor. i would use a warning for this case since it's a harmless user error.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429413518", "createdAt": "2020-05-22T19:10:23Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))\n+            .timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        boolean hasDuplicateName = false;\n+        String existingDetectorId = null;\n+        if (response.getHits().getTotalHits().value > 0) {\n+            for (SearchHit hit : response.getHits()) {\n+                if (!hit.getId().equals(detectorId)) {\n+                    hasDuplicateName = true;\n+                    existingDetectorId = hit.getId();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (hasDuplicateName) {\n+            String errorMsg = String.format(\"Cannot create anomaly detector with name[%s] used by detectorId %s\", name, existingDetectorId);\n+            logger.error(errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f30a23d690ff22f6df902f3969f7b6047a496f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDAxNQ==", "bodyText": "sure. will do", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429430015", "createdAt": "2020-05-22T19:56:22Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))\n+            .timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        boolean hasDuplicateName = false;\n+        String existingDetectorId = null;\n+        if (response.getHits().getTotalHits().value > 0) {\n+            for (SearchHit hit : response.getHits()) {\n+                if (!hit.getId().equals(detectorId)) {\n+                    hasDuplicateName = true;\n+                    existingDetectorId = hit.getId();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (hasDuplicateName) {\n+            String errorMsg = String.format(\"Cannot create anomaly detector with name[%s] used by detectorId %s\", name, existingDetectorId);\n+            logger.error(errorMsg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzUxOA=="}, "originalCommit": {"oid": "49f30a23d690ff22f6df902f3969f7b6047a496f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc1NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjoxNDo0NlrOGZlIYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjozODozMlrOGZlaww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTkzNg==", "bodyText": "How about we add mustNot condition only when detectorId is not blank?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429475936", "createdAt": "2020-05-22T22:14:46Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDY0Mw==", "bodyText": "I like the idea. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429480643", "createdAt": "2020-05-22T22:38:32Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTkzNg=="}, "originalCommit": {"oid": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc2MDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjoxODo1MVrOGZlLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjozOTowNlrOGZlbCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjgxMQ==", "bodyText": "We may show this error message on Kibana. How about we make it more readable?\nCannot create anomaly detector with name [%s] as it's already used by detector [%s]", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429476811", "createdAt": "2020-05-22T22:18:51Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        if (response.getHits().getTotalHits().value > 0) {\n+            String errorMsg = String\n+                .format(\n+                    \"Cannot create anomaly detector with name[%s] used by detectorId %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDcxMw==", "bodyText": "sure. will change that.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429480713", "createdAt": "2020-05-22T22:39:06Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        if (response.getHits().getTotalHits().value > 0) {\n+            String errorMsg = String\n+                .format(\n+                    \"Cannot create anomaly detector with name[%s] used by detectorId %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjgxMQ=="}, "originalCommit": {"oid": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2860, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}