{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODczODU5", "number": 325, "title": "Adding role based filtering for rest of APIs", "bodyText": "*Issue #195 *\nDescription of changes:\nAdding backend user role based filtering to Delete, Start/Stop, Get/Profile and Update APIs.\nAlso added support to block users creating detectors when AD Backend Role based filtering is turned on and user does not have backend roles.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-07T18:46:50Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325", "merged": true, "mergeCommit": {"oid": "c949011e7d19ce464252c1c0e4ce335dfb63a2f5"}, "closed": true, "closedAt": "2020-12-11T21:43:29Z", "author": {"login": "saratvemulapalli"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj5n_LgH2gAyNTMzODczODU5OjZlM2FlMjM5NzM0NTljNGE1YjFjZWViNTllMTkwMzFkMjE1NDEyNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlO-Y7gFqTU1MDU5NTIxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e3ae23973459c4a5b1ceeb59e19031d21541245", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/6e3ae23973459c4a5b1ceeb59e19031d21541245", "committedDate": "2020-12-07T18:12:51Z", "message": "Adding role based filtering on rest of the APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8133c1d0b4153cde70ae203c6d52a758d385ca97", "committedDate": "2020-12-07T18:25:58Z", "message": "Adding exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDY2NjY4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-546466668", "createdAt": "2020-12-07T19:29:42Z", "commit": {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToyOTo0MlrOIA28bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToyOTo0MlrOIA28bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MTExOQ==", "bodyText": "I have seen multiple resolveUserAndExecute for different TransportAction, is it possible to change it to a common method like below?\nresolveUserAndExecute(User requestedUser,\n        String detectorId,\n        ActionListener listener,\n        AnomalyDetectorFunction function,\n        AnomalyDetectorFunction functionWithSecurityAndFilterBy) // a better name is needed. :)\n {\n\n        if (requestedUser == null) {\n            // Security is disabled or user is superadmin\n            function.execute();\n        } else if (!filterByEnabled) {\n            // security is enabled and filterby is disabled.\n            function.execute();\n        } else {\n            // security is enabled and filterby is enabled.\n            // Get detector and check if the user has permissions to access the detector\n            try {\n                functionWithSecurityAndFilterBy.execute();\n            } catch (Exception e) {\n                listener.onFailure(e);\n            }\n        }\n}", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537771119", "createdAt": "2020-12-07T19:29:42Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java", "diffHunk": "@@ -34,64 +36,104 @@\n import org.elasticsearch.transport.TransportService;\n \n import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.rest.handler.AnomalyDetectorFunction;\n import com.amazon.opendistroforelasticsearch.ad.rest.handler.IndexAnomalyDetectorJobActionHandler;\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n \n public class AnomalyDetectorJobTransportAction extends HandledTransportAction<AnomalyDetectorJobRequest, AnomalyDetectorJobResponse> {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorJobTransportAction.class);\n \n     private final Client client;\n+    private final ClusterService clusterService;\n     private final Settings settings;\n     private final AnomalyDetectionIndices anomalyDetectionIndices;\n     private final NamedXContentRegistry xContentRegistry;\n+    private volatile Boolean filterByEnabled;\n \n     @Inject\n     public AnomalyDetectorJobTransportAction(\n         TransportService transportService,\n         ActionFilters actionFilters,\n         Client client,\n+        ClusterService clusterService,\n         Settings settings,\n         AnomalyDetectionIndices anomalyDetectionIndices,\n         NamedXContentRegistry xContentRegistry\n     ) {\n         super(AnomalyDetectorJobAction.NAME, transportService, actionFilters, AnomalyDetectorJobRequest::new);\n         this.client = client;\n+        this.clusterService = clusterService;\n         this.settings = settings;\n         this.anomalyDetectionIndices = anomalyDetectionIndices;\n         this.xContentRegistry = xContentRegistry;\n+        filterByEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterByEnabled = it);\n     }\n \n     @Override\n     protected void doExecute(Task task, AnomalyDetectorJobRequest request, ActionListener<AnomalyDetectorJobResponse> listener) {\n+        String detectorId = request.getDetectorID();\n+        // By the time request reaches here, the user permissions are validated by Security plugin.\n+        User user = getUserContext(client);\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            resolveUserAndExecute(user, detectorId, listener, () -> adJobExecute(request, listener));\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void adJobExecute(AnomalyDetectorJobRequest request, ActionListener<AnomalyDetectorJobResponse> listener) {\n         String detectorId = request.getDetectorID();\n         long seqNo = request.getSeqNo();\n         long primaryTerm = request.getPrimaryTerm();\n         String rawPath = request.getRawPath();\n         TimeValue requestTimeout = REQUEST_TIMEOUT.get(settings);\n \n-        // By the time request reaches here, the user permissions are validated by Security plugin.\n-        // Since the detectorID is provided, this can only happen if User is part of a role which has access\n-        // to the detector. This is filtered by our Search Detector API.\n-\n-        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n-            IndexAnomalyDetectorJobActionHandler handler = new IndexAnomalyDetectorJobActionHandler(\n-                client,\n-                listener,\n-                anomalyDetectionIndices,\n-                detectorId,\n-                seqNo,\n-                primaryTerm,\n-                requestTimeout,\n-                xContentRegistry\n-            );\n+        IndexAnomalyDetectorJobActionHandler handler = new IndexAnomalyDetectorJobActionHandler(\n+            client,\n+            listener,\n+            anomalyDetectionIndices,\n+            detectorId,\n+            seqNo,\n+            primaryTerm,\n+            requestTimeout,\n+            xContentRegistry\n+        );\n+        try {\n             if (rawPath.endsWith(RestHandlerUtils.START_JOB)) {\n                 handler.startAnomalyDetectorJob();\n             } else if (rawPath.endsWith(RestHandlerUtils.STOP_JOB)) {\n                 handler.stopAnomalyDetectorJob(detectorId);\n             }\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             logger.error(e);\n             listener.onFailure(e);\n         }\n     }\n+\n+    private void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        ActionListener<AnomalyDetectorJobResponse> listener,\n+        AnomalyDetectorFunction function\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDY5MjUw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-546469250", "createdAt": "2020-12-07T19:31:30Z", "commit": {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozMTozMVrOIA3A8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozMTozMVrOIA3A8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MjI3Mg==", "bodyText": "maybe replace with ResourceNotFound exception", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537772272", "createdAt": "2020-12-07T19:31:31Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +457,99 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Failed to get anomaly detector: \" + detectorId));\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Could not find detector \" + detectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08d59c9ad8bf626300915750ce215d6a76cb8be", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c08d59c9ad8bf626300915750ce215d6a76cb8be", "committedDate": "2020-12-08T19:08:34Z", "message": "Moving common code to ParseUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzA4NjA2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-547708606", "createdAt": "2020-12-08T23:08:24Z", "commit": {"oid": "c08d59c9ad8bf626300915750ce215d6a76cb8be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzowODoyNVrOIB6bhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzowODoyNVrOIB6bhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NjgwNg==", "bodyText": "How about change this error message to \"Anomaly detector index not found\"? \"Failed to get anomaly detector\" is too general and doesn't show exactly this error.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r538876806", "createdAt": "2020-12-08T23:08:25Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,126 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Failed to get anomaly detector: \" + detectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08d59c9ad8bf626300915750ce215d6a76cb8be"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzIzNTk4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-547723598", "createdAt": "2020-12-08T23:36:26Z", "commit": {"oid": "c08d59c9ad8bf626300915750ce215d6a76cb8be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ad5c562e26d18769143b385d4db7146780e95a", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/e2ad5c562e26d18769143b385d4db7146780e95a", "committedDate": "2020-12-08T23:59:42Z", "message": "Updating exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDU5MDMy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-548459032", "createdAt": "2020-12-09T18:08:07Z", "commit": {"oid": "e2ad5c562e26d18769143b385d4db7146780e95a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3cb69a081580d7dc6cb0b64a24863368bbf0362", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d3cb69a081580d7dc6cb0b64a24863368bbf0362", "committedDate": "2020-12-09T22:07:28Z", "message": "Merge branch 'master' into fgac-role-based-filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349b1e36a8fd53e86fd472abd02900a5b5f6bf3c", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/349b1e36a8fd53e86fd472abd02900a5b5f6bf3c", "committedDate": "2020-12-09T22:32:17Z", "message": "Merge branch 'master' into fgac-role-based-filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c6e1ef1ac44433c7148c347b393ed2522f8a63", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/25c6e1ef1ac44433c7148c347b393ed2522f8a63", "committedDate": "2020-12-10T06:29:32Z", "message": "Adding tests for creating anomaly detector transport action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/43880bd8fa82649a8ce67992e3bd6499bd182646", "committedDate": "2020-12-10T06:38:59Z", "message": "Merge branch 'fgac-role-based-filtering' of https://github.com/opendistro-for-elasticsearch/anomaly-detection into fgac-role-based-filtering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDIyOTg0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-549422984", "createdAt": "2020-12-10T17:14:19Z", "commit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNDoxOVrOIDUQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo0MjowMVrOIDVfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ==", "bodyText": "ParseUtils are utility functions to parse ES responses.  Can we move these functions to sth like SecurityUtils?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540348435", "createdAt": "2020-12-10T17:14:19Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MDU1Ng==", "bodyText": "Since this is a public function, what if the caller passes in a null requestedUser or resourceUser?  Also, we are assuming backend role filter is on before calling this function, what if users forget that?  If it is only used by other functions in the class, can we make it private?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540350556", "createdAt": "2020-12-10T17:17:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener\n+                .onFailure(\n+                    new ResourceNotFoundException(\"Failed to find anomaly detector index: \" + AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                );\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ResourceNotFoundException(\"Could not find detector \" + detectorId));\n+        }\n+    }\n+\n+    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5MA==", "bodyText": "You may want to add requestedUsers != null if this is a public method.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540351590", "createdAt": "2020-12-10T17:18:43Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener\n+                .onFailure(\n+                    new ResourceNotFoundException(\"Failed to find anomaly detector index: \" + AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                );\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ResourceNotFoundException(\"Could not find detector \" + detectorId));\n+        }\n+    }\n+\n+    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n+        if (resourceUser.getBackendRoles() == null || requestedUser.getBackendRoles() == null) {\n+            return false;\n+        }\n+        // Check if requested user has backend role required to access the resource\n+        for (String backendRole : requestedUser.getBackendRoles()) {\n+            if (resourceUser.getBackendRoles().contains(backendRole)) {\n+                logger\n+                    .debug(\n+                        \"User: \"\n+                            + requestedUser.getName()\n+                            + \" has backend role: \"\n+                            + backendRole\n+                            + \" permissions to access detector: \"\n+                            + detectorId\n+                    );\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean checkFilterByBackendRoles(User requestedUser, ActionListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzE1NA==", "bodyText": "Not related to this line, when I read testStartAdJobTransportAction and testStopAdJobTransportAction, there are no asserts or verification.  Is it correct?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540367154", "createdAt": "2020-12-10T17:40:12Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java", "diffHunk": "@@ -43,11 +55,26 @@\n     @Before\n     public void setUp() throws Exception {\n         super.setUp();\n+        ClusterService clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES)))\n+        );\n+\n+        Settings build = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(build);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n \n         action = new AnomalyDetectorJobTransportAction(\n             mock(TransportService.class),\n             mock(ActionFilters.class),\n-            client(),\n+            client,\n+            clusterService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg==", "bodyText": "do we have code verifying alice has permission to do sth but not others?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540367606", "createdAt": "2020-12-10T17:40:48Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java", "diffHunk": "@@ -43,11 +55,26 @@\n     @Before\n     public void setUp() throws Exception {\n         super.setUp();\n+        ClusterService clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES)))\n+        );\n+\n+        Settings build = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(build);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ==", "bodyText": "any verification after the call?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540368225", "createdAt": "2020-12-10T17:41:33Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/IndexAnomalyDetectorTransportActionTests.java", "diffHunk": "@@ -83,6 +105,52 @@ public void testIndexTransportAction() {\n         action.doExecute(task, request, response);\n     }\n \n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOn() {\n+        Settings settings = Settings.builder().put(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.getKey(), true).build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODcwMw==", "bodyText": "I didn't find any any verification in the test case.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540368703", "createdAt": "2020-12-10T17:42:01Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/IndexAnomalyDetectorTransportActionTests.java", "diffHunk": "@@ -83,6 +105,52 @@ public void testIndexTransportAction() {\n         action.doExecute(task, request, response);\n     }\n \n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOn() {\n+        Settings settings = Settings.builder().put(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.getKey(), true).build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);\n+    }\n+\n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOff() {\n+        Settings settings = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/31b4a9f83101057896ba310a15e6a4908d02ffb4", "committedDate": "2020-12-11T21:27:51Z", "message": "Adding additional checks to security util functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTk1MjE2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#pullrequestreview-550595216", "createdAt": "2020-12-11T21:39:15Z", "commit": {"oid": "31b4a9f83101057896ba310a15e6a4908d02ffb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1438, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}