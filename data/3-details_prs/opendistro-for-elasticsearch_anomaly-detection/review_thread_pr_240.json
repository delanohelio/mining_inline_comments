{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDY0MDc1", "number": 240, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozMDoxNVrOEr5dCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MDoyMlrOEswWzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY1NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozMDoxNVrOHe61jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozNDozM1rOHgJQGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzMwOQ==", "bodyText": "What does this comment mean?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r502183309", "createdAt": "2020-10-09T04:30:15Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -178,32 +196,130 @@ private void onGetAnomalyDetectorResponse(GetResponse response) throws IOExcepti\n             return;\n         }\n \n-        searchAdInputIndices(detectorId);\n+        validateCategoricalField(detectorId);\n     }\n \n     private void createAnomalyDetector() {\n         try {\n-            QueryBuilder query = QueryBuilders.matchAllQuery();\n-            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n+            List<String> categoricalFields = anomalyDetector.getCategoryField();\n+            if (categoricalFields != null && categoricalFields.size() > 0) {\n+                QueryBuilder query = QueryBuilders.boolQuery().filter(QueryBuilders.existsQuery(AnomalyDetector.CATEGORY_FIELD));\n \n-            SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n \n-            client.search(searchRequest, ActionListener.wrap(response -> onSearchAdResponse(response), exception -> onFailure(exception)));\n+                SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+                client\n+                    .search(\n+                        searchRequest,\n+                        ActionListener.wrap(response -> onSearchMultiEntityAdResponse(response), exception -> { onFailure(exception); })\n+                    );\n+            } else {\n+                QueryBuilder query = QueryBuilders.matchAllQuery();\n+                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n+\n+                SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+                client\n+                    .search(\n+                        searchRequest,\n+                        ActionListener.wrap(response -> onSearchSingleEntityAdResponse(response), exception -> onFailure(exception))\n+                    );\n+            }\n         } catch (Exception e) {\n             onFailure(e);\n         }\n     }\n \n-    private void onSearchAdResponse(SearchResponse response) throws IOException {\n-        if (response.getHits().getTotalHits().value >= maxAnomalyDetectors) {\n-            String errorMsg = \"Can't create anomaly detector more than \" + maxAnomalyDetectors;\n+    private void onSearchSingleEntityAdResponse(SearchResponse response) throws IOException {\n+        if (response.getHits().getTotalHits().value >= maxSingleEntityAnomalyDetectors) {\n+            String errorMsg = EXCEEDED_MAX_SINGLE_ENTITY_DETECTORS_PREFIX_MSG + maxSingleEntityAnomalyDetectors;\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n         } else {\n             searchAdInputIndices(null);\n         }\n     }\n \n+    private void onSearchMultiEntityAdResponse(SearchResponse response) throws IOException {\n+        if (response.getHits().getTotalHits().value >= maxMultiEntityAnomalyDetectors) {\n+            String errorMsg = EXCEEDED_MAX_MULTI_ENTITY_DETECTORS_PREFIX_MSG + maxMultiEntityAnomalyDetectors;\n+            logger.error(errorMsg);\n+            onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            validateCategoricalField(null);\n+        }\n+    }\n+\n+    /**\n+     * Precondition: anomalyDetector.getCategoryField() != null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2ODA1Nw==", "bodyText": "not true anymore.  Removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503468057", "createdAt": "2020-10-12T18:34:33Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -178,32 +196,130 @@ private void onGetAnomalyDetectorResponse(GetResponse response) throws IOExcepti\n             return;\n         }\n \n-        searchAdInputIndices(detectorId);\n+        validateCategoricalField(detectorId);\n     }\n \n     private void createAnomalyDetector() {\n         try {\n-            QueryBuilder query = QueryBuilders.matchAllQuery();\n-            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n+            List<String> categoricalFields = anomalyDetector.getCategoryField();\n+            if (categoricalFields != null && categoricalFields.size() > 0) {\n+                QueryBuilder query = QueryBuilders.boolQuery().filter(QueryBuilders.existsQuery(AnomalyDetector.CATEGORY_FIELD));\n \n-            SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n \n-            client.search(searchRequest, ActionListener.wrap(response -> onSearchAdResponse(response), exception -> onFailure(exception)));\n+                SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+                client\n+                    .search(\n+                        searchRequest,\n+                        ActionListener.wrap(response -> onSearchMultiEntityAdResponse(response), exception -> { onFailure(exception); })\n+                    );\n+            } else {\n+                QueryBuilder query = QueryBuilders.matchAllQuery();\n+                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(0).timeout(requestTimeout);\n+\n+                SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+                client\n+                    .search(\n+                        searchRequest,\n+                        ActionListener.wrap(response -> onSearchSingleEntityAdResponse(response), exception -> onFailure(exception))\n+                    );\n+            }\n         } catch (Exception e) {\n             onFailure(e);\n         }\n     }\n \n-    private void onSearchAdResponse(SearchResponse response) throws IOException {\n-        if (response.getHits().getTotalHits().value >= maxAnomalyDetectors) {\n-            String errorMsg = \"Can't create anomaly detector more than \" + maxAnomalyDetectors;\n+    private void onSearchSingleEntityAdResponse(SearchResponse response) throws IOException {\n+        if (response.getHits().getTotalHits().value >= maxSingleEntityAnomalyDetectors) {\n+            String errorMsg = EXCEEDED_MAX_SINGLE_ENTITY_DETECTORS_PREFIX_MSG + maxSingleEntityAnomalyDetectors;\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n         } else {\n             searchAdInputIndices(null);\n         }\n     }\n \n+    private void onSearchMultiEntityAdResponse(SearchResponse response) throws IOException {\n+        if (response.getHits().getTotalHits().value >= maxMultiEntityAnomalyDetectors) {\n+            String errorMsg = EXCEEDED_MAX_MULTI_ENTITY_DETECTORS_PREFIX_MSG + maxMultiEntityAnomalyDetectors;\n+            logger.error(errorMsg);\n+            onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            validateCategoricalField(null);\n+        }\n+    }\n+\n+    /**\n+     * Precondition: anomalyDetector.getCategoryField() != null.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzMwOQ=="}, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY1OTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozMzoxOVrOHe64Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMzo0MlrOHgJOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4Mzk0Mg==", "bodyText": "1 is magic number, how about we create CATEGORY_FIELD_LIMIT instant and use it at all other places. like IndexAnomalyDetectorActionHandler.java line 269:\nif (categoryField.size() != 1) {", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r502183942", "createdAt": "2020-10-09T04:33:19Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -105,7 +107,62 @@\n      * @param uiMetadata        metadata used by Kibana\n      * @param schemaVersion     anomaly detector index mapping version\n      * @param lastUpdateTime    detector's last update time\n+     * @param categoryField     a list of partition fields\n      */\n+    public AnomalyDetector(\n+        String detectorId,\n+        Long version,\n+        String name,\n+        String description,\n+        String timeField,\n+        List<String> indices,\n+        List<Feature> features,\n+        QueryBuilder filterQuery,\n+        TimeConfiguration detectionInterval,\n+        TimeConfiguration windowDelay,\n+        Integer shingleSize,\n+        Map<String, Object> uiMetadata,\n+        Integer schemaVersion,\n+        Instant lastUpdateTime,\n+        List<String> categoryField\n+    ) {\n+        if (Strings.isBlank(name)) {\n+            throw new IllegalArgumentException(\"Detector name should be set\");\n+        }\n+        if (timeField == null) {\n+            throw new IllegalArgumentException(\"Time field should be set\");\n+        }\n+        if (indices == null || indices.isEmpty()) {\n+            throw new IllegalArgumentException(\"Indices should be set\");\n+        }\n+        if (detectionInterval == null) {\n+            throw new IllegalArgumentException(\"Detection interval should be set\");\n+        }\n+        if (shingleSize != null && shingleSize < 1) {\n+            throw new IllegalArgumentException(\"Shingle size must be a positive integer\");\n+        }\n+        if (categoryField != null && categoryField.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzAyOA==", "bodyText": "+1 I like the simpler check.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503427028", "createdAt": "2020-10-12T17:08:28Z", "author": {"login": "saratvemulapalli"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -105,7 +107,62 @@\n      * @param uiMetadata        metadata used by Kibana\n      * @param schemaVersion     anomaly detector index mapping version\n      * @param lastUpdateTime    detector's last update time\n+     * @param categoryField     a list of partition fields\n      */\n+    public AnomalyDetector(\n+        String detectorId,\n+        Long version,\n+        String name,\n+        String description,\n+        String timeField,\n+        List<String> indices,\n+        List<Feature> features,\n+        QueryBuilder filterQuery,\n+        TimeConfiguration detectionInterval,\n+        TimeConfiguration windowDelay,\n+        Integer shingleSize,\n+        Map<String, Object> uiMetadata,\n+        Integer schemaVersion,\n+        Instant lastUpdateTime,\n+        List<String> categoryField\n+    ) {\n+        if (Strings.isBlank(name)) {\n+            throw new IllegalArgumentException(\"Detector name should be set\");\n+        }\n+        if (timeField == null) {\n+            throw new IllegalArgumentException(\"Time field should be set\");\n+        }\n+        if (indices == null || indices.isEmpty()) {\n+            throw new IllegalArgumentException(\"Indices should be set\");\n+        }\n+        if (detectionInterval == null) {\n+            throw new IllegalArgumentException(\"Detection interval should be set\");\n+        }\n+        if (shingleSize != null && shingleSize < 1) {\n+            throw new IllegalArgumentException(\"Shingle size must be a positive integer\");\n+        }\n+        if (categoryField != null && categoryField.size() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4Mzk0Mg=="}, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzcxMg==", "bodyText": "changed", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503467712", "createdAt": "2020-10-12T18:33:42Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -105,7 +107,62 @@\n      * @param uiMetadata        metadata used by Kibana\n      * @param schemaVersion     anomaly detector index mapping version\n      * @param lastUpdateTime    detector's last update time\n+     * @param categoryField     a list of partition fields\n      */\n+    public AnomalyDetector(\n+        String detectorId,\n+        Long version,\n+        String name,\n+        String description,\n+        String timeField,\n+        List<String> indices,\n+        List<Feature> features,\n+        QueryBuilder filterQuery,\n+        TimeConfiguration detectionInterval,\n+        TimeConfiguration windowDelay,\n+        Integer shingleSize,\n+        Map<String, Object> uiMetadata,\n+        Integer schemaVersion,\n+        Instant lastUpdateTime,\n+        List<String> categoryField\n+    ) {\n+        if (Strings.isBlank(name)) {\n+            throw new IllegalArgumentException(\"Detector name should be set\");\n+        }\n+        if (timeField == null) {\n+            throw new IllegalArgumentException(\"Time field should be set\");\n+        }\n+        if (indices == null || indices.isEmpty()) {\n+            throw new IllegalArgumentException(\"Indices should be set\");\n+        }\n+        if (detectionInterval == null) {\n+            throw new IllegalArgumentException(\"Detection interval should be set\");\n+        }\n+        if (shingleSize != null && shingleSize < 1) {\n+            throw new IllegalArgumentException(\"Shingle size must be a positive integer\");\n+        }\n+        if (categoryField != null && categoryField.size() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4Mzk0Mg=="}, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY2NDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozNjoyMFrOHe66qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMjowMlrOHgJL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NDYxOQ==", "bodyText": "minor: if we plan to support multiple category fields, should we name this as \"categoryFields\" ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r502184619", "createdAt": "2020-10-09T04:36:20Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -87,6 +88,7 @@\n     private final Map<String, Object> uiMetadata;\n     private final Integer schemaVersion;\n     private final Instant lastUpdateTime;\n+    private final List<String> categoryField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Njk4Ng==", "bodyText": "yes, changed", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503466986", "createdAt": "2020-10-12T18:32:02Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -87,6 +88,7 @@\n     private final Map<String, Object> uiMetadata;\n     private final Integer schemaVersion;\n     private final Instant lastUpdateTime;\n+    private final List<String> categoryField;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NDYxOQ=="}, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzIxMjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoxMDoyOFrOHgGziQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMjoxNlrOHgJMVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzk3Nw==", "bodyText": "I see we just use 1 category field today, do we see possible use cases of multiple category fields ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503427977", "createdAt": "2020-10-12T17:10:28Z", "author": {"login": "saratvemulapalli"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -87,6 +88,7 @@\n     private final Map<String, Object> uiMetadata;\n     private final Integer schemaVersion;\n     private final Instant lastUpdateTime;\n+    private final List<String> categoryField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzA5Mg==", "bodyText": "yes, maybe in the future", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503467092", "createdAt": "2020-10-12T18:32:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -87,6 +88,7 @@\n     private final Map<String, Object> uiMetadata;\n     private final Integer schemaVersion;\n     private final Instant lastUpdateTime;\n+    private final List<String> categoryField;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzk3Nw=="}, "originalCommit": {"oid": "33ede2ceedda83e461b54f09251c7f55ada68377"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzY0OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/constant/CommonName.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTozOTo0N1rOHgK6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDoyMjo0OFrOHgRXTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTMyNw==", "bodyText": "Do we plan to write HC detector's result into another index?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503495327", "createdAt": "2020-10-12T19:39:47Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/constant/CommonName.java", "diffHunk": "@@ -22,6 +22,9 @@\n     // index name for anomaly checkpoint of each model. One model one document.\n     public static final String CHECKPOINT_INDEX_NAME = \".opendistro-anomaly-checkpoints\";\n \n+    // The alias of the index in which to write single-entity AD result history", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4OTgxMg==", "bodyText": "not in the plan.  The code would have to change a lot for that to happen.  e.g., depends on there is categorical field or not, job scheduler will save to different places.  Right now, job scheduler does not have access to AnomalyDetector object.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503589812", "createdAt": "2020-10-12T23:49:52Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/constant/CommonName.java", "diffHunk": "@@ -22,6 +22,9 @@\n     // index name for anomaly checkpoint of each model. One model one document.\n     public static final String CHECKPOINT_INDEX_NAME = \".opendistro-anomaly-checkpoints\";\n \n+    // The alias of the index in which to write single-entity AD result history", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTMyNw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5Mzk4Ng==", "bodyText": "Got it, how about remove the \"single-entity\" from the comments?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503593986", "createdAt": "2020-10-12T23:55:15Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/constant/CommonName.java", "diffHunk": "@@ -22,6 +22,9 @@\n     // index name for anomaly checkpoint of each model. One model one document.\n     public static final String CHECKPOINT_INDEX_NAME = \".opendistro-anomaly-checkpoints\";\n \n+    // The alias of the index in which to write single-entity AD result history", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTMyNw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMDk3Mw==", "bodyText": "removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503600973", "createdAt": "2020-10-13T00:22:48Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/constant/CommonName.java", "diffHunk": "@@ -22,6 +22,9 @@\n     // index name for anomaly checkpoint of each model. One model one document.\n     public static final String CHECKPOINT_INDEX_NAME = \".opendistro-anomaly-checkpoints\";\n \n+    // The alias of the index in which to write single-entity AD result history", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTMyNw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzY1MDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MDoyMlrOHgK7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDoyMzowN1rOHgRXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTU2Mw==", "bodyText": "Should we change to \"category_fields\" ? Same question for line 113, 130, and other places. Suggest to replace by searching all files.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503495563", "createdAt": "2020-10-12T19:40:22Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private static final String SHINGLE_SIZE_FIELD = \"shingle_size\";\n     private static final String LAST_UPDATE_TIME_FIELD = \"last_update_time\";\n     public static final String UI_METADATA_FIELD = \"ui_metadata\";\n+    public static final String CATEGORY_FIELD = \"category_field\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDYyNw==", "bodyText": "Can we do it later?  Both Yizhe and I need to change for this.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503594627", "createdAt": "2020-10-12T23:57:48Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private static final String SHINGLE_SIZE_FIELD = \"shingle_size\";\n     private static final String LAST_UPDATE_TIME_FIELD = \"last_update_time\";\n     public static final String UI_METADATA_FIELD = \"ui_metadata\";\n+    public static final String CATEGORY_FIELD = \"category_field\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTU2Mw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5ODMzNA==", "bodyText": "Sure, I'm ok", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503598334", "createdAt": "2020-10-13T00:12:21Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private static final String SHINGLE_SIZE_FIELD = \"shingle_size\";\n     private static final String LAST_UPDATE_TIME_FIELD = \"last_update_time\";\n     public static final String UI_METADATA_FIELD = \"ui_metadata\";\n+    public static final String CATEGORY_FIELD = \"category_field\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTU2Mw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMTA0Nw==", "bodyText": "Thanks so much for your consideration.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/240#discussion_r503601047", "createdAt": "2020-10-13T00:23:07Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private static final String SHINGLE_SIZE_FIELD = \"shingle_size\";\n     private static final String LAST_UPDATE_TIME_FIELD = \"last_update_time\";\n     public static final String UI_METADATA_FIELD = \"ui_metadata\";\n+    public static final String CATEGORY_FIELD = \"category_field\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTU2Mw=="}, "originalCommit": {"oid": "febd0a571a2432ff663ab8e4b6bef0c4349edc52"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2950, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}