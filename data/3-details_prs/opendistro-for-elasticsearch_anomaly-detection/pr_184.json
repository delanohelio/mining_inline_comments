{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjQwMDg1", "number": 184, "title": "change to exhausive search for training data", "bodyText": "Issue #, if available: #180\nDescription of changes: This pr uses a robust exhaustive search for collecting training data samples at model creation time so the process is the best-effort against missing data in indices. For more discussion, use the issue above.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-02T16:59:59Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184", "merged": true, "mergeCommit": {"oid": "cd3bdaea465cabb0d72a76df14c5ea093a0d5080"}, "closed": true, "closedAt": "2020-07-10T00:26:55Z", "author": {"login": "wnbts"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyU244gFqTQ0MzI4MjYyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczYd-egFqTQ0NjA1MDgyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjgyNjI2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#pullrequestreview-443282626", "createdAt": "2020-07-06T17:40:16Z", "commit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0MDoxNlrOGthBYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0MDoxNlrOGthBYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ==", "bodyText": "add some interpolation if you miss less than 25% of points?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450380129", "createdAt": "2020-07-06T17:40:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );\n+            } catch (IOException e) {\n+                listener.onFailure(e);\n+            }\n         } else {\n             listener.onResponse(Optional.empty());\n         }\n     }\n \n-    private void processColdStartSamples(Optional<Entry<double[][], Integer>> samples, ActionListener<Optional<double[][]>> listener) {\n-        listener\n-            .onResponse(\n-                samples\n-                    .map(\n-                        results -> transpose(\n-                            interpolator.interpolate(transpose(results.getKey()), results.getValue() * (results.getKey().length - 1) + 1)\n-                        )\n-                    )\n-                    .map(points -> batchShingle(points, shingleSize))\n-            );\n+    private void processColdStartSamples(List<Optional<double[]>> samples, ActionListener<Optional<double[][]>> listener) {\n+        List<double[]> shingles = new ArrayList<>();\n+        Optional<double[]> previous = Optional.empty();\n+        List<double[]> currentBlock = new ArrayList<>();\n+        for (Optional<double[]> sample : samples) {\n+            if (sample.isPresent()) {\n+                currentBlock.add(sample.get());\n+            } else {\n+                if (previous.isPresent()) {\n+                    batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+                    currentBlock.clear();\n+                }\n+            }\n+            previous = sample;\n+        }\n+        batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+        listener.onResponse(Optional.of(shingles.toArray(new double[0][0])).filter(results -> results.length > 0));\n+    }\n+\n+    private Optional<double[][]> batchShingle(List<double[]> points, int shingleSize) {\n+        return Optional\n+            .ofNullable(points)\n+            .filter(p -> p.size() >= shingleSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDAzODg2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#pullrequestreview-443403886", "createdAt": "2020-07-06T20:59:38Z", "commit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo1OTozOFrOGtm7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo1OTozOFrOGtm7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3Njk4Ng==", "bodyText": "Is checking for latest.isPresent() (or even passing in latest as a param) still needed, since latest is not used by searchFeatureDao.getFeatureSamplesForPeriods or anywhere else in this function anymore?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450476986", "createdAt": "2020-07-06T20:59:38Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDI4NDI2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#pullrequestreview-443428426", "createdAt": "2020-07-06T21:47:14Z", "commit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo0NzoxNFrOGtoJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1MDoxOVrOGtoORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Njg2MQ==", "bodyText": "it's now used in line 253.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450496861", "createdAt": "2020-07-06T21:47:14Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3Njk4Ng=="}, "originalCommit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5ODExNg==", "bodyText": "no, since the results from search are known to be missing. that truth should not be manipulated. interpolation is for when the data is unknown.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450498116", "createdAt": "2020-07-06T21:50:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );\n+            } catch (IOException e) {\n+                listener.onFailure(e);\n+            }\n         } else {\n             listener.onResponse(Optional.empty());\n         }\n     }\n \n-    private void processColdStartSamples(Optional<Entry<double[][], Integer>> samples, ActionListener<Optional<double[][]>> listener) {\n-        listener\n-            .onResponse(\n-                samples\n-                    .map(\n-                        results -> transpose(\n-                            interpolator.interpolate(transpose(results.getKey()), results.getValue() * (results.getKey().length - 1) + 1)\n-                        )\n-                    )\n-                    .map(points -> batchShingle(points, shingleSize))\n-            );\n+    private void processColdStartSamples(List<Optional<double[]>> samples, ActionListener<Optional<double[][]>> listener) {\n+        List<double[]> shingles = new ArrayList<>();\n+        Optional<double[]> previous = Optional.empty();\n+        List<double[]> currentBlock = new ArrayList<>();\n+        for (Optional<double[]> sample : samples) {\n+            if (sample.isPresent()) {\n+                currentBlock.add(sample.get());\n+            } else {\n+                if (previous.isPresent()) {\n+                    batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+                    currentBlock.clear();\n+                }\n+            }\n+            previous = sample;\n+        }\n+        batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+        listener.onResponse(Optional.of(shingles.toArray(new double[0][0])).filter(results -> results.length > 0));\n+    }\n+\n+    private Optional<double[][]> batchShingle(List<double[]> points, int shingleSize) {\n+        return Optional\n+            .ofNullable(points)\n+            .filter(p -> p.size() >= shingleSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, "originalCommit": {"oid": "976a225a275d724b0f8775b8136e0327b47ba3c3"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "committedDate": "2020-07-09T01:33:53Z", "message": "change to exhausive search for training data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Nzg2Mjc5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#pullrequestreview-445786279", "createdAt": "2020-07-09T16:36:30Z", "commit": {"oid": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDUwODI4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#pullrequestreview-446050828", "createdAt": "2020-07-10T00:26:41Z", "commit": {"oid": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}