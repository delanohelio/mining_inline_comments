{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDE5Nzg0", "number": 287, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoxNDozNVrOEw3a4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoxNTo1OVrOEw3c4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njc1MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoxNDozNVrOHmr6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoyMToxOFrOHmsKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyNzQyMA==", "bodyText": "Clarification: why does this need to be called if nodeCount = responseCount.incrementAndGet?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/287#discussion_r510327420", "createdAt": "2020-10-22T17:14:35Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -1015,18 +1022,47 @@ private void coldStart(AnomalyDetector detector) {\n     class EntityResultListener implements ActionListener<AcknowledgedResponse> {\n         private String nodeId;\n         private final String adID;\n+        private AtomicInteger responseCount;\n+        private int nodeCount;\n+        private ActionListener<AnomalyResultResponse> listener;\n+        private ClientException clientException;\n+        private List<AcknowledgedResponse> ackResponses;\n+        private AtomicReference<AnomalyDetectionException> failure;\n \n-        EntityResultListener(String nodeId, String adID) {\n+        EntityResultListener(\n+            String nodeId,\n+            String adID,\n+            AtomicInteger responseCount,\n+            int nodeCount,\n+            AtomicReference<AnomalyDetectionException> failure,\n+            ActionListener<AnomalyResultResponse> listener\n+        ) {\n             this.nodeId = nodeId;\n             this.adID = adID;\n+            this.responseCount = responseCount;\n+            this.nodeCount = nodeCount;\n+            this.failure = failure;\n+            this.listener = listener;\n+            this.clientException = null;\n+            this.ackResponses = new ArrayList<>();\n         }\n \n         @Override\n         public void onResponse(AcknowledgedResponse response) {\n-            stateManager.resetBackpressureCounter(nodeId);\n-            if (response.isAcknowledged() == false) {\n-                LOG.error(\"Cannot send entities' features to {} for {}\", nodeId, adID);\n-                stateManager.addPressure(nodeId);\n+            try {\n+                stateManager.resetBackpressureCounter(nodeId);\n+                if (response.isAcknowledged() == false) {\n+                    LOG.error(\"Cannot send entities' features to {} for {}\", nodeId, adID);\n+                    stateManager.addPressure(nodeId);\n+                } else {\n+                    ackResponses.add(response);\n+                }\n+            } catch (Exception ex) {\n+                LOG.error(\"Unexpected exception: {} for {}\", ex, adID);\n+            } finally {\n+                if (nodeCount == responseCount.incrementAndGet()) {\n+                    handleEntityException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa50ad5c739e6dc7053429ff4be975fa9db0e577"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzMTUwMw==", "bodyText": "because I send requests to multiple nodes.  Want to  process all responses after collecting all of them.  responseCount would increment every time I receive a response.  handleEntityException is a bad name.  I'll rename it to handleEntityResponses.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/287#discussion_r510331503", "createdAt": "2020-10-22T17:21:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -1015,18 +1022,47 @@ private void coldStart(AnomalyDetector detector) {\n     class EntityResultListener implements ActionListener<AcknowledgedResponse> {\n         private String nodeId;\n         private final String adID;\n+        private AtomicInteger responseCount;\n+        private int nodeCount;\n+        private ActionListener<AnomalyResultResponse> listener;\n+        private ClientException clientException;\n+        private List<AcknowledgedResponse> ackResponses;\n+        private AtomicReference<AnomalyDetectionException> failure;\n \n-        EntityResultListener(String nodeId, String adID) {\n+        EntityResultListener(\n+            String nodeId,\n+            String adID,\n+            AtomicInteger responseCount,\n+            int nodeCount,\n+            AtomicReference<AnomalyDetectionException> failure,\n+            ActionListener<AnomalyResultResponse> listener\n+        ) {\n             this.nodeId = nodeId;\n             this.adID = adID;\n+            this.responseCount = responseCount;\n+            this.nodeCount = nodeCount;\n+            this.failure = failure;\n+            this.listener = listener;\n+            this.clientException = null;\n+            this.ackResponses = new ArrayList<>();\n         }\n \n         @Override\n         public void onResponse(AcknowledgedResponse response) {\n-            stateManager.resetBackpressureCounter(nodeId);\n-            if (response.isAcknowledged() == false) {\n-                LOG.error(\"Cannot send entities' features to {} for {}\", nodeId, adID);\n-                stateManager.addPressure(nodeId);\n+            try {\n+                stateManager.resetBackpressureCounter(nodeId);\n+                if (response.isAcknowledged() == false) {\n+                    LOG.error(\"Cannot send entities' features to {} for {}\", nodeId, adID);\n+                    stateManager.addPressure(nodeId);\n+                } else {\n+                    ackResponses.add(response);\n+                }\n+            } catch (Exception ex) {\n+                LOG.error(\"Unexpected exception: {} for {}\", ex, adID);\n+            } finally {\n+                if (nodeCount == responseCount.incrementAndGet()) {\n+                    handleEntityException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyNzQyMA=="}, "originalCommit": {"oid": "aa50ad5c739e6dc7053429ff4be975fa9db0e577"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njc1NjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/suppliers/ModelsOnNodeSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoxNTo1OVrOHmr9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoxODo1MlrOHmsEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyODI2Nw==", "bodyText": "Just want to confirm: this wont lead to the same model being printed twice correct? Like a model returned from modelManager wont also be returned but the cache, correct?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/287#discussion_r510328267", "createdAt": "2020-10-22T17:15:59Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/suppliers/ModelsOnNodeSupplier.java", "diffHunk": "@@ -45,16 +48,18 @@\n      * Constructor\n      *\n      * @param modelManager object that manages the model partitions hosted on the node\n+     * @param cache object that manages multi-entity detectors' models\n      */\n-    public ModelsOnNodeSupplier(ModelManager modelManager) {\n+    public ModelsOnNodeSupplier(ModelManager modelManager, CacheProvider cache) {\n         this.modelManager = modelManager;\n+        this.cache = cache;\n     }\n \n     @Override\n     public List<Map<String, Object>> get() {\n         List<Map<String, Object>> values = new ArrayList<>();\n-        modelManager\n-            .getAllModels()\n+        Stream\n+            .concat(modelManager.getAllModels().stream(), cache.get().getAllModels().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa50ad5c739e6dc7053429ff4be975fa9db0e577"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzMDAxMQ==", "bodyText": "yeah, it won't.  They have different models.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/287#discussion_r510330011", "createdAt": "2020-10-22T17:18:52Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/suppliers/ModelsOnNodeSupplier.java", "diffHunk": "@@ -45,16 +48,18 @@\n      * Constructor\n      *\n      * @param modelManager object that manages the model partitions hosted on the node\n+     * @param cache object that manages multi-entity detectors' models\n      */\n-    public ModelsOnNodeSupplier(ModelManager modelManager) {\n+    public ModelsOnNodeSupplier(ModelManager modelManager, CacheProvider cache) {\n         this.modelManager = modelManager;\n+        this.cache = cache;\n     }\n \n     @Override\n     public List<Map<String, Object>> get() {\n         List<Map<String, Object>> values = new ArrayList<>();\n-        modelManager\n-            .getAllModels()\n+        Stream\n+            .concat(modelManager.getAllModels().stream(), cache.get().getAllModels().stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyODI2Nw=="}, "originalCommit": {"oid": "aa50ad5c739e6dc7053429ff4be975fa9db0e577"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}