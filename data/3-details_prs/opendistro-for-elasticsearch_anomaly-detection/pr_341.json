{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjgzNTY5", "number": 341, "title": "filter out exceptions which should not be counted in failure stats", "bodyText": "Issue #, if available:\nDescription of changes:\n\nCatch wrong feature query exception and stop detector\nSome exceptions are caused by customer input, which not related with the code logic. Will filter out such exceptions so we can get the failure stats which caused by server error.\n\nTest\n\n./gradlew build\n./gradlew integTest -PnumNodes=3 \nStart local cluster and test\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-24T12:01:54Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341", "merged": true, "mergeCommit": {"oid": "7df38a144dd9554d2d9fa519397e941daeedd780"}, "closed": true, "closedAt": "2020-12-28T21:11:05Z", "author": {"login": "ylwu-amzn"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpSQvBAH2gAyNTQ1MjgzNTY5OmZmOGFlMzEwMmViMDEzNTczODQ3OWU4YzVlMWUzY2Q2NDYwMTIyZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqsgbjAFqTU1OTI5ODg4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/ff8ae3102eb0135738479e8c5e1e3cd6460122ea", "committedDate": "2020-12-24T11:44:42Z", "message": "filter out exceptions which should not be counted in failure stats"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzA3OTE1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-558707915", "createdAt": "2020-12-24T19:39:39Z", "commit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTozOTo0MFrOILTxKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTozOTo0MFrOILTxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA==", "bodyText": "This error checking is too general. I will change this part in next commit. My plan is to list all of supported aggregation types, check if the feature aggregation supported before starting detector.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548729130", "createdAt": "2020-12-24T19:39:40Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzA5MzIz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-558709323", "createdAt": "2020-12-24T19:54:40Z", "commit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1NDo0MFrOILUXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1OTowNlrOILUgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczODkzOA==", "bodyText": "maybe rename it to countedInStats", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548738938", "createdAt": "2020-12-24T19:54:40Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/common/exception/AnomalyDetectionException.java", "diffHunk": "@@ -20,7 +20,14 @@\n  */\n public class AnomalyDetectionException extends RuntimeException {\n \n-    private final String anomalyDetectorId;\n+    private String anomalyDetectorId;\n+    // countInStats will be used to tell whether the exception should be\n+    // counted in feature stats.\n+    private boolean countInStats = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczOTY0Nw==", "bodyText": "double .countInStats(false)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548739647", "createdAt": "2020-12-24T19:55:48Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -264,7 +269,10 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"AnomalyDetector is not available.\", true).countInStats(false).countInStats(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTE5Mg==", "bodyText": "do we have plan to migrate other IT to extend this ADIntegTestCase?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548741192", "createdAt": "2020-12-24T19:59:06Z", "author": {"login": "yizheliu-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/ADIntegTestCase.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils.XCONTENT_WITH_TYPE;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+public abstract class ADIntegTestCase extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzE3MTUy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-558717152", "createdAt": "2020-12-24T21:29:45Z", "commit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMToyOTo0NVrOILVH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTo1NzozOFrOILVSvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTMzMQ==", "bodyText": "This can be a bug of us.  Can we count it in stats?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751331", "createdAt": "2020-12-24T21:29:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/EntityColdStarter.java", "diffHunk": "@@ -351,7 +351,10 @@ private void getEntityColdStartData(\n         ActionListener<Optional<AnomalyDetector>> getDetectorListener = ActionListener.wrap(detectorOp -> {\n             if (!detectorOp.isPresent()) {\n                 nodeStateManager\n-                    .setLastColdStartException(detectorId, new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                    .setLastColdStartException(\n+                        detectorId,\n+                        new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTg1Mg==", "bodyText": "how about changing to \"!(e instanceof AnomalyDetectionException) || ((AnomalyDetectionException) e).isCountInStats()\"?  This is more effective than negative of negative.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751852", "createdAt": "2020-12-24T21:35:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -228,16 +229,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 hcDetectors.remove(adID);\n                 original.onResponse(r);\n             }, e -> {\n-                adStats.getStat(StatNames.AD_EXECUTE_FAIL_COUNT.getName()).increment();\n-                if (hcDetectors.contains(adID)) {\n-                    adStats.getStat(StatNames.AD_HC_EXECUTE_FAIL_COUNT.getName()).increment();\n+                // If exception is AnomalyDetectionException and it should not be counted in stats,\n+                // we will not count it in failure stats.\n+                if (!(e instanceof AnomalyDetectionException && !((AnomalyDetectionException) e).isCountInStats())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTk4OQ==", "bodyText": "This can be an error from us.  Can we count it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548751989", "createdAt": "2020-12-24T21:36:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -264,7 +269,10 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"AnomalyDetector is not available.\", true).countInStats(false).countInStats(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODczOTY0Nw=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1Mzk4MQ==", "bodyText": "FYI: We can also get RemoteTransportException with nestedd java.lang.IllegalArgumentException.  See tt V279686544 for detail.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548753981", "createdAt": "2020-12-24T21:56:37Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcyOTEzMA=="}, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NDExMQ==", "bodyText": "This can be an error from us. Can we count it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548754111", "createdAt": "2020-12-24T21:57:38Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/EntityResultTransportAction.java", "diffHunk": "@@ -147,7 +147,7 @@ protected void doExecute(Task task, EntityResultRequest request, ActionListener<\n     ) {\n         return ActionListener.wrap(detectorOptional -> {\n             if (!detectorOptional.isPresent()) {\n-                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(detectorId, \"AnomalyDetector is not available.\", true).countInStats(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzMzMDMw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-558733030", "createdAt": "2020-12-25T01:43:14Z", "commit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMTo0MzoxNFrOILWnOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMTo0MzoxNFrOILWnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3NTczOA==", "bodyText": "Do you plan to add the error message for the exception on kibana?  Users need to know why their detectors are stopped.   Also, we need to have some prefix before the concrete causes.  Kibana would need it to differentiate errors from the backend and provide suggested actions.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r548775738", "createdAt": "2020-12-25T01:43:14Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -598,6 +606,12 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n             listener.onFailure(ex);\n         } else if (ex instanceof AnomalyDetectionException) {\n             listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else if (ex instanceof SearchPhaseExecutionException) {\n+            // This is to catch invalid aggregation on wrong field type. For example,\n+            // sum aggregation on text field. We should end detector run for such case.\n+            if (\"all shards failed\".equals(ex.getMessage())) {\n+                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8ae3102eb0135738479e8c5e1e3cd6460122ea"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351d5d21157b4cf6ea61b54c2ce050c8f751b7dd", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/351d5d21157b4cf6ea61b54c2ce050c8f751b7dd", "committedDate": "2020-12-25T02:42:05Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb", "committedDate": "2020-12-26T02:49:54Z", "message": "add invalid query tag so we can show error message on frontend"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1233fcd6d47dbcda5cb22f725ebdd4b5899c514", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f1233fcd6d47dbcda5cb22f725ebdd4b5899c514", "committedDate": "2020-12-26T02:30:25Z", "message": "add invalid query tag so we can show error message on frontend"}, "afterCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb", "committedDate": "2020-12-26T02:49:54Z", "message": "add invalid query tag so we can show error message on frontend"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MjY0OTM1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-559264935", "createdAt": "2020-12-28T18:58:54Z", "commit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo1ODo1NFrOIL__YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowMDo0N1rOIMABTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ==", "bodyText": "if invalidQuery is false, do you want to return immediately?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549453665", "createdAt": "2020-12-28T18:58:54Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NDE1Nw==", "bodyText": "Also, how do you plan to deal with #341 (comment) ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#discussion_r549454157", "createdAt": "2020-12-28T19:00:47Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -609,8 +612,20 @@ void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse>\n         } else if (ex instanceof SearchPhaseExecutionException) {\n             // This is to catch invalid aggregation on wrong field type. For example,\n             // sum aggregation on text field. We should end detector run for such case.\n-            if (\"all shards failed\".equals(ex.getMessage())) {\n-                listener.onFailure(new EndRunException(adID, ex.getCause().getMessage(), ex, true).countInStats(false));\n+            boolean invalidQuery = true;\n+            // If all shards return bad request and failure cause is IllegalArgumentException, we\n+            // consider the feature query is invalid and will not count the error in failure stats.\n+            for (ShardSearchFailure failure : ((SearchPhaseExecutionException) ex).shardFailures()) {\n+                if (RestStatus.BAD_REQUEST != failure.status() || !(failure.getCause() instanceof IllegalArgumentException)) {\n+                    invalidQuery = false;\n+                }\n+            }\n+            if (invalidQuery) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, INVALID_QUERY + ((SearchPhaseExecutionException) ex).getDetailedMessage(), ex, true)\n+                            .countedInStats(false)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1MzY2NQ=="}, "originalCommit": {"oid": "0aa06cbf0dabd1f0ed14eccbf4b8d140a7cbc3cb"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e204a1c069c1cb3a00cde38956062b2759aa9c89", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/e204a1c069c1cb3a00cde38956062b2759aa9c89", "committedDate": "2020-12-28T20:30:12Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mjk4ODg1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/341#pullrequestreview-559298885", "createdAt": "2020-12-28T20:53:18Z", "commit": {"oid": "e204a1c069c1cb3a00cde38956062b2759aa9c89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}