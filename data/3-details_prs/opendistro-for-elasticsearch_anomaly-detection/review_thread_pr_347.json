{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjIzMTUz", "number": 347, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToyMToxOFrOFJ3wjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToyMToxOFrOFJ3wjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODk1MDUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportActionTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToyMToxOFrOIMYcNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMjozNzoyNFrOIMZxWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1NDI2MQ==", "bodyText": "Do we have tests for HC detectors?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/347#discussion_r549854261", "createdAt": "2020-12-29T21:21:18Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportActionTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.TestHelpers.randomQuery;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.ADIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.common.exception.AnomalyDetectionException;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.Feature;\n+import com.amazon.opendistroforelasticsearch.ad.model.IntervalTimeConfiguration;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class AnomalyResultTransportActionTests extends ADIntegTestCase {\n+    private String testIndex;\n+    private Instant testDataTimeStamp;\n+    private long start;\n+    private long end;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        testIndex = \"test_data\";\n+        testDataTimeStamp = Instant.now();\n+        start = testDataTimeStamp.minus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        end = testDataTimeStamp.plus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        ingestTestData();\n+    }\n+\n+    private void ingestTestData() throws IOException {\n+        String mappings = \"{\\\"properties\\\":{\\\"timestamp\\\":{\\\"type\\\":\\\"date\\\",\\\"format\\\":\\\"strict_date_time||epoch_millis\\\"},\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcfdf6108a98d33ebd7b697544b95717508e8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1OTM0Mw==", "bodyText": "Tested both single entity and HC detectors on test cluster. But not include HC detectors IT cases. Will send out another PR to add HC detector IT cases.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/347#discussion_r549859343", "createdAt": "2020-12-29T21:41:04Z", "author": {"login": "ylwu-amzn"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportActionTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.TestHelpers.randomQuery;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.ADIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.common.exception.AnomalyDetectionException;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.Feature;\n+import com.amazon.opendistroforelasticsearch.ad.model.IntervalTimeConfiguration;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class AnomalyResultTransportActionTests extends ADIntegTestCase {\n+    private String testIndex;\n+    private Instant testDataTimeStamp;\n+    private long start;\n+    private long end;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        testIndex = \"test_data\";\n+        testDataTimeStamp = Instant.now();\n+        start = testDataTimeStamp.minus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        end = testDataTimeStamp.plus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        ingestTestData();\n+    }\n+\n+    private void ingestTestData() throws IOException {\n+        String mappings = \"{\\\"properties\\\":{\\\"timestamp\\\":{\\\"type\\\":\\\"date\\\",\\\"format\\\":\\\"strict_date_time||epoch_millis\\\"},\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1NDI2MQ=="}, "originalCommit": {"oid": "e29fcfdf6108a98d33ebd7b697544b95717508e8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NjA1Nw==", "bodyText": "Add more IT cases for HC detectors in this PR #348, will backport once the PR approved.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/347#discussion_r549876057", "createdAt": "2020-12-29T22:37:24Z", "author": {"login": "ylwu-amzn"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportActionTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.TestHelpers.randomQuery;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.ADIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.common.exception.AnomalyDetectionException;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.Feature;\n+import com.amazon.opendistroforelasticsearch.ad.model.IntervalTimeConfiguration;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class AnomalyResultTransportActionTests extends ADIntegTestCase {\n+    private String testIndex;\n+    private Instant testDataTimeStamp;\n+    private long start;\n+    private long end;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        testIndex = \"test_data\";\n+        testDataTimeStamp = Instant.now();\n+        start = testDataTimeStamp.minus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        end = testDataTimeStamp.plus(10, ChronoUnit.MINUTES).toEpochMilli();\n+        ingestTestData();\n+    }\n+\n+    private void ingestTestData() throws IOException {\n+        String mappings = \"{\\\"properties\\\":{\\\"timestamp\\\":{\\\"type\\\":\\\"date\\\",\\\"format\\\":\\\"strict_date_time||epoch_millis\\\"},\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1NDI2MQ=="}, "originalCommit": {"oid": "e29fcfdf6108a98d33ebd7b697544b95717508e8"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2853, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}