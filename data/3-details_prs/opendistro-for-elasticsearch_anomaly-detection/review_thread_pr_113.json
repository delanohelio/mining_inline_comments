{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzYzMDIz", "number": 113, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjoyOToxN1rOD6BNhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNDo0OFrOD6CI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTYzODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjoyOToxN1rOGRnsYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzo1ODo0NVrOGRpjSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTMxNQ==", "bodyText": "Nit: Add a comment describing what this means for those not familiar with MultiResponseDelegateActionListener", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421129315", "createdAt": "2020-05-06T22:29:17Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -70,9 +78,26 @@ public void profile(String detectorId, ActionListener<DetectorProfile> listener,\n             return;\n         }\n \n+        int totalListener = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTc1Mw==", "bodyText": "added", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421159753", "createdAt": "2020-05-06T23:58:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -70,9 +78,26 @@ public void profile(String detectorId, ActionListener<DetectorProfile> listener,\n             return;\n         }\n \n+        int totalListener = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTMxNQ=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY2ODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ModelProfile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo0MjoxOFrOGRn-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzo1OTozNFrOGRpkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDA1Nw==", "bodyText": "Nit: Typo", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421134057", "createdAt": "2020-05-06T22:42:18Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ModelProfile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+public class ModelProfile implements Writeable, ToXContent {\n+    // filed name in toXContent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MDAxNw==", "bodyText": "fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421160017", "createdAt": "2020-05-06T23:59:34Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ModelProfile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+public class ModelProfile implements Writeable, ToXContent {\n+    // filed name in toXContent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDA1Nw=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY3Mzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo0NDoyM1rOGRoCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxMTo0NVrOGRpy9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDg1NA==", "bodyText": "Why hardcode these strings?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421134854", "createdAt": "2020-05-06T22:44:23Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -38,26 +42,20 @@ public String getName() {\n         return name;\n     }\n \n-    /**\n-     * Get set of profile names\n-     *\n-     * @return set of profile names\n-     */\n-    public static Set<String> getNames() {\n-        Set<String> names = new HashSet<>();\n-\n-        for (ProfileName statName : ProfileName.values()) {\n-            names.add(statName.getName());\n-        }\n-        return names;\n-    }\n-\n     public static ProfileName getName(String name) {\n         switch (name) {\n             case \"state\":\n                 return STATE;\n             case \"error\":\n                 return ERROR;\n+            case \"coordinating_node\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2Mzc2Ng==", "bodyText": "changed to \"case CommonName.COORDINATING_NODE:\".", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421163766", "createdAt": "2020-05-07T00:11:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -38,26 +42,20 @@ public String getName() {\n         return name;\n     }\n \n-    /**\n-     * Get set of profile names\n-     *\n-     * @return set of profile names\n-     */\n-    public static Set<String> getNames() {\n-        Set<String> names = new HashSet<>();\n-\n-        for (ProfileName statName : ProfileName.values()) {\n-            names.add(statName.getName());\n-        }\n-        return names;\n-    }\n-\n     public static ProfileName getName(String name) {\n         switch (name) {\n             case \"state\":\n                 return STATE;\n             case \"error\":\n                 return ERROR;\n+            case \"coordinating_node\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDg1NA=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY4MDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo0NzowOVrOGRoGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxODoxNlrOGRp6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNTkwOQ==", "bodyText": "Use _all instead of all?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421135909", "createdAt": "2020-05-06T22:47:09Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -111,13 +115,14 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             throw new IllegalStateException(CommonErrorMessages.DISABLED_ERR_MSG);\n         }\n         String detectorId = request.param(DETECTOR_ID);\n-        boolean returnJob = request.paramAsBoolean(\"job\", false);\n         String typesStr = request.param(TYPE);\n         String rawPath = request.rawPath();\n         if (!Strings.isEmpty(typesStr) || rawPath.endsWith(PROFILE) || rawPath.endsWith(PROFILE + \"/\")) {\n+            boolean all = request.paramAsBoolean(\"all\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTY2Mg==", "bodyText": "changed", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421165662", "createdAt": "2020-05-07T00:18:16Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -111,13 +115,14 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             throw new IllegalStateException(CommonErrorMessages.DISABLED_ERR_MSG);\n         }\n         String detectorId = request.param(DETECTOR_ID);\n-        boolean returnJob = request.paramAsBoolean(\"job\", false);\n         String typesStr = request.param(TYPE);\n         String rawPath = request.rawPath();\n         if (!Strings.isEmpty(typesStr) || rawPath.endsWith(PROFILE) || rawPath.endsWith(PROFILE + \"/\")) {\n+            boolean all = request.paramAsBoolean(\"all\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNTkwOQ=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY5NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo1Mzo1MVrOGRoPxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoyMzozNlrOGRqBJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODM3Mg==", "bodyText": "These strings are already defined aren't they?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421138372", "createdAt": "2020-05-06T22:53:51Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NzM5OA==", "bodyText": "Moved these strings to CommonName and use CommonName", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421167398", "createdAt": "2020-05-07T00:23:36Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODM3Mg=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTcxMTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo1OTo1NVrOGRoYng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDozMzo0NVrOGRqNpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MDYzOA==", "bodyText": "What is significant about first entry as opposed to others?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421140638", "createdAt": "2020-05-06T22:59:55Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";\n+\n+    private ModelProfile[] modelProfile;\n+    private int shingleSize;\n+    private String coordinatingNode;\n+    private long totalSizeInBytes;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param in StreamInput\n+     * @throws IOException thrown when unable to read from stream\n+     */\n+    public ProfileResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        modelProfile = new ModelProfile[size];\n+        for (int i = 0; i < size; i++) {\n+            modelProfile[i] = new ModelProfile(in);\n+        }\n+        shingleSize = in.readVInt();\n+        coordinatingNode = in.readString();\n+        totalSizeInBytes = in.readVLong();\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param clusterName name of cluster\n+     * @param nodes List of ProfileNodeResponse from nodes\n+     * @param failures List of failures from nodes\n+     */\n+    public ProfileResponse(ClusterName clusterName, List<ProfileNodeResponse> nodes, List<FailedNodeException> failures) {\n+        super(clusterName, nodes, failures);\n+        totalSizeInBytes = 0L;\n+        List<ModelProfile> modelProfileList = new ArrayList<>();\n+        for (ProfileNodeResponse response : nodes) {\n+            String curNodeId = response.getNode().getId();\n+            if (response.getShingleSize() >= 0) {\n+                coordinatingNode = curNodeId;\n+                shingleSize = response.getShingleSize();\n+            }\n+            for (Map.Entry<String, Long> entry : response.getModelSize().entrySet()) {\n+                totalSizeInBytes += entry.getValue();\n+                modelProfileList.add(new ModelProfile(entry.getKey(), entry.getValue(), curNodeId));\n+            }\n+\n+        }\n+        if (coordinatingNode == null) {\n+            coordinatingNode = \"\";\n+        }\n+        this.modelProfile = modelProfileList.toArray(new ModelProfile[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDU5OA==", "bodyText": "It is a trick to convert a list to an array.  This means an empty array, not the first entry.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170598", "createdAt": "2020-05-07T00:33:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";\n+\n+    private ModelProfile[] modelProfile;\n+    private int shingleSize;\n+    private String coordinatingNode;\n+    private long totalSizeInBytes;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param in StreamInput\n+     * @throws IOException thrown when unable to read from stream\n+     */\n+    public ProfileResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        modelProfile = new ModelProfile[size];\n+        for (int i = 0; i < size; i++) {\n+            modelProfile[i] = new ModelProfile(in);\n+        }\n+        shingleSize = in.readVInt();\n+        coordinatingNode = in.readString();\n+        totalSizeInBytes = in.readVLong();\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param clusterName name of cluster\n+     * @param nodes List of ProfileNodeResponse from nodes\n+     * @param failures List of failures from nodes\n+     */\n+    public ProfileResponse(ClusterName clusterName, List<ProfileNodeResponse> nodes, List<FailedNodeException> failures) {\n+        super(clusterName, nodes, failures);\n+        totalSizeInBytes = 0L;\n+        List<ModelProfile> modelProfileList = new ArrayList<>();\n+        for (ProfileNodeResponse response : nodes) {\n+            String curNodeId = response.getNode().getId();\n+            if (response.getShingleSize() >= 0) {\n+                coordinatingNode = curNodeId;\n+                shingleSize = response.getShingleSize();\n+            }\n+            for (Map.Entry<String, Long> entry : response.getModelSize().entrySet()) {\n+                totalSizeInBytes += entry.getValue();\n+                modelProfileList.add(new ModelProfile(entry.getKey(), entry.getValue(), curNodeId));\n+            }\n+\n+        }\n+        if (coordinatingNode == null) {\n+            coordinatingNode = \"\";\n+        }\n+        this.modelProfile = modelProfileList.toArray(new ModelProfile[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MDYzOA=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTcyNDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowNToyMFrOGRogBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzo1ODo1NlrOGRpjhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjUzMw==", "bodyText": "cool. I guess this can fix this issue as well: #111", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421142533", "createdAt": "2020-05-06T23:05:20Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -280,8 +312,42 @@ private SearchRequest createLatestAnomalyResultRequest(String detectorId, long e\n \n         SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1).sort(sortQuery);\n \n-        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        SearchRequest request = new SearchRequest(AnomalyDetectionIndices.ALL_AD_RESULTS_INDEX_PATTERN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTgxNQ==", "bodyText": "yes", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421159815", "createdAt": "2020-05-06T23:58:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -280,8 +312,42 @@ private SearchRequest createLatestAnomalyResultRequest(String detectorId, long e\n \n         SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1).sort(sortQuery);\n \n-        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        SearchRequest request = new SearchRequest(AnomalyDetectionIndices.ALL_AD_RESULTS_INDEX_PATTERN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjUzMw=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc2NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyMjozMFrOGRo2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxOToyNFrOGRp73Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODM1Mg==", "bodyText": "is it used?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421148352", "createdAt": "2020-05-06T23:22:30Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileRequest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.support.nodes.BaseNodesRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * implements a request to obtain profiles about an AD detector\n+ */\n+public class ProfileRequest extends BaseNodesRequest<ProfileRequest> {\n+\n+    /**\n+     * Key indicating all profiles should be retrieved\n+     */\n+    public static final String ALL_PROFILE_KEY = \"_all\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjA0NQ==", "bodyText": "good catch.  Removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421166045", "createdAt": "2020-05-07T00:19:24Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileRequest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.support.nodes.BaseNodesRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * implements a request to obtain profiles about an AD detector\n+ */\n+public class ProfileRequest extends BaseNodesRequest<ProfileRequest> {\n+\n+    /**\n+     * Key indicating all profiles should be retrieved\n+     */\n+    public static final String ALL_PROFILE_KEY = \"_all\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODM1Mg=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc3NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNzoyNlrOGRo9LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDozMjoxOFrOGRqL_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTk5Nw==", "bodyText": "use ProfileName enum to replace these?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421149997", "createdAt": "2020-05-06T23:27:26Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDE3NQ==", "bodyText": "Moved these strings to CommonName and use CommonName", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170175", "createdAt": "2020-05-07T00:32:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTk5Nw=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc4NTcwOnYy", "diffSide": "LEFT", "path": "src/test/java/test/com/amazon/opendistroforelasticsearch/ad/util/JsonDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozMjoyOVrOGRpDYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDo0MDowNFrOGRqVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTU4NA==", "bodyText": "why removing this?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421151584", "createdAt": "2020-05-06T23:32:29Z", "author": {"login": "yizheliu-amazon"}, "path": "src/test/java/test/com/amazon/opendistroforelasticsearch/ad/util/JsonDeserializer.java", "diffHunk": "@@ -333,11 +333,11 @@ public static String getTextValue(String jsonString, String paths, boolean retur\n     }\n \n     /**\n-     * Search an int number inside a JSON string matching the input path expression\n+     * Search an array inside a JSON string matching the input path expression\n      *\n      * @param jsonString an encoded JSON string\n+     * @param function function to parse each element\n      * @param paths      path fragments\n-     * @return list of double", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MjU2MA==", "bodyText": "added back with changed contents.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421172560", "createdAt": "2020-05-07T00:40:04Z", "author": {"login": "kaituo"}, "path": "src/test/java/test/com/amazon/opendistroforelasticsearch/ad/util/JsonDeserializer.java", "diffHunk": "@@ -333,11 +333,11 @@ public static String getTextValue(String jsonString, String paths, boolean retur\n     }\n \n     /**\n-     * Search an int number inside a JSON string matching the input path expression\n+     * Search an array inside a JSON string matching the input path expression\n      *\n      * @param jsonString an encoded JSON string\n+     * @param function function to parse each element\n      * @param paths      path fragments\n-     * @return list of double", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTU4NA=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc5MDY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/AnomalyDetectorRestApiIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNDo0OFrOGRpGEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDozNDoxNlrOGRqOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjI3Mw==", "bodyText": "Is there test case against customized profiles?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421152273", "createdAt": "2020-05-06T23:34:48Z", "author": {"login": "yizheliu-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/AnomalyDetectorRestApiIT.java", "diffHunk": "@@ -898,4 +898,11 @@ public void testProfileAnomalyDetector() throws Exception {\n         Response profileResponse = getDetectorProfile(detector.getDetectorId());\n         assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n     }\n+\n+    public void testAllProfileAnomalyDetector() throws Exception {\n+        AnomalyDetector detector = createRandomAnomalyDetector(true, true);\n+\n+        Response profileResponse = getDetectorProfile(detector.getDetectorId(), true);\n+        assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDc4Mw==", "bodyText": "added one.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170783", "createdAt": "2020-05-07T00:34:16Z", "author": {"login": "kaituo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/AnomalyDetectorRestApiIT.java", "diffHunk": "@@ -898,4 +898,11 @@ public void testProfileAnomalyDetector() throws Exception {\n         Response profileResponse = getDetectorProfile(detector.getDetectorId());\n         assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n     }\n+\n+    public void testAllProfileAnomalyDetector() throws Exception {\n+        AnomalyDetector detector = createRandomAnomalyDetector(true, true);\n+\n+        Response profileResponse = getDetectorProfile(detector.getDetectorId(), true);\n+        assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjI3Mw=="}, "originalCommit": {"oid": "198676b576a5b79f6f0f59e00d726af315a4cc8c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3042, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}