{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODY1MTc4", "number": 232, "title": "add anomaly feature attribution to model output", "bodyText": "Description of changes: This pr adds normalized anomaly score attribution to anomaly detection model output. Anomaly score is attributed to each feature dimension of a current single data point and normalized to 1 for easier consumption. Further changes to external API and persistence is not included in this pr.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-09-14T20:29:56Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232", "merged": true, "mergeCommit": {"oid": "2d29d47db5e73a8ccec632fc02d8ab049e2d64c5"}, "closed": true, "closedAt": "2020-10-01T16:36:42Z", "author": {"login": "wnbts"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI6geuAH2gAyNDg2ODY1MTc4OjgyMjM4NzJmYzdlNWZlZmU0M2Y4NWI4NTY2ZDI3YWZhOTY3ZGM0MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOUBxsgH2gAyNDg2ODY1MTc4OmQxYzk1ZmJlYmFhYjQ3OWY4YTY1ODFiNzI2ZmVmMjlkYzk4Y2I2ZTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8223872fc7e5fefe43f85b8566d27afa967dc40d", "committedDate": "2020-09-14T21:58:36Z", "message": "add anomaly feature attribution to model output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDg3MDU5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#pullrequestreview-495087059", "createdAt": "2020-09-23T22:17:01Z", "commit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzQ0NDQ2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#pullrequestreview-495744446", "createdAt": "2020-09-24T16:23:28Z", "commit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzoyOFrOHXi0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzoyOFrOHXi0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTc5NQ==", "bodyText": "Questions:\nFirst, how to interpret both high and low are non-zero?  Is it really high or low?  Does it mean RCF trees think the value can be both higher or lower than the recently observed data trends for that column?  Do we need a majority win rule to say it is actually high or low?\nSecond, when doing a high low sum, we lose direction.  Is there any way to preserve the direction?\nThird, when users see two features' attribution like x: 1% and y 99%, it tells users y is the place anomaly happens.  It might as well not to show x's 1%.  I feel an attribution score less than 1/d (d is the number of features) is not useful to users.  Any comments on this?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r494449795", "createdAt": "2020-09-24T16:23:28Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -349,13 +370,25 @@ public void getRcfResult(String detectorId, String modelId, double[] point, Acti\n     }\n \n     private void getRcfResult(ModelState<RandomCutForest> modelState, double[] point, ActionListener<RcfResult> listener) {\n+        modelState.setLastUsedTime(clock.instant());\n+\n         RandomCutForest rcf = modelState.getModel();\n         double score = rcf.getAnomalyScore(point);\n         double confidence = computeRcfConfidence(rcf);\n         int forestSize = rcf.getNumberOfTrees();\n+        double[] attribution = getAnomalyAttribution(rcf, point);\n         rcf.update(point);\n-        modelState.setLastUsedTime(clock.instant());\n-        listener.onResponse(new RcfResult(score, confidence, forestSize));\n+        listener.onResponse(new RcfResult(score, confidence, forestSize, attribution));\n+    }\n+\n+    private double[] getAnomalyAttribution(RandomCutForest rcf, double[] point) {\n+        DiVector vec = rcf.getAnomalyAttribution(point);\n+        vec.renormalize(1d);\n+        double[] attribution = new double[vec.getDimensions()];\n+        for (int i = 0; i < attribution.length; i++) {\n+            attribution[i] = vec.getHighLowSum(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODc1NTky", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#pullrequestreview-499875592", "createdAt": "2020-09-30T23:18:29Z", "commit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxODoyOVrOHayhVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxODoyOVrOHayhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1Mjc1Ng==", "bodyText": "[minor] It looks like the variable attribution was meant to be used in line 229, but didn't get used and instead combineAttribution was invoked again with identical args.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r497852756", "createdAt": "2020-09-30T23:18:29Z", "author": {"login": "LiuJoyceC"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -206,28 +207,48 @@ public ModelManager(\n      *\n      * Final RCF score is calculated by averaging scores weighted by model size (number of trees).\n      * Confidence is the weighted average of confidence with confidence for missing models being 0.\n+     * Attribution is normalized weighted average for the most recent feature dimensions.\n      *\n      * @param rcfResults RCF results from partitioned models\n+     * @param numFeatures number of features for attribution\n      * @return combined RCF result\n      */\n-    public CombinedRcfResult combineRcfResults(List<RcfResult> rcfResults) {\n+    public CombinedRcfResult combineRcfResults(List<RcfResult> rcfResults, int numFeatures) {\n         CombinedRcfResult combinedResult = null;\n         if (rcfResults.isEmpty()) {\n-            combinedResult = new CombinedRcfResult(0, 0);\n+            combinedResult = new CombinedRcfResult(0, 0, new double[0]);\n         } else {\n             int totalForestSize = rcfResults.stream().mapToInt(RcfResult::getForestSize).sum();\n             if (totalForestSize == 0) {\n-                combinedResult = new CombinedRcfResult(0, 0);\n+                combinedResult = new CombinedRcfResult(0, 0, new double[0]);\n             } else {\n                 double score = rcfResults.stream().mapToDouble(r -> r.getScore() * r.getForestSize()).sum() / totalForestSize;\n                 double confidence = rcfResults.stream().mapToDouble(r -> r.getConfidence() * r.getForestSize()).sum() / Math\n                     .max(rcfNumTrees, totalForestSize);\n-                combinedResult = new CombinedRcfResult(score, confidence);\n+                double[] attribution = combineAttribution(rcfResults, numFeatures, totalForestSize);\n+                combinedResult = new CombinedRcfResult(score, confidence, combineAttribution(rcfResults, numFeatures, totalForestSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c95fbebaab479f8a6581b726fef29dc98cb6e7", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d1c95fbebaab479f8a6581b726fef29dc98cb6e7", "committedDate": "2020-10-01T16:32:13Z", "message": "remove redundant attribution"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1543, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}