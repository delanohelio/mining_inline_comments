{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTk4NTg4", "number": 48, "title": "Write detection code path in callbacks", "bodyText": "Previously, we actively wait for rcf and threshold model requests to return in transport thread.  The active wait blocks transport thread.  To increase concurrency and improve performance, we change detection code path to use callbacks.\nTesting done:\n\nall unit and integration tests pass\nrun end-to-end testing to verify basic workflow works including creating detector and generate anomaly score", "createdAt": "2020-02-26T04:16:58Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48", "merged": true, "mergeCommit": {"oid": "e2f7208c7d1c374af54c69e977ed1cd1e5d3970b"}, "closed": true, "closedAt": "2020-03-09T05:28:45Z", "author": {"login": "kaituo"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH-bHYgH2gAyMzc5OTk4NTg4OjM2NjgzZGRmN2QwZTJmYzY1NjMwNDU0MmI2MDI0MjZlMTgyM2Q1NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLscBogFqTM3MDg0NDQyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "36683ddf7d0e2fc656304542b602426e1823d546", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/36683ddf7d0e2fc656304542b602426e1823d546", "committedDate": "2020-02-26T03:47:17Z", "message": "callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTc3Mjk4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#pullrequestreview-369177298", "createdAt": "2020-03-04T22:39:54Z", "commit": {"oid": "36683ddf7d0e2fc656304542b602426e1823d546"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozOTo1NFrOFyAR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozOTo1NFrOFyAR0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NzY4MQ==", "bodyText": "Catch exception and log it ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#discussion_r387977681", "createdAt": "2020-03-04T22:39:54Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -637,37 +572,130 @@ void saveDetectorResult(IndexRequest indexRequest, String context, Iterator<Time\n             );\n     }\n \n+    void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse> listener, String adID) {\n+        if (ex instanceof ClientException) {\n+            listener.onFailure(ex);\n+        } else if (ex instanceof AnomalyDetectionException) {\n+            listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else {\n+            Throwable cause = ExceptionsHelper.unwrapCause(ex);\n+            listener.onFailure(new InternalFailure(adID, cause));\n+        }\n+    }\n+\n     class RCFActionListener implements ActionListener<RCFResultResponse> {\n         private List<RCFResultResponse> rcfResults;\n         private String modelID;\n         private AtomicReference<AnomalyDetectionException> failure;\n-        private String nodeID;\n+        private String rcfNodeID;\n+        private Optional<AnomalyDetector> detector;\n+        private ActionListener<AnomalyResultResponse> listener;\n+        private String thresholdModelID;\n+        private Optional<DiscoveryNode> thresholdNode;\n+        private List<FeatureData> featureInResponse;\n+        private long startTime;\n+        private long endTime;\n+        private int nodeCount;\n+        private final AtomicInteger responseCount;\n+        private final String adID;\n \n         RCFActionListener(\n             List<RCFResultResponse> rcfResults,\n             String modelID,\n             AtomicReference<AnomalyDetectionException> failure,\n-            String nodeID\n+            String rcfNodeID,\n+            Optional<AnomalyDetector> detector,\n+            ActionListener<AnomalyResultResponse> listener,\n+            String thresholdModelID,\n+            Optional<DiscoveryNode> thresholdNode,\n+            List<FeatureData> features,\n+            long startTime,\n+            long endTime,\n+            int nodeCount,\n+            AtomicInteger responseCount,\n+            String adID\n         ) {\n             this.rcfResults = rcfResults;\n             this.modelID = modelID;\n+            this.rcfNodeID = rcfNodeID;\n+            this.detector = detector;\n+            this.listener = listener;\n+            this.thresholdNode = thresholdNode;\n+            this.thresholdModelID = thresholdModelID;\n+            this.featureInResponse = features;\n             this.failure = failure;\n-            this.nodeID = nodeID;\n+            this.startTime = startTime;\n+            this.endTime = endTime;\n+            this.nodeCount = nodeCount;\n+            this.responseCount = responseCount;\n+            this.adID = adID;\n         }\n \n         @Override\n         public void onResponse(RCFResultResponse response) {\n-            stateManager.resetBackpressureCounter(nodeID);\n-            if (response != null) {\n-                rcfResults.add(response);\n-            } else {\n-                LOG.warn(NULL_RESPONSE + \" {} for {}\", modelID, nodeID);\n+            try {\n+                stateManager.resetBackpressureCounter(rcfNodeID);\n+                if (response != null) {\n+                    rcfResults.add(response);\n+                } else {\n+                    LOG.warn(NULL_RESPONSE + \" {} for {}\", modelID, rcfNodeID);\n+                }\n+            } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36683ddf7d0e2fc656304542b602426e1823d546"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTc3NDY1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#pullrequestreview-369177465", "createdAt": "2020-03-04T22:40:13Z", "commit": {"oid": "36683ddf7d0e2fc656304542b602426e1823d546"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0MDoxM1rOFyASWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0MDoxM1rOFyASWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NzgxOA==", "bodyText": "onResponse will be called multiple times if send request to multiple nodes?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#discussion_r387977818", "createdAt": "2020-03-04T22:40:13Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -637,37 +572,130 @@ void saveDetectorResult(IndexRequest indexRequest, String context, Iterator<Time\n             );\n     }\n \n+    void handleExecuteException(Exception ex, ActionListener<AnomalyResultResponse> listener, String adID) {\n+        if (ex instanceof ClientException) {\n+            listener.onFailure(ex);\n+        } else if (ex instanceof AnomalyDetectionException) {\n+            listener.onFailure(new InternalFailure((AnomalyDetectionException) ex));\n+        } else {\n+            Throwable cause = ExceptionsHelper.unwrapCause(ex);\n+            listener.onFailure(new InternalFailure(adID, cause));\n+        }\n+    }\n+\n     class RCFActionListener implements ActionListener<RCFResultResponse> {\n         private List<RCFResultResponse> rcfResults;\n         private String modelID;\n         private AtomicReference<AnomalyDetectionException> failure;\n-        private String nodeID;\n+        private String rcfNodeID;\n+        private Optional<AnomalyDetector> detector;\n+        private ActionListener<AnomalyResultResponse> listener;\n+        private String thresholdModelID;\n+        private Optional<DiscoveryNode> thresholdNode;\n+        private List<FeatureData> featureInResponse;\n+        private long startTime;\n+        private long endTime;\n+        private int nodeCount;\n+        private final AtomicInteger responseCount;\n+        private final String adID;\n \n         RCFActionListener(\n             List<RCFResultResponse> rcfResults,\n             String modelID,\n             AtomicReference<AnomalyDetectionException> failure,\n-            String nodeID\n+            String rcfNodeID,\n+            Optional<AnomalyDetector> detector,\n+            ActionListener<AnomalyResultResponse> listener,\n+            String thresholdModelID,\n+            Optional<DiscoveryNode> thresholdNode,\n+            List<FeatureData> features,\n+            long startTime,\n+            long endTime,\n+            int nodeCount,\n+            AtomicInteger responseCount,\n+            String adID\n         ) {\n             this.rcfResults = rcfResults;\n             this.modelID = modelID;\n+            this.rcfNodeID = rcfNodeID;\n+            this.detector = detector;\n+            this.listener = listener;\n+            this.thresholdNode = thresholdNode;\n+            this.thresholdModelID = thresholdModelID;\n+            this.featureInResponse = features;\n             this.failure = failure;\n-            this.nodeID = nodeID;\n+            this.startTime = startTime;\n+            this.endTime = endTime;\n+            this.nodeCount = nodeCount;\n+            this.responseCount = responseCount;\n+            this.adID = adID;\n         }\n \n         @Override\n         public void onResponse(RCFResultResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36683ddf7d0e2fc656304542b602426e1823d546"}, "originalPosition": 253}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc95b580966f851d5b7820c93365e2e9f57b5770", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/cc95b580966f851d5b7820c93365e2e9f57b5770", "committedDate": "2020-03-06T04:53:27Z", "message": "add AD job on top of JobScheduler (#44)\n\n* add AD job on top of JobScheduler\r\n\r\n* release job lock when job finish or fail\r\n\r\n* upgrade jobscheduler to 1.4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2da6abe2945dabcd5084ee04588699b7e26e0d", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8d2da6abe2945dabcd5084ee04588699b7e26e0d", "committedDate": "2020-03-06T04:53:27Z", "message": "Add exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57daff6dbf226777b10135b4bcfa491b86e619f5", "author": {"user": {"login": "ylwu-amzn", "name": "Yaliang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/57daff6dbf226777b10135b4bcfa491b86e619f5", "committedDate": "2020-03-06T04:58:47Z", "message": "support return AD job when get detector (#50)\n\n* support return AD job when get detector\r\n* handle null index response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDg0MjEy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#pullrequestreview-370084212", "createdAt": "2020-03-06T05:05:16Z", "commit": {"oid": "57daff6dbf226777b10135b4bcfa491b86e619f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTA3MzE1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#pullrequestreview-370507315", "createdAt": "2020-03-06T17:42:12Z", "commit": {"oid": "57daff6dbf226777b10135b4bcfa491b86e619f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0MjoxMlrOFzBk2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0MjoxMlrOFzBk2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0NzUxNA==", "bodyText": "typo", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#discussion_r389047514", "createdAt": "2020-03-06T17:42:12Z", "author": {"login": "zhanghg08"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorJobRunnerTests.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.jobscheduler.spi.JobExecutionContext;\n+import com.amazon.opendistroforelasticsearch.jobscheduler.spi.LockModel;\n+import com.amazon.opendistroforelasticsearch.jobscheduler.spi.ScheduledJobParameter;\n+import com.amazon.opendistroforelasticsearch.jobscheduler.spi.schedule.IntervalSchedule;\n+import com.amazon.opendistroforelasticsearch.jobscheduler.spi.utils.LockService;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.EsExecutors;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class AnomalyDetectorJobRunnerTests extends AbstractADTest {\n+\n+    @Mock\n+    private Client client;\n+    @Mock\n+    private ClusterService clusterService;\n+\n+    private LockService lockService;\n+\n+    @Mock\n+    private AnomalyDetectorJob jobParameter;\n+\n+    @Mock\n+    private JobExecutionContext context;\n+\n+    private AnomalyDetectorJobRunner runner = AnomalyDetectorJobRunner.getJobRunnerInstance();\n+\n+    @Mock\n+    private ThreadPool threadPool;\n+\n+    private ExecutorService executorService;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        super.setUp();\n+        super.setUpLog4jForJUnit(AnomalyDetectorJobRunner.class);\n+        MockitoAnnotations.initMocks(this);\n+        ThreadFactory threadFactory = EsExecutors.daemonThreadFactory(EsExecutors.threadName(\"node1\", \"test-ad\"));\n+        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n+        executorService = EsExecutors.newFixed(\"test-ad\", 4, 100, threadFactory, threadContext);\n+        doReturn(executorService).when(threadPool).executor(anyString());\n+        runner.setThreadPool(threadPool);\n+        runner.setClient(client);\n+\n+        lockService = new LockService(client, clusterService);\n+        doReturn(lockService).when(context).getLockService();\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedEx = ExpectedException.none();\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        super.tearDownLog4jForJUnit();\n+        executorService.shutdown();\n+    }\n+\n+    @Test\n+    public void testRunJobWithWrongParameterType() {\n+        expectedEx.expect(IllegalArgumentException.class);\n+        expectedEx.expectMessage(\"Job parameter is not instance of AnomalyDetectorJob, type: \");\n+\n+        ScheduledJobParameter parameter = mock(ScheduledJobParameter.class);\n+        when(jobParameter.getLockDurationSeconds()).thenReturn(null);\n+        runner.runJob(parameter, context);\n+    }\n+\n+    @Test\n+    public void testRunJobWithNullLockDuration() throws InterruptedException {\n+        when(jobParameter.getLockDurationSeconds()).thenReturn(null);\n+        runner.runJob(jobParameter, context);\n+        Thread.sleep(1000);\n+        assertTrue(testAppender.containsMessage(\"Can't get lock for AD job\"));\n+    }\n+\n+    @Test\n+    public void testRunJobWithLocakDuration() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57daff6dbf226777b10135b4bcfa491b86e619f5"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e407af9ba6c13481bb4d7e3561b688888bb493a5", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/e407af9ba6c13481bb4d7e3561b688888bb493a5", "committedDate": "2020-03-07T01:36:42Z", "message": "Fix typo in rebased code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f57b829ecf162ebdaa42c9b6ee2086ce2be08bd", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1f57b829ecf162ebdaa42c9b6ee2086ce2be08bd", "committedDate": "2020-03-07T01:41:26Z", "message": "Merge branch 'development' into callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODQ0NDIw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/48#pullrequestreview-370844420", "createdAt": "2020-03-08T17:05:41Z", "commit": {"oid": "1f57b829ecf162ebdaa42c9b6ee2086ce2be08bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1622, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}