{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTIzMjIz", "number": 81, "title": "add async trainModel", "bodyText": "This change adds a new async trainModel implementation with the same business logic to replace the current synchronous implementation.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-08T23:06:54Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81", "merged": true, "mergeCommit": {"oid": "f851f1ab2f5084b95d38617b1ec748d1497e72c3"}, "closed": true, "closedAt": "2020-04-10T16:37:07Z", "author": {"login": "wnbts"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWBGzSgFqTM5MTA0NDA0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWKxUQAFqTM5MTI4MTE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDQ0MDQz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#pullrequestreview-391044043", "createdAt": "2020-04-09T18:45:40Z", "commit": {"oid": "3f625a0d73d87be24135cc429fd71332e80ba1a4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NTo0MVrOGDlCdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0OTowOVrOGDlKIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTc0OA==", "bodyText": "iteration means some repeated steps. Suggest to rename to step.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406405748", "createdAt": "2020-04-09T18:45:41Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {\n+        if (dataPoints.length == 0 || dataPoints[0].length == 0) {\n+            listener.onFailure(new IllegalArgumentException(\"Data points must not be empty.\"));\n+        } else {\n+            int rcfNumFeatures = dataPoints[0].length;\n+            // creates partitioned RCF models\n+            try {\n+                Entry<Integer, Integer> partitionResults = getPartitionedForestSizes(\n+                    RandomCutForest\n+                        .builder()\n+                        .dimensions(rcfNumFeatures)\n+                        .sampleSize(rcfNumSamplesInTree)\n+                        .numberOfTrees(rcfNumTrees)\n+                        .outputAfter(rcfNumSamplesInTree)\n+                        .parallelExecutionEnabled(false)\n+                        .build(),\n+                    anomalyDetector.getDetectorId()\n+                );\n+                int numForests = partitionResults.getKey();\n+                int forestSize = partitionResults.getValue();\n+                double[] scores = new double[dataPoints.length];\n+                Arrays.fill(scores, 0.);\n+                trainModelForIteration(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n+            } catch (LimitExceededException e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    private void trainModelForIteration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f625a0d73d87be24135cc429fd71332e80ba1a4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzcxNQ==", "bodyText": "I changed this in another PR: https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83/files#diff-0ba3da6c04a6db2df8146de98b12d850\nThis is to have  a single place to get the number of partitioned forests. Previously, we have redundant code in both ModelManager and ADStateManager.\nIf you agree, please use the changed getPartitionedForestSizes.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406407715", "createdAt": "2020-04-09T18:49:09Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {\n+        if (dataPoints.length == 0 || dataPoints[0].length == 0) {\n+            listener.onFailure(new IllegalArgumentException(\"Data points must not be empty.\"));\n+        } else {\n+            int rcfNumFeatures = dataPoints[0].length;\n+            // creates partitioned RCF models\n+            try {\n+                Entry<Integer, Integer> partitionResults = getPartitionedForestSizes(\n+                    RandomCutForest\n+                        .builder()\n+                        .dimensions(rcfNumFeatures)\n+                        .sampleSize(rcfNumSamplesInTree)\n+                        .numberOfTrees(rcfNumTrees)\n+                        .outputAfter(rcfNumSamplesInTree)\n+                        .parallelExecutionEnabled(false)\n+                        .build(),\n+                    anomalyDetector.getDetectorId()\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f625a0d73d87be24135cc429fd71332e80ba1a4"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "committedDate": "2020-04-09T20:36:09Z", "message": "add async trainModel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTQ3MjI3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#pullrequestreview-391147227", "createdAt": "2020-04-09T21:33:07Z", "commit": {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjgwODcx", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#pullrequestreview-391280871", "createdAt": "2020-04-10T06:04:13Z", "commit": {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNDoxNFrOGDx5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNDoxNFrOGDx5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjQzMA==", "bodyText": "Just transform the sync method to callback, not change any logic, right?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406616430", "createdAt": "2020-04-10T06:04:14Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjgxMTQ5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#pullrequestreview-391281149", "createdAt": "2020-04-10T06:05:20Z", "commit": {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1646, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}