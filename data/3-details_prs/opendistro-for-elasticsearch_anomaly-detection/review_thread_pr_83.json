{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTc0NTU1", "number": 83, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNToyOTozMVrODwptJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0NDoxMFrODxYbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQxNTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNToyOTozMlrOGDxbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzowOToxN1rOGEH9GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwODc0NA==", "bodyText": "Why not end run immediately if we can't find detector?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406608744", "createdAt": "2020-04-10T05:29:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -225,9 +213,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n         }\n \n         try {\n-            Optional<AnomalyDetector> detector = stateManager.getAnomalyDetector(adID);\n+            stateManager.getAnomalyDetector(adID, onGetDetector(listener, adID, request));\n+        } catch (Exception ex) {\n+            handleExecuteException(ex, listener, adID);\n+        }\n+    }\n+\n+    private ActionListener<Optional<AnomalyDetector>> onGetDetector(\n+        ActionListener<AnomalyResultResponse> listener,\n+        String adID,\n+        AnomalyResultRequest request\n+    ) {\n+        return ActionListener.wrap(detector -> {\n             if (!detector.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3NzgxNg==", "bodyText": "Changed it back to end run immediately.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406977816", "createdAt": "2020-04-10T23:09:17Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -225,9 +213,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n         }\n \n         try {\n-            Optional<AnomalyDetector> detector = stateManager.getAnomalyDetector(adID);\n+            stateManager.getAnomalyDetector(adID, onGetDetector(listener, adID, request));\n+        } catch (Exception ex) {\n+            handleExecuteException(ex, listener, adID);\n+        }\n+    }\n+\n+    private ActionListener<Optional<AnomalyDetector>> onGetDetector(\n+        ActionListener<AnomalyResultResponse> listener,\n+        String adID,\n+        AnomalyResultRequest request\n+    ) {\n+        return ActionListener.wrap(detector -> {\n             if (!detector.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwODc0NA=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQyNDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozNDo1OVrOGDxgcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoyMTo1MVrOGEIImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDAzMw==", "bodyText": "How about we check feature list and give user a definite answer? If that change takes time, please add some todo here.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406610033", "createdAt": "2020-04-10T05:34:59Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));\n+            } else if (exception instanceof IllegalArgumentException) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"Having trouble querying data. Maybe all of your features have been disabled.\", false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MDc2MA==", "bodyText": "good suggestion.  Done.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406980760", "createdAt": "2020-04-10T23:21:51Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));\n+            } else if (exception instanceof IllegalArgumentException) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"Having trouble querying data. Maybe all of your features have been disabled.\", false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDAzMw=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQyNjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozNjo1MFrOGDxh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoyMjoxOFrOGEII2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDM4OA==", "bodyText": "How about we change to \"Can't find index XXX\"? So user can know clearly the trouble is missing index, rather than others like wrong query or network latency.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406610388", "createdAt": "2020-04-10T05:36:50Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MDgyNA==", "bodyText": "exception.getMessage would return such information.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406980824", "createdAt": "2020-04-10T23:22:18Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDM4OA=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA2NDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyNToxMFrOGEAqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo0OTozMFrOGEw6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg==", "bodyText": "if we are going to refactor this method, I suggest the new api just takes a detector object, which contains all the needed info and simpler to use.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406858316", "createdAt": "2020-04-10T17:25:10Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MTE1NQ==", "bodyText": "We only use use detector id as part of error message. Don't need other detector information.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406981155", "createdAt": "2020-04-10T23:23:53Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzY2Mg==", "bodyText": "if model manager takes a detector, it can compute the feature dimensions and partitioning so that will be only input needed and that will save client the work to provide a second rcfNumFeatures input. that's why i suggest doing that.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406993662", "createdAt": "2020-04-11T00:37:03Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTU4MQ==", "bodyText": "make sense. done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406999581", "createdAt": "2020-04-11T01:25:21Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODg5MQ==", "bodyText": "please take a look at the recent commit: d8ea9cf", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407648891", "createdAt": "2020-04-13T18:49:30Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA3NzM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyOTo1MVrOGEAx9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzozMzoxMFrOGEIR_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MDI3Nw==", "bodyText": "Minor. Why not validate detector first and just pass a detector afterwards? saving all the repetitive and unlikely handling of a non-existent detector.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406860277", "createdAt": "2020-04-10T17:29:51Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +87,63 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, Optional<AnomalyDetector> detector) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MzE2Ng==", "bodyText": "good point.  Done.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406983166", "createdAt": "2020-04-10T23:33:10Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +87,63 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, Optional<AnomalyDetector> detector) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MDI3Nw=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA4NjA1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/mappings/anomaly-results.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzozMzoxNVrOGEA3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NDowN1rOGEBKug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MTYxNQ==", "bodyText": "question. does error message need to be searched for?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406861615", "createdAt": "2020-04-10T17:33:15Z", "author": {"login": "wnbts"}, "path": "src/main/resources/mappings/anomaly-results.json", "diffHunk": "@@ -45,6 +45,9 @@\n     \"execution_end_time\": {\n       \"type\": \"date\",\n       \"format\": \"strict_date_time||epoch_millis\"\n+    },\n+    \"error\": {\n+      \"type\": \"text\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjYxOA==", "bodyText": "Yes, the error message is not standardized, that means it could be any string, better to make it searchable for easy operation.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406866618", "createdAt": "2020-04-10T17:44:07Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/resources/mappings/anomaly-results.json", "diffHunk": "@@ -45,6 +45,9 @@\n     \"execution_end_time\": {\n       \"type\": \"date\",\n       \"format\": \"strict_date_time||epoch_millis\"\n+    },\n+    \"error\": {\n+      \"type\": \"text\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MTYxNQ=="}, "originalCommit": {"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTA0MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDozNToxNlrOGE0VjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowMToxNFrOGE24TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDk3Mg==", "bodyText": "Minor. Is this exception still possible?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407704972", "createdAt": "2020-04-13T20:35:16Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +86,59 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, AnomalyDetector detector) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjYzNg==", "bodyText": "no, it is impossible now.  Will fix.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407746636", "createdAt": "2020-04-13T22:01:14Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +86,59 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, AnomalyDetector detector) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDk3Mg=="}, "originalCommit": {"oid": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTA2OTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0NDoxMFrOGE0nqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowMDowOVrOGE22sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTYwOA==", "bodyText": "suggestion. it's clearer to rebase and force push to avoid showing pulled changes that are checked in.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407709608", "createdAt": "2020-04-13T20:44:10Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +634,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjIyNQ==", "bodyText": "yes, will try next time", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407746225", "createdAt": "2020-04-13T22:00:09Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +634,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTYwOA=="}, "originalCommit": {"oid": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3011, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}