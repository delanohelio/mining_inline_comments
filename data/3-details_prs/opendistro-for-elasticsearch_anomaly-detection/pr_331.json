{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTUxMzk4", "number": 331, "title": "Adding support for Security Test Framework", "bodyText": "*Issue #195 *\nDescription of changes:\nAdding support for Security tests for AD.\nThese tests will be run as part of CI and also can be locally tested with a test cluster.\nRunning locally:\n-Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=\"docker-cluster\" -Dhttps=true -Duser=admin -Dpassword=admin --tests \"com.amazon.opendistroforelasticsearch.ad.rest.SecureADRestIT.*\"\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-15T03:37:57Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331", "merged": true, "mergeCommit": {"oid": "4ef7e308e15ec67fc86614c8340802f1f71da182"}, "closed": true, "closedAt": "2020-12-17T19:47:19Z", "author": {"login": "saratvemulapalli"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmR2GTAH2gAyNTM5OTUxMzk4OmY5Y2QxYWQ2YWNmMmY1NWMwYjMyMGY1OTQ4MzUyMTYyNTE5OGFlMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnI7OsgFqTU1NDkzMTU3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f9cd1ad6acf2f55c0b320f59483521625198ae1c", "committedDate": "2020-12-15T03:33:50Z", "message": "Adding support for Security Test Framework"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODA0NDIz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#pullrequestreview-552804423", "createdAt": "2020-12-15T19:37:08Z", "commit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTozNzowOVrOIGcrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTozNzowOVrOIGcrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMjE3NQ==", "bodyText": "minor: we may throw exception or fail the test if isHttps is false but SecureTest is running, just in case of wrong CI set up. Wrong CI set up like testing against SecureTest with isHttp true may get passing test, but actually test is not being run.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#discussion_r543632175", "createdAt": "2020-12-15T19:37:09Z", "author": {"login": "yizheliu-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/SecureADRestIT.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.rest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRestTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.commons.rest.SecureRestClientBuilder;\n+\n+public class SecureADRestIT extends AnomalyDetectorRestTestCase {\n+    String aliceUser = \"alice\";\n+    RestClient aliceClient;\n+    String bobUser = \"bob\";\n+    RestClient bobClient;\n+    String catUser = \"cat\";\n+    RestClient catClient;\n+    String dogUser = \"dog\";\n+    RestClient dogClient;\n+\n+    @Before\n+    public void setupSecureTests() throws IOException {\n+        if (!isHttps())\n+            return;\n+        createIndexRole(\"index_all_access\", \"*\");\n+        createUser(aliceUser, aliceUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        aliceClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), aliceUser, aliceUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(bobUser, bobUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        bobClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), bobUser, bobUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(catUser, catUser, new ArrayList<>(Arrays.asList(\"aes\")));\n+        catClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), catUser, catUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(dogUser, dogUser, new ArrayList<>(Arrays.asList()));\n+        dogClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), dogUser, dogUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createRoleMapping(\"anomaly_read_access\", new ArrayList<>(Arrays.asList(bobUser)));\n+        createRoleMapping(\"anomaly_full_access\", new ArrayList<>(Arrays.asList(aliceUser, catUser, dogUser)));\n+        createRoleMapping(\"index_all_access\", new ArrayList<>(Arrays.asList(aliceUser, bobUser, catUser, dogUser)));\n+    }\n+\n+    @After\n+    public void deleteUserSetup() throws IOException {\n+        if (!isHttps())\n+            return;\n+        aliceClient.close();\n+        bobClient.close();\n+        catClient.close();\n+        dogClient.close();\n+        deleteUser(aliceUser);\n+        deleteUser(bobUser);\n+        deleteUser(catUser);\n+        deleteUser(dogUser);\n+    }\n+\n+    public void testCreateAnomalyDetectorWithWriteAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Alice has AD full access, should be able to create a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+        } catch (IOException e) {\n+            Assert.assertTrue(\"User Alice could not create detector\", false);\n+        }\n+    }\n+\n+    public void testCreateAnomalyDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to create a detector\n+            AnomalyDetector bobDetector = createRandomAnomalyDetector(false, false, bobClient);\n+            Assert.assertNull(bobDetector.getDetectorId());\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/write]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to modify a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+            Response response = startAnomalyDetector(aliceDetector.getDetectorId(), bobClient);\n+            Assert.assertEquals(response.getStatusLine().toString(), \"HTTP/1.1 500 Internal Server Error\");\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/jobmanagement]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorForWriteUser() {\n+        if (!isHttps())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODEyNzU5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#pullrequestreview-552812759", "createdAt": "2020-12-15T19:48:23Z", "commit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0ODoyM1rOIGdHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1MToxOVrOIGdOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzOTM3MA==", "bodyText": "+1. we can throw exceptions in the @before method, and remove the checks in other places. To make it work, we  might need exclude this test case in the gradle.build", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#discussion_r543639370", "createdAt": "2020-12-15T19:48:23Z", "author": {"login": "weicongs-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/SecureADRestIT.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.rest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRestTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.commons.rest.SecureRestClientBuilder;\n+\n+public class SecureADRestIT extends AnomalyDetectorRestTestCase {\n+    String aliceUser = \"alice\";\n+    RestClient aliceClient;\n+    String bobUser = \"bob\";\n+    RestClient bobClient;\n+    String catUser = \"cat\";\n+    RestClient catClient;\n+    String dogUser = \"dog\";\n+    RestClient dogClient;\n+\n+    @Before\n+    public void setupSecureTests() throws IOException {\n+        if (!isHttps())\n+            return;\n+        createIndexRole(\"index_all_access\", \"*\");\n+        createUser(aliceUser, aliceUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        aliceClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), aliceUser, aliceUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(bobUser, bobUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        bobClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), bobUser, bobUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(catUser, catUser, new ArrayList<>(Arrays.asList(\"aes\")));\n+        catClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), catUser, catUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(dogUser, dogUser, new ArrayList<>(Arrays.asList()));\n+        dogClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), dogUser, dogUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createRoleMapping(\"anomaly_read_access\", new ArrayList<>(Arrays.asList(bobUser)));\n+        createRoleMapping(\"anomaly_full_access\", new ArrayList<>(Arrays.asList(aliceUser, catUser, dogUser)));\n+        createRoleMapping(\"index_all_access\", new ArrayList<>(Arrays.asList(aliceUser, bobUser, catUser, dogUser)));\n+    }\n+\n+    @After\n+    public void deleteUserSetup() throws IOException {\n+        if (!isHttps())\n+            return;\n+        aliceClient.close();\n+        bobClient.close();\n+        catClient.close();\n+        dogClient.close();\n+        deleteUser(aliceUser);\n+        deleteUser(bobUser);\n+        deleteUser(catUser);\n+        deleteUser(dogUser);\n+    }\n+\n+    public void testCreateAnomalyDetectorWithWriteAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Alice has AD full access, should be able to create a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+        } catch (IOException e) {\n+            Assert.assertTrue(\"User Alice could not create detector\", false);\n+        }\n+    }\n+\n+    public void testCreateAnomalyDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to create a detector\n+            AnomalyDetector bobDetector = createRandomAnomalyDetector(false, false, bobClient);\n+            Assert.assertNull(bobDetector.getDetectorId());\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/write]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to modify a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+            Response response = startAnomalyDetector(aliceDetector.getDetectorId(), bobClient);\n+            Assert.assertEquals(response.getStatusLine().toString(), \"HTTP/1.1 500 Internal Server Error\");\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/jobmanagement]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorForWriteUser() {\n+        if (!isHttps())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMjE3NQ=="}, "originalCommit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDc1OQ==", "bodyText": "not very clear for the goal of this test case.  If the exception is expected, then 121L assert  can't be executed.  If not, then why is this exception is verified?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#discussion_r543640759", "createdAt": "2020-12-15T19:50:29Z", "author": {"login": "weicongs-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/SecureADRestIT.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.rest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRestTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.commons.rest.SecureRestClientBuilder;\n+\n+public class SecureADRestIT extends AnomalyDetectorRestTestCase {\n+    String aliceUser = \"alice\";\n+    RestClient aliceClient;\n+    String bobUser = \"bob\";\n+    RestClient bobClient;\n+    String catUser = \"cat\";\n+    RestClient catClient;\n+    String dogUser = \"dog\";\n+    RestClient dogClient;\n+\n+    @Before\n+    public void setupSecureTests() throws IOException {\n+        if (!isHttps())\n+            return;\n+        createIndexRole(\"index_all_access\", \"*\");\n+        createUser(aliceUser, aliceUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        aliceClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), aliceUser, aliceUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(bobUser, bobUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        bobClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), bobUser, bobUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(catUser, catUser, new ArrayList<>(Arrays.asList(\"aes\")));\n+        catClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), catUser, catUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(dogUser, dogUser, new ArrayList<>(Arrays.asList()));\n+        dogClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), dogUser, dogUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createRoleMapping(\"anomaly_read_access\", new ArrayList<>(Arrays.asList(bobUser)));\n+        createRoleMapping(\"anomaly_full_access\", new ArrayList<>(Arrays.asList(aliceUser, catUser, dogUser)));\n+        createRoleMapping(\"index_all_access\", new ArrayList<>(Arrays.asList(aliceUser, bobUser, catUser, dogUser)));\n+    }\n+\n+    @After\n+    public void deleteUserSetup() throws IOException {\n+        if (!isHttps())\n+            return;\n+        aliceClient.close();\n+        bobClient.close();\n+        catClient.close();\n+        dogClient.close();\n+        deleteUser(aliceUser);\n+        deleteUser(bobUser);\n+        deleteUser(catUser);\n+        deleteUser(dogUser);\n+    }\n+\n+    public void testCreateAnomalyDetectorWithWriteAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Alice has AD full access, should be able to create a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+        } catch (IOException e) {\n+            Assert.assertTrue(\"User Alice could not create detector\", false);\n+        }\n+    }\n+\n+    public void testCreateAnomalyDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to create a detector\n+            AnomalyDetector bobDetector = createRandomAnomalyDetector(false, false, bobClient);\n+            Assert.assertNull(bobDetector.getDetectorId());\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/write]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to modify a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+            Response response = startAnomalyDetector(aliceDetector.getDetectorId(), bobClient);\n+            Assert.assertEquals(response.getStatusLine().toString(), \"HTTP/1.1 500 Internal Server Error\");\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/jobmanagement]\")) {\n+                Assert.assertTrue(false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MTI0Nw==", "bodyText": "See a couple of similar logic in other test cases.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#discussion_r543641247", "createdAt": "2020-12-15T19:51:19Z", "author": {"login": "weicongs-amazon"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/SecureADRestIT.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.rest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRestTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.commons.rest.SecureRestClientBuilder;\n+\n+public class SecureADRestIT extends AnomalyDetectorRestTestCase {\n+    String aliceUser = \"alice\";\n+    RestClient aliceClient;\n+    String bobUser = \"bob\";\n+    RestClient bobClient;\n+    String catUser = \"cat\";\n+    RestClient catClient;\n+    String dogUser = \"dog\";\n+    RestClient dogClient;\n+\n+    @Before\n+    public void setupSecureTests() throws IOException {\n+        if (!isHttps())\n+            return;\n+        createIndexRole(\"index_all_access\", \"*\");\n+        createUser(aliceUser, aliceUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        aliceClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), aliceUser, aliceUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(bobUser, bobUser, new ArrayList<>(Arrays.asList(\"odfe\")));\n+        bobClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), bobUser, bobUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(catUser, catUser, new ArrayList<>(Arrays.asList(\"aes\")));\n+        catClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), catUser, catUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createUser(dogUser, dogUser, new ArrayList<>(Arrays.asList()));\n+        dogClient = new SecureRestClientBuilder(getClusterHosts().toArray(new HttpHost[0]), isHttps(), dogUser, dogUser)\n+            .setSocketTimeout(60000)\n+            .build();\n+\n+        createRoleMapping(\"anomaly_read_access\", new ArrayList<>(Arrays.asList(bobUser)));\n+        createRoleMapping(\"anomaly_full_access\", new ArrayList<>(Arrays.asList(aliceUser, catUser, dogUser)));\n+        createRoleMapping(\"index_all_access\", new ArrayList<>(Arrays.asList(aliceUser, bobUser, catUser, dogUser)));\n+    }\n+\n+    @After\n+    public void deleteUserSetup() throws IOException {\n+        if (!isHttps())\n+            return;\n+        aliceClient.close();\n+        bobClient.close();\n+        catClient.close();\n+        dogClient.close();\n+        deleteUser(aliceUser);\n+        deleteUser(bobUser);\n+        deleteUser(catUser);\n+        deleteUser(dogUser);\n+    }\n+\n+    public void testCreateAnomalyDetectorWithWriteAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Alice has AD full access, should be able to create a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+        } catch (IOException e) {\n+            Assert.assertTrue(\"User Alice could not create detector\", false);\n+        }\n+    }\n+\n+    public void testCreateAnomalyDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to create a detector\n+            AnomalyDetector bobDetector = createRandomAnomalyDetector(false, false, bobClient);\n+            Assert.assertNull(bobDetector.getDetectorId());\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/write]\")) {\n+                Assert.assertTrue(false);\n+            }\n+        }\n+    }\n+\n+    public void testStartDetectorWithReadAccess() {\n+        if (!isHttps())\n+            return;\n+        try {\n+            // User Bob has AD read access, should not be able to modify a detector\n+            AnomalyDetector aliceDetector = createRandomAnomalyDetector(false, false, aliceClient);\n+            Assert.assertNotNull(aliceDetector.getDetectorId());\n+            Response response = startAnomalyDetector(aliceDetector.getDetectorId(), bobClient);\n+            Assert.assertEquals(response.getStatusLine().toString(), \"HTTP/1.1 500 Internal Server Error\");\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"no permissions for [cluster:admin/opendistro/ad/detector/jobmanagement]\")) {\n+                Assert.assertTrue(false);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDc1OQ=="}, "originalCommit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMjgxMTg5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#pullrequestreview-553281189", "createdAt": "2020-12-16T01:48:31Z", "commit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo0ODozMlrOIGn8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo0ODozMlrOIGn8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNjk1Mg==", "bodyText": "How to run this secure REST integration test? Should we start a local ES cluster with security plugin installed, then run this IT?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#discussion_r543816952", "createdAt": "2020-12-16T01:48:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/SecureADRestIT.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.rest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRestTestCase;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.commons.rest.SecureRestClientBuilder;\n+\n+public class SecureADRestIT extends AnomalyDetectorRestTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9cd1ad6acf2f55c0b320f59483521625198ae1c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4ae091422eba8a420c5789d268998cbd720561", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/bd4ae091422eba8a420c5789d268998cbd720561", "committedDate": "2020-12-17T18:45:15Z", "message": "Excluding secure tests when not running against security plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d645bf5f80b4054e8f53ee6a9270019ebc81eab", "author": {"user": {"login": "saratvemulapalli", "name": "Sarat Vemulapalli"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/3d645bf5f80b4054e8f53ee6a9270019ebc81eab", "committedDate": "2020-12-17T18:51:15Z", "message": "Updating Delete Detector test to expect exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTMxNTc4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/331#pullrequestreview-554931578", "createdAt": "2020-12-17T19:44:14Z", "commit": {"oid": "3d645bf5f80b4054e8f53ee6a9270019ebc81eab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1442, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}