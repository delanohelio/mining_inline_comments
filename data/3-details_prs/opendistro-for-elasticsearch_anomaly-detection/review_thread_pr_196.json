{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mzg4MTcy", "number": 196, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyMDoxMVrOETDDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo1ODozMFrOEVLrUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA4NTAyOnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyMDoxMVrOG4kNeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NzowOVrOG5DZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NjcxNA==", "bodyText": "minor. is this expected?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461966714", "createdAt": "2020-07-29T00:20:11Z", "author": {"login": "wnbts"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NzY4Mg==", "bodyText": "Thanks for pointing it. I removed it for now.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462477682", "createdAt": "2020-07-29T17:47:09Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NjcxNA=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA4NjU1OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyMDo0OVrOG4kOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NzozNlrOG5Dapw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NjkyOA==", "bodyText": "minor. his should be This", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461966928", "createdAt": "2020-07-29T00:20:49Z", "author": {"login": "wnbts"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)\n+\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+his CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3Nzk5MQ==", "bodyText": "Thanks for pointing it. I updated it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462477991", "createdAt": "2020-07-29T17:47:36Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)\n+\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+his CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NjkyOA=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA5MTg3OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyMzo0OVrOG4kReg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0ODowOFrOG5Db5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NzczOA==", "bodyText": "minor. AN should be An", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461967738", "createdAt": "2020-07-29T00:23:49Z", "author": {"login": "wnbts"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)\n+\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+his CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+AN ESAD CLI has following structure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODMxMQ==", "bodyText": "Thanks for pointing it. I updated it in next commit.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462478311", "createdAt": "2020-07-29T17:48:08Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,97 @@\n+![Test Workflow](https://github.com/VijayanB/esad/workflows/Build%20and%20Test%20Anomaly%20detection%20commandline%20tool/badge.svg)\n+\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+his CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+AN ESAD CLI has following structure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NzczOA=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDEyMTEzOnYy", "diffSide": "RIGHT", "path": "cli/cmd/create.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDo0MDowNlrOG4kiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MDoyOFrOG5Dhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MjEwNw==", "bodyText": "suggestion. for readability, refrain from using single letters for variable names.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461972107", "createdAt": "2020-07-29T00:40:06Z", "author": {"login": "wnbts"}, "path": "cli/cmd/create.go", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\thandler \"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCreate = \"create\"\n+\tinteractive   = \"interactive\"\n+\tgenerate      = \"generate-skeleton\"\n+)\n+\n+// createCmd represents the create command\n+var createCmd = &cobra.Command{\n+\tUse:   commandCreate + \" [list of file-path] [flags]\",\n+\tShort: \"Creates detectors based on configurations\",\n+\tLong:  `Creates detectors based on configurations specified by file path`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tstatus, _ := cmd.Flags().GetBool(interactive)\n+\t\tgenerate, _ := cmd.Flags().GetBool(generate)\n+\t\tif generate {\n+\t\t\terr := generateFile()\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t\terr := createDetectors(args, status)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+func generateFile() error {\n+\tdetector, _ := handler.GenerateAnomalyDetector()\n+\tfmt.Println(string(detector))\n+\treturn nil\n+}\n+\n+func init() {\n+\tesadCmd.AddCommand(createCmd)\n+\tcreateCmd.Flags().BoolP(interactive, \"i\", false, \"Create Detectors in an interactive way\")\n+\tcreateCmd.Flags().BoolP(generate, \"g\", false, \"Outputs Detector's configuration\")\n+\n+}\n+\n+func createDetectors(fileNames []string, status bool) error {\n+\th, err := getCommandHandler()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTczNQ==", "bodyText": "i updated it. Nevertheless, accordingly to go style, (https://github.com/golang/go/wiki/CodeReviewComments#variable-names) it is preferred to use short variable name if it is not used below a page down .", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462479735", "createdAt": "2020-07-29T17:50:28Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/create.go", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\thandler \"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCreate = \"create\"\n+\tinteractive   = \"interactive\"\n+\tgenerate      = \"generate-skeleton\"\n+)\n+\n+// createCmd represents the create command\n+var createCmd = &cobra.Command{\n+\tUse:   commandCreate + \" [list of file-path] [flags]\",\n+\tShort: \"Creates detectors based on configurations\",\n+\tLong:  `Creates detectors based on configurations specified by file path`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tstatus, _ := cmd.Flags().GetBool(interactive)\n+\t\tgenerate, _ := cmd.Flags().GetBool(generate)\n+\t\tif generate {\n+\t\t\terr := generateFile()\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t\terr := createDetectors(args, status)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+func generateFile() error {\n+\tdetector, _ := handler.GenerateAnomalyDetector()\n+\tfmt.Println(string(detector))\n+\treturn nil\n+}\n+\n+func init() {\n+\tesadCmd.AddCommand(createCmd)\n+\tcreateCmd.Flags().BoolP(interactive, \"i\", false, \"Create Detectors in an interactive way\")\n+\tcreateCmd.Flags().BoolP(generate, \"g\", false, \"Outputs Detector's configuration\")\n+\n+}\n+\n+func createDetectors(fileNames []string, status bool) error {\n+\th, err := getCommandHandler()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MjEwNw=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDEzMDU5OnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDo0NToyN1rOG4koCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MTo1N1rOG5Dk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzUxNQ==", "bodyText": "minor. unused code can be deleted in multiple places.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461973515", "createdAt": "2020-07-29T00:45:27Z", "author": {"login": "wnbts"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDYyMw==", "bodyText": "I deleted the commented code. Thanks for pointing out.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462480623", "createdAt": "2020-07-29T17:51:57Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzUxNQ=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE0MzE2OnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDo1MjoyMlrOG4kvPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MzoxMFrOG5Dnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NTM1Ng==", "bodyText": "minor. the name should be existingprofilename as existing name is not valid for creation.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461975356", "createdAt": "2020-07-29T00:52:22Z", "author": {"login": "wnbts"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MTM0Mw==", "bodyText": "i updated to isProfileExists since it returns bool. But i renamed variable names like you suggested in other place. Can you review it?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462481343", "createdAt": "2020-07-29T17:53:10Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NTM1Ng=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE2NjM3OnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowNTozMVrOG4k8Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0MDo1NlrOG5JWWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3ODcwNg==", "bodyText": "minor. retrieving profiles is repeated and can use refactoring.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461978706", "createdAt": "2020-07-29T01:05:31Z", "author": {"login": "wnbts"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func userInput(name string, mask bool, allowBlank bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getMaskedText()\n+\t} else {\n+\t\tresponse = getText()\n+\t}\n+\tif !allowBlank && len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn userInput(name, mask, allowBlank)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar validProfiles []string\n+\tfor _, name := range names {\n+\t\tif !validProfileName(name) {\n+\t\t\tfmt.Println(\"profile\", name, \"doesn't exists.\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tvalidProfiles = append(validProfiles, name)\n+\t}\n+\n+\tvar safeProfiles []entity.Profile\n+\tprofiles := getProfiles()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NTE5NA==", "bodyText": "logic to get profiles (load file, deserialization ) is a single method, just that it is being used in multiple use cases. In this particular case, i had split logic to delete actual profile and verify whether the profile is valid or not . This will make logic easy to maintain than having both use cases entangled.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462575194", "createdAt": "2020-07-29T20:40:56Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func userInput(name string, mask bool, allowBlank bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getMaskedText()\n+\t} else {\n+\t\tresponse = getText()\n+\t}\n+\tif !allowBlank && len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn userInput(name, mask, allowBlank)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar validProfiles []string\n+\tfor _, name := range names {\n+\t\tif !validProfileName(name) {\n+\t\t\tfmt.Println(\"profile\", name, \"doesn't exists.\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tvalidProfiles = append(validProfiles, name)\n+\t}\n+\n+\tvar safeProfiles []entity.Profile\n+\tprofiles := getProfiles()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3ODcwNg=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE2OTMwOnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowNzoxOVrOG4k-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowOTozMFrOG5EMiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3OTE1OA==", "bodyText": "question. does go have libraries for data structures other than array?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r461979158", "createdAt": "2020-07-29T01:07:19Z", "author": {"login": "wnbts"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func userInput(name string, mask bool, allowBlank bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getMaskedText()\n+\t} else {\n+\t\tresponse = getText()\n+\t}\n+\tif !allowBlank && len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn userInput(name, mask, allowBlank)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar validProfiles []string\n+\tfor _, name := range names {\n+\t\tif !validProfileName(name) {\n+\t\t\tfmt.Println(\"profile\", name, \"doesn't exists.\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tvalidProfiles = append(validProfiles, name)\n+\t}\n+\n+\tvar safeProfiles []entity.Profile\n+\tprofiles := getProfiles()\n+\tfor _, p := range profiles {\n+\t\tsafe := true\n+\t\tfor _, name := range validProfiles {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDc2MA==", "bodyText": "unfortunately no. It has map and slice(array). Usually if there is need for processing lot of data, go recommends concurrent programming by spanning multiple threads. My guess is since go is not meant for data processing and keep language simple and opinionated, it doesn't have data structures like java.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462490760", "createdAt": "2020-07-29T18:09:30Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,402 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+)\n+\n+// profilesCmd represents the profiles command\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+\t//Run: func(cmd *cobra.Command, args []string) {\n+\t//\tv, _ := cmd.Flags().GetBool(\"nameonly\")\n+\t//\tdisplayProfiles(!v)\n+\t//},\n+}\n+\n+// createProfilesCmd represents add profiles command\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+// deleteProfileCmd represents deleting profiles\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+// listProfilesCmd represents lists profiles\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+// profilesCmd represents the profiles command\n+//var updateProfileCmd = &cobra.Command{\n+//\tUse:   \"edit\",\n+//\tShort: \"edit profile\",\n+//\tLong: `A longer description that spans multiple lines and likely contains examples\n+//and usage of using your command. For example:\n+//\n+//Cobra is a CLI library for Go that empowers applications.\n+//This application is a tool to generate the needed files\n+//to quickly create a Cobra application.`,\n+//\tRun: func(cmd *cobra.Command, args []string) {\n+//\t\tupdateProfiles(args[0])\n+//\t},\n+//}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\t//profilesCmd.AddCommand(updateProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = userInput(\"profile's name\", false, false)\n+\t\tif !validProfileName(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := userInput(\"endpoint\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := userInput(\"user\", false, false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := userInput(\"password\", true, false)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func validProfileName(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func userInput(name string, mask bool, allowBlank bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getMaskedText()\n+\t} else {\n+\t\tresponse = getText()\n+\t}\n+\tif !allowBlank && len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn userInput(name, mask, allowBlank)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar validProfiles []string\n+\tfor _, name := range names {\n+\t\tif !validProfileName(name) {\n+\t\t\tfmt.Println(\"profile\", name, \"doesn't exists.\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tvalidProfiles = append(validProfiles, name)\n+\t}\n+\n+\tvar safeProfiles []entity.Profile\n+\tprofiles := getProfiles()\n+\tfor _, p := range profiles {\n+\t\tsafe := true\n+\t\tfor _, name := range validProfiles {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3OTE1OA=="}, "originalCommit": {"oid": "8e314549b060963e7846cfc333273d40c93273e2"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODcxNTk2OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTo1Mzo0MlrOG5QPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozMzozOVrOG5Q4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4ODA2OA==", "bodyText": "question. is it also a go convention to not have a separate directory/module for test code & data?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462688068", "createdAt": "2020-07-30T01:53:42Z", "author": {"login": "wnbts"}, "path": "cli/internal/controller/ad/ad_test.go", "diffHunk": "@@ -0,0 +1,726 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\tesmockctrl \"esad/internal/controller/es/mocks\"\n+\tentity \"esad/internal/entity/ad\"\n+\tadgateway \"esad/internal/gateway/ad/mocks\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"github.com/golang/mock/gomock\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+const mockDetectorID = \"m4ccEnIBTXsGi3mvMt9p\"\n+const mockDetectorName = \"detector\"\n+\n+func helperLoadBytes(t *testing.T, name string) []byte {\n+\tpath := filepath.Join(\"testdata\", name) // relative path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ccf8c740ade6e50861fc854c828d087259e619"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5ODU2Nw==", "bodyText": "you mean test file and implementation? Yes, go uses package oriented design, hence code/test/testdata should always be close to each other. There is no guideline but i observed this being used in many of application tool\nlike gofmt / https://golang.org/src/cmd/gofmt/", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r462698567", "createdAt": "2020-07-30T02:33:39Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad_test.go", "diffHunk": "@@ -0,0 +1,726 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\tesmockctrl \"esad/internal/controller/es/mocks\"\n+\tentity \"esad/internal/entity/ad\"\n+\tadgateway \"esad/internal/gateway/ad/mocks\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"github.com/golang/mock/gomock\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+const mockDetectorID = \"m4ccEnIBTXsGi3mvMt9p\"\n+const mockDetectorName = \"detector\"\n+\n+func helperLoadBytes(t *testing.T, name string) []byte {\n+\tpath := filepath.Join(\"testdata\", name) // relative path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4ODA2OA=="}, "originalCommit": {"oid": "f1ccf8c740ade6e50861fc854c828d087259e619"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg1Nzc1OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowMTowMFrOG53vpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDozMTo1N1rOG7M_uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTMzMw==", "bodyText": "minor. MacOS and Linux and Windows", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463335333", "createdAt": "2020-07-31T00:01:00Z", "author": {"login": "wnbts"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTcyNg==", "bodyText": "Ack.\n\nsuggestion. making pr smaller helps reviewers.\n\nDefinitely, i started as proof of concept and later i added features. I will definitely create small commits and multiple PR to make sure that code is easy to review .", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831726", "createdAt": "2020-07-31T20:52:30Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTMzMw=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMjA5MQ==", "bodyText": "Forgot to add \"Windows\"  or this CLI can't support windows?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464732091", "createdAt": "2020-08-04T00:31:57Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTMzMw=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkyMjQ4OnYy", "diffSide": "RIGHT", "path": "cli/cmd/stop.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNjozOFrOG54U7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1Mjo0MFrOG6WDOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDg3Ng==", "bodyText": "question. why execute is not needed here but needed in start?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463344876", "createdAt": "2020-07-31T00:36:38Z", "author": {"login": "wnbts"}, "path": "cli/cmd/stop.go", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const commandStop = \"stop\"\n+\n+var stopCmd = &cobra.Command{\n+\tUse:   commandStop + \" [flags] [list of detectors]\",\n+\tShort: \"Stop detectors\",\n+\tLong:  `Stops detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StopAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StopAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTg2NQ==", "bodyText": "Go's package scope allows us to refer to the method outside file as long as it is inside same package. I created one file per command but start and stop shares lot. Now i merged both the command in single file to keep code together.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831865", "createdAt": "2020-07-31T20:52:40Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/stop.go", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const commandStop = \"stop\"\n+\n+var stopCmd = &cobra.Command{\n+\tUse:   commandStop + \" [flags] [list of detectors]\",\n+\tShort: \"Stop detectors\",\n+\tLong:  `Stops detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StopAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StopAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDg3Ng=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkzOTYyOnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo0NjozMVrOG54emA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1Mjo0M1rOG6WDWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzM1Mg==", "bodyText": "minor. should increment be done after an operation is finished?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463347352", "createdAt": "2020-07-31T00:46:31Z", "author": {"login": "wnbts"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTg5OQ==", "bodyText": "Yeah. I updated it. Thanks for pointing it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831899", "createdAt": "2020-07-31T20:52:43Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzM1Mg=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk2MjA5OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1NzoyOFrOG54rFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1Mjo0NVrOG6WDeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDU1MA==", "bodyText": "issue. the error looks like not ignored.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463350550", "createdAt": "2020-07-31T00:57:28Z", "author": {"login": "wnbts"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTkyOA==", "bodyText": "Removed the comment. Initially i was ignoring but later decided to respect and return the same", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831928", "createdAt": "2020-07-31T20:52:45Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDU1MA=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk3MTAyOnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMjo1MFrOG54wXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1Mjo0OFrOG6WDng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTkwMA==", "bodyText": "issue. is it safe to continue with a fatal error?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463351900", "createdAt": "2020-07-31T01:02:50Z", "author": {"login": "wnbts"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif interactive {\n+\t\t\tfmt.Println(*res)\n+\t\t}\n+\n+\t}\n+\terr := c.gateway.DeleteDetector(ctx, id)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) askForConfirmation(message *string) bool {\n+\n+\tif message == nil {\n+\t\treturn true\n+\t}\n+\tif len(*message) > 0 {\n+\t\tfmt.Print(*message)\n+\t}\n+\n+\tvar response string\n+\t_, err := fmt.Fscanln(c.reader, &response)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTk2Ng==", "bodyText": "You are right. It is not. I updated it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831966", "createdAt": "2020-07-31T20:52:48Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif interactive {\n+\t\t\tfmt.Println(*res)\n+\t\t}\n+\n+\t}\n+\terr := c.gateway.DeleteDetector(ctx, id)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) askForConfirmation(message *string) bool {\n+\n+\tif message == nil {\n+\t\treturn true\n+\t}\n+\tif len(*message) > 0 {\n+\t\tfmt.Print(*message)\n+\t}\n+\n+\tvar response string\n+\t_, err := fmt.Fscanln(c.reader, &response)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTkwMA=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk4NTQ3OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxMTozNlrOG5444Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1Mjo1MVrOG6WDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NDA4MQ==", "bodyText": "minor. this name should be undeleted.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463354081", "createdAt": "2020-07-31T01:11:36Z", "author": {"login": "wnbts"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif interactive {\n+\t\t\tfmt.Println(*res)\n+\t\t}\n+\n+\t}\n+\terr := c.gateway.DeleteDetector(ctx, id)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) askForConfirmation(message *string) bool {\n+\n+\tif message == nil {\n+\t\treturn true\n+\t}\n+\tif len(*message) > 0 {\n+\t\tfmt.Print(*message)\n+\t}\n+\n+\tvar response string\n+\t_, err := fmt.Fscanln(c.reader, &response)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tswitch strings.ToLower(response) {\n+\tcase \"y\", \"yes\":\n+\t\treturn true\n+\tcase \"n\", \"no\":\n+\t\treturn false\n+\tdefault:\n+\t\tfmt.Printf(\"I'm sorry but I didn't get what you meant, please type (y)es or (n)o and then press enter:\")\n+\t\treturn c.askForConfirmation(cmapper.StringToStringPtr(\"\"))\n+\t}\n+}\n+\n+//CreateMultiEntityAnomalyDetector creates multiple detector per entity\n+func (c controller) CreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error) {\n+\tif request.PartitionField == nil || len(*request.PartitionField) < 1 {\n+\t\tresult, err := c.CreateAnomalyDetector(ctx, request)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\treturn []string{*result}, err\n+\t}\n+\tfilterValues, err := getFilterValues(ctx, request, c)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(filterValues) < 1 {\n+\t\treturn nil, fmt.Errorf(\n+\t\t\t\"failed to get values for partition field: %s, check whether any data is available in index %s\",\n+\t\t\t*request.PartitionField,\n+\t\t\trequest.Index,\n+\t\t)\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will create %d detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tlen(filterValues),\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(filterValues))\n+\t}\n+\tvar detectors []string\n+\tname := request.Name\n+\tfilter := request.Filter\n+\tvar createdDetectors []entity.Detector\n+\tfor _, value := range filterValues {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\trequest.Filter = buildCompoundQuery(*request.PartitionField, value, filter)\n+\t\trequest.Name = fmt.Sprintf(\"%s-%s\", name, value)\n+\t\tresult, err := c.CreateAnomalyDetector(ctx, request)\n+\t\tif err != nil {\n+\t\t\tc.cleanupCreatedDetectors(ctx, createdDetectors)\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tcreatedDetectors = append(createdDetectors, entity.Detector{\n+\t\t\tID:   *result,\n+\t\t\tName: request.Name,\n+\t\t})\n+\t\tdetectors = append(detectors, request.Name)\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func createProgressBar(total int) *uiprogress.Bar {\n+\tif total < 2 {\n+\t\treturn nil\n+\t}\n+\tuiprogress.Start()\n+\tbar := uiprogress.AddBar(total).PrependCompleted()\n+\tbar.Width = 50\n+\tbar.AppendFunc(func(b *uiprogress.Bar) string {\n+\t\treturn fmt.Sprintf(\"(%d / %d)\", b.Current(), total)\n+\t})\n+\treturn bar\n+}\n+\n+func buildCompoundQuery(field string, value interface{}, userFilter json.RawMessage) json.RawMessage {\n+\n+\tleaf1 := []byte(fmt.Sprintf(`{\n+    \t\t\t\"bool\": {\n+      \t\t\t\t\"filter\": {\n+          \t\t\t\t\"term\": {\n+\t\t\t\t\t\t\t\"%s\" : \"%v\"\n+         \t\t\t \t}\n+        \t\t\t}\n+\t\t\t\t}\n+  \t\t\t}`, field, value))\n+\tif userFilter == nil {\n+\t\treturn leaf1\n+\t}\n+\tmarshal, _ := json.Marshal(entity.Query{\n+\t\tBool: entity.Bool{\n+\t\t\tMust: []json.RawMessage{\n+\t\t\t\tleaf1, userFilter,\n+\t\t\t},\n+\t\t},\n+\t})\n+\treturn marshal\n+}\n+\n+func getFilterValues(ctx context.Context, request entity.CreateDetectorRequest, c controller) ([]interface{}, error) {\n+\tvar filterValues []interface{}\n+\tfor _, index := range request.Index {\n+\t\tv, err := c.esCtrl.GetDistinctValues(ctx, index, *request.PartitionField)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfilterValues = append(filterValues, v...)\n+\t}\n+\treturn filterValues, nil\n+}\n+\n+func (c controller) StopDetector(ctx context.Context, ID string) error {\n+\tif len(ID) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id: %s cannot be empty\", ID)\n+\t}\n+\t_, err := c.gateway.StopDetector(ctx, ID)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StartDetector(ctx context.Context, ID string) error {\n+\tif len(ID) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id: %s cannot be empty\", ID)\n+\t}\n+\terr := c.gateway.StartDetector(ctx, ID)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) CreateAnomalyDetector(ctx context.Context, r entity.CreateDetectorRequest) (*string, error) {\n+\n+\tif err := validateCreateRequest(r); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tpayload, err := mapper.MapToCreateDetector(r)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tresponse, err := c.gateway.CreateDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, processEntityError(err)\n+\t}\n+\tvar data map[string]interface{}\n+\t_ = json.Unmarshal(response, &data)\n+\n+\tdetectorID := fmt.Sprintf(\"%s\", data[\"_id\"])\n+\tif !r.Start {\n+\t\treturn cmapper.StringToStringPtr(detectorID), nil\n+\t}\n+\n+\terr = c.StartDetector(ctx, detectorID)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"detector is created with id: %s, but failed to start due to %v\", detectorID, err)\n+\t}\n+\treturn cmapper.StringToStringPtr(detectorID), nil\n+}\n+\n+func processEntityError(err error) error {\n+\tvar c entity.CreateError\n+\tdata := fmt.Sprintf(\"%v\", err)\n+\tresponseErr := json.Unmarshal([]byte(data), &c)\n+\tif responseErr != nil {\n+\t\treturn err\n+\t}\n+\tif len(c.Error.Reason) > 0 {\n+\t\treturn errors.New(c.Error.Reason)\n+\t}\n+\treturn err\n+}\n+\n+func (c controller) cleanupCreatedDetectors(ctx context.Context, detectors []entity.Detector) {\n+\n+\tif len(detectors) < 1 {\n+\t\treturn\n+\t}\n+\tvar deleted []entity.Detector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 440}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTk5OQ==", "bodyText": "You are right. I fixed it now.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r463831999", "createdAt": "2020-07-31T20:52:51Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,454 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/gosuri/uiprogress\"\n+\t\"io\"\n+\t\"log\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector\n+func (c controller) DeleteDetector(ctx context.Context, id string, interactive bool, force bool) error {\n+\tif len(id) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id cannot be empty\")\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will delete detector: %s . Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tid,\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil\n+\t}\n+\tif force {\n+\t\tres, err := c.gateway.StopDetector(ctx, id) // ignore error\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif interactive {\n+\t\t\tfmt.Println(*res)\n+\t\t}\n+\n+\t}\n+\terr := c.gateway.DeleteDetector(ctx, id)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) askForConfirmation(message *string) bool {\n+\n+\tif message == nil {\n+\t\treturn true\n+\t}\n+\tif len(*message) > 0 {\n+\t\tfmt.Print(*message)\n+\t}\n+\n+\tvar response string\n+\t_, err := fmt.Fscanln(c.reader, &response)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tswitch strings.ToLower(response) {\n+\tcase \"y\", \"yes\":\n+\t\treturn true\n+\tcase \"n\", \"no\":\n+\t\treturn false\n+\tdefault:\n+\t\tfmt.Printf(\"I'm sorry but I didn't get what you meant, please type (y)es or (n)o and then press enter:\")\n+\t\treturn c.askForConfirmation(cmapper.StringToStringPtr(\"\"))\n+\t}\n+}\n+\n+//CreateMultiEntityAnomalyDetector creates multiple detector per entity\n+func (c controller) CreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error) {\n+\tif request.PartitionField == nil || len(*request.PartitionField) < 1 {\n+\t\tresult, err := c.CreateAnomalyDetector(ctx, request)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\treturn []string{*result}, err\n+\t}\n+\tfilterValues, err := getFilterValues(ctx, request, c)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(filterValues) < 1 {\n+\t\treturn nil, fmt.Errorf(\n+\t\t\t\"failed to get values for partition field: %s, check whether any data is available in index %s\",\n+\t\t\t*request.PartitionField,\n+\t\t\trequest.Index,\n+\t\t)\n+\t}\n+\tproceed := true\n+\tif interactive {\n+\t\tproceed = c.askForConfirmation(\n+\t\t\tcmapper.StringToStringPtr(\n+\t\t\t\tfmt.Sprintf(\n+\t\t\t\t\t\"esad will create %d detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\",\n+\t\t\t\t\tlen(filterValues),\n+\t\t\t\t),\n+\t\t\t),\n+\t\t)\n+\t}\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\tvar bar *uiprogress.Bar\n+\tif display {\n+\t\tbar = createProgressBar(len(filterValues))\n+\t}\n+\tvar detectors []string\n+\tname := request.Name\n+\tfilter := request.Filter\n+\tvar createdDetectors []entity.Detector\n+\tfor _, value := range filterValues {\n+\t\tif bar != nil {\n+\t\t\tbar.Incr()\n+\t\t}\n+\t\trequest.Filter = buildCompoundQuery(*request.PartitionField, value, filter)\n+\t\trequest.Name = fmt.Sprintf(\"%s-%s\", name, value)\n+\t\tresult, err := c.CreateAnomalyDetector(ctx, request)\n+\t\tif err != nil {\n+\t\t\tc.cleanupCreatedDetectors(ctx, createdDetectors)\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tcreatedDetectors = append(createdDetectors, entity.Detector{\n+\t\t\tID:   *result,\n+\t\t\tName: request.Name,\n+\t\t})\n+\t\tdetectors = append(detectors, request.Name)\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func createProgressBar(total int) *uiprogress.Bar {\n+\tif total < 2 {\n+\t\treturn nil\n+\t}\n+\tuiprogress.Start()\n+\tbar := uiprogress.AddBar(total).PrependCompleted()\n+\tbar.Width = 50\n+\tbar.AppendFunc(func(b *uiprogress.Bar) string {\n+\t\treturn fmt.Sprintf(\"(%d / %d)\", b.Current(), total)\n+\t})\n+\treturn bar\n+}\n+\n+func buildCompoundQuery(field string, value interface{}, userFilter json.RawMessage) json.RawMessage {\n+\n+\tleaf1 := []byte(fmt.Sprintf(`{\n+    \t\t\t\"bool\": {\n+      \t\t\t\t\"filter\": {\n+          \t\t\t\t\"term\": {\n+\t\t\t\t\t\t\t\"%s\" : \"%v\"\n+         \t\t\t \t}\n+        \t\t\t}\n+\t\t\t\t}\n+  \t\t\t}`, field, value))\n+\tif userFilter == nil {\n+\t\treturn leaf1\n+\t}\n+\tmarshal, _ := json.Marshal(entity.Query{\n+\t\tBool: entity.Bool{\n+\t\t\tMust: []json.RawMessage{\n+\t\t\t\tleaf1, userFilter,\n+\t\t\t},\n+\t\t},\n+\t})\n+\treturn marshal\n+}\n+\n+func getFilterValues(ctx context.Context, request entity.CreateDetectorRequest, c controller) ([]interface{}, error) {\n+\tvar filterValues []interface{}\n+\tfor _, index := range request.Index {\n+\t\tv, err := c.esCtrl.GetDistinctValues(ctx, index, *request.PartitionField)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfilterValues = append(filterValues, v...)\n+\t}\n+\treturn filterValues, nil\n+}\n+\n+func (c controller) StopDetector(ctx context.Context, ID string) error {\n+\tif len(ID) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id: %s cannot be empty\", ID)\n+\t}\n+\t_, err := c.gateway.StopDetector(ctx, ID)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StartDetector(ctx context.Context, ID string) error {\n+\tif len(ID) < 1 {\n+\t\treturn fmt.Errorf(\"detector Id: %s cannot be empty\", ID)\n+\t}\n+\terr := c.gateway.StartDetector(ctx, ID)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) CreateAnomalyDetector(ctx context.Context, r entity.CreateDetectorRequest) (*string, error) {\n+\n+\tif err := validateCreateRequest(r); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tpayload, err := mapper.MapToCreateDetector(r)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tresponse, err := c.gateway.CreateDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, processEntityError(err)\n+\t}\n+\tvar data map[string]interface{}\n+\t_ = json.Unmarshal(response, &data)\n+\n+\tdetectorID := fmt.Sprintf(\"%s\", data[\"_id\"])\n+\tif !r.Start {\n+\t\treturn cmapper.StringToStringPtr(detectorID), nil\n+\t}\n+\n+\terr = c.StartDetector(ctx, detectorID)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"detector is created with id: %s, but failed to start due to %v\", detectorID, err)\n+\t}\n+\treturn cmapper.StringToStringPtr(detectorID), nil\n+}\n+\n+func processEntityError(err error) error {\n+\tvar c entity.CreateError\n+\tdata := fmt.Sprintf(\"%v\", err)\n+\tresponseErr := json.Unmarshal([]byte(data), &c)\n+\tif responseErr != nil {\n+\t\treturn err\n+\t}\n+\tif len(c.Error.Reason) > 0 {\n+\t\treturn errors.New(c.Error.Reason)\n+\t}\n+\treturn err\n+}\n+\n+func (c controller) cleanupCreatedDetectors(ctx context.Context, detectors []entity.Detector) {\n+\n+\tif len(detectors) < 1 {\n+\t\treturn\n+\t}\n+\tvar deleted []entity.Detector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NDA4MQ=="}, "originalCommit": {"oid": "9332f7d16104de9d6b7a59378986550b0da5af55"}, "originalPosition": 440}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQ4MTEyOnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDozMzozNFrOG7NBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo0NDowNVrOG7Q48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMjQ4Ng==", "bodyText": "What will happen if I use same name for two profiles. Will throw error or override the prior one?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464732486", "createdAt": "2020-08-04T00:33:34Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDMxOA==", "bodyText": "There is no validation if file is specified by user. We only have validation if user is creating a profile. Let's say if user has two profile with same name and this config is passed as parameter to the command, it will not override instead, it will select the first profile which matches the name.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464734318", "createdAt": "2020-08-04T00:40:22Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMjQ4Ng=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNTAxMQ==", "bodyText": "Sure, so we have error handling for this case. How about add this in readme doc and the help doc?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464735011", "createdAt": "2020-08-04T00:43:05Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMjQ4Ng=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5NTg4OQ==", "bodyText": "Added it in readme.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464795889", "createdAt": "2020-08-04T04:44:05Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMjQ4Ng=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQ4ODg0OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDozNzo1NlrOG7NFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDo0Nzo0NVrOG7NPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMzY0MA==", "bodyText": "Seems the commands not follow same name convention. esad profile create  looks like esad <resource> <action>, but here esad start [detector-name-pattern] looks like esad <action> <resource>. Is it possible to follow same name convention? Maybe consult Carlos to confirm.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464733640", "createdAt": "2020-08-04T00:37:56Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+An ESAD CLI has following structure\n+```\n+$ esad <command> <subcommand> [flags and parameters]\n+```\n+For example to start detector:\n+```\n+$ esad start [detector-name-pattern]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNjE2Ng==", "bodyText": "Actually, esad, profile, create, start are commands. You can think like tree structure.\nesad -> profile -> create\n-> delete\n-> Create\n-> Start\nAnyway, i asked carlos to provide feedback. If i didn't receive anything related to that, i will bring this point.\nThanks for feedback.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464736166", "createdAt": "2020-08-04T00:47:45Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+An ESAD CLI has following structure\n+```\n+$ esad <command> <subcommand> [flags and parameters]\n+```\n+For example to start detector:\n+```\n+$ esad start [detector-name-pattern]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMzY0MA=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQ5MjI2OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDozOTo1MFrOG7NHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDo0Mjo0NFrOG7NKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDE1NA==", "bodyText": "How about adding version compatibility table in the help doc and read-me doc?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464734154", "createdAt": "2020-08-04T00:39:50Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+An ESAD CLI has following structure\n+```\n+$ esad <command> <subcommand> [flags and parameters]\n+```\n+For example to start detector:\n+```\n+$ esad start [detector-name-pattern]\n+```\n+To view help documentation, use one of the following:\n+```\n+$ esad --help\n+$ esad <command> --help\n+$ esad <command> <subcommand> --help\n+```\n+To get the version of the ESAD CLI:\n+```\n+$ esad --version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDkxMQ==", "bodyText": "Sure. I will add it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464734911", "createdAt": "2020-08-04T00:42:44Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS and Linux, and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/\n+    ```\n+\n+## Configure\n+\n+Before using the AWS CLI, you need to configure your AWS credentials. You can do this in several ways:\n+\n+* Configuration command\n+* Config file\n+\n+The quickest way to get started is to run the `esad profile create`\n+\n+```\n+$ esad profile create\n+Enter profile's name: dev\n+ES Anomaly Detection Endpoint: https://localhost:9200\n+ES Anomaly Detection User: admin\n+ES Anomaly Detection Password:\n+```\n+\n+To use a config file, create a YAML file like this\n+```\n+profiles:\n+- endpoint: https://localhost:9200\n+  username: admin\n+  password: foobar\n+  name: default\n+- endpoint: https://odfe-node1:9200\n+  username: admin\n+  password: foobar\n+  name: dev\n+```\n+and place it on ~/.esad/config.yaml. if you wish to place the shared credentials file in a different location than the one specified above, you need to tell aws-cli where to find it. Do this by setting the appropriate environment variable:\n+\n+```\n+export ESAD_CONFIG_FILE=/path/to/config_file\n+```\n+You can have multiple profiles defined in the configuration file. You can then specify which profile to use by using the --profile option. If no profile is specified the `default` profile is used.\n+\n+\n+\n+## Basic Commands\n+\n+An ESAD CLI has following structure\n+```\n+$ esad <command> <subcommand> [flags and parameters]\n+```\n+For example to start detector:\n+```\n+$ esad start [detector-name-pattern]\n+```\n+To view help documentation, use one of the following:\n+```\n+$ esad --help\n+$ esad <command> --help\n+$ esad <command> <subcommand> --help\n+```\n+To get the version of the ESAD CLI:\n+```\n+$ esad --version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDE1NA=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjU0NTAwOnYy", "diffSide": "RIGHT", "path": "cli/cmd/create.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMToxMDo0M1rOG7Nl2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzozNTo1MFrOG7P3Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTg1MA==", "bodyText": "What if user set both generate and create?  How about add some comments here about difference of create/generate, so don't need to go to handler.GenerateAnomalyDetector to learn more what generate does ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464741850", "createdAt": "2020-08-04T01:10:43Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/create.go", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\thandler \"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCreate = \"create\"\n+\tinteractive   = \"interactive\"\n+\tgenerate      = \"generate-skeleton\"\n+)\n+\n+var createCmd = &cobra.Command{\n+\tUse:   commandCreate + \" [list of file-path] [flags]\",\n+\tShort: \"Creates detectors based on configurations\",\n+\tLong:  `Creates detectors based on configurations specified by file path`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tstatus, _ := cmd.Flags().GetBool(interactive)\n+\t\tgenerate, _ := cmd.Flags().GetBool(generate)\n+\t\tif generate {\n+\t\t\terr := generateFile()\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t\terr := createDetectors(args, status)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3OTA5OQ==", "bodyText": "Thats a good point. I will add comments here.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r464779099", "createdAt": "2020-08-04T03:35:50Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/create.go", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\thandler \"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCreate = \"create\"\n+\tinteractive   = \"interactive\"\n+\tgenerate      = \"generate-skeleton\"\n+)\n+\n+var createCmd = &cobra.Command{\n+\tUse:   commandCreate + \" [list of file-path] [flags]\",\n+\tShort: \"Creates detectors based on configurations\",\n+\tLong:  `Creates detectors based on configurations specified by file path`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tstatus, _ := cmd.Flags().GetBool(interactive)\n+\t\tgenerate, _ := cmd.Flags().GetBool(generate)\n+\t\tif generate {\n+\t\t\terr := generateFile()\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(commandCreate, \"command failed\")\n+\t\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t\terr := createDetectors(args, status)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTg1MA=="}, "originalCommit": {"oid": "924511ec3e08835237986e7550c3e0d23d0e135e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQwODkxOnYy", "diffSide": "RIGHT", "path": "cli/internal/gateway/es/es.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo0MjoxNVrOG7ormg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0OToyNFrOG7tGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NTY5MA==", "bodyText": "This method is to get distinct value of one field. How about we rename this method as \"SearchDistinctValue\"? So I don't need to read the method implementation to learn this.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465185690", "createdAt": "2020-08-04T16:42:15Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/gateway/es/es.go", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package es\n+\n+import (\n+\t\"context\"\n+\t\"esad/internal/client\"\n+\telasticsearch \"esad/internal/entity/es\"\n+\tgw \"esad/internal/gateway\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+const search = \"_search\"\n+\n+//go:generate mockgen -destination=mocks/mock_es.go -package=mocks . Gateway\n+\n+//Gateway interface to call ES\n+type Gateway interface {\n+\tSearch(ctx context.Context, index string, field string) ([]byte, error)\n+}\n+\n+type gateway struct {\n+\tgw.HTTPGateway\n+}\n+\n+// NewESGateway returns new Gateway instance\n+func NewESGateway(c *client.Client, u *client.UserConfig) Gateway {\n+\treturn &gateway{\n+\t\t*gw.NewHTTPGateway(c, u),\n+\t}\n+}\n+func buildPayload(field string) *elasticsearch.SearchRequest {\n+\treturn &elasticsearch.SearchRequest{\n+\t\tSize: 0, // This will skip data in the response\n+\t\tAgg: elasticsearch.Aggregate{\n+\t\t\tGroup: elasticsearch.DistinctGroups{\n+\t\t\t\tTerm: elasticsearch.Terms{\n+\t\t\t\t\tField: field,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func (g *gateway) buildSearchURL(index string) (*url.URL, error) {\n+\tendpoint, err := gw.GetValidEndpoint(g.UserConfig)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tendpoint.Path = fmt.Sprintf(\"%s/%s\", index, search)\n+\treturn endpoint, nil\n+}\n+\n+func (g *gateway) Search(ctx context.Context, index string, field string) ([]byte, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1ODA4NA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465258084", "createdAt": "2020-08-04T18:49:24Z", "author": {"login": "VijayanB"}, "path": "cli/internal/gateway/es/es.go", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package es\n+\n+import (\n+\t\"context\"\n+\t\"esad/internal/client\"\n+\telasticsearch \"esad/internal/entity/es\"\n+\tgw \"esad/internal/gateway\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+const search = \"_search\"\n+\n+//go:generate mockgen -destination=mocks/mock_es.go -package=mocks . Gateway\n+\n+//Gateway interface to call ES\n+type Gateway interface {\n+\tSearch(ctx context.Context, index string, field string) ([]byte, error)\n+}\n+\n+type gateway struct {\n+\tgw.HTTPGateway\n+}\n+\n+// NewESGateway returns new Gateway instance\n+func NewESGateway(c *client.Client, u *client.UserConfig) Gateway {\n+\treturn &gateway{\n+\t\t*gw.NewHTTPGateway(c, u),\n+\t}\n+}\n+func buildPayload(field string) *elasticsearch.SearchRequest {\n+\treturn &elasticsearch.SearchRequest{\n+\t\tSize: 0, // This will skip data in the response\n+\t\tAgg: elasticsearch.Aggregate{\n+\t\t\tGroup: elasticsearch.DistinctGroups{\n+\t\t\t\tTerm: elasticsearch.Terms{\n+\t\t\t\t\tField: field,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func (g *gateway) buildSearchURL(index string) (*url.URL, error) {\n+\tendpoint, err := gw.GetValidEndpoint(g.UserConfig)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tendpoint.Path = fmt.Sprintf(\"%s/%s\", index, search)\n+\treturn endpoint, nil\n+}\n+\n+func (g *gateway) Search(ctx context.Context, index string, field string) ([]byte, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NTY5MA=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQ1ODI5OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/es/controller.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo1NToxMlrOG7pKMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0OTowNlrOG7tFrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MzUyMg==", "bodyText": "What's the name convention for the file name? I see this ES controller named as \"controller.go\", but AD controller named as \"ad.go\". And I see five \"ad.go\" files in these folders: entity, mapper, gateway, handler, controller. Is it common practice in Go to use same file name and differentiate them with package path?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465193522", "createdAt": "2020-08-04T16:55:12Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/controller/es/controller.go", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NzkwMg==", "bodyText": "I renamed to es.go. In Go, file name is not as vital as package name. I have seen in most of the popular go repositories, they use file name as same as package name. Yes, package is considered as module than file.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465257902", "createdAt": "2020-08-04T18:49:06Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/es/controller.go", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MzUyMg=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQ4MDU2OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowMToxNlrOG7pY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0NjozNFrOG7tASg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5NzI2OA==", "bodyText": "Add comments for public methods ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465197268", "createdAt": "2020-08-04T17:01:16Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NjUyMg==", "bodyText": "ACk", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465256522", "createdAt": "2020-08-04T18:46:34Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5NzI2OA=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUwMTM0OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowNzozNFrOG7pmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0MzoyNVrOG7s5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMDczOA==", "bodyText": "minor: how about move StartDetectorByName method before StopDetectorByName ? This can improve a little bit code readability.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465200738", "createdAt": "2020-08-04T17:07:34Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NDg0Mg==", "bodyText": "ACk.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465254842", "createdAt": "2020-08-04T18:43:25Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMDczOA=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUwODk5OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowOTo1MlrOG7prVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0Mzo0OVrOG7s6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjAwNA==", "bodyText": "minor: this simple comment looks like some duplicate of the method name \"DeleteDetector\".  How about add more details like what we will do for force is true/false? Suggest to check other places too.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465202004", "createdAt": "2020-08-04T17:09:52Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NTA4NA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465255084", "createdAt": "2020-08-04T18:43:49Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"esad/internal/controller/es\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/gateway/ad\"\n+\tcmapper \"esad/internal/mapper\"\n+\tmapper \"esad/internal/mapper/ad\"\n+\t\"fmt\"\n+\t\"github.com/cheggaaa/pb/v3\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . AnomalyDetectorController\n+\n+//AnomalyDetectorController is an interface for the AD plugin controllers\n+type AnomalyDetectorController interface {\n+\tCreateAnomalyDetector(context.Context, entity.CreateDetectorRequest) (*string, error)\n+\tCreateMultiEntityAnomalyDetector(ctx context.Context, request entity.CreateDetectorRequest, interactive bool, display bool) ([]string, error)\n+\tStartDetector(context.Context, string) error\n+\tStopDetector(context.Context, string) error\n+\tDeleteDetector(context.Context, string, bool, bool) error\n+\tDeleteDetectorByName(context.Context, string, bool, bool) error\n+\tStartDetectorByName(context.Context, string, bool) error\n+\tStopDetectorByName(context.Context, string, bool) error\n+\tSearchDetectorByName(context.Context, string) ([]entity.Detector, error)\n+}\n+\n+type controller struct {\n+\treader  io.Reader\n+\tgateway ad.Gateway\n+\tesCtrl  es.Controller\n+}\n+\n+func validateCreateRequest(r entity.CreateDetectorRequest) error {\n+\tif len(r.Name) < 1 {\n+\t\treturn fmt.Errorf(\"name field cannot be empty\")\n+\t}\n+\tif len(r.Features) < 1 {\n+\t\treturn fmt.Errorf(\"features cannot be empty\")\n+\t}\n+\tif len(r.Index) < 1 || len(r.Index[0]) < 1 {\n+\t\treturn fmt.Errorf(\"index field cannot be empty and it should have at least one valid index\")\n+\t}\n+\tif len(r.Interval) < 1 {\n+\t\treturn fmt.Errorf(\"interval field cannot be empty\")\n+\t}\n+\treturn nil\n+}\n+func (c controller) DeleteDetectorByName(ctx context.Context, name string, force bool, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"delete\", name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := c.DeleteDetector(ctx, detector.ID, false, force)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"failed to delete %d following detector(s)\\n\", len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+\n+}\n+\n+//NewADController returns new ADController instance\n+func NewADController(reader io.Reader, esCtrl es.Controller, gateway ad.Gateway) AnomalyDetectorController {\n+\treturn &controller{\n+\t\treader,\n+\t\tgateway,\n+\t\tesCtrl,\n+\t}\n+}\n+\n+func (c controller) SearchDetectorByName(ctx context.Context, name string) ([]entity.Detector, error) {\n+\tif len(name) < 1 {\n+\t\treturn nil, fmt.Errorf(\"detector name cannot be empty\")\n+\t}\n+\tpayload := entity.SearchRequest{\n+\t\tQuery: entity.SearchQuery{\n+\t\t\tMatch: entity.Match{\n+\t\t\t\tName: name,\n+\t\t\t},\n+\t\t},\n+\t}\n+\tresponse, err := c.gateway.SearchDetector(ctx, payload)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdetectors, err := mapper.MapToDetectors(response, name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn detectors, nil\n+}\n+\n+func (c controller) StartDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"start\", c.StartDetector, display)\n+}\n+\n+func (c controller) getDetectorsToProcess(ctx context.Context, method string, pattern string) ([]entity.Detector, error) {\n+\tif len(pattern) < 1 {\n+\t\treturn nil, fmt.Errorf(\"name cannot be empty\")\n+\t}\n+\t//Search Detector By Name to get ID\n+\tmatchedDetectors, err := c.SearchDetectorByName(ctx, pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(matchedDetectors) < 1 {\n+\t\tfmt.Printf(\"no detectors matched by name %s\\n\", pattern)\n+\t\treturn nil, nil\n+\t}\n+\tfmt.Printf(\"%d detectors matched by name %s\\n\", len(matchedDetectors), pattern)\n+\tfor _, detector := range matchedDetectors {\n+\t\tfmt.Println(detector.Name)\n+\t}\n+\n+\tproceed := c.askForConfirmation(\n+\t\tcmapper.StringToStringPtr(\n+\t\t\tfmt.Sprintf(\"esad will %s above matched detector(s). Do you want to proceed? please type (y)es or (n)o and then press enter:\", method),\n+\t\t),\n+\t)\n+\tif !proceed {\n+\t\treturn nil, nil\n+\t}\n+\treturn matchedDetectors, nil\n+}\n+\n+func (c controller) processDetectorByAction(ctx context.Context, pattern string, action string, f func(c context.Context, s string) error, display bool) error {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, action, pattern)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif matchedDetectors == nil {\n+\t\treturn nil\n+\t}\n+\tvar bar *pb.ProgressBar\n+\tif display {\n+\t\tbar = createProgressBar(len(matchedDetectors))\n+\t}\n+\tvar failedDetectors []string\n+\tfor _, detector := range matchedDetectors {\n+\t\terr := f(ctx, detector.ID)\n+\t\tif err != nil {\n+\t\t\tfailedDetectors = append(failedDetectors, fmt.Sprintf(\"%s \\t Reason: %s\", detector.Name, err))\n+\t\t\tcontinue\n+\t\t}\n+\t\tif bar != nil {\n+\t\t\tbar.Increment()\n+\t\t}\n+\t}\n+\tif bar != nil {\n+\t\tbar.Finish()\n+\t}\n+\tif len(failedDetectors) > 0 {\n+\t\tfmt.Printf(\"\\nfailed to %s %d following detector(s)\\n\", action, len(failedDetectors))\n+\t\tfor _, detector := range failedDetectors {\n+\t\t\tfmt.Println(detector)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (c controller) StopDetectorByName(ctx context.Context, pattern string, display bool) error {\n+\treturn c.processDetectorByAction(ctx, pattern, \"stop\", c.StopDetector, display)\n+}\n+\n+//DeleteDetector deletes detector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjAwNA=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUzMzk4OnYy", "diffSide": "RIGHT", "path": "cli/internal/controller/es/controller.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxNjo0NVrOG7p7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0NDoxNVrOG7s7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjAyMQ==", "bodyText": "Rename it as EsController considering we have AnomalyDetectorController?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465206021", "createdAt": "2020-08-04T17:16:45Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/controller/es/controller.go", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package es\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/es\"\n+\t\"esad/internal/gateway/es\"\n+\t\"fmt\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . Controller\n+\n+//Controller is an interface for ES Cluster to get distinct values\n+type Controller interface {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzNTc4NQ==", "bodyText": "From Go Wiki:\nAll references to names in your package will be done using the package name, so you can omit that name from the identifiers. For example, if you are in package chubby, you don't need type ChubbyFile, which clients will write as chubby.ChubbyFile. Instead, name the type File, which clients will write as chubby.File.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465235785", "createdAt": "2020-08-04T18:09:03Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/es/controller.go", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package es\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/es\"\n+\t\"esad/internal/gateway/es\"\n+\t\"fmt\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . Controller\n+\n+//Controller is an interface for ES Cluster to get distinct values\n+type Controller interface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjAyMQ=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NTI5Ng==", "bodyText": "I renamed adController to Controller to keep consistent.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465255296", "createdAt": "2020-08-04T18:44:15Z", "author": {"login": "VijayanB"}, "path": "cli/internal/controller/es/controller.go", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package es\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/es\"\n+\t\"esad/internal/gateway/es\"\n+\t\"fmt\"\n+)\n+\n+//go:generate mockgen -destination=mocks/mock_ad.go -package=mocks . Controller\n+\n+//Controller is an interface for ES Cluster to get distinct values\n+type Controller interface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjAyMQ=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU0NzE5OnYy", "diffSide": "RIGHT", "path": "cli/internal/gateway/ad/ad.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyMDoxNFrOG7qC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozMzozMVrOG7upbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwODA0NQ==", "bodyText": "I think we should write const in uppercase letters.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465208045", "createdAt": "2020-08-04T17:20:14Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/gateway/ad/ad.go", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"esad/internal/client\"\n+\tgw \"esad/internal/gateway\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+const (\n+\tbaseURL           = \"_opendistro/_anomaly_detection/detectors\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzNTg2Mg==", "bodyText": "Unfortunately in GO, it is recommended to write like this. If const will be exported, then we can capitalize the first character.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465235862", "createdAt": "2020-08-04T18:09:08Z", "author": {"login": "VijayanB"}, "path": "cli/internal/gateway/ad/ad.go", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"esad/internal/client\"\n+\tgw \"esad/internal/gateway\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+const (\n+\tbaseURL           = \"_opendistro/_anomaly_detection/detectors\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwODA0NQ=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4MzQzNw==", "bodyText": "Sure, interesting way to use naming convention to control access.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465283437", "createdAt": "2020-08-04T19:33:31Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/gateway/ad/ad.go", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"esad/internal/client\"\n+\tgw \"esad/internal/gateway\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+const (\n+\tbaseURL           = \"_opendistro/_anomaly_detection/detectors\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwODA0NQ=="}, "originalCommit": {"oid": "91a7c1a6d9dc4cdc1a9e0f518722ffe5182fb635"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU3NDc1OnYy", "diffSide": "RIGHT", "path": "cli/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyNzo0MFrOG7qT0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0NTowNVrOG7s9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMjM3MA==", "bodyText": "Should we change the repo ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465212370", "createdAt": "2020-08-04T17:27:40Z", "author": {"login": "ylwu-amzn"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS, Windows, Linux and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Version Compatibility Matrix\n+\n+| ESAD Version  | ODFE Version        |\n+| ------------- |:-------------------:|\n+| 0.1           | 1.7.X, 1.8.X, 1.9.X |\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfe6dd467f0c3d282b75a7eff43c575631a0ed6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NTc1OA==", "bodyText": "Thanks for pointing it out.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465255758", "createdAt": "2020-08-04T18:45:05Z", "author": {"login": "VijayanB"}, "path": "cli/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+![AD CLI Test and Build](https://github.com/opendistro-for-elasticsearch/anomaly-detection/workflows/AD%20CLI%20Test%20and%20Build/badge.svg)\n+# Open Distro for Elasticsearch AD CLI\n+\n+The AD CLI component in Open Distro for Elasticsearch (ODFE) is a command line interface for ODFE AD plugin.\n+This CLI provides greater flexibility of use. User can use CLI to easily do things that are difficult or sometimes impossible to do with kibana UI. This doesn\u2019t use any additional  system resources to load any of graphical part, thus making it simpler and faster than UI. \n+\n+It only supports [Open Distro for Elasticsearch (ODFE) AD Plugin](https://opendistro.github.io/for-elasticsearch-docs/docs/ad/)\n+You must have the ODFE AD plugin installed to your Elasticsearch instance to connect. \n+Users can run this CLI from MacOS, Windows, Linux and connect to any valid Elasticsearch end-point such as Amazon Elasticsearch Service (AES).The ESAD CLI implements AD APIs.\n+\n+## Version Compatibility Matrix\n+\n+| ESAD Version  | ODFE Version        |\n+| ------------- |:-------------------:|\n+| 0.1           | 1.7.X, 1.8.X, 1.9.X |\n+\n+## Features\n+\n+* Create Detectors\n+* Start, Stop, Delete Detectors\n+* Create named profiles to connect to ES cluster\n+\n+## Install\n+\n+Launch your local Elasticsearch instance and make sure you have the Open Distro for Elasticsearch AD plugin installed.\n+\n+To install the AD CLI:\n+\n+\n+1. Install from source:\n+\n+    ```\n+    $ go get github.com/VijayanB/esad/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMjM3MA=="}, "originalCommit": {"oid": "adfe6dd467f0c3d282b75a7eff43c575631a0ed6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTYxMzY2OnYy", "diffSide": "RIGHT", "path": "cli/internal/handler/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzozODoyN1rOG7qrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0NjoxM1rOG7s_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxODUxMA==", "bodyText": "Wrong comments?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465218510", "createdAt": "2020-08-04T17:38:27Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/handler/ad/ad.go", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\tcontroller \"esad/internal/controller/ad\"\n+\tentity \"esad/internal/entity/ad\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+)\n+\n+//Handler is facade for controller\n+type Handler struct {\n+\tcontroller.AnomalyDetectorController\n+}\n+\n+// New returns new Handler instance\n+func New(controller controller.AnomalyDetectorController) *Handler {\n+\treturn &Handler{\n+\t\tcontroller,\n+\t}\n+}\n+\n+//CreateAnomalyDetector creates detector based on file configurations\n+func CreateAnomalyDetector(h *Handler, fileName string, interactive bool) error {\n+\treturn h.CreateAnomalyDetector(fileName, interactive)\n+}\n+\n+//GenerateAnomalyDetector creates detector based on file configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfe6dd467f0c3d282b75a7eff43c575631a0ed6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NjM0OA==", "bodyText": "ACk", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465256348", "createdAt": "2020-08-04T18:46:13Z", "author": {"login": "VijayanB"}, "path": "cli/internal/handler/ad/ad.go", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\tcontroller \"esad/internal/controller/ad\"\n+\tentity \"esad/internal/entity/ad\"\n+\tmapper2 \"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+)\n+\n+//Handler is facade for controller\n+type Handler struct {\n+\tcontroller.AnomalyDetectorController\n+}\n+\n+// New returns new Handler instance\n+func New(controller controller.AnomalyDetectorController) *Handler {\n+\treturn &Handler{\n+\t\tcontroller,\n+\t}\n+}\n+\n+//CreateAnomalyDetector creates detector based on file configurations\n+func CreateAnomalyDetector(h *Handler, fileName string, interactive bool) error {\n+\treturn h.CreateAnomalyDetector(fileName, interactive)\n+}\n+\n+//GenerateAnomalyDetector creates detector based on file configurations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxODUxMA=="}, "originalCommit": {"oid": "adfe6dd467f0c3d282b75a7eff43c575631a0ed6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAzOTM2OnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozODowNVrOG7uydA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo0MDowMVrOG7yc_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTc0OA==", "bodyText": "How about print all existing profile names as well? So user don't need to guess which name is not used.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465285748", "createdAt": "2020-08-04T19:38:05Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzOTcyNQ==", "bodyText": "They can use list command to get profile names. Do you still think that providing all names will be good for UX?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465339725", "createdAt": "2020-08-04T21:26:16Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTc0OA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTc5MQ==", "bodyText": "Cool. Let's keep it as is.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465345791", "createdAt": "2020-08-04T21:40:01Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTc0OA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA1NDM4OnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Mjo0OVrOG7u7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoxMDozOFrOG70ivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODEzNg==", "bodyText": "How about we abstract this as validate func and pass it into getUserInput ? So it's flexible to support more parameter's validation logic in future. As currently we have only one simple validation, don't need to make it too complicated currently. Add some todo is fine. It's up to you.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465288136", "createdAt": "2020-08-04T19:42:49Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := getUserInput(\"endpoint\", false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := getUserInput(\"user\", false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := getUserInput(\"password\", true)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func isProfileExists(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getUserInputAsText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getUserInputAsMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func getUserInput(name string, mask bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getUserInputAsMaskedText()\n+\t} else {\n+\t\tresponse = getUserInputAsText()\n+\t}\n+\tif len(response) < 1 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MDAyOA==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465380028", "createdAt": "2020-08-04T23:10:38Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := getUserInput(\"endpoint\", false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := getUserInput(\"user\", false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := getUserInput(\"password\", true)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func isProfileExists(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getUserInputAsText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getUserInputAsMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func getUserInput(name string, mask bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getUserInputAsMaskedText()\n+\t} else {\n+\t\tresponse = getUserInputAsText()\n+\t}\n+\tif len(response) < 1 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODEzNg=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA3MDMzOnYy", "diffSide": "RIGHT", "path": "cli/cmd/profile.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Nzo0NVrOG7vFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToyNDo1NFrOG7yC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MDU5NQ==", "bodyText": "Not so efficient to run isProfileExists  for every profile name, which will getProfile and do iteration to check if name exists. How about read all profiles, construct map (key: profile name, value: profile), then remove deleted profiles ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465290595", "createdAt": "2020-08-04T19:47:45Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := getUserInput(\"endpoint\", false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := getUserInput(\"user\", false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := getUserInput(\"password\", true)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func isProfileExists(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getUserInputAsText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getUserInputAsMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func getUserInput(name string, mask bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getUserInputAsMaskedText()\n+\t} else {\n+\t\tresponse = getUserInputAsText()\n+\t}\n+\tif len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn getUserInput(name, mask)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar existingProfileNames []string\n+\tfor _, name := range names {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzOTExNQ==", "bodyText": "ACK.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465339115", "createdAt": "2020-08-04T21:24:54Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/profile.go", "diffHunk": "@@ -0,0 +1,360 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"errors\"\n+\t\"esad/internal/client\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"fmt\"\n+\t\"github.com/mitchellh/mapstructure\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/spf13/viper\"\n+\t\"golang.org/x/crypto/ssh/terminal\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"text/tabwriter\"\n+)\n+\n+const (\n+\tprofileBaseCmdName      = \"profile\"\n+\tcreateNewProfileCmdName = \"create\"\n+\tdeleteNewProfileCmdName = \"delete\"\n+\tlistProfileCmdName      = \"list\"\n+\tesadProfile             = \"ESAD_PROFILE\"\n+)\n+\n+var profilesCmd = &cobra.Command{\n+\tUse:   profileBaseCmdName + \" [flags] [command] [sub command]\",\n+\tShort: \"profile is a collection of settings and credentials that you can apply to an esad command\",\n+\tLong: `\t   A named profile is a collection of settings and credentials that you can apply to an ESAD command. \n+           When you specify a profile to run a command, the settings and credentials are used to run that command. \n+           You can specify a profile in an environment variable (ESAD_PROFILE) which essentially acts as the default profile for commands if default doesn't exists.\n+           The ESAD CLI supports using any of multiple named profiles that are stored in the config and credentials files.`,\n+}\n+\n+var createProfilesCmd = &cobra.Command{\n+\tUse:   createNewProfileCmdName,\n+\tShort: \"Create new named profile\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tcreateProfile()\n+\t},\n+}\n+\n+var deleteProfileCmd = &cobra.Command{\n+\tUse:   deleteNewProfileCmdName + \" [list of profile names to be deleted]\",\n+\tShort: \"Delete named profiles\",\n+\tLong:  `Delete profile permanently from configuration files`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tdeleteProfiles(args)\n+\t},\n+}\n+\n+var listProfilesCmd = &cobra.Command{\n+\tUse:   listProfileCmdName,\n+\tShort: \"lists named profiles\",\n+\tLong:  `A named profile is a collection of settings and credentials that you can apply to an ESAD command.`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tdisplayProfiles()\n+\t},\n+}\n+\n+func displayProfiles() {\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load config due to \", err)\n+\t\treturn\n+\t}\n+\tconst padding = 3\n+\tw := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.AlignRight)\n+\tfmt.Fprintln(w, \"Name\\t\\tUserName\\t\\tEndpoint-url\\t\")\n+\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", \"----\", \"--------\", \"------------\")\n+\tfor _, profile := range config.Profiles {\n+\t\tfmt.Fprintf(w, \"%s\\t\\t%s\\t\\t%s\\t\\n\", profile.Name, profile.Username, profile.Endpoint)\n+\t}\n+\tw.Flush()\n+\n+}\n+\n+func init() {\n+\tprofilesCmd.AddCommand(createProfilesCmd)\n+\tprofilesCmd.AddCommand(deleteProfileCmd)\n+\tesadCmd.AddCommand(profilesCmd)\n+\tprofilesCmd.AddCommand(listProfilesCmd)\n+\n+}\n+\n+func createProfile() {\n+\tvar name string\n+\tfor {\n+\t\tfmt.Printf(\"Enter profile's name: \")\n+\t\tname = getUserInput(\"profile's name\", false)\n+\t\tif !isProfileExists(name) {\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Println(\"profile\", name, \"already exists.\")\n+\t}\n+\tfmt.Printf(\"ES Anomaly Detection Endpoint: \")\n+\tendpoint := getUserInput(\"endpoint\", false)\n+\tfmt.Printf(\"ES Anomaly Detection User: \")\n+\tuser := getUserInput(\"user\", false)\n+\tfmt.Printf(\"ES Anomaly Detection Password: \")\n+\tpassword := getUserInput(\"password\", true)\n+\tprofile := entity.Profile{\n+\t\tName:     name,\n+\t\tEndpoint: endpoint,\n+\t\tUsername: user,\n+\t\tPassword: password,\n+\t}\n+\tconfig := &entity.Configuration{\n+\t\tProfiles: []entity.Profile{},\n+\t}\n+\terr := mapstructure.Decode(viper.AllSettings(), config)\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to load profiles due to \", err)\n+\t}\n+\tconfig.Profiles = append(config.Profiles, profile)\n+\tsaveProfiles(config.Profiles)\n+}\n+\n+func saveProfiles(profiles []entity.Profile) {\n+\tviper.Set(\"profiles\", profiles)\n+\terr := viper.WriteConfig()\n+\tif err == nil {\n+\t\treturn\n+\t}\n+\terr = viper.SafeWriteConfig()\n+\tif err != nil {\n+\t\tfmt.Println(\"failed to save profile due to \", err)\n+\t}\n+}\n+\n+func isProfileExists(name string) bool {\n+\tprofiles := getProfiles()\n+\tfor _, profile := range profiles {\n+\t\tif profile.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func getUserInputAsText() string {\n+\tvar response string\n+\t_, err := fmt.Scanln(&response)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\treturn strings.TrimSpace(response)\n+}\n+\n+func getUserInputAsMaskedText() string {\n+\tmaskedValue, err := terminal.ReadPassword(0)\n+\tif err != nil {\n+\t\tfmt.Println(err)\n+\t\tos.Exit(1)\n+\t}\n+\tfmt.Println()\n+\treturn fmt.Sprintf(\"%s\", maskedValue)\n+}\n+\n+func getUserInput(name string, mask bool) string {\n+\n+\tvar response string\n+\tif mask {\n+\t\tresponse = getUserInputAsMaskedText()\n+\t} else {\n+\t\tresponse = getUserInputAsText()\n+\t}\n+\tif len(response) < 1 {\n+\t\tfmt.Printf(\"value cannot be empty. Please enter non-empty value for %s: \", name)\n+\t\treturn getUserInput(name, mask)\n+\t}\n+\treturn response\n+}\n+\n+func deleteProfiles(names []string) {\n+\n+\tvar existingProfileNames []string\n+\tfor _, name := range names {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MDU5NQ=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA4MTU3OnYy", "diffSide": "RIGHT", "path": "cli/cmd/start_stop.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1MToyNFrOG7vMYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToyNjozM1rOG7yFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MjM4Nw==", "bodyText": "Wrong comment?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465292387", "createdAt": "2020-08-04T19:51:24Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODIwNA==", "bodyText": "Yeah. I removed it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465298204", "createdAt": "2020-08-04T20:02:42Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MjM4Nw=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzOTg1NA==", "bodyText": "Yeah. I removed it now.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465339854", "createdAt": "2020-08-04T21:26:33Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MjM4Nw=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA4NTA2OnYy", "diffSide": "RIGHT", "path": "cli/cmd/start_stop.go", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1MjoyNVrOG7vOkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoxMDoyM1rOG70iXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Mjk0NA==", "bodyText": "Missing comment ? How about add comments for every command?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465292944", "createdAt": "2020-08-04T19:52:25Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MDI1Nw==", "bodyText": "Typically in go, comment is required for exported variables or functions. Here we are not exporting stopCmd. What do you think?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465340257", "createdAt": "2020-08-04T21:27:25Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Mjk0NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MzE1NQ==", "bodyText": "Comments can help others include ourselves to understand code quickly. I think we should add some basic description for these commands like what the command does, what's the input/output, potential exceptions. There are already some description for this command for line 47-48. If you don't like too much comment, how about make line48 more accurate as \"Stops detectors based on detector id or detector name pattern, ....\"", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465353155", "createdAt": "2020-08-04T21:57:02Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Mjk0NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTkzNQ==", "bodyText": "Got it. I added comments and updated help as well.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465379935", "createdAt": "2020-08-04T23:10:23Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+// createCmd represents the create command\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Mjk0NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjEwNDc0OnYy", "diffSide": "RIGHT", "path": "cli/internal/mapper/ad/ad.go", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1ODozNVrOG7vatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowMDo0M1rOG70WGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjA1NA==", "bodyText": "We only support minutes on AD Kibana. Should we support more unit options in AD CLI? If user use \"Hours\" to create index with CLI, then AD Kibana may not show it correctly.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465296054", "createdAt": "2020-08-04T19:58:35Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTE2MQ==", "bodyText": "Now, create command fails with response \"Hours is not supported\". In my opinion this is more as restriction in backend than frontend. What do you think? Do we plan to support this in future? if so then having this will have old clients to use this format.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465341161", "createdAt": "2020-08-04T21:29:24Z", "author": {"login": "VijayanB"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjA1NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0Mzc1OQ==", "bodyText": "Currently we have no plan to support other unit options. How about we support only minutes here to keep consistent with AD Kibana (support minutes only) and backend (supports minutes/seconds, code).", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465343759", "createdAt": "2020-08-04T21:35:22Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjA1NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3Njc5Mw==", "bodyText": "Sounds good. Will keep only minutes and will raise error for other cases", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465376793", "createdAt": "2020-08-04T23:00:43Z", "author": {"login": "VijayanB"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjA1NA=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjEwODgxOnYy", "diffSide": "RIGHT", "path": "cli/internal/mapper/ad/ad.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1OTo1MFrOG7vdUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTozMDo0M1rOG7yNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjcyMg==", "bodyText": "minor: typo, feautes  -> features", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465296722", "createdAt": "2020-08-04T19:59:50Z", "author": {"login": "ylwu-amzn"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {\n+\n+\t//extract last character\n+\tunit := strings.ToLower(request[len(request)-1:])\n+\tstringToUnitMap := make(map[string]string)\n+\tstringToUnitMap[\"s\"] = \"Seconds\"\n+\tstringToUnitMap[\"m\"] = \"Minutes\"\n+\tstringToUnitMap[\"h\"] = \"Hours\"\n+\tstringToUnitMap[\"w\"] = \"Weeks\"\n+\tstringToUnitMap[\"d\"] = \"Days\"\n+\tif val, ok := stringToUnitMap[unit]; ok {\n+\t\treturn mapper.StringToStringPtr(val), nil\n+\t}\n+\treturn nil, fmt.Errorf(\"invlaid unit: '%v' in %v\", unit, request)\n+}\n+\n+func getDuration(request string) (*int32, error) {\n+\t//extract last but one character\n+\tduration, err := strconv.Atoi(request[:len(request)-1])\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"invlaid duration: %v, due to {%v}\", request, err)\n+\t}\n+\tif duration < 0 {\n+\t\treturn nil, fmt.Errorf(\"duration must be positive integer\")\n+\t}\n+\treturn mapper.IntToInt32Ptr(duration)\n+}\n+\n+func mapToInterval(request string) (*ad.Interval, error) {\n+\tif len(request) < 2 {\n+\t\treturn nil, fmt.Errorf(\"invalid format: %s\", request)\n+\t}\n+\tduration, err := getDuration(request)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tunit, err := getUnit(request)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &ad.Interval{\n+\t\tPeriod: ad.Period{\n+\t\t\tDuration: mapper.Int32PtrToInt32(duration),\n+\t\t\tUnit:     mapper.StringPtrToString(unit),\n+\t\t},\n+\t}, nil\n+}\n+\n+//MapToCreateDetector maps to CreateDetector\n+func MapToCreateDetector(request ad.CreateDetectorRequest) (*ad.CreateDetector, error) {\n+\n+\tvar features []ad.Feature\n+\terr := validateFeatureLimit(request.Features)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tfor _, f := range request.Features {\n+\t\tftr, err := mapToFeature(f)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfeatures = append(features, ftr...)\n+\t}\n+\n+\tinterval, err := mapToInterval(request.Interval)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdelay, err := mapToInterval(request.Delay)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &ad.CreateDetector{\n+\t\tName:        request.Name,\n+\t\tDescription: request.Description,\n+\t\tTimeField:   request.TimeField,\n+\t\tIndex:       request.Index,\n+\t\tFeatures:    features,\n+\t\tFilter:      request.Filter,\n+\t\tInterval:    *interval,\n+\t\tDelay:       *delay,\n+\t}, nil\n+}\n+\n+func validateFeatureLimit(features []ad.FeatureRequest) error {\n+\tfeatureCount := 0\n+\tfor _, f := range features {\n+\t\tfeatureCount += len(f.AggregationType) * len(f.Field)\n+\t}\n+\tif featureCount == 0 || featureCount > featureCountLimit {\n+\t\treturn fmt.Errorf(\"trying to create %d feautes, only upto %d features are allowed\", featureCount, featureCountLimit)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTc3NA==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465341774", "createdAt": "2020-08-04T21:30:43Z", "author": {"login": "VijayanB"}, "path": "cli/internal/mapper/ad/ad.go", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package ad\n+\n+import (\n+\t\"encoding/json\"\n+\t\"esad/internal/entity/ad\"\n+\t\"esad/internal/mapper\"\n+\t\"fmt\"\n+\t\"regexp\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+const featureCountLimit = 5\n+\n+func getFeatureAggregationQuery(name string, agg string, field string) ([]byte, error) {\n+\n+\tuserTypeToESType := make(map[string]string)\n+\tuserTypeToESType[\"average\"] = \"avg\"\n+\tuserTypeToESType[\"count\"] = \"value_count\"\n+\tuserTypeToESType[\"sum\"] = \"sum\"\n+\tuserTypeToESType[\"min\"] = \"min\"\n+\tuserTypeToESType[\"max\"] = \"max\"\n+\tval, ok := userTypeToESType[strings.ToLower(agg)]\n+\tif !ok {\n+\t\tvar allowedTypes []string\n+\t\tfor key := range userTypeToESType {\n+\t\t\tallowedTypes = append(allowedTypes, key)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"invlaid aggeration type: '%s', only allowed types are: %s \", agg, strings.Join(allowedTypes, \",\"))\n+\t}\n+\tagg = val\n+\treturn []byte(fmt.Sprintf(`{\n+        \t\t\t\"%s\": {\n+          \t\t\t\t\"%s\": {\n+            \t\t\t\t\"field\": \"%s\"\n+\t\t\t\t\t\t}\n+        \t\t\t}\n+      \t\t\t}`, name, agg, field)), nil\n+}\n+func mapToFeature(r ad.FeatureRequest) ([]ad.Feature, error) {\n+\tvar features []ad.Feature\n+\tfor _, t := range r.AggregationType {\n+\t\tfor _, f := range r.Field {\n+\t\t\tname := fmt.Sprintf(\"%s_%s\", t, f)\n+\t\t\tquery, err := getFeatureAggregationQuery(name, t, f)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tfeatures = append(features, ad.Feature{\n+\t\t\t\tName:             name,\n+\t\t\t\tEnabled:          r.Enabled,\n+\t\t\t\tAggregationQuery: query,\n+\t\t\t})\n+\t\t}\n+\t}\n+\treturn features, nil\n+}\n+\n+func getUnit(request string) (*string, error) {\n+\n+\t//extract last character\n+\tunit := strings.ToLower(request[len(request)-1:])\n+\tstringToUnitMap := make(map[string]string)\n+\tstringToUnitMap[\"s\"] = \"Seconds\"\n+\tstringToUnitMap[\"m\"] = \"Minutes\"\n+\tstringToUnitMap[\"h\"] = \"Hours\"\n+\tstringToUnitMap[\"w\"] = \"Weeks\"\n+\tstringToUnitMap[\"d\"] = \"Days\"\n+\tif val, ok := stringToUnitMap[unit]; ok {\n+\t\treturn mapper.StringToStringPtr(val), nil\n+\t}\n+\treturn nil, fmt.Errorf(\"invlaid unit: '%v' in %v\", unit, request)\n+}\n+\n+func getDuration(request string) (*int32, error) {\n+\t//extract last but one character\n+\tduration, err := strconv.Atoi(request[:len(request)-1])\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"invlaid duration: %v, due to {%v}\", request, err)\n+\t}\n+\tif duration < 0 {\n+\t\treturn nil, fmt.Errorf(\"duration must be positive integer\")\n+\t}\n+\treturn mapper.IntToInt32Ptr(duration)\n+}\n+\n+func mapToInterval(request string) (*ad.Interval, error) {\n+\tif len(request) < 2 {\n+\t\treturn nil, fmt.Errorf(\"invalid format: %s\", request)\n+\t}\n+\tduration, err := getDuration(request)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tunit, err := getUnit(request)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &ad.Interval{\n+\t\tPeriod: ad.Period{\n+\t\t\tDuration: mapper.Int32PtrToInt32(duration),\n+\t\t\tUnit:     mapper.StringPtrToString(unit),\n+\t\t},\n+\t}, nil\n+}\n+\n+//MapToCreateDetector maps to CreateDetector\n+func MapToCreateDetector(request ad.CreateDetectorRequest) (*ad.CreateDetector, error) {\n+\n+\tvar features []ad.Feature\n+\terr := validateFeatureLimit(request.Features)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tfor _, f := range request.Features {\n+\t\tftr, err := mapToFeature(f)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfeatures = append(features, ftr...)\n+\t}\n+\n+\tinterval, err := mapToInterval(request.Interval)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdelay, err := mapToInterval(request.Delay)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &ad.CreateDetector{\n+\t\tName:        request.Name,\n+\t\tDescription: request.Description,\n+\t\tTimeField:   request.TimeField,\n+\t\tIndex:       request.Index,\n+\t\tFeatures:    features,\n+\t\tFilter:      request.Filter,\n+\t\tInterval:    *interval,\n+\t\tDelay:       *delay,\n+\t}, nil\n+}\n+\n+func validateFeatureLimit(features []ad.FeatureRequest) error {\n+\tfeatureCount := 0\n+\tfor _, f := range features {\n+\t\tfeatureCount += len(f.AggregationType) * len(f.Field)\n+\t}\n+\tif featureCount == 0 || featureCount > featureCountLimit {\n+\t\treturn fmt.Errorf(\"trying to create %d feautes, only upto %d features are allowed\", featureCount, featureCountLimit)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjcyMg=="}, "originalCommit": {"oid": "9b805da939d62fb7243a4a9ee01792ed48b4a50f"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjQ2ODY3OnYy", "diffSide": "RIGHT", "path": "cli/cmd/start_stop.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo1ODozMFrOG7y76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowOTowOFrOG70gyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MzcwNQ==", "bodyText": "How about rename as \"StopAnomalyDetectorByNamePattern\" considering this method \"StopAnomalyDetectorByID\"", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465353705", "createdAt": "2020-08-04T21:58:30Z", "author": {"login": "ylwu-amzn"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{\n+\tUse:   commandStop + \" [flags] [list of detectors]\",\n+\tShort: \"Stop detectors\",\n+\tLong:  `Stops detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StopAnomalyDetector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bec3bd904b8e43a1edc4bea9624893f800e5572"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTUzMA==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/196#discussion_r465379530", "createdAt": "2020-08-04T23:09:08Z", "author": {"login": "VijayanB"}, "path": "cli/cmd/start_stop.go", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"esad/internal/client\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandStart = \"start\"\n+\tcommandStop  = \"stop\"\n+)\n+\n+var startCmd = &cobra.Command{\n+\tUse:   commandStart + \" [flags] [list of detectors]\",\n+\tShort: \"Start detectors\",\n+\tLong:  `Start detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StartAnomalyDetector\n+\t\tif idStatus {\n+\t\t\taction = ad.StartAnomalyDetectorByID\n+\t\t}\n+\t\terr := execute(action, args)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(commandStart, \"command failed\")\n+\t\t\tfmt.Println(\"Reason:\", err)\n+\t\t}\n+\t},\n+}\n+\n+var stopCmd = &cobra.Command{\n+\tUse:   commandStop + \" [flags] [list of detectors]\",\n+\tShort: \"Stop detectors\",\n+\tLong:  `Stops detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\taction := ad.StopAnomalyDetector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MzcwNQ=="}, "originalCommit": {"oid": "2bec3bd904b8e43a1edc4bea9624893f800e5572"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2904, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}