{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDM0NTc0", "number": 65, "title": "Fix empty preview result due to insufficient sample", "bodyText": "Issue #, if available:\n#64\nDescription of changes:\nPreview does not use all data in the given time range as it is costly. Previously, we sample data by issuing multiple queries on shard 0 data. The purpose of the shard 0 query restriction is to reduce system costs. The nab_art_daily_jumpsup data set has one doc in each interval, and the doc is spread out in 5 shards. Even though we issue 360 queries, we only get 70~80 samples back by querying shard 0. Together with interpolated data points, the preview run misses significant portions of data required to train models (400 is the minimum) and thus returns empty preview results. This PR fixes the issue by removing the shard 0 search restriction.\nPreviously, the preview API issues multiple queries encapsulated in a multisearch request (the request can contain 360 search queries at most). The same result could be obtained via a date range query with multiple range buckets. We show a date range query is 2~10 times faster than a multisearch request (#63). This PR replaces the multisearch request with a date range query.\nThis PR also fixes a bug in query generation. We generate aggregation query twice: once with filter query, once separately.\nThis PR also removes unused field scriptService in SearchFeatureDao.\nTesting done:\n\nPrevious preview unit tests pass.\nManually verified date range queries results are correctly processed by cross checking intermediate logs.\nManually verified preview results with multisearch (removing shard 0 search restriction) and date range implementation are the same\nManually verified preview don't show empty results with the nab_art_daily_jumpsup data set after the fix\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-16T07:12:46Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65", "merged": true, "mergeCommit": {"oid": "091c3676271793708b9228b29b32132239d7fb6f"}, "closed": true, "closedAt": "2020-03-21T02:52:52Z", "author": {"login": "kaituo"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOIpL_gH2gAyMzg5MDM0NTc0OmQzYzdmZDQ3M2ZlNzZhOGYwN2Q3MzZiYWIzN2Q4NzVhOWIzNTM3ZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPrx3kAH2gAyMzg5MDM0NTc0OjYzNmE0MDQ1MWFlMDkxYTFhMTA3MWI3MzdjNTkyMGJjNjE0NDY4MGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d3c7fd473fe76a8f07d736bab37d875a9b3537db", "committedDate": "2020-03-16T07:05:15Z", "message": "Fix empty preview result due to insufficient sample\n\nPreview does not use all data in the given time range as it is costly. Previously, we sample data by issuing multiple queries on shard 0 data. The purpose of the shard 0 query restriction is to reduce system costs. The nab_art_daily_jumpsup data set has one doc in each interval, and the doc is spread out in 5 shards. Even though we issue 360 queries, we only get 70~80 samples back by querying shard 0. Together with interpolated data points, the preview run misses significant portions of data required to train models (400 is the minimum) and thus returns empty preview results. This PR fixes the issue by removing the shard 0 search restriction.\n\nPreviously, the preview API issues multiple queries encapsulated in a multisearch request (the request can contain 360 search queries at most). The same result could be obtained via a date range query with multiple range buckets. We show a date range query is 2~10 times faster than a multisearch request (https://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/63). This PR replaces the multisearch request with a date range query.\n\nThis PR also removes unused field scriptService in SearchFeatureDao.\n\nTesting done:\n- Previous preview unit tests pass.\n- Manually verified date range queries results are correctly processed by cross checking intermediate logs.\n- Manually verified preview results with multisearch and date range implementation are the same.\n- Manually verified preview don't show empty results with the nab_art_daily_jumpsup data set with the fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjM4NjY0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-376238664", "createdAt": "2020-03-17T17:11:42Z", "commit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxMTo0MlrOF3l_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxODoyOVrOF3mPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODM2Mw==", "bodyText": "Minor. FEATURE_SAMPLE_PREFERENCE can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393838363", "createdAt": "2020-03-17T17:11:42Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +200,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDczNA==", "bodyText": "Minor. Some parts might be refactored with existing response parsing logic.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393840734", "createdAt": "2020-03-17T17:15:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference\n+    ) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private Optional<double[]> parseBucket(InternalDateRange.Bucket bucket, List<String> featureIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjUwOA==", "bodyText": "Minor. Since this parameter is not used, it can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393842508", "createdAt": "2020-03-17T17:18:29Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "committedDate": "2020-03-18T05:33:45Z", "message": "Remove unused field and parameter, refacor for code reuse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU2MjIw", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-377056220", "createdAt": "2020-03-18T16:54:07Z", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NDowN1rOF4ONcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NDowN1rOF4ONcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzM5Mw==", "bodyText": "log detector.getDetectorId()", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394497393", "createdAt": "2020-03-18T16:54:07Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYxMTU0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-377061154", "createdAt": "2020-03-18T16:59:51Z", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1MVrOF4Oclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1MVrOF4Oclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA==", "bodyText": "Why wrap IOException with IllegalStateException?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394501270", "createdAt": "2020-03-18T16:59:51Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDY0Mzcx", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-377064371", "createdAt": "2020-03-18T17:03:44Z", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMzo0NFrOF4Om1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMzo0NFrOF4Om1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA==", "bodyText": "Is it possible ES returns different date range class other than InternalDateRange for this case?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394503894", "createdAt": "2020-03-18T17:03:44Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTEzNDQ2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-377113446", "createdAt": "2020-03-18T18:05:00Z", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNTowMFrOF4Q98g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNTowMFrOF4Q98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MjU3OA==", "bodyText": "Should we do return here? Otherwise it will continue to line 202", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394542578", "createdAt": "2020-03-18T18:05:00Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTE0Njk4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-377114698", "createdAt": "2020-03-18T18:06:45Z", "commit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNjo0NVrOF4RByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNjo0NVrOF4RByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzU2MA==", "bodyText": "same as Yaliang's comment.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394543560", "createdAt": "2020-03-18T18:06:45Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/778f934f9ccb737bcf6ab0b058705cb0236a4aff", "committedDate": "2020-03-19T01:31:09Z", "message": "Fix bug and log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c58329cb227d3927856e3720f7ca67ba8afc645c", "committedDate": "2020-03-20T05:15:39Z", "message": "Unwrap IOException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzA1NTIy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-378705522", "createdAt": "2020-03-20T18:05:33Z", "commit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzQ1Nzg3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-378745787", "createdAt": "2020-03-20T19:07:32Z", "commit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowNzozMlrOF5gFSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowNzozMlrOF5gFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODc5Mw==", "bodyText": "question: why send OK response if there is an exception while running AD?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395838793", "createdAt": "2020-03-20T19:07:32Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,23 +184,24 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                anomalyDetectorRunner\n+                    .executeDetector(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n+                        XContentBuilder builder = channel\n+                            .newBuilder()\n+                            .startObject()\n+                            .field(ANOMALY_RESULT, anomalyResult)\n+                            .field(ANOMALY_DETECTOR, detector)\n+                            .endObject();\n                         channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                    }, exception -> {\n+                        logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+                        try {\n+                            XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzQ3Mjk2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#pullrequestreview-378747296", "createdAt": "2020-03-20T19:10:02Z", "commit": {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636a40451ae091a1a1071b737c5920bc6144680e", "author": {"user": {"login": "kaituo", "name": "Kaituo Li"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/636a40451ae091a1a1071b737c5920bc6144680e", "committedDate": "2020-03-21T02:35:20Z", "message": "Fix rest status during exception"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1638, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}