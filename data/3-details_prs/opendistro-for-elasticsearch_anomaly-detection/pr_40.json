{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzQ1MjU2", "number": 40, "title": "Adding negative cache to throttle extra request https://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/33", "bodyText": "Description:\nAdding negative cache to throttle extra request #33\nUpdated on Feb 05:\n\nRe-structured the code for a better dependency injection\nNow there is a new class Throttler handle the negative cache stuff.\nClientUtil will inject the dependency of Throttler instead of ADStateManager.\n\nTest:\n\n./gradlew build\nCreated a single node domain with NAB data. Created one AD detector and trigger the run. Verified the negative cache work as expected.", "createdAt": "2020-01-30T23:51:28Z", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40", "merged": true, "mergeCommit": {"oid": "b8ea1a295abcabd6c952cb09ebce5049b3511c7c"}, "closed": true, "closedAt": "2020-02-24T23:48:40Z", "author": {"login": "zhanghg08"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_fC8lAH2gAyMzY5MzQ1MjU2OjlhYTllNDY5MWYyNmYyODZlNjJlMjdlOTQ4YzI0YTQxNDA0YTcxNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHmZE0AFqTM2Mzc4MTcxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9aa9e4691f26f286e62e27e948c24a41404a7171", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/9aa9e4691f26f286e62e27e948c24a41404a7171", "committedDate": "2020-01-30T18:42:26Z", "message": "Revert \"merge changes from alpha branch: change setting name and fix stop AD request\"\n\nThis reverts commit 363daa6af5bbf416311ed7860c489a2848584d05, reversing\nchanges made to caebb97d91a87369aa33f9fc90d4b87eba12eb76.\n\nThis also reverts commit ff190fa038a71564adbf9aa86ca406123096c026"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/bc6a763172f7e1162125f35b445b81b9916204b8", "committedDate": "2020-01-30T23:44:32Z", "message": "Adding negative cache to AD\nhttps://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/33"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjkxOTU1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-351691955", "createdAt": "2020-01-31T18:27:51Z", "commit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyNzo1MlrOFkT_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0OToyNFrOFkUkLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMDUwNQ==", "bodyText": "Question. From #33 , query cannot be aborted. The comment indicates the opposite. Is it confusing?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373620505", "createdAt": "2020-01-31T18:27:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/cluster/HourlyCron.java", "diffHunk": "@@ -43,6 +43,8 @@ public HourlyCron(ClusterService clusterService, Client client) {\n     public void run() {\n         DiscoveryNode[] dataNodes = clusterService.state().nodes().getDataNodes().values().toArray(DiscoveryNode.class);\n \n+        // we also add the cancel query function here based on query text from the negative cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMTQ3MQ==", "bodyText": "The added parameter should be a dependency injected rather than passed all the way down the stack.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373621471", "createdAt": "2020-01-31T18:29:58Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -115,15 +116,16 @@ public FeatureManager(\n      * @param detector anomaly detector for which the features are returned\n      * @param startTime start time of the data point in epoch milliseconds\n      * @param endTime end time of the data point in epoch milliseconds\n+     * @param stateManager ADStateManager\n      * @return unprocessed features and processed features for the current data point\n      */\n     @Deprecated\n-    public SinglePointFeatures getCurrentFeatures(AnomalyDetector detector, long startTime, long endTime) {\n+    public SinglePointFeatures getCurrentFeatures(AnomalyDetector detector, long startTime, long endTime, ADStateManager stateManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMTg4MA==", "bodyText": "The needed dependency can be injected in this class.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373621880", "createdAt": "2020-01-31T18:31:00Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -114,18 +115,24 @@ public SearchFeatureDao(\n     }\n \n     /**\n-     * Gets features for the given time period.\n+     * Gets features for the given time period. This function also add given detector to negative cache before sending es request.\n+     * Once we get response/exception within timeout, we treat this request as complete and clear the negative cache.\n+     * Otherwise this detector entry remain in the negative to reject further request.\n      *\n      * @param detector info about indices, documents, feature query\n      * @param startTime epoch milliseconds at the beginning of the period\n      * @param endTime epoch milliseconds at the end of the period\n+     * @param stateManager ADStateManager\n      * @throws IllegalStateException when unexpected failures happen\n      * @return features from search results, empty when no data found\n      */\n-    public Optional<double[]> getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime) {\n+    public Optional<double[]> getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime, ADStateManager stateManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjY4NQ==", "bodyText": "Minor. This method can be simplified to this line.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373626685", "createdAt": "2020-01-31T18:42:03Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyODU3MQ==", "bodyText": "Minor. This can be assumed to be unlikely. If this is a real concern that must be addressed, the proper behavior to expect is to throw an exception.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373628571", "createdAt": "2020-01-31T18:46:09Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTU3Mw==", "bodyText": "Question. Is put more expected for the client? Or, the insert call returns but the entry is still not updated. If that's by design, the documentation should make it clear.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373629573", "createdAt": "2020-01-31T18:48:22Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     * @param searchRequest ES search request\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, SearchRequest searchRequest) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.putIfAbsent(detector.getDetectorId(), new SimpleEntry<>(searchRequest, clock.instant()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTk5OA==", "bodyText": "Minor. Map::remove should work.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373629998", "createdAt": "2020-01-31T18:49:24Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     * @param searchRequest ES search request\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, SearchRequest searchRequest) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.putIfAbsent(detector.getDetectorId(), new SimpleEntry<>(searchRequest, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     */\n+    public void clearFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.keySet().removeIf(key -> key.equals(detector.getDetectorId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODIxNTc0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-351821574", "createdAt": "2020-01-31T22:49:25Z", "commit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjU2NjIy", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-352656622", "createdAt": "2020-02-04T00:29:25Z", "commit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoyOToyNVrOFlEpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoyOToyNVrOFlEpOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNzcyMg==", "bodyText": "Client can't distinguish this case with \"No data in current detection window\"(line 295) as both return empty result. How about we throw an exception like line243", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374417722", "createdAt": "2020-02-04T00:29:25Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -249,6 +251,12 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 return;\n             }\n             AnomalyDetector anomalyDetector = detector.get();\n+            Optional<Entry<SearchRequest, Instant>> queryEntry = stateManager.getFilteredQuery(anomalyDetector);\n+            if (queryEntry.isPresent()) {\n+                LOG.info(\"There is one query running for detectorId: {}\", anomalyDetector.getDetectorId());\n+                listener.onResponse(new AnomalyResultResponse(Double.NaN, Double.NaN, new ArrayList<FeatureData>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjU4ODE5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-352658819", "createdAt": "2020-02-04T00:36:12Z", "commit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDozNjoxMlrOFlEwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDozNjoxMlrOFlEwIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTQ5MQ==", "bodyText": "If a query stuck for a long time, that will impact AD realtime detection. How about we cancel the stuck/running query and run the new coming query?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374419491", "createdAt": "2020-02-04T00:36:12Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -249,6 +251,12 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 return;\n             }\n             AnomalyDetector anomalyDetector = detector.get();\n+            Optional<Entry<SearchRequest, Instant>> queryEntry = stateManager.getFilteredQuery(anomalyDetector);\n+            if (queryEntry.isPresent()) {\n+                LOG.info(\"There is one query running for detectorId: {}\", anomalyDetector.getDetectorId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a82b22edde7528c1fcb0af681aa712b9cd9cd3e", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/3a82b22edde7528c1fcb0af681aa712b9cd9cd3e", "committedDate": "2020-02-05T18:33:04Z", "message": "Address feedback from Yaliang and Lai"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "committedDate": "2020-02-05T18:50:54Z", "message": "Remove unused data structure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjg1MjA3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-360685207", "createdAt": "2020-02-18T21:27:54Z", "commit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyODoyOFrOFrTDww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0NDo0OVrOFrTi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTM0Nw==", "bodyText": "Minor. The doc is incomplete.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380945347", "createdAt": "2020-02-18T21:28:28Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -209,4 +209,13 @@ public void addPressure(String nodeId) {\n     public void resetBackpressureCounter(String nodeId) {\n         backpressureMuter.remove(nodeId);\n     }\n+\n+    /**\n+     * Check if there is running query on given detector\n+     * @param detector Anomaly Detector\n+     * @return boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NjUzNQ==", "bodyText": "Minor. Adds.\nAlso, use descriptive language instead of prescriptive. See java doc.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380946535", "createdAt": "2020-02-18T21:30:49Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -114,7 +114,9 @@ public SearchFeatureDao(\n     }\n \n     /**\n-     * Gets features for the given time period.\n+     * Gets features for the given time period. This function also add given detector to negative cache before sending es request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzc5Mg==", "bodyText": "What should happen if the detector is already in cache?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380947792", "createdAt": "2020-02-18T21:33:24Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +158,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            throttler.insertFilteredQuery(detector, request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDExMg==", "bodyText": "Minor. The method can be simplified to one line. return throttler.getFilteredQuery(detector).isPresent()", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380950112", "createdAt": "2020-02-18T21:38:06Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +158,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            throttler.insertFilteredQuery(detector, request);\n+            AtomicReference<Response> respReference = new AtomicReference<>();\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector);\n+                respReference.set(response);\n+            }, exception -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector);\n+                LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n+            }), latch));\n+\n+            if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+                throw new ElasticsearchTimeoutException(\"Cannot get response within time limit: \" + request.toString());\n+            }\n+            return Optional.ofNullable(respReference.get());\n+        } catch (InterruptedException e1) {\n+            LOG.error(CommonErrorMessages.WAIT_ERR_MSG);\n+            throw new IllegalStateException(e1);\n+        }\n+    }\n+\n+    /**\n+     * Check if there is running query on given detector\n+     * @param detector Anomaly Detector\n+     * @return boolean\n+     */\n+    public boolean hasRunningQuery(AnomalyDetector detector) {\n+        Optional<Map.Entry<ActionRequest, Instant>> queryEntry = throttler.getFilteredQuery(detector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDI4NQ==", "bodyText": "Minor. The class java doc is missing.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380950285", "createdAt": "2020-02-18T21:38:26Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjkxMw==", "bodyText": "MInor. The whole method can be simplified to this line  return Optional.of(negativeCache.get(detector.getDetectorId()));", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380952913", "createdAt": "2020-02-18T21:43:53Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MzMyNA==", "bodyText": "Minor. The java doc is outdated.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380953324", "createdAt": "2020-02-18T21:44:49Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "committedDate": "2020-02-18T22:17:37Z", "message": "Adding missing java doc and simplify code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzI3NDMz", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-360727433", "createdAt": "2020-02-18T22:41:44Z", "commit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0MTo0NVrOFrVHuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0MTo0NVrOFrVHuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3OTEyOQ==", "bodyText": "Optional.ofNullable", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380979129", "createdAt": "2020-02-18T22:41:45Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -41,15 +44,11 @@ public Throttler(Clock clock) {\n      * @return negative cache value(ActionRequest, Instant)\n      */\n     public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n-        if (negativeCache.containsKey(detector.getDetectorId())) {\n-            return Optional.of(negativeCache.get(detector.getDetectorId()));\n-        }\n-        return Optional.empty();\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae4c59dea02a78b9aec2a1acea45ca85672faab", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fae4c59dea02a78b9aec2a1acea45ca85672faab", "committedDate": "2020-02-19T16:34:51Z", "message": "Address feedback: Optional.ofNullable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTM5OTY3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-361539967", "createdAt": "2020-02-20T00:39:19Z", "commit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDozOToxOVrOFr8wpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo1Nzo1MlrOFr9Fyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyODU4MA==", "bodyText": "Minor. We is prescriptive (giving orders to code), not descriptive (stating what code does).", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381628580", "createdAt": "2020-02-20T00:39:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -115,6 +115,9 @@ public SearchFeatureDao(\n \n     /**\n      * Gets features for the given time period.\n+     * This function also adds given detector to negative cache before sending es request.\n+     * Once we get response/exception within timeout, we treat this request as complete and clear the negative cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMTkzMA==", "bodyText": "This can be a race condition when concurrent threads have finished the check at the higher level and try to execute queries. The method needs to be synchronized.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381631930", "createdAt": "2020-02-20T00:50:27Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +158,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            throttler.insertFilteredQuery(detector, request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzc5Mg=="}, "originalCommit": {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMzY2MQ==", "bodyText": "Minor. Outdated doc.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381633661", "createdAt": "2020-02-20T00:56:26Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+/**\n+ * Utility functions for throttling query.\n+ */\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * @param detector AnomalyDetector\n+     * @param request ActionRequest\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, ActionRequest request) {\n+        negativeCache.put(detector.getDetectorId(), new AbstractMap.SimpleEntry<>(request, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMzk5NA==", "bodyText": "Minor. Why not using Map::remove?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381633994", "createdAt": "2020-02-20T00:57:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+/**\n+ * Utility functions for throttling query.\n+ */\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * @param detector AnomalyDetector\n+     * @param request ActionRequest\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, ActionRequest request) {\n+        negativeCache.put(detector.getDetectorId(), new AbstractMap.SimpleEntry<>(request, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     */\n+    public void clearFilteredQuery(AnomalyDetector detector) {\n+        negativeCache.keySet().removeIf(key -> key.equals(detector.getDetectorId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6a048df327cf67b8b21e85392783ed9409c5b71", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c6a048df327cf67b8b21e85392783ed9409c5b71", "committedDate": "2020-02-20T17:21:16Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcab62ca4184e781c45ed5016a6cd2eaeeba2a92", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fcab62ca4184e781c45ed5016a6cd2eaeeba2a92", "committedDate": "2020-02-20T17:31:06Z", "message": "Merge remote-tracking branch 'upstream/development' into development"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ad7c0fb5c812e67cee3e1c851d32282cb02b25", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f7ad7c0fb5c812e67cee3e1c851d32282cb02b25", "committedDate": "2020-02-20T23:40:35Z", "message": "1) Adding test case for throttler\n2) Adding check when inserting new entry to negative cache."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "committedDate": "2020-02-20T23:44:14Z", "message": "Merge remote-tracking branch 'upstream/development' into development"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzExMDE1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-363711015", "createdAt": "2020-02-24T21:24:23Z", "commit": {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToyNDoyM1rOFtwYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToyNDoyM1rOFtwYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMjkwOA==", "bodyText": "MInor. This exception should be documented for client.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r383522908", "createdAt": "2020-02-24T21:24:23Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +157,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            // if key already exist, reject the request and throws exception\n+            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n+                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n+                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzYzNTE1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-363763515", "createdAt": "2020-02-24T23:01:50Z", "commit": {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzowMTo1MFrOFtzBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzowMTo1MFrOFtzBbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE4OQ==", "bodyText": "If exception happens, should clear negative cache for this detector", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r383566189", "createdAt": "2020-02-24T23:01:50Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +157,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            // if key already exist, reject the request and throws exception\n+            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n+                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n+                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            }\n+            AtomicReference<Response> respReference = new AtomicReference<>();\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector.getDetectorId());\n+                respReference.set(response);\n+            }, exception -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector.getDetectorId());\n+                LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n+            }), latch));\n+\n+            if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+                throw new ElasticsearchTimeoutException(\"Cannot get response within time limit: \" + request.toString());\n+            }\n+            return Optional.ofNullable(respReference.get());\n+        } catch (InterruptedException e1) {\n+            LOG.error(CommonErrorMessages.WAIT_ERR_MSG);\n+            throw new IllegalStateException(e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95f389255c0d487162bae63747dd89e987c46ff3", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/95f389255c0d487162bae63747dd89e987c46ff3", "committedDate": "2020-02-24T23:20:06Z", "message": "Add additional clean cache step."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d086d120dcc1f0fb02e9bd131cbfe9b9f434c29", "author": {"user": {"login": "zhanghg08", "name": "Hanguang Zhang"}}, "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1d086d120dcc1f0fb02e9bd131cbfe9b9f434c29", "committedDate": "2020-02-24T23:37:20Z", "message": "Add javadoc for EndRunException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzgxNzE3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#pullrequestreview-363781717", "createdAt": "2020-02-24T23:47:20Z", "commit": {"oid": "1d086d120dcc1f0fb02e9bd131cbfe9b9f434c29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1611, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}