{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTUzOTMz", "number": 54, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxMjo1NlrODmimng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozNzo1OVrODm0-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzM5NDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxMjo1NlrOF0A_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjo1NzozN1rOF1AFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQ0MQ==", "bodyText": "Would\n\"if (task.getHeaders().get(Task.X_OPAQUE_ID).equals(CommonName.ANOMALY_DETECTOR + \":\" + detectorId))\"\nimproves performance since you might need do this comparison a lot of times if there are a lot of tasks?\nequals is O(n), while contains can be O(n*m) where m is the string to match and n is the string to search.\nSee the implementation of contains (depends on indexOf):\nhttp://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/String.java#l1740", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390086441", "createdAt": "2020-03-10T04:12:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMDI0OQ==", "bodyText": "Thanks for the suggestion, will change it.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391120249", "createdAt": "2020-03-11T16:57:37Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQ0MQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyOTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozODozNFrOF0BTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNDoxMlrOF1BJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTcxMg==", "bodyText": "Return after cancelling since we don't know when the cancel would actually happen?  We might keep piling up new queries when the previous old queries are not cancelled.\nAlso, we need to send InternalFailure not EndRunException.  EndRunException is used for scenarios when we might need to terminate AD job running soon.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390091712", "createdAt": "2020-03-10T04:38:34Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNzc1OQ==", "bodyText": "Agree. Return after cancelling will be more safer. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391137759", "createdAt": "2020-03-11T17:24:12Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTcxMg=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ0ODgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDo1MzozOVrOF0Bfnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzoyMTo0OVrOF12ibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDc1MQ==", "bodyText": "You can add some parameters to speed up task search:\n\ngroup_by=parents: so each group you only need to check header once\nactions=*search: since our queries are searches.  We don't care about write or update.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390094751", "createdAt": "2020-03-10T04:53:39Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NjIxNw==", "bodyText": "Thanks for the advice. For the group_by=parents, it's a little weird. For the api it supports this feature(https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html#_task_grouping). However when it comes to java api, it's not supported as far as I see.\nFor actions=*search, I will added it as \"actions=search\" since I can see some child query has something like \"indices:data/read/search[phase/query]\"", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391196217", "createdAt": "2020-03-11T19:00:30Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDc1MQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxMjM5Ng==", "bodyText": "you meant we need to use \"actions=*search*\", right?  Yes, please do that.  Your current code uses \"*search\".", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r392012396", "createdAt": "2020-03-13T03:21:49Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDc1MQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ4MDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToxNzo1N1rOF0ByMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoyMToyMlrOF1Mi-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTUwNg==", "bodyText": "Is there a unit/integration test for the cancel mechanism?  If not, I strongly suggest we add one.\nYou can add an ESIntegTestCase where we\n\ndefine a SearchOperationListener such that index operations are delayed to simulate long running queries;\ncreate a fake plugin to use listener defined in 1)\nadd AD plugin and the fake plugin together\n... automate what you did on manual testing ..", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390099506", "createdAt": "2020-03-10T05:17:57Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -199,7 +199,7 @@ private static Void initGson() {\n         Settings settings = environment.settings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNDQwOA==", "bodyText": "This is also one of my concern. I noticed we don't have any unit test for clientUtil and tried to add one but it's too complicated. When manual testing, I use similar listener which will delay the search to make up the long running query. Not sure if that can be done in integration test, I will sync up with you offline.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391324408", "createdAt": "2020-03-11T23:21:22Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -199,7 +199,7 @@ private static Void initGson() {\n         Settings settings = environment.settings();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTUwNg=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDIzMTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo0ODoyMlrOF0ccow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowMTowMlrOF1EvcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNjM1NQ==", "bodyText": "Please add more description about cancel request process", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390536355", "createdAt": "2020-03-10T18:48:22Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -162,11 +180,11 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n      * Send a nonblocking request with a timeout and return response. The request will first be put into\n      * the negative cache. Once the request complete, it will be removed from the negative cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NjUyOQ==", "bodyText": "added.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391196529", "createdAt": "2020-03-11T19:01:02Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -162,11 +180,11 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n      * Send a nonblocking request with a timeout and return response. The request will first be put into\n      * the negative cache. Once the request complete, it will be removed from the negative cache.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNjM1NQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI0MDE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1MDozOVrOF0ciLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoxODoyOFrOF1A7Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNzc3Mw==", "bodyText": "Remove empty line", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390537773", "createdAt": "2020-03-10T18:50:39Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);\n                 consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n                     // clear negative cache\n-                    throttler.clearFilteredQuery(detector.getDetectorId());\n+                    throttler.clearFilteredQuery(detectorId);\n                     respReference.set(response);\n                 }, exception -> {\n                     // clear negative cache\n-                    throttler.clearFilteredQuery(detector.getDetectorId());\n+                    throttler.clearFilteredQuery(detectorId);\n                     LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n                 }), latch));\n             } catch (Exception e) {\n-                LOG.error(\"Failed to process the request for detectorId: {}.\", detector.getDetectorId());\n-                throttler.clearFilteredQuery(detector.getDetectorId());\n+                LOG.error(\"Failed to process the request for detectorId: {}.\", detectorId);\n+                throttler.clearFilteredQuery(detectorId);\n                 throw e;\n             }\n \n             if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzMzk4Nw==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391133987", "createdAt": "2020-03-11T17:18:28Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);\n                 consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n                     // clear negative cache\n-                    throttler.clearFilteredQuery(detector.getDetectorId());\n+                    throttler.clearFilteredQuery(detectorId);\n                     respReference.set(response);\n                 }, exception -> {\n                     // clear negative cache\n-                    throttler.clearFilteredQuery(detector.getDetectorId());\n+                    throttler.clearFilteredQuery(detectorId);\n                     LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n                 }), latch));\n             } catch (Exception e) {\n-                LOG.error(\"Failed to process the request for detectorId: {}.\", detector.getDetectorId());\n-                throttler.clearFilteredQuery(detector.getDetectorId());\n+                LOG.error(\"Failed to process the request for detectorId: {}.\", detectorId);\n+                throttler.clearFilteredQuery(detectorId);\n                 throw e;\n             }\n \n             if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNzc3Mw=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI2NTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1NzoxOVrOF0cx2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo0MToyMlrOF1F_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTc4Nw==", "bodyText": "Is it possible the parent task has parent too? If yes, should we find the root task and kill all?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390541787", "createdAt": "2020-03-10T18:57:19Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzAwMg==", "bodyText": "For our search query, there is only two-level parent-child relationship.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391217002", "createdAt": "2020-03-11T19:41:22Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTc4Nw=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI3ODcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowMDo1MlrOF0c58A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo0MTo0OVrOF1GAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Mzg1Ng==", "bodyText": "Better to add some retry for these failed tasks. Otherwise, will wait for next detector run to cancel again.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390543856", "createdAt": "2020-03-10T19:00:52Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);\n+        LOG.info(\"Start to cancel task for parentTaskId: {}\", parentTaskId);\n+        client\n+            .execute(\n+                CancelTasksAction.INSTANCE,\n+                cancelTaskRequest,\n+                ActionListener.wrap(response -> { onCancelTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"Failed to cancel task for detectorId: \" + detectorId, exception);\n+                    throw new InternalFailure(detectorId, \"Failed to cancel current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle CancelTasksResponse\n+     * @param cancelTasksResponse CancelTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onCancelTaskResponse(CancelTasksResponse cancelTasksResponse, String detectorId, Logger LOG) {\n+        List<ElasticsearchException> nodeFailures = cancelTasksResponse.getNodeFailures();\n+        List<TaskOperationFailure> taskFailures = cancelTasksResponse.getTaskFailures();\n+        if (nodeFailures.isEmpty() && taskFailures.isEmpty()) {\n+            LOG.info(\"Cancelling query for detectorId: {} succeeds. Clear entry from Throttler\", detectorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzI2MQ==", "bodyText": "Will add a todo comment for now.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391217261", "createdAt": "2020-03-11T19:41:49Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);\n+        LOG.info(\"Start to cancel task for parentTaskId: {}\", parentTaskId);\n+        client\n+            .execute(\n+                CancelTasksAction.INSTANCE,\n+                cancelTaskRequest,\n+                ActionListener.wrap(response -> { onCancelTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"Failed to cancel task for detectorId: \" + detectorId, exception);\n+                    throw new InternalFailure(detectorId, \"Failed to cancel current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle CancelTasksResponse\n+     * @param cancelTasksResponse CancelTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onCancelTaskResponse(CancelTasksResponse cancelTasksResponse, String detectorId, Logger LOG) {\n+        List<ElasticsearchException> nodeFailures = cancelTasksResponse.getNodeFailures();\n+        List<TaskOperationFailure> taskFailures = cancelTasksResponse.getTaskFailures();\n+        if (nodeFailures.isEmpty() && taskFailures.isEmpty()) {\n+            LOG.info(\"Cancelling query for detectorId: {} succeeds. Clear entry from Throttler\", detectorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Mzg1Ng=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM0OTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyMDo0MFrOF0dlVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjozODoxN1rOF1Lq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NDk2Ng==", "bodyText": "It's possible the cancelRunningQuery in progress or fail when start a new request. If cancelRunningQuery is not time consuming, better to start a new request when we get respond of cancelRunningQuery. If it's heavy action, may need to monitor the cancelation status and retry if failed; so we can terminate unnecessary AD query to protect cluster performance. It's ok to add some todo&comments here and refactor it later if you think the change will be big.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390554966", "createdAt": "2020-03-10T19:20:40Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);\n                 consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMDAzMw==", "bodyText": "I think this is similar with Kaituo's comments. For safety concern, I will not start new request if we need to cancel the running one, just in case the cancel failed somehow and we keep adding new requests. We can revisit it later.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391310033", "createdAt": "2020-03-11T22:38:17Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);\n                 consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NDk2Ng=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM2NDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyNToxNFrOF0du-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjozODo1NFrOF1Lrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NzQzNQ==", "bodyText": "Just asking, will the X_OPAQUE_ID header be passed to child tasks?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390557435", "createdAt": "2020-03-10T19:25:14Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMDI2Mw==", "bodyText": "Yes, it will. I can see both parent and children tasks have the same header from the manual test.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391310263", "createdAt": "2020-03-11T22:38:54Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -179,32 +197,36 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n         BiConsumer<Request, ActionListener<Response>> consumer,\n         AnomalyDetector detector\n     ) {\n+\n         try {\n-            // if key already exist, reject the request and throws exception\n-            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n-                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n-                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            String detectorId = detector.getDetectorId();\n+            if (!throttler.insertFilteredQuery(detectorId, request)) {\n+                LOG.info(\"There is one query running for detectorId: {}. Trying to cancel the long running query\", detectorId);\n+                cancelRunningQuery(client, detectorId, LOG);\n             }\n             AtomicReference<Response> respReference = new AtomicReference<>();\n             final CountDownLatch latch = new CountDownLatch(1);\n \n-            try {\n+            try (ThreadContext.StoredContext context = threadPool.getThreadContext().stashContext()) {\n+                assert context != null;\n+                threadPool.getThreadContext().putHeader(Task.X_OPAQUE_ID, CommonName.ANOMALY_DETECTOR + \":\" + detectorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NzQzNQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM4NTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozMTozOFrOF0d8Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxOTowNVrOF1MgfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDg1OQ==", "bodyText": "From line292, if matchedTask.getParentTaskId().isSet() is false, will get matchedTask.getTaskId()  as parentTaskId.  For this case, cancelTaskRequest.setParentTaskId(parentTaskId) will cancel tasks which has parent task id as matchedTask.getTaskId(). Is it possible the matchedTask has no child tasks? If it's possible, will cancelTaskRequest.setParentTaskId(parentTaskId) throw exception or cancel matchedTask ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390560859", "createdAt": "2020-03-10T19:31:38Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzc3Mg==", "bodyText": "I got your point. To avoid this corner case, I will go through the entire tasks list(previously it will early terminate once found matched). If there is only one task(no parent), we need to setTaskId, otherwise setParentTaskId", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391323772", "createdAt": "2020-03-11T23:19:05Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDg1OQ=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQwNTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozNzo1OVrOF0eJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo0ODo1NlrOF1L5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NDE5Ng==", "bodyText": "log failures?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r390564196", "createdAt": "2020-03-10T19:37:59Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);\n+        LOG.info(\"Start to cancel task for parentTaskId: {}\", parentTaskId);\n+        client\n+            .execute(\n+                CancelTasksAction.INSTANCE,\n+                cancelTaskRequest,\n+                ActionListener.wrap(response -> { onCancelTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"Failed to cancel task for detectorId: \" + detectorId, exception);\n+                    throw new InternalFailure(detectorId, \"Failed to cancel current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle CancelTasksResponse\n+     * @param cancelTasksResponse CancelTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onCancelTaskResponse(CancelTasksResponse cancelTasksResponse, String detectorId, Logger LOG) {\n+        List<ElasticsearchException> nodeFailures = cancelTasksResponse.getNodeFailures();\n+        List<TaskOperationFailure> taskFailures = cancelTasksResponse.getTaskFailures();\n+        if (nodeFailures.isEmpty() && taskFailures.isEmpty()) {\n+            LOG.info(\"Cancelling query for detectorId: {} succeeds. Clear entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        throw new InternalFailure(detectorId, \"Failed to cancel current tasks due to node or task failures\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzcxMQ==", "bodyText": "added", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/54#discussion_r391313711", "createdAt": "2020-03-11T22:48:56Z", "author": {"login": "zhanghg08"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -222,4 +244,80 @@ public ClientUtil(Settings setting, Client client, Throttler throttler) {\n     public boolean hasRunningQuery(AnomalyDetector detector) {\n         return throttler.getFilteredQuery(detector.getDetectorId()).isPresent();\n     }\n+\n+    /**\n+     * Cancel long running query for given detectorId\n+     * @param client Elasticsearch client\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void cancelRunningQuery(Client client, String detectorId, Logger LOG) {\n+        ListTasksRequest listTasksRequest = new ListTasksRequest();\n+        client\n+            .execute(\n+                ListTasksAction.INSTANCE,\n+                listTasksRequest,\n+                ActionListener.wrap(response -> { onListTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"List Tasks failed.\", exception);\n+                    throw new InternalFailure(detectorId, \"Failed to list current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle ListTasksResponse\n+     * @param listTasksResponse ListTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onListTaskResponse(ListTasksResponse listTasksResponse, String detectorId, Logger LOG) {\n+        List<TaskInfo> tasks = listTasksResponse.getTasks();\n+        TaskInfo matchedTask = null;\n+        for (TaskInfo task : tasks) {\n+            if (!task.getHeaders().isEmpty() && task.getHeaders().get(Task.X_OPAQUE_ID) != null) {\n+                if (task.getHeaders().get(Task.X_OPAQUE_ID).contains(detectorId)) {\n+                    matchedTask = task;\n+                    break;\n+                }\n+            }\n+        }\n+        // case 1: given detectorId is not in current task list\n+        if (matchedTask == null) {\n+            // log and then clear negative cache\n+            LOG.info(\"Couldn't find task for detectorId: {}. Clean this entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        // case 2: we can find the task for given detectorId\n+        TaskId parentTaskId = matchedTask.getParentTaskId().isSet() ? matchedTask.getParentTaskId() : matchedTask.getTaskId();\n+        CancelTasksRequest cancelTaskRequest = new CancelTasksRequest();\n+        cancelTaskRequest.setParentTaskId(parentTaskId);\n+        LOG.info(\"Start to cancel task for parentTaskId: {}\", parentTaskId);\n+        client\n+            .execute(\n+                CancelTasksAction.INSTANCE,\n+                cancelTaskRequest,\n+                ActionListener.wrap(response -> { onCancelTaskResponse(response, detectorId, LOG); }, exception -> {\n+                    LOG.error(\"Failed to cancel task for detectorId: \" + detectorId, exception);\n+                    throw new InternalFailure(detectorId, \"Failed to cancel current tasks\", exception);\n+                })\n+            );\n+    }\n+\n+    /**\n+     * Helper function to handle CancelTasksResponse\n+     * @param cancelTasksResponse CancelTasksResponse\n+     * @param detectorId Anomaly Detector Id\n+     * @param LOG Logger\n+     */\n+    private void onCancelTaskResponse(CancelTasksResponse cancelTasksResponse, String detectorId, Logger LOG) {\n+        List<ElasticsearchException> nodeFailures = cancelTasksResponse.getNodeFailures();\n+        List<TaskOperationFailure> taskFailures = cancelTasksResponse.getTaskFailures();\n+        if (nodeFailures.isEmpty() && taskFailures.isEmpty()) {\n+            LOG.info(\"Cancelling query for detectorId: {} succeeds. Clear entry from Throttler\", detectorId);\n+            throttler.clearFilteredQuery(detectorId);\n+            return;\n+        }\n+        throw new InternalFailure(detectorId, \"Failed to cancel current tasks due to node or task failures\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NDE5Ng=="}, "originalCommit": {"oid": "d797543fc24e1c7213ad2053fb255b0b371e6df9"}, "originalPosition": 198}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2989, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}