{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDk5NTU5", "number": 84, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowNDoxNlrODxfjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0ODozMlrODyMxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjIzODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowNDoxNlrOGE_bqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNzo0OVrOGFd-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4Njc2MA==", "bodyText": "Use job enabled_time here, think of the case : detector last update time not changed, but we disabled and restarted job multiple times. So we may get some AD result with non-zero anomaly score which generated before latest job enabled time, but actually the latest AD job is still initializing.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407886760", "createdAt": "2020-04-14T06:04:16Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NzEzMA==", "bodyText": "good point. Done.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408387130", "createdAt": "2020-04-14T19:37:49Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4Njc2MA=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI0NDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowNzowN1rOGE_fOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MDozMFrOGFeDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzY3Mg==", "bodyText": "Similar as line 260, we should use AD job \"enabled_time\"", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407887672", "createdAt": "2020-04-14T06:07:07Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.ANOMALY_SCORE_FIELD).gt(0));\n+\n+        SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1);\n+\n+        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        request.source(source);\n+        return request;\n+    }\n+\n+    private SearchRequest createLatestAnomalyResultRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4ODU0Ng==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408388546", "createdAt": "2020-04-14T19:40:30Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.ANOMALY_SCORE_FIELD).gt(0));\n+\n+        SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1);\n+\n+        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        request.source(source);\n+        return request;\n+    }\n+\n+    private SearchRequest createLatestAnomalyResultRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzY3Mg=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI1NDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoxMTowMVrOGE_lDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0Mzo1OFrOGFeLHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTE2Ng==", "bodyText": "log exception stack trace to make operation easier? Similar to other places", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407889166", "createdAt": "2020-04-14T06:11:01Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MDQyOA==", "bodyText": "The catch block is changed after addressing other comments.  New code would log stack trace.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408390428", "createdAt": "2020-04-14T19:43:58Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTE2Ng=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjMzODM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo0NToyNlrOGFAWbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTozNTowNVrOGFh0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMTgwNg==", "bodyText": "saved means the responses are from some saved result from ES indices ? Or means we cache these response ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407901806", "createdAt": "2020-04-14T06:45:26Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MDA5Ng==", "bodyText": "the latter. Added a comment.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408450096", "createdAt": "2020-04-14T21:35:05Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMTgwNg=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjM2NjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NTozNlrOGFAnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTowMjoyMFrOGFgyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjA5Mg==", "bodyText": "How about we add some comments about what TYPE means and the supported value?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407906092", "createdAt": "2020-04-14T06:55:36Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -55,11 +65,32 @@\n \n     private static final String GET_ANOMALY_DETECTOR_ACTION = \"get_anomaly_detector\";\n     private static final Logger logger = LogManager.getLogger(RestGetAnomalyDetectorAction.class);\n+    private final AnomalyDetectorProfileRunner profileRunner;\n+    private final Set<String> allProfileTypeStrs;\n+\n+    public RestGetAnomalyDetectorAction(\n+        RestController controller,\n+        AnomalyDetectorProfileRunner profileRunner,\n+        Set<String> allProfileTypeStrs\n+    ) {\n+        this.profileRunner = profileRunner;\n+        this.allProfileTypeStrs = allProfileTypeStrs;\n \n-    public RestGetAnomalyDetectorAction(RestController controller) {\n         String path = String.format(Locale.ROOT, \"%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID);\n         controller.registerHandler(RestRequest.Method.GET, path, this);\n         controller.registerHandler(RestRequest.Method.HEAD, path, this);\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE),\n+                this\n+            );\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE, TYPE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzI0OA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408433248", "createdAt": "2020-04-14T21:02:20Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -55,11 +65,32 @@\n \n     private static final String GET_ANOMALY_DETECTOR_ACTION = \"get_anomaly_detector\";\n     private static final Logger logger = LogManager.getLogger(RestGetAnomalyDetectorAction.class);\n+    private final AnomalyDetectorProfileRunner profileRunner;\n+    private final Set<String> allProfileTypeStrs;\n+\n+    public RestGetAnomalyDetectorAction(\n+        RestController controller,\n+        AnomalyDetectorProfileRunner profileRunner,\n+        Set<String> allProfileTypeStrs\n+    ) {\n+        this.profileRunner = profileRunner;\n+        this.allProfileTypeStrs = allProfileTypeStrs;\n \n-    public RestGetAnomalyDetectorAction(RestController controller) {\n         String path = String.format(Locale.ROOT, \"%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID);\n         controller.registerHandler(RestRequest.Method.GET, path, this);\n         controller.registerHandler(RestRequest.Method.HEAD, path, this);\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE),\n+                this\n+            );\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE, TYPE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjA5Mg=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjM2ODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NjozOFrOGFAozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTozMjozNFrOGFhvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjUwOA==", "bodyText": "How about we validate type here and return Set<ProfileName>?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407906508", "createdAt": "2020-04-14T06:56:38Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -148,4 +178,25 @@ public RestResponse buildResponse(MultiGetResponse multiGetResponse) throws Exce\n         };\n     }\n \n+    private ActionListener<DetectorProfile> getProfileActionListener(RestChannel channel, String detectorId) {\n+        return ActionListener\n+            .wrap(\n+                profile -> { channel.sendResponse(new BytesRestResponse(RestStatus.OK, profile.toXContent(channel.newBuilder()))); },\n+                exception -> { channel.sendResponse(buildInternalServerErrorResponse(exception, exception.getMessage())); }\n+            );\n+    }\n+\n+    private RestResponse buildInternalServerErrorResponse(Exception e, String errorMsg) {\n+        logger.error(errorMsg, e);\n+        return new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, errorMsg);\n+    }\n+\n+    private Set<String> getProfilesToCollect(String typesStr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODgyMg==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408448822", "createdAt": "2020-04-14T21:32:34Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -148,4 +178,25 @@ public RestResponse buildResponse(MultiGetResponse multiGetResponse) throws Exce\n         };\n     }\n \n+    private ActionListener<DetectorProfile> getProfileActionListener(RestChannel channel, String detectorId) {\n+        return ActionListener\n+            .wrap(\n+                profile -> { channel.sendResponse(new BytesRestResponse(RestStatus.OK, profile.toXContent(channel.newBuilder()))); },\n+                exception -> { channel.sendResponse(buildInternalServerErrorResponse(exception, exception.getMessage())); }\n+            );\n+    }\n+\n+    private RestResponse buildInternalServerErrorResponse(Exception e, String errorMsg) {\n+        logger.error(errorMsg, e);\n+        return new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, errorMsg);\n+    }\n+\n+    private Set<String> getProfilesToCollect(String typesStr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjUwOA=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQxNDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMTozMVrOGFBDVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTozNDoyNlrOGFhy9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzMwMQ==", "bodyText": "Seems you design this general delegate listener not only for profile API. Can you add more comments? Suggest to use a more specific name like MultiResponsesDelegateActionListener ?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407913301", "createdAt": "2020-04-14T07:11:31Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc4Mg==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408449782", "createdAt": "2020-04-14T21:34:26Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzMwMQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQzMDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxNjoyNVrOGFBM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTozNjoxNFrOGFh2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNTc2NQ==", "bodyText": "If expectedResponseCount==0 , collectedResponseCount.incrementAndGet() will always greater than expectedResponseCount , please add some validation for expectedResponseCount, or change to collectedResponseCount.incrementAndGet() >= expectedResponseCount", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407915765", "createdAt": "2020-04-14T07:16:25Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MDcwOA==", "bodyText": "good point.  Used the latter.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408450708", "createdAt": "2020-04-14T21:36:14Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNTc2NQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ0Mzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoyMDoxMVrOGFBUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTozOTo0OVrOGFh9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzc1NQ==", "bodyText": "Why log response0 here? Similar for line 84.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407917755", "createdAt": "2020-04-14T07:20:11Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));\n+            } else {\n+                T response0 = savedResponses.get(0);\n+                LOG.info(response0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MjM4Ng==", "bodyText": "It is used for debugging.  removed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408452386", "createdAt": "2020-04-14T21:39:49Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));\n+            } else {\n+                T response0 = savedResponses.get(0);\n+                LOG.info(response0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzc1NQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ3MzkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoyODo0MlrOGFBmzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDoxMjowNVrOGFlT0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ==", "bodyText": "Here, the finalErrorMsg is \"Fail to fetch profile for \" + detectorId.\nFrom line89 of class DelegateActionListener: this.delegate.onFailure(new RuntimeException(String.format(Locale.ROOT, finalErrorMsg, exceptions)));,  String.format(...) will not include exceptions, is this by design?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407922381", "createdAt": "2020-04-14T07:28:42Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MTk4OA==", "bodyText": "String.format(...) would include exception message.  Could you explain your questions?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408391988", "createdAt": "2020-04-14T19:46:56Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwNzM0Ng==", "bodyText": "fixed as we discussed offline.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408507346", "createdAt": "2020-04-15T00:12:05Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ5NzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzozNToyMVrOGFB0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1MToyMFrOGFeabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNjAxMA==", "bodyText": "How about we change to \"Must set at least one profile type\" to avoid confusion between empty profile types and wrong profile types which we don't support?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407926010", "createdAt": "2020-04-14T07:35:21Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NDM0OQ==", "bodyText": "RestGetAnomalyDetectorAction.getProfilesToCollect would return an interaction between valid types and the provided types.  If the result is empty, it means all of the types from the users are unsupported. So the error is not that customers have not set at least one profile type.  It is all of the profile types are invalid.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408394349", "createdAt": "2020-04-14T19:51:20Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNjAxMA=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjUyNjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0MzoyNFrOGFCGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1MzoxMFrOGFeeVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDUxNQ==", "bodyText": "minor: can use this method: listener.failImmediately(String errMsg, Exception e)", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407930515", "createdAt": "2020-04-14T07:43:24Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NTM1MA==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408395350", "createdAt": "2020-04-14T19:53:10Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDUxNQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU2MDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MjozM1rOGFCaQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo0OToxN1rOGFgXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTU1NQ==", "bodyText": "If some uncatched exception, will not execute listener.onFailure method, collectedResponseCount will not increase, so will never execute finish.\nSuggest to catch Exception here to avoid some uncatched exceptions. Similar to line 236", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407935555", "createdAt": "2020-04-14T07:52:33Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyNjI2Nw==", "bodyText": "If some uncatched exception,  control flow would be redirected to the exception branch and listener.onFailure would be called.  Please see the implementation of ActionListener.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408426267", "createdAt": "2020-04-14T20:49:17Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTU1NQ=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU5NDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowMToxMVrOGFCvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo1MTo0M1rOGFgcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDkwNw==", "bodyText": "Can we add custom error message here?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407940907", "createdAt": "2020-04-14T08:01:11Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyNzU1NA==", "bodyText": "This line is removed after addressing other comments.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408427554", "createdAt": "2020-04-14T20:51:43Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDkwNw=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjYyNDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowOToyN1rOGFDB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo1NTo1MFrOGFgk2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTcxMA==", "bodyText": "minor: make the error message more accurate, like Fail to find latest anomaly result with anomalyScore>0 from XXX for detector XXX", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407945710", "createdAt": "2020-04-14T08:09:27Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyOTc4NA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408429784", "createdAt": "2020-04-14T20:55:50Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTcxMA=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY0ODgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxNTo0NFrOGFDQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo1OToyNlrOGFgsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTU1OA==", "bodyText": "Why throw exception if we can't find AD result ? If not AD result, that means AD job is initializing and no error. But from DelegateActionListener  line 89, if any exception occurs, will execute this.delegate.onFailure(...) rather than return Init state and null error.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407949558", "createdAt": "2020-04-14T08:15:44Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTYzMA==", "bodyText": "good catch.  Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408431630", "createdAt": "2020-04-14T20:59:26Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTU1OA=="}, "originalCommit": {"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM2MjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozMDoyMlrOGGEMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1NTo1NFrOGGFIIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzMwOA==", "bodyText": "not blocker: you can move this isEmpty() check to the entry of this method, aka line 67. And then you can skip the check on line 78", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409013308", "createdAt": "2020-04-15T17:30:22Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyODY0MQ==", "bodyText": "good catch.  Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409028641", "createdAt": "2020-04-15T17:55:54Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzMwOA=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQxMjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0Mzo0N1rOGGErqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1NjozOFrOGGFJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTM1Mg==", "bodyText": "Unsupported profile", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409021352", "createdAt": "2020-04-15T17:43:47Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public enum ProfileName {\n+    STATE(\"state\"),\n+    ERROR(\"error\");\n+\n+    private String name;\n+\n+    ProfileName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Get profile name\n+     *\n+     * @return name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get set of profile names\n+     *\n+     * @return set of profile names\n+     */\n+    public static Set<String> getNames() {\n+        Set<String> names = new HashSet<>();\n+\n+        for (ProfileName statName : ProfileName.values()) {\n+            names.add(statName.getName());\n+        }\n+        return names;\n+    }\n+\n+    public static ProfileName getName(String name) {\n+        switch (name) {\n+            case \"state\":\n+                return STATE;\n+            case \"error\":\n+                return ERROR;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported prof\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyOTA3NQ==", "bodyText": "thanks for the catch.  Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409029075", "createdAt": "2020-04-15T17:56:38Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public enum ProfileName {\n+    STATE(\"state\"),\n+    ERROR(\"error\");\n+\n+    private String name;\n+\n+    ProfileName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Get profile name\n+     *\n+     * @return name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get set of profile names\n+     *\n+     * @return set of profile names\n+     */\n+    public static Set<String> getNames() {\n+        Set<String> names = new HashSet<>();\n+\n+        for (ProfileName statName : ProfileName.values()) {\n+            names.add(statName.getName());\n+        }\n+        return names;\n+    }\n+\n+    public static ProfileName getName(String name) {\n+        switch (name) {\n+            case \"state\":\n+                return STATE;\n+            case \"error\":\n+                return ERROR;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported prof\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTM1Mg=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQzNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1MDoyMFrOGGE66A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1OTo1NVrOGGFRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTI1Ng==", "bodyText": "LOG.error()", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409025256", "createdAt": "2020-04-15T17:50:20Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMDk5OQ==", "bodyText": "fixed.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409030999", "createdAt": "2020-04-15T17:59:55Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTI1Ng=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQ1MzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1NDo0NlrOGGFFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0MzowN1rOGGKzTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ==", "bodyText": "It looks like to be duplicate with above line 60. Can we remove the finally here? And also, the only potential scenario where exception can get thrown is that Exception e is null, but I don't think it is possible.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409027965", "createdAt": "2020-04-15T17:54:46Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0MDU4NA==", "bodyText": "The purpose of this class is to collect async requests: no matter it is a failure or success, and then increment the count.  If the count equals to or larger than expected, then send a final success or failure responses.  We need finally here to increment the count when there is a failure.  THis is not a failure when e is null.  It means an async request fails.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409040584", "createdAt": "2020-04-15T18:16:39Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0Nzg2Mw==", "bodyText": "After another look, I guess exception can be thrown if thread is interrupted.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409047863", "createdAt": "2020-04-15T18:29:17Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMTYxNQ==", "bodyText": "yes, any exception can be thrown by an asynchronous request.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409121615", "createdAt": "2020-04-15T20:43:07Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTU1NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyMzozNVrOGGGGaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0MToyNFrOGGKvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDU4Nw==", "bodyText": "expected implies that the total collected count must be more than expectedResponseCount, otherwise it is a failure. Based on my understanding of use of this class, I guess maxResponseCount might be a better name.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409044587", "createdAt": "2020-04-15T18:23:35Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDcwNg==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409120706", "createdAt": "2020-04-15T20:41:24Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDU4Nw=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTU4NDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODozMjowNFrOGGGZUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0NDoyM1rOGGK2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0OTQyNA==", "bodyText": "String.format may not be needed if only static string is there. Also, I think in case of empty exceptions and empty savedResponses, it may be better to throw exception with message like No response collected, which makes more sense to me.", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409049424", "createdAt": "2020-04-15T18:32:04Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMjM0NQ==", "bodyText": "good catch.  Removed String.format and changed to \"No response collected\".", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409122345", "createdAt": "2020-04-15T20:44:23Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0OTQyNA=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY0NjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0ODozMlrOGGG_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTowMlrOGGKqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1OTMxNA==", "bodyText": "can you log exception here as well?", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409059314", "createdAt": "2020-04-15T18:48:32Z", "author": {"login": "yizheliu-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE) || profiles.contains(ProfileName.ERROR)) {\n+            prepareProfile(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfile(\n+        String detectorId,\n+        MultiResponsesDelegateActionListener<DetectorProfile> listener,\n+        Set<ProfileName> profiles\n+    ) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    long enabledTimeMs = job.getEnabledTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE)) {\n+                        profileState(detectorId, enabledTimeMs, listener, job.isEnabled());\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR)) {\n+                        profileError(detectorId, enabledTimeMs, listener);\n+                    }\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(FAIL_TO_GET_PROFILE_MSG, e);\n+                }\n+            } else {\n+                GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+                client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTQzMA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409119430", "createdAt": "2020-04-15T20:39:02Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE) || profiles.contains(ProfileName.ERROR)) {\n+            prepareProfile(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfile(\n+        String detectorId,\n+        MultiResponsesDelegateActionListener<DetectorProfile> listener,\n+        Set<ProfileName> profiles\n+    ) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    long enabledTimeMs = job.getEnabledTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE)) {\n+                        profileState(detectorId, enabledTimeMs, listener, job.isEnabled());\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR)) {\n+                        profileError(detectorId, enabledTimeMs, listener);\n+                    }\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(FAIL_TO_GET_PROFILE_MSG, e);\n+                }\n+            } else {\n+                GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+                client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1OTMxNA=="}, "originalCommit": {"oid": "a476ed48257ace99427189f7a0d53281b27245b2"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3014, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}