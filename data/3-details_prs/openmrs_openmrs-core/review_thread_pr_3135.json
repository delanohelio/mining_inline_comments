{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTUxMjQ1", "number": 3135, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoyNzoxMVrODj1LDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxODoxMDo0NFrODsVqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk3OTM0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoyNzoxMVrOFv2t3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODozOTo0N1rOFwKb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMzg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tList<Program> programs = pws.getPrograms(\"MAL\");\n          \n          \n            \n            \t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385723870", "createdAt": "2020-02-28T14:27:11Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0Njk3Mg==", "bodyText": "I did this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386046972", "createdAt": "2020-02-29T18:39:47Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMzg3MA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk4MDM5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoyNzozMlrOFv2uhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoyNzozMlrOFv2uhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNDAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n          \n          \n            \n            \t\tList<Program> pRPrograms = pws.getPrograms(\"PR\");", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385724036", "createdAt": "2020-02-28T14:27:32Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk4NTM5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoyOTowMFrOFv2xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0MjoyM1rOFwNerg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNDgxNQ==", "bodyText": "retireProgram_shouldTestRetireProgram is not descriptive enough what it has to do", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385724815", "createdAt": "2020-02-28T14:29:00Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0Njk5Mg==", "bodyText": "I put there a comment", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386046992", "createdAt": "2020-02-29T18:40:14Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNDgxNQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void retireProgram_shouldTestRetireProgram() {\n          \n          \n            \n            \tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n          \n      \n    \n    \n  \n\nI meant to change the test case name. Please remove the comment. It is unnecessary. Also, you forgot to assert the retired reason in your test case.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096814", "createdAt": "2020-03-01T10:42:23Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNDgxNQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk4OTUyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozMDoxNlrOFv20NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0MDozM1rOFwKcLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNTQ5Mw==", "bodyText": "shouldn't you also need to check whether workflow.getStates() is not empty?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385725493", "createdAt": "2020-02-28T14:30:16Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzAyMA==", "bodyText": "yes, I added this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047020", "createdAt": "2020-02-29T18:40:33Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNTQ5Mw=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk5NDg2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozMTo0MVrOFv23aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDozNzo1OFrOFwNdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNjMxNQ==", "bodyText": "same as above comment for test case name", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385726315", "createdAt": "2020-02-28T14:31:41Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjU2NA==", "bodyText": "I meant to modify the test case name like below. Leaving comment is not recommended to describe the test case. Please remove the comment.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void unretireProgram_shouldTestUnretireProgram() {\n          \n          \n            \n            \tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096564", "createdAt": "2020-03-01T10:37:58Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNjMxNQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODk5NzkzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozMjo0NFrOFv25cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0MTowN1rOFwKcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNjgzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tUser user = Context.getUserService().getAllUsers().get(0);\n          \n          \n            \n            \t\tUser testUser = Context.getUserService().getAllUsers().get(0);", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385726833", "createdAt": "2020-02-28T14:32:44Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzA2NQ==", "bodyText": "I changed the variable name", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047065", "createdAt": "2020-02-29T18:41:07Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNjgzMw=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAwMDM5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozMzoyMVrOFv27Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDozODo1MlrOFwNd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzIzNA==", "bodyText": "unnecessary variable. You have only 1 usage of this variable.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385727234", "createdAt": "2020-02-28T14:33:21Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzgzNA==", "bodyText": "I removed it", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047834", "createdAt": "2020-02-29T18:53:32Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzIzNA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjYwMQ==", "bodyText": "I don't see it. What I meant is the suggested change in line 813.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096601", "createdAt": "2020-03-01T10:38:52Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzIzNA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAwNDc3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNDo0NVrOFv298w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0MTo0MlrOFwKcfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzk4Nw==", "bodyText": "what is this variable?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385727987", "createdAt": "2020-02-28T14:34:45Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzEwMg==", "bodyText": "I left it there by accident. I removed this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047102", "createdAt": "2020-02-29T18:41:42Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzk4Nw=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAwOTY2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNjoyMFrOFv3BAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0NjowOVrOFwNfnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyODc3MQ==", "bodyText": "voidDate is not human understandable. Use a english name for void? what does this date is relevant.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385728771", "createdAt": "2020-02-28T14:36:20Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzI3NA==", "bodyText": "I added a comment", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047274", "createdAt": "2020-02-29T18:44:32Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyODc3MQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NzA1Mg==", "bodyText": "Adding comments is not the solution. You should rename your variable names. That is what I am expecting.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386097052", "createdAt": "2020-03-01T10:46:09Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyODc3MQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxMzMzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNzoyOVrOFv3DeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0NDo1OFrOFwKdOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTQwMA==", "bodyText": "same as my above comments on variable names", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385729400", "createdAt": "2020-02-28T14:37:29Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzI5MQ==", "bodyText": "I put there some comments", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047291", "createdAt": "2020-02-29T18:44:58Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTQwMA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxNDU3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNzo1MFrOFv3EOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0Njo1MVrOFwKd2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTU5NQ==", "bodyText": "what uuid is this?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385729595", "createdAt": "2020-02-28T14:37:50Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzQ0OA==", "bodyText": "I added a new name to this variable", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047448", "createdAt": "2020-02-29T18:46:51Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTU5NQ=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxNTIzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODowMlrOFv3Eng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0NzoyMVrOFwKd8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTY5NA==", "bodyText": "id is not a good name", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385729694", "createdAt": "2020-02-28T14:38:02Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzQ3Mg==", "bodyText": "I added a new name for this variable", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047472", "createdAt": "2020-02-29T18:47:21Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTY5NA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxNjMxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODoyNFrOFv3FQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0NzozNVrOFwKd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTg1Ng==", "bodyText": "len is unnecessary variable name", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385729856", "createdAt": "2020-02-28T14:38:24Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tint len = conceptStateConversions.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzQ4MA==", "bodyText": "yes, I removed it", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047480", "createdAt": "2020-02-29T18:47:35Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tint len = conceptStateConversions.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTg1Ng=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxNzEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODozOFrOFv3Fvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0Nzo0OFrOFwKeCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTk4Mw==", "bodyText": "unnecessary variable", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r385729983", "createdAt": "2020-02-28T14:38:38Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tint len = conceptStateConversions.size();\n+\t\tassertEquals(len, 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tint len = list.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzQ5OA==", "bodyText": "I removed this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047498", "createdAt": "2020-02-29T18:47:48Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgram1 = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgram1.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tconceptStateConversion.setConcept(conceptStateConversion1.getConcept());\n+\t\tconceptStateConversion.setProgramWorkflow(conceptStateConversion1.getProgramWorkflow());\n+\t\tconceptStateConversion.setProgramWorkflowState(conceptStateConversion1.getProgramWorkflowState());\n+\t\tString uuid = conceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(uuid);\n+\t\tassertEquals(uuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tint len = conceptStateConversions.size();\n+\t\tassertEquals(len, 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tint len = list.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTk4Mw=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDkwNzAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDoxMzo1MlrOFwIp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0MzozMVrOFwNe_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzc4MA==", "bodyText": "Is there a need for this variable ?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386017780", "createdAt": "2020-02-29T10:13:52Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzUyNg==", "bodyText": "I left it there accidentally", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386047526", "createdAt": "2020-02-29T18:48:23Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzc4MA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Njg5Mg==", "bodyText": "Please remove it. I still see it here.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096892", "createdAt": "2020-03-01T10:43:31Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +751,249 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> programs = pws.getPrograms(\"MAL\");\n+\t\tList<Program> programs1 = pws.getPrograms(\"PR\");\n+\t\tassertEquals(programs.size(), 1);\n+\t\tassertEquals(programs1.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser user = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(user);\n+\t\tList<Program> list = pws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzc4MA=="}, "originalCommit": {"oid": "43e87aeb06792488df3b8c8dea49d4409f73e62c"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTUzNjc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDozNToxOVrOFwNdAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MjozM1rOF8_20g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjM4Nw==", "bodyText": "You should move this line before the for loop.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096387", "createdAt": "2020-03-01T10:35:19Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzg5OQ==", "bodyText": "Did this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386727899", "createdAt": "2020-03-03T00:12:13Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjM4Nw=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODAwNA==", "bodyText": "@alinmihaila99 It looks like there are a few of the comments where you said you made the changes, but they aren't reflected in the current PR. Could you make sure this is the most up-to-date code?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395048004", "createdAt": "2020-03-19T14:02:35Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjM4Nw=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTEwNg==", "bodyText": "@alinmihaila99: Could you move this assertNotNull out of the for loop?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399505106", "createdAt": "2020-03-27T19:52:33Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjM4Nw=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTUzODcxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDozOTowOFrOFwNeBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxMzo0OVrOFw0B2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tProgram program1 = dao.getProgramByUuid(uuid);\n          \n          \n            \n            \t\tProgram program1 = dao.getProgramByUuid(program.getUuid());", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096647", "createdAt": "2020-03-01T10:39:08Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODQxMA==", "bodyText": "I added this and erased the variable", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386728410", "createdAt": "2020-03-03T00:13:49Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjY0Nw=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU0MTI0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0NToxMFrOFwNfTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDozNFrOFw0Crw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Njk3NQ==", "bodyText": "It is not a good practice to write comments for each variable you write. Make your variable names to interpret what it does instead of writing comments. So, please remove those comments.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386096975", "createdAt": "2020-03-01T10:45:10Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\t//patientProgram retains a PatientProgram", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODYyMw==", "bodyText": "I removed them", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386728623", "createdAt": "2020-03-03T00:14:34Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\t//patientProgram retains a PatientProgram", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Njk3NQ=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU0MjU5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0NzoyN1rOFwNf-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0NzoyN1rOFwNf-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NzE0Ng==", "bodyText": "just say newConceptStateConversion. You don't need that comment. Remove it.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386097146", "createdAt": "2020-03-01T10:47:27Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\t//patientProgram retains a PatientProgram\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\t\n+\t\t//patientProgramVoided is the patientProgram afeter voiding it\n+\t\tPatientProgram patientProgramVoided = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\t\n+\t\t//voidDate retains the voiding date for patientProgram\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgramVoided = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\t//conceptStateConversion is the ConceptStateConversion we want to be saved\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU0MzEzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMDo0ODoyNlrOFwNgPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDo1OVrOFw0DMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NzIxNA==", "bodyText": "you can rename the variable as existingConceptStateConversion. No need to write explainations as comments. remove it please.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386097214", "createdAt": "2020-03-01T10:48:26Z", "author": {"login": "JudeNiroshan"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\t//patientProgram retains a PatientProgram\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\t\n+\t\t//patientProgramVoided is the patientProgram afeter voiding it\n+\t\tPatientProgram patientProgramVoided = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\t\n+\t\t//voidDate retains the voiding date for patientProgram\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgramVoided = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\t//conceptStateConversion is the ConceptStateConversion we want to be saved\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\t\n+\t\t/*conceptStateConversion1 is an existing ConceptStateConversion\n+\t\twe used this for taking some of it's attributes and assigning to \n+\t'\tthe conceptStateConversion*/\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODc1NQ==", "bodyText": "Changed this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r386728755", "createdAt": "2020-03-03T00:14:59Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,262 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldTestRetireProgram() {\n+\t\t/*This method should retire a program, by setting a reason, and also\n+\t\tsetting it's workflows and workflow states to retired*/\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldTestUnretireProgram() {\n+\t\t/*This method should unretire a program, by setting\n+\t\tit's workflows and workflow states  retired to false*/\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tString uuid = program.getUuid();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(uuid);\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tint i = 0;\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\t//patientProgram retains a PatientProgram\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\t\n+\t\t//patientProgramVoided is the patientProgram afeter voiding it\n+\t\tPatientProgram patientProgramVoided = pws.voidPatientProgram(patientProgram, \"expired\");\n+\t\t\n+\t\t//voidDate retains the voiding date for patientProgram\n+\t\tDate voidDate = patientProgram.getDateVoided();\n+\t\tpatientProgramVoided = pws.unvoidPatientProgram(patientProgram);\n+\t\tassertEquals(patientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tif (voidDate != null && voidDate.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException1.expect(APIException.class);\n+\t\texpectedException1.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\t//conceptStateConversion is the ConceptStateConversion we want to be saved\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\t\n+\t\t/*conceptStateConversion1 is an existing ConceptStateConversion\n+\t\twe used this for taking some of it's attributes and assigning to \n+\t'\tthe conceptStateConversion*/\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NzIxNA=="}, "originalCommit": {"oid": "1a15175538f2a5bbac8eae40980470bc2de4a23f"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY1MDQyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNDo0OVrOF4v6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0NjoyOVrOF6IxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTQ5MA==", "bodyText": "Why don't you just mark the dao field as @Autowired?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395049490", "createdAt": "2020-03-19T14:04:49Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -71,6 +78,9 @@ public void runBeforeEachTest() {\n \t\t\tencounterService = Context.getEncounterService();\n \t\t\tcs = Context.getConceptService();\n \t\t}\n+\t\tif (dao == null) {\n+\t\t\tdao = (ProgramWorkflowDAO) applicationContext.getBean(\"programWorkflowDAO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTEyMw==", "bodyText": "I did this and it worked. But i also did the same for class ProgramWorkflowServiceImpl and this causes some errors. This is the error:\nhttps://pastebin.com/T49m4Dzg", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396135123", "createdAt": "2020-03-22T20:05:33Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -71,6 +78,9 @@ public void runBeforeEachTest() {\n \t\t\tencounterService = Context.getEncounterService();\n \t\t\tcs = Context.getConceptService();\n \t\t}\n+\t\tif (dao == null) {\n+\t\t\tdao = (ProgramWorkflowDAO) applicationContext.getBean(\"programWorkflowDAO\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTQ5MA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2OTAzOQ==", "bodyText": "Since ProgramWorkflowService is the class being tested here, I wouldn't autowire or mock it, but instantiate it with new. I know Spring discourages the use of new, but it test cases, its fine.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396469039", "createdAt": "2020-03-23T13:56:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -71,6 +78,9 @@ public void runBeforeEachTest() {\n \t\t\tencounterService = Context.getEncounterService();\n \t\t\tcs = Context.getConceptService();\n \t\t}\n+\t\tif (dao == null) {\n+\t\t\tdao = (ProgramWorkflowDAO) applicationContext.getBean(\"programWorkflowDAO\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTQ5MA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNTM4MA==", "bodyText": "Ok, thank you!", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396505380", "createdAt": "2020-03-23T14:46:29Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -71,6 +78,9 @@ public void runBeforeEachTest() {\n \t\t\tencounterService = Context.getEncounterService();\n \t\t\tcs = Context.getConceptService();\n \t\t}\n+\t\tif (dao == null) {\n+\t\t\tdao = (ProgramWorkflowDAO) applicationContext.getBean(\"programWorkflowDAO\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTQ5MA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY1NjgyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNjoxM1rOF4v-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyOTo1MFrOF8bMrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA==", "bodyText": "This program doesn't seem to have any associated ProgramWorkflows. Would it be possible to find one that does for this test?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395050500", "createdAt": "2020-03-19T14:06:13Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5MTc0Nw==", "bodyText": "No, there are only 3 programs and none of them has workflows. What should I do?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396091747", "createdAt": "2020-03-22T13:08:45Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MTQzOQ==", "bodyText": "Assuming you've found the XML files with data, add a new one with a program and give it some associated workflows. Or just also load the file org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml which has a single workflow for Program 2.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396471439", "createdAt": "2020-03-23T14:00:00Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNjAyMw==", "bodyText": "Ok, I will try. Thank you!", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396506023", "createdAt": "2020-03-23T14:47:19Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMzY4MA==", "bodyText": "Please reach out if you run into any difficulties implementing this!", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396513680", "createdAt": "2020-03-23T14:56:58Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNjIyMA==", "bodyText": "Yes, thank you for support!", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r396536220", "createdAt": "2020-03-23T15:26:24Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNDQ5NA==", "bodyText": "I loaded the file and it worked. I will upload the commit soon", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r398904494", "createdAt": "2020-03-26T21:29:50Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDUwMA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY1ODkzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNjo0MlrOF4v_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMjozNVrOF8d8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDg2Ng==", "bodyText": "You don't need this blank line here", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395050866", "createdAt": "2020-03-19T14:06:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTQ5Ng==", "bodyText": "Removed it", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r398949496", "createdAt": "2020-03-26T23:22:35Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDg2Ng=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY2ODE5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowODo0OVrOF4wFjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowODo0OVrOF4wFjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjQyOA==", "bodyText": "Why do we need another ExpectedException here?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395052428", "createdAt": "2020-03-19T14:08:49Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY3MDk4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowOTozMVrOF4wHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMjoxOFrOF8d8Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1Mjg4MA==", "bodyText": "This should be at the top of the file with all the other fields. Also, it should be marked as protected.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395052880", "createdAt": "2020-03-19T14:09:31Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTQxNQ==", "bodyText": "Tried to do this and caused the following error:\nhttps://pastebin.com/bJnE0QDu", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r398949415", "createdAt": "2020-03-26T23:22:18Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1Mjg4MA=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY3NjA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMDo0MFrOF4wKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMDo1NlrOF8d6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzcwMw==", "bodyText": "Is this actually needed?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395053703", "createdAt": "2020-03-19T14:10:40Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0ODk1OQ==", "bodyText": "I removed all and put one on the top.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r398948959", "createdAt": "2020-03-26T23:20:56Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException1 = ExpectedException.none();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzcwMw=="}, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODcwNzY0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxNzozNFrOF4weig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxNzozNFrOF4weig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1ODgyNg==", "bodyText": "Please ensure that all states of this program are also properly voided", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r395058826", "createdAt": "2020-03-19T14:17:34Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +750,263 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\tProgram programTest = pws.getAllPrograms().get(0);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Rule\n+\tpublic ExpectedException expectedException2 = ExpectedException.none();\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException2.expect(APIException.class);\n+\t\texpectedException2.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b23a2bf03f6e7ad317ff16c4c546d8b6f922dc"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjgxODU5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MTozMVrOF8_02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyMzo0NlrOGD6X8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNDYwMw==", "bodyText": "Do not use wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399504603", "createdAt": "2020-03-27T19:51:31Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -16,15 +16,14 @@\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTMxMg==", "bodyText": "I added al required imports", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755312", "createdAt": "2020-04-10T13:23:46Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -16,15 +16,14 @@\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNDYwMw=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjgyMzA1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzowMFrOF8_3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyNDowNFrOGD6YbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTMyNg==", "bodyText": "Please remove this excess empty space", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399505326", "createdAt": "2020-03-27T19:53:00Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state of an invalid patient\");\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(null, trigger, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStatePatientWithoutValidTrigger(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state for a patient without a valid trigger concept\");\n+\t\tPatient patient = Context.getPatientService().getAllPatients().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(patient, null, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidDate(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Invalid date for converting patient state\");\n+\t\tPatient patient = Context.getPatientService().getAllPatients().get(0);\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tpwsi.triggerStateConversion(patient, trigger, null);\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTQzNg==", "bodyText": "Did this", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755436", "createdAt": "2020-04-10T13:24:04Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state of an invalid patient\");\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(null, trigger, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStatePatientWithoutValidTrigger(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state for a patient without a valid trigger concept\");\n+\t\tPatient patient = Context.getPatientService().getAllPatients().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(patient, null, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidDate(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Invalid date for converting patient state\");\n+\t\tPatient patient = Context.getPatientService().getAllPatients().get(0);\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tpwsi.triggerStateConversion(patient, trigger, null);\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTMyNg=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjgyMzgzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzoxN1rOF8_4IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyNDoyMFrOGD6Y1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTQ0MA==", "bodyText": "Throw instead of Trow", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399505440", "createdAt": "2020-03-27T19:53:17Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTU0MQ==", "bodyText": "yes, i corrected this mistakes", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755541", "createdAt": "2020-04-10T13:24:20Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTQ0MA=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjgyNDEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzoyMVrOF8_4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzoyMVrOF8_4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTQ4MQ==", "bodyText": "Throw instead of Trow", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399505481", "createdAt": "2020-03-27T19:53:21Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state of an invalid patient\");\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(null, trigger, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStatePatientWithoutValidTrigger(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjgyNDU2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzoyOFrOF8_4jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MzoyOFrOF8_4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTU1MQ==", "bodyText": "Throw instead of Trow", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399505551", "createdAt": "2020-03-27T19:53:28Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());\n+\t\tassertEquals(program, program1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestThrowPatientStateRequiresException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'PatientProgram(id=1, patient=Patient#2, program=Program(id=1, concept=Concept #1738, \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"workflows=[ProgramWorkflow(id=1), ProgramWorkflow(id=2)]))' failed to validate with reason: states: {0} is required for a patient state\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setState(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getPatientProgram(), patientProgram);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldThrowPatientProgramAlreadyAssignedException() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"This PatientProgram contains a ProgramWorkflowState whose parent is already assigned \" +\n+\t\t\t\t\t\t\t\t\t\t\t \"to PatientProgram(id=2, patient=Patient#2, program=Program(id=2, concept=Concept #10, workflows=[]))\");\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.getPatientProgram(2);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setPatientProgram(patientProgram1);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t}\n+\t\n+\t@Test\n+\tpublic void savePatientProgram_shouldTestSetState() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tpws.voidPatientProgram(patientProgram, \"test\");\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tstate.setVoided(false);\n+\t\t\tstate.setVoidReason(null);\n+\t\t}\n+\t\tpws.savePatientProgram(patientProgram);\n+\t\tfor (PatientState state : patientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), true);\n+\t\t\tassertEquals(state.getVoidReason(), \"test\");\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.getMemberIds().clear();\n+\t\tpatientPrograms = dao.getPatientPrograms(null, programs);\n+\t\tassertEquals(patientPrograms.size(), 4);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetProgramsIfCohortIsNotEmpty() {\n+\t\tCohort cohort = new Cohort();\n+\t\tCollection<Program> programs = pws.getAllPrograms();\n+\t\tList<PatientProgram> patientPrograms;\n+\t\tcohort.addMember(1);\n+\t\tcohort.addMember(2);\n+\t\tpatientPrograms = dao.getPatientPrograms(cohort, programs);\n+\t\tassertEquals(patientPrograms.size(), 2);\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void voidPatientProgram_shouldTestVoidPatientProgram() {\n+\t\tPatientProgram patientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram patientProgram1 = pws.voidPatientProgram(patientProgram, \"abc\");\n+\t\tassertEquals(patientProgram1.getVoided(), true);\n+\t\tassertEquals(patientProgram1.getVoidReason(), \"abc\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unvoidPatientProgram_shouldTestUnvoidPatientProgram() {\n+\t\tPatientProgram existingPatientProgram = pws.getPatientProgram(1);\n+\t\tPatientProgram existingPatientProgramVoided = pws.voidPatientProgram(existingPatientProgram, \"expired\");\n+\t\tDate patientProgramDateVoided = existingPatientProgramVoided.getDateVoided();\n+\t\texistingPatientProgramVoided = pws.unvoidPatientProgram(existingPatientProgram);\n+\t\tassertEquals(existingPatientProgramVoided.getVoided(), false);\n+\t\tfor (PatientState state : existingPatientProgram.getStates()) {\n+\t\t\tassertEquals(state.getVoided(), false);\n+\t\t\tif (patientProgramDateVoided != null && patientProgramDateVoided.equals(state.getDateVoided())) {\n+\t\t\t\tassertNull(state.getVoidedBy());\n+\t\t\t\tassertNull(state.getDateVoided());\n+\t\t\t\tassertNull(state.getVoidReason());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldThrowConceptStateConversionRequire() {\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"'ConceptStateConversion: Concept[null] results in State [null] for workflow [null]' failed to validate with reason: \" +\n+\t\t\t\"concept: Invalid concept, programWorkflow: Invalid Programme Workflow, programWorkflowState: Invalid Programme Workflow State\");\n+\t\tConceptStateConversion conceptStateConversion = new ConceptStateConversion();\n+\t\tconceptStateConversion.setConcept(null);\n+\t\tpws.saveConceptStateConversion(conceptStateConversion);\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveConceptStateConversion_shouldTestSaveConceptStateConversion() {\n+\t\tConceptStateConversion newConceptStateConversion = new ConceptStateConversion();\n+\t\tConceptStateConversion existingConceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tnewConceptStateConversion.setConcept(existingConceptStateConversion.getConcept());\n+\t\tnewConceptStateConversion.setProgramWorkflow(existingConceptStateConversion.getProgramWorkflow());\n+\t\tnewConceptStateConversion.setProgramWorkflowState(existingConceptStateConversion.getProgramWorkflowState());\n+\t\tString conceptStateConversionUuid = newConceptStateConversion.getUuid();\n+\t\tpws.saveConceptStateConversion(newConceptStateConversion);\n+\t\tConceptStateConversion conceptStateConversion2 = dao.getConceptStateConversionByUuid(conceptStateConversionUuid);\n+\t\tassertEquals(conceptStateConversionUuid, conceptStateConversion2.getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldTestGetConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion1 = pws.getAllConceptStateConversions().get(0);\n+\t\tint conceptStateConversion1Id = conceptStateConversion1.getId();\n+\t\tConceptStateConversion conceptStateConversion2 = pws.getConceptStateConversion(conceptStateConversion1Id);\n+\t\tassertEquals(conceptStateConversion1, conceptStateConversion2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllConceptStateConversion_shouldTestGetAllConceptStateConversion() {\n+\t\tList<ConceptStateConversion> conceptStateConversions = pws.getAllConceptStateConversions();\n+\t\tassertEquals(conceptStateConversions.size(), 1);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void purgeConceptStateConversion_shouldTestPurgeConceptStateConversion() {\n+\t\tConceptStateConversion conceptStateConversion = pws.getAllConceptStateConversions().get(0);\n+\t\tContext.getProgramWorkflowService().purgeConceptStateConversion(conceptStateConversion, false);\n+\t\tList<ConceptStateConversion> list = pws.getAllConceptStateConversions();\n+\t\tassertEquals(list.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getProgramsByConcept_shouldTestGetProgramsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<Program> programs = pws.getProgramsByConcept(concept);\n+\t\tassertEquals(programs.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowsByConcept_shouldTestGetProgramWorkflowsByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflow> programWorkflows = pws.getProgramWorkflowsByConcept(concept);\n+\t\tassertEquals(programWorkflows.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void programWorkflowStatesByConcept_shouldTestGetProgramWorkflowStatesByConcept() {\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tList<ProgramWorkflowState> programWorkflowStates = pws.getProgramWorkflowStatesByConcept(concept);\n+\t\tassertEquals(programWorkflowStates.size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getAllPrograms_shouldTestGetAllPrograms() {\n+\t\tList<Program> programs = pws.getAllPrograms();\n+\t\tassertEquals(programs.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getConceptStateConversion_shouldGetConceptStateConversion(){\n+\t\tProgramWorkflow programWorkflow = pws.getProgram(1).getWorkflow(2);\n+\t\tConcept concept = dao.getAllConceptStateConversions().get(0).getConcept();\n+\t\tConceptStateConversion conceptStateConversion = dao.getConceptStateConversion(programWorkflow, concept);\n+\t\tassertEquals(conceptStateConversion, dao.getAllConceptStateConversions().get(0));\n+\t}\n+\t\n+\t@Test \n+\tpublic void getProgram_shouldGetProgramByName(){\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tString programName = program.getName();\n+\t\tassertEquals(Context.getProgramWorkflowService().getProgramByName(programName), program);\n+\t}\n+\t\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidPatient(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state of an invalid patient\");\n+\t\tConcept trigger = Context.getConceptService().getAllConcepts().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(null, trigger, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStatePatientWithoutValidTrigger(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Attempting to convert state for a patient without a valid trigger concept\");\n+\t\tPatient patient = Context.getPatientService().getAllPatients().get(0);\n+\t\tDate dateConverted = new Date();\n+\t\tpwsi.triggerStateConversion(patient, null, dateConverted);\n+\t}\n+\n+\t@Test\n+\tpublic void triggerStateConversion_shouldTrowConvertStateInvalidDate(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njg0OTQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDowMTo0M1rOF9AIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyNDo0M1rOGD6ZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTUwOQ==", "bodyText": "Instead of doing this here, I would create a constant with the others, something like protected static final OTHER_PROGRAM_WORKFLOWS = \"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\";\nThen add to the runBeforeEachTest() method:\nexecuteDataset(OTHER_PROGRAM_WORKFLOWS).", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399509509", "createdAt": "2020-03-27T20:01:43Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTY3OQ==", "bodyText": "Moved this in the method you specified", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755679", "createdAt": "2020-04-10T13:24:43Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTUwOQ=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODE4NzA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxODowODo1NlrOF9LQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyNDo1MlrOGD6ZqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MTkyMA==", "bodyText": "Do we need this variable ?", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399691920", "createdAt": "2020-03-28T18:08:56Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTc1Mg==", "bodyText": "I removed it", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755752", "createdAt": "2020-04-10T13:24:52Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MTkyMA=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODE4ODE5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxODoxMDo0NFrOF9LRIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyNTowNVrOGD6Z7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MjA2Ng==", "bodyText": "Please think of a better variable name\n\"program1\" doesn't really signify anything.", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r399692066", "createdAt": "2020-03-28T18:10:44Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NTgyMg==", "bodyText": "I changed the name", "url": "https://github.com/openmrs/openmrs-core/pull/3135#discussion_r406755822", "createdAt": "2020-04-10T13:25:05Z", "author": {"login": "alinmihaila99"}, "path": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "diffHunk": "@@ -740,7 +755,292 @@ public void shouldTestPurgeProgramAttributeType() throws Exception {\n                 int totalAttributeTypes = pws.getAllProgramAttributeTypes().size();\n \t\tpws.purgeProgramAttributeType(programAttributeType);\n \t\tassertEquals((totalAttributeTypes - 1), pws.getAllProgramAttributeTypes().size());\n-}\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void getPrograms_shouldTestGetPrograms() {\n+\t\tList<Program> malPrograms = pws.getPrograms(\"MAL\");\n+\t\tList<Program> prPrograms = pws.getPrograms(\"PR\");\n+\t\tassertEquals(malPrograms.size(), 1);\n+\t\tassertEquals(prPrograms.size(), 3);\n+\t}\n+\t\n+\t@Test\n+\tpublic void retireProgram_shouldSetRetiredStateToFalseAndSetAReason() {\n+\t\texecuteDataSet(\"org/openmrs/api/include/ProgramWorkflowServiceTest-otherProgramWorkflows.xml\");\n+\t\tConcept concept = Context.getConceptService().getConcept(12);\n+\t\tProgramWorkflow programWorkflow = dao.getProgramWorkflowsByConcept(concept).get(1);\n+\t\tArrayList<ProgramWorkflow> programWorkflows = new ArrayList<>();\n+\t\tprogramWorkflows.add(programWorkflow);\n+\t\tSet<ProgramWorkflow> allWorkflows = new HashSet<>(programWorkflows);\n+\t\tProgram programTest = pws.getAllPrograms().get(1);\n+\t\tprogramTest.setAllWorkflows(allWorkflows);\n+\t\tProgram program = pws.retireProgram(programTest, \"expired\");\n+\t\tfor (ProgramWorkflow workflow : program.getWorkflows()) {\n+\t\t\tassertEquals(workflow.getRetired(), true);\n+\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\tassertNotNull(workflow.getStates());\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t\tassertEquals(state.getRetired(), true);\n+\t\t\t}\n+\t\t}\n+\t\tassertEquals(program.getRetireReason(), \"expired\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireProgram_shouldSetRetireFalseForWorkflowsAndWorkflowStates() {\n+\t\tProgram program = pws.getAllPrograms().get(0);\n+\t\tDate lastModifiedDate = program.getDateChanged();\n+\t\tProgram program1 = pws.unretireProgram(program);\n+\t\tassertEquals(program.getRetired(), false);\n+\t\tfor (ProgramWorkflow workflow : program.getAllWorkflows()) {\n+\t\t\tif (lastModifiedDate != null && lastModifiedDate.equals(workflow.getDateChanged())) {\n+\t\t\t\tassertEquals(workflow.getRetired(), false);\n+\t\t\t\tfor (ProgramWorkflowState state : workflow.getStates()) {\n+\t\t\t\t\tif (lastModifiedDate.equals(state.getDateChanged())) {\n+\t\t\t\t\t\tassertEquals(state.getRetired(), false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveUnretireProgram_shouldTestSaveUnretireProgram() {\n+\t\tProgram program = new Program();\n+\t\tConcept concept = Context.getConceptService().getAllConcepts().get(0);\n+\t\tUser testUser = Context.getUserService().getAllUsers().get(0);\n+\t\tprogram.setConcept(concept);\n+\t\tprogram.setDescription(\"test\");\n+\t\tprogram.setName(\"programTest\");\n+\t\tprogram.setCreator(testUser);\n+\t\tpws.getAllPrograms();\n+\t\tpws.retireProgram(program, \"abc\");\n+\t\tpws.unretireProgram(program);\n+\t\tProgram program1 = dao.getProgramByUuid(program.getUuid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MjA2Ng=="}, "originalCommit": {"oid": "60cc1928679126b86a76040a200167259de865c1"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1518, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}