{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODUyNTk4", "number": 3631, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QyMjoxMjo1NFrOE2ZD3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoyOToxNlrOE4wvdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDY5MTUxOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QyMjoxMjo1NFrOHvLCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyODoxN1rOHv0G8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIyNTkwNA==", "bodyText": "Just like the original exception, i would explicitly use WrongClassException instead of the generic Exception.\nSecondly, even with the changes in this pull request, you would still get an UnexpectedRollbackException because of the above call Context.getPatientService().getPatient(patientOrPersonId) which marks the transaction for rollback,  because of the exception. Therefore, you need to either change Context.getPatientService().getPatient(patientOrPersonId) to getPatient(patientOrPersonId) such that it does not run with its new transaction, or add noRollbackFor = WrongClassException.class to the transaction definition for the getPatient(Integer patientId) method.", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r519225904", "createdAt": "2020-11-07T22:12:54Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -223,7 +223,7 @@ public Patient getPatientOrPromotePerson(Integer patientOrPersonId) {\n \t\ttry {\n \t\t\tpatient = Context.getPatientService().getPatient(patientOrPersonId);\n \t\t}\n-\t\tcatch (ClassCastException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a899436afb4777b5b98e571418c957185847a44f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5ODg2NA==", "bodyText": "@dkayiwa , thanks for that insight. I'd love to learn more about this from you.  Conceptually I'm confused about why any method annotated as a read-only transaction would ever result in an UnexpectedRollbackException - isn't the point of a read-only transaction that you want to prevent changes from getting written?  What is there to roll back?\nFrom the perspective of our code, I'm not entirely sure why limiting our exception handling so narrowly will lead to better behavior.  Why not catch all Exceptions here and then attempt to load by person?  What type of error would we be catching that we feel we'd be better off throwing back to the calling code?", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r519898864", "createdAt": "2020-11-09T15:28:17Z", "author": {"login": "mseaton"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -223,7 +223,7 @@ public Patient getPatientOrPromotePerson(Integer patientOrPersonId) {\n \t\ttry {\n \t\t\tpatient = Context.getPatientService().getPatient(patientOrPersonId);\n \t\t}\n-\t\tcatch (ClassCastException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIyNTkwNA=="}, "originalCommit": {"oid": "a899436afb4777b5b98e571418c957185847a44f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTU0Mjk0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoyOToxNlrOHy4GKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo1OTozMlrOHz9qGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ==", "bodyText": "@dkayiwa I was able to reproduce the issue and see the same errors that you reporting with my previous fix.  Here is my alternative solution, which fixes the issue for me.  Rather than try to load the patient, and then fall back to loading the person, this first loads the person, and checks to see if that person represents a valid patient or not.  This seems like the more correct behavior anyway, given our inheritance model.\nTo get this working in the refapp, I also needed to apply a related fix to idgen, which I raised a separate PR for, though you could also just disable the idgen module to test this standalone.\nThoughts on this approach?  This is a PR against the 2.3.x branch, which if accepted, we can up-port as needed.", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523109929", "createdAt": "2020-11-13T17:29:16Z", "author": {"login": "mseaton"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NjUyNA==", "bodyText": "This generally seems correct, but I'd be leery of backporting it if it's just to fix the bug reported in TRUNK-5977... does this manifest itself it somewhere, or is there a reason this bug is more insidious than on might believe. It seems like a bit of an edge case (registering an existing provider or other relationship person as a patient)?\nAnother option would be to just change this to catch the other exception thrown in 2.3.x, and then make the larger change in 2.4.x?", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523186524", "createdAt": "2020-11-13T19:47:40Z", "author": {"login": "mogoodrich"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMzQ5Mw==", "bodyText": "@mogoodrich - as previous PR comments (now marked as resolved) with @dkayiwa discovered, simply catching the other exception wasn't enough.  There were other exceptions that occurred.\nThe entire reason we are working on this and coding it against 2.3.x is because this is a bug that is manifesting in our soon-to-go-to-production distribution in Rwanda that is running 2.3.2, and we need the fix to go into 2.3.3.", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523203493", "createdAt": "2020-11-13T20:23:27Z", "author": {"login": "mseaton"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwNDQ1NQ==", "bodyText": "I think this is a more common use case than the ticket might have you believe - as in the Rwanda distribution it is common to create relationships and providers, including CHWs, on the patient dashboard, and then later if/when they become patients to promote these persons to patients via the process described here.", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523204455", "createdAt": "2020-11-13T20:25:11Z", "author": {"login": "mseaton"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxNzIzNA==", "bodyText": "Okay, fair enough... once we merge this we may actually want to upgrade the PIH EMR to 2.3.x to test...", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523217234", "createdAt": "2020-11-13T20:44:59Z", "author": {"login": "mogoodrich"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMzQ2Mg==", "bodyText": "OK, will wait for approval or change requests until Monday and then look to commit.", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r523233462", "createdAt": "2020-11-13T21:09:10Z", "author": {"login": "mseaton"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0OTYyNQ==", "bodyText": "@mseaton your solution is much better than the original code! \ud83d\udc4d", "url": "https://github.com/openmrs/openmrs-core/pull/3631#discussion_r524249625", "createdAt": "2020-11-16T12:59:32Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "diffHunk": "@@ -219,21 +220,17 @@ public Patient getPatient(Integer patientId) throws APIException {\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic Patient getPatientOrPromotePerson(Integer patientOrPersonId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwOTkyOQ=="}, "originalCommit": {"oid": "f6d18844f0f6c66147886cd2bf0430a7d1819001"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1268, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}