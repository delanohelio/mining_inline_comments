{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Mjc3ODc0", "number": 3506, "title": "Trunk 5927 Removed liquibase dependency for sequence update", "bodyText": "Description of what I changed\n\n\nRemoved liquibase dependency for sequence update\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/TRUNK-5927\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-08-13T09:53:09Z", "url": "https://github.com/openmrs/openmrs-core/pull/3506", "merged": true, "mergeCommit": {"oid": "3d3877ad8ecda4652ed95499872bf13a22e1fc16"}, "closed": true, "closedAt": "2020-08-17T10:58:05Z", "author": {"login": "Am-Coder"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-cnBWgH2gAyNDY3Mjc3ODc0OmUyMjM5ZTU0MTE1MDUyZGQ0OTg3MGFlZDQzMjM1MmU1YjlmZTExYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_u92XAFqTQ2ODMwNjA2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e2239e54115052dd49870aed432352e5b9fe11ac", "author": {"user": {"login": "Am-Coder", "name": null}}, "url": "https://github.com/openmrs/openmrs-core/commit/e2239e54115052dd49870aed432352e5b9fe11ac", "committedDate": "2020-08-13T09:29:21Z", "message": "TRUNK-5927 Remove dependency on Liquibase to update PostgreSQL sequences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73485062772184f63eac6b474316129d3f33c314", "author": {"user": {"login": "Am-Coder", "name": null}}, "url": "https://github.com/openmrs/openmrs-core/commit/73485062772184f63eac6b474316129d3f33c314", "committedDate": "2020-08-13T09:50:08Z", "message": "TRUNK-5927 Remove dependency on Liquibase to update PostgreSQL sequences"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NjYwNTc4", "url": "https://github.com/openmrs/openmrs-core/pull/3506#pullrequestreview-466660578", "createdAt": "2020-08-13T11:05:52Z", "commit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNTo1MlrOHAGwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNTo1MlrOHAGwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3MjgxMw==", "bodyText": "If these are the only lines that have led to all these changes, then we should just put it in a database utility class and that should be all.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r469872813", "createdAt": "2020-08-13T11:05:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDE5MDYw", "url": "https://github.com/openmrs/openmrs-core/pull/3506#pullrequestreview-467019060", "createdAt": "2020-08-13T18:17:54Z", "commit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoxNzo1NFrOHAX_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoxNzo1NFrOHAX_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg==", "bodyText": "@dkayiwa , as you can see here I am making use session to check for current database that is being used by OpenMRS via the set dialect, so the current change will never cause an issue on MySQL. I have checked it on both MySQL and PostgreSQL and everything is working fine.\nNow, to make use of database utility approach I am not able to figure out how to get access to this hibernate session in module's activator class. This session will be required so as to pass to this utility method.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470155102", "createdAt": "2020-08-13T18:17:54Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4561b0f285649271a15785169cc4f7e91fd5139", "author": {"user": {"login": "Am-Coder", "name": null}}, "url": "https://github.com/openmrs/openmrs-core/commit/e4561b0f285649271a15785169cc4f7e91fd5139", "committedDate": "2020-08-14T11:10:13Z", "message": "TRUNK-5927 Remove dependency on Liquibase to update PostgreSQL sequences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377", "author": {"user": {"login": "Am-Coder", "name": null}}, "url": "https://github.com/openmrs/openmrs-core/commit/38d306910c2a0fdc840c9205f3271656f32b5377", "committedDate": "2020-08-14T11:16:58Z", "message": "TRUNK-5927 Remove dependency on Liquibase to update PostgreSQL sequences"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NjM5Mjcz", "url": "https://github.com/openmrs/openmrs-core/pull/3506#pullrequestreview-467639273", "createdAt": "2020-08-14T14:49:55Z", "commit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0OTo1NVrOHA3lfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0OTo1NVrOHA3lfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw==", "bodyText": "Shouldn't we make this call only if we are running PostgreSQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470672767", "createdAt": "2020-08-14T14:49:55Z", "author": {"login": "dkayiwa"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzA1ODU0", "url": "https://github.com/openmrs/openmrs-core/pull/3506#pullrequestreview-468305854", "createdAt": "2020-08-17T09:26:11Z", "commit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoxMVrOHBhKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoxMVrOHBhKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1Mzg4Nw==", "bodyText": "instead of looping one by one, cant we submit them as a batch?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471353887", "createdAt": "2020-08-17T09:26:11Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzA2MDY2", "url": "https://github.com/openmrs/openmrs-core/pull/3506#pullrequestreview-468306066", "createdAt": "2020-08-17T09:26:29Z", "commit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoyOVrOHBhKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoyOVrOHBhKug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg==", "bodyText": "Why .list()?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471354042", "createdAt": "2020-08-17T09:26:29Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4478, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}