{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODQzNzA5", "number": 3472, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDoxODoxNVrOEWacFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNTo1NDowOVrOEWa1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTM3MzAxOnYy", "diffSide": "RIGHT", "path": "liquibase/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDoxODoxNVrOG9tWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoxMjoyM1rOG9zudQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTM2OQ==", "bodyText": "the PR did not run tests on Travis. Is that because this module did not have tests or do we need to set something up?\nCould you please use JUnit 5 instead of 4. We just migrated the entire openmrs-core. JUnit 4 is still around here for backwards compatibility for module devs. In core new tests should now be written in Junit 5. We still need to update the testing docs.\nI think it should be enough If you depend on jupiter-api and engine. Then in IntelliJ you can easily convert your tests with the Refactor Migrate or individually. What we learned so far is docunented at https://wiki.openmrs.org/display/docs/How+to+migrate+to+JUnit+5", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467359369", "createdAt": "2020-08-08T04:18:15Z", "author": {"login": "teleivo"}, "path": "liquibase/pom.xml", "diffHunk": "@@ -19,13 +19,42 @@\n \t<groupId>org.openmrs.liquibase</groupId>\n \t<artifactId>openmrs-liquibase</artifactId>\n \t<name>openmrs-liquibase</name>\n+\t<packaging>jar</packaging>\n \t<description>Generate  running liquibase change sets from the console</description>\n \n \t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>dom4j</groupId>\n+\t\t\t<artifactId>dom4j</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>jaxen</groupId>\n+\t\t\t<artifactId>jaxen</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ0NTE0Nw==", "bodyText": "Sure thing, will do.", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467445147", "createdAt": "2020-08-08T10:22:22Z", "author": {"login": "WolfSchlegel"}, "path": "liquibase/pom.xml", "diffHunk": "@@ -19,13 +19,42 @@\n \t<groupId>org.openmrs.liquibase</groupId>\n \t<artifactId>openmrs-liquibase</artifactId>\n \t<name>openmrs-liquibase</name>\n+\t<packaging>jar</packaging>\n \t<description>Generate  running liquibase change sets from the console</description>\n \n \t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>dom4j</groupId>\n+\t\t\t<artifactId>dom4j</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>jaxen</groupId>\n+\t\t\t<artifactId>jaxen</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTM2OQ=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2Mzc5Nw==", "bodyText": "Done.", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467463797", "createdAt": "2020-08-08T13:12:23Z", "author": {"login": "WolfSchlegel"}, "path": "liquibase/pom.xml", "diffHunk": "@@ -19,13 +19,42 @@\n \t<groupId>org.openmrs.liquibase</groupId>\n \t<artifactId>openmrs-liquibase</artifactId>\n \t<name>openmrs-liquibase</name>\n+\t<packaging>jar</packaging>\n \t<description>Generate  running liquibase change sets from the console</description>\n \n \t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>dom4j</groupId>\n+\t\t\t<artifactId>dom4j</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>jaxen</groupId>\n+\t\t\t<artifactId>jaxen</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTM2OQ=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTM3ODAyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDoyNTo0OFrOG9tYyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMjo1Mjo0N1rOG9zocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTk0NQ==", "bodyText": "I removed this dependency since it was unused and most importantly because its vulnerable with no fix according to dependabot. If you reintroduce it please use an up to date one like https://github.com/dom4j/dom4j/releases/tag/version-2.1.3", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467359945", "createdAt": "2020-08-08T04:25:48Z", "author": {"login": "teleivo"}, "path": "pom.xml", "diffHunk": "@@ -369,6 +369,16 @@\n \t\t\t\t<artifactId>hapi-structures-v26</artifactId>\n \t\t\t\t<version>2.1</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>dom4j</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ0NTAxOQ==", "bodyText": "I tried dom4j 2.1.3 but that version is not available in the OpenMRS Nexus repository. Do you know how to get it there pls?", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467445019", "createdAt": "2020-08-08T10:22:07Z", "author": {"login": "WolfSchlegel"}, "path": "pom.xml", "diffHunk": "@@ -369,6 +369,16 @@\n \t\t\t\t<artifactId>hapi-structures-v26</artifactId>\n \t\t\t\t<version>2.1</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>dom4j</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTk0NQ=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2MjI1OA==", "bodyText": "Actually that was wrong, dom4j 2.1.3 is available under the (changed) group id org.dom4j", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467462258", "createdAt": "2020-08-08T12:52:47Z", "author": {"login": "WolfSchlegel"}, "path": "pom.xml", "diffHunk": "@@ -369,6 +369,16 @@\n \t\t\t\t<artifactId>hapi-structures-v26</artifactId>\n \t\t\t\t<version>2.1</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>dom4j</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTk0NQ=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQzNjgxOnYy", "diffSide": "RIGHT", "path": "liquibase/src/test/java/org/openmrs/liquibase/AbstractSnapshotTunerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNTo1MToxOVrOG9tzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoxMjo0M1rOG9zujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2Njc4NA==", "bodyText": "this will need to be replaced with JUnit 5 https://junit.org/junit5/docs/5.4.0/api/org/junit/jupiter/api/io/TempDir.html", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467366784", "createdAt": "2020-08-08T05:51:19Z", "author": {"login": "teleivo"}, "path": "liquibase/src/test/java/org/openmrs/liquibase/AbstractSnapshotTunerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.liquibase;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalToCompressingWhiteSpace;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class AbstractSnapshotTunerTest {\n+\t\n+\tprivate static final String FILE_WITH_LICENSE_HEADER_MD = \"file-with-license-header.md\";\n+\t\n+\tprivate static final String FILE_WITHOUT_LICENSE_HEADER_MD = \"file-without-license-header.md\";\n+\t\n+\tprivate static final String HTTP_OPENMRS_ORG_LICENSE = \"http://openmrs.org/license\";\n+\t\n+\tprivate static String PATH_TO_TEST_RESOURCES = \"src\" + File.separator + \"test\" + File.separator + \"resources\"\n+\t        + File.separator;\n+\t\n+\t/*\n+\t * An instance of org.openmrs.liquibase.SchemaOnlyTuner is used to test behaviour implemented in the \n+\t * org.openmrs.liquibase.AbstractSnapshotTuner class.\n+\t */\n+\tprivate SchemaOnlyTuner schemaOnlyTuner;\n+\t\n+\t@Rule\n+\tpublic TemporaryFolder tempFolder = new TemporaryFolder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2MzgyMg==", "bodyText": "Done.", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467463822", "createdAt": "2020-08-08T13:12:43Z", "author": {"login": "WolfSchlegel"}, "path": "liquibase/src/test/java/org/openmrs/liquibase/AbstractSnapshotTunerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.liquibase;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalToCompressingWhiteSpace;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class AbstractSnapshotTunerTest {\n+\t\n+\tprivate static final String FILE_WITH_LICENSE_HEADER_MD = \"file-with-license-header.md\";\n+\t\n+\tprivate static final String FILE_WITHOUT_LICENSE_HEADER_MD = \"file-without-license-header.md\";\n+\t\n+\tprivate static final String HTTP_OPENMRS_ORG_LICENSE = \"http://openmrs.org/license\";\n+\t\n+\tprivate static String PATH_TO_TEST_RESOURCES = \"src\" + File.separator + \"test\" + File.separator + \"resources\"\n+\t        + File.separator;\n+\t\n+\t/*\n+\t * An instance of org.openmrs.liquibase.SchemaOnlyTuner is used to test behaviour implemented in the \n+\t * org.openmrs.liquibase.AbstractSnapshotTuner class.\n+\t */\n+\tprivate SchemaOnlyTuner schemaOnlyTuner;\n+\t\n+\t@Rule\n+\tpublic TemporaryFolder tempFolder = new TemporaryFolder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2Njc4NA=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQzNzg3OnYy", "diffSide": "RIGHT", "path": "liquibase/src/test/java/org/openmrs/liquibase/SchemaOnlyTunerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNTo1MzowM1rOG9t0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo0MDoyOVrOG9zAnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NjkxNw==", "bodyText": "thesting exceptions is done only with assertThrows in JUnit 5", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467366917", "createdAt": "2020-08-08T05:53:03Z", "author": {"login": "teleivo"}, "path": "liquibase/src/test/java/org/openmrs/liquibase/SchemaOnlyTunerTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.liquibase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.dom4j.Document;\n+import org.dom4j.DocumentException;\n+import org.dom4j.DocumentHelper;\n+import org.dom4j.Node;\n+import org.dom4j.XPath;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalToCompressingWhiteSpace;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+public class SchemaOnlyTunerTest {\n+\t\n+\tprivate static final String LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML = \"org\" + File.separator + \"openmrs\" + File.separator\n+\t        + \"liquibase\" + File.separator + \"snapshots\" + File.separator + \"schema-only\" + File.separator\n+\t        + \"liquibase-schema-only-SNAPSHOT.xml\";\n+\t\n+\tprivate static final String LIQUIBASE_SCHEMA_ONLY_UPDATED_SNAPSHOT_XML = \"org\" + File.separator + \"openmrs\"\n+\t        + File.separator + \"liquibase\" + File.separator + \"snapshots\" + File.separator + \"schema-only\" + File.separator\n+\t        + \"liquibase-schema-only-UPDATED-SNAPSHOT.xml\";\n+\t\n+\tprivate static String PATH_TO_TEST_RESOURCES = \"src\" + File.separator + \"test\" + File.separator + \"resources\"\n+\t        + File.separator;\n+\t\n+\tprivate Document document;\n+\t\n+\tprivate Map<String, String> namespaceUris;\n+\t\n+\tprivate SchemaOnlyTuner schemaOnlyTuner;\n+\t\n+\t@Rule\n+\tpublic TemporaryFolder tempFolder = new TemporaryFolder();\n+\t\n+\t@Before\n+\tpublic void setup() throws DocumentException {\n+\t\tschemaOnlyTuner = new SchemaOnlyTuner();\n+\t\tdocument = schemaOnlyTuner.readChangeLogResource(LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML);\n+\t\tnamespaceUris = schemaOnlyTuner.getNamespaceUris();\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateUpdatedChangeLogFile() throws DocumentException, IOException {\n+\t\t// given\n+\t\tString sourcePath = PATH_TO_TEST_RESOURCES + LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML;\n+\t\tString targetPath = tempFolder.newFile(\"liquibase-schema-only-UPDATED-SNAPSHOT.xml\").getPath();\n+\t\t\n+\t\t// when\n+\t\tschemaOnlyTuner.createUpdatedChangeLogFile(sourcePath, targetPath);\n+\t\t\n+\t\t// then\n+\t\tDocument expected = schemaOnlyTuner.readChangeLogResource(LIQUIBASE_SCHEMA_ONLY_UPDATED_SNAPSHOT_XML);\n+\t\tDocument actual = schemaOnlyTuner.readChangeLogFile(targetPath);\n+\t\t\n+\t\tassertThat(expected.asXML(), equalToCompressingWhiteSpace(actual.asXML()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDetachChangeSetsForLiquibaseTables() {\n+\t\t// given\n+\t\tXPath xpathOne = DocumentHelper.createXPath(\"//dbchangelog:createTable[@tableName=\\\"liquibasechangelog\\\"]\\\"\");\n+\t\txpathOne.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tXPath xpathTwo = DocumentHelper.createXPath(\"//dbchangelog:createTable[@tableName=\\\"liquibasechangeloglock\\\"]\\\"\");\n+\t\txpathTwo.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tassertEquals(1, xpathOne.selectNodes(document).size());\n+\t\tassertEquals(1, xpathTwo.selectNodes(document).size());\n+\t\t\n+\t\t// when\n+\t\tDocument actual = schemaOnlyTuner.detachLiquibaseTables(document);\n+\t\t\n+\t\t// then\n+\t\tassertEquals(0, xpathOne.selectNodes(actual).size());\n+\t\tassertEquals(0, xpathTwo.selectNodes(actual).size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReplaceBitTypeWithBooleanType() {\n+\t\t// given\n+\t\tXPath xpath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"BIT(1)\\\"]/attribute::type\");\n+\t\txpath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xpath.selectNodes(document);\n+\t\tassertEquals(94, nodes.size());\n+\t\t\n+\t\t// when\n+\t\tDocument actual = schemaOnlyTuner.replaceBitWithBoolean(document);\n+\t\t\n+\t\t// then\n+\t\tfor (Node node : nodes) {\n+\t\t\tassertEquals(\"BOOLEAN\", node.getParent().attributeValue(\"type\"));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReplaceLongtextTypeWithClobType() {\n+\t\t// given\n+\t\tXPath xPath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"LONGTEXT\\\"]/attribute::type\");\n+\t\txPath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xPath.selectNodes(document);\n+\t\tassertEquals(1, nodes.size());\n+\t\t\n+\t\t// when\n+\t\tSchemaOnlyTuner schemaOnlyTunerSpy = Mockito.spy(schemaOnlyTuner);\n+\t\tDocument actual = schemaOnlyTunerSpy.replaceLongtextWithClob(document);\n+\t\t\n+\t\t// then\n+\t\tfor (Node node : nodes) {\n+\t\t\tassertEquals(\"CLOB\", node.getParent().attributeValue(\"type\"));\n+\t\t}\n+\t\t\n+\t\tMockito.verify(schemaOnlyTunerSpy).assertLongtextNodes(any());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldAssertLongtextNode() {\n+\t\t// given\n+\t\tXPath xPath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"LONGTEXT\\\"]/attribute::type\");\n+\t\txPath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xPath.selectNodes(document);\n+\t\tassertEquals(1, nodes.size());\n+\t\t\n+\t\t// when and then\n+\t\tassertTrue(schemaOnlyTuner.assertLongtextNodes(nodes));\n+\t}\n+\t\n+\t@Test(expected = AssertionError.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MjA2Mw==", "bodyText": "Done.", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467452063", "createdAt": "2020-08-08T10:40:29Z", "author": {"login": "WolfSchlegel"}, "path": "liquibase/src/test/java/org/openmrs/liquibase/SchemaOnlyTunerTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.liquibase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.dom4j.Document;\n+import org.dom4j.DocumentException;\n+import org.dom4j.DocumentHelper;\n+import org.dom4j.Node;\n+import org.dom4j.XPath;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalToCompressingWhiteSpace;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+public class SchemaOnlyTunerTest {\n+\t\n+\tprivate static final String LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML = \"org\" + File.separator + \"openmrs\" + File.separator\n+\t        + \"liquibase\" + File.separator + \"snapshots\" + File.separator + \"schema-only\" + File.separator\n+\t        + \"liquibase-schema-only-SNAPSHOT.xml\";\n+\t\n+\tprivate static final String LIQUIBASE_SCHEMA_ONLY_UPDATED_SNAPSHOT_XML = \"org\" + File.separator + \"openmrs\"\n+\t        + File.separator + \"liquibase\" + File.separator + \"snapshots\" + File.separator + \"schema-only\" + File.separator\n+\t        + \"liquibase-schema-only-UPDATED-SNAPSHOT.xml\";\n+\t\n+\tprivate static String PATH_TO_TEST_RESOURCES = \"src\" + File.separator + \"test\" + File.separator + \"resources\"\n+\t        + File.separator;\n+\t\n+\tprivate Document document;\n+\t\n+\tprivate Map<String, String> namespaceUris;\n+\t\n+\tprivate SchemaOnlyTuner schemaOnlyTuner;\n+\t\n+\t@Rule\n+\tpublic TemporaryFolder tempFolder = new TemporaryFolder();\n+\t\n+\t@Before\n+\tpublic void setup() throws DocumentException {\n+\t\tschemaOnlyTuner = new SchemaOnlyTuner();\n+\t\tdocument = schemaOnlyTuner.readChangeLogResource(LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML);\n+\t\tnamespaceUris = schemaOnlyTuner.getNamespaceUris();\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateUpdatedChangeLogFile() throws DocumentException, IOException {\n+\t\t// given\n+\t\tString sourcePath = PATH_TO_TEST_RESOURCES + LIQUIBASE_SCHEMA_ONLY_SNAPSHOT_XML;\n+\t\tString targetPath = tempFolder.newFile(\"liquibase-schema-only-UPDATED-SNAPSHOT.xml\").getPath();\n+\t\t\n+\t\t// when\n+\t\tschemaOnlyTuner.createUpdatedChangeLogFile(sourcePath, targetPath);\n+\t\t\n+\t\t// then\n+\t\tDocument expected = schemaOnlyTuner.readChangeLogResource(LIQUIBASE_SCHEMA_ONLY_UPDATED_SNAPSHOT_XML);\n+\t\tDocument actual = schemaOnlyTuner.readChangeLogFile(targetPath);\n+\t\t\n+\t\tassertThat(expected.asXML(), equalToCompressingWhiteSpace(actual.asXML()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDetachChangeSetsForLiquibaseTables() {\n+\t\t// given\n+\t\tXPath xpathOne = DocumentHelper.createXPath(\"//dbchangelog:createTable[@tableName=\\\"liquibasechangelog\\\"]\\\"\");\n+\t\txpathOne.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tXPath xpathTwo = DocumentHelper.createXPath(\"//dbchangelog:createTable[@tableName=\\\"liquibasechangeloglock\\\"]\\\"\");\n+\t\txpathTwo.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tassertEquals(1, xpathOne.selectNodes(document).size());\n+\t\tassertEquals(1, xpathTwo.selectNodes(document).size());\n+\t\t\n+\t\t// when\n+\t\tDocument actual = schemaOnlyTuner.detachLiquibaseTables(document);\n+\t\t\n+\t\t// then\n+\t\tassertEquals(0, xpathOne.selectNodes(actual).size());\n+\t\tassertEquals(0, xpathTwo.selectNodes(actual).size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReplaceBitTypeWithBooleanType() {\n+\t\t// given\n+\t\tXPath xpath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"BIT(1)\\\"]/attribute::type\");\n+\t\txpath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xpath.selectNodes(document);\n+\t\tassertEquals(94, nodes.size());\n+\t\t\n+\t\t// when\n+\t\tDocument actual = schemaOnlyTuner.replaceBitWithBoolean(document);\n+\t\t\n+\t\t// then\n+\t\tfor (Node node : nodes) {\n+\t\t\tassertEquals(\"BOOLEAN\", node.getParent().attributeValue(\"type\"));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReplaceLongtextTypeWithClobType() {\n+\t\t// given\n+\t\tXPath xPath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"LONGTEXT\\\"]/attribute::type\");\n+\t\txPath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xPath.selectNodes(document);\n+\t\tassertEquals(1, nodes.size());\n+\t\t\n+\t\t// when\n+\t\tSchemaOnlyTuner schemaOnlyTunerSpy = Mockito.spy(schemaOnlyTuner);\n+\t\tDocument actual = schemaOnlyTunerSpy.replaceLongtextWithClob(document);\n+\t\t\n+\t\t// then\n+\t\tfor (Node node : nodes) {\n+\t\t\tassertEquals(\"CLOB\", node.getParent().attributeValue(\"type\"));\n+\t\t}\n+\t\t\n+\t\tMockito.verify(schemaOnlyTunerSpy).assertLongtextNodes(any());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldAssertLongtextNode() {\n+\t\t// given\n+\t\tXPath xPath = DocumentHelper.createXPath(\"//dbchangelog:column[@type=\\\"LONGTEXT\\\"]/attribute::type\");\n+\t\txPath.setNamespaceURIs(namespaceUris);\n+\t\t\n+\t\tList<Node> nodes = xPath.selectNodes(document);\n+\t\tassertEquals(1, nodes.size());\n+\t\t\n+\t\t// when and then\n+\t\tassertTrue(schemaOnlyTuner.assertLongtextNodes(nodes));\n+\t}\n+\t\n+\t@Test(expected = AssertionError.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NjkxNw=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQzODM5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNTo1NDowOVrOG9t0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo0MDo0NlrOG9zAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2Njk4NQ==", "bodyText": "just commented on two things that cannot be automatically migrated to JUnit 5 with Intellijs migration tools", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467366985", "createdAt": "2020-08-08T05:54:09Z", "author": {"login": "teleivo"}, "path": "pom.xml", "diffHunk": "@@ -369,6 +369,16 @@\n \t\t\t\t<artifactId>hapi-structures-v26</artifactId>\n \t\t\t\t<version>2.1</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>dom4j</groupId>\n+\t\t\t\t<artifactId>dom4j</artifactId>\n+\t\t\t\t<version>1.6.1</version>\n+\t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>jaxen</groupId>\n+\t\t\t\t<artifactId>jaxen</artifactId>\n+\t\t\t\t<version>1.2.0</version>\n+\t\t\t</dependency>\n \t\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MjA5OA==", "bodyText": "thanks, Ivo", "url": "https://github.com/openmrs/openmrs-core/pull/3472#discussion_r467452098", "createdAt": "2020-08-08T10:40:46Z", "author": {"login": "WolfSchlegel"}, "path": "pom.xml", "diffHunk": "@@ -369,6 +369,16 @@\n \t\t\t\t<artifactId>hapi-structures-v26</artifactId>\n \t\t\t\t<version>2.1</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>dom4j</groupId>\n+\t\t\t\t<artifactId>dom4j</artifactId>\n+\t\t\t\t<version>1.6.1</version>\n+\t\t\t</dependency>\n+\t\t\t<dependency>\n+\t\t\t\t<groupId>jaxen</groupId>\n+\t\t\t\t<artifactId>jaxen</artifactId>\n+\t\t\t\t<version>1.2.0</version>\n+\t\t\t</dependency>\n \t\t\t<dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2Njk4NQ=="}, "originalCommit": {"oid": "70bf5f4617a097bc66e409afdc9826953756a8a1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1279, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}