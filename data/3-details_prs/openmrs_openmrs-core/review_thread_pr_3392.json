{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDQ1MjY2", "number": 3392, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1OTo1MlrOERKHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToxODowNFrOESBUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI2ODk4OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1OTo1MlrOG1t9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo1MDoyNVrOG2HEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwMw==", "bodyText": "@teleivo  i try to set a changeLogDetective field  ReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective); but i am getting this error :\njava.lang.IllegalStateException: Could not access method or field: Can not set static final org.openmrs.liquibase.ChangeLogDetective field org.openmrs.util.DatabaseUpdater.changeLogDetective to org.openmrs.liquibase.ChangeLogDetective", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r458980803", "createdAt": "2020-07-22T17:59:52Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -78,18 +75,22 @@ public void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDa\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n \t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n \t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n-\t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n+\t\t/*when(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n+\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n+\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n+*/\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b178d5d9bca78a56aae6201e03d148fd7c3e31"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4ODIxMg==", "bodyText": "cc @ibacher  @mozzy11", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r458988212", "createdAt": "2020-07-22T18:12:14Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -78,18 +75,22 @@ public void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDa\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n \t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n \t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n-\t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n+\t\t/*when(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n+\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n+\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n+*/\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwMw=="}, "originalCommit": {"oid": "89b178d5d9bca78a56aae6201e03d148fd7c3e31"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MzI2Nw==", "bodyText": "its always a good idea to read the javadocs of the methods you are using. if you are talking about the spring reflectionutils then yes the javadoc says it does not support final fields. for these you have to use powermock.reflection you can find a usage in the api package. I think something like Whitebox.set...\nYou will then also need to adjust the dependencies of the web package. Also see the api pom.XML where I added a test score dependency for powermock.reflection and excluded the other 2 powermock dependencies.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r459263267", "createdAt": "2020-07-23T07:32:07Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -78,18 +75,22 @@ public void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDa\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n \t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n \t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n-\t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n+\t\t/*when(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n+\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n+\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n+*/\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwMw=="}, "originalCommit": {"oid": "89b178d5d9bca78a56aae6201e03d148fd7c3e31"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3MTM3Mg==", "bodyText": "thanks @teleivo .  i will eventually used whitebox.set. I avoided using it, since we want to remove powermock dependencies.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r459371372", "createdAt": "2020-07-23T11:04:26Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -78,18 +75,22 @@ public void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDa\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n \t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n \t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n-\t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n+\t\t/*when(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n+\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n+\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n+*/\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwMw=="}, "originalCommit": {"oid": "89b178d5d9bca78a56aae6201e03d148fd7c3e31"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MjAwMg==", "bodyText": "did you have a look at the api pom? https://github.com/openmrs/openmrs-core/blob/master/api/pom.xml#L24-L45\nI did exclude powermock mockito library and its junit 4 runner in the api package. what we are using is simply the powermock reflection library. since that one allows setting of static final fields.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r459392002", "createdAt": "2020-07-23T11:50:25Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -78,18 +75,22 @@ public void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDa\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n \t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n \t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n-\t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tReflectionTestUtils.setField(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n+\t\t/*when(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n+\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n+\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n+*/\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n+\t\tverify(DatabaseUpdater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwMw=="}, "originalCommit": {"oid": "89b178d5d9bca78a56aae6201e03d148fd7c3e31"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzMxMDIyOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToxMzozN1rOG3CjjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToxMzozN1rOG3CjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NjczMw==", "bodyText": "i had some error with the database connection that is why i extends BaseContextSensitiveTest", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r460366733", "createdAt": "2020-07-25T05:13:37Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -9,49 +9,50 @@\n  */\n package org.openmrs.web.filter.update;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.openmrs.liquibase.LiquibaseProvider;\n-import org.openmrs.util.DatabaseUpdater;\n-import org.openmrs.util.DatabaseUpdater.OpenMRSChangeSet;\n-import org.openmrs.util.DatabaseUpdaterLiquibaseProvider;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsEmptyCollection.empty;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.when;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.openmrs.liquibase.ChangeLogDetective;\n+import org.openmrs.liquibase.ChangeLogVersionFinder;\n+import org.openmrs.liquibase.LiquibaseProvider;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n+import org.openmrs.util.DatabaseUpdater;\n+import org.openmrs.util.DatabaseUpdater.OpenMRSChangeSet;\n+import org.openmrs.util.DatabaseUpdaterLiquibaseProvider;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.reflect.Whitebox;\n+\n /**\n  * Tests {@link UpdateFilterModel}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(DatabaseUpdater.class)\n-@PowerMockIgnore({ \"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\" })\n-public class UpdateFilterModelTest {\n+public class UpdateFilterModelTest  extends BaseContextSensitiveTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzMxMzM1OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToxODowNFrOG3Ck-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozOTo1OVrOG7a4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ==", "bodyText": "the error is with this method . i have some difficulty to manipulate the behavior of this method .", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r460367099", "createdAt": "2020-07-25T05:18:04Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzQwNA==", "bodyText": "java.lang.IllegalStateException: identifying the snapshot version that had been used to initialize the OpenMRS database failed as no candidate change set resulted in zero un-run changes", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r460367404", "createdAt": "2020-07-25T05:22:19Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2Nzk5MQ==", "bodyText": "the exception is cause by this line\n\n  \n    \n      openmrs-core/api/src/main/java/org/openmrs/liquibase/ChangeLogDetective.java\n    \n    \n         Line 116\n      in\n      02ba3ae\n    \n    \n    \n    \n\n        \n          \n           throw new IllegalStateException( \n        \n    \n  \n\n\ni have try to solve the error with this FieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true); but it did  not work", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r460367991", "createdAt": "2020-07-25T05:30:36Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzI0Mw==", "bodyText": "@WolfSchlegel can you help us out here. So with JUnit 5 PowerMock and thus mocking static methods does not work anymore. We are migrating all test to JUnit 5. This might be the last one we have to migrate. What we can do is use reflection to set static fields. Can you help us out with replacing powermock in this test with reflection so we keep its original intent.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r460407243", "createdAt": "2020-07-25T13:54:45Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNzM4Mg==", "bodyText": "Looking into this and apologies for the delay...\norg/openmrs/web/filter/update/UpdateFilterModelTest.java is a unit test and extending BaseContextSensitiveTest makes it an integration test. I would advise against that and would revert that change first.\nIn the context of https://issues.openmrs.org/browse/TRUNK-4830 I wrote a few new integration tests and found that tests based on BaseContextSensitiveTestare not well isolated and understanding the behaviour of individual tests was quite hard. Eventually I created a new base class for integration tests.\n@achilep could you please change the test so that it is a unit test again and ping me when this is done?\nThank you,\nWolf", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r462407382", "createdAt": "2020-07-29T15:54:59Z", "author": {"login": "WolfSchlegel"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODQ1Ng==", "bodyText": "sorry @WolfSchlegel for the delay . i restarted every thing back . this is the initial change .", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r463368456", "createdAt": "2020-07-31T02:09:49Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMjA1Mg==", "bodyText": "Thanks, I have a look", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r463632052", "createdAt": "2020-07-31T14:06:30Z", "author": {"login": "WolfSchlegel"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNjU1Mg==", "bodyText": "Hey there,\nplease have a look at WolfSchlegel@6a08797.\nI introduced a wrapper for the (mostly static) org/openmrs/util/DatabaseUpdater.java class so that PowerMock is no longer needed for mocking it. This is good news for org/openmrs/web/filter/update/UpdateFilterModelTest.java.\nHowever, this comes at a cost as the next question is how to unit test the new wrapper without resorting to PowerMock. I gave JMockit a short try but bumped into issues that are (allegedly) resolved by rearranging the order of dependencies in the pom file (yuck) and it seems a java agent needs to be registered as well for JMockit (yuck-ish).\nSo I am back at square one looking for a unit test that proves that the all new org/openmrs/util/DatabaseUpdaterWrapper.java class plays nicely with the incumbent org/openmrs/util/DatabaseUpdater.java class.\nTo be frank, I am not sure how Java reflections or respective Spring utilities help here. At the end of the day I need to verify that the wrapper calls the (static) methods. For this purpose I introduced some static helper variables and a helper method in org/openmrs/util/DatabaseUpdater.java.\nPlease have a look and let me know what you think. I believe we are facing a trade-off between not testing something and adding test helpers in production code.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r464606552", "createdAt": "2020-08-03T19:05:07Z", "author": {"login": "WolfSchlegel"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0NDc3OA==", "bodyText": "thank you @WolfSchlegel !\nI think your suggestion for adding a wrapper is good. I added a suggestion in the code at the commit you sent.\nOur goal with the UpdateModelFilterTest is to test that the filter makes sure updates are made. Your wrapper enables us to do just that. The update logic should be tested else were.\nI am ok with not testing the wrapper as its super thin. This tradeoff is also ok for me since it enables us to remove powermock which hopefully forces us to rethink our designs going forward. The proliferation of static methods with side effects in the code base are a sign of bad design for me that circumvent springs dependency injection and harm testability.\nCan you please bring in your changes while keeping the UpdateModelFilterTest a JUnit 4 test. We can chat about my suggestion on the code. @achilep  will then do the migration to JUnit 5 once the changes are merged.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r464844778", "createdAt": "2020-08-04T07:09:50Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MjgwMQ==", "bodyText": "thanks @WolfSchlegel", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r464952801", "createdAt": "2020-08-04T10:25:35Z", "author": {"login": "achilep"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTY2OQ==", "bodyText": "Thanks for your feedback, @teleivo .\nI removed the hand-rolled verification from the DatabaseUpdater class and moved the new wrapper to the same package that contains the UpdateFilterModel class. Making the wrapper package-private resulted in flaky Mockito behaviour when running mvn clean install so the wrapper continues to be a public class.\nI created this pull request which is based on the current OpenMRS master. If you do not want to get an implicit rebase against master in mid flight, best cherry pick the relevant changes from here.\nPlease let me know if there is anything else I can do.", "url": "https://github.com/openmrs/openmrs-core/pull/3392#discussion_r464959669", "createdAt": "2020-08-04T10:39:59Z", "author": {"login": "WolfSchlegel"}, "path": "web/src/test/java/org/openmrs/web/filter/update/UpdateFilterModelTest.java", "diffHunk": "@@ -77,19 +78,20 @@ public void createUpdateFilterModel_shouldrequireAnUpdateAndSetChangesToUnrunDat\n \tpublic void createUpdateFilterModel_shouldRequiredAnUpdateIfChangesAreEmptyButDatabaseUpdaterDoesRequireAnUpdate()\n \t        throws Exception {\n \t\tList<OpenMRSChangeSet> changes = new ArrayList<>();\n-\t\t\n-\t\twhen(DatabaseUpdater.getUnrunDatabaseChanges(any(LiquibaseProvider.class))).thenReturn(changes);\n-\t\twhen(DatabaseUpdater.isLocked()).thenReturn(false);\n-\t\twhen(DatabaseUpdater.updatesRequired()).thenReturn(true);\n-\t\t\n+\n+\t\tChangeLogDetective changeLogDetective = new ChangeLogDetective();\n+\t\tChangeLogVersionFinder changeLogVersionFinder = new ChangeLogVersionFinder();\n+\t\t\t\t\n \t\tmodel = new UpdateFilterModel(liquibaseProvider);\n+\t\tFieldUtils.writeField(model, \"updateRequired\", true, true);\n+\t\tFieldUtils.writeField(model, \"changes\", changes, true);\n+\t\tFieldUtils.writeField(changeLogDetective, \"changeLogVersionFinder\", changeLogVersionFinder, true);\n+\t\tWhitebox.setInternalState(DatabaseUpdater.class, \"changeLogDetective\", changeLogDetective);\n \t\t\n-\t\tassertTrue(\"should require an update\", model.updateRequired);\n+\t\tassertTrue(model.updateRequired, \"should require an update\");\n \t\tassertThat(model.changes, is(empty()));\n \t\t\n-\t\tPowerMockito.verifyStatic(DatabaseUpdater.class);\n \t\tDatabaseUpdater.getUnrunDatabaseChanges(liquibaseProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzA5OQ=="}, "originalCommit": {"oid": "70e405595bce6f2272e210ec7b5638c60a5ee5d1"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1325, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}