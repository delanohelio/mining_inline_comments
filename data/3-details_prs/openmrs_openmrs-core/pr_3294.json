{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDQ2MTg2", "number": 3294, "title": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected\u2026", "bodyText": "\u2026..1)\n\n\n\nDescription of what I changed\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/TRUNK-5813\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-07-05T18:53:55Z", "url": "https://github.com/openmrs/openmrs-core/pull/3294", "merged": true, "mergeCommit": {"oid": "d0871eeddc746fe858be9680c273cf62d58e95e1"}, "closed": true, "closedAt": "2020-07-06T13:16:26Z", "author": {"login": "achilep"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyBbQHAFqTQ0MjY5OTIyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyPV9-ABqjM1MTU0MjY2ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjk5MjI0", "url": "https://github.com/openmrs/openmrs-core/pull/3294#pullrequestreview-442699224", "createdAt": "2020-07-05T19:01:10Z", "commit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTowMToxMFrOGtEODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTowMToxMFrOGtEODQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODIzNw==", "bodyText": "this method have been commented because there is no Executable in junit 4", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449908237", "createdAt": "2020-07-05T19:01:10Z", "author": {"login": "achilep"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -1199,11 +1178,11 @@ public void parse_shouldIgnoreAdviceWithoutPoint() throws IOException {\n \n \t\tassertThat(module.getAdvicePoints(), is(equalTo(Collections.EMPTY_LIST)));\n \t}\n+\t/*private void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n+\t\tModuleException thrown = assertThrows(ModuleException.class, executable.execute());\n+\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n+\t}*/\n \n-\tprivate void expectModuleExceptionWithMessage(String expectedMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 275}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzU5ODkx", "url": "https://github.com/openmrs/openmrs-core/pull/3294#pullrequestreview-442759891", "createdAt": "2020-07-06T03:54:57Z", "commit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzo1NDo1N1rOGtIEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoxMDozMFrOGtIPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MTIwMQ==", "bodyText": "we already solved this with\n\tprivate void expectModuleExceptionWithMessage(ThrowingRunnable executable, String expectedMessage) {\n\t\tModuleException thrown = assertThrows(ModuleException.class, executable);\n\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\t}\n(#3279 (comment))", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449971201", "createdAt": "2020-07-06T03:54:57Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -1199,11 +1178,11 @@ public void parse_shouldIgnoreAdviceWithoutPoint() throws IOException {\n \n \t\tassertThat(module.getAdvicePoints(), is(equalTo(Collections.EMPTY_LIST)));\n \t}\n+\t/*private void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n+\t\tModuleException thrown = assertThrows(ModuleException.class, executable.execute());\n+\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n+\t}*/\n \n-\tprivate void expectModuleExceptionWithMessage(String expectedMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODIzNw=="}, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MjcxOA==", "bodyText": "@achilep please in general do never just comment out methods. If your changes makes something fail you need to understand why that is. If in this case the method is not needed anymore delete it. Please delete the 2 commented methods.", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449972718", "createdAt": "2020-07-06T04:02:53Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -157,17 +151,17 @@ public void parse_shouldParseValidLogicModuleFromFile() {\n \t\tassertThat(module.getMappingFiles(), hasItems(\"LogicRuleToken.hbm.xml\"));\n \t}\n \n-\tprivate void expectModuleExceptionWithTranslatedMessage(String s) {\n+\t/*private void expectModuleExceptionWit hTranslatedMessage(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(exception.getMessage(), is(\"Module file does not have the correct '.omod' file extension Module: reporting.jar\"));\n          \n          \n            \n            \t\tassertThat(exception.getMessage(), startsWith(messageSourceService.getMessage(\"Module.error.invalidFileExtension\")));\n          \n      \n    \n    \n  \n\nIf startsWith is not working use containsString", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449972953", "createdAt": "2020-07-06T04:04:23Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -71,17 +69,15 @@ public static void setUp() throws ParserConfigurationException {\n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfGivenNull() {\n \n-\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.fileCannotBeNull\");\n-\n-\t\tnew ModuleFileParser((File) null);\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser((File) null));\n+\t\tassertThat(exception.getMessage(), is(messageSourceService.getMessage(\"Module.error.fileCannotBeNull\")));\n \t}\n \n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfNotEndingInOmod() {\n \n-\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.invalidFileExtension\");\n-\n-\t\tnew ModuleFileParser(new File(\"reporting.jar\"));\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser(new File(\"reporting.jar\")));\n+\t\tassertThat(exception.getMessage(), is(\"Module file does not have the correct '.omod' file extension Module: reporting.jar\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MzI2NA==", "bodyText": "please inline the expectedMessage since we do not need it as a local variable", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973264", "createdAt": "2020-07-06T04:05:54Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -128,17 +123,16 @@ public void parse_shouldFailIfModuleHasConfigInvalidConfigVersion() throws Excep\n \t\tString invalidConfigVersion = \"0.0.1\";\n \t\tString expectedMessage = messageSourceService\n \t\t\t.getMessage(\"Module.error.invalidConfigVersion\",\n-\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6\" }, Context.getLocale());\n-\t\texpectModuleExceptionWithMessage(expectedMessage);\n+\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6 Module: modulefileparsertest.omod\" }, Context.getLocale());\n \n \t\tDocument configXml = documentBuilder.newDocument();\n \t\tElement root = configXml.createElement(\"module\");\n \t\tconfigXml.appendChild(root);\n \t\tconfigXml.getDocumentElement().setAttribute(\"configVersion\", invalidConfigVersion);\n \n \t\tModuleFileParser parser = new ModuleFileParser(writeConfigXmlToFile(configXml));\n-\n-\t\tparser.parse();\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> parser.parse());\n+\t\tassertThat(exception.getMessage(), is(expectedMessage));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MzQ5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tNullPointerException exception=assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));\n          \n          \n            \n            \t\tNullPointerException exception= assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));\n          \n      \n    \n    \n  \n\nplease pay attention to the whitespaces!", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973496", "createdAt": "2020-07-06T04:07:08Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -98,22 +97,19 @@ public void after() {\n \t@Test\n \tpublic void moduleFileParserConstruction_shouldFailIfGivenNull() {\n \n-\t\texpectedException.expect(NullPointerException.class);\n-\t\texpectedException.expectMessage(\"messageSourceService must not be null\");\n-\n-\t\tnew ModuleFileParser((MessageSourceService) null);\n+\t\tNullPointerException exception=assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mzk1MQ==", "bodyText": "indentation is missing. check whitespaces", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973951", "createdAt": "2020-07-06T04:09:32Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/util/HandlerUtilTest.java", "diffHunk": "@@ -76,10 +73,9 @@ public void getPreferredHandler_shouldReturnThePreferredHandlerForThePassedHandl\n \t */\n \t@Test\n \tpublic void getPreferredHandler_shouldThrowAAPIExceptionExceptionIfNoHandlerIsFound() {\n-\t\tthrown.expect(APIException.class);\n-\t\tthrown.expectMessage(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null));\n \t\t\n-\t\tHandlerUtil.getPreferredHandler(Validator.class, Integer.class);\n+\tAPIException exception = assertThrows(APIException.class, () -> HandlerUtil.getPreferredHandler(Validator.class, Integer.class));\n+\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NDExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n          \n          \n            \n            \t\tMalformedURLException exception = assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449974113", "createdAt": "2020-07-06T04:10:13Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/util/HttpUrlTest.java", "diffHunk": "@@ -38,16 +35,16 @@ public void constructor_shouldNotThrowExceptionIfItIsAnHttpsUrl() throws Malform\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Not a valid http(s) url\");\n-\t\tnew HttpUrl(\"not_http\");\n+\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NDE2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n          \n          \n            \n            \t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(null));", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449974168", "createdAt": "2020-07-06T04:10:30Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/util/HttpUrlTest.java", "diffHunk": "@@ -38,16 +35,16 @@ public void constructor_shouldNotThrowExceptionIfItIsAnHttpsUrl() throws Malform\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Not a valid http(s) url\");\n-\t\tnew HttpUrl(\"not_http\");\n+\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n+\t\tassertThat(exception.getMessage(), is(\"Not a valid http(s) url\"));\n \t}\n \t\n \t@Test\n \tpublic void constructor_shouldNotAllowNullUrls() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Url cannot be null\");\n-\t\tnew HttpUrl(null);\n+\t\t\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "committedDate": "2020-07-05T18:38:26Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "a45133500e84b62c318f4e3c2c8a0866a164d187", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/a45133500e84b62c318f4e3c2c8a0866a164d187", "committedDate": "2020-07-06T07:20:14Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a45133500e84b62c318f4e3c2c8a0866a164d187", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/a45133500e84b62c318f4e3c2c8a0866a164d187", "committedDate": "2020-07-06T07:20:14Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "committedDate": "2020-07-06T07:38:08Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "committedDate": "2020-07-06T07:38:08Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "committedDate": "2020-07-06T07:57:43Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "committedDate": "2020-07-06T07:57:43Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "committedDate": "2020-07-06T08:00:23Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODcxNjgz", "url": "https://github.com/openmrs/openmrs-core/pull/3294#pullrequestreview-442871683", "createdAt": "2020-07-06T08:26:22Z", "commit": {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyNjoyMlrOGtNpPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyNjozNVrOGtNpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MjY1NQ==", "bodyText": "How can the message be equal to 2 different error messages? I believe this should fail when running the test. Doesnt it?\nRemember that expectMessage is checking whether a substring is contained in the message. So instead of is which checks equality it should be containsString I assume", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r450062655", "createdAt": "2020-07-06T08:26:22Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java", "diffHunk": "@@ -161,13 +160,12 @@ public void shouldUpgradeFromClean1_9To1_10() throws IOException, SQLException {\n \tpublic void shouldFailMigratingDrugOrdersIfUnitsToConceptsMappingsIsNotSet() throws IOException, SQLException {\n \t\tupgradeTestUtil.executeDataset(STANDARD_TEST_1_9_7_DATASET);\n \t\tcreateOrderEntryUpgradeFileWithTestData(\"\");\n-\t\texpectedException.expect(IOException.class);\n \t\tString errorMsgSubString1 = \"liquibase.exception.MigrationFailedException: Migration failed for change set liquibase-update-to-latest.xml::201401101647-TRUNK-4187::wyclif\";\n-\t\texpectedException.expectMessage(errorMsgSubString1);\n \t\tString errorMsgSubString2 = Context.getMessageSourceService().getMessage(\"upgrade.settings.file.not.have.mapping\",\n \t\t    new Object[] { \"mg\" }, null);\n-\t\texpectedException.expectMessage(errorMsgSubString2);\n-\t\tupgradeTestUtil.upgrade();\n+\t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2Mjc5OA==", "bodyText": "same as above", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r450062798", "createdAt": "2020-07-06T08:26:35Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java", "diffHunk": "@@ -179,11 +177,10 @@ public void shouldFailMigratingDrugOrdersIfUnitsToConceptsMappingsDoesNotPointTo\n \t\t    \"mg=111\\ntab(s)=112\\n1/day\\\\ x\\\\ 7\\\\ days/week=113\\n2/day\\\\ x\\\\ 7\\\\ days/week=114\");\n \t\tcreateOrderEntryUpgradeFileWithTestData(\"mg=111\\ntab(s)=invalid\");\n \t\t\n-\t\texpectedException.expect(IOException.class);\n \t\tString errorMsgSubString1 = \"liquibase.exception.MigrationFailedException: Migration failed for change set liquibase-update-to-latest.xml::201401101647-TRUNK-4187::wyclif\";\n-\t\texpectedException.expectMessage(errorMsgSubString1);\n-\t\texpectedException.expectMessage(\"For input string: \\\"invalid\\\"\");\n-\t\tupgradeTestUtil.upgrade();\n+\t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), is(\"For input string: \\\"invalid\\\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "committedDate": "2020-07-06T08:00:23Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "committedDate": "2020-07-06T09:06:38Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTQxMzQz", "url": "https://github.com/openmrs/openmrs-core/pull/3294#pullrequestreview-442941343", "createdAt": "2020-07-06T10:02:35Z", "commit": {"oid": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "committedDate": "2020-07-06T09:06:38Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "committedDate": "2020-07-06T10:19:51Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2c871b4112b5a53586b79db3903d9bb50e260f", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/1a2c871b4112b5a53586b79db3903d9bb50e260f", "committedDate": "2020-07-06T11:14:03Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "committedDate": "2020-07-06T10:19:51Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}, "afterCommit": {"oid": "1a2c871b4112b5a53586b79db3903d9bb50e260f", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/1a2c871b4112b5a53586b79db3903d9bb50e260f", "committedDate": "2020-07-06T11:14:03Z", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4665, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}