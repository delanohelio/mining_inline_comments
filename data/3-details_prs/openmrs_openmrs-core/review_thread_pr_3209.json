{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDk4MDMz", "number": 3209, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODozMzowNFrOD-HQUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODozNzoyOFrOD-HXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDU3MTcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODozMzowNFrOGYA7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0NDoxN1rOGYDsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzNDIyMA==", "bodyText": "You can get the lazily loaded property from Concept.hbm.xml", "url": "https://github.com/openmrs/openmrs-core/pull/3209#discussion_r427834220", "createdAt": "2020-05-20T08:33:04Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "diffHunk": "@@ -1225,15 +1229,30 @@ private void setBooleanConcepts() {\n \t\t\ttrueConcept = Context.getConceptService().getConcept(\n \t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n \t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_TRUE_CONCEPT)));\n+\t\t\tinitializeLazyPropertiesForConcept(trueConcept);\n+\t\t\t\n \t\t\tfalseConcept = Context.getConceptService().getConcept(\n \t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n \t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_FALSE_CONCEPT)));\n+\t\t\tinitializeLazyPropertiesForConcept(falseConcept);\n \t\t}\n \t\tcatch (NumberFormatException e) {\n \t\t\tlog.warn(\"Concept ids for boolean concepts should be numbers\");\n \t\t}\n \t}\n-\t\n+\n+\tprivate void initializeLazyPropertiesForConcept(Concept concept) {\n+\t\tHibernate.initialize(concept.getRetiredBy());\n+\t\tHibernate.initialize(concept.getCreator());\n+\t\tHibernate.initialize(concept.getChangedBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c7650a39e33a9cd0dba55541aafe51ea153f0c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTUzMw==", "bodyText": "I see in concept.hbm.xml, Creator, ChangedBy and RetiredBy are not marked as lazy=true. However these were throwing the LazyInitException.\nPlease have a look at the screenshot.", "url": "https://github.com/openmrs/openmrs-core/pull/3209#discussion_r427879533", "createdAt": "2020-05-20T09:44:17Z", "author": {"login": "mddubey"}, "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "diffHunk": "@@ -1225,15 +1229,30 @@ private void setBooleanConcepts() {\n \t\t\ttrueConcept = Context.getConceptService().getConcept(\n \t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n \t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_TRUE_CONCEPT)));\n+\t\t\tinitializeLazyPropertiesForConcept(trueConcept);\n+\t\t\t\n \t\t\tfalseConcept = Context.getConceptService().getConcept(\n \t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n \t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_FALSE_CONCEPT)));\n+\t\t\tinitializeLazyPropertiesForConcept(falseConcept);\n \t\t}\n \t\tcatch (NumberFormatException e) {\n \t\t\tlog.warn(\"Concept ids for boolean concepts should be numbers\");\n \t\t}\n \t}\n-\t\n+\n+\tprivate void initializeLazyPropertiesForConcept(Concept concept) {\n+\t\tHibernate.initialize(concept.getRetiredBy());\n+\t\tHibernate.initialize(concept.getCreator());\n+\t\tHibernate.initialize(concept.getChangedBy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzNDIyMA=="}, "originalCommit": {"oid": "00c7650a39e33a9cd0dba55541aafe51ea153f0c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDU4OTQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODozNzoyOFrOGYBGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0ODo0NVrOGYD3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzNzA5Mw==", "bodyText": "Do you think there is any value in the original code, of setting the unknown concept via a new static method, instead of doing it just the same way as for the true and false concepts?", "url": "https://github.com/openmrs/openmrs-core/pull/3209#discussion_r427837093", "createdAt": "2020-05-20T08:37:28Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "diffHunk": "@@ -1195,9 +1196,12 @@ public Concept getTrueConcept() {\n \tpublic Concept getUnknownConcept() {\n \t\tif (unknownConcept == null) {\n \t\t\ttry {\n-\t\t\t\tConceptServiceImpl.setStaticUnknownConcept(Context.getConceptService().getConcept(\n-\t\t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n-\t\t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_UNKNOWN_CONCEPT))));\n+\t\t\t\tConcept unknownConcept = Context.getConceptService().getConcept(\n+\t\t\t\t\tInteger.parseInt(Context.getAdministrationService().getGlobalProperty(\n+\t\t\t\t\t\tOpenmrsConstants.GLOBAL_PROPERTY_UNKNOWN_CONCEPT)));\n+\t\t\t\tinitializeLazyPropertiesForConcept(unknownConcept);\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c7650a39e33a9cd0dba55541aafe51ea153f0c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4MjI1Mg==", "bodyText": "I feel it would be better to do in the same way as the true and false concepts are done. However I don't know intention of creating a private stating method in the first time itself.\nI can make this change if needed.", "url": "https://github.com/openmrs/openmrs-core/pull/3209#discussion_r427882252", "createdAt": "2020-05-20T09:48:45Z", "author": {"login": "mddubey"}, "path": "api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java", "diffHunk": "@@ -1195,9 +1196,12 @@ public Concept getTrueConcept() {\n \tpublic Concept getUnknownConcept() {\n \t\tif (unknownConcept == null) {\n \t\t\ttry {\n-\t\t\t\tConceptServiceImpl.setStaticUnknownConcept(Context.getConceptService().getConcept(\n-\t\t\t\t    Integer.parseInt(Context.getAdministrationService().getGlobalProperty(\n-\t\t\t\t        OpenmrsConstants.GLOBAL_PROPERTY_UNKNOWN_CONCEPT))));\n+\t\t\t\tConcept unknownConcept = Context.getConceptService().getConcept(\n+\t\t\t\t\tInteger.parseInt(Context.getAdministrationService().getGlobalProperty(\n+\t\t\t\t\t\tOpenmrsConstants.GLOBAL_PROPERTY_UNKNOWN_CONCEPT)));\n+\t\t\t\tinitializeLazyPropertiesForConcept(unknownConcept);\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzNzA5Mw=="}, "originalCommit": {"oid": "00c7650a39e33a9cd0dba55541aafe51ea153f0c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1462, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}