{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjY3OTA0", "number": 3399, "title": "TRUNK-5410 : OrderGroupAttribute implementation", "bodyText": "https://issues.openmrs.org/browse/TRUNK-5410\n\n\n\nDescription of what I changed\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/TRUNK-\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master\n\n\nI have tried building but getting this Recursive Error with multiple iterations.Am wondering why a getter  for \" Voided\" cannot be found.\nI have not applied TDD for the API / Dao Methods so far because of that one re-curring error", "createdAt": "2020-07-27T16:22:35Z", "url": "https://github.com/openmrs/openmrs-core/pull/3399", "merged": true, "mergeCommit": {"oid": "f48f4d4f52c0dec6c25c0e1dda09549c87c3baa1"}, "closed": true, "closedAt": "2020-09-08T22:04:54Z", "author": {"login": "tendomart"}, "timelineItems": {"totalCount": 162, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdC8vFagFqTQ3NjUzMDQxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG2TjsgH2gAyNDU3MjY3OTA0OmJjYzg2MTYxY2Q3YTZlMTFhYTMyMzNiZmExNzRhMTM4ZGIwYWIzODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTMwNDE1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476530415", "createdAt": "2020-08-27T09:10:49Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxMDo0OVrOHIHa6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxMDo0OVrOHIHa6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjIzMg==", "bodyText": "In all places, code looks better when you have spaces around = signs. And also when you put space after a comma in method parameters.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478272232", "createdAt": "2020-08-27T09:10:49Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 238}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTMxMzA4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476531308", "createdAt": "2020-08-27T09:12:02Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxMjowMlrOHIHdpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxMjowMlrOHIHdpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjkzMg==", "bodyText": "What is the true parameter doing here?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478272932", "createdAt": "2020-08-27T09:12:02Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM0MDc3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476534077", "createdAt": "2020-08-27T09:15:47Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNTo0OFrOHIHmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNTo0OFrOHIHmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw==", "bodyText": "The indention seems off.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275107", "createdAt": "2020-08-27T09:15:48Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM0NzYy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476534762", "createdAt": "2020-08-27T09:16:42Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo0MlrOHIHoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo0MlrOHIHoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTYyNg==", "bodyText": "The indention seems off.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275626", "createdAt": "2020-08-27T09:16:42Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM0ODg0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476534884", "createdAt": "2020-08-27T09:16:52Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo1MlrOHIHong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo1MlrOHIHong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTc0Mg==", "bodyText": "The indention seems off.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275742", "createdAt": "2020-08-27T09:16:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 218}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM0OTcz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476534973", "createdAt": "2020-08-27T09:16:59Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo1OVrOHIHo4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNjo1OVrOHIHo4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTgxMQ==", "bodyText": "The indention seems off.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275811", "createdAt": "2020-08-27T09:16:59Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM1MDU3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476535057", "createdAt": "2020-08-27T09:17:05Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNzowNVrOHIHpKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxNzowNVrOHIHpKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTg4MA==", "bodyText": "The indention seems off.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275880", "createdAt": "2020-08-27T09:17:05Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM2MTM1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476536135", "createdAt": "2020-08-27T09:18:25Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxODoyNVrOHIHsRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxODoyNVrOHIHsRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NjY3Ng==", "bodyText": "Spaces around - and after comma.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478276676", "createdAt": "2020-08-27T09:18:25Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM2ODAz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476536803", "createdAt": "2020-08-27T09:19:14Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxOToxNFrOHIHuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxOToxNFrOHIHuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzIyMA==", "bodyText": "Why this constant for use in one place?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478277220", "createdAt": "2020-08-27T09:19:14Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 279}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTM3NTYw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476537560", "createdAt": "2020-08-27T09:20:14Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyMDoxNFrOHIHwkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyMDoxNFrOHIHwkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Nzc3OQ==", "bodyText": "Why this constant for use in one place?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478277779", "createdAt": "2020-08-27T09:20:14Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 286}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTQwODYw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476540860", "createdAt": "2020-08-27T09:24:30Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNDozMFrOHIH6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNDozMFrOHIH6kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MDMzOQ==", "bodyText": "What exactly are you testing here? Do you take a look at existing tests to see how we do it?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478280339", "createdAt": "2020-08-27T09:24:30Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTQyNDg4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476542488", "createdAt": "2020-08-27T09:26:39Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNjo0MFrOHIH_gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNjo0MFrOHIH_gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MTYwMg==", "bodyText": "Do you take a look at existing tests to see how we do it?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478281602", "createdAt": "2020-08-27T09:26:40Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTQzMjM3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476543237", "createdAt": "2020-08-27T09:27:39Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNzozOVrOHIIB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNzozOVrOHIIB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MjE5OQ==", "bodyText": "Why this constant for use in one place?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478282199", "createdAt": "2020-08-27T09:27:39Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTQ0NjA2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476544606", "createdAt": "2020-08-27T09:29:24Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyOToyNFrOHIIF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyOToyNFrOHIIF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MzIzNw==", "bodyText": "Is uuid a constant?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478283237", "createdAt": "2020-08-27T09:29:24Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME,newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t\tassertEquals(UUID4,newOrderGroupAttributeType.getUuid());\n+    }\n+    \n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tString uuid = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598a54f91d9d499297fd71d892ff4c966dba66ba", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/598a54f91d9d499297fd71d892ff4c966dba66ba", "committedDate": "2020-08-28T15:50:22Z", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7165dbaf4dc556187e6cc8556063a40d71aa26aa", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7165dbaf4dc556187e6cc8556063a40d71aa26aa", "committedDate": "2020-08-28T15:55:17Z", "message": "TRUNK-5410:Removing unused import in HibernateOrderDAOTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e3a9769a66c10ad4f7a82906db90c769a04af7e", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/4e3a9769a66c10ad4f7a82906db90c769a04af7e", "committedDate": "2020-08-28T15:55:17Z", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bf57ccd4c7a8e1a0c1c2229a33bffba2e8af376", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/3bf57ccd4c7a8e1a0c1c2229a33bffba2e8af376", "committedDate": "2020-08-29T17:08:40Z", "message": "Merge branch 'master' of https://github.com/tendomart/openmrs-core"}, "afterCommit": {"oid": "4e3a9769a66c10ad4f7a82906db90c769a04af7e", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/4e3a9769a66c10ad4f7a82906db90c769a04af7e", "committedDate": "2020-08-28T15:55:17Z", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3becee4f2e9ffe96dc7cd16004964f772c773039", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/3becee4f2e9ffe96dc7cd16004964f772c773039", "committedDate": "2020-08-31T07:50:53Z", "message": "TRUNK-5410:Doing more rectifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6246d522dbe882f632e4c5d6310b7ff2d68cba85", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/6246d522dbe882f632e4c5d6310b7ff2d68cba85", "committedDate": "2020-08-31T07:53:41Z", "message": "TRUNK-5410:Doing more rectifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c3204ba0d5e6c9609206aa662e60464aca9726", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/f8c3204ba0d5e6c9609206aa662e60464aca9726", "committedDate": "2020-09-01T12:41:23Z", "message": "TRUNK-5410:Doing more refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7f0baaccee2263615b0a0a1d8c8c21d70c2591", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7c7f0baaccee2263615b0a0a1d8c8c21d70c2591", "committedDate": "2020-09-01T12:49:46Z", "message": "TRUNK-5410:Doing more refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328046dac6660420b1055b115d94db002f606316", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/328046dac6660420b1055b115d94db002f606316", "committedDate": "2020-09-01T20:33:30Z", "message": "TRUNK-5410:Adding missing pieces of code / Javadocs and formattings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd2d5c96044b31696d551c66e9c54f6a5fa15c9", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/5bd2d5c96044b31696d551c66e9c54f6a5fa15c9", "committedDate": "2020-09-01T20:35:11Z", "message": "Merge branch 'TRUNK-5410'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6353904268f8454ce3690ab6539f87a1f168dd8", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/a6353904268f8454ce3690ab6539f87a1f168dd8", "committedDate": "2020-09-02T18:43:03Z", "message": "TRUNK-5410:Refactoring OrderServiceImpl.saveOrderGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/6ed5da668f058d6945f7c64bcb9d931feff1be75", "committedDate": "2020-09-02T18:44:28Z", "message": "Merge branch 'TRUNK-5410'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTQxMDM3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482141037", "createdAt": "2020-09-03T19:30:29Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMDoyOVrOHM0o_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMDoyOVrOHM0o_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzQyMg==", "bodyText": "Do we need this comment?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483207422", "createdAt": "2020-09-03T19:30:29Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tprivate Integer orderGroupAttributeId;\n+\n+\t// BaseAttribute<OrderGroup> has an \"owner\" property of type OrderGroup, which we re-expose as \"orderGroup\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjQ5NDQ5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482249449", "createdAt": "2020-09-03T22:41:44Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0MTo0NFrOHM5wBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0MTo0NFrOHM5wBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTE0MA==", "bodyText": "orderGroupAttributeTypeId cannot be the description for orderGroupAttributeTypeId. Can you change the param description to? order group attribute type Id?\nFollow the same convention else where.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291140", "createdAt": "2020-09-03T22:41:44Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttributeType.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.AttributeType;\n+import org.openmrs.attribute.BaseAttributeType;\n+\n+/**\n+ * A user-defined extension to the {@link OrderGroup} class.\n+ * @see AttributeType\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> implements AttributeType<OrderGroup> {\n+\t\n+\tprivate Integer orderGroupAttributeTypeId;\n+\t\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#getId()\n+\t */\n+\t@Override\n+\tpublic Integer getId() {\n+\t\treturn getOrderGroupAttributeTypeId();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#setId(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic void setId(Integer id) {\n+\t\tsetOrderGroupAttributeTypeId(id);\n+\t}\n+\n+\t/**\n+\t * @return the orderGroupAttributeTypeId\n+\t */\n+\tpublic Integer getOrderGroupAttributeTypeId() {\n+\t\treturn orderGroupAttributeTypeId;\n+\t}\n+\n+\t/**\n+\t * @param orderGroupAttributeTypeId the orderGroupAttributeTypeId to set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjQ5OTU0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482249954", "createdAt": "2020-09-03T22:43:01Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0MzowMlrOHM5xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0MzowMlrOHM5xjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTUzNQ==", "bodyText": "Can you correct the english in the above sentence?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291535", "createdAt": "2020-09-03T22:43:02Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjUwNDUx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482250451", "createdAt": "2020-09-03T22:44:18Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NDoxOFrOHM5y8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NDoxOFrOHM5y8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTg5MQ==", "bodyText": "Why capital S in Save?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291891", "createdAt": "2020-09-03T22:44:18Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjUwNzcz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482250773", "createdAt": "2020-09-03T22:45:14Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NToxNFrOHM50Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NToxNFrOHM50Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjE5NQ==", "bodyText": "a or an?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483292195", "createdAt": "2020-09-03T22:45:14Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjUxMTAw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482251100", "createdAt": "2020-09-03T22:46:10Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NjoxMFrOHM51OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NjoxMFrOHM51OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjQ3Mw==", "bodyText": "type type?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483292473", "createdAt": "2020-09-03T22:46:10Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType, String reason) throws APIException;\n+\n+\t/**\n+\t * Restores an order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes an order group attribute type type from the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjU0MDY1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482254065", "createdAt": "2020-09-03T22:54:26Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjU1OTEw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-482255910", "createdAt": "2020-09-03T22:59:26Z", "commit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1OToyNlrOHM6Fgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1OToyNlrOHM6Fgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjY0Mg==", "bodyText": "The TABBING above.\nDo you run mvn clean install? I remember seeing it automatically format the code.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483296642", "createdAt": "2020-09-03T22:59:26Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME, newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4, newOrderGroupAttributeType.getId());\n+\t\tassertEquals(\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\", newOrderGroupAttributeType.getUuid());\n+    }\n+    \n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tfinal String UUID1 = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dadfd5f7789b6965a52473b84448cf4a3f479779", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/dadfd5f7789b6965a52473b84448cf4a3f479779", "committedDate": "2020-09-06T16:26:57Z", "message": "TRUNK-5410:Doing more Refactorings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNDcwOTAz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483470903", "createdAt": "2020-09-07T11:09:28Z", "commit": {"oid": "dadfd5f7789b6965a52473b84448cf4a3f479779"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93519810f5c13baa29e227a563366372a5b1190", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/d93519810f5c13baa29e227a563366372a5b1190", "committedDate": "2020-09-07T13:36:34Z", "message": "TRUNK-5410: Doing more format changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266558d63ee7be3fa4990052a4e1beae19264b0b", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/266558d63ee7be3fa4990052a4e1beae19264b0b", "committedDate": "2020-09-07T13:37:14Z", "message": "Merge branch 'TRUNK-5410'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "committedDate": "2020-09-07T13:38:39Z", "message": "Merge branch 'master' of https://github.com/openmrs/openmrs-core"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTg1NDcz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483585473", "createdAt": "2020-09-07T14:11:23Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMToyM1rOHOA2Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMToyM1rOHOA2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTk5MQ==", "bodyText": "Stored on a or in an?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484455991", "createdAt": "2020-09-07T14:11:23Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTg4NjYz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483588663", "createdAt": "2020-09-07T14:16:13Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxNjoxM1rOHOBA5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxNjoxM1rOHOBA5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1ODcyNA==", "bodyText": "Can you also document the reason param?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484458724", "createdAt": "2020-09-07T14:16:13Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +853,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided uuid \n+\t * \n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to save in the database\n+\t * @return the order group attribute type created or saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to retire", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTkxNjE2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483591616", "createdAt": "2020-09-07T14:20:34Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyMDozNFrOHOBJrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyMDozNFrOHOBJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDk3NA==", "bodyText": "Did you remove the above accidentally?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484460974", "createdAt": "2020-09-07T14:20:34Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -119,7 +121,6 @@ public Order getOrder(Integer orderId) throws DAOException {\n \t * @see org.openmrs.api.db.OrderDAO#getOrders(org.openmrs.OrderType, java.util.List,\n \t *      java.util.List, java.util.List, java.util.List)\n \t */\n-\t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTkzNjY3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483593667", "createdAt": "2020-09-07T14:23:35Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyMzozNVrOHOBPxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyMzozNVrOHOBPxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjUzNQ==", "bodyText": "It is always good to put space between the type and variable name.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484462535", "createdAt": "2020-09-07T14:23:35Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTk0NDc3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483594477", "createdAt": "2020-09-07T14:24:48Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNDo0OFrOHOBSJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNDo0OFrOHOBSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzE0Mw==", "bodyText": "Instead of doing executeDataSet in each test method, isn't it better to do it once with a BeforeClass?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463143", "createdAt": "2020-09-07T14:24:48Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTk0OTIy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483594922", "createdAt": "2020-09-07T14:25:27Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNToyN1rOHOBThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNToyN1rOHOBThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzQ5NQ==", "bodyText": "getOrderGroupAttributeType by id?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463495", "createdAt": "2020-09-07T14:25:27Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTk1MjQ0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483595244", "createdAt": "2020-09-07T14:25:57Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNTo1N1rOHOBUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNTo1N1rOHOBUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzcyNA==", "bodyText": "A constant for use in only one place?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463724", "createdAt": "2020-09-07T14:25:57Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjAwNzQ3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483600747", "createdAt": "2020-09-07T14:34:41Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNDo0MVrOHOBlqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNDo0MVrOHOBlqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2ODEzOA==", "bodyText": "Don't you already have an orderService class level variable?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484468138", "createdAt": "2020-09-07T14:34:41Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 261}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjAyMzA2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483602306", "createdAt": "2020-09-07T14:37:16Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNzoxNlrOHOBqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNzoxNlrOHOBqfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTM3NA==", "bodyText": "The tabbing.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484469374", "createdAt": "2020-09-07T14:37:16Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjAyODQ1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483602845", "createdAt": "2020-09-07T14:38:06Z", "commit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozODowN1rOHOBsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozODowN1rOHOBsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTgwMA==", "bodyText": "Why do you call it new?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484469800", "createdAt": "2020-09-07T14:38:07Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "committedDate": "2020-09-07T16:32:03Z", "message": "TRUNK-5410 : Doing more refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2a2f6251ee36459578677df8aa5db9053f27f8", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7d2a2f6251ee36459578677df8aa5db9053f27f8", "committedDate": "2020-09-07T16:33:52Z", "message": "TRUNK-5410 : Doing more refactorings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "949194bb1630e96c6b9990d835cd6c2484abf1ea", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/949194bb1630e96c6b9990d835cd6c2484abf1ea", "committedDate": "2020-09-07T16:54:15Z", "message": "TRUNK-5410:Resolving merge conflict"}, "afterCommit": {"oid": "7d2a2f6251ee36459578677df8aa5db9053f27f8", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7d2a2f6251ee36459578677df8aa5db9053f27f8", "committedDate": "2020-09-07T16:33:52Z", "message": "TRUNK-5410 : Doing more refactorings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d2a2f6251ee36459578677df8aa5db9053f27f8", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7d2a2f6251ee36459578677df8aa5db9053f27f8", "committedDate": "2020-09-07T16:33:52Z", "message": "TRUNK-5410 : Doing more refactorings"}, "afterCommit": {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "committedDate": "2020-09-07T13:38:39Z", "message": "Merge branch 'master' of https://github.com/openmrs/openmrs-core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5209b845ac312ac4d3e8ebfec412b1b2aac6d9", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7d5209b845ac312ac4d3e8ebfec412b1b2aac6d9", "committedDate": "2020-09-08T01:27:44Z", "message": "TRUNK-541O: Doing more changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2bcf7ccc13c1ddfb0ab66e83c41efce5517712c", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b2bcf7ccc13c1ddfb0ab66e83c41efce5517712c", "committedDate": "2020-09-08T03:21:12Z", "message": "TRUNK-5410: Doing more corrections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/44a66fd9d7559c3396cfed9026542ee94f90a564", "committedDate": "2020-09-08T07:47:58Z", "message": "TRUNK-5410:Fixing Indentation in OrderServiceTest and HibernateOrderDAOTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTY1Nzkz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483965793", "createdAt": "2020-09-08T09:39:30Z", "commit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozOTozMVrOHOVDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozOTozMVrOHOVDbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzA1NQ==", "bodyText": "Why new?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484787055", "createdAt": "2020-09-08T09:39:31Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,63 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = dao\n+\t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = dao.getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName() {\n+\t\tfinal String NAME = \"ECG\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTY2OTE0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483966914", "createdAt": "2020-09-08T09:40:57Z", "commit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MDo1OFrOHOVHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MDo1OFrOHOVHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4Nzk4MQ==", "bodyText": "You forgot adding ByUuid to the test method name.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484787981", "createdAt": "2020-09-08T09:40:58Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,63 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTY4NDc1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483968475", "createdAt": "2020-09-08T09:42:54Z", "commit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0Mjo1NFrOHOVLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0Mjo1NFrOHOVLwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTE4Ng==", "bodyText": "Are you using this constant anywhere in the class?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484789186", "createdAt": "2020-09-08T09:42:54Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -41,7 +42,9 @@\n \tprivate static final String ORDER_SET = \"org/openmrs/api/include/OrderSetServiceTest-general.xml\";\n \t\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n-\n+     \n+\tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTcxNDA4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-483971408", "createdAt": "2020-09-08T09:46:36Z", "commit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NjozNlrOHOVU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NjozNlrOHOVU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5MTUyMw==", "bodyText": "Why use Context.getOrderService() in many methods when you already have a class level orderService property?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484791523", "createdAt": "2020-09-08T09:46:36Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3807,117 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId() {\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService\n+\t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType()\n+\t        throws ParseException {\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "committedDate": "2020-09-08T11:48:53Z", "message": "TRUNK-5410:Replacing Context.orderService with orderService and other refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc86161cd7a6e11aa3233bfa174a138db0ab381", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/bcc86161cd7a6e11aa3233bfa174a138db0ab381", "committedDate": "2020-09-08T11:57:01Z", "message": "TRUNK-5410:Changing newOrderGroupAttributeType to OrderGroupAttributeType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTcyNDA2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-455972406", "createdAt": "2020-07-27T17:05:35Z", "commit": {"oid": "113e2334014befa3cddaef2f91a9bb14d07e1824"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNTozNVrOG3rkjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNTozNVrOG3rkjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzODczNQ==", "bodyText": "@tendomart i think this should be 2.4.0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r461038735", "createdAt": "2020-07-27T17:05:35Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113e2334014befa3cddaef2f91a9bb14d07e1824"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2OTk5OTcx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-456999971", "createdAt": "2020-07-28T20:47:53Z", "commit": {"oid": "113e2334014befa3cddaef2f91a9bb14d07e1824"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0Nzo1M1rOG4eP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0Nzo1M1rOG4eP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OrderGroup extends BaseCustomizableMetadata<OrderGroupAttribute> {\n          \n          \n            \n            public class OrderGroup extends BaseCustomizableData<OrderGroupAttribute> {\n          \n      \n    \n    \n  \n\nThe change from a subtype of OpenmrsData -> OpenmrsMetadata is causing the error.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r461869021", "createdAt": "2020-07-28T20:47:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/OrderGroup.java", "diffHunk": "@@ -22,7 +22,7 @@\n  * \n  * @since 1.12\n  */\n-public class OrderGroup extends BaseChangeableOpenmrsData {\n+public class OrderGroup extends BaseCustomizableMetadata<OrderGroupAttribute> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113e2334014befa3cddaef2f91a9bb14d07e1824"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c548dc3409c2b42ba58989e07e09ead0e932df20", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c548dc3409c2b42ba58989e07e09ead0e932df20", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7a0879e4d9fc53e6068ed7b455ef323c280d00", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/5a7a0879e4d9fc53e6068ed7b455ef323c280d00", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410 Added hbm Mapping Files and added them to cfg file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf2ec3dc8b2b11b5aa06c140f768ae2c8fd7306", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/ccf2ec3dc8b2b11b5aa06c140f768ae2c8fd7306", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e83a3f222fccd4ec85805866445f15cdd383c8", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b6e83a3f222fccd4ec85805866445f15cdd383c8", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d80ac34fa569ab7bea2b32d427d2aae7971b417", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/8d80ac34fa569ab7bea2b32d427d2aae7971b417", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b395beaed33eabfb11be1c6c04fbb06ff89ec98", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/2b395beaed33eabfb11be1c6c04fbb06ff89ec98", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410:Did more refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8a342d70d6b4d106171d386e23dfce4f8d9dd0", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/fa8a342d70d6b4d106171d386e23dfce4f8d9dd0", "committedDate": "2020-07-30T07:55:45Z", "message": "TRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f7ee5954790e68d819d8e086eb3741d09aaf7d", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/e5f7ee5954790e68d819d8e086eb3741d09aaf7d", "committedDate": "2020-07-30T14:17:05Z", "message": "TRUNK-5410:Added more Tests to OrderServiceimpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2f488b483e55e251f1b9e15cf01341bcb827cd", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/fe2f488b483e55e251f1b9e15cf01341bcb827cd", "committedDate": "2020-08-03T00:11:00Z", "message": "Added more Tests for new Changes to HibernateOrderDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b3a9651b8efa8311bbeb5ebdf3d4aad401b6368", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/6b3a9651b8efa8311bbeb5ebdf3d4aad401b6368", "committedDate": "2020-08-03T17:16:51Z", "message": "TRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5fcda7982cf08b76625b0183a73990ba382e532", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c5fcda7982cf08b76625b0183a73990ba382e532", "committedDate": "2020-08-03T18:41:35Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "113e2334014befa3cddaef2f91a9bb14d07e1824", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/113e2334014befa3cddaef2f91a9bb14d07e1824", "committedDate": "2020-07-27T16:07:58Z", "message": "Merge branch 'master' of https://github.com/tendomart/openmrs-core"}, "afterCommit": {"oid": "c5fcda7982cf08b76625b0183a73990ba382e532", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c5fcda7982cf08b76625b0183a73990ba382e532", "committedDate": "2020-08-03T18:41:35Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1db15ceb511f1cb0f78863cc928567c93772855", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b1db15ceb511f1cb0f78863cc928567c93772855", "committedDate": "2020-08-04T04:43:00Z", "message": "Merge branch 'master' into TRUNK-5410"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5fcda7982cf08b76625b0183a73990ba382e532", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c5fcda7982cf08b76625b0183a73990ba382e532", "committedDate": "2020-08-03T18:41:35Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}, "afterCommit": {"oid": "90993cfeefa2101555ff8cbdf216152ad0a9a87f", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/90993cfeefa2101555ff8cbdf216152ad0a9a87f", "committedDate": "2020-08-04T07:13:18Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODQwNjUw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-460840650", "createdAt": "2020-08-04T14:00:56Z", "commit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMDo1NlrOG7hvjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMDo1NlrOG7hvjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MjAxNA==", "bodyText": "@tendomart these kinds of imports are discouraged", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465072014", "createdAt": "2020-08-04T14:00:56Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -9,16 +9,7 @@\n  */\n package org.openmrs.api;\n \n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.Provider;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODQxNzE0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-460841714", "createdAt": "2020-08-04T14:02:02Z", "commit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMjowM1rOG7hyow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMjowM1rOG7hyow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MjgwMw==", "bodyText": "the same here to", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465072803", "createdAt": "2020-08-04T14:02:03Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/api/db/OrderDAO.java", "diffHunk": "@@ -13,16 +13,7 @@\n import java.util.List;\n import java.util.Locale;\n \n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.User;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODQyMjIw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-460842220", "createdAt": "2020-08-04T14:02:34Z", "commit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMjozNFrOG7h0Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMjozNFrOG7h0Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MzE3MQ==", "bodyText": "here to", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465073171", "createdAt": "2020-08-04T14:02:34Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -21,17 +21,7 @@\n import org.hibernate.criterion.Restrictions;\n import org.hibernate.criterion.SimpleExpression;\n import org.hibernate.transform.DistinctRootEntityResultTransformer;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.User;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODQzMzQy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-460843342", "createdAt": "2020-08-04T14:03:45Z", "commit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMzo0NVrOG7h3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMzo0NVrOG7h3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NDAxNA==", "bodyText": "@tendomart kindly maintain the imports", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465074014", "createdAt": "2020-08-04T14:03:45Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -52,38 +52,14 @@\n import org.hibernate.cfg.Configuration;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.Allergy;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.ConceptDatatype;\n-import org.openmrs.ConceptDescription;\n-import org.openmrs.ConceptName;\n-import org.openmrs.Condition;\n-import org.openmrs.Diagnosis;\n-import org.openmrs.DosingInstructions;\n-import org.openmrs.Drug;\n-import org.openmrs.DrugOrder;\n-import org.openmrs.Encounter;\n-import org.openmrs.FreeTextDosingInstructions;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Obs;\n-import org.openmrs.Order;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b480e59804b852455f7308034c60d6f913046e6f", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/b480e59804b852455f7308034c60d6f913046e6f", "committedDate": "2020-08-05T09:34:12Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de7d1e2225ec628e54e84118fd1dab01b91702d", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/5de7d1e2225ec628e54e84118fd1dab01b91702d", "committedDate": "2020-08-05T09:34:12Z", "message": "TRUNK-5410: Altered Changeset Numbers in DatabaseUpdaterDatabaseIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/1dce083d6b131f4af3af666ac0cdad47ffa27140", "committedDate": "2020-08-05T09:34:12Z", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "committedDate": "2020-08-04T13:04:24Z", "message": "TRUNK-5410: Altered Changeset Numbers in DatabaseUpdaterDatabaseIT"}, "afterCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/1dce083d6b131f4af3af666ac0cdad47ffa27140", "committedDate": "2020-08-05T09:34:12Z", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTQ1MTk1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-461545195", "createdAt": "2020-08-05T10:44:07Z", "commit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0NDowN1rOG8EKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0NDowN1rOG8EKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNjAxMA==", "bodyText": "@tendomart have you run these changesets against the openmrs db to see if the tables are created with their respective fields ?, if yes then you can attach some screenshots", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465636010", "createdAt": "2020-08-05T10:44:07Z", "author": {"login": "gitcliff"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -28,14 +28,85 @@\n \t\tSee http://www.liquibase.org/manual/home#available_database_refactorings\n \t\tfor a list of supported elements and attributes\n \t-->\n+\t<changeSet id=\"TRUNK-5410\" author=\"tendomart\">\n+\t\t<comment>Creating order_group_attribute_type table</comment>\n+\t\t<createTable tableName=\"order_group_attribute_type\">\n+\t\t\t<column name=\"order_group_attribute_type_id\" type=\"int\" autoIncrement=\"true\">\n+\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"name\" type=\"varchar(255)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\"/>\n+\t\t\t</column>\n+\t\t\t<column name=\"description\" type=\"varchar(1024)\" />\n+\t\t\t<column name=\"datatype\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"datatype_config\" type=\"text\" />\n+\t\t\t<column name=\"preferred_handler\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"handler_config\" type=\"text\" />\n+\t\t\t<column name=\"min_occurs\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"max_occurs\" type=\"int\"></column>\n+\t\t\t<column name=\"creator\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"date_created\" type=\"datetime\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"changed_by\" type=\"int\" />\n+\t\t\t<column name=\"date_changed\" type=\"datetime\" />\n+\t\t\t<column name=\"retired\" type=\"boolean\" defaultValueBoolean=\"false\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"retired_by\" type=\"int\" />\n+\t\t\t<column name=\"date_retired\" type=\"datetime\" />\n+\t\t\t<column name=\"retire_reason\" type=\"varchar(255)\" defaultValue=\"null\" />\n+\t\t\t<column name=\"uuid\" type=\"char(38)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\" />\n+\t\t\t</column>\n+\t\t</createTable>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_creator_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"creator\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_changed_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"changed_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_retired_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"retired_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<modifySql dbms=\"mssql\">\n+\t\t\t<replace replace=\"CHAR(38)\" with=\"UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()\"/>\n+\t\t</modifySql>\n+\t</changeSet>\n+\t\n+\t<changeSet id=\"20200723-TRUNK-5410\" author=\"tendomart\">\n+\t\t<comment>Creating order_group_attribute table</comment>\n+\t\t<createTable tableName=\"order_group_attribute\">\n+\t\t\t<column name=\"order_group_attribute_id\" type=\"int\" autoIncrement=\"true\">\n+\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"order_group_id\" type=\"int\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"attribute_type_id\" type=\"int\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"value_reference\" type=\"text\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"uuid\" type=\"char(38)\"><constraints nullable=\"false\" unique=\"true\" /></column>\n+\t\t\t<column name=\"creator\" type=\"int\"><constraints nullable=\"false\"/></column>\n+\t\t\t<column name=\"date_created\" type=\"datetime\"><constraints nullable=\"false\"/></column>\n+\t\t\t<column name=\"changed_by\" type=\"int\"/>\n+\t\t\t<column name=\"date_changed\" type=\"datetime\" />\n+\t\t\t<column name=\"voided\" type=\"boolean\" defaultValueBoolean=\"false\">\n+\t\t\t\t<constraints nullable=\"false\"/>\n+\t\t\t</column>\n+\t\t\t<column name=\"voided_by\" type=\"int\" />\n+\t\t\t<column name=\"date_voided\" type=\"datetime\" />\n+\t\t\t<column name=\"void_reason\" type=\"varchar(255)\" defaultValue=\"null\"/>\n+\t\t</createTable>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_order_group_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"order_group_id\" referencedTableName=\"order_group\" referencedColumnNames=\"order_group_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_attribute_type_id_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"attribute_type_id\" referencedTableName=\"order_group_attribute_type\" referencedColumnNames=\"order_group_attribute_type_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_creator_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"creator\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_changed_by_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"changed_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_voided_by_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"voided_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t</changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzMxNjMx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-462331631", "createdAt": "2020-08-06T09:05:09Z", "commit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTowNToxMFrOG8p-xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToxNDoxNFrOG8qV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTU1Nw==", "bodyText": "Was this class added in 2.4?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466255557", "createdAt": "2020-08-06T09:05:10Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroup.java", "diffHunk": "@@ -20,9 +20,9 @@\n  * Not all orders in an encounter need to be grouped this way, only those that have a specific connection to each other \n  * (e.g. several orders that together make up a treatment protocol for some diagnosis could be grouped).\n  * \n- * @since 1.12\n+ * @since 2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NjQ2Ng==", "bodyText": "When we use the @see annotation, we no longer need the @param.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466256466", "createdAt": "2020-08-06T09:06:48Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,77 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NzExNQ==", "bodyText": "Can we document these params and also add the method descriptions?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466257115", "createdAt": "2020-08-06T09:08:01Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +856,87 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t/**\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * @param id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1Nzg2Mg==", "bodyText": "Do you have a unit test that corresponds to each of these @should annotations?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466257862", "createdAt": "2020-08-06T09:09:30Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +856,87 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t/**\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * @param id\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the orderGroup attribute type with the given id\n+\t * @should return null if no orderGroup attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * @param uuid\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the orderGroup attribute type with the given uuid\n+\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given orderGroup attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @return the OrderGroupAttributeType created/saved\n+\t * @should create a new orderGroup attribute type\n+\t * @should edit an existing orderGroup attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given orderGroup attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @return the orderGroupAttribute retired\n+\t * @should retire a orderGroup attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a orderGroup attribute type that was previous retired in the database\n+\t * @param orderGroupAttributeType\n+\t * @return the OrderGroupAttributeType unretired\n+\t * @should unretire a retired orderGroup attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a orderGroup attribute type from the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @should completely remove a orderGroup attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the orderGroup attribute type with the specified name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1ODQ1OQ==", "bodyText": "We do not recommend using wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466258459", "createdAt": "2020-08-06T09:10:30Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -11,20 +11,8 @@\n \n import org.apache.commons.lang3.time.DateUtils;\n import org.hibernate.proxy.HibernateProxy;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.DrugOrder;\n-import org.openmrs.Encounter;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Order;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1OTEyMg==", "bodyText": "What are we using these TODO s for?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466259122", "createdAt": "2020-08-06T09:11:41Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -1083,5 +1073,51 @@ public OrderGroup getOrderGroup(Integer orderGroupId) throws APIException {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException {\n \t\treturn dao.getOrderGroupsByEncounter(encounter);\n \t}\n-\t\n+\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\t\treturn dao.getAllOrderGroupAttributeTypes();\n+\t}\n+//TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2MDM2Mw==", "bodyText": "No wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466260363", "createdAt": "2020-08-06T09:13:16Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -9,27 +9,25 @@\n  */\n package org.openmrs.api.db.hibernate;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.UUID;\n \n+import org.hibernate.internal.SessionFactoryImpl;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.Patient;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2MTQ3MQ==", "bodyText": "Do you still need these commented out lines?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466261471", "createdAt": "2020-08-06T09:14:14Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/resources/org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml", "diffHunk": "@@ -17,4 +17,15 @@\n <order_group order_group_id=\"3\" order_set_id=\"2000\" patient_id=\"7\" encounter_id=\"3\"   creator=\"1\" date_created=\"2012-02-19 12:24:10.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb425\" />\n <order_group order_group_id=\"4\" order_set_id=\"2000\" patient_id=\"2\" encounter_id=\"6\"   creator=\"1\" date_created=\"2012-01-01 00:00:00.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb142\" />\n \n-</dataset> \n\\ No newline at end of file\n+\n+\t<order_group_attribute_type order_group_attribute_type_id=\"1\" name=\"Stool\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"1\" uuid=\"9cf1b9de-d18e-11ea-87d0-0242ac130003\"/>\n+\t<order_group_attribute_type order_group_attribute_type_id=\"2\" name=\"Virology\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"1\" uuid=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\"/>\n+\t<order_group_attribute_type order_group_attribute_type_id=\"3\" name=\"Bacteriology\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"1\" uuid=\"9cf1bce0-d18e-11ea-87d0-0242ac130003\"/>\n+\t<order_group_attribute_type order_group_attribute_type_id=\"4\" name=\"ECG\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"1\" uuid=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\"/>\n+\t\n+<!--\t<order_group_attribute order_group_attribute_id=\"1\" order_group_id=\"1\" attribute_type_id=\"1\" value_reference=\"Test 1\" uuid=\"86bdcc12-d18d-11ea-87d0-0242ac130003\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" voided=\"false\"/>-->\n+<!--\t<order_group_attribute order_group_attribute_id=\"2\" order_group_id=\"2\" attribute_type_id=\"2\" value_reference=\"Test 2\" uuid=\"86bdcf82-d18d-11ea-87d0-0242ac130003\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" voided=\"false\"/>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c577585a486d502a948ca8ac0c0ee38da7b47d03", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c577585a486d502a948ca8ac0c0ee38da7b47d03", "committedDate": "2020-08-06T12:30:47Z", "message": "TRUNK-5410:Removed unneccsarry docs from HibernateOrderDao ,Added Javadocs to OrderService Methods,Removed wildcards from OrderServiceImpl.java and unnecessary TODO'S ,Documented param types and method descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d54e2991a64ed8cf4239bf7e424e8264c05a3a1", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/4d54e2991a64ed8cf4239bf7e424e8264c05a3a1", "committedDate": "2020-08-06T17:16:08Z", "message": "TRUNK-5410:Added unit tests to OrderServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "committedDate": "2020-08-07T02:43:18Z", "message": "TRUNK-5410:Removed wildcard imports , improved method descriptions in OrderService , added more tests in OrderServiceTest and removed unnecessary code in other files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDM1OTEx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-463035911", "createdAt": "2020-08-07T05:04:16Z", "commit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNDoxNlrOG9MlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNDoxNlrOG9MlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjQ0Ng==", "bodyText": "@tendomart do you need these commented out lines", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822446", "createdAt": "2020-08-07T05:04:16Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3790,6 +3800,29 @@ public void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOr\n \t\tassertNotNull(orderGroupAttributeType.getId());\n \t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n \t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "originalPosition": 185}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDM2MDEy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-463036012", "createdAt": "2020-08-07T05:04:40Z", "commit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNDo0MFrOG9Mlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNDo0MFrOG9Mlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjUyMw==", "bodyText": "do you need these commented out lines", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822523", "createdAt": "2020-08-07T05:04:40Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3790,6 +3800,29 @@ public void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOr\n \t\tassertNotNull(orderGroupAttributeType.getId());\n \t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n \t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDM2Mzgy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-463036382", "createdAt": "2020-08-07T05:06:07Z", "commit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNjowN1rOG9Mm-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNjowN1rOG9Mm-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg==", "bodyText": "@tendomart are these formatting changes in the imports needed ?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822906", "createdAt": "2020-08-07T05:06:07Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -9,41 +9,6 @@\n  */\n package org.openmrs.api;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.hasItems;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.openmrs.Order.Action.DISCONTINUE;\n-import static org.openmrs.Order.FulfillerStatus.COMPLETED;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.openmrs.test.OpenmrsMatchers.hasId;\n-import static org.openmrs.test.TestUtil.containsId;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import java.lang.reflect.Field;\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Set;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/9746f39942709c1c6a09074a62fc185ac65d127a", "committedDate": "2020-08-07T13:37:08Z", "message": "TRUNK-5410:Re-ordered imports format in OrderServiceTest and HibernateOrderDAOTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjIxNDI2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-464221426", "createdAt": "2020-08-10T13:21:45Z", "commit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoyMTo0NVrOG-OQeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoyNjoyN1rOG-Oc1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5ODQ5MA==", "bodyText": "Could you be having any reason for these empty lines?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467898490", "createdAt": "2020-08-10T13:21:45Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; \n+\n+\tpublic Integer getOrderGroupAttributeId() {\n+\t\treturn orderGroupAttributeId;\n+\t}\n+\tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n+\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t}\n+\n+\t/**\n+\t * @return the orderGroup\n+\t */\n+\tpublic OrderGroup getOrderGroup(){\n+\t\t\n+\t\treturn getOwner();\n+\t}\n+\t/**\n+\t * @param orderGroup the orderGroup to set\n+\t */\n+\tpublic void setOrderGroup(OrderGroup orderGroup){\n+\t\t\n+\t\tsetOwner(orderGroup);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#getId()\n+\t */\n+\t@Override\n+\tpublic Integer getId() {\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5OTMxNQ==", "bodyText": "An empty line between the class and property declaration would be great.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467899315", "createdAt": "2020-08-10T13:22:58Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttributeType.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.AttributeType;\n+import org.openmrs.attribute.BaseAttributeType;\n+\n+import java.util.Date;\n+\n+public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> implements AttributeType<OrderGroup> {\n+\tprivate Integer orderGroupAttributeTypeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTAwNA==", "bodyText": "Adding some spaces around variables in the if statement would be great.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467901004", "createdAt": "2020-08-10T13:25:24Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTY1NA==", "bodyText": "Same as above", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467901654", "createdAt": "2020-08-10T13:26:27Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "committedDate": "2020-08-11T07:37:53Z", "message": "TRUNK-5410:Added appropriate spacing in OrderGroupAttribute , OrderGroupAttributeType and spaces around if-statement variables in HibernateOrderDAO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjc3OTgx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466277981", "createdAt": "2020-08-12T21:07:01Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowNzowMlrOG_y5Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowNzowMlrOG_y5Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzI2Ng==", "bodyText": "Did you intentionally make this public?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469547266", "createdAt": "2020-08-12T21:07:02Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjc4NjA0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466278604", "createdAt": "2020-08-12T21:08:05Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowODowNVrOG_y6_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowODowNVrOG_y6_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Nzc3NA==", "bodyText": "Can you put space around the equal sign?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469547774", "createdAt": "2020-08-12T21:08:05Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; \n+\n+\tpublic Integer getOrderGroupAttributeId() {\n+\t\treturn orderGroupAttributeId;\n+\t}\n+\t\n+\tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n+\t\tthis.orderGroupAttributeId=orderGroupAttributeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjc5Mzky", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466279392", "createdAt": "2020-08-12T21:09:19Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowOToyMFrOG_y9Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowOToyMFrOG_y9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODM2Nw==", "bodyText": "Can you use proper english for the description instead of? OrderGroupAttributeTypes", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548367", "createdAt": "2020-08-12T21:09:20Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjc5NzI0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466279724", "createdAt": "2020-08-12T21:09:53Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowOTo1M1rOG_y-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowOTo1M1rOG_y-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODYwOA==", "bodyText": "Same for orderGroup", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548608", "createdAt": "2020-08-12T21:09:53Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjgwMDI0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466280024", "createdAt": "2020-08-12T21:10:23Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxMDoyM1rOG_y_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxMDoyM1rOG_y_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODg2MA==", "bodyText": "Same as above. OrderGroupAttributeType", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548860", "createdAt": "2020-08-12T21:10:23Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches OrderGroupAttributeType using provided Id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjgwNDA5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-466280409", "createdAt": "2020-08-12T21:11:01Z", "commit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxMTowMVrOG_zAbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxMTowMVrOG_zAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0OTE2NA==", "bodyText": "Same as above in all these.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469549164", "createdAt": "2020-08-12T21:11:01Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches OrderGroupAttributeType using provided Id\n+\t * \n+\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84064ccddfab38a6b4864d82088d9f667faf567", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/e84064ccddfab38a6b4864d82088d9f667faf567", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3adaa6604f0e9130e680d37e5ae4c755b1f1c1f", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/c3adaa6604f0e9130e680d37e5ae4c755b1f1c1f", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410 Added hbm Mapping Files and added them to cfg file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd9d0f5d353d08a6ae052dc566931c1ac8289d4", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7cd9d0f5d353d08a6ae052dc566931c1ac8289d4", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08cbf1c54a47264824446ccdbe1d65ca7f310669", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/08cbf1c54a47264824446ccdbe1d65ca7f310669", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3add9c9a487b278a2acd0e4f99285f781fa43b03", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/3add9c9a487b278a2acd0e4f99285f781fa43b03", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c7c6b4052b68395a1fc537dad7b6c81e80c1aa1", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/0c7c6b4052b68395a1fc537dad7b6c81e80c1aa1", "committedDate": "2020-08-18T08:39:25Z", "message": "TRUNK-5410:Did more refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8934baa0a1ea02e2848884ef2f069ea5f4049734", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/8934baa0a1ea02e2848884ef2f069ea5f4049734", "committedDate": "2020-08-18T10:34:58Z", "message": "TRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bc8cb4ddbfe19b1e0728bd305adfcac8b88d89", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/26bc8cb4ddbfe19b1e0728bd305adfcac8b88d89", "committedDate": "2020-08-18T10:35:00Z", "message": "TRUNK-5410:Added more Tests to OrderServiceimpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9697061e6b6f32be4453bd1f8c439c7dadb39e63", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/9697061e6b6f32be4453bd1f8c439c7dadb39e63", "committedDate": "2020-08-18T10:36:19Z", "message": "Added more Tests for new Changes to HibernateOrderDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e8d170a30b52711422929ad578c4830f6d133eb", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/5e8d170a30b52711422929ad578c4830f6d133eb", "committedDate": "2020-08-18T10:36:44Z", "message": "TRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3c09e57bff9c26f48e6df43112fbff611fe583", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/4c3c09e57bff9c26f48e6df43112fbff611fe583", "committedDate": "2020-08-18T10:37:15Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32fbfdcf744656371b9fd4a411cbf2eea85e2837", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/32fbfdcf744656371b9fd4a411cbf2eea85e2837", "committedDate": "2020-08-18T10:38:27Z", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0061f3190e0e08ed890b52d4d74eebae610cf4b", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/a0061f3190e0e08ed890b52d4d74eebae610cf4b", "committedDate": "2020-08-18T10:38:28Z", "message": "TRUNK-5410: Altered Changeset Numbers in DatabaseUpdaterDatabaseIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0c16984779c96b71ae0237899d8d65717f6416", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/cc0c16984779c96b71ae0237899d8d65717f6416", "committedDate": "2020-08-18T10:38:41Z", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af6244ca3683e462fa83209b97745afdabc9d5a", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/1af6244ca3683e462fa83209b97745afdabc9d5a", "committedDate": "2020-08-18T10:38:42Z", "message": "TRUNK-5410:Removed unneccsarry docs from HibernateOrderDao ,Added Javadocs to OrderService Methods,Removed wildcards from OrderServiceImpl.java and unnecessary TODO'S ,Documented param types and method descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0140aa5aabc889a1c99e4ef6c0bf1b3e32b3ed58", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/0140aa5aabc889a1c99e4ef6c0bf1b3e32b3ed58", "committedDate": "2020-08-18T10:39:20Z", "message": "TRUNK-5410:Added unit tests to OrderServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a68bedbab045df6535d9f53d91bc2b028f91726", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/2a68bedbab045df6535d9f53d91bc2b028f91726", "committedDate": "2020-08-18T10:39:51Z", "message": "TRUNK-5410:Re-ordered imports format in OrderServiceTest and HibernateOrderDAOTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e649b34ae2cc0835c0d4e28403c2e688f74d06", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/d8e649b34ae2cc0835c0d4e28403c2e688f74d06", "committedDate": "2020-08-18T10:39:51Z", "message": "TRUNK-5410:Added appropriate spacing in OrderGroupAttribute , OrderGroupAttributeType and spaces around if-statement variables in HibernateOrderDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1edee5e443cc27a9ec83ef7f0646e11de03f2564", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/1edee5e443cc27a9ec83ef7f0646e11de03f2564", "committedDate": "2020-08-18T10:39:51Z", "message": "TRUNK-5410 : Altered Javadocs decriptions in OrderService , and added spaces around expressions in OrderGroupAttribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b25c4c652aa0e0f5e9d695416368b4cf4fdd874", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/3b25c4c652aa0e0f5e9d695416368b4cf4fdd874", "committedDate": "2020-08-19T12:05:14Z", "message": "TRUNK-5410:Fixing merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7774dac39912692f3cf305bb660f5a13c12c62bb", "committedDate": "2020-08-20T13:48:20Z", "message": "TRUNK-5410:Fixing more Conflicting Changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDA2Nzcz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472006773", "createdAt": "2020-08-20T21:43:28Z", "commit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0MzoyOFrOHEUUzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0MzoyOFrOHEUUzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw==", "bodyText": "I would remove these checks for the null or empty parameter to throw an exception.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289357", "createdAt": "2020-08-20T21:43:28Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDA2OTQ5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472006949", "createdAt": "2020-08-20T21:43:50Z", "commit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0Mzo1MFrOHEUVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0Mzo1MFrOHEUVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTQ5MQ==", "bodyText": "I would remove this too.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289491", "createdAt": "2020-08-20T21:43:50Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDA3MDk0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472007094", "createdAt": "2020-08-20T21:44:05Z", "commit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0NDowNVrOHEUVww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0NDowNVrOHEUVww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTYwMw==", "bodyText": "I would remove this too.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289603", "createdAt": "2020-08-20T21:44:05Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\t\treturn (OrderGroupAttributeType) sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).add(\n+\t\t\tRestrictions.eq(\"uuid\",uuid)).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#saveOrderGroupAttributeType(org.openmrs.OrderGroupAttributeType)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType)throws DAOException {\n+\t\tsessionFactory.getCurrentSession().saveOrUpdate(orderGroupAttributeType);\n+\t\treturn orderGroupAttributeType;\n+\t}\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#deleteOrderGroupAttributeType(org.openmrs.OrderGroupAttributeType)\n+\t */\n+\t@Override\n+\tpublic void deleteOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws DAOException{\n+\t\tif(orderGroupAttributeType == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "committedDate": "2020-08-21T12:05:12Z", "message": "TRUNK-5410:Removed unnecessary checks for  the null or empty parameters from some HibernateOrderDAO methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMjY1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961265", "createdAt": "2020-08-22T20:48:33Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0ODozNFrOHFIEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0ODozNFrOHFIEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzAzOQ==", "bodyText": "Would be great to leave a line in between.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137039", "createdAt": "2020-08-22T20:48:34Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -41,7 +43,8 @@\n \tprivate static final String ORDER_SET = \"org/openmrs/api/include/OrderSetServiceTest-general.xml\";\n \t\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n-\n+     \n+\tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMjkz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961293", "createdAt": "2020-08-22T20:49:03Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTowM1rOHFIEOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTowM1rOHFIEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzA4MA==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137080", "createdAt": "2020-08-22T20:49:03Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/resources/org/openmrs/api/include/OrderServiceTest-createOrderGroupAttributes.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    This Source Code Form is subject to the terms of the Mozilla Public License,\n+    v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+    obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+    the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+    \n+    Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+    graphic logo is a trademark of OpenMRS Inc.\n+    \n+-->\n+\n+<dataset>\n+\t<order_group order_group_id=\"1\"  patient_id=\"7\" encounter_id=\"3\"   creator=\"1\" date_created=\"2012-02-19 12:24:10.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb613\" />\n+\t<order_group order_group_id=\"2\"  patient_id=\"8\" encounter_id=\"4\"   creator=\"1\" date_created=\"2012-02-19 12:24:10.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb714\" />\n+\t<order_group order_group_id=\"3\"  patient_id=\"7\" encounter_id=\"3\"   creator=\"1\" date_created=\"2012-02-19 12:24:10.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb425\" />\n+\t<order_group order_group_id=\"4\"  patient_id=\"2\" encounter_id=\"6\"   creator=\"1\" date_created=\"2012-01-01 00:00:00.0\" voided=\"false\" uuid=\"1c96f25c-4949-4f72-9931-d808fbcdb142\" />\n+\n+\t<order_group_attribute_type order_group_attribute_type_id=\"1\" name=\"Stool\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"false\" uuid=\"9cf1b9de-d18e-11ea-87d0-0242ac130003\"/>\n+<order_group_attribute_type order_group_attribute_type_id=\"2\" name=\"Virology\" min_occurs=\"5\" creator=\"1\" date_created=\"2020-07-29 14:33:10.0\" retired=\"false\"  retired_by=\"0\"  uuid=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMjk5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961299", "createdAt": "2020-08-22T20:49:13Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OToxM1rOHFIEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OToxM1rOHFIEPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzA4NQ==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137085", "createdAt": "2020-08-22T20:49:13Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME,newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t\tassertEquals(UUID4,newOrderGroupAttributeType.getUuid());\n+    }\n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tString uuid = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzA5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961309", "createdAt": "2020-08-22T20:49:24Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OToyNFrOHFIEXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OToyNFrOHFIEXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzExOA==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137118", "createdAt": "2020-08-22T20:49:24Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzE2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961316", "createdAt": "2020-08-22T20:49:34Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTozNFrOHFIEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTozNFrOHFIEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzEzNQ==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137135", "createdAt": "2020-08-22T20:49:34Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzIy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961322", "createdAt": "2020-08-22T20:49:48Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTo0OFrOHFIEgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTo0OFrOHFIEgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE1Mw==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137153", "createdAt": "2020-08-22T20:49:48Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted\n+\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\t\t}\n+\t\t\t@Test\n+\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderService orderService = Context.getOrderService();\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+                assertTrue(orderGroupAttributeType.getRetired());\n+                assertNotNull(orderGroupAttributeType.getRetiredBy());\n+                assertNotNull(orderGroupAttributeType.getDateRetired());\n+                assertNotNull(orderGroupAttributeType.getRetireReason());\n+                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzI4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961328", "createdAt": "2020-08-22T20:49:52Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTo1MlrOHFIEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo0OTo1MlrOHFIEhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE1OA==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137158", "createdAt": "2020-08-22T20:49:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted\n+\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\t\t}\n+\t\t\t@Test\n+\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderService orderService = Context.getOrderService();\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+                assertTrue(orderGroupAttributeType.getRetired());\n+                assertNotNull(orderGroupAttributeType.getRetiredBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzQ2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961346", "createdAt": "2020-08-22T20:50:20Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDoyMFrOHFIErg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDoyMFrOHFIErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE5OA==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137198", "createdAt": "2020-08-22T20:50:20Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzUz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961353", "createdAt": "2020-08-22T20:50:30Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDozMVrOHFIEsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDozMVrOHFIEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzIwMg==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137202", "createdAt": "2020-08-22T20:50:31Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTYxMzY1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-472961365", "createdAt": "2020-08-22T20:50:42Z", "commit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDo0MlrOHFIEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMDo1MDo0MlrOHFIEzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzIyOQ==", "bodyText": "Did you intentionally tab this way?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137229", "createdAt": "2020-08-22T20:50:42Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4"}, "originalPosition": 210}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f5a56716348ac044294e432881e006408845ee", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/22f5a56716348ac044294e432881e006408845ee", "committedDate": "2020-08-24T02:15:56Z", "message": "TRUNK-5410:Removin unnecessary indents and spaces from HibernateOrderDAOTest ,OrderServiceTest-createOrderGroupAttributes.xml  and OrderServiceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "465611723ea6dc0e973fdc2667ff1036db91d93b", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/465611723ea6dc0e973fdc2667ff1036db91d93b", "committedDate": "2020-08-24T02:25:31Z", "message": "TRUNK-5410:Removing unnecessary indents and spaces from HibernateOrderDAOTest ,OrderServiceTest-createOrderGroupAttributes.xml  and OrderServiceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7675e4eb3781efff413a40ac4c3316892213fa35", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/7675e4eb3781efff413a40ac4c3316892213fa35", "committedDate": "2020-08-24T02:28:46Z", "message": "Merge branch 'master' of https://github.com/tendomart/openmrs-core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d33ba94ffef65f11bc17240f630fb2aafddcb14b", "author": {"user": {"login": "tendomart", "name": "tendomart"}}, "url": "https://github.com/openmrs/openmrs-core/commit/d33ba94ffef65f11bc17240f630fb2aafddcb14b", "committedDate": "2020-08-24T02:35:55Z", "message": "TRUNK-5410:Removing unused import in HibernateOrderDAOTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDk4MDE3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476498017", "createdAt": "2020-08-27T08:28:56Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyODo1NlrOHIF4Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyODo1NlrOHIF4Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0Njk5NA==", "bodyText": "Why capital F in Fetch?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478246994", "createdAt": "2020-08-27T08:28:56Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDk5NDM3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476499437", "createdAt": "2020-08-27T08:30:41Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMDo0MVrOHIF8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMDo0MVrOHIF8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODA3MA==", "bodyText": "Would be nice to put space after the comma.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478248070", "createdAt": "2020-08-27T08:30:41Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTAwMTMx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476500131", "createdAt": "2020-08-27T08:31:34Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMTozNFrOHIF-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMTozNFrOHIF-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODYxMg==", "bodyText": "Can we also document the reason param?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478248612", "createdAt": "2020-08-27T08:31:34Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTAxNzUz", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476501753", "createdAt": "2020-08-27T08:33:42Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMzo0M1rOHIGDkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMzo0M1rOHIGDkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0OTg3Mg==", "bodyText": "a or an?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478249872", "createdAt": "2020-08-27T08:33:43Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTAyODQy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476502842", "createdAt": "2020-08-27T08:35:07Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNTowOFrOHIGG0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNTowOFrOHIGG0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MDcwNg==", "bodyText": "a or an?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478250706", "createdAt": "2020-08-27T08:35:08Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTAzNTE2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476503516", "createdAt": "2020-08-27T08:35:58Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNTo1OFrOHIGIsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNTo1OFrOHIGIsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTE4Ng==", "bodyText": "Why capital P in Provided?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478251186", "createdAt": "2020-08-27T08:35:58Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n+\t */\n+    @Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n+    \n+\t/**\n+\t * Fetches a given order group attribute  using the Provided Uuid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTA3NzM3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476507737", "createdAt": "2020-08-27T08:41:32Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MTozMlrOHIGWDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MTozMlrOHIGWDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDYwNg==", "bodyText": "Why capital U in Uuid?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478254606", "createdAt": "2020-08-27T08:41:32Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n+\t */\n+    @Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n+    \n+\t/**\n+\t * Fetches a given order group attribute  using the Provided Uuid\n+\t * \n+\t * @param uuid The Uuid of the order group attribute to fetch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTA4ODg4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476508888", "createdAt": "2020-08-27T08:43:00Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MzowMFrOHIGZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MzowMFrOHIGZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ==", "bodyText": "Should the method name end with ById?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478255481", "createdAt": "2020-08-27T08:43:00Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/OrderDAO.java", "diffHunk": "@@ -269,4 +270,40 @@\n \t * @see org.openmrs.api.OrderService#getOrderGroupsByEncounter(Encounter)\n \t */\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws DAOException;\n+\t\n+\t/**\n+\t * @see  org.openmrs.api.OrderService#getOrderGroupAttributeByUuid(String)\n+\t */\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws DAOException;\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t */\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes()throws DAOException;\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById(Integer)\n+\t */\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id)throws DAOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTEwNzQx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476510741", "createdAt": "2020-08-27T08:45:23Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0NToyM1rOHIGfNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0NToyM1rOHIGfNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1Njk0OA==", "bodyText": "Shouldn't this be getAllOrderGroupAttributeTypes?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478256948", "createdAt": "2020-08-27T08:45:23Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTE0MDcw", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476514070", "createdAt": "2020-08-27T08:49:39Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0OTozOVrOHIGpbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0OTozOVrOHIGpbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTU2Nw==", "bodyText": "Should the method name end with ById?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478259567", "createdAt": "2020-08-27T08:49:39Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,65 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTE3MDM3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476517037", "createdAt": "2020-08-27T08:53:39Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1MzozOVrOHIGyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1MzozOVrOHIGyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MTk0NQ==", "bodyText": "Shouldn't this also use Context.getOrderService()?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478261945", "createdAt": "2020-08-27T08:53:39Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -1084,4 +1088,75 @@ public OrderGroup getOrderGroup(Integer orderGroupId) throws APIException {\n \t\treturn dao.getOrderGroupsByEncounter(encounter);\n \t}\n \t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t */\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\t\treturn dao.getAllOrderGroupAttributeTypes();\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException {\n+\t\treturn dao.getOrderGroupAttributeType(id);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeByUuid()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid)throws APIException {\n+\t\treturn dao.getOrderGroupAttributeTypeByUuid(uuid);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#saveOrderGroupAttributeType()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException{\n+\t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#retireOrderGroupAttributeType()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType, String reason)throws APIException {\n+\t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTE5NTQx", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476519541", "createdAt": "2020-08-27T08:56:51Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1Njo1MlrOHIG6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1Njo1MlrOHIG6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2Mzk1NA==", "bodyText": "What are we using this for?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478263954", "createdAt": "2020-08-27T08:56:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -28,14 +28,85 @@\n \t\tSee http://www.liquibase.org/manual/home#available_database_refactorings\n \t\tfor a list of supported elements and attributes\n \t-->\n+\t<changeSet id=\"TRUNK-5410\" author=\"tendomart\">\n+\t\t<comment>Creating order_group_attribute_type table</comment>\n+\t\t<createTable tableName=\"order_group_attribute_type\">\n+\t\t\t<column name=\"order_group_attribute_type_id\" type=\"int\" autoIncrement=\"true\">\n+\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"name\" type=\"varchar(255)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\"/>\n+\t\t\t</column>\n+\t\t\t<column name=\"description\" type=\"varchar(1024)\" />\n+\t\t\t<column name=\"datatype\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"datatype_config\" type=\"text\" />\n+\t\t\t<column name=\"preferred_handler\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"handler_config\" type=\"text\" />\n+\t\t\t<column name=\"min_occurs\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"max_occurs\" type=\"int\"></column>\n+\t\t\t<column name=\"creator\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"date_created\" type=\"datetime\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"changed_by\" type=\"int\" />\n+\t\t\t<column name=\"date_changed\" type=\"datetime\" />\n+\t\t\t<column name=\"retired\" type=\"boolean\" defaultValueBoolean=\"false\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"retired_by\" type=\"int\" />\n+\t\t\t<column name=\"date_retired\" type=\"datetime\" />\n+\t\t\t<column name=\"retire_reason\" type=\"varchar(255)\" defaultValue=\"null\" />\n+\t\t\t<column name=\"uuid\" type=\"char(38)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\" />\n+\t\t\t</column>\n+\t\t</createTable>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_creator_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"creator\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_changed_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"changed_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_retired_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"retired_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<modifySql dbms=\"mssql\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTIxODM2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476521836", "createdAt": "2020-08-27T08:59:43Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1OTo0M1rOHIHBgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1OTo0M1rOHIHBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NTcyOQ==", "bodyText": "But the precondition says order_group_reason instead of previous_order_group", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478265729", "createdAt": "2020-08-27T08:59:43Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -28,14 +28,85 @@\n \t\tSee http://www.liquibase.org/manual/home#available_database_refactorings\n \t\tfor a list of supported elements and attributes\n \t-->\n+\t<changeSet id=\"TRUNK-5410\" author=\"tendomart\">\n+\t\t<comment>Creating order_group_attribute_type table</comment>\n+\t\t<createTable tableName=\"order_group_attribute_type\">\n+\t\t\t<column name=\"order_group_attribute_type_id\" type=\"int\" autoIncrement=\"true\">\n+\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"name\" type=\"varchar(255)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\"/>\n+\t\t\t</column>\n+\t\t\t<column name=\"description\" type=\"varchar(1024)\" />\n+\t\t\t<column name=\"datatype\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"datatype_config\" type=\"text\" />\n+\t\t\t<column name=\"preferred_handler\" type=\"varchar(255)\" />\n+\t\t\t<column name=\"handler_config\" type=\"text\" />\n+\t\t\t<column name=\"min_occurs\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"max_occurs\" type=\"int\"></column>\n+\t\t\t<column name=\"creator\" type=\"int\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"date_created\" type=\"datetime\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"changed_by\" type=\"int\" />\n+\t\t\t<column name=\"date_changed\" type=\"datetime\" />\n+\t\t\t<column name=\"retired\" type=\"boolean\" defaultValueBoolean=\"false\">\n+\t\t\t\t<constraints nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"retired_by\" type=\"int\" />\n+\t\t\t<column name=\"date_retired\" type=\"datetime\" />\n+\t\t\t<column name=\"retire_reason\" type=\"varchar(255)\" defaultValue=\"null\" />\n+\t\t\t<column name=\"uuid\" type=\"char(38)\">\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\" />\n+\t\t\t</column>\n+\t\t</createTable>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_creator_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"creator\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_changed_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"changed_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_type_retired_by_fk\" baseTableName=\"order_group_attribute_type\" baseColumnNames=\"retired_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\"/>\n+\t\t<modifySql dbms=\"mssql\">\n+\t\t\t<replace replace=\"CHAR(38)\" with=\"UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()\"/>\n+\t\t</modifySql>\n+\t</changeSet>\n+\t\n+\t<changeSet id=\"20200723-TRUNK-5410\" author=\"tendomart\">\n+\t\t<comment>Creating order_group_attribute table</comment>\n+\t\t<createTable tableName=\"order_group_attribute\">\n+\t\t\t<column name=\"order_group_attribute_id\" type=\"int\" autoIncrement=\"true\">\n+\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"order_group_id\" type=\"int\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"attribute_type_id\" type=\"int\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"value_reference\" type=\"text\"><constraints nullable=\"false\" /></column>\n+\t\t\t<column name=\"uuid\" type=\"char(38)\"><constraints nullable=\"false\" unique=\"true\" /></column>\n+\t\t\t<column name=\"creator\" type=\"int\"><constraints nullable=\"false\"/></column>\n+\t\t\t<column name=\"date_created\" type=\"datetime\"><constraints nullable=\"false\"/></column>\n+\t\t\t<column name=\"changed_by\" type=\"int\"/>\n+\t\t\t<column name=\"date_changed\" type=\"datetime\" />\n+\t\t\t<column name=\"voided\" type=\"boolean\" defaultValueBoolean=\"false\">\n+\t\t\t\t<constraints nullable=\"false\"/>\n+\t\t\t</column>\n+\t\t\t<column name=\"voided_by\" type=\"int\" />\n+\t\t\t<column name=\"date_voided\" type=\"datetime\" />\n+\t\t\t<column name=\"void_reason\" type=\"varchar(255)\" defaultValue=\"null\"/>\n+\t\t</createTable>\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_order_group_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"order_group_id\" referencedTableName=\"order_group\" referencedColumnNames=\"order_group_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_attribute_type_id_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"attribute_type_id\" referencedTableName=\"order_group_attribute_type\" referencedColumnNames=\"order_group_attribute_type_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_creator_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"creator\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_changed_by_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"changed_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t\t<addForeignKeyConstraint constraintName=\"order_group_attribute_voided_by_fk\" baseTableName=\"order_group_attribute\" baseColumnNames=\"voided_by\" referencedTableName=\"users\" referencedColumnNames=\"user_id\" />\n+\t</changeSet>\n \n \t<changeSet id=\"20190815-Trunk-5412\" author=\"gitacliff\">\n \t\t<preConditions onFail=\"MARK_RAN\">\n \t\t\t<not>\n \t\t\t\t<columnExists tableName=\"order_group\" columnName=\"order_group_reason\"/>\t\t\t\t\n \t\t\t</not>\n \t\t</preConditions>\n-\t\t<comment>Adding \"order_group_reason\" column to order_group table</comment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTIzMTE5", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476523119", "createdAt": "2020-08-27T09:01:20Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMToyMFrOHIHFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMToyMFrOHIHFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NjY4MA==", "bodyText": "It would be great to put spaces around the = sign.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478266680", "createdAt": "2020-08-27T09:01:20Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTIzMjg2", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476523286", "createdAt": "2020-08-27T09:01:33Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMTozM1rOHIHFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMTozM1rOHIHFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NjgwNg==", "bodyText": "Would also be great to put space after the comma in method parameters.", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478266806", "createdAt": "2020-08-27T09:01:33Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTI0MDE1", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476524015", "createdAt": "2020-08-27T09:02:28Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMjoyOFrOHIHH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowMjoyOFrOHIHH0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NzM0Ng==", "bodyText": "What does NonExistingId mean?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478267346", "createdAt": "2020-08-27T09:02:28Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTI1MzYy", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476525362", "createdAt": "2020-08-27T09:04:10Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowNDoxMVrOHIHLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowNDoxMVrOHIHLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2ODMwNw==", "bodyText": "Can you take a look at existing tests in core that test for returning an item by id?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478268307", "createdAt": "2020-08-27T09:04:11Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTI3Njc3", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476527677", "createdAt": "2020-08-27T09:07:20Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowNzoyMFrOHIHS1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowNzoyMFrOHIHS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDE2Ng==", "bodyText": "What is the use of these constants if you are using them in only one place?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478270166", "createdAt": "2020-08-27T09:07:20Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTI4NDI4", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476528428", "createdAt": "2020-08-27T09:08:18Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowODoxOFrOHIHU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowODoxOFrOHIHU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ==", "bodyText": "What value does assertEquals and then assertNotEquals name add?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478270709", "createdAt": "2020-08-27T09:08:18Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTI5NjA0", "url": "https://github.com/openmrs/openmrs-core/pull/3399#pullrequestreview-476529604", "createdAt": "2020-08-27T09:09:49Z", "commit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowOTo0OVrOHIHYag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTowOTo0OVrOHIHYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA==", "bodyText": "Is this test about retiring?", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478271594", "createdAt": "2020-08-27T09:09:49Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8"}, "originalPosition": 217}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4574, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}